var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AllExceptionsFilter.html",[0,0.143,1,3.343]],["body/classes/AllExceptionsFilter.html",[0,0.217,1,5.926,2,1.086,3,0.184,4,0.169,5,0.122,6,6.542,7,4.354,8,0.505,9,4.367,10,4.316,11,3.271,12,4.34,13,2.741,14,5.098,15,3.881,16,5.098,17,0.374,18,1.123,19,3.509,20,6.732,21,1.629,22,1.789,23,3.944,24,0.949,25,4.976,26,2.958,27,3.877,28,1.398,29,0.012,30,0.985,31,0.505,32,1.123,33,2.168,34,3.147,35,5.613,36,4.976,37,4.105,38,4.097,39,4.959,40,4.976,41,4.105,42,2.381,43,4.792,44,2.381,45,5.076,46,5.076,47,4.105,48,2.78,49,2.518,50,3.352,51,1.053,52,2.727,53,0.532,54,4.105,55,2.494,56,0.901,57,3.189,58,2.494,59,0.184,60,1.594,61,3.944,62,5.603,63,4.976,64,4.354,65,1.742,66,3.189,67,3.189,68,3.189,69,3.393,70,2.464,71,3.944,72,3.637,73,3.637,74,3.637,75,3.189,76,3.637,77,1.388,78,3.944,79,1.982,80,3.393,81,2.211,82,4.976,83,4.354,84,3.637,85,1.914,86,3.944,87,0.009,88,0.009]],["title/modules/ApiModule.html",[89,0.716,90,2.876]],["body/modules/ApiModule.html",[0,0.263,3,0.186,4,0.17,5,0.184,8,0.46,9,5.116,11,3.466,29,0.012,44,2.396,47,4.13,53,0.606,56,0.909,57,3.22,59,0.186,85,2.887,87,0.009,88,0.009,89,1.414,90,5.837,91,3.203,92,2.15,93,2.518,94,2.518,95,2.32,96,2.976,97,2.518,98,4.395,99,4.395,100,5.413,101,5.413,102,5.413,103,5.413,104,3.229,105,2.518,106,2.15,107,5.024,108,6.444,109,6.444,110,5.485,111,4.13,112,3.706,113,3.097,114,3.163,115,5.638,116,4.393,117,5.107,118,5.638,119,6.444,120,3.229,121,2.589,122,5.804,123,3.904,124,5.638,125,4.71,126,5.024,127,5.024,128,5.024,129,5.024,130,5.024,131,5.024,132,1.806,133,4.809,134,2.32,135,2.518,136,3.981,137,3.672,138,4.395]],["title/controllers/AppController.html",[139,1.623,140,3.084]],["body/controllers/AppController.html",[0,0.244,3,0.251,4,0.153,5,0.166,8,0.483,13,1.938,17,0.34,19,3.706,21,1.531,22,1.628,24,0.607,26,2.091,27,2.269,29,0.012,44,2.238,47,3.858,49,2.428,51,1.274,53,0.564,56,0.82,59,0.168,60,1.355,70,3.077,79,1.803,85,2.316,87,0.008,88,0.008,89,0.769,112,3.463,113,2.485,114,2.398,120,2.269,121,1.963,132,1.628,139,2.888,140,5.757,141,1.869,142,3.961,143,1.963,144,6.768,145,6.135,146,3.647,147,2.165,148,3.252,149,5.267,150,3.299,151,4.944,152,4.944,153,4.53,154,3.466,155,5.269,156,2.895,157,7.209,158,1.302,159,4.527,160,4.527,161,4.81,162,5.267,163,6.02,164,4.915,165,5.267,166,1.95,167,6.02,168,3.89,169,3.151,170,3.467,171,3.463,172,6.02,173,2.743,174,1.386,175,6.02,176,7.506,177,3.309,178,5.267,179,4.527,180,2.901,181,4.527,182,3.961,183,2.604,184,2.37,185,4.527,186,1.938,187,2.316,188,4.527,189,3.588,190,3.588,191,3.858,192,2.238,193,5.267,194,2.743,195,3.588,196,3.309,197,4.527,198,3.588,199,4.527,200,0.901,201,4.527,202,4.527]],["title/modules/AppModule.html",[89,0.716,203,2.876]],["body/modules/AppModule.html",[0,0.268,3,0.198,4,0.181,5,0.18,8,0.477,29,0.012,44,2.851,47,4.287,53,0.631,56,0.965,59,0.198,65,1.199,87,0.009,88,0.009,89,1.368,90,5.496,91,3.018,92,2.281,93,2.67,94,2.67,95,2.461,96,2.461,97,2.67,104,3.352,105,2.67,106,2.281,114,2.664,115,5.852,117,5.301,123,4.053,132,1.916,140,5.344,141,2.761,144,5.301,151,3.895,152,4.889,154,3.216,186,2.863,203,5.793,204,4.662,205,4.662,206,4.884,207,4.662,208,5.301,209,5.852,210,3.501,211,2.664,212,4.287,213,4.561,214,5.301,215,4.223,216,2.67,217,6.689,218,4.889,219,4.223,220,4.287,221,4.662,222,5.301,223,5.329,224,4.053,225,4.662,226,5.329,227,5.329,228,5.344,229,4.662,230,5.329,231,5.329,232,1.795,233,5.329,234,5.329,235,5.329]],["title/classes/BadRequestExceptionFilter.html",[0,0.143,236,3.343]],["body/classes/BadRequestExceptionFilter.html",[0,0.215,2,0.87,3,0.148,4,0.135,5,0.098,8,0.488,10,3.759,11,2.549,12,3.935,13,2.363,15,3.47,16,4.662,17,0.299,18,0.968,19,3.024,20,6.533,21,1.404,22,1.432,23,3.157,24,0.916,26,2.549,27,3.599,28,1.383,29,0.012,30,0.974,31,0.488,32,1.11,33,1.939,34,2.815,35,5.019,37,3.537,38,3.747,39,4.602,41,3.537,42,2.052,43,4.382,44,2.052,45,4.374,46,4.374,47,3.537,48,2.355,49,2.303,50,2.889,51,1.341,52,2.183,53,0.583,55,1.996,56,0.721,57,2.553,58,1.996,59,0.148,60,1.539,61,3.157,65,1.815,66,2.553,67,2.553,68,2.553,69,2.716,71,3.157,72,2.912,75,3.537,77,1.907,80,3.763,85,2.123,87,0.008,88,0.008,113,1.644,120,1.996,191,4.059,195,6.39,236,5.419,237,6.282,238,3.485,239,2.889,240,5.52,241,5.52,242,3.984,243,3.984,244,5.52,245,7.617,246,3.984,247,2.766,248,3.537,249,4.273,250,3.889,251,6.838,252,2.363,253,5.52,254,3.984,255,3.485,256,1.481,257,2.413,258,2.413,259,5.541,260,3.485,261,2.204,262,3.984,263,3.984,264,3.984,265,3.984,266,3.485,267,3.984,268,3.984,269,3.984,270,5.52,271,3.984,272,3.984,273,3.984,274,2.183,275,3.157,276,3.485,277,3.485,278,3.984,279,1.84,280,2.413,281,3.984,282,3.984,283,3.984,284,3.537,285,7.765,286,4.374,287,5.419,288,3.485,289,5.419,290,3.984,291,4.829,292,5.52,293,4.374,294,3.485,295,2.553,296,3.485,297,3.485,298,3.485,299,3.485,300,3.485,301,3.485,302,3.984,303,3.485,304,3.485,305,0.953,306,3.984,307,3.984,308,3.984,309,2.278,310,3.984]],["title/injectables/CommaSeparated.html",[311,1.291,312,3.084]],["body/injectables/CommaSeparated.html",[0,0.25,3,0.161,4,0.147,5,0.106,8,0.472,15,3.88,17,0.325,21,1.487,24,0.783,28,1.276,29,0.012,30,1.089,31,0.417,32,1.025,51,1.676,53,0.439,56,0.784,59,0.262,60,1.665,65,1.594,81,3.147,85,2.725,87,0.008,88,0.008,156,2.502,196,4.272,200,1.409,232,2.385,239,3.463,249,4.48,256,2.633,309,2.73,311,2.025,312,5.176,313,2.001,314,3.433,315,5.243,316,1.144,317,4.883,318,6.196,319,6.196,320,3.88,321,5.176,322,5.114,323,3.707,324,5.114,325,7.16,326,4.332,327,2.81,328,6.929,329,5.042,330,5.114,331,4.332,332,4.008,333,5.243,334,2.71,335,5.114,336,5.243,337,4.739,338,5.243,339,4.077,340,5.788,341,6.47,342,3.203,343,3.362,344,2.929,345,3.362,346,2.328,347,4.632,348,4.632,349,4.632,350,5.114,351,3.79,352,3.79,353,3.79,354,3.79,355,3.79,356,3.818,357,4.718,358,3.541,359,3.805,360,2.953,361,2.953,362,3.79,363,2.776,364,3.166,365,3.79,366,2.171,367,3.79,368,3.79,369,3.79,370,2.624,371,5.114,372,2.624,373,3.79,374,2.001,375,3.79,376,3.79,377,3.79,378,3.79,379,3.79,380,3.79,381,3.79,382,3.433,383,2.776]],["title/classes/ConfigService.html",[0,0.143,384,2.114]],["body/classes/ConfigService.html",[0,0.223,2,0.696,3,0.118,4,0.108,5,0.078,17,0.24,19,4.096,21,1.198,22,2.012,24,0.924,28,1.222,29,0.012,30,0.95,31,0.441,32,0.981,38,1.748,51,1.185,53,0.592,59,0.175,65,1.391,79,1.876,87,0.006,88,0.006,154,1.534,187,1.227,200,1.594,218,3.442,220,2.045,224,1.933,228,2.332,232,1.586,256,1.186,316,1.143,337,3.018,339,2.929,342,1.748,343,1.835,344,1.599,345,1.835,346,1.271,384,2.805,385,2.528,386,4.709,387,4.709,388,4.709,389,5.653,390,4.896,391,3.19,392,4.12,393,3.19,394,2.229,395,4.12,396,3.19,397,4.12,398,3.19,399,1.513,400,3.19,401,3.19,402,3.19,403,3.19,404,1.933,405,3.442,406,3.303,407,3.185,408,2.332,409,4.435,410,1.933,411,1.835,412,3.018,413,2.791,414,3.21,415,2.791,416,3.21,417,2.791,418,3.21,419,2.791,420,3.21,421,2.791,422,3.21,423,2.791,424,2.791,425,2.175,426,2.791,427,3.21,428,2.791,429,3.21,430,2.791,431,3.21,432,2.791,433,2.791,434,1.933,435,2.175,436,2.465,437,3.442,438,2.175,439,2.332,440,2.528,441,3.732,442,2.528,443,2.528,444,2.528,445,4.12,446,2.528,447,2.528,448,4.516,449,4.516,450,4.896,451,2.528,452,2.528,453,2.528,454,2.528,455,2.791,456,4.12,457,3.21,458,2.791,459,4.12,460,2.045,461,2.791,462,2.791,463,4.896,464,1.933,465,2.791,466,2.791,467,1.67,468,2.791,469,2.791,470,2.791,471,2.791,472,2.791,473,2.395,474,2.791,475,2.791,476,2.791,477,2.045,478,2.791,479,2.791,480,4.12,481,2.791,482,4.12,483,2.791,484,3.21,485,2.791,486,2.528,487,2.791,488,2.528,489,2.791,490,2.791,491,2.791,492,2.791,493,2.528,494,2.791,495,2.791,496,2.791,497,2.791,498,3.21,499,2.791,500,2.332,501,2.528,502,2.528,503,2.332,504,2.791,505,2.332,506,2.791,507,2.791,508,2.175,509,2.791,510,2.791,511,2.791,512,2.528,513,2.791,514,2.528,515,2.791,516,2.528,517,2.791,518,2.528,519,2.791,520,2.528,521,2.791,522,2.528,523,2.791,524,2.528,525,2.791,526,2.528,527,2.791,528,2.528,529,2.791,530,2.791,531,2.791,532,2.791,533,2.791,534,2.791,535,2.791,536,2.791,537,2.791,538,2.332,539,2.791,540,2.528,541,2.791,542,2.528,543,2.791,544,2.528,545,2.791,546,2.528,547,2.791,548,2.528,549,2.791,550,2.791,551,2.528,552,2.791,553,2.528,554,2.791,555,2.528,556,2.791,557,2.528,558,2.791,559,2.791,560,2.528,561,2.791,562,2.528,563,2.791,564,2.528,565,2.791,566,2.528,567,2.791,568,2.528,569,2.791,570,2.528,571,2.791,572,2.791,573,2.528,574,2.791,575,2.528,576,2.791,577,2.528,578,2.791,579,2.791,580,2.528,581,2.791,582,2.528,583,2.791,584,2.528,585,2.791,586,2.528,587,2.791,588,2.528,589,2.791,590,2.175,591,2.791,592,1.835,593,2.791,594,1.835,595,2.791,596,2.332,597,2.791,598,2.332,599,2.791,600,2.332,601,2.528,602,2.528]],["title/controllers/CountriesController.html",[139,1.623,603,3.084]],["body/controllers/CountriesController.html",[0,0.203,3,0.111,4,0.102,5,0.133,8,0.481,11,2.075,17,0.225,21,1.143,24,0.401,28,1.177,29,0.012,30,0.829,31,0.499,32,0.525,42,1.671,49,1.513,50,2.352,51,0.951,53,0.632,55,3.002,56,1.084,59,0.222,60,0.674,65,1.213,87,0.006,88,0.006,89,0.508,113,1.854,114,1.79,121,1.465,132,1.077,134,3.32,139,2.765,141,1.236,147,1.615,148,2.879,156,2.884,158,0.862,161,2.879,166,1.62,170,3.32,171,2.584,173,3.629,174,1.834,192,2.227,200,1.192,247,1.501,252,1.923,261,2.352,309,1.236,316,0.831,320,2.462,339,2.352,473,1.282,603,5.373,604,2.621,605,1.615,606,5.556,607,4.233,608,4.378,609,1.996,610,4.691,611,2.621,612,3.395,613,2.995,614,2.995,615,2.995,616,3.284,617,3.063,618,3.445,619,5.895,620,3.101,621,2.966,622,5.24,623,6.288,624,2.189,625,2.042,626,3.445,627,2.584,628,4.935,629,5.24,630,2.621,631,5.99,632,2.879,633,2.995,634,5.99,635,5.24,636,2.995,637,2.621,638,3.931,639,3.101,640,2.995,641,5.391,642,5.391,643,5.391,644,6.417,645,5.391,646,4.717,647,4.113,648,4.717,649,3.455,650,4.493,651,4.493,652,3.239,653,4.493,654,1.65,655,3.599,656,4.493,657,1.728,658,5.24,659,4.493,660,3.931,661,4.493,662,3.931,663,4.493,664,3.931,665,3.94,666,4.493,667,2.995,668,3.284,669,3.455,670,2.995,671,2.995,672,2.16,673,3.063,674,2.189,675,2.352,676,2.189,677,4.493,678,2.042,679,2.995]],["title/modules/CountriesModule.html",[89,0.716,100,2.876]],["body/modules/CountriesModule.html",[0,0.195,3,0.213,4,0.195,5,0.186,8,0.5,29,0.012,53,0.568,56,1.041,59,0.213,87,0.01,88,0.01,89,1.337,91,2.373,92,2.461,93,2.882,94,2.882,95,2.656,96,3.494,97,3.791,100,5.827,104,3.514,105,2.882,106,2.461,114,2.793,121,2.287,132,2.068,134,3.239,141,3.251,143,2.287,147,2.521,603,5.902,605,2.521,606,5.125,628,5.535,629,5.031,680,5.031,681,5.031,682,5.031,683,5.75,684,6.135,685,6.135,686,2.698,687,4.494,688,4.781,689,4.494,690,5.75]],["title/injectables/CountriesService.html",[311,1.291,628,2.704]],["body/injectables/CountriesService.html",[0,0.123,3,0.04,4,0.036,5,0.064,8,0.226,11,2.487,13,0.822,17,0.5,21,0.489,22,0.936,24,0.257,28,0.881,29,0.012,30,0.674,31,0.137,32,0.337,42,0.714,49,0.647,51,0.407,53,0.538,56,0.658,59,0.135,60,0.242,65,1.85,77,0.536,87,0.003,88,0.003,89,0.183,114,0.765,121,0.626,132,0.387,133,1.231,134,2.487,156,1.556,166,0.519,170,2.283,171,1.105,191,2.587,192,1.352,200,1.444,232,0.362,247,2.594,252,0.822,261,1.198,274,2.95,279,2.65,309,2.137,311,1.585,313,0.497,316,1.019,320,1.052,327,1.94,334,1.101,346,0.765,356,3.246,357,0.651,359,1.105,363,2.33,366,0.963,374,0.887,382,1.522,399,1.593,436,1.657,473,1.355,605,0.691,606,4.583,607,1.164,608,1.404,610,2.313,612,2.72,616,1.404,617,1.31,618,1.82,619,3.531,620,2.091,621,1.666,625,1.775,626,1.497,627,1.497,628,3.318,630,2.277,632,0.517,639,1.105,646,1.68,648,1.68,649,1.231,652,0.923,654,0.969,655,0.923,657,0.739,660,4.095,662,4.095,664,4.095,675,2.588,678,4.196,688,1.31,691,0.941,692,1.31,693,1.921,694,1.005,695,1.31,696,1.586,697,0.941,698,3.374,699,3.136,700,1.075,701,1.68,702,1.075,703,1.052,704,1.748,705,0.822,706,1.404,707,1.404,708,1.052,709,3.155,710,2.313,711,1.31,712,3.531,713,1.921,714,1.522,715,1.921,716,1.68,717,1.68,718,1.075,719,2.063,720,1.522,721,0.689,722,2.313,723,1.657,724,1.075,725,3.531,726,1.075,727,0.941,728,1.075,729,1.075,730,1.075,731,1.075,732,1.075,733,1.075,734,1.075,735,4.406,736,0.852,737,4.267,738,1.94,739,3.912,740,5.153,741,6.475,742,4.579,743,3.45,744,3.165,745,4.036,746,4.681,747,4.944,748,4.036,749,4.919,750,3.165,751,3.165,752,4.095,753,3.472,754,4.325,755,3.165,756,3.636,757,3.165,758,3.165,759,3.165,760,3.165,761,3.165,762,1.68,763,1.921,764,3.165,765,3.374,766,3.199,767,4.681,768,1.903,769,2.95,770,1.68,771,3.709,772,1.68,773,4.499,774,5.074,775,5.026,776,0.941,777,0.852,778,1.075,779,3.165,780,2.658,781,0.651,782,0.941,783,1.577,784,1.522,785,1.075,786,1.075,787,1.075,788,1.075,789,1.075,790,1.075,791,1.075,792,1.075,793,1.075,794,2.603,795,1.404,796,1.921,797,1.921,798,1.921,799,1.921,800,1.921,801,3.165,802,1.921,803,5.176,804,3.636,805,5.89,806,3.636,807,1.921,808,1.075,809,3.833,810,1.075,811,4.095,812,2.603,813,1.075,814,5.02,815,1.075,816,2.603,817,4.414,818,3.531,819,2.769,820,4.036,821,2.277,822,2.603,823,2.603,824,2.603,825,2.603,826,2.603,827,2.603,828,2.603,829,2.603,830,3.797,831,3.472,832,2.573,833,4.667,834,3.181,835,3.472,836,4.873,837,4.102,838,1.68,839,1.903,840,2.028,841,4.325,842,1.921,843,2.603,844,1.68,845,0.941,846,0.733,847,1.522,848,1.522,849,2.508,850,1.82,851,4.095,852,1.921,853,0.941,854,0.941,855,1.68,856,0.941,857,1.68,858,1.68,859,1.522,860,1.68,861,1.68,862,1.68,863,1.68,864,1.68,865,1.921,866,0.647,867,1.31,868,1.68,869,1.68,870,1.68,871,1.522,872,1.68,873,1.68,874,0.786,875,3.165,876,2.028,877,2.028,878,1.921,879,1.355,880,1.921,881,1.921,882,1.921,883,1.68,884,1.921,885,1.075,886,0.941,887,1.075,888,1.075,889,1.075,890,1.075,891,1.075,892,1.075,893,1.075,894,2.063,895,2.658,896,1.921,897,2.277,898,3.472,899,2.603,900,4.095,901,1.075,902,1.075,903,1.075,904,1.68,905,1.82,906,1.075,907,1.921,908,1.075,909,0.552,910,1.68,911,1.522,912,0.733,913,0.786,914,1.075,915,1.075,916,1.075,917,1.921,918,1.075,919,1.075,920,1.921,921,1.921,922,1.921,923,1.075,924,1.075,925,1.075]],["title/classes/Country.html",[0,0.143,134,1.949]],["body/classes/Country.html",[0,0.238,2,0.669,3,0.114,4,0.104,5,0.134,8,0.326,17,0.23,18,1.062,24,1.058,29,0.012,30,1.203,31,0.614,33,2.215,44,1.699,53,0.23,59,0.114,77,1.524,87,0.006,88,0.006,89,0.52,118,3.997,120,2.289,121,1.49,132,1.101,134,3.913,135,3.626,137,3.339,158,2.27,166,2.351,169,3.17,174,0.938,184,2.391,210,2.391,279,3.342,305,1.093,316,1.212,334,2.254,366,2.289,374,2.11,399,1.477,605,1.643,609,2.03,654,1.854,694,2.391,716,6.159,717,4.78,739,4.799,752,4.78,753,5.579,754,6.769,762,4.78,832,2.11,909,1.954,910,4.78,926,2.68,927,2.503,928,3.115,929,2.768,930,3.62,931,3.115,932,4.568,933,5.585,934,4.8,935,4.568,936,3.115,937,2.196,938,2.628,939,2.391,940,6.056,941,2.289,942,4.568,943,7.039,944,4.427,945,3.115,946,4.568,947,5.499,948,3.62,949,3.997,950,5.463,951,5.463,952,5.463,953,5.463,954,5.382,955,5.463,956,3.063,957,4.568,958,5.463,959,3.063,960,3.063,961,4.568,962,5.384,963,4.33,964,4.568,965,6.056,966,3.063,967,5.463,968,3.063,969,4.568,970,4.568,971,5.463,972,5.463,973,5.463,974,5.463,975,5.463,976,3.063,977,3.115,978,3.115,979,3.063,980,6.056,981,6.056,982,5.463,983,3.063,984,2.928,985,5.463,986,3.063,987,5.463,988,3.063,989,6.056,990,4.568,991,3.063,992,4.568,993,3.063,994,4.33,995,3.063,996,4.568,997,5.463,998,3.063,999,3.063]],["title/classes/CreateDto.html",[0,0.143,1000,2.704]],["body/classes/CreateDto.html",[0,0.269,2,0.806,3,0.137,4,0.125,5,0.149,8,0.588,17,0.277,18,1.159,24,0.999,29,0.012,30,1.222,31,0.591,33,2.219,53,0.496,59,0.137,77,1.459,87,0.007,88,0.007,89,0.627,112,3.803,132,1.327,135,4.296,150,2.867,158,2.229,166,2.311,174,1.13,192,2.881,210,2.738,248,3.353,249,4.17,256,2.26,274,2.867,279,3.444,305,1.252,309,2.509,316,1.163,364,3.824,374,2.807,399,2.17,407,3.349,411,2.123,438,3.567,605,1.881,657,2.544,705,2.239,738,2.515,739,5.418,909,2.085,927,2.867,936,3.567,937,2.515,962,5.746,963,4.817,984,4.238,1000,4.647,1001,3.229,1002,4.238,1003,6.612,1004,3.567,1005,5.232,1006,5.232,1007,3.17,1008,3.046,1009,4.146,1010,4.817,1011,4.817,1012,5.909,1013,4.817,1014,3.691,1015,5.317,1016,7.947,1017,3.691,1018,5.232,1019,7.25,1020,6.343,1021,5.232,1022,5.785,1023,5.785,1024,3.691,1025,5.232,1026,6.612,1027,3.691,1028,5.785,1029,5.317,1030,3.691,1031,3.691,1032,4.577,1033,3.691,1034,4.508,1035,3.691,1036,3.691,1037,5.785,1038,3.691,1039,3.818,1040,2.022,1041,7.618,1042,5.299,1043,3.496,1044,3.229,1045,3.691,1046,3.691,1047,3.691,1048,3.691,1049,5.232,1050,3.691,1051,3.691]],["title/controllers/CurrenciesController.html",[139,1.623,1052,3.084]],["body/controllers/CurrenciesController.html",[0,0.125,3,0.137,4,0.125,5,0.15,8,0.589,17,0.278,21,1.685,24,0.887,28,1.584,29,0.012,30,1.116,31,0.568,32,1.161,42,2.463,51,1.614,53,0.572,55,1.856,56,0.67,59,0.137,60,1.634,65,1.573,70,2.343,77,1.698,87,0.007,88,0.007,89,0.629,91,2.165,113,2.996,114,2.089,121,1.71,132,1.332,135,4.268,139,2.018,141,1.529,143,1.71,146,4.012,148,2.521,150,2.874,156,3.437,158,1.905,164,3.576,170,3.709,173,2.244,174,1.134,192,1.377,193,5.794,200,1.318,261,1.965,280,3.177,295,3.361,305,1.737,316,1.091,320,3.337,473,2.607,605,1.886,608,4.451,610,3.834,611,3.24,612,3.229,618,3.017,620,2.13,621,2.513,622,3.24,623,5.794,624,2.707,625,2.525,626,2.13,627,2.13,632,1.78,635,5.794,637,3.24,638,4.589,639,3.809,672,2.521,689,3.361,743,4.886,879,2.245,909,2.088,931,3.576,934,4.156,941,4.057,1000,4.886,1052,5.306,1053,3.24,1054,3.728,1055,4.763,1056,5.088,1057,5.245,1058,4.589,1059,4.48,1060,3.177,1061,4.589,1062,3.24,1063,3.704,1064,3.704,1065,5.794,1066,3.24,1067,3.704,1068,5.794,1069,3.704,1070,3.704,1071,6.116,1072,4.589,1073,4.589,1074,3.704,1075,3.704,1076,3.177,1077,3.24,1078,5.813,1079,3.704,1080,3.704,1081,3.704,1082,5.752,1083,5.245,1084,3.834,1085,3.834,1086,6.089,1087,3.24,1088,3.24,1089,3.24,1090,3.704,1091,3.704,1092,5.245,1093,3.704,1094,3.704,1095,3.704,1096,5.245,1097,2.707,1098,3.704,1099,3.704,1100,3.704,1101,3.704,1102,3.704,1103,3.704,1104,3.704,1105,3.704,1106,3.704,1107,3.24,1108,3.704,1109,3.704]],["title/modules/CurrenciesModule.html",[89,0.716,101,2.876]],["body/modules/CurrenciesModule.html",[0,0.196,3,0.215,4,0.196,5,0.187,8,0.503,29,0.012,53,0.593,56,1.049,59,0.215,87,0.01,88,0.01,89,1.341,91,2.393,92,2.482,93,2.906,94,2.906,95,2.678,96,3.738,97,2.906,101,5.806,104,3.532,105,2.906,106,2.482,114,2.807,121,2.576,122,5.151,132,2.085,133,4.516,135,3.532,139,2.711,141,2.909,187,2.711,261,2.253,605,2.534,684,6.166,685,6.166,687,4.516,743,4.516,1052,5.55,1059,5.274,1087,5.072,1110,5.072,1111,5.072,1112,5.798,1113,7.047,1114,5.798]],["title/injectables/CurrenciesService.html",[311,1.291,1059,2.704]],["body/injectables/CurrenciesService.html",[0,0.211,3,0.104,4,0.095,5,0.127,8,0.487,13,1.828,17,0.21,18,0.749,21,1.585,22,1.535,24,0.915,26,2.673,27,2.14,28,1.537,29,0.012,30,1.083,31,0.487,32,1.151,51,1.558,53,0.562,54,4.862,55,1.403,56,0.507,59,0.104,60,1.656,65,1.777,70,1.077,73,3.782,77,2.116,81,3.128,85,1.991,87,0.006,88,0.006,89,0.983,114,1.701,121,1.392,132,1.007,135,4.173,143,1.392,145,3.121,147,1.535,153,3.928,154,2.783,156,3.352,162,3.736,164,2.911,168,3.329,170,3.617,177,2.047,187,2.708,191,4.377,192,2.539,194,3.135,200,1.24,210,2.235,261,2.302,274,3.172,279,3.033,280,3.775,305,1.634,309,1.156,311,1.307,313,1.293,316,1.077,320,3.172,383,2.736,605,1.535,607,3.507,608,2.047,610,3.121,612,2.878,618,3.329,620,1.611,621,2.389,625,1.909,626,1.611,627,1.611,639,4.049,672,2.053,678,3.946,686,2.227,689,2.736,692,2.911,694,2.235,695,2.911,696,2.14,697,2.45,698,4.265,699,4.37,701,3.736,705,1.199,708,3.172,709,2.235,710,2.047,719,2.219,720,2.219,721,1.795,722,2.047,723,1.466,735,4.555,737,4.101,738,1.346,743,4.512,749,3.528,768,3.782,769,4.231,770,2.45,772,2.45,773,3.121,774,4.231,775,3.782,776,2.45,780,3.121,879,2.215,909,2.025,931,2.911,941,4.054,1000,4.623,1002,2.736,1054,2.996,1055,4.458,1056,4.249,1058,3.736,1059,4.512,1062,3.736,1065,3.736,1066,3.736,1071,3.736,1072,3.736,1073,4.527,1076,2.587,1077,3.736,1082,4.587,1088,2.45,1089,2.45,1097,3.121,1115,2.45,1116,3.384,1117,2.587,1118,3.736,1119,4.27,1120,2.053,1121,3.736,1122,4.27,1123,4.27,1124,3.736,1125,2.911,1126,3.384,1127,2.911,1128,2.8,1129,2.8,1130,4.27,1131,2.8,1132,5.064,1133,4.27,1134,2.8,1135,5.745,1136,5.452,1137,2.8,1138,3.736,1139,2.8,1140,2.8,1141,5.175,1142,5.788,1143,5.175,1144,5.175,1145,4.527,1146,2.219,1147,2.45,1148,2.8,1149,2.8,1150,4.512,1151,2.8,1152,3.384,1153,4.27,1154,2.8,1155,2.8,1156,2.8,1157,5.175,1158,5.175,1159,5.175,1160,4.27,1161,2.8,1162,2.45,1163,2.8,1164,2.8,1165,2.8,1166,2.8,1167,2.8,1168,2.8,1169,3.736,1170,4.527,1171,2.8,1172,2.8,1173,2.45,1174,2.45,1175,2.8,1176,2.8,1177,2.8,1178,2.8,1179,2.8,1180,2.8]],["title/classes/Currency.html",[0,0.143,135,2.114]],["body/classes/Currency.html",[0,0.26,2,0.834,3,0.142,4,0.129,5,0.152,8,0.591,17,0.287,18,1.285,24,1.03,29,0.012,30,1.267,31,0.588,32,0.94,33,2.245,53,0.403,59,0.142,87,0.007,88,0.007,89,0.649,132,1.374,135,4.347,150,3.68,158,2.322,166,2.318,174,1.17,183,3.084,184,2.806,210,2.806,232,1.806,279,3.608,305,1.607,309,2.556,316,1.175,372,4.795,374,2.861,399,2.14,605,1.928,694,2.806,739,5.619,909,1.931,927,2.938,928,4.578,929,3.248,930,4.249,941,3.104,945,3.655,948,4.249,962,6.272,963,5.605,977,3.655,978,3.655,1004,3.655,1008,1.915,1010,4.909,1011,4.909,1012,6.19,1013,4.909,1015,6.187,1022,6.415,1023,6.415,1028,6.415,1029,6.187,1032,4.691,1037,6.415,1039,3.851,1181,3.343,1182,5.362,1183,5.362,1184,5.362,1185,6.588,1186,3.821,1187,3.821,1188,3.821,1189,3.821,1190,5.362,1191,4.691,1192,5.362,1193,3.821,1194,3.821,1195,3.821,1196,3.821,1197,3.821,1198,4.691,1199,3.343]],["title/classes/DynamicQueryBuilder.html",[0,0.143,1200,2.876]],["body/classes/DynamicQueryBuilder.html",[0,0.19,2,0.577,3,0.098,4,0.09,5,0.065,8,0.433,17,0.502,21,1.039,24,0.752,28,1.226,29,0.012,30,1.226,31,0.592,32,1.173,33,1.528,51,1.463,53,0.198,59,0.208,60,1.264,65,1.862,70,1.92,87,0.006,88,0.006,200,1.489,257,1.601,258,1.601,261,2.485,305,1.919,316,1.107,320,1.448,334,2.758,372,3.402,394,2.982,399,0.715,607,1.601,654,1.719,686,1.017,695,2.784,696,2.501,706,2.985,707,5.051,708,4.569,709,3.502,723,4.22,738,3.085,742,1.601,765,1.601,795,4.104,832,3.192,839,2.985,846,3.403,850,4.242,879,1.748,905,3.691,1055,4.594,1056,4.939,1127,1.802,1200,4.561,1201,4.81,1202,4.437,1203,1.693,1204,3.573,1205,4.084,1206,4.084,1207,4.084,1208,4.084,1209,3.573,1210,5.641,1211,2.642,1212,3.322,1213,4.798,1214,3.573,1215,2.642,1216,4.545,1217,3.573,1218,2.642,1219,3.573,1220,2.642,1221,1.175,1222,3.542,1223,6.338,1224,6.338,1225,1.931,1226,2.238,1227,2.312,1228,5.051,1229,4.81,1230,4.366,1231,4.45,1232,1.931,1233,4.366,1234,2.312,1235,4.366,1236,2.094,1237,2.312,1238,2.094,1239,2.094,1240,2.312,1241,2.094,1242,5.853,1243,4.366,1244,3.024,1245,4.366,1246,2.094,1247,2.312,1248,4.366,1249,3.573,1250,4.45,1251,3.573,1252,3.573,1253,3.573,1254,3.573,1255,5.614,1256,4.366,1257,4.912,1258,4.912,1259,3.573,1260,3.573,1261,2.312,1262,1.931,1263,2.312,1264,2.312,1265,2.312,1266,2.312,1267,2.312,1268,2.312,1269,2.312,1270,4.366,1271,2.312,1272,3.236,1273,2.312]],["title/classes/EnvVarAppConfigValidator.html",[0,0.143,437,3.084]],["body/classes/EnvVarAppConfigValidator.html",[0,0.225,2,0.709,3,0.12,4,0.11,5,0.08,8,0.232,17,0.244,18,0.836,19,3.098,22,1.168,24,0.835,29,0.012,30,0.499,31,0.474,38,1.779,53,0.594,59,0.177,65,1.403,79,1.9,87,0.007,88,0.007,154,1.561,158,1.792,187,1.835,200,1.599,218,3.486,220,2.081,224,1.967,228,2.373,232,1.606,256,1.207,316,1.123,337,2.081,339,2.959,342,1.779,343,1.868,344,1.627,345,1.868,346,1.293,384,2.39,385,2.573,389,5.26,390,2.841,392,2.841,395,2.841,397,2.841,399,1.529,404,1.967,405,3.486,406,3.327,407,3.205,408,2.373,409,4.481,410,1.967,411,1.868,412,3.057,413,2.841,414,3.252,415,2.841,416,3.252,417,2.841,418,3.252,419,2.841,420,3.252,421,2.841,422,3.252,423,2.841,424,2.841,425,2.214,426,2.841,427,3.252,428,2.841,429,3.252,430,2.841,431,3.252,432,2.841,433,2.841,434,1.967,435,2.214,436,2.959,437,4.133,438,2.214,439,2.373,440,4.481,441,3.78,442,4.481,443,4.481,444,4.481,445,4.173,446,2.573,447,2.573,448,4.555,449,4.555,450,4.938,451,2.573,452,2.573,453,2.573,454,2.573,455,2.841,456,4.173,457,3.252,458,2.841,459,4.173,460,2.081,461,2.841,462,2.841,463,4.946,464,1.967,465,2.841,466,2.841,467,1.7,468,2.841,469,2.841,470,2.841,471,2.841,472,2.841,473,2.42,474,2.841,475,2.841,476,2.841,477,2.081,478,2.841,479,2.841,480,4.173,481,2.841,482,4.173,483,2.841,484,3.252,485,2.841,486,2.573,487,2.841,488,2.573,489,2.841,490,2.841,491,2.841,492,2.841,493,2.573,494,2.841,495,2.841,496,2.841,497,2.841,498,3.252,499,2.841,500,2.373,501,2.573,502,2.573,503,2.373,504,2.841,505,2.373,506,2.841,507,2.841,508,2.214,509,2.841,510,2.841,511,2.841,512,2.573,513,2.841,514,2.573,515,2.841,516,2.573,517,2.841,518,2.573,519,2.841,520,2.573,521,2.841,522,2.573,523,2.841,524,2.573,525,2.841,526,2.573,527,2.841,528,2.573,529,2.841,530,2.841,531,2.841,532,2.841,533,2.841,534,2.841,535,2.841,536,2.841,537,2.841,538,2.373,539,2.841,540,2.573,541,2.841,542,2.573,543,2.841,544,2.573,545,2.841,546,2.573,547,2.841,548,2.573,549,2.841,550,2.841,551,2.573,552,2.841,553,2.573,554,2.841,555,2.573,556,2.841,557,2.573,558,2.841,559,2.841,560,2.573,561,2.841,562,2.573,563,2.841,564,2.573,565,2.841,566,2.573,567,2.841,568,2.573,569,2.841,570,2.573,571,2.841,572,2.841,573,2.573,574,2.841,575,2.573,576,2.841,577,2.573,578,2.841,579,2.841,580,2.573,581,2.841,582,2.573,583,2.841,584,2.573,585,2.841,586,2.573,587,2.841,588,2.573,589,2.841,590,2.214,591,2.841,592,1.868,593,2.841,594,1.868,595,2.841,596,2.373,597,2.841,598,2.373,599,2.841,600,2.373,601,2.573,602,2.573,1274,2.373,1275,3.247,1276,2.841,1277,3.247,1278,4.173,1279,4.173,1280,3.247,1281,3.247]],["title/classes/EnvironmentVariablesValidator.html",[0,0.143,1282,2.556]],["body/classes/EnvironmentVariablesValidator.html",[0,0.267,2,0.991,3,0.168,4,0.154,5,0.112,8,0.484,17,0.341,18,1.058,24,1.086,29,0.012,30,0.698,31,0.578,44,2.243,51,1.277,53,0.542,59,0.251,87,0.008,88,0.008,120,2.276,158,2.373,180,2.911,186,1.944,200,0.904,211,2.875,212,4.95,213,4.619,216,2.276,220,4.626,229,3.974,249,2.612,256,2.519,305,1.087,316,1.165,323,3.158,327,2.9,332,2.752,339,3.158,389,3.599,399,1.632,404,2.752,405,4.41,406,4.101,407,3.568,409,5.369,410,2.752,411,2.612,434,2.752,435,3.097,436,2.377,438,3.097,439,3.32,440,5.369,441,4.781,442,5.369,443,5.369,444,5.369,457,4.113,460,3.867,477,4.342,484,3.097,498,3.097,500,3.32,501,3.599,502,3.599,503,3.32,505,3.32,508,3.097,654,1.39,657,2.321,832,2.098,1120,3.257,1274,5.492,1276,3.974,1278,5.278,1279,5.278,1282,4.552,1283,3.599,1284,6.775,1285,6.775,1286,6.775,1287,6.775,1288,6.775,1289,4.542,1290,4.542,1291,4.542,1292,4.542,1293,4.542,1294,4.542,1295,4.542,1296,4.542,1297,4.542,1298,4.542,1299,3.599,1300,3.974,1301,3.097,1302,3.097,1303,3.32,1304,3.599,1305,4.542,1306,3.32,1307,3.599,1308,2.098,1309,4.542,1310,4.542,1311,3.599,1312,4.542,1313,4.542,1314,3.974,1315,4.542,1316,3.974,1317,4.542,1318,4.542,1319,4.542,1320,4.542,1321,4.542,1322,4.542,1323,4.542,1324,4.542,1325,4.542]],["title/classes/EnvironmentVariablesValidator-1.html",[0,0.12,654,1.081,1282,2.139]],["body/classes/EnvironmentVariablesValidator-1.html",[0,0.245,2,0.731,3,0.124,4,0.114,5,0.165,8,0.239,17,0.252,18,0.856,19,1.836,24,1.066,29,0.012,30,0.885,31,0.602,38,3.154,44,1.815,51,1.033,53,0.475,59,0.213,79,2.795,87,0.007,88,0.007,154,3.788,155,4.623,158,2.323,186,1.434,200,0.667,211,2.519,212,4.053,213,3.925,214,3.868,216,1.679,222,5.012,232,1.939,249,1.927,256,2.14,305,0.802,309,2.014,316,1.165,323,2.555,327,2.346,332,2.03,337,4.851,394,2.293,399,2.007,405,4.208,406,3.72,407,3.674,408,2.449,410,2.03,411,1.927,434,2.03,435,2.284,436,1.754,438,2.284,439,2.449,448,5.129,484,3.925,486,2.655,488,4.562,493,4.562,498,2.284,657,2.215,705,3.373,781,2.957,832,2.254,1120,2.767,1222,3.674,1274,4.208,1282,4.977,1299,2.655,1301,2.284,1306,2.449,1307,2.655,1308,1.547,1326,2.931,1327,5.757,1328,5.757,1329,5.757,1330,5.757,1331,5.757,1332,5.757,1333,7.954,1334,5.037,1335,5.757,1336,5.037,1337,5.037,1338,5.037,1339,5.037,1340,3.35,1341,7.69,1342,5.757,1343,6.325,1344,3.35,1345,3.35,1346,5.757,1347,3.35,1348,6.139,1349,4.88,1350,4.88,1351,4.88,1352,3.35,1353,4.88,1354,3.35,1355,3.488,1356,6.139,1357,3.35,1358,3.35,1359,3.154,1360,4.88,1361,4.88,1362,7.017,1363,3.311,1364,3.35,1365,3.35,1366,3.35,1367,3.128,1368,3.35,1369,3.35,1370,3.35,1371,3.35,1372,4.27,1373,4.88,1374,3.35,1375,3.868,1376,6.325,1377,3.35,1378,7.017,1379,2.655,1380,3.35,1381,3.35,1382,3.35,1383,3.35,1384,3.35,1385,3.35,1386,3.35,1387,3.35,1388,3.35,1389,3.35,1390,3.35,1391,3.35,1392,3.35,1393,4.27,1394,3.35,1395,3.35,1396,3.35,1397,4.88,1398,3.35,1399,3.35,1400,3.35,1401,3.35,1402,3.35,1403,3.35,1404,3.35,1405,3.35]],["title/classes/EnvironmentVariablesValidator-2.html",[0,0.12,374,1.631,1282,2.139]],["body/classes/EnvironmentVariablesValidator-2.html",[0,0.242,2,0.86,3,0.146,4,0.133,5,0.203,8,0.281,17,0.296,18,0.96,24,0.992,29,0.012,30,0.842,31,0.579,51,1.159,53,0.511,59,0.233,87,0.008,88,0.008,121,1.786,158,2.129,186,1.686,200,0.784,211,2.949,212,4.361,213,4.292,216,1.974,224,4.333,249,2.266,256,1.465,305,0.943,316,1.126,323,2.867,327,3.271,332,2.386,372,3.318,394,2.71,399,1.703,404,2.386,406,3.155,407,3.678,408,2.879,412,4.744,434,2.386,435,2.686,436,2.062,446,3.122,447,4.989,448,4.974,449,4.974,450,5.393,451,4.989,452,4.989,453,4.989,454,4.989,467,3.875,473,2.344,498,2.686,538,4.003,590,5.486,592,2.266,594,2.266,596,2.879,598,2.879,600,4.003,601,4.34,602,3.122,657,2.107,672,3.723,703,3.001,777,3.122,832,2.53,941,2.745,1120,3.78,1222,3.419,1274,2.879,1282,4.875,1299,4.34,1301,2.686,1306,2.879,1307,3.122,1308,1.819,1356,5.953,1363,2.266,1367,3.51,1379,3.122,1406,3.446,1407,4.168,1408,6.296,1409,3.939,1410,5.393,1411,4.254,1412,4.454,1413,3.939,1414,3.51,1415,3.939,1416,3.734,1417,3.939,1418,3.939,1419,3.939,1420,4.34,1421,3.15,1422,4.791,1423,3.939,1424,3.51,1425,4.791,1426,2.867,1427,4.791,1428,3.122,1429,3.939,1430,6.296,1431,4.34,1432,3.939,1433,3.939,1434,3.939,1435,3.939,1436,3.939,1437,5.477,1438,5.477]],["title/classes/FileNotImageException.html",[0,0.143,1439,3.343]],["body/classes/FileNotImageException.html",[0,0.25,2,1.184,3,0.201,4,0.184,5,0.19,8,0.526,10,3.858,22,1.951,24,0.727,26,3.124,27,3.39,28,1.184,29,0.012,30,0.834,31,0.387,32,1.392,43,3.477,53,0.553,56,0.982,59,0.201,60,1.523,77,1.886,81,3.65,85,3.261,87,0.009,88,0.009,147,2.432,166,1.993,186,2.322,195,6.293,239,4.04,279,3.124,316,1.152,346,2.694,866,1.827,1150,3.477,1426,3.541,1439,6.417,1440,5.918,1441,4.746,1442,6.764,1443,7.371,1444,5.425,1445,6.764,1446,5.026,1447,6.764,1448,5.425,1449,4.944,1450,2.719,1451,3.12,1452,5.425,1453,5.425,1454,5.425,1455,5.425]],["title/classes/FileResponseDto.html",[0,0.143,1456,2.208]],["body/classes/FileResponseDto.html",[0,0.195,2,1.257,3,0.213,4,0.195,5,0.206,8,0.501,17,0.432,18,1.23,24,0.771,29,0.012,31,0.54,49,2.363,53,0.527,59,0.213,79,2.795,87,0.01,88,0.01,158,1.656,165,6.14,166,1.898,169,3.673,174,1.763,305,1.679,927,3.845,937,2.768,941,3.517,947,4.785,954,3.926,1107,6.14,1451,4.037,1456,4.228,1457,6.14,1458,3.69,1459,5.562,1460,4.502,1461,5.038,1462,5.562,1463,5.562,1464,5.562,1465,5.562,1466,5.562,1467,6.14,1468,6.14,1469,3.69]],["title/classes/FileResponseDto-1.html",[0,0.12,654,1.081,1456,1.848]],["body/classes/FileResponseDto-1.html",[0,0.18,2,1.163,3,0.198,4,0.181,5,0.208,8,0.522,17,0.4,18,1.282,24,0.714,29,0.012,31,0.522,33,2.048,34,3.51,47,3.415,49,2.253,53,0.502,59,0.198,79,3.054,87,0.009,88,0.009,120,3.843,158,1.924,166,1.809,169,2.789,174,1.631,183,3.848,184,3.501,305,1.601,358,4.053,609,3.249,694,2.789,909,1.924,927,4.006,936,4.561,937,3.798,938,3.848,939,2.789,941,3.352,945,4.985,947,5.228,954,3.633,978,3.633,1060,4.053,1244,4.053,1451,4.205,1456,3.827,1458,3.415,1460,4.483,1462,5.301,1463,5.301,1464,5.301,1465,5.301,1466,5.301,1469,3.415,1470,5.852,1471,6.689,1472,5.301,1473,5.852,1474,6.689,1475,5.329,1476,5.852,1477,4.662]],["title/classes/FileResponseDto-2.html",[0,0.12,374,1.631,1456,1.848]],["body/classes/FileResponseDto-2.html",[0,0.256,2,1.119,3,0.19,4,0.174,5,0.212,8,0.466,17,0.385,18,1.145,24,0.875,29,0.012,31,0.57,33,2.315,34,3.36,49,2.547,53,0.49,59,0.19,79,3.012,84,4.772,87,0.009,88,0.009,158,1.878,166,2.045,174,1.57,316,1.084,358,3.955,609,2.901,686,2.909,694,3.958,927,3.577,928,4.451,937,3.138,941,3.272,947,4.897,954,4.451,1007,3.955,1359,4.374,1407,3.417,1412,3.755,1456,4.087,1458,3.286,1460,4.374,1461,4.486,1469,3.286,1477,5.712,1478,4.603,1479,6.284,1480,4.836,1481,6.529,1482,6.529,1483,6.284,1484,6.529,1485,6.529,1486,5.128,1487,3.755,1488,6.529,1489,6.529,1490,6.529,1491,6.529,1492,6.529,1493,6.529]],["title/classes/FileType.html",[0,0.143,1460,2.312]],["body/classes/FileType.html",[0,0.271,2,0.936,3,0.159,4,0.145,5,0.211,8,0.414,17,0.322,18,1.018,24,0.778,29,0.012,31,0.542,33,1.777,34,3.134,48,1.594,53,0.601,59,0.159,65,1.307,77,1.619,79,3.19,87,0.008,88,0.008,89,0.728,120,2.909,132,1.542,147,2.087,150,3.181,158,2.028,166,2.137,174,2.015,184,3.038,200,1.309,211,2.809,220,4.218,221,3.751,224,4.787,225,3.751,232,1.955,256,1.594,316,1.124,334,2.454,394,1.708,412,2.748,467,3.038,590,5.179,592,2.466,594,2.466,605,2.087,694,3.038,704,3.39,927,3.181,938,3.339,941,3.298,947,3.958,954,2.923,977,4.808,978,4.808,1008,3.298,1009,4.6,1039,2.909,1040,3.181,1120,2.79,1185,3.751,1199,5.078,1300,3.751,1301,3.958,1359,4.162,1411,3.534,1412,3.339,1414,2.748,1416,2.923,1421,3.339,1428,3.398,1431,3.398,1460,4.162,1462,5.215,1463,5.215,1464,5.215,1465,5.215,1466,4.6,1476,5.078,1494,3.751,1495,7.052,1496,4.6,1497,4.288,1498,4.288,1499,4.288,1500,4.288,1501,5.078,1502,5.078,1503,5.078,1504,5.078,1505,5.078,1506,5.805,1507,4.243,1508,5.078,1509,4.243,1510,2.923,1511,3.751,1512,3.398,1513,3.398,1514,5.078,1515,5.078,1516,4.288,1517,4.288,1518,4.288,1519,4.288,1520,3.134,1521,4.288,1522,4.288,1523,4.6,1524,4.288,1525,4.288,1526,3.398,1527,3.751]],["title/classes/FileUploadDto.html",[0,0.143,1528,2.876]],["body/classes/FileUploadDto.html",[0,0.269,2,1.187,3,0.202,4,0.184,5,0.202,8,0.484,17,0.408,18,1.354,24,0.908,29,0.012,30,1.188,31,0.551,33,2.074,53,0.509,59,0.202,87,0.009,88,0.009,158,1.949,166,2.191,174,1.665,210,3.546,256,2.022,305,1.621,316,1.024,323,3.546,399,1.996,407,3.129,605,2.436,672,3.257,686,2.607,909,2.222,936,4.619,937,3.257,1039,3.698,1043,3.897,1424,4.95,1427,5.928,1451,3.897,1472,5.369,1478,4.73,1480,4.105,1487,3.897,1528,5.418,1529,4.758,1530,3.897,1531,6.775,1532,6.775,1533,5.394,1534,5.848,1535,5.369,1536,5.439,1537,5.439,1538,6.457,1539,5.439,1540,5.439,1541,7.38]],["title/controllers/FilesLocalController.html",[139,1.623,1542,3.084]],["body/controllers/FilesLocalController.html",[0,0.152,3,0.166,4,0.152,5,0.211,8,0.513,17,0.337,18,0.787,21,1.523,24,0.802,28,1.307,29,0.012,30,0.921,31,0.513,32,1.049,49,2.722,51,1.521,53,0.607,54,3.836,56,0.813,58,2.249,59,0.166,60,1.516,79,3.066,85,2.303,87,0.008,88,0.008,114,2.384,121,1.952,139,2.591,141,1.853,143,1.952,146,3.627,147,2.152,156,2.883,158,1.722,161,3.836,169,3.133,170,2.765,173,2.719,174,1.374,192,1.669,194,3.627,200,1.191,208,3.557,280,2.719,305,1.074,316,0.623,358,2.719,626,2.582,632,2.158,686,2.303,909,1.722,1084,4.375,1085,4.375,1145,5.237,1212,2.878,1355,2.719,1407,4.114,1421,4.592,1426,3.133,1451,3.443,1456,3.761,1480,4.08,1487,3.443,1530,3.443,1533,3.281,1542,5.471,1543,3.927,1544,4.744,1545,5.337,1546,4.744,1547,4.489,1548,4.489,1549,4.489,1550,4.744,1551,5.986,1552,5.986,1553,3.557,1554,5.892,1555,3.557,1556,4.489,1557,3.927,1558,3.927,1559,4.489,1560,3.927,1561,5.237,1562,3.927,1563,3.06,1564,5.237,1565,3.927,1566,5.986,1567,5.986,1568,3.281,1569,5.337,1570,5.237,1571,5.892,1572,5.237,1573,4.375,1574,3.557,1575,3.557,1576,3.557,1577,3.836,1578,2.719,1579,3.557,1580,2.582,1581,4.489,1582,3.927,1583,3.927,1584,3.927,1585,3.927,1586,3.927,1587,4.489,1588,4.489,1589,3.557,1590,3.927,1591,3.557,1592,4.489,1593,4.489,1594,4.489]],["title/modules/FilesLocalModule.html",[89,0.716,1595,2.876]],["body/modules/FilesLocalModule.html",[0,0.181,3,0.198,4,0.181,5,0.208,8,0.478,13,3.284,29,0.012,33,1.633,53,0.549,56,0.966,59,0.198,87,0.009,88,0.009,89,1.302,91,3.019,92,2.284,93,2.674,94,2.674,95,2.464,96,3.725,97,3.666,104,3.355,105,2.674,106,2.284,114,2.667,116,4.564,121,2.502,133,4.689,137,3.9,141,3.019,143,2.183,146,3.232,148,2.565,187,2.053,274,2.923,320,4.009,686,3.148,687,4.29,692,3.638,866,1.797,939,2.793,1117,3.232,1120,3.218,1407,4.016,1421,4.638,1426,3.504,1487,3.069,1530,3.069,1542,5.347,1577,5.469,1578,3.232,1595,5.733,1596,4.668,1597,4.668,1598,4.668,1599,5.335,1600,5.857,1601,6.694,1602,4.228,1603,4.228,1604,5.335,1605,4.668,1606,5.335,1607,3.419,1608,4.668,1609,5.335]],["title/injectables/FilesLocalService.html",[311,1.291,1577,2.704]],["body/injectables/FilesLocalService.html",[0,0.168,3,0.184,4,0.168,5,0.213,8,0.505,17,0.373,21,1.628,22,1.787,24,0.857,28,1.397,29,0.012,30,0.984,31,0.457,32,1.122,42,2.38,49,2.155,51,1.582,53,0.561,55,2.491,56,0.9,59,0.184,60,1.119,70,1.912,77,1.386,79,2.819,87,0.009,88,0.009,121,2.087,143,2.438,147,2.301,156,3.03,166,2.021,169,4.144,170,3.452,171,3.681,187,1.912,192,1.848,194,3.011,200,0.989,216,2.491,232,1.674,250,2.602,305,1.531,311,1.959,313,2.296,384,3.968,632,2.389,686,2.462,687,4.101,705,2.128,941,3.547,1054,3.077,1146,5.923,1150,3.185,1212,3.077,1407,3.35,1421,3.681,1459,5.072,1460,2.723,1467,5.599,1468,5.599,1469,3.185,1554,6.193,1577,4.957,1610,4.349,1611,4.678,1612,5.072,1613,3.633,1614,4.97,1615,5.072,1616,4.97,1617,7.078,1618,5.609,1619,3.185,1620,3.389,1621,3.939,1622,3.939,1623,4.349,1624,3.185,1625,4.97]],["title/modules/FilesModule.html",[89,0.716,102,2.876]],["body/modules/FilesModule.html",[0,0.231,3,0.171,4,0.156,5,0.206,8,0.435,29,0.012,33,1.867,53,0.583,56,0.836,59,0.171,65,1.373,87,0.008,88,0.008,89,1.421,91,3.266,92,1.976,93,2.314,94,2.314,95,2.132,96,3.584,97,3.641,102,5.761,104,3.056,105,2.314,106,1.976,114,2.429,123,4.576,132,1.66,133,3.909,143,1.989,147,2.193,211,3.009,224,4.401,252,2.923,275,3.658,383,3.909,449,3.374,605,2.456,616,4.458,686,2.346,704,3.283,777,3.658,931,4.158,939,3.192,1061,5.336,1363,3.928,1372,5.336,1407,3.803,1411,3.641,1412,3.508,1420,4.833,1421,3.508,1426,3.803,1431,3.658,1515,5.336,1578,2.797,1580,4.878,1595,4.656,1608,5.336,1626,4.039,1627,4.039,1628,4.039,1629,4.039,1630,5.395,1631,5.395,1632,4.039,1633,4.656,1634,6.099,1635,6.099,1636,7.554,1637,4.833,1638,6.099,1639,6.099,1640,4.616,1641,4.616,1642,4.616,1643,4.616,1644,6.609,1645,4.039,1646,4.616,1647,4.616,1648,4.616,1649,4.039,1650,3.147]],["title/controllers/FilesS3Controller.html",[139,1.623,1651,3.084]],["body/controllers/FilesS3Controller.html",[0,0.136,3,0.149,4,0.136,5,0.213,8,0.454,13,2.374,17,0.301,18,1.114,21,1.617,22,1.442,24,0.537,28,0.875,29,0.012,30,0.617,31,0.581,32,0.703,34,3.199,42,2.55,48,2.363,49,2.309,51,1.174,53,0.573,56,0.726,58,2.01,59,0.149,60,1.248,79,2.731,87,0.008,88,0.008,113,2.83,114,1.597,120,3.436,121,2.236,139,2.864,141,1.655,143,1.808,147,2.285,148,3.296,156,2.721,158,1.595,161,4.984,170,3.167,171,2.307,173,2.43,174,1.228,180,2.57,182,5.561,184,3.589,187,1.543,192,1.491,198,4.394,200,0.798,210,2.902,239,2.902,295,3.554,305,1.521,316,0.882,358,3.851,467,2.902,605,1.994,626,2.307,632,1.928,654,1.228,686,2.445,703,2.197,909,2.07,949,4.851,1084,4.646,1085,5.012,1120,2.666,1244,3.359,1355,4.361,1411,3.957,1420,4.394,1426,4.319,1451,4.14,1456,3.589,1459,4.394,1480,4.154,1487,3.189,1530,4.717,1546,5.037,1553,3.178,1555,3.178,1557,3.508,1558,3.508,1560,3.508,1561,3.508,1562,5.561,1563,2.734,1564,5.999,1565,3.508,1569,5.704,1570,4.851,1576,3.178,1578,2.43,1579,5.037,1580,3.189,1582,4.851,1583,4.851,1585,5.561,1586,5.561,1590,3.508,1591,3.178,1651,5.261,1652,3.508,1653,5.545,1654,5.545,1655,5.545,1656,4.394,1657,5.545,1658,5.545,1659,6.356,1660,4.851,1661,4.851,1662,5.545,1663,6.356,1664,5.545,1665,5.999,1666,4.01,1667,4.01,1668,4.073]],["title/modules/FilesS3Module.html",[89,0.716,1630,2.876]],["body/modules/FilesS3Module.html",[0,0.148,3,0.162,4,0.148,5,0.207,8,0.42,13,2.521,29,0.012,42,2.19,44,2.19,48,1.629,53,0.62,56,0.793,58,2.196,59,0.162,65,0.986,77,1.222,87,0.008,88,0.008,89,1.208,91,2.746,92,1.875,93,2.196,94,2.196,95,2.024,96,3.286,97,3.566,104,2.952,105,2.196,106,1.875,111,3.775,112,3.388,113,2.431,121,1.921,123,4.031,141,2.746,143,1.921,147,2.118,148,2.831,187,2.266,200,0.872,206,2.654,211,2.346,215,5.638,216,2.196,219,3.472,232,2.5,274,3.898,316,0.608,363,2.808,384,3.72,394,1.745,467,3.483,592,2.52,594,2.52,605,2.118,617,4.016,686,2.266,879,1.875,1076,3.568,1120,2.831,1363,3.388,1407,3.483,1410,4.668,1411,4.165,1414,2.808,1416,2.987,1426,3.724,1480,4.31,1509,4.305,1510,2.987,1520,3.202,1534,3.472,1550,4.668,1563,2.987,1568,5.426,1573,4.305,1574,3.472,1575,3.472,1578,2.654,1589,3.472,1602,3.472,1611,4.305,1612,4.668,1619,2.808,1620,2.987,1624,4.758,1630,5.542,1637,4.668,1651,5.426,1668,5.402,1669,3.833,1670,3.833,1671,3.833,1672,4.381,1673,5.588,1674,5.89,1675,5.153,1676,5.821,1677,5.153,1678,5.89,1679,3.472,1680,3.472,1681,3.472,1682,5.153,1683,3.472,1684,3.833,1685,3.833,1686,3.833,1687,3.472,1688,3.472,1689,3.472,1690,4.381,1691,3.833,1692,3.833,1693,5.153,1694,3.833,1695,3.833,1696,3.833,1697,4.381,1698,4.381]],["title/controllers/FilesS3PresignedController.html",[139,1.623,1699,3.084]],["body/controllers/FilesS3PresignedController.html",[0,0.143,3,0.157,4,0.143,5,0.212,8,0.5,17,0.317,21,1.462,24,0.77,28,1.255,29,0.012,30,0.884,31,0.466,32,1.008,42,2.138,48,2.138,49,2.361,51,1.484,53,0.551,56,0.765,59,0.157,60,1.578,62,5.03,65,0.952,79,2.921,87,0.008,88,0.008,89,0.718,113,2.373,139,2.212,141,2.373,143,1.875,146,3.483,148,3.371,156,3.238,158,1.654,166,1.896,173,2.561,174,1.294,180,2.709,192,1.572,200,1.144,261,1.254,295,4.187,305,1.678,316,0.907,394,2.921,399,1.767,609,2.555,626,2.432,632,2.032,639,2.432,654,1.294,686,2.212,909,2.017,994,4.556,1084,4.775,1085,4.202,1124,5.03,1212,3.371,1359,4.5,1411,4.047,1412,4.724,1414,3.685,1426,3.009,1451,3.307,1456,3.67,1478,4.187,1480,4.248,1487,3.307,1526,5.811,1528,4.78,1530,4.218,1544,5.556,1545,4.556,1546,4.556,1553,3.35,1555,3.35,1576,3.35,1578,2.561,1579,3.35,1580,2.432,1584,3.699,1591,3.35,1612,4.556,1699,5.657,1700,3.699,1701,5.749,1702,5.995,1703,5.556,1704,3.685,1705,5.749,1706,4.227,1707,5.749,1708,4.227,1709,3.92,1710,5.749,1711,5.749,1712,5.03,1713,5.03,1714,4.227,1715,4.227,1716,5.749,1717,5.749,1718,5.749,1719,5.749,1720,3.699,1721,3.685,1722,4.227,1723,4.227,1724,4.227,1725,4.227]],["title/modules/FilesS3PresignedModule.html",[89,0.716,1631,2.876]],["body/modules/FilesS3PresignedModule.html",[0,0.149,3,0.163,4,0.149,5,0.2,8,0.421,19,2.403,29,0.012,42,2.192,48,1.631,53,0.62,56,0.794,58,2.198,59,0.163,65,0.987,77,1.223,87,0.008,88,0.008,89,1.298,91,1.81,92,2.85,93,2.198,94,2.198,95,2.026,96,3.288,97,3.336,104,2.954,105,2.198,106,1.877,111,3.777,112,3.39,113,2.433,121,1.922,123,4.033,139,2.738,141,2.748,143,2.321,147,2.75,148,2.833,187,2.738,189,4.671,200,0.873,206,2.657,211,2.348,215,5.641,216,2.198,219,3.476,232,2.242,274,3.23,316,0.609,363,2.811,384,3.722,394,1.747,467,3.484,592,2.523,594,2.523,687,3.777,688,4.018,689,3.777,712,5.157,866,1.985,879,1.877,1117,3.571,1120,2.833,1363,3.39,1407,3.484,1411,4.24,1412,4.398,1414,4.266,1416,2.99,1426,4.003,1478,2.811,1509,4.308,1510,2.99,1520,3.206,1563,2.99,1568,5.428,1573,4.308,1574,3.476,1575,3.476,1578,2.657,1589,3.476,1602,3.476,1619,2.811,1620,2.99,1624,4.266,1631,5.543,1637,4.671,1673,4.308,1676,5.824,1679,3.476,1680,3.476,1681,3.476,1682,5.157,1683,3.476,1684,3.837,1685,3.837,1686,3.837,1687,3.476,1688,3.476,1689,3.476,1691,3.837,1692,3.837,1693,5.157,1694,3.837,1695,3.837,1696,3.837,1699,5.428,1702,4.671,1703,6.06,1704,3.777,1721,5.356,1726,3.837,1727,3.837,1728,3.837,1729,4.386,1730,5.894,1731,5.157,1732,5.894,1733,4.386,1734,3.837]],["title/injectables/FilesS3PresignedService.html",[311,1.291,1721,2.704]],["body/injectables/FilesS3PresignedService.html",[0,0.121,3,0.133,4,0.121,5,0.21,8,0.466,17,0.269,18,0.898,21,1.659,22,1.288,24,0.874,26,2.365,28,1.305,29,0.012,30,0.919,31,0.493,32,1.048,34,2.899,42,1.904,48,1.331,49,2.197,51,1.381,53,0.567,55,1.795,56,0.648,59,0.133,60,1.345,65,1.757,70,1.97,75,2.295,77,2.002,79,2.598,81,1.591,85,1.378,87,0.007,88,0.007,89,0.608,121,1.67,143,1.67,156,3.073,166,1.764,170,3.013,191,3.831,192,1.331,194,3.102,200,1.019,216,1.795,232,2.417,250,2.68,305,1.225,309,1.478,311,1.568,313,1.654,316,0.905,384,3.704,394,3.147,399,1.616,467,2.68,592,2.06,594,2.06,609,2.275,632,1.721,639,4.251,686,1.97,705,1.533,909,1.985,994,4.058,1002,3.282,1054,2.462,1120,2.462,1135,3.133,1150,3.831,1212,3.136,1226,2.806,1359,4.498,1367,2.295,1411,3.999,1412,4.767,1414,4.18,1416,2.441,1424,3.282,1425,3.133,1426,2.68,1460,1.962,1469,2.295,1478,4.423,1480,3.952,1483,5.229,1487,3.752,1508,4.48,1509,4.768,1510,2.441,1511,3.133,1512,2.838,1513,2.838,1520,2.617,1523,5.169,1526,5.689,1527,5.229,1528,4.447,1533,3.743,1534,4.058,1538,4.48,1544,5.689,1545,4.058,1550,4.058,1613,2.617,1615,4.058,1618,5.169,1621,4.058,1622,2.838,1624,4.6,1679,2.838,1680,2.838,1681,2.838,1683,2.838,1687,2.838,1688,2.838,1689,2.838,1702,5.689,1703,5.689,1704,3.282,1709,3.491,1712,4.48,1713,4.48,1720,3.133,1721,4.423,1735,3.133,1736,5.121,1737,5.121,1738,3.581,1739,5.121,1740,5.121,1741,5.121,1742,3.581,1743,5.121,1744,5.977,1745,5.121,1746,3.581,1747,3.581,1748,3.581,1749,3.581,1750,3.581,1751,5.121,1752,3.581,1753,3.581,1754,4.058,1755,3.581,1756,5.121,1757,3.581,1758,5.121,1759,5.121,1760,3.581]],["title/injectables/FilesS3Service.html",[311,1.291,1668,2.704]],["body/injectables/FilesS3Service.html",[0,0.236,3,0.179,4,0.164,5,0.211,8,0.528,10,3.287,17,0.363,21,1.949,22,2.756,24,0.841,28,1.371,29,0.012,30,0.742,31,0.345,32,0.846,34,3.702,42,2.749,48,2.749,51,1.622,52,2.645,53,0.472,55,2.42,56,0.874,59,0.179,60,1.571,70,1.857,77,1.346,79,1.923,87,0.009,88,0.009,143,2.048,147,2.258,156,2.988,158,1.389,170,3.695,171,4.015,187,1.857,194,4.479,200,1.389,210,3.287,250,2.527,305,1.67,311,2.263,313,2.23,332,3.805,394,1.923,467,3.287,609,2.145,686,2.416,703,2.645,705,2.688,939,2.527,1054,3.356,1146,5.858,1150,3.094,1212,3.356,1226,2.645,1411,3.498,1451,4.716,1460,2.645,1469,3.094,1472,3.826,1473,5.495,1530,4.519,1600,5.495,1611,4.591,1615,4.977,1618,5.858,1621,3.826,1622,3.826,1665,6.705,1668,4.912,1761,4.224,1762,4.591,1763,6.468,1764,6.28,1765,6.28,1766,6.98,1767,4.828,1768,4.828,1769,4.828]],["title/injectables/FilesService.html",[311,1.291,1580,2.427]],["body/injectables/FilesService.html",[0,0.259,3,0.218,4,0.199,5,0.209,8,0.507,21,1.808,29,0.012,44,2.642,53,0.441,56,1.064,59,0.218,87,0.01,88,0.01,89,0.998,114,2.831,116,4.845,121,2.318,122,5.194,132,2.114,133,4.554,147,2.853,186,3.042,187,3.053,311,2.429,313,2.715,605,2.555,686,2.734,689,4.554,704,3.416,939,3.72,1117,4.305,1487,4.088,1530,4.088,1580,4.749,1605,6.217,1762,5.194,1770,5.143,1771,6.217,1772,6.217,1773,7.107,1774,7.107,1775,7.107]],["title/classes/FilterCountryDto.html",[0,0.143,876,2.704]],["body/classes/FilterCountryDto.html",[0,0.271,2,1.212,3,0.206,4,0.188,5,0.137,29,0.012,31,0.581,53,0.584,59,0.276,87,0.009,88,0.009,134,3.441,174,1.7,200,1.105,232,1.87,247,2.783,256,2.065,316,1.08,334,2.901,366,2.783,399,1.856,406,4.007,407,3.441,473,2.938,647,3.559,649,3.559,652,2.67,654,1.7,655,2.67,657,2.136,675,2.907,840,3.559,876,4.987,877,4.774,879,2.938,1008,2.783,1039,3.733,1040,4.381,1043,4.285,1203,3.559,1776,4.059,1777,4.381,1778,3.559,1779,4.774,1780,4.401,1781,3.559,1782,5.439,1783,4.401,1784,4.399,1785,4.401]],["title/classes/FilterQueryDto.html",[0,0.143,669,2.704]],["body/classes/FilterQueryDto.html",[0,0.256,2,0.357,3,0.061,4,0.055,5,0.04,8,0.467,11,2.657,17,0.27,18,0.485,24,0.482,28,0.785,29,0.012,30,1.106,31,0.588,50,2.215,53,0.556,56,0.296,59,0.277,65,0.623,70,0.629,81,2.103,87,0.004,88,0.004,89,0.47,134,1.955,158,1.217,166,2.083,174,1.295,183,1.592,186,0.7,192,1.91,200,1.192,232,2.512,239,0.856,247,3.409,252,1.811,256,1.574,261,1.404,305,1.377,316,1.124,317,1.774,323,1.449,327,2.275,334,2.528,339,3.905,342,1.517,343,1.592,344,1.387,345,1.592,346,1.103,356,3.465,357,2.18,359,0.941,360,3.923,361,3.227,366,3.003,394,1.103,399,2.104,404,0.991,406,3.676,407,3.321,410,1.677,411,1.592,464,0.991,473,2.199,612,2.768,621,2.121,652,3.27,654,1.898,655,2.98,657,2.213,665,3.755,668,2.63,669,5.067,672,3.661,673,2.885,674,1.196,675,3.422,676,1.196,723,1.449,738,1.331,830,4.227,866,0.932,867,1.887,879,2.342,895,1.196,909,1.035,929,1.677,933,2.023,937,2.034,938,0.941,944,1.196,1004,1.115,1007,0.991,1008,1.803,1039,4.124,1040,3.153,1042,4.205,1043,2.069,1054,0.786,1076,1.677,1222,2.863,1302,2.885,1308,2.186,1355,1.677,1367,1.774,1535,2.851,1633,1.048,1777,3.658,1778,1.774,1779,4.189,1781,1.774,1784,3.033,1786,1.115,1787,1.636,1788,1.636,1789,1.636,1790,1.636,1791,1.636,1792,1.636,1793,2.194,1794,1.297,1795,1.115,1796,1.297,1797,3.731,1798,2.851,1799,3.731,1800,2.851,1801,1.297,1802,2.453,1803,3.093,1804,1.196,1805,2.306,1806,1.887,1807,2.023,1808,1.887,1809,1.297,1810,1.297,1811,1.297,1812,3.354,1813,2.194,1814,0.941,1815,1.115,1816,2.023,1817,2.194,1818,2.194,1819,1.297,1820,2.194,1821,4.227,1822,1.297,1823,2.194,1824,2.194,1825,1.297,1826,1.297,1827,2.306,1828,1.297,1829,2.712,1830,1.297,1831,1.297,1832,2.194,1833,2.306,1834,1.297,1835,5.18,1836,1.297,1837,2.194,1838,1.297,1839,1.297,1840,2.194,1841,1.297,1842,1.297,1843,1.297,1844,1.297,1845,2.194,1846,2.194,1847,1.297,1848,1.297,1849,1.887,1850,1.297,1851,2.194,1852,1.297,1853,3.354,1854,1.297,1855,1.297,1856,1.297,1857,1.297,1858,2.194,1859,2.194,1860,2.194,1861,2.194,1862,2.851,1863,2.194,1864,2.194,1865,1.196,1866,3.227,1867,3.75,1868,3.75,1869,2.194,1870,2.194,1871,1.297,1872,1.297,1873,1.297,1874,1.297]],["title/modules/HelperModule.html",[89,0.716,206,2.556]],["body/modules/HelperModule.html",[0,0.243,3,0.167,4,0.152,5,0.11,8,0.428,9,5.25,29,0.012,44,2.673,53,0.626,56,1.084,59,0.266,65,1.011,87,0.008,88,0.008,89,1.435,91,3.09,92,1.923,93,2.252,94,2.252,95,2.075,96,3.804,97,4.052,104,3.002,105,2.252,106,1.923,113,2.472,123,4.536,141,2.472,143,1.954,148,2.88,153,4.921,166,1.822,177,4.379,206,5.14,346,2.386,384,3.602,688,5.25,698,5.102,699,4.989,719,3.561,720,3.561,866,2.017,1125,4.084,1514,5.241,1607,4.606,1645,5.241,1650,4.084,1875,3.931,1876,3.931,1877,3.931,1878,3.931,1879,5.241,1880,5.99,1881,5.99,1882,5.99,1883,5.241,1884,5.99,1885,8.235,1886,5.241,1887,5.241,1888,3.931,1889,3.931,1890,3.931,1891,5.99,1892,4.493,1893,6.739,1894,4.493,1895,6.739,1896,4.493]],["title/controllers/HomeController.html",[139,1.623,1897,3.084]],["body/controllers/HomeController.html",[0,0.268,3,0.2,4,0.183,5,0.181,8,0.481,13,2.307,17,0.405,21,1.714,24,0.722,29,0.012,33,1.65,42,2.863,44,3.006,51,1.63,53,0.552,56,0.976,59,0.2,60,1.213,77,1.503,87,0.009,88,0.009,89,0.915,110,4.925,113,3.178,114,2.684,121,2.585,132,1.938,136,6.281,139,2.962,141,2.225,146,4.453,147,2.423,148,3.887,150,3.692,158,1.55,161,4.318,173,3.265,174,1.65,187,2.828,200,1.072,208,5.339,274,4.027,305,1.759,605,2.423,609,3.422,632,2.591,687,4.318,692,5.011,1060,4.082,1225,4.925,1244,4.082,1603,5.339,1897,5.995,1898,4.716,1899,5.08,1900,6.736,1901,5.39,1902,4.716,1903,5.39,1904,3.675,1905,5.39]],["title/modules/HomeModule.html",[89,0.716,103,2.876]],["body/modules/HomeModule.html",[0,0.27,3,0.203,4,0.186,5,0.182,8,0.486,29,0.012,42,2.531,44,2.88,48,2.531,53,0.556,56,0.992,59,0.203,87,0.009,88,0.009,89,1.378,91,2.262,92,2.346,93,2.747,94,2.747,95,2.532,96,3.421,97,2.747,103,5.757,104,3.412,105,2.747,106,2.346,110,5.662,114,3.085,121,2.648,122,4.976,123,3.321,132,1.971,136,6.592,139,2.849,141,2.81,146,4.125,147,2.785,148,2.635,187,2.849,274,4.058,605,2.448,692,5.049,1060,3.321,1244,3.321,1603,4.344,1673,4.976,1897,5.413,1899,5.203,1902,4.795,1906,4.795,1907,4.795,1908,5.481,1909,6.808,1910,5.481]],["title/injectables/HomeService.html",[311,1.291,1899,2.704]],["body/injectables/HomeService.html",[0,0.265,3,0.192,4,0.176,5,0.177,8,0.571,17,0.389,21,1.931,22,1.864,24,0.881,28,1.132,29,0.012,30,1.168,31,0.37,32,0.909,33,2.013,44,3.06,51,1.607,53,0.542,56,0.938,59,0.192,60,1.167,77,1.833,87,0.009,88,0.009,89,0.88,114,2.619,120,3.295,132,1.864,143,2.144,149,5.752,187,2.529,200,1.031,211,3.334,216,2.598,232,2.557,305,1.875,311,2.013,313,2.395,384,4.194,508,3.535,605,2.364,609,3.557,632,2.492,832,3.037,1117,4.6,1120,3.161,1132,5.752,1212,3.161,1311,5.21,1314,4.536,1410,5.21,1613,3.789,1619,3.323,1620,3.535,1623,4.536,1624,4.866,1899,5.274,1900,6.642,1904,4.482,1911,4.536,1912,5.184,1913,5.184,1914,6.642,1915,5.184,1916,5.184,1917,5.184]],["title/classes/HttpErrorFilter.html",[0,0.143,125,3.084]],["body/classes/HttpErrorFilter.html",[0,0.224,2,0.945,3,0.16,4,0.147,5,0.106,8,0.472,9,3.982,10,4.076,11,3.054,12,4.051,14,2.95,15,3.623,16,5.193,17,0.325,21,1.486,24,0.58,28,0.945,29,0.012,30,0.665,31,0.309,32,0.759,37,3.743,38,4.174,39,4.738,41,2.773,42,2.172,43,3.743,48,2.749,49,1.967,51,0.916,52,2.371,53,0.572,54,4.738,55,2.169,56,0.783,59,0.245,60,1.315,65,1.842,66,2.773,67,2.773,68,2.773,69,2.95,70,2.93,72,4.269,73,4.833,74,3.163,76,4.833,77,1.844,79,1.724,80,4.826,81,2.938,83,5.785,84,4.833,85,3.046,86,3.429,87,0.008,88,0.008,89,0.735,96,2.698,113,3.051,124,5.11,125,5.568,137,4.269,138,5.11,166,1.788,169,3.705,203,3.982,248,2.773,250,3.057,257,2.622,258,2.622,261,2.1,279,1.999,284,2.773,286,5.24,287,4.629,289,4.629,291,3.786,293,5.24,294,3.786,295,2.773,296,3.786,297,3.786,298,3.786,299,3.786,300,3.786,301,3.786,303,5.11,304,3.786,305,1.398,346,2.327,609,2.596,703,4.051,714,4.629,879,1.852,939,3.057,1212,2.808,1226,2.371,1359,3.2,1918,5.11,1919,3.786,1920,5.841,1921,5.841,1922,4.327,1923,4.327,1924,4.629,1925,3.786,1926,4.327,1927,4.327,1928,4.327,1929,3.429,1930,4.327,1931,3.786,1932,3.786,1933,4.327,1934,4.327]],["title/classes/HttpExceptionFilter.html",[0,0.143,1935,3.343]],["body/classes/HttpExceptionFilter.html",[0,0.224,2,1.144,3,0.194,4,0.178,5,0.129,8,0.473,10,4.317,11,3.631,12,3.976,13,2.834,14,4.514,15,3.976,16,5.197,17,0.394,21,1.684,24,0.702,28,1.144,29,0.012,30,0.806,31,0.374,32,0.919,37,4.243,38,4.399,39,5.038,41,4.243,42,2.462,44,2.462,48,2.985,49,2.778,50,3.466,51,1.11,52,2.873,53,0.497,54,5.224,56,0.949,58,2.627,59,0.245,60,1.49,64,4.587,65,1.716,66,3.36,67,3.36,68,3.36,69,3.574,70,2.933,72,3.832,75,3.36,76,5.304,77,1.462,78,4.155,79,2.891,80,3.574,85,2.547,87,0.009,88,0.009,113,3.314,147,2.381,186,2.834,248,4.886,279,3.058,329,4.514,1222,2.421,1507,4.839,1935,6.041,1936,5.793,1937,4.155,1938,6.621,1939,5.242,1940,5.242,1941,5.242,1942,4.155]],["title/interfaces/IAppConfig.html",[414,2.876,1221,1.213]],["body/interfaces/IAppConfig.html",[3,0.193,4,0.177,5,0.128,8,0.372,17,0.391,18,1.156,29,0.012,30,1.233,31,0.605,32,1.333,33,2.019,44,3.176,59,0.244,87,0.009,88,0.009,120,3.305,211,2.627,316,1.203,399,2.057,414,5.668,484,5.465,500,5.559,503,5.559,505,5.559,508,5.186,866,2.221,945,4.496,1221,2.188,1222,3.702,1363,3.793,1450,3.305,1503,5.77,1504,6.654,1914,5.77,1943,2.406,1944,4.558,1945,6.595,1946,5.226,1947,6.595,1948,6.595]],["title/interfaces/IAwsConfig.html",[416,2.876,1221,1.213]],["body/interfaces/IAwsConfig.html",[3,0.219,4,0.2,5,0.145,17,0.444,18,1.25,29,0.012,31,0.606,59,0.219,87,0.01,88,0.01,316,1.223,416,4.862,512,6.301,514,6.301,516,6.301,518,6.301,520,6.301,522,6.301,524,6.301,526,6.301,528,6.301,866,1.991,1221,1.7,1450,2.963,1943,2.73,1949,5.172]],["title/interfaces/IFileConfig.html",[418,2.876,1221,1.213]],["body/interfaces/IFileConfig.html",[3,0.218,4,0.199,5,0.144,17,0.441,18,1.245,29,0.012,31,0.589,32,1.477,53,0.441,59,0.218,87,0.01,88,0.01,316,1.207,399,2.145,412,5.083,418,4.841,590,5.408,592,4.562,594,4.562,596,5.798,598,5.798,600,5.798,866,1.977,1221,1.689,1301,4.002,1424,3.762,1428,4.652,1450,2.942,1865,4.291,1943,2.711,1950,5.136,1951,5.87,1952,7.101,1953,5.87,1954,5.87]],["title/interfaces/IJWTConfig.html",[420,2.876,1221,1.213]],["body/interfaces/IJWTConfig.html",[3,0.228,4,0.208,5,0.151,17,0.461,18,1.279,29,0.012,31,0.595,59,0.228,87,0.01,88,0.01,316,1.2,399,2.256,420,4.975,538,5.886,540,6.382,542,6.382,544,6.382,546,6.382,548,6.382,866,2.069,1221,1.767,1450,3.079,1943,2.838,1955,5.376]],["title/interfaces/INodeEmailerConfig.html",[422,2.876,1221,1.213]],["body/interfaces/INodeEmailerConfig.html",[3,0.227,4,0.208,5,0.151,17,0.461,18,1.278,29,0.012,31,0.595,59,0.227,87,0.01,88,0.01,316,1.209,399,2.104,422,4.971,560,6.379,562,6.379,564,6.379,566,6.379,568,6.379,570,6.379,866,2.066,1221,1.765,1450,3.075,1943,2.834,1956,5.368,1957,5.368]],["title/interfaces/IPageMetaDtoParameters.html",[1221,1.213,1958,3.084]],["body/interfaces/IPageMetaDtoParameters.html",[0,0.176,3,0.136,4,0.124,5,0.09,17,0.523,18,0.913,22,1.319,26,1.694,27,1.838,28,0.801,29,0.012,31,0.572,32,0.913,33,1.123,34,2.315,53,0.391,59,0.193,60,0.826,65,1.568,87,0.007,88,0.007,106,1.57,111,2.351,143,1.196,166,2.257,174,1.123,192,2.877,252,2.823,309,2.875,321,2.681,370,2.222,374,2.798,383,2.351,399,2.321,609,1.63,612,3.574,618,2.11,621,2.875,627,2.11,652,3.979,654,2.454,655,1.763,657,2.679,672,1.763,704,1.763,738,2.912,781,3.995,783,3.67,874,5.091,909,1.055,912,5.275,913,4.428,984,3.882,1002,2.351,1034,4.13,1054,1.763,1060,2.222,1221,1.055,1424,3.338,1607,2.351,1754,2.907,1777,4.299,1814,2.11,1815,2.501,1833,4.637,1849,4.13,1924,5.898,1943,1.694,1958,4.82,1959,2.907,1960,6.33,1961,3.209,1962,2.907,1963,3.209,1964,6.132,1965,5.656,1966,5.898,1967,6.218,1968,4.8,1969,5.898,1970,5.734,1971,5.519,1972,4.128,1973,5.519,1974,4.8,1975,6.027,1976,4.428,1977,4.428,1978,5.3,1979,2.907,1980,5.3,1981,3.209,1982,3.209,1983,2.907,1984,3.209,1985,3.209,1986,4.557,1987,3.209,1988,3.209,1989,3.209,1990,3.209,1991,3.209,1992,3.209,1993,3.209,1994,3.209,1995,3.209,1996,3.209,1997,3.209,1998,3.209,1999,3.209,2000,2.907,2001,3.209,2002,3.209,2003,3.209,2004,3.209,2005,3.209,2006,3.209,2007,3.209,2008,3.209,2009,3.209,2010,3.209,2011,3.209]],["title/interfaces/IPaginationFieldConfig.html",[721,2.704,1221,1.213]],["body/interfaces/IPaginationFieldConfig.html",[3,0.209,4,0.191,5,0.138,8,0.402,17,0.423,18,1.213,29,0.012,31,0.558,51,1.73,59,0.209,60,1.267,87,0.01,88,0.01,117,5.484,143,1.835,252,3.208,261,1.67,316,1.134,356,3.755,621,3.227,694,2.946,696,3.755,704,3.327,705,2.962,709,3.922,721,4.435,740,6.84,741,6.807,742,4.54,749,5.33,850,4.761,905,4.31,1221,2.155,1308,3.861,1704,3.607,1943,2.599,1962,4.46,2012,4.923,2013,4.923,2014,4.923,2015,5.627,2016,5.627,2017,4.923,2018,6.556]],["title/interfaces/IPostgreSQLConfig.html",[425,2.876,1221,1.213]],["body/interfaces/IPostgreSQLConfig.html",[3,0.222,4,0.203,5,0.147,17,0.45,18,1.26,29,0.012,31,0.603,59,0.222,87,0.01,88,0.01,316,1.221,425,4.899,866,2.016,1221,1.722,1334,6.985,1336,6.985,1337,6.985,1338,6.985,1339,6.985,1450,3,1943,2.765,2019,5.238,2020,7.984,2021,7.984,2022,7.984]],["title/interfaces/ISMSConfig.html",[429,2.876,1221,1.213]],["body/interfaces/ISMSConfig.html",[3,0.237,4,0.217,5,0.157,17,0.48,18,1.31,29,0.012,31,0.565,59,0.237,87,0.01,88,0.01,316,1.193,429,5.094,573,6.465,575,6.465,577,6.465,866,2.154,1221,1.84,1450,3.205,1943,2.954,2023,5.596]],["title/interfaces/ISendGridConfig.html",[427,2.876,1221,1.213]],["body/interfaces/ISendGridConfig.html",[3,0.234,4,0.214,5,0.155,17,0.474,18,1.3,29,0.012,31,0.58,59,0.234,87,0.01,88,0.01,316,1.204,427,5.054,551,6.437,553,6.437,555,6.437,557,6.437,866,2.125,1221,1.815,1450,3.162,1943,2.914,2024,5.52]],["title/interfaces/IUploadFileConfig.html",[431,2.876,1221,1.213]],["body/interfaces/IUploadFileConfig.html",[3,0.23,4,0.211,5,0.153,17,0.467,18,1.288,29,0.012,31,0.589,59,0.23,87,0.01,88,0.01,316,1.202,399,2.116,431,5.01,580,6.406,582,6.406,584,6.406,586,6.406,588,6.406,866,2.094,1221,1.788,1450,3.116,1943,2.871,2025,5.439,2026,5.439]],["title/classes/PaginationMetaDto.html",[0,0.143,783,2.556]],["body/classes/PaginationMetaDto.html",[0,0.185,2,0.666,3,0.113,4,0.103,5,0.075,8,0.218,17,0.528,18,0.799,22,1.638,24,1.008,26,2.104,27,2.283,28,0.995,29,0.012,30,0.469,31,0.582,32,0.535,33,1.395,34,2.423,53,0.342,59,0.169,60,0.687,65,1.456,87,0.006,88,0.006,106,1.306,111,2.92,143,1.486,158,2.125,166,2.311,174,0.934,192,3.116,252,2.904,309,2.8,321,3.33,370,1.849,374,2.792,383,2.92,399,2.333,473,1.306,609,2.025,612,2.792,618,2.62,621,3.049,627,1.755,652,4.018,654,2.434,655,1.467,657,2.705,672,1.467,704,2.19,738,2.621,781,3.919,783,4.111,874,4.96,909,1.31,912,5.037,913,4.728,984,3.875,1002,1.956,1034,4.122,1054,1.467,1060,2.76,1221,0.878,1424,3.875,1607,2.92,1754,3.61,1777,4.121,1814,1.755,1815,3.106,1833,4.735,1849,4.626,1924,5.961,1958,4.728,1959,2.419,1960,4.769,1961,3.986,1962,3.61,1963,3.986,1964,6.127,1965,5.766,1966,5.961,1967,6.193,1968,5.126,1969,5.961,1970,5.855,1971,5.728,1972,4.32,1973,5.728,1974,5.126,1975,6.127,1976,4.419,1977,4.419,1978,5.936,1979,3.61,1980,5.659,1981,3.986,1982,3.986,1983,2.419,1984,2.67,1985,2.67,1986,3.986,1987,2.67,1988,2.67,1989,2.67,1990,2.67,1991,2.67,1992,2.67,1993,2.67,1994,2.67,1995,2.67,1996,2.67,1997,2.67,1998,2.67,1999,2.67,2000,2.419,2001,2.67,2002,2.67,2003,2.67,2004,2.67,2005,2.67,2006,2.67,2007,2.67,2008,2.67,2009,2.67,2010,2.67,2011,2.67,2027,3.052,2028,4.556,2029,6.463,2030,3.052,2031,3.052,2032,3.052,2033,3.052,2034,3.052,2035,3.052,2036,3.052,2037,3.052]],["title/classes/PaginationQueryDto.html",[0,0.143,612,1.949]],["body/classes/PaginationQueryDto.html",[0,0.254,2,0.343,3,0.058,4,0.053,5,0.039,8,0.48,11,2.324,17,0.262,18,0.469,24,0.62,28,0.763,29,0.012,30,1.095,31,0.591,32,0.991,50,2.634,53,0.551,56,0.285,59,0.274,65,0.603,70,0.605,81,2.055,87,0.004,88,0.004,89,0.455,134,1.905,158,1.447,166,2.09,174,1.263,183,1.54,186,0.673,192,2.399,200,1.173,232,2.492,239,0.823,247,3.568,252,2.154,256,1.534,261,1.593,305,1.353,316,1.121,317,1.716,323,1.401,327,2.835,334,2.447,339,3.931,342,1.467,343,1.54,344,1.342,345,1.54,346,1.066,356,3.233,357,2.118,359,0.905,360,3.855,361,3.154,366,2.955,394,1.066,399,2.134,404,0.953,406,3.644,407,3.289,410,1.622,411,1.54,464,0.953,473,2.154,612,2.821,621,2.663,652,3.527,654,1.975,655,3.17,657,2.269,665,3.678,668,2.555,669,5.038,672,3.656,673,3.431,674,1.15,675,3.633,676,1.15,723,1.829,738,1.68,830,3.661,866,0.53,867,2.383,879,2.524,895,1.15,909,1.005,929,1.622,933,1.15,937,1.983,938,0.905,944,1.15,1004,1.073,1007,0.953,1008,1.752,1039,4.107,1040,3.098,1042,4.133,1043,2.01,1054,0.756,1076,0.953,1222,2.821,1302,3.154,1308,2.136,1355,1.622,1367,2.24,1633,1.008,1777,3.613,1778,1.716,1779,4.134,1781,1.716,1784,2.964,1786,1.073,1793,2.122,1794,1.247,1795,1.073,1796,1.247,1797,3.661,1798,2.77,1799,3.661,1800,2.77,1801,1.247,1802,2.383,1803,3.678,1804,1.15,1805,2.644,1806,1.825,1807,3.015,1808,2.813,1809,2.122,1810,1.247,1811,1.247,1812,3.988,1813,2.122,1814,1.54,1815,1.825,1816,2.555,1817,2.122,1818,2.122,1819,1.247,1820,2.122,1821,4.288,1822,1.247,1823,2.122,1824,2.122,1825,1.247,1826,1.247,1827,2.24,1828,1.247,1829,2.644,1830,1.247,1831,1.247,1832,2.122,1833,2.24,1834,1.247,1835,5.112,1836,1.247,1837,2.122,1838,1.247,1839,1.247,1840,2.122,1841,1.247,1842,1.247,1843,1.247,1844,1.247,1845,2.122,1846,2.122,1847,1.247,1848,1.247,1849,1.825,1850,1.247,1851,2.122,1852,1.247,1853,3.269,1854,1.247,1855,1.247,1856,1.247,1857,1.247,1858,2.122,1859,2.122,1860,2.122,1861,2.122,1862,2.77,1863,2.122,1864,2.122,1865,1.15,1866,3.154,1867,3.666,1868,3.666,1869,2.122,1870,2.122,1871,1.247,1872,1.247,1873,1.247,1874,1.247,2038,2.677,2039,1.573,2040,2.342,2041,2.342,2042,1.573,2043,3.495,2044,1.573,2045,1.573,2046,1.573,2047,1.573,2048,1.573,2049,1.573,2050,1.573,2051,1.573]],["title/classes/PaginationResponseDto.html",[0,0.143,620,2.427]],["body/classes/PaginationResponseDto.html",[0,0.268,2,1.003,3,0.17,4,0.156,5,0.113,8,0.486,17,0.345,18,1.066,24,0.913,26,2.123,29,0.012,30,0.707,31,0.613,32,1.272,34,3.028,49,2.61,51,0.973,53,0.512,56,0.832,59,0.269,60,1.035,87,0.008,88,0.008,166,1.645,174,1.407,192,2.261,200,0.914,232,1.548,252,2.917,261,1.804,309,1.897,334,1.599,337,4.967,339,2.406,344,3.415,356,3.635,374,2.123,618,4.339,620,4.339,621,3.454,652,3.276,654,2.086,657,1.768,783,4.789,784,3.643,909,2.378,911,5.978,912,3.134,913,3.36,937,3.487,984,2.946,1007,2.785,1034,3.134,1039,3.048,1060,3.684,1222,3.58,1308,2.123,1458,2.946,1607,4.368,1660,5.962,1777,3.734,1805,2.946,1808,5.143,1829,5.066,1964,3.643,1965,3.36,1966,3.643,1967,3.643,1968,4.819,1969,3.643,1970,3.643,1971,3.643,1973,3.643,1974,3.643,1975,3.643,1976,3.36,1977,3.36,2052,5.748,2053,4.596,2054,4.596,2055,4.596,2056,6.081,2057,5.32,2058,5.32,2059,4.021,2060,4.021,2061,4.596,2062,4.819,2063,6.081,2064,4.596,2065,4.596,2066,4.596]],["title/injectables/PaginationService.html",[311,1.291,698,2.556]],["body/injectables/PaginationService.html",[0,0.138,3,0.098,4,0.089,5,0.065,8,0.291,13,1.745,17,0.198,21,1.037,22,0.948,24,0.546,28,1.324,29,0.012,30,0.627,31,0.356,32,0.715,34,1.812,51,0.558,53,0.553,56,0.738,59,0.151,65,1.899,77,1.564,87,0.006,88,0.006,143,1.33,153,3.688,154,1.96,156,2.401,164,2.78,166,1.348,168,2.867,170,2.302,177,2.98,187,1.569,192,1.516,200,1.41,247,3.213,261,1.902,276,3.567,309,2.315,311,1.717,313,1.218,316,1.023,346,1.624,363,3.195,473,2.401,612,3.344,618,3.226,620,2.345,621,3.27,625,2.78,626,2.345,627,2.345,632,1.96,639,3.845,652,3.407,654,1.857,655,3.809,657,1.569,675,2.609,678,5.278,696,2.811,698,3.885,703,3.073,704,1.96,705,1.745,708,2.234,709,3.917,710,4.886,711,2.78,722,1.928,723,1.38,725,2.307,735,4.433,742,3.674,749,3.399,753,5.841,768,3.644,769,4.687,771,3.231,773,3.644,774,5.603,775,2.98,780,2.98,781,1.598,782,2.307,783,3.398,784,3.231,795,1.928,817,4.445,818,3.567,831,3.231,832,2.591,833,4.445,834,3.567,835,3.231,837,3.231,838,4.361,840,1.69,841,4.907,847,3.231,874,1.928,883,2.307,909,2.152,911,4.445,912,2.78,939,2.134,1225,2.98,1611,2.98,1633,2.613,1763,3.567,1805,3.595,1806,4.937,1808,3.824,1829,1.69,1833,4.426,1890,2.307,1904,2.78,2067,2.307,2068,4.078,2069,4.078,2070,4.078,2071,4.078,2072,4.078,2073,4.078,2074,5.609,2075,2.637,2076,2.637,2077,2.637,2078,2.637,2079,6.685,2080,6.412,2081,4.985,2082,6.065,2083,5.609,2084,4.985,2085,4.078,2086,4.078,2087,4.078,2088,4.078,2089,6.685,2090,6.906,2091,6.065,2092,4.078,2093,2.637,2094,2.637,2095,4.078,2096,4.078,2097,2.637,2098,2.637,2099,2.637,2100,2.307,2101,2.637,2102,2.637]],["title/classes/PrismaClientExceptionFilter.html",[0,0.143,2103,3.084]],["body/classes/PrismaClientExceptionFilter.html",[0,0.2,2,0.957,3,0.163,4,0.149,5,0.108,8,0.421,10,4.09,11,3.288,12,3.648,13,2.523,14,4.018,17,0.329,21,1.499,24,0.588,28,0.957,29,0.012,30,0.674,31,0.421,32,0.769,37,4.266,38,4.352,39,4.901,41,3.777,42,2.192,48,2.647,49,2.71,50,3.085,51,0.928,52,2.403,53,0.534,55,2.198,56,0.794,57,2.811,58,2.198,59,0.218,60,1.327,65,1.846,66,3.777,67,3.777,68,3.777,70,3.128,74,3.206,75,4.759,76,3.206,77,1.223,78,3.476,81,3.613,85,3.095,86,3.476,87,0.008,88,0.008,116,4.018,147,2.119,168,4.628,248,4.562,250,3.085,279,3.075,280,3.571,327,2.833,329,4.018,334,1.526,617,5.327,672,2.833,704,3.422,705,1.877,766,4.671,897,3.837,898,5.641,900,6.497,934,4.671,977,2.99,1020,3.837,1152,3.476,1162,5.824,1169,3.837,1222,2.026,1232,4.308,1446,4.018,1507,4.308,1814,3.39,1816,3.206,1827,3.777,1929,4.671,1937,3.476,1942,5.641,2103,5.203,2104,5.157,2105,5.894,2106,6.657,2107,6.227,2108,4.386,2109,6.657,2110,3.206,2111,3.837,2112,4.386,2113,4.386,2114,3.837,2115,3.837,2116,5.157,2117,5.824,2118,4.386,2119,5.157,2120,4.386,2121,4.386,2122,4.386,2123,5.894,2124,5.894,2125,4.386,2126,4.386]],["title/injectables/PrismaService.html",[153,2.427,311,1.291]],["body/injectables/PrismaService.html",[0,0.214,3,0.124,4,0.113,5,0.082,8,0.48,12,1.833,15,3.151,17,0.251,21,1.24,22,1.203,24,0.94,26,2.252,27,2.443,28,1.256,29,0.012,30,0.884,31,0.411,32,1.326,33,1.492,42,1.813,51,1.627,52,1.833,53,0.544,56,0.605,59,0.181,60,1.512,65,1.512,70,1.875,71,5.008,87,0.007,88,0.007,89,1.073,112,1.924,143,1.59,144,5.558,145,4.619,151,2.445,152,3.563,153,4.352,154,3.787,155,5.126,156,3.479,164,5.241,168,4.53,169,2.552,170,3.794,187,2.431,190,3.863,192,1.244,200,1.395,211,1.942,214,3.863,216,1.676,232,1.126,252,2.087,257,2.026,258,2.026,261,2.396,277,2.926,280,2.953,284,2.144,305,1.732,311,1.492,313,1.545,316,1.03,327,1.608,334,2.001,356,2.443,384,3.792,394,1.332,632,1.608,639,3.635,654,1.024,686,2.431,689,3.124,696,2.443,703,2.671,711,3.324,879,3.002,905,4.034,909,2.363,1117,2.953,1121,5.529,1212,2.343,1213,3.124,1216,2.144,1250,3.863,1262,2.445,1308,2.657,1359,1.833,1446,4.58,1613,2.445,1619,2.144,1620,2.281,1624,2.144,1889,2.926,1983,4.558,2100,2.926,2110,2.445,2127,2.926,2128,7.013,2129,4.875,2130,4.875,2131,7.013,2132,4.875,2133,4.875,2134,4.875,2135,5.752,2136,5.752,2137,6.32,2138,7.24,2139,7.24,2140,3.345,2141,3.345,2142,3.345,2143,4.875,2144,5.752,2145,4.265,2146,4.875,2147,3.345,2148,5.752,2149,3.345,2150,6.32,2151,5.752,2152,4.875,2153,3.345,2154,4.875,2155,4.875,2156,3.345,2157,6.32,2158,4.875,2159,4.875,2160,3.345,2161,4.875,2162,4.875,2163,3.345,2164,3.345,2165,3.345,2166,3.345,2167,3.345,2168,3.345,2169,3.345,2170,3.345,2171,5.752,2172,3.345,2173,4.875,2174,3.345,2175,3.345,2176,3.345,2177,3.345,2178,4.875,2179,4.875,2180,4.875,2181,4.875,2182,4.875,2183,3.345,2184,3.345,2185,2.926,2186,3.345,2187,3.345,2188,3.345,2189,3.345,2190,4.875,2191,3.345,2192,2.926]],["title/classes/Query.html",[0,0.143,261,1.252]],["body/classes/Query.html",[0,0.212,2,1.047,3,0.178,4,0.162,5,0.118,8,0.446,12,2.627,17,0.36,21,1.59,24,0.642,28,1.047,29,0.012,30,1.206,31,0.526,32,0.841,33,1.914,48,2.97,49,2.343,51,1.473,59,0.178,60,1.721,65,1.566,77,1.337,85,3.238,87,0.009,88,0.009,89,1.298,113,3.043,166,1.297,169,3.642,200,1.384,261,2.497,284,3.073,305,1.665,316,1.192,346,1.91,673,5.027,703,4.297,708,4.56,709,2.51,832,2.215,850,4.002,909,2.255,938,4.002,1147,4.195,1213,4.725,1216,4.725,1308,2.888,1359,4.297,1709,3.269,1904,4.263,2193,4.195,2194,4.795,2195,4.195,2196,4.795,2197,4.195,2198,4.795,2199,4.795,2200,4.795,2201,4.795,2202,4.795,2203,4.795,2204,4.795,2205,4.795,2206,4.795,2207,4.795,2208,4.795,2209,6.252,2210,6.252,2211,6.69,2212,6.69,2213,4.795,2214,5.47,2215,5.47,2216,7.373,2217,4.195,2218,4.195,2219,5.47,2220,5.47,2221,4.195,2222,4.195,2223,4.195,2224,4.195,2225,4.195]],["title/classes/Query-1.html",[0,0.12,261,1.048,654,1.081]],["body/classes/Query-1.html",[0,0.22,2,1.114,3,0.189,4,0.173,5,0.125,8,0.465,12,2.796,17,0.383,21,1.656,24,0.684,28,1.114,29,0.012,30,1.161,31,0.539,32,0.895,48,2.42,49,2.192,51,1.378,59,0.189,60,1.755,65,1.149,85,3.265,87,0.009,88,0.009,89,1.324,121,1.664,169,3.407,200,1.426,250,3.407,261,2.458,284,3.27,305,1.557,316,1.182,696,2.557,703,4.369,708,4.44,709,2.671,832,2.357,909,2.243,1125,3.479,1212,3.129,1213,4.593,1216,4.171,1222,2.357,1359,4.369,1496,5.982,1704,3.27,1709,4.437,2195,6.27,2211,6.822,2212,6.822,2214,6.604,2215,5.694,2217,6.27,2219,5.694,2220,5.694,2221,4.464,2222,4.464,2223,4.464,2224,4.464,2225,4.464,2226,4.464,2227,6.508,2228,5.103]],["title/classes/Query-2.html",[0,0.12,261,1.048,374,1.631]],["body/classes/Query-2.html",[0,0.222,2,0.605,3,0.103,4,0.094,5,0.126,8,0.367,17,0.208,18,1.287,21,1.663,24,0.912,28,0.605,29,0.012,30,1.236,31,0.562,32,0.901,51,1.639,53,0.386,59,0.157,60,0.953,65,1.786,70,2.386,77,1.434,87,0.006,88,0.006,89,0.47,121,1.381,132,0.996,135,3.916,143,2.133,150,2.321,154,2.036,191,1.776,200,1.579,210,2.217,211,2.923,252,1.813,257,2.566,258,3.488,261,2.496,279,3.539,305,1.985,316,1.121,334,2.275,394,2.71,605,1.523,607,3.488,621,2.376,654,2.083,686,1.629,696,3.516,705,1.813,708,4.58,709,2.217,727,3.705,736,3.356,739,3.505,743,5.05,765,1.679,821,5.036,832,2.659,846,2.888,850,2.957,859,2.196,886,2.424,894,3.356,905,3.311,909,1.218,939,2.217,941,4.117,1010,4.074,1011,4.074,1012,4.074,1013,4.074,1055,4.521,1056,4.784,1068,6.292,1097,3.096,1116,3.356,1117,2.566,1118,3.705,1173,3.705,1198,3.705,1200,2.888,1202,2.025,1210,3.925,1213,5.008,1216,4.497,1228,3.096,1229,2.196,1231,3.356,1236,2.196,1238,2.196,1239,2.196,1241,2.196,1244,3.115,1246,2.196,1262,3.096,1272,2.196,1449,2.025,1656,5.182,1704,2.714,1709,5.003,1814,2.436,2017,5.721,2018,3.705,2119,3.705,2145,3.705,2218,3.705,2229,2.424,2230,4.235,2231,4.235,2232,4.235,2233,3.705,2234,5.141,2235,6.202,2236,6.202,2237,6.202,2238,2.771,2239,4.235,2240,2.771,2241,3.705,2242,2.771,2243,2.771,2244,2.771,2245,2.771,2246,4.235,2247,2.771,2248,6.539,2249,5.141,2250,2.771,2251,2.771,2252,2.771,2253,2.771,2254,2.771,2255,5.141,2256,4.235,2257,4.235,2258,4.235,2259,4.235,2260,2.424,2261,2.771,2262,4.235,2263,2.771,2264,2.771,2265,2.771,2266,2.771,2267,2.771,2268,4.235,2269,4.235,2270,4.235,2271,4.235,2272,2.771,2273,2.771,2274,2.771,2275,2.771,2276,2.771,2277,2.771,2278,2.771,2279,2.771,2280,2.771,2281,2.771,2282,2.771,2283,2.771]],["title/classes/QueryCountryDto.html",[0,0.143,647,2.704]],["body/classes/QueryCountryDto.html",[0,0.263,2,1.105,3,0.188,4,0.171,5,0.124,17,0.38,18,1.135,24,1.008,29,0.012,31,0.595,32,1.436,53,0.565,59,0.265,87,0.009,88,0.009,134,3.297,158,2.164,174,1.549,200,1.007,232,1.704,247,3.577,256,1.881,316,1.044,334,2.849,366,2.536,399,2.035,406,3.897,407,3.297,473,2.771,647,4.149,649,4.984,652,3.432,654,1.549,655,3.432,657,1.947,675,3.736,840,3.243,876,4.822,877,4.822,879,3.221,1008,2.536,1039,3.577,1040,4.261,1043,4.106,1203,3.243,1776,5.685,1777,4.261,1778,3.243,1779,4.575,1780,4.01,1781,3.243,1782,5.13,1783,4.01,1784,4.149,1785,4.01,2029,5.664,2040,4.427,2041,4.427,2284,6.473,2285,5.06,2286,5.06,2287,6.473,2288,6.473,2289,5.06,2290,5.06,2291,5.06]],["title/classes/QueryFailedFilter.html",[0,0.143,2292,3.343]],["body/classes/QueryFailedFilter.html",[0,0.213,2,0.861,3,0.146,4,0.134,5,0.097,8,0.45,10,4.055,11,3.305,12,3.921,13,1.689,14,3.739,15,3.732,16,5.282,17,0.296,18,0.961,19,3.005,20,6.524,21,1.395,22,1.419,23,3.127,24,0.844,26,2.533,27,3.586,28,1.197,29,0.012,30,0.843,31,0.511,32,0.961,33,1.929,34,2.8,35,4.994,37,4.039,38,4.163,39,4.869,41,3.514,42,2.039,43,3.514,48,2.343,49,2.683,50,2.87,51,0.835,52,2.162,53,0.61,54,2.529,55,2.748,56,0.993,57,2.529,58,2.748,59,0.234,60,1.419,61,3.127,65,1.841,66,3.514,67,3.514,68,3.514,69,2.691,70,2.62,73,4.008,74,2.885,75,3.514,77,1.529,80,4.297,81,3.18,85,2.85,87,0.008,88,0.008,113,1.629,116,2.691,121,1.788,147,1.972,154,3.83,168,3.154,248,4.364,250,2.87,255,3.453,257,2.391,258,2.391,259,4.798,260,3.453,261,2.388,284,2.529,286,3.127,287,4.346,288,3.453,289,4.346,293,4.994,329,3.739,696,2.748,704,2.636,977,2.691,1152,3.127,1222,2.533,1507,4.008,1925,3.453,1929,3.127,1931,4.798,1932,4.798,1942,4.346,2103,2.885,2107,3.453,2110,2.885,2111,3.453,2114,3.453,2115,3.453,2116,5.958,2117,6.261,2260,3.453,2292,6.021,2293,5.958,2294,3.453,2295,5.484,2296,3.946,2297,3.946,2298,3.946,2299,5.484,2300,3.946,2301,3.946,2302,3.453,2303,3.946,2304,3.946,2305,5.484,2306,3.946,2307,3.946,2308,3.946,2309,3.946,2310,3.946,2311,3.946,2312,3.946,2313,3.946]],["title/interfaces/QueryOptions.html",[1210,2.876,1221,1.213]],["body/interfaces/QueryOptions.html",[0,0.169,3,0.098,4,0.09,5,0.065,8,0.189,17,0.502,18,0.716,29,0.012,30,1.166,31,0.598,32,1.42,33,1.528,51,1.188,53,0.198,59,0.208,60,1.264,65,1.862,70,1.92,87,0.006,88,0.006,200,1.509,257,1.601,258,1.601,261,2.468,305,1.791,316,1.162,320,2.238,334,2.758,372,4.186,394,2.982,399,0.715,607,1.601,654,1.719,686,1.571,695,1.802,696,2.501,706,2.985,707,4.104,708,4.438,709,3.502,723,4.014,738,3.599,742,2.474,765,1.601,795,4.104,832,3.406,839,4.104,846,3.403,850,4.454,879,1.748,905,4.242,1055,4.646,1056,4.939,1127,2.784,1200,4.375,1201,2.094,1202,1.931,1203,1.693,1204,2.312,1209,2.312,1210,5.496,1212,2.699,1213,4.429,1214,2.312,1216,4.643,1217,2.312,1219,2.312,1221,1.175,1222,3.542,1223,6.635,1224,6.635,1225,2.985,1226,3.077,1227,3.573,1228,5.543,1229,5.476,1230,5.614,1231,5.302,1232,2.985,1233,4.912,1234,3.573,1235,5.614,1236,2.094,1237,2.312,1238,2.094,1239,2.094,1240,2.312,1241,2.094,1242,5.853,1243,4.366,1244,3.024,1245,4.366,1246,2.094,1247,2.312,1248,4.366,1249,3.573,1250,4.45,1251,3.573,1252,3.573,1253,3.573,1254,3.573,1255,5.614,1256,4.366,1257,4.912,1258,4.912,1259,3.573,1260,3.573,1261,2.312,1262,1.931,1263,2.312,1264,2.312,1265,2.312,1266,2.312,1267,2.312,1268,2.312,1269,2.312,1270,4.366,1271,2.312,1272,3.236,1273,2.312,1943,1.22]],["title/injectables/ResolvePromisesInterceptor.html",[311,1.291,2314,3.343]],["body/injectables/ResolvePromisesInterceptor.html",[0,0.223,3,0.192,4,0.176,5,0.127,8,0.469,13,2.814,15,3.602,17,0.389,21,1.672,24,0.695,28,1.132,29,0.012,30,0.797,31,0.37,32,0.909,33,2.013,44,2.445,45,5.21,46,6.017,48,2.977,49,2.771,51,1.392,53,0.57,56,0.938,59,0.244,60,1.48,87,0.009,88,0.009,150,3.602,171,4.367,186,2.814,200,1.031,311,2.013,313,2.395,344,3.805,370,3.983,617,4.482,848,4.109,909,2.367,1308,3.037,1650,5.176,1772,5.752,2314,5.722,2315,4.536,2316,7.592,2317,6.344,2318,7.2,2319,6.574,2320,7.592,2321,5.752,2322,6.574,2323,5.722,2324,5.21,2325,5.752,2326,6.574,2327,6.574,2328,7.835,2329,7.835,2330,5.184,2331,6.574,2332,6.574,2333,8.005,2334,6.574,2335,7.22,2336,4.536,2337,5.184,2338,5.184,2339,5.184,2340,5.184,2341,5.184]],["title/injectables/SortBy.html",[311,1.291,359,2.427]],["body/injectables/SortBy.html",[0,0.25,3,0.16,4,0.147,5,0.106,8,0.472,15,3.879,17,0.325,21,1.486,24,0.783,28,1.275,29,0.012,30,1.089,31,0.417,32,1.024,51,1.676,53,0.439,56,0.783,59,0.262,60,1.664,65,1.593,81,3.146,85,2.723,87,0.008,88,0.008,156,2.5,196,4.269,200,1.408,232,2.384,239,3.461,249,4.479,256,2.632,309,2.729,311,2.024,312,4.833,313,1.999,314,3.429,315,5.24,316,1.144,317,4.738,318,5.11,319,5.11,320,3.2,321,4.269,322,5.11,323,3.705,324,5.11,325,7.159,327,2.808,328,6.927,329,5.04,330,3.786,332,4.006,333,5.24,334,2.755,335,3.786,336,5.24,337,4.738,338,5.24,339,4.076,340,5.785,341,6.467,342,3.2,343,3.36,344,2.927,345,3.36,346,2.327,347,4.629,348,4.629,349,4.629,350,5.11,351,3.786,352,3.786,353,3.786,354,3.786,355,5.11,356,3.968,357,4.914,358,4.289,359,4.072,360,3.982,361,3.982,362,5.11,363,2.773,364,3.163,365,3.786,366,2.169,367,3.786,368,3.786,369,3.786,370,2.622,371,5.11,372,2.622,373,3.786,374,1.999,375,3.786,376,3.786,377,3.786,378,3.786,379,3.786,380,3.786,381,3.786,382,3.429,383,2.773,2342,4.327,2343,4.327]],["title/classes/SortByDto.html",[0,0.143,1821,2.876]],["body/classes/SortByDto.html",[0,0.256,2,0.358,3,0.061,4,0.056,5,0.04,8,0.467,11,2.19,17,0.271,18,0.487,24,0.372,28,0.606,29,0.012,30,1.107,31,0.588,50,2.22,53,0.556,56,0.297,59,0.277,65,0.625,70,0.632,81,2.287,87,0.004,88,0.004,89,0.471,134,1.959,158,1.037,166,2.084,174,1.298,183,1.597,186,0.703,192,1.914,200,1.194,232,2.514,239,0.859,247,3.412,252,1.816,256,1.577,261,1.258,305,1.379,316,1.121,317,1.779,323,1.453,327,2.28,334,2.443,339,3.908,342,1.521,343,1.597,344,1.391,345,1.597,346,1.106,356,3.468,357,3.118,359,0.944,360,4.232,361,3.737,366,3.008,394,1.106,399,2.105,404,0.995,406,3.679,407,3.323,410,1.682,411,1.597,464,0.995,473,2.203,612,2.772,621,2.124,652,3.273,654,1.9,655,2.984,657,2.217,665,3.762,668,2.636,669,5.051,672,3.64,673,2.892,674,1.2,675,3.564,676,1.2,723,1.888,738,1.335,830,3.929,866,0.553,867,2.459,879,2.346,895,1.2,909,1.037,929,1.682,933,1.2,937,2.039,938,0.944,944,1.2,1004,1.119,1007,0.995,1008,1.808,1039,4.125,1040,3.157,1042,4.212,1043,2.075,1054,0.789,1076,0.995,1222,2.867,1302,2.892,1308,2.19,1355,1.682,1367,1.779,1535,1.301,1633,1.052,1777,3.662,1778,1.779,1779,4.194,1781,1.779,1784,3.039,1786,1.119,1793,2.2,1794,1.301,1795,1.119,1796,1.301,1797,3.737,1798,2.858,1799,3.737,1800,2.858,1801,1.301,1802,2.459,1803,3.1,1804,1.2,1805,2.312,1806,1.893,1807,2.029,1808,1.893,1809,1.301,1810,1.301,1811,1.301,1812,3.361,1813,2.2,1814,0.944,1815,1.119,1816,2.029,1817,2.2,1818,2.2,1819,1.301,1820,2.2,1821,4.354,1822,1.301,1823,2.2,1824,2.2,1825,1.301,1826,1.301,1827,2.718,1828,1.301,1829,2.718,1830,2.2,1831,2.2,1832,2.2,1833,2.312,1834,1.301,1835,5.186,1836,1.301,1837,2.2,1838,1.301,1839,1.301,1840,2.2,1841,1.301,1842,1.301,1843,1.301,1844,1.301,1845,2.2,1846,2.2,1847,1.301,1848,1.301,1849,1.893,1850,1.301,1851,2.2,1852,1.301,1853,3.361,1854,1.301,1855,1.301,1856,1.301,1857,1.301,1858,2.2,1859,2.2,1860,2.2,1861,2.2,1862,2.858,1863,2.2,1864,2.2,1865,1.2,1866,3.233,1867,3.758,1868,3.758,1869,2.2,1870,2.2,1871,1.301,1872,1.301,1873,1.301,1874,1.301,2344,1.642,2345,1.642,2346,1.436,2347,1.642]],["title/classes/SortCountryDto.html",[0,0.143,877,2.704]],["body/classes/SortCountryDto.html",[0,0.268,2,1.175,3,0.2,4,0.182,5,0.132,17,0.404,18,1.18,24,0.902,29,0.012,31,0.585,53,0.578,59,0.272,87,0.009,88,0.009,134,3.393,158,1.936,174,1.648,200,1.071,232,1.813,247,2.698,256,2.002,316,1.1,334,2.884,366,2.698,399,1.821,406,3.971,407,3.393,473,2.882,647,3.45,649,4.708,652,2.588,654,1.648,655,2.588,657,2.071,675,2.818,840,4.708,876,4.708,877,4.932,879,2.882,1008,2.698,1039,3.681,1040,4.341,1043,4.225,1203,3.45,1776,5.369,1777,4.341,1778,3.45,1779,4.708,1780,5.821,1781,3.45,1782,5.335,1783,4.266,1784,4.314,1785,4.266,2346,4.71,2348,5.383,2349,5.383,2350,5.383]],["title/classes/UpdateDto.html",[0,0.143,1078,3.084]],["body/classes/UpdateDto.html",[0,0.286,2,1.242,3,0.211,4,0.193,5,0.185,8,0.497,18,1.221,29,0.012,32,1.376,33,2.402,53,0.523,59,0.211,87,0.01,88,0.01,89,0.966,132,2.045,135,3.932,305,1.667,605,2.505,672,3.349,905,4.006,909,2.257,927,3.817,928,4.749,929,4.754,936,4.749,937,3.349,948,5.52,1000,5.159,1055,4.754,1078,5.988,1097,5.735,1116,5.52,1138,6.094,1232,5.091,1446,5.35,1802,3.878,1887,6.094,2351,4.977,2352,6.966,2353,6.094,2354,6.966,2355,6.094,2356,6.966,2357,5.688,2358,5.688,2359,5.688]],["title/classes/UserNotFoundException.html",[0,0.143,2360,3.343]],["body/classes/UserNotFoundException.html",[0,0.192,2,1.237,3,0.21,4,0.192,5,0.139,8,0.536,10,3.934,22,2.037,24,0.759,26,3.209,27,3.482,28,1.237,29,0.012,30,0.871,31,0.404,32,1.318,43,3.631,53,0.425,56,1.026,59,0.21,60,1.275,77,2.185,81,3.34,85,3.189,87,0.01,88,0.01,166,1.879,186,2.974,239,3.637,250,3.637,280,4.553,316,1.087,346,2.768,705,2.974,866,1.908,1150,5.022,1375,5.956,1422,4.956,1446,5.482,1449,4.141,1450,2.839,2360,6.486,2361,6.079,2362,4.956,2363,8.184,2364,6.948,2365,5.665,2366,6.948,2367,5.665,2368,5.665,2369,5.665]],["title/classes/UtilsService.html",[0,0.143,699,2.556]],["body/classes/UtilsService.html",[0,0.154,2,0.667,3,0.113,4,0.103,5,0.075,8,0.432,11,1.411,17,0.409,19,3.719,21,1.538,24,0.611,28,1.482,29,0.012,30,0.701,31,0.432,32,0.799,51,1.28,53,0.342,59,0.169,60,1.74,65,1.815,77,0.852,87,0.006,88,0.006,143,1.487,166,1.233,200,1.399,211,2.409,247,3.243,252,1.307,261,2.36,305,1.624,309,2.496,316,1.209,327,2.907,334,2.104,342,1.673,343,1.757,344,1.531,345,1.757,346,1.217,347,2.42,348,2.42,349,2.42,356,3.875,357,1.85,366,2.284,399,0.826,436,2.386,612,2.989,621,2.801,627,1.757,675,2.855,678,3.718,694,3.553,695,4.123,696,3.875,699,4.261,704,2.907,705,1.951,706,3.986,707,3.332,708,3.719,709,4.244,710,5.652,714,3.612,721,1.957,722,2.232,723,2.855,735,5.581,736,3.612,737,5.379,738,2.907,741,5.729,742,4.112,749,4.795,765,1.85,768,5.499,769,5.499,771,2.42,773,5.14,774,5.499,775,5.499,780,3.332,809,4.771,811,2.672,814,2.672,817,3.612,819,2.672,830,3.718,831,2.42,832,1.411,833,2.42,835,2.42,836,4.771,837,3.612,839,3.332,840,3.495,844,4.771,845,2.672,846,2.082,847,2.42,848,2.42,849,3.612,850,3.479,851,5.291,853,2.672,854,2.672,855,2.672,856,2.672,857,2.672,858,2.672,859,2.42,860,2.672,861,2.672,862,2.672,863,2.672,864,2.672,866,2.179,867,5.038,868,2.672,869,2.672,870,2.672,871,2.42,872,2.672,873,2.672,905,4.158,1076,4.112,1125,3.108,1127,3.108,1170,6.324,1174,2.672,1212,3.263,1226,3.961,1502,4.771,1656,5.729,1814,3.479,1904,3.108,2233,3.988,2370,2.672,2371,5.454,2372,3.054,2373,7.389,2374,3.054,2375,4.771,2376,7.889,2377,6.048,2378,3.988,2379,3.054,2380,3.054,2381,4.558,2382,5.454,2383,3.054,2384,3.054,2385,3.054]],["title/changelog.html",[2386,2.407,2387,2.407,2388,3.089]],["body/changelog.html",[29,0.011,87,0.011,88,0.011,92,2.828,211,2.632,436,3.458,781,4.003,1082,5.236,2388,5.78,2389,6.607,2390,6.661,2391,6.607,2392,6.607,2393,5.78,2394,6.607,2395,6.607,2396,5.78,2397,6.607,2398,5.78,2399,6.607,2400,6.607,2401,5.236,2402,6.607,2403,6.607]],["title/contributing.html",[2386,2.407,2387,2.407,2404,3.089]],["body/contributing.html",[29,0.012,30,1.163,33,1.76,48,2.607,77,1.604,87,0.01,88,0.01,110,5.902,148,2.764,166,1.896,279,3.638,370,4.248,374,3.239,607,3.484,609,2.555,654,1.76,765,3.484,866,1.937,930,4.557,984,3.685,1034,3.92,1054,2.764,1226,3.151,1303,4.203,1762,4.203,1866,4.781,1886,5.031,1946,4.557,1976,4.203,1977,4.203,2062,4.557,2321,5.031,2393,5.031,2396,6.135,2401,4.557,2404,6.135,2405,5.75,2406,6.135,2407,6.619,2408,7.012,2409,7.012,2410,5.75,2411,6.891,2412,5.75,2413,5.75,2414,5.75,2415,5.75,2416,5.75,2417,5.031,2418,6.619,2419,6.619,2420,5.75,2421,5.75,2422,5.75,2423,5.75,2424,5.75,2425,4.557,2426,7.012,2427,6.619,2428,5.75,2429,5.75,2430,6.135,2431,6.135,2432,5.031,2433,7.012,2434,5.75,2435,7.012,2436,5.75,2437,5.75,2438,5.75,2439,5.031,2440,6.619,2441,5.75,2442,5.031,2443,5.75,2444,5.031]],["title/coverage.html",[2445,4.55]],["body/coverage.html",[0,0.29,1,2.567,5,0.08,6,2.834,7,2.834,29,0.012,31,0.231,77,0.903,87,0.007,88,0.007,91,1.337,95,1.496,96,1.496,125,2.368,134,1.496,135,1.623,139,2.757,140,2.368,142,2.834,153,1.863,168,1.863,178,2.834,184,1.696,207,2.834,228,2.368,236,2.567,237,2.834,238,2.834,261,1.675,309,3.462,311,2.396,312,2.368,314,3.774,359,1.863,384,1.623,385,3.774,414,2.209,416,2.209,418,2.209,420,2.209,422,2.209,425,2.209,427,2.209,429,2.209,431,2.209,434,1.963,437,2.368,603,2.368,604,2.834,606,3.481,612,1.496,620,1.863,624,2.368,628,2.076,647,2.076,649,3.619,657,1.246,658,2.834,669,2.076,691,2.834,698,1.963,699,1.963,721,2.076,743,3.052,783,1.963,850,1.863,876,2.076,877,2.076,926,2.834,978,2.209,1000,2.076,1001,2.834,1044,2.834,1052,2.368,1053,4.166,1059,2.076,1078,2.368,1115,2.834,1181,2.834,1200,2.209,1201,3.774,1202,3.481,1203,4.25,1210,2.209,1221,2.251,1282,3.421,1283,2.567,1308,3.466,1326,2.834,1379,6.722,1393,7.662,1406,2.834,1439,2.567,1440,2.834,1441,2.834,1456,2.955,1457,2.834,1458,4.25,1460,1.775,1470,2.834,1478,3.989,1479,2.834,1494,2.834,1528,2.209,1529,2.834,1533,2.368,1542,2.368,1543,2.834,1569,2.567,1571,2.834,1572,2.834,1573,2.368,1577,2.076,1580,1.863,1610,2.834,1632,2.834,1644,2.834,1651,2.368,1652,2.834,1668,2.076,1699,2.368,1700,2.834,1721,2.076,1735,2.834,1761,2.834,1770,2.834,1776,4.127,1786,3.85,1795,2.209,1797,2.209,1799,2.209,1821,2.209,1878,2.834,1897,2.368,1898,2.834,1899,2.076,1911,2.834,1918,2.834,1919,2.834,1935,2.567,1936,2.834,1937,3.774,1944,2.834,1949,2.834,1950,2.834,1955,2.834,1956,2.834,1957,2.834,1958,2.368,1959,3.774,1972,2.567,2012,2.834,2013,2.834,2019,2.834,2023,2.834,2024,2.834,2025,2.834,2026,2.834,2052,3.774,2067,2.834,2103,2.368,2104,2.834,2127,2.834,2193,2.834,2226,2.834,2229,2.834,2292,2.567,2293,2.834,2294,2.834,2302,2.834,2314,2.567,2315,2.834,2323,2.567,2351,2.834,2360,2.567,2361,2.834,2362,2.834,2370,2.834,2445,2.567,2446,3.24,2447,6.934,2448,3.24,2449,7.905,2450,6.632,2451,3.24,2452,3.24,2453,3.24,2454,4.762,2455,3.24,2456,7.905,2457,5.646,2458,4.166,2459,4.762,2460,3.24,2461,3.24,2462,5.646,2463,7.63,2464,3.24,2465,3.24,2466,5.646,2467,3.24,2468,8.448,2469,3.24,2470,3.24,2471,2.834,2472,3.24,2473,4.762,2474,3.24,2475,2.834,2476,6.632,2477,4.762,2478,3.24,2479,3.24,2480,3.24,2481,5.646,2482,3.24,2483,4.762,2484,3.24,2485,2.834,2486,2.834,2487,5.646,2488,5.646,2489,3.24,2490,3.24,2491,3.24,2492,3.24,2493,4.762,2494,3.24,2495,3.24,2496,3.24,2497,4.762,2498,7.505,2499,7.505,2500,3.24,2501,3.24,2502,3.24,2503,3.24,2504,3.24,2505,2.834,2506,2.834,2507,2.834,2508,2.834,2509,3.24,2510,3.24,2511,4.762,2512,3.24,2513,3.24,2514,2.834,2515,2.834,2516,3.24]],["title/dependencies.html",[92,2.17,2517,3.089]],["body/dependencies.html",[0,0.245,29,0.012,34,2.691,48,2.252,56,1.096,57,3.881,58,3.877,87,0.01,88,0.01,92,2.592,151,4.427,174,1.854,216,3.035,256,2.252,467,3.787,655,2.911,1008,3.035,1411,3.626,1510,4.129,1512,4.799,1513,4.799,1563,4.129,1568,5.288,1888,5.298,2110,4.427,2336,5.298,2518,6.056,2519,6.056,2520,6.056,2521,7.737,2522,6.056,2523,7.235,2524,6.056,2525,6.056,2526,6.056,2527,6.056,2528,6.056,2529,6.056,2530,6.056,2531,6.056,2532,6.056,2533,6.056,2534,5.298,2535,6.056,2536,6.056,2537,6.056,2538,6.056,2539,6.056,2540,6.056,2541,6.056,2542,6.056,2543,6.056]],["title/miscellaneous/enumerations.html",[2544,2.263,2545,4.435]],["body/miscellaneous/enumerations.html",[5,0.151,17,0.461,29,0.012,87,0.01,88,0.01,212,4.677,334,2.999,412,4.677,457,4.975,460,4.677,477,4.677,621,2.536,938,4.197,1283,4.869,1302,4.975,1303,4.491,1304,4.869,1407,3.216,1411,3.901,1412,3.534,1421,4.197,1505,5.376,1607,3.938,1633,3.938,1786,4.189,1802,4.189,1803,5.334,1804,4.491,1805,4.677,1806,4.975,2544,3.938,2545,5.376,2546,6.144,2547,5.376,2548,6.384,2549,6.144,2550,5.376,2551,6.144]],["title/miscellaneous/functions.html",[1126,4.017,2544,2.263]],["body/miscellaneous/functions.html",[0,0.276,8,0.555,9,3.172,10,2.435,17,0.349,22,2.204,26,2.831,27,3.436,28,1.698,29,0.011,30,1.196,31,0.581,32,1.39,33,1.876,44,2.816,49,1.567,51,0.985,52,2.549,85,1.79,87,0.008,88,0.008,91,2.53,95,3.166,111,4.394,112,3.943,145,3.4,147,1.673,150,2.549,152,3.4,158,1.338,170,2.149,171,3.526,183,4.356,184,3.588,186,2.935,194,2.818,196,3.4,198,5.775,211,2.903,239,3.208,249,4.191,250,2.435,252,2.624,256,1.73,305,1.812,316,0.851,317,2.981,323,3.208,332,2.818,334,2.133,336,3.687,356,2.331,364,5.326,394,1.853,399,1.854,434,3.714,436,2.435,460,2.981,477,2.981,609,2.067,621,1.92,624,4.48,654,1.424,704,2.947,705,1.991,711,3.172,723,3.588,738,2.947,849,3.687,909,1.763,928,3.172,929,4.153,931,3.172,937,2.236,945,3.172,1007,2.818,1008,2.331,1009,3.687,1040,2.549,1126,3.687,1191,4.07,1226,2.549,1304,3.687,1308,3.592,1311,3.687,1355,2.818,1363,2.676,1449,4.48,1458,3.928,1501,4.07,1650,3.172,1661,4.07,1673,5.326,1675,4.07,1762,3.4,1795,4.179,1797,4.179,1799,4.674,1827,2.981,1879,4.07,2052,3.687,2057,4.07,2058,4.07,2059,4.07,2060,4.07,2062,3.687,2317,4.858,2318,6.375,2323,4.858,2324,4.858,2325,4.07,2471,4.07,2475,4.07,2485,4.07,2486,4.07,2505,4.07,2506,5.998,2507,4.07,2508,5.363,2514,4.07,2515,5.363,2544,2.981,2552,4.652,2553,4.07,2554,4.652,2555,4.652,2556,4.652,2557,4.652,2558,4.652,2559,4.652,2560,4.652,2561,4.652,2562,4.652,2563,4.652,2564,4.652,2565,4.652,2566,4.652,2567,4.07,2568,4.652,2569,4.652,2570,7.929,2571,4.652,2572,4.652,2573,4.652,2574,4.652,2575,4.652,2576,4.652,2577,4.652,2578,4.652,2579,6.13,2580,4.652,2581,4.652,2582,4.652,2583,4.652,2584,4.652,2585,6.13,2586,6.13,2587,4.07,2588,4.652]],["title/index.html",[17,0.265,2386,2.407,2387,2.407]],["body/index.html",[4,0.182,5,0.165,8,0.274,13,1.643,29,0.012,31,0.443,32,1.287,77,1.07,81,1.706,84,3.931,87,0.007,88,0.007,92,1.643,106,1.643,112,3.571,113,2.22,120,3.112,154,3.624,161,3.979,166,2.165,168,3.571,180,3.447,183,3.571,184,3.522,186,3.032,187,1.477,189,3.042,190,3.042,209,3.358,210,2.009,211,2.142,212,2.46,213,2.617,218,3.931,275,3.042,279,3.272,295,3.447,315,3.042,342,3.402,344,2.696,346,2.142,358,3.762,370,2.326,372,3.259,436,2.815,457,3.667,460,3.979,464,3.762,477,3.979,688,3.667,711,2.617,742,2.326,765,2.326,766,3.042,781,4.076,866,1.293,898,3.042,909,1.104,939,2.009,1002,2.46,1054,2.985,1055,3.259,1120,1.845,1127,2.617,1226,2.103,1303,4.538,1306,2.806,1316,4.706,1362,4.706,1375,3.042,1421,2.208,1523,4.921,1677,3.358,1731,3.358,1734,3.358,1771,3.358,1807,2.806,1827,2.46,1866,2.617,1946,3.042,1979,3.042,2000,3.042,2185,6.198,2192,3.358,2197,3.358,2241,3.358,2375,3.358,2386,3.667,2387,4.233,2401,4.263,2406,3.358,2407,4.706,2411,3.358,2418,5.432,2419,3.358,2425,3.042,2427,5.432,2430,3.358,2431,4.706,2432,4.706,2439,3.358,2440,4.706,2442,6.424,2444,6.93,2445,3.042,2458,3.358,2534,4.706,2587,3.358,2589,4.706,2590,6.729,2591,3.839,2592,3.839,2593,5.379,2594,3.839,2595,5.379,2596,3.839,2597,5.379,2598,3.839,2599,3.839,2600,3.839,2601,3.839,2602,3.839,2603,3.839,2604,5.379,2605,5.379,2606,3.839,2607,3.839,2608,3.839,2609,3.839,2610,3.839,2611,3.839,2612,3.839,2613,3.839,2614,3.839,2615,8.007,2616,6.729,2617,7.343,2618,5.379,2619,3.839,2620,3.839,2621,3.839,2622,3.839,2623,5.379,2624,5.379,2625,3.839,2626,6.209,2627,3.839,2628,3.839,2629,3.839,2630,3.839,2631,3.839,2632,3.839,2633,3.839,2634,3.839,2635,3.839,2636,3.839,2637,3.839,2638,3.839,2639,5.379,2640,3.839,2641,5.379,2642,3.839,2643,3.839,2644,3.839,2645,3.839,2646,5.379,2647,3.839,2648,3.839,2649,3.358,2650,3.839,2651,3.839,2652,3.839,2653,3.839,2654,3.839,2655,3.839,2656,3.358,2657,3.358,2658,3.358,2659,3.839,2660,3.839,2661,3.839,2662,3.839,2663,3.839,2664,3.839,2665,3.839,2666,3.839,2667,3.839,2668,3.839,2669,3.839,2670,3.839,2671,3.839,2672,3.839,2673,3.839,2674,3.839,2675,3.839,2676,3.839,2677,3.839,2678,3.839,2679,3.839,2680,5.379,2681,5.379,2682,5.379,2683,3.839,2684,3.839,2685,3.839,2686,3.839,2687,3.839,2688,3.839,2689,3.839,2690,3.839,2691,3.839,2692,3.839,2693,3.839,2694,6.209,2695,3.839,2696,3.839,2697,3.839,2698,5.379,2699,5.379,2700,3.839,2701,3.839,2702,3.839,2703,3.839,2704,3.839,2705,3.839,2706,3.839,2707,3.839,2708,6.209,2709,5.379,2710,6.209,2711,3.839,2712,3.839,2713,3.839,2714,3.839,2715,6.209,2716,3.839,2717,3.839,2718,3.839,2719,3.839,2720,3.839,2721,3.839,2722,3.839,2723,3.839,2724,3.839,2725,5.379,2726,3.839,2727,3.839,2728,3.839,2729,3.839,2730,3.839,2731,3.839,2732,3.839,2733,4.706,2734,4.263,2735,5.379,2736,3.839,2737,3.839,2738,3.839,2739,3.839,2740,3.839,2741,3.839,2742,2.806,2743,3.358,2744,3.042,2745,3.042,2746,3.839,2747,3.839]],["title/license.html",[2386,2.407,2387,2.407,2742,2.581]],["body/license.html",[29,0.01,58,2.979,87,0.01,88,0.01,106,2.545,155,4.345,184,3.112,338,4.711,694,3.745,705,2.545,866,2.41,894,4.711,1228,4.345,1348,5.201,1496,4.711,1530,3.419,1649,5.201,1883,6.715,2014,5.201,2390,5.201,2649,5.201,2734,4.711,2742,4.345,2744,4.711,2745,4.711,2748,7.676,2749,7.155,2750,5.945,2751,5.945,2752,5.945,2753,5.945,2754,5.945,2755,5.945,2756,7.155,2757,8.5,2758,5.945,2759,5.945,2760,5.945,2761,5.945,2762,5.945,2763,5.945,2764,5.945,2765,5.945,2766,5.945,2767,5.945,2768,5.945,2769,7.155,2770,5.945,2771,5.945,2772,5.945,2773,5.945,2774,5.945,2775,7.155,2776,7.155,2777,5.945,2778,5.945,2779,5.945,2780,5.945,2781,5.945,2782,5.945,2783,5.945,2784,5.945,2785,5.945,2786,5.945,2787,5.945,2788,5.945,2789,5.945,2790,5.945,2791,5.945,2792,5.945,2793,5.945,2794,5.945,2795,5.945,2796,5.945,2797,5.945,2798,5.945,2799,5.945]],["title/modules.html",[91,2.37]],["body/modules.html",[29,0.01,87,0.01,88,0.01,90,4.309,91,2.608,100,4.309,101,4.309,102,4.309,103,4.309,203,4.309,206,3.828,464,5.222,1595,4.309,1630,4.309,1631,4.309,2800,8.62,2801,8.62,2802,8.62]],["title/overview.html",[2803,5.023]],["body/overview.html",[2,1.123,29,0.012,87,0.009,88,0.009,89,0.874,90,5.736,91,2.124,92,2.203,93,2.579,94,2.579,95,2.377,96,2.377,97,2.579,98,4.503,99,4.503,100,5.448,101,5.33,102,5.7,103,5.33,104,3.279,105,2.579,106,2.203,141,2.124,153,4.67,203,5.448,204,4.503,205,4.503,206,5.065,313,2.377,628,5.203,657,1.98,680,4.503,681,4.503,682,4.503,698,4.918,699,4.587,1059,4.611,1110,4.503,1111,4.503,1577,5.203,1580,4.67,1595,5.33,1596,4.503,1597,4.503,1598,4.503,1626,4.503,1627,4.503,1628,4.503,1629,4.503,1630,5.448,1631,5.448,1668,5.203,1669,4.503,1670,4.503,1671,4.503,1721,5.203,1726,4.503,1727,4.503,1728,4.503,1875,4.503,1876,4.503,1877,4.503,1899,4.611,1906,4.503,1907,4.503,1943,2.377,1965,3.762,2803,4.503,2804,6.544,2805,5.146]],["title/properties.html",[18,0.889,2517,3.089]],["body/properties.html",[8,0.462,18,1.135,29,0.012,87,0.01,88,0.01,180,4.15,266,6.96,346,2.579,2398,5.665,2417,5.665,2425,5.964,2589,5.665,2656,6.584,2657,6.96,2658,5.665,2733,5.665,2734,5.131,2742,4.733,2743,5.665,2744,5.131,2745,5.131,2806,6.475,2807,6.475,2808,6.475,2809,6.475]],["title/miscellaneous/typealiases.html",[2544,2.263,2810,5.069]],["body/miscellaneous/typealiases.html",[5,0.146,17,0.446,18,1.042,29,0.011,31,0.615,32,1.042,44,2.66,50,3.112,87,0.01,88,0.01,154,2.858,211,3.173,220,4.585,222,5.67,224,4.335,333,4.711,334,2.068,473,3.063,616,4.345,871,4.711,904,5.201,927,3.257,1125,4.878,1136,6.26,1363,4.415,1407,3.112,1619,4.585,1650,4.053,1829,5.223,2317,4.711,2324,4.711,2353,5.201,2355,5.201,2378,6.969,2544,3.81,2547,5.201,2548,7.242,2550,5.201,2553,5.201,2567,5.201,2811,5.945,2812,5.945,2813,5.945,2814,7.155,2815,7.155,2816,5.945,2817,5.945,2818,5.945,2819,5.945,2820,5.945,2821,5.945,2822,5.945,2823,5.945,2824,5.945,2825,5.945,2826,5.945,2827,5.945]]],"invertedIndex":[["",{"_index":29,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UpdateDto.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"changelog.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":309,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"classes/CreateDto.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"injectables/FilesS3PresignedService.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"injectables/SortBy.html":{},"classes/UtilsService.html":{},"coverage.html":{}}}],["0.14.1",{"_index":2529,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":2542,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":2528,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":2449,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":2480,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":2490,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":2483,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":2457,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":2484,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":2481,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":2482,"title":{},"body":{"coverage.html":{}}}],["01",{"_index":2392,"title":{},"body":{"changelog.html":{}}}],["06",{"_index":2399,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":2391,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":654,"title":{"classes/EnvironmentVariablesValidator-1.html":{},"classes/FileResponseDto-1.html":{},"classes/Query-1.html":{}},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvironmentVariablesValidator.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query-2.html":{},"classes/QueryCountryDto.html":{},"interfaces/QueryOptions.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["1.0.0",{"_index":2398,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["1.0.1",{"_index":2389,"title":{},"body":{"changelog.html":{}}}],["1.4.5",{"_index":2536,"title":{},"body":{"dependencies.html":{}}}],["1.7.2",{"_index":2527,"title":{},"body":{"dependencies.html":{}}}],["1.7.4",{"_index":2531,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":2468,"title":{},"body":{"coverage.html":{}}}],["1/10",{"_index":2464,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":2496,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":2461,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":2459,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":657,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"classes/CreateDto.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"coverage.html":{},"overview.html":{}}}],["10.2.3",{"_index":2524,"title":{},"body":{"dependencies.html":{}}}],["10.3.9",{"_index":2521,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":1393,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"coverage.html":{}}}],["10})@isoptional()@isnumberstringornumber()@tonumber()@min(10)@max(500",{"_index":2044,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["11/11",{"_index":2497,"title":{},"body":{"coverage.html":{}}}],["12",{"_index":2804,"title":{},"body":{"overview.html":{}}}],["123456",{"_index":1740,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["123e4567",{"_index":971,"title":{},"body":{"classes/Country.html":{}}}],["127",{"_index":1272,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{}}}],["12d3",{"_index":973,"title":{},"body":{"classes/Country.html":{}}}],["138723",{"_index":1541,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["138723})@isnumber",{"_index":1539,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["14/14",{"_index":2465,"title":{},"body":{"coverage.html":{}}}],["15/15",{"_index":2489,"title":{},"body":{"coverage.html":{}}}],["1})@isoptional()@isnumberstringornumber()@tonumber()@min(1",{"_index":2046,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["2",{"_index":374,"title":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileResponseDto-2.html":{},"classes/Query-2.html":{}},"body":{"injectables/CommaSeparated.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"classes/Currency.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/SortBy.html":{},"contributing.html":{}}}],["2/2",{"_index":2456,"title":{},"body":{"coverage.html":{}}}],["2/3",{"_index":2488,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":2458,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["2024",{"_index":2390,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["25",{"_index":2400,"title":{},"body":{"changelog.html":{}}}],["270",{"_index":990,"title":{},"body":{"classes/Country.html":{}}}],["3",{"_index":984,"title":{},"body":{"classes/Country.html":{},"classes/CreateDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"contributing.html":{}}}],["3.0.1",{"_index":2538,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":2520,"title":{},"body":{"dependencies.html":{}}}],["3.2.2",{"_index":2522,"title":{},"body":{"dependencies.html":{}}}],["3.609.0",{"_index":2518,"title":{},"body":{"dependencies.html":{}}}],["3.613.0",{"_index":2519,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":2463,"title":{},"body":{"coverage.html":{}}}],["3/5",{"_index":2495,"title":{},"body":{"coverage.html":{}}}],["3000",{"_index":1324,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["3166",{"_index":980,"title":{},"body":{"classes/Country.html":{}}}],["33",{"_index":2460,"title":{},"body":{"coverage.html":{}}}],["330",{"_index":999,"title":{},"body":{"classes/Country.html":{}}}],["35",{"_index":2805,"title":{},"body":{"overview.html":{}}}],["3600",{"_index":1527,"title":{},"body":{"classes/FileType.html":{},"injectables/FilesS3PresignedService.html":{}}}],["3a25",{"_index":1463,"title":{},"body":{"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileType.html":{}}}],["4",{"_index":1976,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"contributing.html":{}}}],["4.19.2",{"_index":2532,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":2476,"title":{},"body":{"coverage.html":{}}}],["426614174000",{"_index":975,"title":{},"body":{"classes/Country.html":{}}}],["4adb",{"_index":1464,"title":{},"body":{"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileType.html":{}}}],["5",{"_index":1977,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"contributing.html":{}}}],["5.17.0",{"_index":2525,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":2477,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":658,"title":{},"body":{"controllers/CountriesController.html":{},"coverage.html":{}}}],["500",{"_index":1816,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/SortByDto.html":{}}}],["5242880",{"_index":601,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["5432",{"_index":1385,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["5:30",{"_index":987,"title":{},"body":{"classes/Country.html":{}}}],["5mb",{"_index":602,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["6",{"_index":1034,"title":{},"body":{"classes/CreateDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"contributing.html":{}}}],["6/6",{"_index":2509,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":1972,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"coverage.html":{}}}],["65535",{"_index":1373,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["66",{"_index":2487,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":1965,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"overview.html":{}}}],["7.1.0",{"_index":2535,"title":{},"body":{"dependencies.html":{}}}],["7.3.1",{"_index":2523,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":2543,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":2462,"title":{},"body":{"coverage.html":{}}}],["7/8",{"_index":2492,"title":{},"body":{"coverage.html":{}}}],["76",{"_index":1974,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{}}}],["77",{"_index":913,"title":{},"body":{"injectables/CountriesService.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{}}}],["8",{"_index":1968,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{}}}],["8.12.0",{"_index":2540,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":2493,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":1026,"title":{},"body":{"classes/CreateDto.html":{}}}],["87",{"_index":2491,"title":{},"body":{"coverage.html":{}}}],["9/9",{"_index":2494,"title":{},"body":{"coverage.html":{}}}],["91",{"_index":967,"title":{},"body":{"classes/Country.html":{}}}],["9]+(,[0",{"_index":351,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["9]+)*$/.test(propertyvalue",{"_index":352,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["_",{"_index":257,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/DynamicQueryBuilder.html":{},"classes/HttpErrorFilter.html":{},"injectables/PrismaService.html":{},"classes/Query-2.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{}}}],["_.clone(errorresponse",{"_index":1933,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["_.clone(r",{"_index":302,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["_.clone(request.body",{"_index":296,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{}}}],["_.clone(request.header",{"_index":298,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{}}}],["_.get(where",{"_index":2255,"title":{},"body":{"classes/Query-2.html":{}}}],["_.isarray(r.message",{"_index":268,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["_.isempty(rows",{"_index":2183,"title":{},"body":{"injectables/PrismaService.html":{}}}],["_.keys(conds",{"_index":1239,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{}}}],["_.mapkeys(where",{"_index":2264,"title":{},"body":{"classes/Query-2.html":{}}}],["_.pick(values",{"_index":1237,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["_.pick(where",{"_index":2258,"title":{},"body":{"classes/Query-2.html":{}}}],["_.unset(where",{"_index":2261,"title":{},"body":{"classes/Query-2.html":{}}}],["_.values(conds",{"_index":1241,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{}}}],["_validationfilter",{"_index":241,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["_validationfilter(validationerrors",{"_index":244,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["a456",{"_index":974,"title":{},"body":{"classes/Country.html":{}}}],["a9c6",{"_index":1465,"title":{},"body":{"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileType.html":{}}}],["abbr",{"_index":762,"title":{},"body":{"injectables/CountriesService.html":{},"classes/Country.html":{}}}],["abbreviation",{"_index":957,"title":{},"body":{"classes/Country.html":{}}}],["abc",{"_index":1852,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["abc123",{"_index":1484,"title":{},"body":{"classes/FileResponseDto-2.html":{}}}],["above",{"_index":2774,"title":{},"body":{"license.html":{}}}],["abstract",{"_index":2061,"title":{},"body":{"classes/PaginationResponseDto.html":{}}}],["access",{"_index":1410,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"modules/FilesS3Module.html":{},"injectables/HomeService.html":{}}}],["accessing",{"_index":1507,"title":{},"body":{"classes/FileType.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["accesskeyid",{"_index":592,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"interfaces/IFileConfig.html":{}}}],["accessors",{"_index":388,"title":{},"body":{"classes/ConfigService.html":{}}}],["acl",{"_index":1733,"title":{},"body":{"modules/FilesS3PresignedModule.html":{}}}],["action",{"_index":2796,"title":{},"body":{"license.html":{}}}],["actions",{"_index":2151,"title":{},"body":{"injectables/PrismaService.html":{}}}],["add",{"_index":765,"title":{},"body":{"injectables/CountriesService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{},"contributing.html":{},"index.html":{}}}],["addhttpqueryerror",{"_index":2209,"title":{},"body":{"classes/Query.html":{}}}],["addhttpqueryerror(module",{"_index":2210,"title":{},"body":{"classes/Query.html":{}}}],["adding",{"_index":1251,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["additional",{"_index":714,"title":{},"body":{"injectables/CountriesService.html":{},"classes/HttpErrorFilter.html":{},"classes/UtilsService.html":{}}}],["addqueryerror",{"_index":2217,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["addqueryerror(module",{"_index":2227,"title":{},"body":{"classes/Query-1.html":{}}}],["adhere",{"_index":2436,"title":{},"body":{"contributing.html":{}}}],["adheres",{"_index":1006,"title":{},"body":{"classes/CreateDto.html":{}}}],["admin",{"_index":492,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["against",{"_index":2575,"title":{},"body":{"miscellaneous/functions.html":{}}}],["age",{"_index":1828,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["aggregate",{"_index":119,"title":{},"body":{"modules/ApiModule.html":{}}}],["aggregated",{"_index":2818,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["aggregates",{"_index":108,"title":{},"body":{"modules/ApiModule.html":{}}}],["algorithm",{"_index":540,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IJWTConfig.html":{}}}],["alias",{"_index":741,"title":{},"body":{"injectables/CountriesService.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/UtilsService.html":{}}}],["aliases",{"_index":871,"title":{},"body":{"injectables/CountriesService.html":{},"classes/UtilsService.html":{},"miscellaneous/typealiases.html":{}}}],["alias}.${filter.field",{"_index":836,"title":{},"body":{"injectables/CountriesService.html":{},"classes/UtilsService.html":{}}}],["alias}.${sortitem.field",{"_index":872,"title":{},"body":{"injectables/CountriesService.html":{},"classes/UtilsService.html":{}}}],["alias}.abbr",{"_index":763,"title":{},"body":{"injectables/CountriesService.html":{}}}],["alias}.code",{"_index":764,"title":{},"body":{"injectables/CountriesService.html":{}}}],["alias}.id_currency",{"_index":744,"title":{},"body":{"injectables/CountriesService.html":{}}}],["alias}.id_timezone",{"_index":755,"title":{},"body":{"injectables/CountriesService.html":{}}}],["alias}.name",{"_index":751,"title":{},"body":{"injectables/CountriesService.html":{}}}],["alias}.offset",{"_index":759,"title":{},"body":{"injectables/CountriesService.html":{}}}],["alias}.offset_in_minutes",{"_index":760,"title":{},"body":{"injectables/CountriesService.html":{}}}],["alias}.symbol",{"_index":750,"title":{},"body":{"injectables/CountriesService.html":{}}}],["alias}.text",{"_index":761,"title":{},"body":{"injectables/CountriesService.html":{}}}],["alias}.value",{"_index":758,"title":{},"body":{"injectables/CountriesService.html":{}}}],["allconfigtype",{"_index":1619,"title":{},"body":{"injectables/FilesLocalService.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/HomeService.html":{},"injectables/PrismaService.html":{},"miscellaneous/typealiases.html":{}}}],["allexceptionsfilter",{"_index":1,"title":{"classes/AllExceptionsFilter.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["allow",{"_index":1514,"title":{},"body":{"classes/FileType.html":{},"modules/HelperModule.html":{}}}],["allowed",{"_index":1425,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"injectables/FilesS3PresignedService.html":{}}}],["allowedkeys",{"_index":2248,"title":{},"body":{"classes/Query-2.html":{}}}],["allowedkeys.join",{"_index":2256,"title":{},"body":{"classes/Query-2.html":{}}}],["allowing",{"_index":2354,"title":{},"body":{"classes/UpdateDto.html":{}}}],["allows",{"_index":616,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"modules/FilesModule.html":{},"miscellaneous/typealiases.html":{}}}],["along",{"_index":1113,"title":{},"body":{"modules/CurrenciesModule.html":{}}}],["alpha",{"_index":981,"title":{},"body":{"classes/Country.html":{}}}],["already",{"_index":1142,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["amazing",{"_index":2739,"title":{},"body":{"index.html":{}}}],["amazon",{"_index":1702,"title":{},"body":{"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["and/or",{"_index":2767,"title":{},"body":{"license.html":{}}}],["annotated",{"_index":946,"title":{},"body":{"classes/Country.html":{}}}],["another",{"_index":2582,"title":{},"body":{"miscellaneous/functions.html":{}}}],["any).message",{"_index":82,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["api",{"_index":120,"title":{},"body":{"modules/ApiModule.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/Country.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/FileResponseDto-1.html":{},"classes/FileType.html":{},"controllers/FilesS3Controller.html":{},"injectables/HomeService.html":{},"interfaces/IAppConfig.html":{},"index.html":{}}}],["api/v1/uploads/example",{"_index":1467,"title":{},"body":{"classes/FileResponseDto.html":{},"injectables/FilesLocalService.html":{}}}],["api_key",{"_index":575,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/ISMSConfig.html":{}}}],["api_prefix",{"_index":444,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{}}}],["apibody",{"_index":1564,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["apiconsumes",{"_index":1565,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["apiconsumes('multipart/form",{"_index":1585,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["apicreatedresponse",{"_index":1085,"title":{},"body":{"controllers/CurrenciesController.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{}}}],["apicreatedresponse({type",{"_index":1555,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{}}}],["apiexcludeendpoint",{"_index":1566,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["apiextramodels",{"_index":1846,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["apiextramodels(filterdto",{"_index":1864,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["apiextramodels(filterquerydto",{"_index":1848,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["apifile",{"_index":1569,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"coverage.html":{}}}],["apifilterquery",{"_index":666,"title":{},"body":{"controllers/CountriesController.html":{}}}],["apifilterquery('filters",{"_index":677,"title":{},"body":{"controllers/CountriesController.html":{}}}],["apifilterquery(fieldname",{"_index":1862,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["apimodule",{"_index":90,"title":{"modules/ApiModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["apimultifile",{"_index":2474,"title":{},"body":{"coverage.html":{}}}],["apinestedquery",{"_index":670,"title":{},"body":{"controllers/CountriesController.html":{}}}],["apiokresponse",{"_index":623,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{}}}],["apiparam",{"_index":1086,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["apiprefix",{"_index":508,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"injectables/HomeService.html":{},"interfaces/IAppConfig.html":{}}}],["apiproperty",{"_index":1039,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{}}}],["apiproperty()@isstring",{"_index":2346,"title":{},"body":{"classes/SortByDto.html":{},"classes/SortCountryDto.html":{}}}],["apiproperty()@type(undefined)@isstring",{"_index":2349,"title":{},"body":{"classes/SortCountryDto.html":{}}}],["apiproperty({example",{"_index":1535,"title":{},"body":{"classes/FileUploadDto.html":{},"classes/FilterQueryDto.html":{},"classes/SortByDto.html":{}}}],["apiproperty({type",{"_index":1185,"title":{},"body":{"classes/Currency.html":{},"classes/FileType.html":{}}}],["apipropertyoptional",{"_index":1777,"title":{},"body":{"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{}}}],["apipropertyoptional()@transform",{"_index":2287,"title":{},"body":{"classes/QueryCountryDto.html":{}}}],["apipropertyoptional({description",{"_index":2043,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["apipropertyoptional({name",{"_index":2038,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["apipropertyoptional({type",{"_index":2029,"title":{},"body":{"classes/PaginationMetaDto.html":{},"classes/QueryCountryDto.html":{}}}],["apiquery",{"_index":665,"title":{},"body":{"controllers/CountriesController.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["apiresponseproperty",{"_index":947,"title":{},"body":{"classes/Country.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{}}}],["apiresponseproperty({type",{"_index":954,"title":{},"body":{"classes/Country.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{}}}],["apitags",{"_index":173,"title":{},"body":{"controllers/AppController.html":{},"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"controllers/HomeController.html":{}}}],["apitags('countries",{"_index":631,"title":{},"body":{"controllers/CountriesController.html":{}}}],["apitags('currencies",{"_index":1091,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["apitags('files",{"_index":1579,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{}}}],["apitags('health",{"_index":181,"title":{},"body":{"controllers/AppController.html":{}}}],["apitags('home",{"_index":1903,"title":{},"body":{"controllers/HomeController.html":{}}}],["app",{"_index":1311,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"injectables/HomeService.html":{},"miscellaneous/functions.html":{}}}],["app.controller",{"_index":227,"title":{},"body":{"modules/AppModule.html":{}}}],["app_description",{"_index":1284,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["app_filter",{"_index":124,"title":{},"body":{"modules/ApiModule.html":{},"classes/HttpErrorFilter.html":{}}}],["app_name",{"_index":1285,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["app_port",{"_index":440,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{}}}],["app_prefix",{"_index":1286,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["app_version",{"_index":1287,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["appconfig",{"_index":220,"title":{},"body":{"modules/AppModule.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/FileType.html":{},"miscellaneous/typealiases.html":{}}}],["appconfig).backenddomain",{"_index":1516,"title":{},"body":{"classes/FileType.html":{}}}],["appcontroller",{"_index":140,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appinfo",{"_index":1900,"title":{},"body":{"controllers/HomeController.html":{},"injectables/HomeService.html":{}}}],["applicable",{"_index":2653,"title":{},"body":{"index.html":{}}}],["application",{"_index":44,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/Country.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"modules/FilesS3Module.html":{},"injectables/FilesService.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"injectables/ResolvePromisesInterceptor.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["application's",{"_index":149,"title":{},"body":{"controllers/AppController.html":{},"injectables/HomeService.html":{}}}],["applications",{"_index":2603,"title":{},"body":{"index.html":{}}}],["applies",{"_index":1664,"title":{},"body":{"controllers/FilesS3Controller.html":{}}}],["apply",{"_index":1807,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"index.html":{}}}],["applydecorators",{"_index":1853,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["appmodule",{"_index":203,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"classes/HttpErrorFilter.html":{},"modules.html":{},"overview.html":{}}}],["appprefix",{"_index":1314,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"injectables/HomeService.html":{}}}],["appropriate",{"_index":1061,"title":{},"body":{"controllers/CurrenciesController.html":{},"modules/FilesModule.html":{}}}],["area",{"_index":1271,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["args",{"_index":328,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["args.property",{"_index":354,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["arguments",{"_index":329,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"injectables/SortBy.html":{}}}],["argumentshost",{"_index":39,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["arising",{"_index":2798,"title":{},"body":{"license.html":{}}}],["array",{"_index":252,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"modules/FilesModule.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PrismaService.html":{},"classes/Query-2.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{}}}],["array.from(array(endpage",{"_index":2001,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["asas",{"_index":1617,"title":{},"body":{"injectables/FilesLocalService.html":{}}}],["asc",{"_index":360,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{}}}],["asc'})@isstring()@matches(/^(asc|desc|asc|desc",{"_index":2344,"title":{},"body":{"classes/SortByDto.html":{}}}],["asc1",{"_index":1851,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["ascending",{"_index":1830,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["asc|desc|asc|desc|asc|desc",{"_index":381,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["asia",{"_index":717,"title":{},"body":{"injectables/CountriesService.html":{},"classes/Country.html":{}}}],["asia/mumbai",{"_index":997,"title":{},"body":{"classes/Country.html":{}}}],["associated",{"_index":1496,"title":{},"body":{"classes/FileType.html":{},"classes/Query-1.html":{},"license.html":{}}}],["async",{"_index":156,"title":{},"body":{"controllers/AppController.html":{},"injectables/CommaSeparated.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"injectables/SortBy.html":{}}}],["asynchronously",{"_index":1732,"title":{},"body":{"modules/FilesS3PresignedModule.html":{}}}],["attributes",{"_index":935,"title":{},"body":{"classes/Country.html":{}}}],["audience",{"_index":544,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IJWTConfig.html":{}}}],["authentication",{"_index":2605,"title":{},"body":{"index.html":{}}}],["author",{"_index":2743,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authorization",{"_index":2632,"title":{},"body":{"index.html":{}}}],["authors",{"_index":2790,"title":{},"body":{"license.html":{}}}],["authsource",{"_index":491,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["automatic",{"_index":1857,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["available",{"_index":1607,"title":{},"body":{"modules/FilesLocalModule.html":{},"modules/HelperModule.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"miscellaneous/enumerations.html":{}}}],["await",{"_index":639,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{}}}],["awesome",{"_index":2613,"title":{},"body":{"index.html":{}}}],["aws",{"_index":467,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"dependencies.html":{}}}],["aws_access_key_id",{"_index":451,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["aws_default_s3_bucket",{"_index":453,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["aws_s3_access_key_id",{"_index":512,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IAwsConfig.html":{}}}],["aws_s3_bucket_name",{"_index":516,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IAwsConfig.html":{}}}],["aws_s3_companion_secret",{"_index":526,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IAwsConfig.html":{}}}],["aws_s3_default_region",{"_index":518,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IAwsConfig.html":{}}}],["aws_s3_endpoint",{"_index":522,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IAwsConfig.html":{}}}],["aws_s3_region",{"_index":454,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["aws_s3_secret_access_key",{"_index":514,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IAwsConfig.html":{}}}],["aws_s3_server_host",{"_index":524,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IAwsConfig.html":{}}}],["aws_s3_temp_directory",{"_index":520,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IAwsConfig.html":{}}}],["aws_secret_access_key",{"_index":452,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["awsdefaults3bucket",{"_index":596,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"interfaces/IFileConfig.html":{}}}],["awss3config",{"_index":511,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["awss3region",{"_index":598,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"interfaces/IFileConfig.html":{}}}],["axios",{"_index":2526,"title":{},"body":{"dependencies.html":{}}}],["b",{"_index":2429,"title":{},"body":{"contributing.html":{}}}],["backend",{"_index":1503,"title":{},"body":{"classes/FileType.html":{},"interfaces/IAppConfig.html":{}}}],["backend_domain",{"_index":443,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{}}}],["backenddomain",{"_index":505,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"interfaces/IAppConfig.html":{}}}],["backers",{"_index":2740,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":195,"title":{},"body":{"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/FileNotImageException.html":{}}}],["badrequestexceptionfilter",{"_index":236,"title":{"classes/BadRequestExceptionFilter.html":{}},"body":{"classes/BadRequestExceptionFilter.html":{},"coverage.html":{}}}],["baeumer",{"_index":2666,"title":{},"body":{"index.html":{}}}],["balnk",{"_index":2186,"title":{},"body":{"injectables/PrismaService.html":{}}}],["base",{"_index":1656,"title":{},"body":{"controllers/FilesS3Controller.html":{},"classes/Query-2.html":{},"classes/UtilsService.html":{}}}],["base64",{"_index":1717,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["based",{"_index":704,"title":{},"body":{"injectables/CountriesService.html":{},"classes/FileType.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/PaginationMetaDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{}}}],["baseexceptionfilter",{"_index":2109,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["basefields",{"_index":1170,"title":{},"body":{"injectables/CurrenciesService.html":{},"classes/UtilsService.html":{}}}],["basefields.join",{"_index":1174,"title":{},"body":{"injectables/CurrenciesService.html":{},"classes/UtilsService.html":{}}}],["basequery",{"_index":725,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/PaginationService.html":{}}}],["basequery.join",{"_index":779,"title":{},"body":{"injectables/CountriesService.html":{}}}],["bash",{"_index":2699,"title":{},"body":{"index.html":{}}}],["before",{"_index":2321,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{},"contributing.html":{}}}],["between",{"_index":1372,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"modules/FilesModule.html":{}}}],["bignumberstrings",{"_index":497,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["binary",{"_index":1586,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["body",{"_index":295,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"controllers/CurrenciesController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"classes/HttpErrorFilter.html":{},"index.html":{}}}],["boilerplate",{"_index":2590,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":337,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/PaginationResponseDto.html":{},"injectables/SortBy.html":{}}}],["boolean(this.get(key",{"_index":475,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["bootstrap",{"_index":95,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/CountriesModule.html":{},"modules/CurrenciesModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["boundary",{"_index":1861,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["box",{"_index":2607,"title":{},"body":{"index.html":{}}}],["branch",{"_index":2426,"title":{},"body":{"contributing.html":{}}}],["break",{"_index":900,"title":{},"body":{"injectables/CountriesService.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["breaking",{"_index":2727,"title":{},"body":{"index.html":{}}}],["browse",{"_index":2802,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2800,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":1414,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["bucket.s3.amazonaws.com/unique",{"_index":1492,"title":{},"body":{"classes/FileResponseDto-2.html":{}}}],["buffer",{"_index":1952,"title":{},"body":{"interfaces/IFileConfig.html":{}}}],["bug",{"_index":2393,"title":{},"body":{"changelog.html":{},"contributing.html":{}}}],["bugs",{"_index":2417,"title":{},"body":{"contributing.html":{},"properties.html":{}}}],["build",{"_index":1204,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["builddeletequery",{"_index":1205,"title":{},"body":{"classes/DynamicQueryBuilder.html":{}}}],["builddeletequery(options",{"_index":1209,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["builddynamicquery",{"_index":844,"title":{},"body":{"injectables/CountriesService.html":{},"classes/UtilsService.html":{}}}],["builddynamicquery(paginationquery",{"_index":2372,"title":{},"body":{"classes/UtilsService.html":{}}}],["builder",{"_index":2194,"title":{},"body":{"classes/Query.html":{}}}],["building",{"_index":1127,"title":{},"body":{"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{},"index.html":{}}}],["buildinsertquery",{"_index":1206,"title":{},"body":{"classes/DynamicQueryBuilder.html":{}}}],["buildinsertquery(options",{"_index":1214,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["buildrun",{"_index":2704,"title":{},"body":{"index.html":{}}}],["builds",{"_index":707,"title":{},"body":{"injectables/CountriesService.html":{},"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{}}}],["buildselectquery",{"_index":1207,"title":{},"body":{"classes/DynamicQueryBuilder.html":{}}}],["buildselectquery(options",{"_index":1217,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["buildtests",{"_index":2689,"title":{},"body":{"index.html":{}}}],["buildupdatequery",{"_index":1208,"title":{},"body":{"classes/DynamicQueryBuilder.html":{}}}],["buildupdatequery(options",{"_index":1219,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["built",{"_index":2375,"title":{},"body":{"classes/UtilsService.html":{},"index.html":{}}}],["bundles",{"_index":684,"title":{},"body":{"modules/CountriesModule.html":{},"modules/CurrenciesModule.html":{}}}],["business",{"_index":692,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"modules/FilesLocalModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{}}}],["bytes",{"_index":1427,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileUploadDto.html":{}}}],["c",{"_index":894,"title":{},"body":{"injectables/CountriesService.html":{},"classes/Query-2.html":{},"license.html":{}}}],["c${0",{"_index":746,"title":{},"body":{"injectables/CountriesService.html":{}}}],["c${0}.id_currency",{"_index":802,"title":{},"body":{"injectables/CountriesService.html":{}}}],["c${index",{"_index":805,"title":{},"body":{"injectables/CountriesService.html":{}}}],["c${index}.id",{"_index":922,"title":{},"body":{"injectables/CountriesService.html":{}}}],["c${index}.id_currency",{"_index":806,"title":{},"body":{"injectables/CountriesService.html":{}}}],["c${index}.name",{"_index":823,"title":{},"body":{"injectables/CountriesService.html":{}}}],["c.capital",{"_index":893,"title":{},"body":{"injectables/CountriesService.html":{}}}],["c.code",{"_index":2249,"title":{},"body":{"classes/Query-2.html":{}}}],["c.continent",{"_index":892,"title":{},"body":{"injectables/CountriesService.html":{}}}],["c.decimal_digits",{"_index":2253,"title":{},"body":{"classes/Query-2.html":{}}}],["c.dial_code",{"_index":891,"title":{},"body":{"injectables/CountriesService.html":{}}}],["c.id",{"_index":918,"title":{},"body":{"injectables/CountriesService.html":{}}}],["c.id_country",{"_index":885,"title":{},"body":{"injectables/CountriesService.html":{}}}],["c.id_currency",{"_index":821,"title":{},"body":{"injectables/CountriesService.html":{},"classes/Query-2.html":{}}}],["c.id_timezone",{"_index":824,"title":{},"body":{"injectables/CountriesService.html":{}}}],["c.iso",{"_index":887,"title":{},"body":{"injectables/CountriesService.html":{}}}],["c.iso3",{"_index":889,"title":{},"body":{"injectables/CountriesService.html":{}}}],["c.name",{"_index":886,"title":{},"body":{"injectables/CountriesService.html":{},"classes/Query-2.html":{}}}],["c.name_plural",{"_index":2250,"title":{},"body":{"classes/Query-2.html":{}}}],["c.nice_name",{"_index":888,"title":{},"body":{"injectables/CountriesService.html":{}}}],["c.num_code",{"_index":890,"title":{},"body":{"injectables/CountriesService.html":{}}}],["c.rounding",{"_index":2254,"title":{},"body":{"classes/Query-2.html":{}}}],["c.status",{"_index":2257,"title":{},"body":{"classes/Query-2.html":{}}}],["c.symbol",{"_index":2251,"title":{},"body":{"classes/Query-2.html":{}}}],["c.symbol_native",{"_index":2252,"title":{},"body":{"classes/Query-2.html":{}}}],["ca",{"_index":1342,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["calculate",{"_index":1986,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["callback",{"_index":1693,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["called",{"_index":2157,"title":{},"body":{"injectables/PrismaService.html":{}}}],["callhandler",{"_index":2329,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["cantuploadfiletype",{"_index":1750,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["capabilities",{"_index":2070,"title":{},"body":{"injectables/PaginationService.html":{}}}],["capital",{"_index":943,"title":{},"body":{"classes/Country.html":{}}}],["case",{"_index":898,"title":{},"body":{"injectables/CountriesService.html":{},"classes/PrismaClientExceptionFilter.html":{},"index.html":{}}}],["case.transformer",{"_index":1046,"title":{},"body":{"classes/CreateDto.html":{}}}],["case.transformer.ts",{"_index":2511,"title":{},"body":{"coverage.html":{}}}],["cases",{"_index":904,"title":{},"body":{"injectables/CountriesService.html":{},"miscellaneous/typealiases.html":{}}}],["catch",{"_index":12,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/QueryFailedFilter.html":{}}}],["catch(badrequestexception",{"_index":262,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["catch(exception",{"_index":37,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["catch(httpexception",{"_index":1940,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catch(prisma.prismaclientknownrequesterror",{"_index":2111,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["catch(queryfailederror",{"_index":2303,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["catches",{"_index":41,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["cause",{"_index":2124,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["caused",{"_index":2215,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["cbac",{"_index":2634,"title":{},"body":{"index.html":{}}}],["cbcfa8b8",{"_index":1462,"title":{},"body":{"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileType.html":{}}}],["cd",{"_index":2659,"title":{},"body":{"index.html":{}}}],["cert",{"_index":1404,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["certificate",{"_index":1343,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["certificates",{"_index":1351,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["change",{"_index":2185,"title":{},"body":{"injectables/PrismaService.html":{},"index.html":{}}}],["changelog",{"_index":2388,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["changes",{"_index":2430,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["characters",{"_index":1019,"title":{},"body":{"classes/CreateDto.html":{}}}],["charge",{"_index":2753,"title":{},"body":{"license.html":{}}}],["check",{"_index":145,"title":{},"body":{"controllers/AppController.html":{},"injectables/CurrenciesService.html":{},"injectables/PrismaService.html":{},"miscellaneous/functions.html":{}}}],["checking",{"_index":315,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{},"index.html":{}}}],["checkout",{"_index":2428,"title":{},"body":{"contributing.html":{}}}],["checks",{"_index":152,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/PrismaService.html":{},"miscellaneous/functions.html":{}}}],["choice",{"_index":1646,"title":{},"body":{"modules/FilesModule.html":{}}}],["choose",{"_index":2685,"title":{},"body":{"index.html":{}}}],["chore",{"_index":2720,"title":{},"body":{"index.html":{}}}],["city",{"_index":944,"title":{},"body":{"classes/Country.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["claim",{"_index":2793,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/ConfigService.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UpdateDto.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UpdateDto.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["classconstructor",{"_index":2586,"title":{},"body":{"miscellaneous/functions.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/ConfigService.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UpdateDto.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"overview.html":{}}}],["classreference",{"_index":2058,"title":{},"body":{"classes/PaginationResponseDto.html":{},"miscellaneous/functions.html":{}}}],["clause",{"_index":2376,"title":{},"body":{"classes/UtilsService.html":{}}}],["clauses",{"_index":839,"title":{},"body":{"injectables/CountriesService.html":{},"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{}}}],["client",{"_index":617,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"modules/FilesS3Module.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/ResolvePromisesInterceptor.html":{}}}],["clone",{"_index":2626,"title":{},"body":{"index.html":{}}}],["closed",{"_index":2729,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":1488,"title":{},"body":{"classes/FileResponseDto-2.html":{}}}],["cluster",{"_index":2713,"title":{},"body":{"index.html":{}}}],["cluster_apimodule",{"_index":98,"title":{},"body":{"modules/ApiModule.html":{},"overview.html":{}}}],["cluster_apimodule_imports",{"_index":99,"title":{},"body":{"modules/ApiModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":204,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":205,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_countriesmodule",{"_index":680,"title":{},"body":{"modules/CountriesModule.html":{},"overview.html":{}}}],["cluster_countriesmodule_exports",{"_index":681,"title":{},"body":{"modules/CountriesModule.html":{},"overview.html":{}}}],["cluster_countriesmodule_providers",{"_index":682,"title":{},"body":{"modules/CountriesModule.html":{},"overview.html":{}}}],["cluster_currenciesmodule",{"_index":1110,"title":{},"body":{"modules/CurrenciesModule.html":{},"overview.html":{}}}],["cluster_currenciesmodule_providers",{"_index":1111,"title":{},"body":{"modules/CurrenciesModule.html":{},"overview.html":{}}}],["cluster_fileslocalmodule",{"_index":1596,"title":{},"body":{"modules/FilesLocalModule.html":{},"overview.html":{}}}],["cluster_fileslocalmodule_exports",{"_index":1598,"title":{},"body":{"modules/FilesLocalModule.html":{},"overview.html":{}}}],["cluster_fileslocalmodule_providers",{"_index":1597,"title":{},"body":{"modules/FilesLocalModule.html":{},"overview.html":{}}}],["cluster_filesmodule",{"_index":1626,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_filesmodule_exports",{"_index":1629,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_filesmodule_imports",{"_index":1628,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_filesmodule_providers",{"_index":1627,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_filess3module",{"_index":1669,"title":{},"body":{"modules/FilesS3Module.html":{},"overview.html":{}}}],["cluster_filess3module_exports",{"_index":1670,"title":{},"body":{"modules/FilesS3Module.html":{},"overview.html":{}}}],["cluster_filess3module_providers",{"_index":1671,"title":{},"body":{"modules/FilesS3Module.html":{},"overview.html":{}}}],["cluster_filess3presignedmodule",{"_index":1726,"title":{},"body":{"modules/FilesS3PresignedModule.html":{},"overview.html":{}}}],["cluster_filess3presignedmodule_exports",{"_index":1727,"title":{},"body":{"modules/FilesS3PresignedModule.html":{},"overview.html":{}}}],["cluster_filess3presignedmodule_providers",{"_index":1728,"title":{},"body":{"modules/FilesS3PresignedModule.html":{},"overview.html":{}}}],["cluster_helpermodule",{"_index":1875,"title":{},"body":{"modules/HelperModule.html":{},"overview.html":{}}}],["cluster_helpermodule_exports",{"_index":1876,"title":{},"body":{"modules/HelperModule.html":{},"overview.html":{}}}],["cluster_helpermodule_providers",{"_index":1877,"title":{},"body":{"modules/HelperModule.html":{},"overview.html":{}}}],["cluster_homemodule",{"_index":1906,"title":{},"body":{"modules/HomeModule.html":{},"overview.html":{}}}],["cluster_homemodule_providers",{"_index":1907,"title":{},"body":{"modules/HomeModule.html":{},"overview.html":{}}}],["code",{"_index":279,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/FileNotImageException.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/Query-2.html":{},"contributing.html":{},"index.html":{}}}],["codeql",{"_index":2647,"title":{},"body":{"index.html":{}}}],["codes",{"_index":934,"title":{},"body":{"classes/Country.html":{},"controllers/CurrenciesController.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["column",{"_index":2119,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"classes/Query-2.html":{}}}],["column_name",{"_index":2121,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["columns",{"_index":1227,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["column’s",{"_index":2120,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["combines",{"_index":1855,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["comes",{"_index":2620,"title":{},"body":{"index.html":{}}}],["comma",{"_index":318,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["command",{"_index":1523,"title":{},"body":{"classes/FileType.html":{},"injectables/FilesS3PresignedService.html":{},"index.html":{}}}],["commaseparated",{"_index":312,"title":{"injectables/CommaSeparated.html":{}},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{},"coverage.html":{}}}],["commit",{"_index":2431,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["commitlint",{"_index":2642,"title":{},"body":{"index.html":{}}}],["commits",{"_index":2645,"title":{},"body":{"index.html":{}}}],["common",{"_index":1879,"title":{},"body":{"modules/HelperModule.html":{},"miscellaneous/functions.html":{}}}],["common/helper/helper.module",{"_index":219,"title":{},"body":{"modules/AppModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["common/helper/services/config.service",{"_index":1683,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["common/shared/services/pgsql.service",{"_index":260,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["community",{"_index":2410,"title":{},"body":{"contributing.html":{}}}],["components",{"_index":1600,"title":{},"body":{"modules/FilesLocalModule.html":{},"injectables/FilesS3Service.html":{}}}],["compose",{"_index":2616,"title":{},"body":{"index.html":{}}}],["compression",{"_index":2530,"title":{},"body":{"dependencies.html":{}}}],["conditionally",{"_index":1635,"title":{},"body":{"modules/FilesModule.html":{}}}],["conditions",{"_index":1228,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{},"license.html":{}}}],["conditions[key",{"_index":1249,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["conds",{"_index":1236,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{}}}],["config",{"_index":436,"title":{},"body":{"classes/ConfigService.html":{},"injectables/CountriesService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/UtilsService.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["config.alias",{"_index":2381,"title":{},"body":{"classes/UtilsService.html":{}}}],["config.alias(0",{"_index":865,"title":{},"body":{"injectables/CountriesService.html":{}}}],["config.alias(index",{"_index":852,"title":{},"body":{"injectables/CountriesService.html":{}}}],["config.ts",{"_index":2515,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["config.type",{"_index":1301,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"interfaces/IFileConfig.html":{}}}],["config.type.ts",{"_index":2548,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["config/app.config",{"_index":221,"title":{},"body":{"modules/AppModule.html":{},"classes/FileType.html":{}}}],["config/database.config",{"_index":223,"title":{},"body":{"modules/AppModule.html":{}}}],["config/file.config",{"_index":225,"title":{},"body":{"modules/AppModule.html":{},"classes/FileType.html":{}}}],["config/type/app",{"_index":1300,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"classes/FileType.html":{}}}],["config/type/config.type",{"_index":1620,"title":{},"body":{"injectables/FilesLocalService.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/HomeService.html":{},"injectables/PrismaService.html":{}}}],["config/type/file",{"_index":1428,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"interfaces/IFileConfig.html":{}}}],["configmodule",{"_index":215,"title":{},"body":{"modules/AppModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["configmodule.forroot",{"_index":230,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":384,"title":{"classes/ConfigService.html":{}},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"injectables/FilesLocalService.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"modules/HelperModule.html":{},"injectables/HomeService.html":{},"injectables/PrismaService.html":{},"coverage.html":{}}}],["configservice.get('database.url",{"_index":2166,"title":{},"body":{"injectables/PrismaService.html":{}}}],["configservice.get('file.awss3region",{"_index":1687,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["configservice.get('file.maxfilesize",{"_index":1698,"title":{},"body":{"modules/FilesS3Module.html":{}}}],["configservice.getorthrow('file.accesskeyid",{"_index":1688,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["configservice.getorthrow('file.awsdefaults3bucket",{"_index":1690,"title":{},"body":{"modules/FilesS3Module.html":{}}}],["configservice.getorthrow('file.secretaccesskey",{"_index":1689,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["configservice.prismaconfig",{"_index":2167,"title":{},"body":{"injectables/PrismaService.html":{}}}],["configuration",{"_index":211,"title":{},"body":{"modules/AppModule.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/HomeService.html":{},"interfaces/IAppConfig.html":{},"injectables/PrismaService.html":{},"classes/Query-2.html":{},"classes/UtilsService.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["configurations",{"_index":712,"title":{},"body":{"injectables/CountriesService.html":{},"modules/FilesS3PresignedModule.html":{}}}],["configure",{"_index":1182,"title":{},"body":{"classes/Currency.html":{}}}],["configured",{"_index":1731,"title":{},"body":{"modules/FilesS3PresignedModule.html":{},"index.html":{}}}],["configures",{"_index":1673,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HomeModule.html":{},"miscellaneous/functions.html":{}}}],["configuring",{"_index":117,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"interfaces/IPaginationFieldConfig.html":{}}}],["connection",{"_index":155,"title":{},"body":{"controllers/AppController.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"injectables/PrismaService.html":{},"license.html":{}}}],["connections",{"_index":214,"title":{},"body":{"modules/AppModule.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"injectables/PrismaService.html":{}}}],["connectivity",{"_index":2822,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["connects",{"_index":2162,"title":{},"body":{"injectables/PrismaService.html":{}}}],["console.log",{"_index":777,"title":{},"body":{"injectables/CountriesService.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"modules/FilesModule.html":{}}}],["console.log('____________________________________",{"_index":838,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/PaginationService.html":{}}}],["console.log('all",{"_index":63,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["console.log('bad",{"_index":263,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["console.log('benccccccccccccccccccccccccccccccccccccccccccc",{"_index":815,"title":{},"body":{"injectables/CountriesService.html":{}}}],["console.log('data",{"_index":2097,"title":{},"body":{"injectables/PaginationService.html":{}}}],["console.log('dattttttttttttttttttttttttt",{"_index":2084,"title":{},"body":{"injectables/PaginationService.html":{}}}],["console.log('filteroptions",{"_index":880,"title":{},"body":{"injectables/CountriesService.html":{}}}],["console.log('finalcountquery",{"_index":2098,"title":{},"body":{"injectables/PaginationService.html":{}}}],["console.log('hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhha",{"_index":651,"title":{},"body":{"controllers/CountriesController.html":{}}}],["console.log('hi",{"_index":908,"title":{},"body":{"injectables/CountriesService.html":{}}}],["console.log('hiii",{"_index":2089,"title":{},"body":{"injectables/PaginationService.html":{}}}],["console.log('http",{"_index":1941,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["console.log('paginationoptions",{"_index":882,"title":{},"body":{"injectables/CountriesService.html":{}}}],["console.log('prisma",{"_index":2112,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["console.log('qqqqqqqqqqqqqq",{"_index":2266,"title":{},"body":{"classes/Query-2.html":{}}}],["console.log('qqqqqqqqqqqqqqqqqqqq",{"_index":1273,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["console.log('query",{"_index":2260,"title":{},"body":{"classes/Query-2.html":{},"classes/QueryFailedFilter.html":{}}}],["console.log('resultttttttttttttttttttt",{"_index":2189,"title":{},"body":{"injectables/PrismaService.html":{}}}],["console.log('sortoptions",{"_index":881,"title":{},"body":{"injectables/CountriesService.html":{}}}],["console.log('update",{"_index":1100,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["console.log(offset",{"_index":2099,"title":{},"body":{"injectables/PaginationService.html":{}}}],["console.log(sqlquery",{"_index":2206,"title":{},"body":{"classes/Query.html":{}}}],["const",{"_index":65,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/FileType.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{}}}],["constraint",{"_index":2116,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["constrainterrors",{"_index":2302,"title":{},"body":{"classes/QueryFailedFilter.html":{},"coverage.html":{}}}],["constrainterrors[exception.constraint",{"_index":2306,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["constructed",{"_index":1502,"title":{},"body":{"classes/FileType.html":{},"classes/UtilsService.html":{}}}],["constructing",{"_index":1962,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/PaginationMetaDto.html":{}}}],["construction",{"_index":2233,"title":{},"body":{"classes/Query-2.html":{},"classes/UtilsService.html":{}}}],["constructor",{"_index":22,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/ConfigService.html":{},"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/FileNotImageException.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/HomeService.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/QueryFailedFilter.html":{},"classes/UserNotFoundException.html":{},"miscellaneous/functions.html":{}}}],["constructor(configservice",{"_index":1613,"title":{},"body":{"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/HomeService.html":{},"injectables/PrismaService.html":{}}}],["constructor(error",{"_index":2366,"title":{},"body":{"classes/UserNotFoundException.html":{}}}],["constructor(message",{"_index":1447,"title":{},"body":{"classes/FileNotImageException.html":{}}}],["constructor(paginationservice",{"_index":697,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{}}}],["constructor(prisma",{"_index":2075,"title":{},"body":{"injectables/PaginationService.html":{}}}],["constructor(private",{"_index":632,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/CurrenciesController.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"controllers/HomeController.html":{},"injectables/HomeService.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{}}}],["constructor(public",{"_index":61,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["constructor(reflector",{"_index":23,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["constructor(undefined",{"_index":2027,"title":{},"body":{"classes/PaginationMetaDto.html":{}}}],["constructs",{"_index":1904,"title":{},"body":{"controllers/HomeController.html":{},"injectables/HomeService.html":{},"injectables/PaginationService.html":{},"classes/Query.html":{},"classes/UtilsService.html":{}}}],["consumes",{"_index":1582,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["contain",{"_index":1604,"title":{},"body":{"modules/FilesLocalModule.html":{}}}],["contained",{"_index":2057,"title":{},"body":{"classes/PaginationResponseDto.html":{},"miscellaneous/functions.html":{}}}],["container",{"_index":2617,"title":{},"body":{"index.html":{}}}],["containing",{"_index":1212,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"injectables/PrismaService.html":{},"classes/Query-1.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{}}}],["contains",{"_index":47,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/FileResponseDto-1.html":{}}}],["contentlength",{"_index":1757,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["contenttype",{"_index":1691,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["context",{"_index":46,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/ResolvePromisesInterceptor.html":{}}}],["continent",{"_index":716,"title":{},"body":{"injectables/CountriesService.html":{},"classes/Country.html":{}}}],["contract",{"_index":2014,"title":{},"body":{"interfaces/IPaginationFieldConfig.html":{},"license.html":{}}}],["contribute",{"_index":2415,"title":{},"body":{"contributing.html":{}}}],["contributing",{"_index":2404,"title":{"contributing.html":{}},"body":{"contributing.html":{}}}],["contributing.md",{"_index":2405,"title":{},"body":{"contributing.html":{}}}],["contributions",{"_index":2409,"title":{},"body":{"contributing.html":{}}}],["control",{"_index":2000,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"index.html":{}}}],["controller",{"_index":139,"title":{"controllers/AppController.html":{},"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"controllers/HomeController.html":{}},"body":{"controllers/AppController.html":{},"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"coverage.html":{}}}],["controllers",{"_index":141,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"overview.html":{}}}],["controls",{"_index":1978,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["conventional",{"_index":2644,"title":{},"body":{"index.html":{}}}],["converts",{"_index":2576,"title":{},"body":{"miscellaneous/functions.html":{}}}],["coords",{"_index":1850,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["copies",{"_index":2769,"title":{},"body":{"license.html":{}}}],["copy",{"_index":2756,"title":{},"body":{"license.html":{}}}],["copyfile",{"_index":2500,"title":{},"body":{"coverage.html":{}}}],["copyright",{"_index":2748,"title":{},"body":{"license.html":{}}}],["core",{"_index":209,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["core/enum/file.type",{"_index":413,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["core/exceptions/http",{"_index":126,"title":{},"body":{"modules/ApiModule.html":{}}}],["core/interfaces/app.interfaces",{"_index":415,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["core/interfaces/aws.interfaces",{"_index":417,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["core/interfaces/file.interfaces",{"_index":419,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["core/interfaces/jwt.interfaces",{"_index":421,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["core/interfaces/node",{"_index":423,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["core/interfaces/postgres.interfaces",{"_index":426,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["core/interfaces/sendgrid.interfaces",{"_index":428,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["core/interfaces/sms.interfaces",{"_index":430,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["core/interfaces/upload",{"_index":432,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["core/validators/field.validator",{"_index":1796,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["correct",{"_index":355,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["corresponding",{"_index":2071,"title":{},"body":{"injectables/PaginationService.html":{}}}],["count",{"_index":710,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["count(${countbyfield",{"_index":2385,"title":{},"body":{"classes/UtilsService.html":{}}}],["countbyfield",{"_index":2373,"title":{},"body":{"classes/UtilsService.html":{}}}],["countfilterquery",{"_index":2095,"title":{},"body":{"injectables/PaginationService.html":{}}}],["counting",{"_index":2377,"title":{},"body":{"classes/UtilsService.html":{}}}],["countquery",{"_index":769,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["countries",{"_index":606,"title":{},"body":{"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"coverage.html":{}}}],["countries.controller",{"_index":690,"title":{},"body":{"modules/CountriesModule.html":{}}}],["countries.service",{"_index":629,"title":{},"body":{"controllers/CountriesController.html":{},"modules/CountriesModule.html":{}}}],["countries/countries.module",{"_index":128,"title":{},"body":{"modules/ApiModule.html":{}}}],["countriescontroller",{"_index":603,"title":{"controllers/CountriesController.html":{}},"body":{"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"coverage.html":{}}}],["countriesjson",{"_index":2451,"title":{},"body":{"coverage.html":{}}}],["countriesjson1",{"_index":2452,"title":{},"body":{"coverage.html":{}}}],["countrieslist",{"_index":2453,"title":{},"body":{"coverage.html":{}}}],["countriesmodule",{"_index":100,"title":{"modules/CountriesModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/CountriesModule.html":{},"modules.html":{},"overview.html":{}}}],["countriesservice",{"_index":628,"title":{"injectables/CountriesService.html":{}},"body":{"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"coverage.html":{},"overview.html":{}}}],["countriesservice.findall(paginationquery",{"_index":724,"title":{},"body":{"injectables/CountriesService.html":{}}}],["countriesservice.findall(paginationquery);example",{"_index":718,"title":{},"body":{"injectables/CountriesService.html":{}}}],["country",{"_index":134,"title":{"classes/Country.html":{}},"body":{"modules/ApiModule.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"coverage.html":{}}}],["country's",{"_index":940,"title":{},"body":{"classes/Country.html":{}}}],["country.dto",{"_index":649,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"classes/FilterCountryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortCountryDto.html":{},"coverage.html":{}}}],["country_name",{"_index":895,"title":{},"body":{"injectables/CountriesService.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["coverage",{"_index":2445,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":1054,"title":{},"body":{"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"contributing.html":{},"index.html":{}}}],["create(@body",{"_index":1094,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["create(createdto",{"_index":1062,"title":{},"body":{"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{}}}],["create(file",{"_index":1615,"title":{},"body":{"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{}}}],["create.dto",{"_index":2359,"title":{},"body":{"classes/UpdateDto.html":{}}}],["created",{"_index":1065,"title":{},"body":{"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{}}}],["createdto",{"_index":1000,"title":{"classes/CreateDto.html":{}},"body":{"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/UpdateDto.html":{},"coverage.html":{}}}],["creates",{"_index":26,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CurrenciesService.html":{},"classes/FileNotImageException.html":{},"injectables/FilesS3PresignedService.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PrismaService.html":{},"classes/QueryFailedFilter.html":{},"classes/UserNotFoundException.html":{},"miscellaneous/functions.html":{}}}],["creating",{"_index":1002,"title":{},"body":{"classes/CreateDto.html":{},"injectables/CurrenciesService.html":{},"injectables/FilesS3PresignedService.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"index.html":{}}}],["creation",{"_index":1146,"title":{},"body":{"injectables/CurrenciesService.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3Service.html":{}}}],["credentials",{"_index":1520,"title":{},"body":{"classes/FileType.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["ctx",{"_index":66,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["ctx.getrequest",{"_index":69,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["ctx.getresponse",{"_index":68,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["currencies",{"_index":743,"title":{},"body":{"injectables/CountriesService.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Query-2.html":{},"coverage.html":{}}}],["currencies.controller",{"_index":1114,"title":{},"body":{"modules/CurrenciesModule.html":{}}}],["currencies.service",{"_index":1087,"title":{},"body":{"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{}}}],["currencies/currencies.module",{"_index":129,"title":{},"body":{"modules/ApiModule.html":{}}}],["currenciescontroller",{"_index":1052,"title":{"controllers/CurrenciesController.html":{}},"body":{"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"coverage.html":{}}}],["currenciesmodule",{"_index":101,"title":{"modules/CurrenciesModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/CurrenciesModule.html":{},"modules.html":{},"overview.html":{}}}],["currenciesservice",{"_index":1059,"title":{"injectables/CurrenciesService.html":{}},"body":{"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"coverage.html":{},"overview.html":{}}}],["currency",{"_index":135,"title":{"classes/Currency.html":{}},"body":{"modules/ApiModule.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/Query-2.html":{},"classes/UpdateDto.html":{},"coverage.html":{}}}],["currency_name",{"_index":752,"title":{},"body":{"injectables/CountriesService.html":{},"classes/Country.html":{}}}],["current",{"_index":1924,"title":{},"body":{"classes/HttpErrorFilter.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["currentpage",{"_index":1964,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{}}}],["custom",{"_index":239,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/FileNotImageException.html":{},"controllers/FilesS3Controller.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UserNotFoundException.html":{},"miscellaneous/functions.html":{}}}],["damages",{"_index":2794,"title":{},"body":{"license.html":{}}}],["data",{"_index":909,"title":{},"body":{"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/FileResponseDto-1.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"injectables/ResolvePromisesInterceptor.html":{},"classes/SortByDto.html":{},"classes/UpdateDto.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["data')@apibody({schema",{"_index":1557,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["data.length",{"_index":2088,"title":{},"body":{"injectables/PaginationService.html":{}}}],["data=null",{"_index":2172,"title":{},"body":{"injectables/PrismaService.html":{}}}],["database",{"_index":154,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/ConfigService.html":{},"injectables/CurrenciesService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query-2.html":{},"classes/QueryFailedFilter.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["database_ca",{"_index":1327,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["database_cert",{"_index":1328,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["database_key",{"_index":1329,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["database_reject_unauthorized",{"_index":1330,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["database_ssl_enabled",{"_index":1331,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["database_synchronize",{"_index":1332,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["database_url",{"_index":1333,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["databaseconfig",{"_index":222,"title":{},"body":{"modules/AppModule.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"miscellaneous/typealiases.html":{}}}],["databases",{"_index":2614,"title":{},"body":{"index.html":{}}}],["dataquery",{"_index":2079,"title":{},"body":{"injectables/PaginationService.html":{}}}],["datasources",{"_index":2165,"title":{},"body":{"injectables/PrismaService.html":{}}}],["date().toisostring",{"_index":78,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["date().tolocaletimestring",{"_index":1928,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["db",{"_index":277,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"injectables/PrismaService.html":{}}}],["dbaeumer.vscode",{"_index":2664,"title":{},"body":{"index.html":{}}}],["dbconfig",{"_index":480,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["deal",{"_index":2758,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":2799,"title":{},"body":{"license.html":{}}}],["decimal",{"_index":1022,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{}}}],["decimal_digits",{"_index":1010,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/Query-2.html":{}}}],["declarations",{"_index":94,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/CountriesModule.html":{},"modules/CurrenciesModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{},"overview.html":{}}}],["declaring",{"_index":1909,"title":{},"body":{"modules/HomeModule.html":{}}}],["decorates",{"_index":185,"title":{},"body":{"controllers/AppController.html":{}}}],["decorator",{"_index":198,"title":{},"body":{"controllers/AppController.html":{},"controllers/FilesS3Controller.html":{},"miscellaneous/functions.html":{}}}],["decorators",{"_index":158,"title":{},"body":{"controllers/AppController.html":{},"controllers/CountriesController.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"classes/Currency.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3Service.html":{},"classes/FilterQueryDto.html":{},"controllers/HomeController.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"miscellaneous/functions.html":{}}}],["decorators/api",{"_index":671,"title":{},"body":{"controllers/CountriesController.html":{}}}],["decorators/api.filter.query",{"_index":667,"title":{},"body":{"controllers/CountriesController.html":{}}}],["decorators/number.string.validator",{"_index":1798,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["decorators/swagger.schema",{"_index":1570,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["decorators/transforms.decorator",{"_index":1800,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["deep",{"_index":2338,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["deeply",{"_index":2824,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["deepobject",{"_index":1867,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["deeppartial",{"_index":1136,"title":{},"body":{"injectables/CurrenciesService.html":{},"miscellaneous/typealiases.html":{}}}],["deepresolvepromises",{"_index":2323,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["deepresolvepromises(data",{"_index":2341,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["deepresolvepromises(input",{"_index":2563,"title":{},"body":{"miscellaneous/functions.html":{}}}],["default",{"_index":327,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/CountriesService.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{}}}],["defaultmessage",{"_index":322,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["defaultmessage(args",{"_index":324,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["define",{"_index":948,"title":{},"body":{"classes/Country.html":{},"classes/Currency.html":{},"classes/UpdateDto.html":{}}}],["defined",{"_index":24,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/FilterQueryDto.html":{},"controllers/HomeController.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{}}}],["defines",{"_index":605,"title":{},"body":{"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"injectables/FilesService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/Query-2.html":{},"classes/UpdateDto.html":{}}}],["delete",{"_index":1056,"title":{},"body":{"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{}}}],["delete(@param('id_currency",{"_index":1108,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["delete(`v1/${modules}/:id_currency",{"_index":1105,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["delete(id",{"_index":1066,"title":{},"body":{"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{}}}],["delete(key",{"_index":2280,"title":{},"body":{"classes/Query-2.html":{}}}],["delete(undefined)@httpcode(httpstatus.ok)@apiparam({name",{"_index":1067,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["deleted",{"_index":1071,"title":{},"body":{"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{}}}],["deleted[0]?.deletedid",{"_index":1177,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["deletedid",{"_index":2267,"title":{},"body":{"classes/Query-2.html":{}}}],["deleteid",{"_index":2282,"title":{},"body":{"classes/Query-2.html":{}}}],["deleteoptions",{"_index":2281,"title":{},"body":{"classes/Query-2.html":{}}}],["deletes",{"_index":1130,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["deletetype",{"_index":1235,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["deleting",{"_index":1118,"title":{},"body":{"injectables/CurrenciesService.html":{},"classes/Query-2.html":{}}}],["deletion",{"_index":1073,"title":{},"body":{"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{}}}],["delhi",{"_index":958,"title":{},"body":{"classes/Country.html":{}}}],["dependencies",{"_index":92,"title":{"dependencies.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/CountriesModule.html":{},"modules/CurrenciesModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{},"changelog.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["depends",{"_index":2123,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["deployment",{"_index":2709,"title":{},"body":{"index.html":{}}}],["deps",{"_index":2397,"title":{},"body":{"changelog.html":{}}}],["desc",{"_index":361,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{}}}],["descending",{"_index":1831,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["describe",{"_index":930,"title":{},"body":{"classes/Country.html":{},"classes/Currency.html":{},"contributing.html":{}}}],["description",{"_index":8,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UpdateDto.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["descriptive",{"_index":996,"title":{},"body":{"classes/Country.html":{}}}],["designed",{"_index":1772,"title":{},"body":{"injectables/FilesService.html":{},"injectables/ResolvePromisesInterceptor.html":{}}}],["destination",{"_index":1588,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["destroyed",{"_index":2158,"title":{},"body":{"injectables/PrismaService.html":{}}}],["detail",{"_index":2423,"title":{},"body":{"contributing.html":{}}}],["detailed",{"_index":2587,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["details",{"_index":169,"title":{},"body":{"controllers/AppController.html":{},"classes/Country.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"classes/HttpErrorFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{}}}],["determined",{"_index":1647,"title":{},"body":{"modules/FilesModule.html":{}}}],["development",{"_index":477,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["dharmesh",{"_index":2744,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["dial",{"_index":942,"title":{},"body":{"classes/Country.html":{}}}],["dial_code",{"_index":950,"title":{},"body":{"classes/Country.html":{}}}],["dialing",{"_index":970,"title":{},"body":{"classes/Country.html":{}}}],["different",{"_index":1633,"title":{},"body":{"modules/FilesModule.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/SortByDto.html":{},"miscellaneous/enumerations.html":{}}}],["digits",{"_index":1023,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{}}}],["direction",{"_index":357,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/CountriesService.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{}}}],["directionregex",{"_index":380,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["directory",{"_index":1948,"title":{},"body":{"interfaces/IAppConfig.html":{}}}],["dirk",{"_index":2665,"title":{},"body":{"index.html":{}}}],["disable",{"_index":343,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{}}}],["disconnects",{"_index":2159,"title":{},"body":{"injectables/PrismaService.html":{}}}],["diskstorage",{"_index":1567,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["display",{"_index":1982,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["distribute",{"_index":2765,"title":{},"body":{"license.html":{}}}],["docker",{"_index":2615,"title":{},"body":{"index.html":{}}}],["dockfile",{"_index":2673,"title":{},"body":{"index.html":{}}}],["docs",{"_index":1316,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"index.html":{}}}],["document",{"_index":1532,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["document.installation",{"_index":2686,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":184,"title":{},"body":{"controllers/AppController.html":{},"classes/Country.html":{},"classes/Currency.html":{},"classes/FileResponseDto-1.html":{},"classes/FileType.html":{},"controllers/FilesS3Controller.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{}}}],["documented",{"_index":1183,"title":{},"body":{"classes/Currency.html":{}}}],["documents",{"_index":1661,"title":{},"body":{"controllers/FilesS3Controller.html":{},"miscellaneous/functions.html":{}}}],["doesn't",{"_index":868,"title":{},"body":{"injectables/CountriesService.html":{},"classes/UtilsService.html":{}}}],["dollar",{"_index":964,"title":{},"body":{"classes/Country.html":{}}}],["domain",{"_index":1504,"title":{},"body":{"classes/FileType.html":{},"interfaces/IAppConfig.html":{}}}],["domain/country",{"_index":646,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{}}}],["domain/file",{"_index":1469,"title":{},"body":{"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{}}}],["don't",{"_index":2608,"title":{},"body":{"index.html":{}}}],["dotenv",{"_index":218,"title":{},"body":{"modules/AppModule.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"index.html":{}}}],["dotenv.config",{"_index":456,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["down",{"_index":2192,"title":{},"body":{"injectables/PrismaService.html":{},"index.html":{}}}],["download",{"_index":1545,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{}}}],["download(@param('path",{"_index":1593,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["download(path",{"_index":1547,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["downloaded",{"_index":1551,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["downloading",{"_index":1544,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{}}}],["downloads",{"_index":1550,"title":{},"body":{"controllers/FilesLocalController.html":{},"modules/FilesS3Module.html":{},"injectables/FilesS3PresignedService.html":{}}}],["driver",{"_index":590,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"interfaces/IFileConfig.html":{}}}],["drivers",{"_index":2551,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["dto",{"_index":937,"title":{},"body":{"classes/Country.html":{},"classes/CreateDto.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileUploadDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"classes/SortByDto.html":{},"classes/UpdateDto.html":{},"miscellaneous/functions.html":{}}}],["dto/country",{"_index":630,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{}}}],["dto/create.dto",{"_index":1088,"title":{},"body":{"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{}}}],["dto/currency",{"_index":1089,"title":{},"body":{"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{}}}],["dto/file",{"_index":1576,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{}}}],["dto/file.dto",{"_index":1720,"title":{},"body":{"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{}}}],["dto/query",{"_index":648,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{}}}],["dto/update.dto",{"_index":1090,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["dummy.ts",{"_index":2450,"title":{},"body":{"coverage.html":{}}}],["duplicate",{"_index":1148,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["during",{"_index":1145,"title":{},"body":{"injectables/CurrenciesService.html":{},"controllers/FilesLocalController.html":{}}}],["dx",{"_index":1834,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["dynamic",{"_index":695,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{}}}],["dynamically",{"_index":706,"title":{},"body":{"injectables/CountriesService.html":{},"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{}}}],["dynamicquerybuilder",{"_index":1200,"title":{"classes/DynamicQueryBuilder.html":{}},"body":{"classes/DynamicQueryBuilder.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{},"coverage.html":{}}}],["e",{"_index":2191,"title":{},"body":{"injectables/PrismaService.html":{}}}],["e.g",{"_index":372,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"interfaces/QueryOptions.html":{},"injectables/SortBy.html":{},"index.html":{}}}],["e2e",{"_index":2691,"title":{},"body":{"index.html":{}}}],["e325f0d0f3ae",{"_index":1466,"title":{},"body":{"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileType.html":{}}}],["e325f0d0f3ae'})@allow",{"_index":1497,"title":{},"body":{"classes/FileType.html":{}}}],["e89b",{"_index":972,"title":{},"body":{"classes/Country.html":{}}}],["each",{"_index":366,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UtilsService.html":{}}}],["easy",{"_index":2625,"title":{},"body":{"index.html":{}}}],["edge",{"_index":2732,"title":{},"body":{"index.html":{}}}],["editfilename",{"_index":1572,"title":{},"body":{"controllers/FilesLocalController.html":{},"coverage.html":{}}}],["efficient",{"_index":2600,"title":{},"body":{"index.html":{}}}],["emailer.interfaces",{"_index":424,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["emailer.interfaces.ts",{"_index":1957,"title":{},"body":{"interfaces/INodeEmailerConfig.html":{},"coverage.html":{}}}],["emits",{"_index":2334,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["enable",{"_index":1353,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["encapsulate",{"_index":1471,"title":{},"body":{"classes/FileResponseDto-1.html":{}}}],["encoded",{"_index":1718,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["encoding",{"_index":1951,"title":{},"body":{"interfaces/IFileConfig.html":{}}}],["encryptionservice",{"_index":1893,"title":{},"body":{"modules/HelperModule.html":{}}}],["end",{"_index":874,"title":{},"body":{"injectables/CountriesService.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"injectables/PaginationService.html":{}}}],["endindex",{"_index":1973,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{}}}],["endpage",{"_index":1970,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{}}}],["endpoint",{"_index":161,"title":{},"body":{"controllers/AppController.html":{},"controllers/CountriesController.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/HomeController.html":{},"index.html":{}}}],["endpoints",{"_index":146,"title":{},"body":{"controllers/AppController.html":{},"controllers/CurrenciesController.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"controllers/FilesS3PresignedController.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{}}}],["ensure",{"_index":370,"title":{},"body":{"injectables/CommaSeparated.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"contributing.html":{},"index.html":{}}}],["ensures",{"_index":1005,"title":{},"body":{"classes/CreateDto.html":{}}}],["entire",{"_index":2819,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["entities",{"_index":495,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["entity",{"_index":929,"title":{},"body":{"classes/Country.html":{},"classes/Currency.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"classes/UpdateDto.html":{},"miscellaneous/functions.html":{}}}],["enum",{"_index":1302,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"miscellaneous/enumerations.html":{}}}],["enumerations",{"_index":2545,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":228,"title":{},"body":{"modules/AppModule.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"coverage.html":{}}}],["env.${env",{"_index":235,"title":{},"body":{"modules/AppModule.html":{}}}],["env.${nodeenv",{"_index":458,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["env.development",{"_index":461,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["env.staging",{"_index":459,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["envfilepath",{"_index":234,"title":{},"body":{"modules/AppModule.html":{}}}],["environment",{"_index":212,"title":{},"body":{"modules/AppModule.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["environments",{"_index":2562,"title":{},"body":{"miscellaneous/functions.html":{}}}],["environmentvariablesvalidator",{"_index":1282,"title":{"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{}},"body":{"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"coverage.html":{}}}],["envname",{"_index":468,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["envvalues.database_url",{"_index":1378,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["envvalues.database_url)@isstring",{"_index":1357,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["envvarappconfigvalidator",{"_index":437,"title":{"classes/EnvVarAppConfigValidator.html":{}},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"coverage.html":{}}}],["envvarfileconfigvalidator",{"_index":445,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["envvariablesclass",{"_index":2585,"title":{},"body":{"miscellaneous/functions.html":{}}}],["equal",{"_index":2573,"title":{},"body":{"miscellaneous/functions.html":{}}}],["erro",{"_index":278,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["error",{"_index":85,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"injectables/CurrenciesService.html":{},"classes/FileNotImageException.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesS3PresignedService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/QueryFailedFilter.html":{},"injectables/SortBy.html":{},"classes/UserNotFoundException.html":{},"miscellaneous/functions.html":{}}}],["error.filter",{"_index":127,"title":{},"body":{"modules/ApiModule.html":{}}}],["error.filter.ts",{"_index":1919,"title":{},"body":{"classes/HttpErrorFilter.html":{},"coverage.html":{}}}],["error.filter.ts:50",{"_index":1923,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["errormessage",{"_index":2305,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["errormessages",{"_index":306,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["errorresponse",{"_index":74,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["errors",{"_index":250,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/HttpErrorFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/Query-1.html":{},"classes/QueryFailedFilter.html":{},"classes/UserNotFoundException.html":{},"miscellaneous/functions.html":{}}}],["errors.ts",{"_index":2479,"title":{},"body":{"coverage.html":{}}}],["esben",{"_index":2669,"title":{},"body":{"index.html":{}}}],["esbenp.prettier",{"_index":2667,"title":{},"body":{"index.html":{}}}],["escapes",{"_index":2196,"title":{},"body":{"classes/Query.html":{}}}],["escaping",{"_index":2133,"title":{},"body":{"injectables/PrismaService.html":{}}}],["escvalue",{"_index":2177,"title":{},"body":{"injectables/PrismaService.html":{}}}],["escvalue.replace(/'/g",{"_index":2179,"title":{},"body":{"injectables/PrismaService.html":{}}}],["eslint",{"_index":342,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{},"index.html":{}}}],["eslint/ban",{"_index":1858,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["eslint/explicit",{"_index":1860,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["eslint/no",{"_index":347,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{},"classes/UtilsService.html":{}}}],["eslint/prefer",{"_index":481,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["etc",{"_index":965,"title":{},"body":{"classes/Country.html":{}}}],["event",{"_index":2789,"title":{},"body":{"license.html":{}}}],["everyone",{"_index":2414,"title":{},"body":{"contributing.html":{}}}],["example",{"_index":166,"title":{},"body":{"controllers/AppController.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"classes/HttpErrorFilter.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/Query.html":{},"classes/SortByDto.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"contributing.html":{},"index.html":{}}}],["exceeds",{"_index":1748,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["exception",{"_index":10,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/FileNotImageException.html":{},"injectables/FilesS3Service.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"classes/UserNotFoundException.html":{},"miscellaneous/functions.html":{}}}],["exception.code",{"_index":2114,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["exception.constraint",{"_index":2307,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["exception.constraint.startswith('uq",{"_index":2308,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["exception.filter.ts",{"_index":1937,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:27",{"_index":1939,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts:30",{"_index":2108,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["exception.getresponse",{"_index":267,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["exception.getstatus",{"_index":72,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exception.message",{"_index":1929,"title":{},"body":{"classes/HttpErrorFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["exception.message.replace(/\\n/g",{"_index":2113,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["exception.query",{"_index":2310,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["exception.sqlmessage",{"_index":2309,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["exception.stack",{"_index":303,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{}}}],["exceptionfilter",{"_index":16,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["exceptions",{"_index":14,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["exceptions.filter.ts",{"_index":7,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["exceptions.filter.ts:47",{"_index":25,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exceptions.filter.ts:54",{"_index":36,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exceptions.filter.ts:63",{"_index":40,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exclude",{"_index":1198,"title":{},"body":{"classes/Currency.html":{},"classes/Query-2.html":{}}}],["exclude({toplainonly",{"_index":1188,"title":{},"body":{"classes/Currency.html":{}}}],["excluded",{"_index":1190,"title":{},"body":{"classes/Currency.html":{}}}],["executerawquery",{"_index":2135,"title":{},"body":{"injectables/PrismaService.html":{}}}],["executerawquery(query",{"_index":2170,"title":{},"body":{"injectables/PrismaService.html":{}}}],["executerawquery(queryobj",{"_index":2141,"title":{},"body":{"injectables/PrismaService.html":{}}}],["executes",{"_index":2131,"title":{},"body":{"injectables/PrismaService.html":{}}}],["executetransaction",{"_index":2136,"title":{},"body":{"injectables/PrismaService.html":{}}}],["executetransaction(actions",{"_index":2147,"title":{},"body":{"injectables/PrismaService.html":{}}}],["executing",{"_index":2154,"title":{},"body":{"injectables/PrismaService.html":{}}}],["execution",{"_index":45,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/ResolvePromisesInterceptor.html":{}}}],["executioncontext",{"_index":2328,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["exeption",{"_index":64,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exist",{"_index":1151,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["existing",{"_index":1097,"title":{},"body":{"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/Query-2.html":{},"classes/UpdateDto.html":{}}}],["exists",{"_index":1143,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["expected",{"_index":1662,"title":{},"body":{"controllers/FilesS3Controller.html":{}}}],["expiration",{"_index":1712,"title":{},"body":{"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{}}}],["expirationtime",{"_index":548,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IJWTConfig.html":{}}}],["expiresin",{"_index":1526,"title":{},"body":{"classes/FileType.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{}}}],["expiresinseconds",{"_index":546,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IJWTConfig.html":{}}}],["explanation",{"_index":2724,"title":{},"body":{"index.html":{}}}],["explode",{"_index":1868,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["export",{"_index":59,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UpdateDto.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{}}}],["exported",{"_index":1608,"title":{},"body":{"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{}}}],["exports",{"_index":97,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/CountriesModule.html":{},"modules/CurrenciesModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{},"overview.html":{}}}],["exposes",{"_index":1678,"title":{},"body":{"modules/FilesS3Module.html":{}}}],["exposing",{"_index":1057,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["express",{"_index":58,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"dependencies.html":{},"license.html":{}}}],["express.multer.file",{"_index":1554,"title":{},"body":{"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{}}}],["express.multers3.file",{"_index":1665,"title":{},"body":{"controllers/FilesS3Controller.html":{},"injectables/FilesS3Service.html":{}}}],["expression",{"_index":376,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["extending",{"_index":1452,"title":{},"body":{"classes/FileNotImageException.html":{}}}],["extends",{"_index":1446,"title":{},"body":{"classes/FileNotImageException.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/UpdateDto.html":{},"classes/UserNotFoundException.html":{}}}],["extensions",{"_index":2663,"title":{},"body":{"index.html":{}}}],["f",{"_index":2712,"title":{},"body":{"index.html":{}}}],["fail",{"_index":2304,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["failed",{"_index":2117,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["failed.filter.ts",{"_index":2294,"title":{},"body":{"classes/QueryFailedFilter.html":{},"coverage.html":{}}}],["failed.filter.ts:26",{"_index":2296,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["failed.filter.ts:34",{"_index":2297,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["failed.filter.ts:45",{"_index":2298,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["fails",{"_index":196,"title":{},"body":{"controllers/AppController.html":{},"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{},"miscellaneous/functions.html":{}}}],["failure",{"_index":2299,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["failures",{"_index":2295,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["false",{"_index":339,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{}}}],["false})@isoptional",{"_index":1279,"title":{},"body":{"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{}}}],["feat",{"_index":2717,"title":{},"body":{"index.html":{}}}],["feat(api",{"_index":2730,"title":{},"body":{"index.html":{}}}],["feature",{"_index":110,"title":{},"body":{"modules/ApiModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"contributing.html":{}}}],["features",{"_index":2401,"title":{},"body":{"changelog.html":{},"contributing.html":{},"index.html":{}}}],["fetch",{"_index":276,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"injectables/PaginationService.html":{}}}],["field",{"_index":356,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/CountriesService.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PrismaService.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{}}}],["field\":\"name\",\"direction\":\"asc",{"_index":1822,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["field\":\"name\",\"direction\":\"asc\"},{\"field\":\"age\",\"direction\":\"desc",{"_index":676,"title":{},"body":{"controllers/CountriesController.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["field\":\"name\",\"direction\":\"asc\"}]'})@isoptional()@transform",{"_index":2050,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["field\":\"name\",\"operator\":\"=\",\"value\":\"in",{"_index":1819,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["field\":\"name\",\"operator\":\"=\",\"value\":\"in\"}]'})@isoptional()@transform",{"_index":2039,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["field\":\"name\",\"operator\":\"like\",\"value\":\"john\"},{\"field\":\"age\",\"operator\":\">\",\"value\":\"30",{"_index":674,"title":{},"body":{"controllers/CountriesController.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["fieldconfigs",{"_index":737,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"classes/UtilsService.html":{}}}],["fieldconfigs[field",{"_index":851,"title":{},"body":{"injectables/CountriesService.html":{},"classes/UtilsService.html":{}}}],["fieldname",{"_index":1865,"title":{},"body":{"classes/FilterQueryDto.html":{},"interfaces/IFileConfig.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["fieldname}[${index",{"_index":1871,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["fieldname}[${index}].field",{"_index":1872,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["fieldname}[${index}].operator",{"_index":1873,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["fieldname}[${index}].value",{"_index":1874,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["fieldregex",{"_index":378,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["fields",{"_index":905,"title":{},"body":{"injectables/CountriesService.html":{},"classes/DynamicQueryBuilder.html":{},"interfaces/IPaginationFieldConfig.html":{},"injectables/PrismaService.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{},"classes/UpdateDto.html":{},"classes/UtilsService.html":{}}}],["fields.includes(key",{"_index":2176,"title":{},"body":{"injectables/PrismaService.html":{}}}],["fields.join",{"_index":1261,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["fil",{"_index":265,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UpdateDto.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["file's",{"_index":1472,"title":{},"body":{"classes/FileResponseDto-1.html":{},"classes/FileUploadDto.html":{},"injectables/FilesS3Service.html":{}}}],["file.filename.match(/\\.(jpg|jpeg|png|gif)$/i",{"_index":1749,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["file.filesize",{"_index":1751,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["file.interfaces",{"_index":433,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["file.interfaces.ts",{"_index":2026,"title":{},"body":{"interfaces/IUploadFileConfig.html":{},"coverage.html":{}}}],["file.jpg",{"_index":1468,"title":{},"body":{"classes/FileResponseDto.html":{},"injectables/FilesLocalService.html":{}}}],["file.key",{"_index":1769,"title":{},"body":{"injectables/FilesS3Service.html":{}}}],["file_driver",{"_index":447,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["file_upload_destination",{"_index":582,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IUploadFileConfig.html":{}}}],["fileconfig",{"_index":224,"title":{},"body":{"modules/AppModule.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"modules/FilesModule.html":{},"miscellaneous/typealiases.html":{}}}],["fileconfig).accesskeyid",{"_index":1521,"title":{},"body":{"classes/FileType.html":{}}}],["fileconfig).awsdefaults3bucket",{"_index":1524,"title":{},"body":{"classes/FileType.html":{}}}],["fileconfig).awss3region",{"_index":1519,"title":{},"body":{"classes/FileType.html":{}}}],["fileconfig).driver",{"_index":1515,"title":{},"body":{"classes/FileType.html":{},"modules/FilesModule.html":{}}}],["fileconfig).secretaccesskey",{"_index":1522,"title":{},"body":{"classes/FileType.html":{}}}],["filedriver",{"_index":412,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"interfaces/IFileConfig.html":{},"miscellaneous/enumerations.html":{}}}],["filedriver.local",{"_index":1431,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"modules/FilesModule.html":{}}}],["filedriver.s3",{"_index":449,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"modules/FilesModule.html":{}}}],["filedriver.s3].includes",{"_index":1518,"title":{},"body":{"classes/FileType.html":{}}}],["filedriver.s3_presigned",{"_index":1517,"title":{},"body":{"classes/FileType.html":{}}}],["filedriver.s3_presigned].includes(envvalues.file_driver",{"_index":450,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["filefilter",{"_index":1589,"title":{},"body":{"controllers/FilesLocalController.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["fileinterceptor",{"_index":1562,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["fileinterceptor('file",{"_index":1587,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["filename",{"_index":1533,"title":{},"body":{"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesS3PresignedService.html":{},"coverage.html":{}}}],["filenotimageexception",{"_index":1439,"title":{"classes/FileNotImageException.html":{}},"body":{"classes/FileNotImageException.html":{},"coverage.html":{}}}],["filenotimageexception('custom",{"_index":1445,"title":{},"body":{"classes/FileNotImageException.html":{}}}],["fileoverview",{"_index":132,"title":{},"body":{"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/FileType.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/Query-2.html":{},"classes/UpdateDto.html":{}}}],["fileresponsedto",{"_index":1456,"title":{"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{}},"body":{"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"coverage.html":{}}}],["fileresponsedto})@post('v1/upload",{"_index":1714,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["fileresponsedto})@post('v1/upload')@apiconsumes('multipart/form",{"_index":1556,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["fileresponsedto})@post('v1/upload/s3')@apiconsumes('multipart/form",{"_index":1666,"title":{},"body":{"controllers/FilesS3Controller.html":{}}}],["files",{"_index":1530,"title":{},"body":{"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"license.html":{}}}],["files.controller",{"_index":1602,"title":{},"body":{"modules/FilesLocalModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["files.service",{"_index":1578,"title":{},"body":{"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{}}}],["files/example.jpg",{"_index":1485,"title":{},"body":{"classes/FileResponseDto-2.html":{}}}],["files/files.module",{"_index":130,"title":{},"body":{"modules/ApiModule.html":{}}}],["files/v1/download/{key}?expiresin=3600",{"_index":1710,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["files/v1/upload",{"_index":1716,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["filesize",{"_index":1534,"title":{},"body":{"classes/FileUploadDto.html":{},"modules/FilesS3Module.html":{},"injectables/FilesS3PresignedService.html":{}}}],["fileslocalcontroller",{"_index":1542,"title":{"controllers/FilesLocalController.html":{}},"body":{"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"coverage.html":{}}}],["fileslocalmodule",{"_index":1595,"title":{"modules/FilesLocalModule.html":{}},"body":{"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules.html":{},"overview.html":{}}}],["fileslocalservice",{"_index":1577,"title":{"injectables/FilesLocalService.html":{}},"body":{"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"coverage.html":{},"overview.html":{}}}],["filesmodule",{"_index":102,"title":{"modules/FilesModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/FilesModule.html":{},"modules.html":{},"overview.html":{}}}],["filesroot",{"_index":1571,"title":{},"body":{"controllers/FilesLocalController.html":{},"coverage.html":{}}}],["filess3controller",{"_index":1651,"title":{"controllers/FilesS3Controller.html":{}},"body":{"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"coverage.html":{}}}],["filess3module",{"_index":1630,"title":{"modules/FilesS3Module.html":{}},"body":{"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules.html":{},"overview.html":{}}}],["filess3presignedcontroller",{"_index":1699,"title":{"controllers/FilesS3PresignedController.html":{}},"body":{"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"coverage.html":{}}}],["filess3presignedmodule",{"_index":1631,"title":{"modules/FilesS3PresignedModule.html":{}},"body":{"modules/FilesModule.html":{},"modules/FilesS3PresignedModule.html":{},"modules.html":{},"overview.html":{}}}],["filess3presignedservice",{"_index":1721,"title":{"injectables/FilesS3PresignedService.html":{}},"body":{"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"coverage.html":{},"overview.html":{}}}],["filess3service",{"_index":1668,"title":{"injectables/FilesS3Service.html":{}},"body":{"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"injectables/FilesS3Service.html":{},"coverage.html":{},"overview.html":{}}}],["filesservice",{"_index":1580,"title":{"injectables/FilesService.html":{}},"body":{"controllers/FilesLocalController.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesService.html":{},"coverage.html":{},"overview.html":{}}}],["filetype",{"_index":1460,"title":{"classes/FileType.html":{}},"body":{"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"coverage.html":{}}}],["fileuploaddto",{"_index":1528,"title":{"classes/FileUploadDto.html":{}},"body":{"classes/FileUploadDto.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"coverage.html":{}}}],["filter",{"_index":11,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"classes/FilterQueryDto.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PaginationQueryDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{}}}],["filter.direction",{"_index":842,"title":{},"body":{"injectables/CountriesService.html":{}}}],["filter.field",{"_index":841,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/PaginationService.html":{}}}],["filter.field.tolowercase",{"_index":819,"title":{},"body":{"injectables/CountriesService.html":{},"classes/UtilsService.html":{}}}],["filter.operator",{"_index":837,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["filter.operator.touppercase",{"_index":831,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["filter.value",{"_index":833,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["filter.value.split(',').map((val",{"_index":858,"title":{},"body":{"injectables/CountriesService.html":{},"classes/UtilsService.html":{}}}],["filterconditions",{"_index":817,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["filtercountrydto",{"_index":876,"title":{"classes/FilterCountryDto.html":{}},"body":{"injectables/CountriesService.html":{},"classes/FilterCountryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortCountryDto.html":{},"coverage.html":{}}}],["filterdto",{"_index":1863,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["filtering",{"_index":1076,"title":{},"body":{"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"modules/FilesS3Module.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{}}}],["filteroptions",{"_index":660,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{}}}],["filterquery",{"_index":774,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["filterquerydto",{"_index":669,"title":{"classes/FilterQueryDto.html":{}},"body":{"controllers/CountriesController.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"coverage.html":{}}}],["filters",{"_index":247,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UtilsService.html":{}}}],["filters.length",{"_index":847,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["filters[name]=something",{"_index":1856,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["filtervalues",{"_index":809,"title":{},"body":{"injectables/CountriesService.html":{},"classes/UtilsService.html":{}}}],["filtervalues.push(filter.value",{"_index":861,"title":{},"body":{"injectables/CountriesService.html":{},"classes/UtilsService.html":{}}}],["finalcountquery",{"_index":2096,"title":{},"body":{"injectables/PaginationService.html":{}}}],["finalselectquery",{"_index":812,"title":{},"body":{"injectables/CountriesService.html":{}}}],["find",{"_index":607,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{},"contributing.html":{}}}],["findall",{"_index":610,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{}}}],["findall(@query",{"_index":637,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{}}}],["findall(paginationquery",{"_index":701,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{}}}],["findall(query",{"_index":611,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{}}}],["findby(key",{"_index":2274,"title":{},"body":{"classes/Query-2.html":{}}}],["findbycode",{"_index":2234,"title":{},"body":{"classes/Query-2.html":{}}}],["findbycode(id",{"_index":2239,"title":{},"body":{"classes/Query-2.html":{}}}],["findbyid",{"_index":2235,"title":{},"body":{"classes/Query-2.html":{}}}],["findmanywithpagination",{"_index":878,"title":{},"body":{"injectables/CountriesService.html":{}}}],["findone",{"_index":1122,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["findone(id",{"_index":1133,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["first",{"_index":1979,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"index.html":{}}}],["fitness",{"_index":2785,"title":{},"body":{"license.html":{}}}],["fix",{"_index":2718,"title":{},"body":{"index.html":{}}}],["fix(core",{"_index":2731,"title":{},"body":{"index.html":{}}}],["fixed",{"_index":2395,"title":{},"body":{"changelog.html":{}}}],["fixes",{"_index":2394,"title":{},"body":{"changelog.html":{}}}],["flexible",{"_index":2599,"title":{},"body":{"index.html":{}}}],["follow",{"_index":2412,"title":{},"body":{"contributing.html":{}}}],["following",{"_index":2649,"title":{},"body":{"index.html":{},"license.html":{}}}],["footer",{"_index":2725,"title":{},"body":{"index.html":{}}}],["footer(s",{"_index":2716,"title":{},"body":{"index.html":{}}}],["fork",{"_index":2424,"title":{},"body":{"contributing.html":{}}}],["format",{"_index":358,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"injectables/SortBy.html":{},"index.html":{}}}],["formats",{"_index":248,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/CreateDto.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["formatted",{"_index":253,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["formatter",{"_index":2641,"title":{},"body":{"index.html":{}}}],["formatting",{"_index":2438,"title":{},"body":{"contributing.html":{}}}],["found",{"_index":280,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/FilesLocalController.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/UserNotFoundException.html":{}}}],["found.exception.ts",{"_index":2362,"title":{},"body":{"classes/UserNotFoundException.html":{},"coverage.html":{}}}],["found.exception.ts:20",{"_index":2367,"title":{},"body":{"classes/UserNotFoundException.html":{}}}],["foxundermoon",{"_index":2675,"title":{},"body":{"index.html":{}}}],["foxundermoon.shell",{"_index":2674,"title":{},"body":{"index.html":{}}}],["framework",{"_index":1771,"title":{},"body":{"injectables/FilesService.html":{},"index.html":{}}}],["free",{"_index":2752,"title":{},"body":{"license.html":{}}}],["from_email",{"_index":553,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/ISendGridConfig.html":{}}}],["fromquery",{"_index":735,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["frontend",{"_index":1945,"title":{},"body":{"interfaces/IAppConfig.html":{}}}],["frontend_domain",{"_index":442,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{}}}],["frontenddomain",{"_index":503,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"interfaces/IAppConfig.html":{}}}],["fsroot",{"_index":2501,"title":{},"body":{"coverage.html":{}}}],["fully",{"_index":2319,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["function",{"_index":1308,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"injectables/ResolvePromisesInterceptor.html":{},"classes/SortByDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["function(app",{"_index":2578,"title":{},"body":{"miscellaneous/functions.html":{}}}],["functionalities",{"_index":122,"title":{},"body":{"modules/ApiModule.html":{},"modules/CurrenciesModule.html":{},"injectables/FilesService.html":{},"modules/HomeModule.html":{}}}],["functionality",{"_index":1611,"title":{},"body":{"injectables/FilesLocalService.html":{},"modules/FilesS3Module.html":{},"injectables/FilesS3Service.html":{},"injectables/PaginationService.html":{}}}],["functions",{"_index":1126,"title":{"miscellaneous/functions.html":{}},"body":{"injectables/CurrenciesService.html":{},"miscellaneous/functions.html":{}}}],["furnished",{"_index":2772,"title":{},"body":{"license.html":{}}}],["generate",{"_index":2145,"title":{},"body":{"injectables/PrismaService.html":{},"classes/Query-2.html":{}}}],["generated",{"_index":1506,"title":{},"body":{"classes/FileType.html":{}}}],["generatepresignedurl",{"_index":1736,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["generatepresignedurl(key",{"_index":1741,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["generates",{"_index":1709,"title":{},"body":{"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{}}}],["generating",{"_index":1704,"title":{},"body":{"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{}}}],["generation",{"_index":1124,"title":{},"body":{"injectables/CurrenciesService.html":{},"controllers/FilesS3PresignedController.html":{}}}],["generator.util",{"_index":1681,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["get('/health",{"_index":197,"title":{},"body":{"controllers/AppController.html":{}}}],["get('/health')@healthcheck",{"_index":159,"title":{},"body":{"controllers/AppController.html":{}}}],["get(':path",{"_index":1592,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["get(':path')@apiexcludeendpoint",{"_index":1548,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["get('v1/countries",{"_index":634,"title":{},"body":{"controllers/CountriesController.html":{}}}],["get('v1/countries')@httpcode(httpstatus.ok)@apiokresponse({type",{"_index":613,"title":{},"body":{"controllers/CountriesController.html":{}}}],["get('v1/download/:key",{"_index":1707,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["get(`v1/${modules",{"_index":1102,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["get(key",{"_index":392,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["get(undefined)@httpcode(httpstatus.ok)@apiokresponse({type",{"_index":1074,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["get_all",{"_index":638,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{}}}],["getboolean",{"_index":386,"title":{},"body":{"classes/ConfigService.html":{}}}],["getboolean(key",{"_index":395,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["getdownloadurl",{"_index":1705,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["getdownloadurl(@param('key",{"_index":1723,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["getdownloadurl(key",{"_index":1706,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["gethealth",{"_index":157,"title":{},"body":{"controllers/AppController.html":{}}}],["getnodeenv",{"_index":400,"title":{},"body":{"classes/ConfigService.html":{}}}],["getnumber",{"_index":387,"title":{},"body":{"classes/ConfigService.html":{}}}],["getnumber(key",{"_index":397,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["getobjectcommand",{"_index":1508,"title":{},"body":{"classes/FileType.html":{},"injectables/FilesS3PresignedService.html":{}}}],["getprismaconfig",{"_index":402,"title":{},"body":{"classes/ConfigService.html":{}}}],["getschemapath",{"_index":1854,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["getschemapath(filterdto",{"_index":1870,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["getsignedurl",{"_index":1511,"title":{},"body":{"classes/FileType.html":{},"injectables/FilesS3PresignedService.html":{}}}],["getsignedurl(s3",{"_index":1525,"title":{},"body":{"classes/FileType.html":{}}}],["getsignedurl(this.s3",{"_index":1759,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["getting",{"_index":2386,"title":{"changelog.html":{},"contributing.html":{},"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["git",{"_index":2427,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["git+https://github.com/dharmesh",{"_index":2809,"title":{},"body":{"properties.html":{}}}],["github",{"_index":2419,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["given",{"_index":333,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{},"miscellaneous/typealiases.html":{}}}],["global",{"_index":9,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"modules/HelperModule.html":{},"classes/HttpErrorFilter.html":{},"miscellaneous/functions.html":{}}}],["granted",{"_index":2751,"title":{},"body":{"license.html":{}}}],["great",{"_index":2593,"title":{},"body":{"index.html":{}}}],["greater",{"_index":2572,"title":{},"body":{"miscellaneous/functions.html":{}}}],["grouped",{"_index":1653,"title":{},"body":{"controllers/FilesS3Controller.html":{}}}],["grow",{"_index":2736,"title":{},"body":{"index.html":{}}}],["guidelines",{"_index":2406,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["handle",{"_index":13,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"modules/FilesLocalModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/HomeController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResolvePromisesInterceptor.html":{},"index.html":{}}}],["handled",{"_index":2015,"title":{},"body":{"interfaces/IPaginationFieldConfig.html":{}}}],["handler",{"_index":2332,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["handles",{"_index":42,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/CurrenciesController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/QueryFailedFilter.html":{}}}],["handling",{"_index":147,"title":{},"body":{"controllers/AppController.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CurrenciesService.html":{},"classes/FileNotImageException.html":{},"classes/FileType.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"miscellaneous/functions.html":{}}}],["hard",{"_index":1234,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["has_next_page",{"_index":1808,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/SortByDto.html":{}}}],["hasnextpage",{"_index":914,"title":{},"body":{"injectables/CountriesService.html":{}}}],["header",{"_index":297,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{}}}],["headers",{"_index":2624,"title":{},"body":{"index.html":{}}}],["health",{"_index":144,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/PrismaService.html":{}}}],["healthcheck",{"_index":175,"title":{},"body":{"controllers/AppController.html":{}}}],["healthcheckservice",{"_index":176,"title":{},"body":{"controllers/AppController.html":{}}}],["healthindicatorresult",{"_index":2163,"title":{},"body":{"injectables/PrismaService.html":{}}}],["helllllllllllllllllllllllllllllllllllllllllllllllll",{"_index":778,"title":{},"body":{"injectables/CountriesService.html":{}}}],["helmet",{"_index":2534,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["helper",{"_index":1179,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["helpermodule",{"_index":206,"title":{"modules/HelperModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules.html":{},"overview.html":{}}}],["helps",{"_index":1961,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["here",{"_index":275,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"modules/FilesModule.html":{},"index.html":{}}}],["hereby",{"_index":2750,"title":{},"body":{"license.html":{}}}],["hi",{"_index":883,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/PaginationService.html":{}}}],["holders",{"_index":2791,"title":{},"body":{"license.html":{}}}],["home",{"_index":136,"title":{},"body":{"modules/ApiModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{}}}],["home.controller",{"_index":1910,"title":{},"body":{"modules/HomeModule.html":{}}}],["home.service",{"_index":1902,"title":{},"body":{"controllers/HomeController.html":{},"modules/HomeModule.html":{}}}],["home/home.module",{"_index":131,"title":{},"body":{"modules/ApiModule.html":{}}}],["homecontroller",{"_index":1897,"title":{"controllers/HomeController.html":{}},"body":{"controllers/HomeController.html":{},"modules/HomeModule.html":{},"coverage.html":{}}}],["homemodule",{"_index":103,"title":{"modules/HomeModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/HomeModule.html":{},"modules.html":{},"overview.html":{}}}],["homepage",{"_index":2806,"title":{},"body":{"properties.html":{}}}],["homeservice",{"_index":1899,"title":{"injectables/HomeService.html":{}},"body":{"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"coverage.html":{},"overview.html":{}}}],["host",{"_index":38,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["host.switchtohttp",{"_index":67,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["http",{"_index":113,"title":{},"body":{"modules/ApiModule.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/Query.html":{},"classes/QueryFailedFilter.html":{},"index.html":{}}}],["http://localhost",{"_index":1319,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["http_status_messages",{"_index":2467,"title":{},"body":{"coverage.html":{}}}],["httpcode",{"_index":622,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{}}}],["httpcode(httpstatus.ok",{"_index":635,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{}}}],["httperrorfilter",{"_index":125,"title":{"classes/HttpErrorFilter.html":{}},"body":{"modules/ApiModule.html":{},"classes/HttpErrorFilter.html":{},"coverage.html":{}}}],["httpexception",{"_index":54,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/CurrenciesService.html":{},"controllers/FilesLocalController.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["httpexceptionfilter",{"_index":1935,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["httpmodule",{"_index":1885,"title":{},"body":{"modules/HelperModule.html":{}}}],["https://example",{"_index":1491,"title":{},"body":{"classes/FileResponseDto-2.html":{}}}],["https://example.com/path/to/file.jpg",{"_index":1476,"title":{},"body":{"classes/FileResponseDto-1.html":{},"classes/FileType.html":{}}}],["https://example.com/path/to/file.jpg'})@transform",{"_index":1499,"title":{},"body":{"classes/FileType.html":{}}}],["https://github.com/dharmesh",{"_index":2656,"title":{},"body":{"index.html":{},"properties.html":{}}}],["https://s3.amazonaws.com/bucket/path/to/file?signature",{"_index":1711,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["httpstatus",{"_index":55,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/HttpErrorFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["httpstatus.bad_request",{"_index":1162,"title":{},"body":{"injectables/CurrenciesService.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["httpstatus.conflict",{"_index":1152,"title":{},"body":{"injectables/CurrenciesService.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["httpstatus.internal_server_error",{"_index":73,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/CurrenciesService.html":{},"classes/HttpErrorFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["httpstatus.not_found",{"_index":1169,"title":{},"body":{"injectables/CurrenciesService.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["httpstatus.ok",{"_index":1106,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["httpstatus.payload_too_large",{"_index":1753,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["httpstatus.unprocessable_entity",{"_index":1621,"title":{},"body":{"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{}}}],["iappconfig",{"_index":414,"title":{"interfaces/IAppConfig.html":{}},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IAppConfig.html":{},"coverage.html":{}}}],["iawsconfig",{"_index":416,"title":{"interfaces/IAwsConfig.html":{}},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IAwsConfig.html":{},"coverage.html":{}}}],["id",{"_index":941,"title":{},"body":{"classes/Country.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"injectables/FilesLocalService.html":{},"classes/Query-2.html":{}}}],["id_country",{"_index":910,"title":{},"body":{"injectables/CountriesService.html":{},"classes/Country.html":{}}}],["id_currency",{"_index":1068,"title":{},"body":{"controllers/CurrenciesController.html":{},"classes/Query-2.html":{}}}],["idarea",{"_index":1270,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["idea",{"_index":2630,"title":{},"body":{"index.html":{}}}],["identification",{"_index":932,"title":{},"body":{"classes/Country.html":{}}}],["identifier",{"_index":978,"title":{},"body":{"classes/Country.html":{},"classes/Currency.html":{},"classes/FileResponseDto-1.html":{},"classes/FileType.html":{},"coverage.html":{}}}],["ifieldconfig",{"_index":782,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/PaginationService.html":{}}}],["ifileconfig",{"_index":418,"title":{"interfaces/IFileConfig.html":{}},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IFileConfig.html":{},"coverage.html":{}}}],["ijwtconfig",{"_index":420,"title":{"interfaces/IJWTConfig.html":{}},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IJWTConfig.html":{},"coverage.html":{}}}],["image",{"_index":1443,"title":{},"body":{"classes/FileNotImageException.html":{}}}],["image.exception.ts",{"_index":1441,"title":{},"body":{"classes/FileNotImageException.html":{},"coverage.html":{}}}],["image.exception.ts:20",{"_index":1448,"title":{},"body":{"classes/FileNotImageException.html":{}}}],["image.jpg",{"_index":1538,"title":{},"body":{"classes/FileUploadDto.html":{},"injectables/FilesS3PresignedService.html":{}}}],["image.jpg'})@isstring",{"_index":1536,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["imagefilefilter",{"_index":1573,"title":{},"body":{"controllers/FilesLocalController.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"coverage.html":{}}}],["imperative",{"_index":2722,"title":{},"body":{"index.html":{}}}],["implemented",{"_index":1774,"title":{},"body":{"injectables/FilesService.html":{}}}],["implements",{"_index":15,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{}}}],["implied",{"_index":2781,"title":{},"body":{"license.html":{}}}],["import",{"_index":53,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IFileConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query-2.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UpdateDto.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{}}}],["imported",{"_index":1645,"title":{},"body":{"modules/FilesModule.html":{},"modules/HelperModule.html":{}}}],["importing",{"_index":115,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{}}}],["imports",{"_index":123,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{}}}],["in'})@isnotempty()@isstring",{"_index":1791,"title":{},"body":{"classes/FilterQueryDto.html":{}}}],["include",{"_index":1226,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/HttpErrorFilter.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{},"contributing.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["included",{"_index":1649,"title":{},"body":{"modules/FilesModule.html":{},"license.html":{}}}],["includes",{"_index":210,"title":{},"body":{"modules/AppModule.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/FileUploadDto.html":{},"controllers/FilesS3Controller.html":{},"injectables/FilesS3Service.html":{},"classes/Query-2.html":{},"index.html":{}}}],["including",{"_index":694,"title":{},"body":{"injectables/CountriesService.html":{},"classes/Country.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/UtilsService.html":{},"license.html":{}}}],["inclusion",{"_index":1474,"title":{},"body":{"classes/FileResponseDto-1.html":{}}}],["incoming",{"_index":1603,"title":{},"body":{"modules/FilesLocalModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{}}}],["ind",{"_index":982,"title":{},"body":{"classes/Country.html":{}}}],["index",{"_index":17,"title":{"index.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/FilterQueryDto.html":{},"controllers/HomeController.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UtilsService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["indexes",{"_index":1995,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["india",{"_index":985,"title":{},"body":{"classes/Country.html":{}}}],["indian",{"_index":962,"title":{},"body":{"classes/Country.html":{},"classes/CreateDto.html":{},"classes/Currency.html":{}}}],["indicate",{"_index":199,"title":{},"body":{"controllers/AppController.html":{}}}],["indicates",{"_index":1660,"title":{},"body":{"controllers/FilesS3Controller.html":{},"classes/PaginationResponseDto.html":{}}}],["indicating",{"_index":1072,"title":{},"body":{"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{}}}],["individual",{"_index":1361,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["inestapplication",{"_index":2579,"title":{},"body":{"miscellaneous/functions.html":{}}}],["infer",{"_index":1624,"title":{},"body":{"injectables/FilesLocalService.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/HomeService.html":{},"injectables/PrismaService.html":{}}}],["infinity",{"_index":1805,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/SortByDto.html":{},"miscellaneous/enumerations.html":{}}}],["infinitypagination",{"_index":644,"title":{},"body":{"controllers/CountriesController.html":{}}}],["infinitypaginationresponse",{"_index":641,"title":{},"body":{"controllers/CountriesController.html":{}}}],["infinitypaginationresponse(country",{"_index":650,"title":{},"body":{"controllers/CountriesController.html":{}}}],["infinitypaginationresponsedto",{"_index":642,"title":{},"body":{"controllers/CountriesController.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UpdateDto.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{}}}],["information",{"_index":609,"title":{},"body":{"controllers/CountriesController.html":{},"classes/Country.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"controllers/HomeController.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["infrastructure",{"_index":1634,"title":{},"body":{"modules/FilesModule.html":{}}}],["infrastructure/uploader/local/files.module",{"_index":1640,"title":{},"body":{"modules/FilesModule.html":{}}}],["infrastructure/uploader/s3",{"_index":1642,"title":{},"body":{"modules/FilesModule.html":{}}}],["infrastructure/uploader/s3/files.module",{"_index":1641,"title":{},"body":{"modules/FilesModule.html":{}}}],["infrastructureuploadermodule",{"_index":1644,"title":{},"body":{"modules/FilesModule.html":{},"coverage.html":{}}}],["inherits",{"_index":2352,"title":{},"body":{"classes/UpdateDto.html":{}}}],["initial",{"_index":2402,"title":{},"body":{"changelog.html":{}}}],["initialization",{"_index":2129,"title":{},"body":{"injectables/PrismaService.html":{}}}],["initialized",{"_index":2161,"title":{},"body":{"injectables/PrismaService.html":{}}}],["initializes",{"_index":2560,"title":{},"body":{"miscellaneous/functions.html":{}}}],["inject",{"_index":1685,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["injectable",{"_index":311,"title":{"injectables/CommaSeparated.html":{},"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"injectables/HomeService.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{}},"body":{"injectables/CommaSeparated.html":{},"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"injectables/HomeService.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"coverage.html":{}}}],["injectables",{"_index":313,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"injectables/HomeService.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"overview.html":{}}}],["injected",{"_index":1766,"title":{},"body":{"injectables/FilesS3Service.html":{}}}],["injection",{"_index":2199,"title":{},"body":{"classes/Query.html":{}}}],["inodeemailerconfig",{"_index":422,"title":{"interfaces/INodeEmailerConfig.html":{}},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/INodeEmailerConfig.html":{},"coverage.html":{}}}],["input",{"_index":364,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/CreateDto.html":{},"injectables/SortBy.html":{},"miscellaneous/functions.html":{}}}],["inr",{"_index":1015,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{}}}],["insert",{"_index":1216,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{}}}],["insert(values",{"_index":2277,"title":{},"body":{"classes/Query-2.html":{}}}],["inserted",{"_index":1153,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["inserted.insertid",{"_index":1155,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["insertid",{"_index":2259,"title":{},"body":{"classes/Query-2.html":{}}}],["inserting",{"_index":2218,"title":{},"body":{"classes/Query.html":{},"classes/Query-2.html":{}}}],["insertoptions",{"_index":2278,"title":{},"body":{"classes/Query-2.html":{}}}],["instagram",{"_index":2747,"title":{},"body":{"index.html":{}}}],["install",{"_index":2627,"title":{},"body":{"index.html":{}}}],["installation",{"_index":2654,"title":{},"body":{"index.html":{}}}],["installed",{"_index":2650,"title":{},"body":{"index.html":{}}}],["instance",{"_index":27,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CurrenciesService.html":{},"classes/FileNotImageException.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"injectables/PrismaService.html":{},"classes/QueryFailedFilter.html":{},"classes/UserNotFoundException.html":{},"miscellaneous/functions.html":{}}}],["instanceof",{"_index":71,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/PrismaService.html":{}}}],["instances",{"_index":1938,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["instantiated",{"_index":1648,"title":{},"body":{"modules/FilesModule.html":{}}}],["integer",{"_index":2577,"title":{},"body":{"miscellaneous/functions.html":{}}}],["integrates",{"_index":1637,"title":{},"body":{"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["integration",{"_index":1674,"title":{},"body":{"modules/FilesS3Module.html":{}}}],["interact",{"_index":1058,"title":{},"body":{"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{}}}],["interacting",{"_index":189,"title":{},"body":{"controllers/AppController.html":{},"modules/FilesS3PresignedModule.html":{},"index.html":{}}}],["interactions",{"_index":1730,"title":{},"body":{"modules/FilesS3PresignedModule.html":{}}}],["interacts",{"_index":1119,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["intercept",{"_index":2326,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["intercept(context",{"_index":2327,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["interceptor",{"_index":2316,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["intercepts",{"_index":2331,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["interface",{"_index":1221,"title":{"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"interfaces/QueryOptions.html":{}},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"interfaces/QueryOptions.html":{},"coverage.html":{}}}],["interfaces",{"_index":1943,"title":{},"body":{"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"interfaces/QueryOptions.html":{},"overview.html":{}}}],["internal",{"_index":83,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpErrorFilter.html":{}}}],["international",{"_index":969,"title":{},"body":{"classes/Country.html":{}}}],["introducing",{"_index":2592,"title":{},"body":{"index.html":{}}}],["introduction",{"_index":2591,"title":{},"body":{"index.html":{}}}],["invalid",{"_index":353,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["involving",{"_index":1701,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["ipagemetadtoparameters",{"_index":1958,"title":{"interfaces/IPageMetaDtoParameters.html":{}},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"coverage.html":{}}}],["ipaginationfieldconfig",{"_index":721,"title":{"interfaces/IPaginationFieldConfig.html":{}},"body":{"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/UtilsService.html":{},"coverage.html":{}}}],["ipaginationoptions",{"_index":875,"title":{},"body":{"injectables/CountriesService.html":{}}}],["ipostgresqlconfig",{"_index":425,"title":{"interfaces/IPostgreSQLConfig.html":{}},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IPostgreSQLConfig.html":{},"coverage.html":{}}}],["isarray",{"_index":1835,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["isboolean",{"_index":1376,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["isboolean()@isoptional",{"_index":1346,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["isdefined",{"_index":1041,"title":{},"body":{"classes/CreateDto.html":{}}}],["isdefined()@isnotempty()@isstring()@maxlength(10)@apiproperty({type",{"_index":1036,"title":{},"body":{"classes/CreateDto.html":{}}}],["isdefined()@isnotempty()@isstring()@maxlength(6)@apiproperty({type",{"_index":1033,"title":{},"body":{"classes/CreateDto.html":{}}}],["isdefined()@isnotempty()@isstring()@maxlength(80)@apiproperty({type",{"_index":1025,"title":{},"body":{"classes/CreateDto.html":{}}}],["isdefined()@type(undefined)@isnumber()@min(0)@apiproperty({type",{"_index":1021,"title":{},"body":{"classes/CreateDto.html":{}}}],["isendgridconfig",{"_index":427,"title":{"interfaces/ISendGridConfig.html":{}},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/ISendGridConfig.html":{},"coverage.html":{}}}],["isenum",{"_index":404,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["isenum(environment",{"_index":1305,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["isenum(environment)@isoptional",{"_index":1297,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["isenum(filedriver",{"_index":446,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["isenum(filedriver)@isoptional",{"_index":1418,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["isenum(paginationtype",{"_index":1811,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["isglobal",{"_index":231,"title":{},"body":{"modules/AppModule.html":{}}}],["ishealthy",{"_index":2137,"title":{},"body":{"injectables/PrismaService.html":{}}}],["isin",{"_index":1794,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["isin(abc(x",{"_index":1825,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["isint",{"_index":405,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{}}}],["isint()@isoptional",{"_index":1365,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["isint()@min(0)@max(65535",{"_index":1370,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["isint()@min(0)@max(65535)@isoptional",{"_index":1276,"title":{},"body":{"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{}}}],["ismsconfig",{"_index":429,"title":{"interfaces/ISMSConfig.html":{}},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/ISMSConfig.html":{},"coverage.html":{}}}],["isn't",{"_index":1988,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["isnan(numbervalue",{"_index":1842,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["isnotempty",{"_index":1042,"title":{},"body":{"classes/CreateDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["isnotempty()@isstring",{"_index":1789,"title":{},"body":{"classes/FilterQueryDto.html":{}}}],["isnumber",{"_index":1043,"title":{},"body":{"classes/CreateDto.html":{},"classes/FileUploadDto.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{}}}],["isnumber()@isoptional",{"_index":2288,"title":{},"body":{"classes/QueryCountryDto.html":{}}}],["isnumberstringornumber",{"_index":1797,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["isnumberstringornumber(validationoptions",{"_index":2569,"title":{},"body":{"miscellaneous/functions.html":{}}}],["iso",{"_index":933,"title":{},"body":{"classes/Country.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["iso3",{"_index":951,"title":{},"body":{"classes/Country.html":{}}}],["isoptional",{"_index":406,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{}}}],["isstring",{"_index":407,"title":{},"body":{"classes/ConfigService.html":{},"classes/CreateDto.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileUploadDto.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{}}}],["isstring()@isoptional",{"_index":1274,"title":{},"body":{"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["issue",{"_index":2396,"title":{},"body":{"changelog.html":{},"contributing.html":{}}}],["issuer",{"_index":542,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IJWTConfig.html":{}}}],["issues",{"_index":2728,"title":{},"body":{"index.html":{}}}],["ist",{"_index":955,"title":{},"body":{"classes/Country.html":{}}}],["isurl",{"_index":409,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{}}}],["isurl({require_tld",{"_index":1278,"title":{},"body":{"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{}}}],["isvalid",{"_index":350,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["isvalidfield",{"_index":1795,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["isvalidfield(entity",{"_index":2574,"title":{},"body":{"miscellaneous/functions.html":{}}}],["it's",{"_index":2596,"title":{},"body":{"index.html":{}}}],["item",{"_index":1980,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["items",{"_index":1849,"title":{},"body":{"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["iterate",{"_index":382,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/CountriesService.html":{},"injectables/SortBy.html":{}}}],["iuploadfileconfig",{"_index":431,"title":{"interfaces/IUploadFileConfig.html":{}},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IUploadFileConfig.html":{},"coverage.html":{}}}],["javascript",{"_index":2637,"title":{},"body":{"index.html":{}}}],["john",{"_index":1837,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["join",{"_index":742,"title":{},"body":{"injectables/CountriesService.html":{},"classes/DynamicQueryBuilder.html":{},"interfaces/IPaginationFieldConfig.html":{},"injectables/PaginationService.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{},"index.html":{}}}],["joinclause",{"_index":1258,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["joining",{"_index":713,"title":{},"body":{"injectables/CountriesService.html":{}}}],["joinquery",{"_index":2090,"title":{},"body":{"injectables/PaginationService.html":{}}}],["joins",{"_index":1230,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["joins.join",{"_index":1260,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["joins.length",{"_index":1259,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["jointable",{"_index":740,"title":{},"body":{"injectables/CountriesService.html":{},"interfaces/IPaginationFieldConfig.html":{}}}],["jointables",{"_index":773,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["jointables.join",{"_index":780,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["jointables.push",{"_index":820,"title":{},"body":{"injectables/CountriesService.html":{}}}],["jointables.push('join",{"_index":916,"title":{},"body":{"injectables/CountriesService.html":{}}}],["jointables.push(`join",{"_index":921,"title":{},"body":{"injectables/CountriesService.html":{}}}],["jointables.push(config.jointable(alias",{"_index":856,"title":{},"body":{"injectables/CountriesService.html":{},"classes/UtilsService.html":{}}}],["jointables.push(config.jointable(index",{"_index":855,"title":{},"body":{"injectables/CountriesService.html":{},"classes/UtilsService.html":{}}}],["json",{"_index":673,"title":{},"body":{"controllers/CountriesController.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/Query.html":{},"classes/SortByDto.html":{}}}],["json.parse(value",{"_index":1784,"title":{},"body":{"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{}}}],["json.stringify(_.clone(errorresponse",{"_index":2311,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["json.stringify(_.clone(r",{"_index":290,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["json.stringify(_.clone(request.body",{"_index":288,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["json.stringify(errorresponse",{"_index":1932,"title":{},"body":{"classes/HttpErrorFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["json.stringify(reqstrobj",{"_index":299,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{}}}],["json.stringify(requestdata",{"_index":2204,"title":{},"body":{"classes/Query.html":{}}}],["json.stringify(responsedata",{"_index":2205,"title":{},"body":{"classes/Query.html":{}}}],["json.stringify(resstrobj",{"_index":304,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{}}}],["jwt",{"_index":2604,"title":{},"body":{"index.html":{}}}],["jwtconfig",{"_index":537,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["jwtservice",{"_index":1891,"title":{},"body":{"modules/HelperModule.html":{}}}],["k8s",{"_index":2708,"title":{},"body":{"index.html":{}}}],["key",{"_index":394,"title":{},"body":{"classes/ConfigService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PrismaService.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{},"classes/SortByDto.html":{},"miscellaneous/functions.html":{}}}],["key?awsaccesskeyid=access_key&expires=expiration_time&signature=signature",{"_index":1493,"title":{},"body":{"classes/FileResponseDto-2.html":{}}}],["keyof",{"_index":1781,"title":{},"body":{"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{}}}],["keys",{"_index":1238,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{}}}],["keys.join",{"_index":1246,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{}}}],["kind",{"_index":2780,"title":{},"body":{"license.html":{}}}],["known",{"_index":2105,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["kubectl",{"_index":2711,"title":{},"body":{"index.html":{}}}],["large",{"_index":1754,"title":{},"body":{"injectables/FilesS3PresignedService.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["last",{"_index":1981,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["lastkey",{"_index":2262,"title":{},"body":{"classes/Query-2.html":{}}}],["latest",{"_index":2597,"title":{},"body":{"index.html":{}}}],["legend",{"_index":93,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/CountriesModule.html":{},"modules/CurrenciesModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{},"overview.html":{}}}],["liability",{"_index":2795,"title":{},"body":{"license.html":{}}}],["liable",{"_index":2792,"title":{},"body":{"license.html":{}}}],["library",{"_index":2231,"title":{},"body":{"classes/Query-2.html":{}}}],["license",{"_index":2742,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["licensed",{"_index":2735,"title":{},"body":{"index.html":{}}}],["limit",{"_index":655,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"dependencies.html":{}}}],["limitation",{"_index":2760,"title":{},"body":{"license.html":{}}}],["limited",{"_index":2782,"title":{},"body":{"license.html":{}}}],["limits",{"_index":1697,"title":{},"body":{"modules/FilesS3Module.html":{}}}],["line",{"_index":345,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{}}}],["linkedin",{"_index":2746,"title":{},"body":{"index.html":{}}}],["lint",{"_index":2643,"title":{},"body":{"index.html":{}}}],["linter",{"_index":2638,"title":{},"body":{"index.html":{}}}],["linting",{"_index":2439,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["list",{"_index":320,"title":{},"body":{"injectables/CommaSeparated.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"modules/FilesLocalModule.html":{},"interfaces/QueryOptions.html":{},"injectables/SortBy.html":{}}}],["literal",{"_index":2378,"title":{},"body":{"classes/UtilsService.html":{},"miscellaneous/typealiases.html":{}}}],["load",{"_index":233,"title":{},"body":{"modules/AppModule.html":{}}}],["local",{"_index":1421,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["located",{"_index":961,"title":{},"body":{"classes/Country.html":{}}}],["location",{"_index":1490,"title":{},"body":{"classes/FileResponseDto-2.html":{}}}],["lodash",{"_index":258,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/DynamicQueryBuilder.html":{},"classes/HttpErrorFilter.html":{},"injectables/PrismaService.html":{},"classes/Query-2.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{}}}],["logger",{"_index":1925,"title":{},"body":{"classes/HttpErrorFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["logger.error",{"_index":1931,"title":{},"body":{"classes/HttpErrorFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["logger.error(`${request.method",{"_index":1930,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["logging",{"_index":2195,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["logic",{"_index":274,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"injectables/CountriesService.html":{},"classes/CreateDto.html":{},"injectables/CurrenciesService.html":{},"modules/FilesLocalModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{}}}],["logs",{"_index":1920,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["long",{"_index":1020,"title":{},"body":{"classes/CreateDto.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["lowercasetransformer",{"_index":2512,"title":{},"body":{"coverage.html":{}}}],["lts.1",{"_index":2537,"title":{},"body":{"dependencies.html":{}}}],["m",{"_index":2432,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["mac",{"_index":2683,"title":{},"body":{"index.html":{}}}],["made",{"_index":1606,"title":{},"body":{"modules/FilesLocalModule.html":{}}}],["main",{"_index":849,"title":{},"body":{"injectables/CountriesService.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{}}}],["make",{"_index":1886,"title":{},"body":{"modules/HelperModule.html":{},"contributing.html":{}}}],["makes",{"_index":2353,"title":{},"body":{"classes/UpdateDto.html":{},"miscellaneous/typealiases.html":{}}}],["making",{"_index":1887,"title":{},"body":{"modules/HelperModule.html":{},"classes/UpdateDto.html":{}}}],["manage",{"_index":689,"title":{},"body":{"modules/CountriesModule.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesService.html":{},"injectables/PrismaService.html":{}}}],["management",{"_index":2230,"title":{},"body":{"classes/Query-2.html":{}}}],["manages",{"_index":1612,"title":{},"body":{"injectables/FilesLocalService.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{}}}],["managing",{"_index":133,"title":{},"body":{"modules/ApiModule.html":{},"injectables/CountriesService.html":{},"modules/CurrenciesModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{}}}],["manipulation",{"_index":2232,"title":{},"body":{"classes/Query-2.html":{}}}],["map",{"_index":848,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/ResolvePromisesInterceptor.html":{},"classes/UtilsService.html":{}}}],["map((filter",{"_index":818,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/PaginationService.html":{}}}],["map((s",{"_index":2093,"title":{},"body":{"injectables/PaginationService.html":{}}}],["map((sortitem",{"_index":863,"title":{},"body":{"injectables/CountriesService.html":{},"classes/UtilsService.html":{}}}],["map((val",{"_index":834,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/PaginationService.html":{}}}],["markdown",{"_index":2676,"title":{},"body":{"index.html":{}}}],["marked",{"_index":1880,"title":{},"body":{"modules/HelperModule.html":{}}}],["marks",{"_index":1473,"title":{},"body":{"classes/FileResponseDto-1.html":{},"injectables/FilesS3Service.html":{}}}],["match",{"_index":377,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["matches",{"_index":1793,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["matches(/^(asc|desc|asc|desc",{"_index":1832,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["matching",{"_index":88,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UpdateDto.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"changelog.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["math.ceil(totalitems",{"_index":1987,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["math.min(startindex",{"_index":1996,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["max",{"_index":410,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["max(500",{"_index":1818,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["max(65535",{"_index":439,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{}}}],["max_file_size",{"_index":1408,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["max_upload_file_size",{"_index":584,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IUploadFileConfig.html":{}}}],["maxconnections",{"_index":1390,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["maxfilesize",{"_index":600,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"interfaces/IFileConfig.html":{}}}],["maximum",{"_index":1367,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"injectables/FilesS3PresignedService.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["maxlength",{"_index":1016,"title":{},"body":{"classes/CreateDto.html":{}}}],["maxlength(10",{"_index":1051,"title":{},"body":{"classes/CreateDto.html":{}}}],["maxlength(3",{"_index":1048,"title":{},"body":{"classes/CreateDto.html":{}}}],["maxlength(6",{"_index":1050,"title":{},"body":{"classes/CreateDto.html":{}}}],["maxlength(80",{"_index":1049,"title":{},"body":{"classes/CreateDto.html":{}}}],["maxpages",{"_index":1960,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["maxpagesaftercurrentpage",{"_index":1994,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["maxpagesbeforecurrentpage",{"_index":1993,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["maybetype",{"_index":2815,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["meaning",{"_index":1881,"title":{},"body":{"modules/HelperModule.html":{}}}],["memberof",{"_index":1222,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FilterQueryDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/Query-1.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"classes/SortByDto.html":{}}}],["merchantability",{"_index":2784,"title":{},"body":{"license.html":{}}}],["merge",{"_index":2763,"title":{},"body":{"license.html":{}}}],["message",{"_index":81,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/CommaSeparated.html":{},"injectables/CurrenciesService.html":{},"classes/FileNotImageException.html":{},"injectables/FilesS3PresignedService.html":{},"classes/FilterQueryDto.html":{},"classes/HttpErrorFilter.html":{},"classes/PaginationQueryDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UserNotFoundException.html":{},"index.html":{}}}],["message');example",{"_index":2365,"title":{},"body":{"classes/UserNotFoundException.html":{}}}],["meta",{"_index":911,"title":{},"body":{"injectables/CountriesService.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{}}}],["metadata",{"_index":34,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"controllers/FilesS3Controller.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/QueryFailedFilter.html":{},"dependencies.html":{}}}],["metapage",{"_index":2080,"title":{},"body":{"injectables/PaginationService.html":{}}}],["method",{"_index":703,"title":{},"body":{"injectables/CountriesService.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"controllers/FilesS3Controller.html":{},"injectables/FilesS3Service.html":{},"classes/HttpErrorFilter.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{}}}],["methods",{"_index":21,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"controllers/HomeController.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/UtilsService.html":{}}}],["method},${url},${reqdata},${resdata",{"_index":2225,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["middle",{"_index":1992,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["middleware",{"_index":1675,"title":{},"body":{"modules/FilesS3Module.html":{},"miscellaneous/functions.html":{}}}],["migration",{"_index":2694,"title":{},"body":{"index.html":{}}}],["migrationdocker",{"_index":2696,"title":{},"body":{"index.html":{}}}],["mimetype",{"_index":1953,"title":{},"body":{"interfaces/IFileConfig.html":{}}}],["min",{"_index":411,"title":{},"body":{"classes/ConfigService.html":{},"classes/CreateDto.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["min(0",{"_index":438,"title":{},"body":{"classes/ConfigService.html":{},"classes/CreateDto.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{}}}],["min(1",{"_index":1813,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["min(10",{"_index":1817,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["minikube",{"_index":2710,"title":{},"body":{"index.html":{}}}],["minimum",{"_index":1812,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["minutes",{"_index":992,"title":{},"body":{"classes/Country.html":{}}}],["miscellaneous",{"_index":2544,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["mit",{"_index":2734,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["modify",{"_index":2762,"title":{},"body":{"license.html":{}}}],["module",{"_index":89,"title":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/CountriesModule.html":{},"modules/CurrenciesModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{}},"body":{"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/FileType.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesService.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/PaginationQueryDto.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/SortByDto.html":{},"classes/UpdateDto.html":{},"overview.html":{}}}],["module,method,url,req,response",{"_index":2223,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["modules",{"_index":91,"title":{"modules.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/CountriesModule.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"modules.html":{},"overview.html":{}}}],["modules/api.module",{"_index":226,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/countries/dto/country",{"_index":1801,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["module}','${method}','${url}','${reqescvalue}','${resescvalue",{"_index":2224,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["more",{"_index":766,"title":{},"body":{"injectables/CountriesService.html":{},"classes/PrismaClientExceptionFilter.html":{},"index.html":{}}}],["much",{"_index":2420,"title":{},"body":{"contributing.html":{}}}],["multer",{"_index":1568,"title":{},"body":{"controllers/FilesLocalController.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"dependencies.html":{}}}],["multermodule",{"_index":1676,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["multermodule.registerasync",{"_index":1684,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["multers3",{"_index":1682,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["multers3.auto_content_type",{"_index":1692,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["multifiledestdir",{"_index":2502,"title":{},"body":{"coverage.html":{}}}],["multiline",{"_index":465,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["multipart/form",{"_index":1583,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["multiple",{"_index":870,"title":{},"body":{"injectables/CountriesService.html":{},"classes/UtilsService.html":{}}}],["multiple_file_path",{"_index":588,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IUploadFileConfig.html":{}}}],["multiplestatements",{"_index":494,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["my_table",{"_index":2074,"title":{},"body":{"injectables/PaginationService.html":{}}}],["myset",{"_index":845,"title":{},"body":{"injectables/CountriesService.html":{},"classes/UtilsService.html":{}}}],["myset.add(alias",{"_index":854,"title":{},"body":{"injectables/CountriesService.html":{},"classes/UtilsService.html":{}}}],["myset.has(alias",{"_index":853,"title":{},"body":{"injectables/CountriesService.html":{},"classes/UtilsService.html":{}}}],["mysql",{"_index":482,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["n",{"_index":463,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["name",{"_index":30,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileNotImageException.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/FilterQueryDto.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["name_plural",{"_index":1011,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/Query-2.html":{}}}],["names",{"_index":2018,"title":{},"body":{"interfaces/IPaginationFieldConfig.html":{},"classes/Query-2.html":{}}}],["native",{"_index":1037,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{}}}],["navigate",{"_index":1963,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["near",{"_index":1990,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["necessary",{"_index":687,"title":{},"body":{"modules/CountriesModule.html":{},"modules/CurrenciesModule.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesS3PresignedModule.html":{},"controllers/HomeController.html":{}}}],["needed",{"_index":767,"title":{},"body":{"injectables/CountriesService.html":{}}}],["needing",{"_index":1884,"title":{},"body":{"modules/HelperModule.html":{}}}],["nest",{"_index":2733,"title":{},"body":{"index.html":{},"properties.html":{}}}],["nested",{"_index":2317,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["nestederrormessage",{"_index":310,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["nestinterceptor",{"_index":2335,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["nestjs",{"_index":186,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileNotImageException.html":{},"injectables/FilesService.html":{},"classes/FilterQueryDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/PaginationQueryDto.html":{},"injectables/ResolvePromisesInterceptor.html":{},"classes/SortByDto.html":{},"classes/UserNotFoundException.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["nestjs/axios",{"_index":1888,"title":{},"body":{"modules/HelperModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":56,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/FileNotImageException.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UserNotFoundException.html":{},"dependencies.html":{}}}],["nestjs/common/utils/random",{"_index":1680,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["nestjs/config",{"_index":216,"title":{},"body":{"modules/AppModule.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"injectables/FilesLocalService.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/HomeService.html":{},"injectables/PrismaService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":57,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":1892,"title":{},"body":{"modules/HelperModule.html":{}}}],["nestjs/mapped",{"_index":2358,"title":{},"body":{"classes/UpdateDto.html":{}}}],["nestjs/platform",{"_index":1563,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":174,"title":{},"body":{"controllers/AppController.html":{},"controllers/CountriesController.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"classes/Currency.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"controllers/HomeController.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":151,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/PrismaService.html":{},"dependencies.html":{}}}],["new",{"_index":77,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/FileNotImageException.html":{},"classes/FileType.html":{},"injectables/FilesLocalService.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"controllers/HomeController.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/Query.html":{},"classes/Query-2.html":{},"classes/QueryFailedFilter.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"contributing.html":{},"coverage.html":{},"index.html":{}}}],["newobj",{"_index":2173,"title":{},"body":{"injectables/PrismaService.html":{}}}],["newobj[key",{"_index":2178,"title":{},"body":{"injectables/PrismaService.html":{}}}],["next",{"_index":344,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{},"index.html":{}}}],["next.handle().pipe(map((data",{"_index":2340,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["ng",{"_index":1997,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["node.js",{"_index":2595,"title":{},"body":{"index.html":{}}}],["node_emailer_from_email",{"_index":568,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/INodeEmailerConfig.html":{}}}],["node_emailer_host",{"_index":560,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/INodeEmailerConfig.html":{}}}],["node_emailer_password",{"_index":566,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/INodeEmailerConfig.html":{}}}],["node_emailer_port",{"_index":562,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/INodeEmailerConfig.html":{}}}],["node_emailer_to_email",{"_index":570,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/INodeEmailerConfig.html":{}}}],["node_emailer_user",{"_index":564,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/INodeEmailerConfig.html":{}}}],["node_env",{"_index":1288,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["nodeemailerconfig",{"_index":559,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["nodeenv",{"_index":389,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{}}}],["non",{"_index":1442,"title":{},"body":{"classes/FileNotImageException.html":{}}}],["none",{"_index":1804,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"miscellaneous/enumerations.html":{}}}],["noninfringement",{"_index":2788,"title":{},"body":{"license.html":{}}}],["notes",{"_index":2726,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":2363,"title":{},"body":{"classes/UserNotFoundException.html":{}}}],["nothing",{"_index":1160,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["notice",{"_index":2775,"title":{},"body":{"license.html":{}}}],["npm",{"_index":2651,"title":{},"body":{"index.html":{}}}],["null",{"_index":879,"title":{},"body":{"injectables/CountriesService.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/HttpErrorFilter.html":{},"classes/PaginationQueryDto.html":{},"injectables/PrismaService.html":{},"classes/QueryCountryDto.html":{},"interfaces/QueryOptions.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{}}}],["number",{"_index":399,"title":{},"body":{"classes/ConfigService.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileUploadDto.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"interfaces/IAppConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"interfaces/QueryOptions.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{}}}],["number(strippedvalue",{"_index":1841,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["number(this.get(key",{"_index":474,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["number(total[0].count",{"_index":2087,"title":{},"body":{"injectables/PaginationService.html":{}}}],["number(value",{"_index":1782,"title":{},"body":{"classes/FilterCountryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortCountryDto.html":{}}}],["numbers",{"_index":321,"title":{},"body":{"injectables/CommaSeparated.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"injectables/SortBy.html":{}}}],["numbervalue",{"_index":1840,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["numeric",{"_index":2571,"title":{},"body":{"miscellaneous/functions.html":{}}}],["object",{"_index":305,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/FilterQueryDto.html":{},"controllers/HomeController.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/PaginationQueryDto.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{},"classes/SortByDto.html":{},"classes/UpdateDto.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{}}}],["object.assign",{"_index":2174,"title":{},"body":{"injectables/PrismaService.html":{}}}],["object.defineproperty(pagination",{"_index":2064,"title":{},"body":{"classes/PaginationResponseDto.html":{}}}],["object.entries(newobj",{"_index":2175,"title":{},"body":{"injectables/PrismaService.html":{}}}],["object.keys(conditions).map",{"_index":1265,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["object.keys(conditions).map((key",{"_index":1248,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["object.keys(optionalconditions).foreach((key",{"_index":1252,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["object.keys(payload).length",{"_index":1161,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["object.keys(process.env",{"_index":469,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["object.keys(values).length",{"_index":1266,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["object.keys(values).map((key",{"_index":1264,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["object.keys(where)[object.keys(where).length",{"_index":2263,"title":{},"body":{"classes/Query-2.html":{}}}],["object.values(conditions",{"_index":1269,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["object.values(values",{"_index":1268,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["objects",{"_index":50,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/CountriesController.html":{},"classes/FilterQueryDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/PaginationQueryDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"classes/SortByDto.html":{},"miscellaneous/typealiases.html":{}}}],["observable",{"_index":2333,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["obtaining",{"_index":2755,"title":{},"body":{"license.html":{}}}],["occurred",{"_index":2214,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["occurs",{"_index":1144,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["offset",{"_index":753,"title":{},"body":{"injectables/CountriesService.html":{},"classes/Country.html":{},"injectables/PaginationService.html":{}}}],["offset_in_minutes",{"_index":952,"title":{},"body":{"classes/Country.html":{}}}],["ok",{"_index":167,"title":{},"body":{"controllers/AppController.html":{}}}],["one",{"_index":1827,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/SortByDto.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["onmoduledestroy",{"_index":2138,"title":{},"body":{"injectables/PrismaService.html":{}}}],["onmoduleinit",{"_index":2139,"title":{},"body":{"injectables/PrismaService.html":{}}}],["open",{"_index":2418,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["operation",{"_index":1232,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/PrismaClientExceptionFilter.html":{},"interfaces/QueryOptions.html":{},"classes/UpdateDto.html":{}}}],["operations",{"_index":686,"title":{},"body":{"modules/CountriesModule.html":{},"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/FileResponseDto-2.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"injectables/PrismaService.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{}}}],["operator",{"_index":830,"title":{},"body":{"injectables/CountriesService.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{}}}],["opinionated",{"_index":2640,"title":{},"body":{"index.html":{}}}],["optional",{"_index":32,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/FileNotImageException.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/UpdateDto.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["optionalconditions",{"_index":1229,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{}}}],["optionalconditions[key",{"_index":1253,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["options",{"_index":723,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"interfaces/QueryOptions.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{}}}],["options.ts",{"_index":2013,"title":{},"body":{"interfaces/IPaginationFieldConfig.html":{},"coverage.html":{}}}],["orchestration",{"_index":2618,"title":{},"body":{"index.html":{}}}],["order",{"_index":840,"title":{},"body":{"injectables/CountriesService.html":{},"classes/FilterCountryDto.html":{},"injectables/PaginationService.html":{},"classes/QueryCountryDto.html":{},"classes/SortCountryDto.html":{},"classes/UtilsService.html":{}}}],["orderby",{"_index":1780,"title":{},"body":{"classes/FilterCountryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortCountryDto.html":{}}}],["origin",{"_index":2434,"title":{},"body":{"contributing.html":{}}}],["original",{"_index":2567,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["originalname",{"_index":1954,"title":{},"body":{"interfaces/IFileConfig.html":{}}}],["orm",{"_index":190,"title":{},"body":{"controllers/AppController.html":{},"injectables/PrismaService.html":{},"index.html":{}}}],["otherwise",{"_index":338,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{},"license.html":{}}}],["out",{"_index":106,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/CountriesModule.html":{},"modules/CurrenciesModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["outputs",{"_index":2207,"title":{},"body":{"classes/Query.html":{}}}],["over",{"_index":920,"title":{},"body":{"injectables/CountriesService.html":{}}}],["overrides",{"_index":1360,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["overview",{"_index":2803,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":2682,"title":{},"body":{"index.html":{}}}],["p2000",{"_index":2118,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["p2002",{"_index":2115,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["p2010",{"_index":2125,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["p2025",{"_index":2122,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["package",{"_index":2517,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":652,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{}}}],["pager",{"_index":1999,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["pages",{"_index":1975,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{}}}],["pagesize",{"_index":1966,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{}}}],["paginate",{"_index":1806,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/SortByDto.html":{},"miscellaneous/enumerations.html":{}}}],["paginate(only",{"_index":1809,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["paginate(selectquery",{"_index":2077,"title":{},"body":{"injectables/PaginationService.html":{}}}],["paginated",{"_index":618,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{}}}],["paginatedresultdto",{"_index":668,"title":{},"body":{"controllers/CountriesController.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["pagination",{"_index":621,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/Query-2.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["pagination${classreference.name}responsedto",{"_index":2066,"title":{},"body":{"classes/PaginationResponseDto.html":{}}}],["paginationmetadto",{"_index":783,"title":{"classes/PaginationMetaDto.html":{}},"body":{"injectables/CountriesService.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"coverage.html":{}}}],["paginationoptions",{"_index":664,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{}}}],["paginationquery",{"_index":678,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["paginationquery.filters",{"_index":814,"title":{},"body":{"injectables/CountriesService.html":{},"classes/UtilsService.html":{}}}],["paginationquery.filters.foreach((filter",{"_index":906,"title":{},"body":{"injectables/CountriesService.html":{}}}],["paginationquery.filters.length",{"_index":816,"title":{},"body":{"injectables/CountriesService.html":{}}}],["paginationquery.filters?.foreach((filter",{"_index":896,"title":{},"body":{"injectables/CountriesService.html":{}}}],["paginationquery.filters?.some((filter",{"_index":915,"title":{},"body":{"injectables/CountriesService.html":{}}}],["paginationquery.sort",{"_index":811,"title":{},"body":{"injectables/CountriesService.html":{},"classes/UtilsService.html":{}}}],["paginationquerydto",{"_index":612,"title":{"classes/PaginationQueryDto.html":{}},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{},"coverage.html":{}}}],["paginationquerydto.limit",{"_index":1984,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["paginationquerydto.page",{"_index":1985,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["paginationresponse",{"_index":624,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["paginationresponse(classreference",{"_index":2060,"title":{},"body":{"classes/PaginationResponseDto.html":{},"miscellaneous/functions.html":{}}}],["paginationresponse(country",{"_index":636,"title":{},"body":{"controllers/CountriesController.html":{}}}],["paginationresponse(currency",{"_index":1103,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["paginationresponsedto",{"_index":620,"title":{"classes/PaginationResponseDto.html":{}},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"coverage.html":{}}}],["paginationservice",{"_index":698,"title":{"injectables/PaginationService.html":{}},"body":{"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"modules/HelperModule.html":{},"injectables/PaginationService.html":{},"coverage.html":{},"overview.html":{}}}],["paginationservice.paginate",{"_index":2073,"title":{},"body":{"injectables/PaginationService.html":{}}}],["paginationtype",{"_index":1803,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"miscellaneous/enumerations.html":{}}}],["paginationtype.all",{"_index":1810,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["pair",{"_index":367,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["pairs",{"_index":371,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["pallette",{"_index":2680,"title":{},"body":{"index.html":{}}}],["param",{"_index":60,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/FileNotImageException.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"controllers/HomeController.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{}}}],["param('id_currency",{"_index":1099,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["parameter",{"_index":2132,"title":{},"body":{"injectables/PrismaService.html":{}}}],["parameterized",{"_index":860,"title":{},"body":{"injectables/CountriesService.html":{},"classes/UtilsService.html":{}}}],["parameters",{"_index":28,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/FileNotImageException.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/FilterQueryDto.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":1983,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"injectables/PrismaService.html":{}}}],["parseint(process.env.app_port",{"_index":1321,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["parseint(process.env.max_file_size",{"_index":1438,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["parseint(process.env.port",{"_index":1323,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["parseint(process.env.postgres_max_connections",{"_index":1392,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["parseint(process.env.postgres_pool_timeout",{"_index":1396,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["parseint(process.env.postgres_port",{"_index":1384,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["partial",{"_index":2355,"title":{},"body":{"classes/UpdateDto.html":{},"miscellaneous/typealiases.html":{}}}],["partial.type",{"_index":1140,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["partial.type.ts",{"_index":2814,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["partialtype",{"_index":2357,"title":{},"body":{"classes/UpdateDto.html":{}}}],["partialtype(createdto",{"_index":2356,"title":{},"body":{"classes/UpdateDto.html":{}}}],["particular",{"_index":2786,"title":{},"body":{"license.html":{}}}],["particularly",{"_index":1921,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["parts",{"_index":368,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["parts.length",{"_index":373,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["pass",{"_index":2062,"title":{},"body":{"classes/PaginationResponseDto.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["password",{"_index":488,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{}}}],["patch",{"_index":1083,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["patch(`v1/${modules}/:id_currency",{"_index":1098,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["patch(undefined)@httpcode(httpstatus.ok)@apiparam({name",{"_index":1079,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["patel",{"_index":2745,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["patel/nestjs",{"_index":2657,"title":{},"body":{"index.html":{},"properties.html":{}}}],["path",{"_index":79,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["path/to/exception",{"_index":1453,"title":{},"body":{"classes/FileNotImageException.html":{}}}],["path/to/exception';throw",{"_index":1444,"title":{},"body":{"classes/FileNotImageException.html":{}}}],["path/to/filter",{"_index":1927,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["path/to/filter';@module",{"_index":1922,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["paths",{"_index":1495,"title":{},"body":{"classes/FileType.html":{}}}],["payload",{"_index":1135,"title":{},"body":{"injectables/CurrenciesService.html":{},"injectables/FilesS3PresignedService.html":{}}}],["payload.code",{"_index":1163,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["payload.id",{"_index":1165,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["payloadtoolargeexception",{"_index":1744,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["per",{"_index":1815,"title":{},"body":{"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["perform",{"_index":1225,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"controllers/HomeController.html":{},"injectables/PaginationService.html":{},"interfaces/QueryOptions.html":{}}}],["performing",{"_index":188,"title":{},"body":{"controllers/AppController.html":{}}}],["performs",{"_index":162,"title":{},"body":{"controllers/AppController.html":{},"injectables/CurrenciesService.html":{}}}],["permission",{"_index":2749,"title":{},"body":{"license.html":{}}}],["permit",{"_index":2770,"title":{},"body":{"license.html":{}}}],["person",{"_index":2754,"title":{},"body":{"license.html":{}}}],["persons",{"_index":2771,"title":{},"body":{"license.html":{}}}],["petersen",{"_index":2670,"title":{},"body":{"index.html":{}}}],["pg",{"_index":2539,"title":{},"body":{"dependencies.html":{}}}],["pgbasequery",{"_index":2236,"title":{},"body":{"classes/Query-2.html":{}}}],["pgbaseselectfield",{"_index":2237,"title":{},"body":{"classes/Query-2.html":{}}}],["pgsqlservice",{"_index":259,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["plain",{"_index":1191,"title":{},"body":{"classes/Currency.html":{},"miscellaneous/functions.html":{}}}],["plaintoinstance",{"_index":1778,"title":{},"body":{"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{}}}],["plaintoinstance(filtercountrydto",{"_index":1783,"title":{},"body":{"classes/FilterCountryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortCountryDto.html":{}}}],["plaintoinstance(filterquerydto",{"_index":1820,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["plaintoinstance(sortbydto",{"_index":1823,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["plaintoinstance(sortcountrydto",{"_index":1785,"title":{},"body":{"classes/FilterCountryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortCountryDto.html":{}}}],["plaintoinstance(sortuserdto",{"_index":1844,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["please",{"_index":2411,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["pluggable",{"_index":2636,"title":{},"body":{"index.html":{}}}],["plural",{"_index":1028,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{}}}],["plus",{"_index":2619,"title":{},"body":{"index.html":{}}}],["pooltimeout",{"_index":1394,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["pop",{"_index":1695,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["port",{"_index":484,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"interfaces/IAppConfig.html":{}}}],["portions",{"_index":2778,"title":{},"body":{"license.html":{}}}],["possible",{"_index":2421,"title":{},"body":{"contributing.html":{}}}],["post",{"_index":1084,"title":{},"body":{"controllers/CurrenciesController.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{}}}],["post('v1/upload",{"_index":1584,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3PresignedController.html":{}}}],["post('v1/upload/s3",{"_index":1659,"title":{},"body":{"controllers/FilesS3Controller.html":{}}}],["post(`v1/${modules",{"_index":1093,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["post(undefined)@httpcode(httpstatus.ok)@apicreatedresponse({type",{"_index":1063,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["postgres",{"_index":2706,"title":{},"body":{"index.html":{}}}],["postgres_connection_limit",{"_index":2020,"title":{},"body":{"interfaces/IPostgreSQLConfig.html":{}}}],["postgres_host",{"_index":1334,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"interfaces/IPostgreSQLConfig.html":{}}}],["postgres_max_connections",{"_index":1335,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["postgres_name",{"_index":1336,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"interfaces/IPostgreSQLConfig.html":{}}}],["postgres_password",{"_index":1337,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"interfaces/IPostgreSQLConfig.html":{}}}],["postgres_pool_timeout",{"_index":2021,"title":{},"body":{"interfaces/IPostgreSQLConfig.html":{}}}],["postgres_port",{"_index":1338,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"interfaces/IPostgreSQLConfig.html":{}}}],["postgres_schema",{"_index":2022,"title":{},"body":{"interfaces/IPostgreSQLConfig.html":{}}}],["postgres_user",{"_index":1339,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"interfaces/IPostgreSQLConfig.html":{}}}],["postgresql",{"_index":1362,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"index.html":{}}}],["postgresql://${process.env.postgres_user}:${process.env.postgres_password}@${process.env.postgres_host}:${process.env.postgres_port}/${process.env.postgres_name}?connection_limit=${process.env.postgres_max_connections}&pool_timeout=${process.env.postgres_pool_timeout}&schema=${process.env.postgres_schema",{"_index":1381,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["postgresql://${this.get('postgres_user')}:${this.get('postgres_password')}@${this.get('postgres_host')}:${this.get('postgres_port')}/${this.get('postgres_name')}?connection_limit=${this.get('postgres_connection_limit')}&pool_timeout=${this.get('postgres_pool_timeout')}&schema=${this.get('postgres_schema",{"_index":510,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["powerful",{"_index":2598,"title":{},"body":{"index.html":{}}}],["pre",{"_index":2621,"title":{},"body":{"index.html":{}}}],["precision",{"_index":1032,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{}}}],["prefix",{"_index":1914,"title":{},"body":{"injectables/HomeService.html":{},"interfaces/IAppConfig.html":{}}}],["prerequisites",{"_index":2648,"title":{},"body":{"index.html":{}}}],["presence",{"_index":1764,"title":{},"body":{"injectables/FilesS3Service.html":{}}}],["present",{"_index":2827,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["preserves",{"_index":2566,"title":{},"body":{"miscellaneous/functions.html":{}}}],["presigned",{"_index":1412,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"modules/FilesModule.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"miscellaneous/enumerations.html":{}}}],["presigned/dto/file",{"_index":1479,"title":{},"body":{"classes/FileResponseDto-2.html":{},"coverage.html":{}}}],["presigned/dto/file.dto.ts",{"_index":1529,"title":{},"body":{"classes/FileUploadDto.html":{},"coverage.html":{}}}],["presigned/dto/file.dto.ts:23",{"_index":1537,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["presigned/dto/file.dto.ts:35",{"_index":1540,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["presigned/files.controller.ts",{"_index":1700,"title":{},"body":{"controllers/FilesS3PresignedController.html":{},"coverage.html":{}}}],["presigned/files.controller.ts:49",{"_index":1715,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["presigned/files.controller.ts:69",{"_index":1708,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["presigned/files.module",{"_index":1643,"title":{},"body":{"modules/FilesModule.html":{}}}],["presigned/files.module.ts",{"_index":1729,"title":{},"body":{"modules/FilesS3PresignedModule.html":{}}}],["presigned/files.service.ts",{"_index":1735,"title":{},"body":{"injectables/FilesS3PresignedService.html":{},"coverage.html":{}}}],["presigned/files.service.ts:128",{"_index":1742,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["presigned/files.service.ts:26",{"_index":1737,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["presigned/files.service.ts:59",{"_index":1738,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["presigner",{"_index":1513,"title":{},"body":{"classes/FileType.html":{},"injectables/FilesS3PresignedService.html":{},"dependencies.html":{}}}],["prettier",{"_index":2639,"title":{},"body":{"index.html":{}}}],["prevent",{"_index":1147,"title":{},"body":{"injectables/CurrenciesService.html":{},"classes/Query.html":{}}}],["primitive",{"_index":2565,"title":{},"body":{"miscellaneous/functions.html":{}}}],["prisma",{"_index":168,"title":{},"body":{"controllers/AppController.html":{},"injectables/CurrenciesService.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/QueryFailedFilter.html":{},"coverage.html":{},"index.html":{}}}],["prisma's",{"_index":2069,"title":{},"body":{"injectables/PaginationService.html":{}}}],["prisma.io",{"_index":2672,"title":{},"body":{"index.html":{}}}],["prisma.prisma",{"_index":2671,"title":{},"body":{"index.html":{}}}],["prisma.prismaclientknownrequesterror",{"_index":2107,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["prisma.transactionclient",{"_index":2148,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prisma/client",{"_index":2110,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/QueryFailedFilter.html":{},"dependencies.html":{}}}],["prisma/data/countries",{"_index":2447,"title":{},"body":{"coverage.html":{}}}],["prisma/migration",{"_index":2695,"title":{},"body":{"index.html":{}}}],["prisma/seed.ts",{"_index":2454,"title":{},"body":{"coverage.html":{}}}],["prismaclient",{"_index":2128,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismaclientexceptionfilter",{"_index":2103,"title":{"classes/PrismaClientExceptionFilter.html":{}},"body":{"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"coverage.html":{}}}],["prismaclientknownrequesterror",{"_index":2106,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["prismaconfig",{"_index":390,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["prismaservice",{"_index":153,"title":{"injectables/PrismaService.html":{}},"body":{"controllers/AppController.html":{},"injectables/CurrenciesService.html":{},"modules/HelperModule.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":191,"title":{},"body":{"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"injectables/FilesS3PresignedService.html":{},"classes/Query-2.html":{}}}],["process",{"_index":1762,"title":{},"body":{"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["process.cwd",{"_index":502,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{}}}],["process.env",{"_index":1432,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["process.env.api_prefix",{"_index":1325,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["process.env.app_description",{"_index":1312,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["process.env.app_name",{"_index":1310,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["process.env.app_port",{"_index":1320,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["process.env.app_prefix",{"_index":1315,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["process.env.app_version",{"_index":1313,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["process.env.aws_access_key_id",{"_index":1433,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["process.env.aws_default_s3_bucket",{"_index":1435,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["process.env.aws_s3_region",{"_index":1436,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["process.env.aws_secret_access_key",{"_index":1434,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["process.env.backend_domain",{"_index":1318,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["process.env.database_ca",{"_index":1402,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.database_cert",{"_index":1405,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.database_key",{"_index":1403,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.database_reject_unauthorized",{"_index":1401,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.database_ssl_enabled",{"_index":1399,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.database_synchronize",{"_index":1389,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.file_driver",{"_index":1430,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["process.env.frontend_domain",{"_index":1317,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["process.env.max_file_size",{"_index":1437,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["process.env.node_env",{"_index":229,"title":{},"body":{"modules/AppModule.html":{},"classes/EnvironmentVariablesValidator.html":{}}}],["process.env.port",{"_index":1322,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["process.env.postgres_host",{"_index":1382,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.postgres_max_connections",{"_index":1391,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.postgres_name",{"_index":1387,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.postgres_password",{"_index":1386,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.postgres_pool_timeout",{"_index":1395,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.postgres_port",{"_index":1383,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.postgres_schema",{"_index":1397,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.postgres_user",{"_index":1388,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.pwd",{"_index":501,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{}}}],["process.env[envname",{"_index":470,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["process.env[envname].replace(/\\\\n/g",{"_index":471,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["process.env[key",{"_index":472,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["processed",{"_index":1459,"title":{},"body":{"classes/FileResponseDto.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{}}}],["processing",{"_index":1677,"title":{},"body":{"modules/FilesS3Module.html":{},"index.html":{}}}],["production",{"_index":457,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["productionbuild",{"_index":2688,"title":{},"body":{"index.html":{}}}],["profile_pic_file_path",{"_index":586,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IUploadFileConfig.html":{}}}],["profiledestdir",{"_index":2503,"title":{},"body":{"coverage.html":{}}}],["project",{"_index":2407,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["promise",{"_index":170,"title":{},"body":{"controllers/AppController.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"miscellaneous/functions.html":{}}}],["promise.all",{"_index":2085,"title":{},"body":{"injectables/PaginationService.html":{}}}],["promise.resolve",{"_index":2190,"title":{},"body":{"injectables/PrismaService.html":{}}}],["promises",{"_index":2318,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{},"miscellaneous/functions.html":{}}}],["properties",{"_index":18,"title":{"properties.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"injectables/FilesS3PresignedService.html":{},"classes/FilterQueryDto.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"classes/Query-2.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UpdateDto.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["property",{"_index":945,"title":{},"body":{"classes/Country.html":{},"classes/Currency.html":{},"classes/FileResponseDto-1.html":{},"interfaces/IAppConfig.html":{},"miscellaneous/functions.html":{}}}],["propertyvalue",{"_index":335,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["provide",{"_index":137,"title":{},"body":{"modules/ApiModule.html":{},"classes/Country.html":{},"modules/FilesLocalModule.html":{},"classes/HttpErrorFilter.html":{}}}],["provided",{"_index":705,"title":{},"body":{"injectables/CountriesService.html":{},"classes/CreateDto.html":{},"injectables/CurrenciesService.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"interfaces/IPaginationFieldConfig.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/Query-2.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["provider",{"_index":1765,"title":{},"body":{"injectables/FilesS3Service.html":{}}}],["providers",{"_index":96,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/CountriesModule.html":{},"modules/CurrenciesModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{},"classes/HttpErrorFilter.html":{},"coverage.html":{},"overview.html":{}}}],["providers/dynamic",{"_index":2272,"title":{},"body":{"classes/Query-2.html":{}}}],["providers/file",{"_index":1574,"title":{},"body":{"controllers/FilesLocalController.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["provides",{"_index":143,"title":{},"body":{"controllers/AppController.html":{},"modules/CountriesModule.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"modules/HelperModule.html":{},"injectables/HomeService.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/PaginationMetaDto.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query-2.html":{},"classes/UtilsService.html":{}}}],["providing",{"_index":693,"title":{},"body":{"injectables/CountriesService.html":{}}}],["ptbl",{"_index":736,"title":{},"body":{"injectables/CountriesService.html":{},"classes/Query-2.html":{},"classes/UtilsService.html":{}}}],["ptbl.capital",{"_index":734,"title":{},"body":{"injectables/CountriesService.html":{}}}],["ptbl.code",{"_index":2268,"title":{},"body":{"classes/Query-2.html":{}}}],["ptbl.continent",{"_index":733,"title":{},"body":{"injectables/CountriesService.html":{}}}],["ptbl.decimal_digits",{"_index":2270,"title":{},"body":{"classes/Query-2.html":{}}}],["ptbl.dial_code",{"_index":732,"title":{},"body":{"injectables/CountriesService.html":{}}}],["ptbl.id_country",{"_index":726,"title":{},"body":{"injectables/CountriesService.html":{}}}],["ptbl.id_currency",{"_index":1173,"title":{},"body":{"injectables/CurrenciesService.html":{},"classes/Query-2.html":{}}}],["ptbl.iso",{"_index":728,"title":{},"body":{"injectables/CountriesService.html":{}}}],["ptbl.iso3",{"_index":730,"title":{},"body":{"injectables/CountriesService.html":{}}}],["ptbl.name",{"_index":727,"title":{},"body":{"injectables/CountriesService.html":{},"classes/Query-2.html":{}}}],["ptbl.nice_name",{"_index":729,"title":{},"body":{"injectables/CountriesService.html":{}}}],["ptbl.num_code",{"_index":731,"title":{},"body":{"injectables/CountriesService.html":{}}}],["ptbl.rounding",{"_index":2271,"title":{},"body":{"classes/Query-2.html":{}}}],["ptbl.symbol",{"_index":2269,"title":{},"body":{"classes/Query-2.html":{}}}],["ptlb",{"_index":794,"title":{},"body":{"injectables/CountriesService.html":{}}}],["ptlb.capital",{"_index":793,"title":{},"body":{"injectables/CountriesService.html":{}}}],["ptlb.continent",{"_index":792,"title":{},"body":{"injectables/CountriesService.html":{}}}],["ptlb.dial_code",{"_index":791,"title":{},"body":{"injectables/CountriesService.html":{}}}],["ptlb.id_country",{"_index":785,"title":{},"body":{"injectables/CountriesService.html":{}}}],["ptlb.id_currency",{"_index":745,"title":{},"body":{"injectables/CountriesService.html":{}}}],["ptlb.id_timezone",{"_index":756,"title":{},"body":{"injectables/CountriesService.html":{}}}],["ptlb.iso",{"_index":787,"title":{},"body":{"injectables/CountriesService.html":{}}}],["ptlb.iso3",{"_index":789,"title":{},"body":{"injectables/CountriesService.html":{}}}],["ptlb.name",{"_index":786,"title":{},"body":{"injectables/CountriesService.html":{}}}],["ptlb.nice_name",{"_index":788,"title":{},"body":{"injectables/CountriesService.html":{}}}],["ptlb.num_code",{"_index":790,"title":{},"body":{"injectables/CountriesService.html":{}}}],["public",{"_index":19,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"modules/FilesS3PresignedModule.html":{},"classes/QueryFailedFilter.html":{},"classes/UtilsService.html":{}}}],["public_route_key",{"_index":2469,"title":{},"body":{"coverage.html":{}}}],["publicroute",{"_index":178,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["publish",{"_index":2764,"title":{},"body":{"license.html":{}}}],["pull",{"_index":2435,"title":{},"body":{"contributing.html":{}}}],["purpose",{"_index":2787,"title":{},"body":{"license.html":{}}}],["purposes",{"_index":949,"title":{},"body":{"classes/Country.html":{},"controllers/FilesS3Controller.html":{}}}],["push",{"_index":2433,"title":{},"body":{"contributing.html":{}}}],["put",{"_index":273,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["putobjectcommand",{"_index":1745,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["qr_image",{"_index":531,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["qr_image_path",{"_index":533,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["qr_image_path_salt",{"_index":535,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["qrconfig",{"_index":530,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["queries",{"_index":696,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"interfaces/IPaginationFieldConfig.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{}}}],["query",{"_index":261,"title":{"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{}},"body":{"classes/BadRequestExceptionFilter.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"controllers/FilesS3PresignedController.html":{},"classes/FilterQueryDto.html":{},"classes/HttpErrorFilter.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{},"coverage.html":{}}}],["query('expiresin",{"_index":1724,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["query.addhttpqueryerror",{"_index":2201,"title":{},"body":{"classes/Query.html":{}}}],["query.addhttpqueryerror(\"httperror",{"_index":1934,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["query.addqueryerror(\"badrequest",{"_index":292,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["query.service",{"_index":1202,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{},"coverage.html":{}}}],["query?.filters",{"_index":661,"title":{},"body":{"controllers/CountriesController.html":{}}}],["query?.limit",{"_index":656,"title":{},"body":{"controllers/CountriesController.html":{}}}],["query?.page",{"_index":653,"title":{},"body":{"controllers/CountriesController.html":{}}}],["query?.sort",{"_index":663,"title":{},"body":{"controllers/CountriesController.html":{}}}],["querybuilder",{"_index":2273,"title":{},"body":{"classes/Query-2.html":{}}}],["querycountrydto",{"_index":647,"title":{"classes/QueryCountryDto.html":{}},"body":{"controllers/CountriesController.html":{},"classes/FilterCountryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortCountryDto.html":{},"coverage.html":{}}}],["queryfailederror",{"_index":2300,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["queryfailedfilter",{"_index":2292,"title":{"classes/QueryFailedFilter.html":{}},"body":{"classes/QueryFailedFilter.html":{},"coverage.html":{}}}],["queryname",{"_index":1223,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["queryobj",{"_index":2144,"title":{},"body":{"injectables/PrismaService.html":{}}}],["queryobj.syntax",{"_index":2180,"title":{},"body":{"injectables/PrismaService.html":{}}}],["queryobj.type",{"_index":2182,"title":{},"body":{"injectables/PrismaService.html":{}}}],["queryoptions",{"_index":1210,"title":{"interfaces/QueryOptions.html":{}},"body":{"classes/DynamicQueryBuilder.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{},"coverage.html":{}}}],["querystatements",{"_index":2371,"title":{},"body":{"classes/UtilsService.html":{}}}],["querystatements(basefields",{"_index":2379,"title":{},"body":{"classes/UtilsService.html":{}}}],["querytype",{"_index":1224,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["quotes",{"_index":2198,"title":{},"body":{"classes/Query.html":{}}}],["r",{"_index":266,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"properties.html":{}}}],["r.error",{"_index":271,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["r.message",{"_index":270,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["r.message[0",{"_index":269,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["r.statuscode",{"_index":281,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["randomstringgenerator",{"_index":1679,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["randomstringgenerator()}.${file.filename.split('.').pop()?.tolowercase",{"_index":1755,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["randomstringgenerator()}.${file.originalname",{"_index":1694,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["range",{"_index":1989,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["rate",{"_index":2533,"title":{},"body":{"dependencies.html":{}}}],["raw",{"_index":1121,"title":{},"body":{"injectables/CurrenciesService.html":{},"injectables/PrismaService.html":{}}}],["rbac",{"_index":2633,"title":{},"body":{"index.html":{}}}],["read",{"_index":1734,"title":{},"body":{"modules/FilesS3PresignedModule.html":{},"index.html":{}}}],["readonly",{"_index":192,"title":{},"body":{"controllers/AppController.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/SortByDto.html":{}}}],["ready",{"_index":2629,"title":{},"body":{"index.html":{}}}],["receive",{"_index":2063,"title":{},"body":{"classes/PaginationResponseDto.html":{}}}],["recomandation",{"_index":2652,"title":{},"body":{"index.html":{}}}],["record",{"_index":738,"title":{},"body":{"injectables/CountriesService.html":{},"classes/CreateDto.html":{},"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"interfaces/QueryOptions.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{}}}],["records",{"_index":1814,"title":{},"body":{"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/Query-2.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{}}}],["recursively",{"_index":2324,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["redis",{"_index":2705,"title":{},"body":{"index.html":{}}}],["redisswagger",{"_index":2707,"title":{},"body":{"index.html":{}}}],["ref",{"_index":1869,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["refactor",{"_index":2719,"title":{},"body":{"index.html":{}}}],["reference",{"_index":2059,"title":{},"body":{"classes/PaginationResponseDto.html":{},"miscellaneous/functions.html":{}}}],["reflect",{"_index":2541,"title":{},"body":{"dependencies.html":{}}}],["reflection",{"_index":35,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["reflector",{"_index":20,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["region",{"_index":1416,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["registeras",{"_index":1299,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["registeras('app",{"_index":1309,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["registeras('database",{"_index":1380,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["registeras('file",{"_index":1429,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["registers",{"_index":1307,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["registration",{"_index":1306,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"index.html":{}}}],["regular",{"_index":375,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["reject",{"_index":1349,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["rejectunauthorized",{"_index":1400,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["related",{"_index":121,"title":{},"body":{"modules/ApiModule.html":{},"controllers/AppController.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/QueryFailedFilter.html":{}}}],["relational",{"_index":2635,"title":{},"body":{"index.html":{}}}],["release",{"_index":2403,"title":{},"body":{"changelog.html":{}}}],["relevant",{"_index":1477,"title":{},"body":{"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{}}}],["remarks",{"_index":1890,"title":{},"body":{"modules/HelperModule.html":{},"injectables/PaginationService.html":{}}}],["remove.ts",{"_index":1203,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/FilterCountryDto.html":{},"classes/QueryCountryDto.html":{},"interfaces/QueryOptions.html":{},"classes/SortCountryDto.html":{},"coverage.html":{}}}],["remove.ts:116",{"_index":1215,"title":{},"body":{"classes/DynamicQueryBuilder.html":{}}}],["remove.ts:14",{"_index":2350,"title":{},"body":{"classes/SortCountryDto.html":{}}}],["remove.ts:145",{"_index":1218,"title":{},"body":{"classes/DynamicQueryBuilder.html":{}}}],["remove.ts:18",{"_index":2348,"title":{},"body":{"classes/SortCountryDto.html":{}}}],["remove.ts:195",{"_index":1220,"title":{},"body":{"classes/DynamicQueryBuilder.html":{}}}],["remove.ts:235",{"_index":1211,"title":{},"body":{"classes/DynamicQueryBuilder.html":{}}}],["remove.ts:26",{"_index":2290,"title":{},"body":{"classes/QueryCountryDto.html":{}}}],["remove.ts:32",{"_index":2289,"title":{},"body":{"classes/QueryCountryDto.html":{}}}],["remove.ts:41",{"_index":2286,"title":{},"body":{"classes/QueryCountryDto.html":{}}}],["remove.ts:50",{"_index":2291,"title":{},"body":{"classes/QueryCountryDto.html":{}}}],["removefile",{"_index":2504,"title":{},"body":{"coverage.html":{}}}],["repeat",{"_index":1998,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["replace",{"_index":462,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["reporting",{"_index":2416,"title":{},"body":{"contributing.html":{}}}],["repository",{"_index":2425,"title":{},"body":{"contributing.html":{},"index.html":{},"properties.html":{}}}],["repository:example",{"_index":2655,"title":{},"body":{"index.html":{}}}],["representation",{"_index":1192,"title":{},"body":{"classes/Currency.html":{}}}],["representing",{"_index":938,"title":{},"body":{"classes/Country.html":{},"classes/FileResponseDto-1.html":{},"classes/FileType.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/Query.html":{},"classes/SortByDto.html":{},"miscellaneous/enumerations.html":{}}}],["represents",{"_index":927,"title":{},"body":{"classes/Country.html":{},"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/UpdateDto.html":{},"miscellaneous/typealiases.html":{}}}],["reqdata",{"_index":2211,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["reqescvalue",{"_index":2219,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["reqescvalue.replace(/'/g",{"_index":2221,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["reqstr",{"_index":287,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["reqstrobj",{"_index":294,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{}}}],["request",{"_index":48,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/FileType.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"modules/HomeModule.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResolvePromisesInterceptor.html":{},"contributing.html":{},"dependencies.html":{}}}],["request.filter.ts",{"_index":238,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"coverage.html":{}}}],["request.filter.ts:27",{"_index":242,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["request.filter.ts:34",{"_index":243,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["request.filter.ts:43",{"_index":254,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["request.filter.ts:93",{"_index":246,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["request.method",{"_index":293,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["request.url",{"_index":80,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["requested",{"_index":2368,"title":{},"body":{"classes/UserNotFoundException.html":{}}}],["requests",{"_index":148,"title":{},"body":{"controllers/AppController.html":{},"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"modules/FilesLocalModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"contributing.html":{}}}],["require",{"_index":869,"title":{},"body":{"injectables/CountriesService.html":{},"classes/UtilsService.html":{}}}],["require_tld",{"_index":441,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{}}}],["required",{"_index":672,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileUploadDto.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/SortByDto.html":{},"classes/UpdateDto.html":{}}}],["requirements",{"_index":1775,"title":{},"body":{"injectables/FilesService.html":{}}}],["requrest",{"_index":264,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["res",{"_index":301,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{}}}],["resdata",{"_index":2212,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["resescvalue",{"_index":2220,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["resescvalue.replace(/'/g",{"_index":2222,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["reset",{"_index":105,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/CountriesModule.html":{},"modules/CurrenciesModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{},"overview.html":{}}}],["resolved",{"_index":2320,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["resolvepromisesinterceptor",{"_index":2314,"title":{"injectables/ResolvePromisesInterceptor.html":{}},"body":{"injectables/ResolvePromisesInterceptor.html":{},"coverage.html":{}}}],["resolver",{"_index":2339,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["resolver.ts",{"_index":2508,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["resolves",{"_index":171,"title":{},"body":{"controllers/AppController.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"injectables/FilesS3Service.html":{},"injectables/ResolvePromisesInterceptor.html":{},"miscellaneous/functions.html":{}}}],["resolving",{"_index":2568,"title":{},"body":{"miscellaneous/functions.html":{}}}],["response",{"_index":49,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PaginationResponseDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResolvePromisesInterceptor.html":{},"miscellaneous/functions.html":{}}}],["response.dto",{"_index":626,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/PaginationService.html":{}}}],["response.dto.ts",{"_index":1458,"title":{},"body":{"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/PaginationResponseDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["response.dto.ts:21",{"_index":2053,"title":{},"body":{"classes/PaginationResponseDto.html":{}}}],["response.dto.ts:27",{"_index":1461,"title":{},"body":{"classes/FileResponseDto.html":{},"classes/FileResponseDto-2.html":{}}}],["response.dto.ts:30",{"_index":2055,"title":{},"body":{"classes/PaginationResponseDto.html":{}}}],["response.dto.ts:34",{"_index":1475,"title":{},"body":{"classes/FileResponseDto-1.html":{}}}],["response.dto.ts:39",{"_index":2054,"title":{},"body":{"classes/PaginationResponseDto.html":{}}}],["response.dto.ts:41",{"_index":1486,"title":{},"body":{"classes/FileResponseDto-2.html":{}}}],["response.sendfile(path",{"_index":1594,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["response.status(status).json",{"_index":1942,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["response.status(status).json(errorresponse",{"_index":86,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["response.status(statuscode).json(r",{"_index":283,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["response_serialization_meta_key",{"_index":2470,"title":{},"body":{"coverage.html":{}}}],["responses",{"_index":1060,"title":{},"body":{"controllers/CurrenciesController.html":{},"classes/FileResponseDto-1.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{}}}],["responsible",{"_index":114,"title":{},"body":{"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"injectables/FilesService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{}}}],["resstr",{"_index":289,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["resstrobj",{"_index":300,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{}}}],["restriction",{"_index":2759,"title":{},"body":{"license.html":{}}}],["result",{"_index":164,"title":{},"body":{"controllers/AppController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{}}}],["results",{"_index":87,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UpdateDto.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"changelog.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["retrieval",{"_index":1763,"title":{},"body":{"injectables/FilesS3Service.html":{},"injectables/PaginationService.html":{}}}],["retrievals",{"_index":1601,"title":{},"body":{"modules/FilesLocalModule.html":{}}}],["retrieve",{"_index":608,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{}}}],["retrieves",{"_index":1132,"title":{},"body":{"injectables/CurrenciesService.html":{},"injectables/HomeService.html":{}}}],["retrieving",{"_index":1117,"title":{},"body":{"injectables/CurrenciesService.html":{},"modules/FilesLocalModule.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesService.html":{},"injectables/HomeService.html":{},"injectables/PrismaService.html":{},"classes/Query-2.html":{}}}],["return",{"_index":200,"title":{},"body":{"controllers/AppController.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"controllers/HomeController.html":{},"injectables/HomeService.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/QueryCountryDto.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UtilsService.html":{}}}],["returned",{"_index":165,"title":{},"body":{"controllers/AppController.html":{},"classes/FileResponseDto.html":{}}}],["returning",{"_index":1244,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/FileResponseDto-1.html":{},"controllers/FilesS3Controller.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{}}}],["returningclause",{"_index":1242,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["returningfields",{"_index":1231,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{}}}],["returningfields.join",{"_index":1245,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["returningfields.length",{"_index":1243,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["returns",{"_index":51,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"controllers/HomeController.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{}}}],["reusing",{"_index":747,"title":{},"body":{"injectables/CountriesService.html":{}}}],["right",{"_index":2606,"title":{},"body":{"index.html":{}}}],["rights",{"_index":2761,"title":{},"body":{"license.html":{}}}],["root",{"_index":208,"title":{},"body":{"modules/AppModule.html":{},"controllers/FilesLocalController.html":{},"controllers/HomeController.html":{}}}],["rounding",{"_index":1012,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/Query-2.html":{}}}],["route",{"_index":193,"title":{},"body":{"controllers/AppController.html":{},"controllers/CurrenciesController.html":{}}}],["rows",{"_index":2181,"title":{},"body":{"injectables/PrismaService.html":{}}}],["rows[0",{"_index":2184,"title":{},"body":{"injectables/PrismaService.html":{}}}],["rsa256",{"_index":2631,"title":{},"body":{"index.html":{}}}],["rules",{"_index":1003,"title":{},"body":{"classes/CreateDto.html":{}}}],["run",{"_index":2442,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["running",{"_index":1946,"title":{},"body":{"interfaces/IAppConfig.html":{},"contributing.html":{},"index.html":{}}}],["rupee",{"_index":963,"title":{},"body":{"classes/Country.html":{},"classes/CreateDto.html":{},"classes/Currency.html":{}}}],["rupees",{"_index":1029,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{}}}],["rxjs",{"_index":2336,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":2337,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["s",{"_index":801,"title":{},"body":{"injectables/CountriesService.html":{}}}],["s.area",{"_index":799,"title":{},"body":{"injectables/CountriesService.html":{}}}],["s.country_id",{"_index":917,"title":{},"body":{"injectables/CountriesService.html":{}}}],["s.currency_id",{"_index":807,"title":{},"body":{"injectables/CountriesService.html":{}}}],["s.id",{"_index":796,"title":{},"body":{"injectables/CountriesService.html":{}}}],["s.name",{"_index":797,"title":{},"body":{"injectables/CountriesService.html":{}}}],["s.population",{"_index":798,"title":{},"body":{"injectables/CountriesService.html":{}}}],["s.state_id",{"_index":924,"title":{},"body":{"injectables/CountriesService.html":{}}}],["s.timezone_id",{"_index":808,"title":{},"body":{"injectables/CountriesService.html":{}}}],["s.trim",{"_index":2094,"title":{},"body":{"injectables/PaginationService.html":{}}}],["s3",{"_index":1411,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["s3://bucket/path/to/file",{"_index":1719,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["s3_presigned",{"_index":1505,"title":{},"body":{"classes/FileType.html":{},"miscellaneous/enumerations.html":{}}}],["s3client",{"_index":1509,"title":{},"body":{"classes/FileType.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["same",{"_index":748,"title":{},"body":{"injectables/CountriesService.html":{}}}],["sanitization",{"_index":2143,"title":{},"body":{"injectables/PrismaService.html":{}}}],["sanitized",{"_index":2146,"title":{},"body":{"injectables/PrismaService.html":{}}}],["scalable",{"_index":2601,"title":{},"body":{"index.html":{}}}],["scanning",{"_index":2646,"title":{},"body":{"index.html":{}}}],["schema",{"_index":1355,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"miscellaneous/functions.html":{}}}],["scope",{"_index":2715,"title":{},"body":{"index.html":{}}}],["script",{"_index":2698,"title":{},"body":{"index.html":{}}}],["sdk/client",{"_index":1510,"title":{},"body":{"classes/FileType.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"dependencies.html":{}}}],["sdk/s3",{"_index":1512,"title":{},"body":{"classes/FileType.html":{},"injectables/FilesS3PresignedService.html":{},"dependencies.html":{}}}],["search",{"_index":2241,"title":{},"body":{"classes/Query-2.html":{},"index.html":{}}}],["seconds",{"_index":1713,"title":{},"body":{"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{}}}],["secret",{"_index":538,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"interfaces/IJWTConfig.html":{}}}],["secretaccesskey",{"_index":594,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"interfaces/IFileConfig.html":{}}}],["secure",{"_index":2623,"title":{},"body":{"index.html":{}}}],["securely",{"_index":1489,"title":{},"body":{"classes/FileResponseDto-2.html":{}}}],["see",{"_index":619,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{}}}],["seed",{"_index":2455,"title":{},"body":{"coverage.html":{}}}],["select",{"_index":709,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"interfaces/IPaginationFieldConfig.html":{},"injectables/PaginationService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{}}}],["select_one",{"_index":1262,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"injectables/PrismaService.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{}}}],["selected",{"_index":2246,"title":{},"body":{"classes/Query-2.html":{}}}],["selectedfields",{"_index":2382,"title":{},"body":{"classes/UtilsService.html":{}}}],["selectfields",{"_index":749,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"interfaces/IPaginationFieldConfig.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["selectfields.join",{"_index":771,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["selectfields.length",{"_index":2383,"title":{},"body":{"classes/UtilsService.html":{}}}],["selectfields.push",{"_index":825,"title":{},"body":{"injectables/CountriesService.html":{}}}],["selectfields.push('c.name",{"_index":919,"title":{},"body":{"injectables/CountriesService.html":{}}}],["selectfields.push(...config.selectfields(alias",{"_index":857,"title":{},"body":{"injectables/CountriesService.html":{},"classes/UtilsService.html":{}}}],["selectfields.push(`c${index}.name",{"_index":899,"title":{},"body":{"injectables/CountriesService.html":{}}}],["selectfields.push(`c${index}.symbol",{"_index":822,"title":{},"body":{"injectables/CountriesService.html":{}}}],["selectfields.push(`tz${index}.offset",{"_index":901,"title":{},"body":{"injectables/CountriesService.html":{}}}],["selectfields.push(`tz${index}.offset_in_minutes",{"_index":902,"title":{},"body":{"injectables/CountriesService.html":{}}}],["selectfields.push(`tz${index}.text",{"_index":903,"title":{},"body":{"injectables/CountriesService.html":{}}}],["selectfile",{"_index":1622,"title":{},"body":{"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{}}}],["selecting",{"_index":2017,"title":{},"body":{"interfaces/IPaginationFieldConfig.html":{},"classes/Query-2.html":{}}}],["selectoptions",{"_index":2275,"title":{},"body":{"classes/Query-2.html":{}}}],["selectquery",{"_index":768,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["sell",{"_index":2768,"title":{},"body":{"license.html":{}}}],["sender_id",{"_index":577,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/ISMSConfig.html":{}}}],["sendgrid_api_key",{"_index":551,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/ISendGridConfig.html":{}}}],["sendgridconfig",{"_index":550,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["sent",{"_index":2322,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["separate",{"_index":2581,"title":{},"body":{"miscellaneous/functions.html":{}}}],["separated",{"_index":319,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["serialized",{"_index":2216,"title":{},"body":{"classes/Query.html":{}}}],["server",{"_index":84,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/FileResponseDto-2.html":{},"classes/HttpErrorFilter.html":{},"index.html":{}}}],["serves",{"_index":118,"title":{},"body":{"modules/ApiModule.html":{},"classes/Country.html":{}}}],["service",{"_index":187,"title":{},"body":{"controllers/AppController.html":{},"classes/ConfigService.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/EnvVarAppConfigValidator.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"index.html":{}}}],["service's",{"_index":1773,"title":{},"body":{"injectables/FilesService.html":{}}}],["servicecommit",{"_index":2714,"title":{},"body":{"index.html":{}}}],["services",{"_index":688,"title":{},"body":{"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"index.html":{}}}],["services/config.service",{"_index":1889,"title":{},"body":{"modules/HelperModule.html":{},"injectables/PrismaService.html":{}}}],["services/encryption.service",{"_index":1894,"title":{},"body":{"modules/HelperModule.html":{}}}],["services/pagination.service",{"_index":719,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"modules/HelperModule.html":{}}}],["services/prisma.service",{"_index":177,"title":{},"body":{"controllers/AppController.html":{},"injectables/CurrenciesService.html":{},"modules/HelperModule.html":{},"injectables/PaginationService.html":{}}}],["services/task.service",{"_index":1896,"title":{},"body":{"modules/HelperModule.html":{}}}],["services/util.service",{"_index":720,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"modules/HelperModule.html":{}}}],["set",{"_index":846,"title":{},"body":{"injectables/CountriesService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{}}}],["setclauses",{"_index":1263,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["setclauses.join",{"_index":1267,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["sets",{"_index":111,"title":{},"body":{"modules/ApiModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"miscellaneous/functions.html":{}}}],["setting",{"_index":2610,"title":{},"body":{"index.html":{}}}],["settings",{"_index":1363,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"interfaces/IAppConfig.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["several",{"_index":109,"title":{},"body":{"modules/ApiModule.html":{}}}],["sh",{"_index":2443,"title":{},"body":{"contributing.html":{}}}],["shall",{"_index":2776,"title":{},"body":{"license.html":{}}}],["shared/services/sql.service",{"_index":1926,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["shift",{"_index":2681,"title":{},"body":{"index.html":{}}}],["short",{"_index":2721,"title":{},"body":{"index.html":{}}}],["side",{"_index":2602,"title":{},"body":{"index.html":{}}}],["signed",{"_index":1481,"title":{},"body":{"classes/FileResponseDto-2.html":{}}}],["signedurl",{"_index":1758,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["simple",{"_index":2155,"title":{},"body":{"injectables/PrismaService.html":{}}}],["single",{"_index":2197,"title":{},"body":{"classes/Query.html":{},"index.html":{}}}],["size",{"_index":1424,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileUploadDto.html":{},"injectables/FilesS3PresignedService.html":{},"interfaces/IFileConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["smooth",{"_index":2413,"title":{},"body":{"contributing.html":{}}}],["sms_provider_name",{"_index":573,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/ISMSConfig.html":{}}}],["smsconfig",{"_index":572,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["soft",{"_index":1233,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["software",{"_index":2757,"title":{},"body":{"license.html":{}}}],["solutions",{"_index":1639,"title":{},"body":{"modules/FilesModule.html":{}}}],["something",{"_index":1157,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["somewhere",{"_index":1991,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["sort",{"_index":675,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UtilsService.html":{}}}],["sort.length",{"_index":862,"title":{},"body":{"injectables/CountriesService.html":{},"classes/UtilsService.html":{}}}],["sortby",{"_index":359,"title":{"injectables/SortBy.html":{}},"body":{"injectables/CommaSeparated.html":{},"injectables/CountriesService.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"coverage.html":{}}}],["sortbydto",{"_index":1821,"title":{"classes/SortByDto.html":{}},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"coverage.html":{}}}],["sortbyquery",{"_index":775,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["sortconditions",{"_index":2092,"title":{},"body":{"injectables/PaginationService.html":{}}}],["sortcountrydto",{"_index":877,"title":{"classes/SortCountryDto.html":{}},"body":{"injectables/CountriesService.html":{},"classes/FilterCountryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortCountryDto.html":{},"coverage.html":{}}}],["sorting",{"_index":867,"title":{},"body":{"injectables/CountriesService.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{}}}],["sortitem.direction",{"_index":873,"title":{},"body":{"injectables/CountriesService.html":{},"classes/UtilsService.html":{}}}],["sortitem.field.tolowercase",{"_index":864,"title":{},"body":{"injectables/CountriesService.html":{},"classes/UtilsService.html":{}}}],["sortoptions",{"_index":662,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{}}}],["sortquery",{"_index":2091,"title":{},"body":{"injectables/PaginationService.html":{}}}],["sortuserdto",{"_index":1845,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UpdateDto.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"index.html":{}}}],["spaces",{"_index":365,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["specific",{"_index":116,"title":{},"body":{"modules/ApiModule.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesService.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["specifically",{"_index":240,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["specified",{"_index":1007,"title":{},"body":{"classes/CreateDto.html":{},"classes/FileResponseDto-2.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"classes/SortByDto.html":{},"miscellaneous/functions.html":{}}}],["specifies",{"_index":1420,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{}}}],["specify",{"_index":1531,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["specifying",{"_index":2016,"title":{},"body":{"interfaces/IPaginationFieldConfig.html":{}}}],["split",{"_index":363,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/CountriesService.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/PaginationService.html":{},"injectables/SortBy.html":{}}}],["sponsors",{"_index":2738,"title":{},"body":{"index.html":{}}}],["sql",{"_index":708,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"injectables/PaginationService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{}}}],["sqlquery",{"_index":2200,"title":{},"body":{"classes/Query.html":{}}}],["sqlservice",{"_index":286,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["sqlservice.run",{"_index":291,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{}}}],["sqlservice.run(query.addqueryerror(\"dbquery",{"_index":2312,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["src/**/**.entity{.ts,.js",{"_index":496,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["src/.../app",{"_index":2812,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../app.config.ts",{"_index":2546,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../config.type.ts",{"_index":2811,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../database",{"_index":2813,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../deep",{"_index":2553,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../field.validator.ts",{"_index":2555,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../file",{"_index":2547,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../main.ts",{"_index":2552,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../maybe.type.ts",{"_index":2816,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../number.string.validator.ts",{"_index":2554,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../pagination",{"_index":2556,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../pagination.dto.ts",{"_index":2549,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../swagger.ts",{"_index":2558,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../transforms.decorator.ts",{"_index":2557,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../validate",{"_index":2559,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app/app.controller.ts",{"_index":142,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app/app.controller.ts:63",{"_index":160,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app/app.module.ts",{"_index":207,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{}}}],["src/common/helper/helper.module.ts",{"_index":1878,"title":{},"body":{"modules/HelperModule.html":{},"coverage.html":{}}}],["src/common/helper/services/config.service.ts",{"_index":385,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"coverage.html":{}}}],["src/common/helper/services/config.service.ts:101",{"_index":396,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/common/helper/services/config.service.ts:105",{"_index":401,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/common/helper/services/config.service.ts:139",{"_index":403,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/common/helper/services/config.service.ts:28",{"_index":1277,"title":{},"body":{"classes/EnvVarAppConfigValidator.html":{}}}],["src/common/helper/services/config.service.ts:32",{"_index":1281,"title":{},"body":{"classes/EnvVarAppConfigValidator.html":{}}}],["src/common/helper/services/config.service.ts:36",{"_index":1280,"title":{},"body":{"classes/EnvVarAppConfigValidator.html":{}}}],["src/common/helper/services/config.service.ts:40",{"_index":1275,"title":{},"body":{"classes/EnvVarAppConfigValidator.html":{}}}],["src/common/helper/services/config.service.ts:72",{"_index":391,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/common/helper/services/config.service.ts:93",{"_index":393,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/common/helper/services/config.service.ts:97",{"_index":398,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/common/helper/services/pagination.service.ts",{"_index":2067,"title":{},"body":{"injectables/PaginationService.html":{},"coverage.html":{}}}],["src/common/helper/services/pagination.service.ts:36",{"_index":2076,"title":{},"body":{"injectables/PaginationService.html":{}}}],["src/common/helper/services/pagination.service.ts:39",{"_index":2078,"title":{},"body":{"injectables/PaginationService.html":{}}}],["src/common/helper/services/prisma.service.ts",{"_index":2127,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/common/helper/services/prisma.service.ts:129",{"_index":2149,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/common/helper/services/prisma.service.ts:141",{"_index":2153,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/common/helper/services/prisma.service.ts:28",{"_index":2140,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/common/helper/services/prisma.service.ts:51",{"_index":2160,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/common/helper/services/prisma.service.ts:61",{"_index":2156,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/common/helper/services/prisma.service.ts:79",{"_index":2142,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/common/helper/services/util.service.ts",{"_index":2370,"title":{},"body":{"classes/UtilsService.html":{},"coverage.html":{}}}],["src/common/helper/services/util.service.ts:136",{"_index":2380,"title":{},"body":{"classes/UtilsService.html":{}}}],["src/common/helper/services/util.service.ts:29",{"_index":2374,"title":{},"body":{"classes/UtilsService.html":{}}}],["src/config/app.config.ts",{"_index":1283,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/config/app.config.ts:25",{"_index":1298,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["src/config/app.config.ts:29",{"_index":1291,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["src/config/app.config.ts:33",{"_index":1290,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["src/config/app.config.ts:37",{"_index":1294,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["src/config/app.config.ts:41",{"_index":1293,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["src/config/app.config.ts:47",{"_index":1292,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["src/config/app.config.ts:51",{"_index":1296,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["src/config/app.config.ts:55",{"_index":1295,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["src/config/app.config.ts:59",{"_index":1289,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["src/config/database.config.ts",{"_index":1326,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"coverage.html":{}}}],["src/config/database.config.ts:106",{"_index":1366,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/database.config.ts:117",{"_index":1352,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/database.config.ts:128",{"_index":1347,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/database.config.ts:139",{"_index":1340,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/database.config.ts:150",{"_index":1345,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/database.config.ts:161",{"_index":1344,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/database.config.ts:26",{"_index":1358,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/database.config.ts:37",{"_index":1364,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/database.config.ts:51",{"_index":1371,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/database.config.ts:62",{"_index":1369,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/database.config.ts:73",{"_index":1368,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/database.config.ts:84",{"_index":1374,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/database.config.ts:95",{"_index":1354,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/file.config.ts",{"_index":1406,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"coverage.html":{}}}],["src/config/file.config.ts:25",{"_index":1419,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["src/config/file.config.ts:38",{"_index":1409,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["src/config/file.config.ts:51",{"_index":1417,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["src/config/file.config.ts:64",{"_index":1413,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["src/config/file.config.ts:77",{"_index":1415,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["src/config/file.config.ts:88",{"_index":1423,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["src/config/type/app",{"_index":2820,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/config/type/config.type.ts",{"_index":2817,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/config/type/database",{"_index":2821,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/config/type/file",{"_index":2550,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/core/constants/core.constant.ts",{"_index":2466,"title":{},"body":{"coverage.html":{}}}],["src/core/decorators/number.string.validator.ts",{"_index":2471,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/decorators/public.request.decorator",{"_index":179,"title":{},"body":{"controllers/AppController.html":{}}}],["src/core/decorators/public.request.decorator.ts",{"_index":2472,"title":{},"body":{"coverage.html":{}}}],["src/core/decorators/swagger.schema.ts",{"_index":2473,"title":{},"body":{"coverage.html":{}}}],["src/core/decorators/transforms.decorator.ts",{"_index":2475,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/exceptions/file",{"_index":1440,"title":{},"body":{"classes/FileNotImageException.html":{},"coverage.html":{}}}],["src/core/exceptions/http",{"_index":1918,"title":{},"body":{"classes/HttpErrorFilter.html":{},"coverage.html":{}}}],["src/core/exceptions/query.ts",{"_index":2193,"title":{},"body":{"classes/Query.html":{},"coverage.html":{}}}],["src/core/exceptions/query.ts:36",{"_index":2213,"title":{},"body":{"classes/Query.html":{}}}],["src/core/exceptions/user",{"_index":2361,"title":{},"body":{"classes/UserNotFoundException.html":{},"coverage.html":{}}}],["src/core/filters/all",{"_index":6,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["src/core/filters/bad",{"_index":237,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"coverage.html":{}}}],["src/core/filters/constraint",{"_index":2478,"title":{},"body":{"coverage.html":{}}}],["src/core/filters/http",{"_index":1936,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/core/filters/prisma",{"_index":2104,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"coverage.html":{}}}],["src/core/filters/query",{"_index":2293,"title":{},"body":{"classes/QueryFailedFilter.html":{},"coverage.html":{}}}],["src/core/filters/query.ts",{"_index":2226,"title":{},"body":{"classes/Query-1.html":{},"coverage.html":{}}}],["src/core/filters/query.ts:24",{"_index":2228,"title":{},"body":{"classes/Query-1.html":{}}}],["src/core/interfaces/app.interfaces.ts",{"_index":1944,"title":{},"body":{"interfaces/IAppConfig.html":{},"coverage.html":{}}}],["src/core/interfaces/aws.interfaces.ts",{"_index":1949,"title":{},"body":{"interfaces/IAwsConfig.html":{},"coverage.html":{}}}],["src/core/interfaces/file.interfaces.ts",{"_index":1950,"title":{},"body":{"interfaces/IFileConfig.html":{},"coverage.html":{}}}],["src/core/interfaces/jwt.interfaces.ts",{"_index":1955,"title":{},"body":{"interfaces/IJWTConfig.html":{},"coverage.html":{}}}],["src/core/interfaces/node",{"_index":1956,"title":{},"body":{"interfaces/INodeEmailerConfig.html":{},"coverage.html":{}}}],["src/core/interfaces/postgres.interfaces.ts",{"_index":2019,"title":{},"body":{"interfaces/IPostgreSQLConfig.html":{},"coverage.html":{}}}],["src/core/interfaces/sendgrid.interfaces.ts",{"_index":2024,"title":{},"body":{"interfaces/ISendGridConfig.html":{},"coverage.html":{}}}],["src/core/interfaces/sms.interfaces.ts",{"_index":2023,"title":{},"body":{"interfaces/ISMSConfig.html":{},"coverage.html":{}}}],["src/core/interfaces/upload",{"_index":2025,"title":{},"body":{"interfaces/IUploadFileConfig.html":{},"coverage.html":{}}}],["src/core/validators/field.validator.ts",{"_index":2485,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/validators/filter.validator.ts",{"_index":314,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{},"coverage.html":{}}}],["src/core/validators/filter.validator.ts:101",{"_index":2342,"title":{},"body":{"injectables/SortBy.html":{}}}],["src/core/validators/filter.validator.ts:28",{"_index":331,"title":{},"body":{"injectables/CommaSeparated.html":{}}}],["src/core/validators/filter.validator.ts:47",{"_index":326,"title":{},"body":{"injectables/CommaSeparated.html":{}}}],["src/core/validators/filter.validator.ts:71",{"_index":2343,"title":{},"body":{"injectables/SortBy.html":{}}}],["src/main.ts",{"_index":2486,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/api.module.ts",{"_index":107,"title":{},"body":{"modules/ApiModule.html":{}}}],["src/modules/countries/countries.controller.ts",{"_index":604,"title":{},"body":{"controllers/CountriesController.html":{},"coverage.html":{}}}],["src/modules/countries/countries.controller.ts:43",{"_index":614,"title":{},"body":{"controllers/CountriesController.html":{}}}],["src/modules/countries/countries.module.ts",{"_index":683,"title":{},"body":{"modules/CountriesModule.html":{}}}],["src/modules/countries/countries.service.ts",{"_index":691,"title":{},"body":{"injectables/CountriesService.html":{},"coverage.html":{}}}],["src/modules/countries/countries.service.ts:20",{"_index":700,"title":{},"body":{"injectables/CountriesService.html":{}}}],["src/modules/countries/countries.service.ts:52",{"_index":702,"title":{},"body":{"injectables/CountriesService.html":{}}}],["src/modules/countries/dto/country.ts",{"_index":926,"title":{},"body":{"classes/Country.html":{},"coverage.html":{}}}],["src/modules/countries/dto/country.ts:107",{"_index":960,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:120",{"_index":993,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:133",{"_index":966,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:146",{"_index":998,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:159",{"_index":988,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:172",{"_index":991,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:185",{"_index":956,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:198",{"_index":995,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:29",{"_index":976,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:42",{"_index":986,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:55",{"_index":979,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:68",{"_index":983,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:81",{"_index":968,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:94",{"_index":959,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/query",{"_index":1776,"title":{},"body":{"classes/FilterCountryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortCountryDto.html":{},"coverage.html":{}}}],["src/modules/currencies/currencies.controller.ts",{"_index":1053,"title":{},"body":{"controllers/CurrenciesController.html":{},"coverage.html":{}}}],["src/modules/currencies/currencies.controller.ts:113",{"_index":1070,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["src/modules/currencies/currencies.controller.ts:54",{"_index":1064,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["src/modules/currencies/currencies.controller.ts:74",{"_index":1081,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["src/modules/currencies/currencies.controller.ts:93",{"_index":1075,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["src/modules/currencies/currencies.module.ts",{"_index":1112,"title":{},"body":{"modules/CurrenciesModule.html":{}}}],["src/modules/currencies/currencies.service.ts",{"_index":1115,"title":{},"body":{"injectables/CurrenciesService.html":{},"coverage.html":{}}}],["src/modules/currencies/currencies.service.ts:136",{"_index":1131,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["src/modules/currencies/currencies.service.ts:175",{"_index":1129,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["src/modules/currencies/currencies.service.ts:201",{"_index":1134,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["src/modules/currencies/currencies.service.ts:27",{"_index":1123,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["src/modules/currencies/currencies.service.ts:53",{"_index":1128,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["src/modules/currencies/currencies.service.ts:86",{"_index":1137,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["src/modules/currencies/dto/create.dto.ts",{"_index":1001,"title":{},"body":{"classes/CreateDto.html":{},"coverage.html":{}}}],["src/modules/currencies/dto/create.dto.ts:106",{"_index":1038,"title":{},"body":{"classes/CreateDto.html":{}}}],["src/modules/currencies/dto/create.dto.ts:122",{"_index":1024,"title":{},"body":{"classes/CreateDto.html":{}}}],["src/modules/currencies/dto/create.dto.ts:138",{"_index":1031,"title":{},"body":{"classes/CreateDto.html":{}}}],["src/modules/currencies/dto/create.dto.ts:38",{"_index":1017,"title":{},"body":{"classes/CreateDto.html":{}}}],["src/modules/currencies/dto/create.dto.ts:55",{"_index":1027,"title":{},"body":{"classes/CreateDto.html":{}}}],["src/modules/currencies/dto/create.dto.ts:72",{"_index":1030,"title":{},"body":{"classes/CreateDto.html":{}}}],["src/modules/currencies/dto/create.dto.ts:89",{"_index":1035,"title":{},"body":{"classes/CreateDto.html":{}}}],["src/modules/currencies/dto/currency.ts",{"_index":1181,"title":{},"body":{"classes/Currency.html":{},"coverage.html":{}}}],["src/modules/currencies/dto/currency.ts:100",{"_index":1195,"title":{},"body":{"classes/Currency.html":{}}}],["src/modules/currencies/dto/currency.ts:108",{"_index":1189,"title":{},"body":{"classes/Currency.html":{}}}],["src/modules/currencies/dto/currency.ts:28",{"_index":1186,"title":{},"body":{"classes/Currency.html":{}}}],["src/modules/currencies/dto/currency.ts:40",{"_index":1193,"title":{},"body":{"classes/Currency.html":{}}}],["src/modules/currencies/dto/currency.ts:52",{"_index":1194,"title":{},"body":{"classes/Currency.html":{}}}],["src/modules/currencies/dto/currency.ts:64",{"_index":1196,"title":{},"body":{"classes/Currency.html":{}}}],["src/modules/currencies/dto/currency.ts:76",{"_index":1197,"title":{},"body":{"classes/Currency.html":{}}}],["src/modules/currencies/dto/currency.ts:88",{"_index":1187,"title":{},"body":{"classes/Currency.html":{}}}],["src/modules/currencies/dto/update.dto.ts",{"_index":2351,"title":{},"body":{"classes/UpdateDto.html":{},"coverage.html":{}}}],["src/modules/currencies/query.ts",{"_index":2229,"title":{},"body":{"classes/Query-2.html":{},"coverage.html":{}}}],["src/modules/currencies/query.ts:100",{"_index":2247,"title":{},"body":{"classes/Query-2.html":{}}}],["src/modules/currencies/query.ts:139",{"_index":2238,"title":{},"body":{"classes/Query-2.html":{}}}],["src/modules/currencies/query.ts:156",{"_index":2245,"title":{},"body":{"classes/Query-2.html":{}}}],["src/modules/currencies/query.ts:172",{"_index":2244,"title":{},"body":{"classes/Query-2.html":{}}}],["src/modules/currencies/query.ts:21",{"_index":2242,"title":{},"body":{"classes/Query-2.html":{}}}],["src/modules/currencies/query.ts:49",{"_index":2240,"title":{},"body":{"classes/Query-2.html":{}}}],["src/modules/currencies/query.ts:71",{"_index":2243,"title":{},"body":{"classes/Query-2.html":{}}}],["src/modules/files/domain/file.ts",{"_index":1494,"title":{},"body":{"classes/FileType.html":{},"coverage.html":{}}}],["src/modules/files/domain/file.ts:35",{"_index":1498,"title":{},"body":{"classes/FileType.html":{}}}],["src/modules/files/domain/file.ts:81",{"_index":1500,"title":{},"body":{"classes/FileType.html":{}}}],["src/modules/files/files.module.ts",{"_index":1632,"title":{},"body":{"modules/FilesModule.html":{},"coverage.html":{}}}],["src/modules/files/files.service.ts",{"_index":1770,"title":{},"body":{"injectables/FilesService.html":{},"coverage.html":{}}}],["src/modules/files/infrastructure/uploader/local/dto/file",{"_index":1457,"title":{},"body":{"classes/FileResponseDto.html":{},"coverage.html":{}}}],["src/modules/files/infrastructure/uploader/local/files.controller.ts",{"_index":1543,"title":{},"body":{"controllers/FilesLocalController.html":{},"coverage.html":{}}}],["src/modules/files/infrastructure/uploader/local/files.controller.ts:79",{"_index":1559,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["src/modules/files/infrastructure/uploader/local/files.controller.ts:96",{"_index":1549,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["src/modules/files/infrastructure/uploader/local/files.module.ts",{"_index":1599,"title":{},"body":{"modules/FilesLocalModule.html":{}}}],["src/modules/files/infrastructure/uploader/local/files.service.ts",{"_index":1610,"title":{},"body":{"injectables/FilesLocalService.html":{},"coverage.html":{}}}],["src/modules/files/infrastructure/uploader/local/files.service.ts:16",{"_index":1614,"title":{},"body":{"injectables/FilesLocalService.html":{}}}],["src/modules/files/infrastructure/uploader/local/files.service.ts:37",{"_index":1616,"title":{},"body":{"injectables/FilesLocalService.html":{}}}],["src/modules/files/infrastructure/uploader/s3",{"_index":1478,"title":{},"body":{"classes/FileResponseDto-2.html":{},"classes/FileUploadDto.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"coverage.html":{}}}],["src/modules/files/infrastructure/uploader/s3/dto/file",{"_index":1470,"title":{},"body":{"classes/FileResponseDto-1.html":{},"coverage.html":{}}}],["src/modules/files/infrastructure/uploader/s3/files.controller.ts",{"_index":1652,"title":{},"body":{"controllers/FilesS3Controller.html":{},"coverage.html":{}}}],["src/modules/files/infrastructure/uploader/s3/files.controller.ts:74",{"_index":1667,"title":{},"body":{"controllers/FilesS3Controller.html":{}}}],["src/modules/files/infrastructure/uploader/s3/files.module.ts",{"_index":1672,"title":{},"body":{"modules/FilesS3Module.html":{}}}],["src/modules/files/infrastructure/uploader/s3/files.service.ts",{"_index":1761,"title":{},"body":{"injectables/FilesS3Service.html":{},"coverage.html":{}}}],["src/modules/files/infrastructure/uploader/s3/files.service.ts:29",{"_index":1767,"title":{},"body":{"injectables/FilesS3Service.html":{}}}],["src/modules/files/infrastructure/uploader/s3/files.service.ts:40",{"_index":1768,"title":{},"body":{"injectables/FilesS3Service.html":{}}}],["src/modules/home/home.controller.ts",{"_index":1898,"title":{},"body":{"controllers/HomeController.html":{},"coverage.html":{}}}],["src/modules/home/home.controller.ts:30",{"_index":1901,"title":{},"body":{"controllers/HomeController.html":{}}}],["src/modules/home/home.module.ts",{"_index":1908,"title":{},"body":{"modules/HomeModule.html":{}}}],["src/modules/home/home.service.ts",{"_index":1911,"title":{},"body":{"injectables/HomeService.html":{},"coverage.html":{}}}],["src/modules/home/home.service.ts:15",{"_index":1912,"title":{},"body":{"injectables/HomeService.html":{}}}],["src/modules/home/home.service.ts:26",{"_index":1913,"title":{},"body":{"injectables/HomeService.html":{}}}],["src/providers/dynamic",{"_index":1201,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{},"coverage.html":{}}}],["src/providers/file",{"_index":2498,"title":{},"body":{"coverage.html":{}}}],["src/swagger.ts",{"_index":2505,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/deep",{"_index":2507,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/dto/pagination",{"_index":2052,"title":{},"body":{"classes/PaginationResponseDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/dto/pagination.dto.ts",{"_index":1786,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/utils/dto/pagination.dto.ts:119",{"_index":2042,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["src/utils/dto/pagination.dto.ts:141",{"_index":2051,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["src/utils/dto/pagination.dto.ts:160",{"_index":1788,"title":{},"body":{"classes/FilterQueryDto.html":{}}}],["src/utils/dto/pagination.dto.ts:172",{"_index":1790,"title":{},"body":{"classes/FilterQueryDto.html":{}}}],["src/utils/dto/pagination.dto.ts:184",{"_index":1792,"title":{},"body":{"classes/FilterQueryDto.html":{}}}],["src/utils/dto/pagination.dto.ts:214",{"_index":2347,"title":{},"body":{"classes/SortByDto.html":{}}}],["src/utils/dto/pagination.dto.ts:228",{"_index":2345,"title":{},"body":{"classes/SortByDto.html":{}}}],["src/utils/dto/pagination.dto.ts:59",{"_index":2049,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["src/utils/dto/pagination.dto.ts:77",{"_index":2047,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["src/utils/dto/pagination.dto.ts:97",{"_index":2045,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["src/utils/dto/pagination.meta.dto.ts",{"_index":1959,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"coverage.html":{}}}],["src/utils/dto/pagination.meta.dto.ts:101",{"_index":2032,"title":{},"body":{"classes/PaginationMetaDto.html":{}}}],["src/utils/dto/pagination.meta.dto.ts:113",{"_index":2034,"title":{},"body":{"classes/PaginationMetaDto.html":{}}}],["src/utils/dto/pagination.meta.dto.ts:125",{"_index":2031,"title":{},"body":{"classes/PaginationMetaDto.html":{}}}],["src/utils/dto/pagination.meta.dto.ts:137",{"_index":2028,"title":{},"body":{"classes/PaginationMetaDto.html":{}}}],["src/utils/dto/pagination.meta.dto.ts:41",{"_index":2036,"title":{},"body":{"classes/PaginationMetaDto.html":{}}}],["src/utils/dto/pagination.meta.dto.ts:53",{"_index":2030,"title":{},"body":{"classes/PaginationMetaDto.html":{}}}],["src/utils/dto/pagination.meta.dto.ts:65",{"_index":2033,"title":{},"body":{"classes/PaginationMetaDto.html":{}}}],["src/utils/dto/pagination.meta.dto.ts:77",{"_index":2037,"title":{},"body":{"classes/PaginationMetaDto.html":{}}}],["src/utils/dto/pagination.meta.dto.ts:89",{"_index":2035,"title":{},"body":{"classes/PaginationMetaDto.html":{}}}],["src/utils/serializer.interceptor.ts",{"_index":2315,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{},"coverage.html":{}}}],["src/utils/serializer.interceptor.ts:30",{"_index":2330,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["src/utils/transformers/lower",{"_index":2510,"title":{},"body":{"coverage.html":{}}}],["src/utils/transformers/upper",{"_index":2513,"title":{},"body":{"coverage.html":{}}}],["src/utils/types/deep",{"_index":2823,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/utils/types/maybe.type.ts",{"_index":2825,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/utils/types/pagination",{"_index":2012,"title":{},"body":{"interfaces/IPaginationFieldConfig.html":{},"coverage.html":{}}}],["src/utils/validate",{"_index":2514,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["ssl",{"_index":1341,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["sslenabled",{"_index":1398,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["staging",{"_index":460,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["staging/production",{"_index":2697,"title":{},"body":{"index.html":{}}}],["staging/productiondocker",{"_index":2701,"title":{},"body":{"index.html":{}}}],["staging/productionrunning",{"_index":2703,"title":{},"body":{"index.html":{}}}],["standardize",{"_index":1482,"title":{},"body":{"classes/FileResponseDto-2.html":{}}}],["start",{"_index":781,"title":{},"body":{"injectables/CountriesService.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"injectables/PaginationService.html":{},"changelog.html":{},"index.html":{}}}],["start.sh",{"_index":2700,"title":{},"body":{"index.html":{}}}],["started",{"_index":2387,"title":{"changelog.html":{},"contributing.html":{},"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["starter",{"_index":2589,"title":{},"body":{"index.html":{},"properties.html":{}}}],["starter.git",{"_index":2658,"title":{},"body":{"index.html":{},"properties.html":{}}}],["starter.git#readme",{"_index":2807,"title":{},"body":{"properties.html":{}}}],["starter.git/issues",{"_index":2808,"title":{},"body":{"properties.html":{}}}],["startindex",{"_index":1971,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{}}}],["startpage",{"_index":1969,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{}}}],["startpage).keys()).map((i",{"_index":2002,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["starts",{"_index":2561,"title":{},"body":{"miscellaneous/functions.html":{}}}],["state",{"_index":923,"title":{},"body":{"injectables/CountriesService.html":{}}}],["state_name",{"_index":925,"title":{},"body":{"injectables/CountriesService.html":{}}}],["statements",{"_index":2446,"title":{},"body":{"coverage.html":{}}}],["states",{"_index":800,"title":{},"body":{"injectables/CountriesService.html":{}}}],["status",{"_index":70,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/FilterQueryDto.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PaginationQueryDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query-2.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"classes/SortByDto.html":{}}}],["status_codes",{"_index":255,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["status_codes[status",{"_index":2313,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["status_codes[statuscode",{"_index":282,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["statuscode",{"_index":75,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/FilesS3PresignedService.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["stop.sh",{"_index":2702,"title":{},"body":{"index.html":{}}}],["storage",{"_index":1407,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileResponseDto-2.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["strategies",{"_index":2072,"title":{},"body":{"injectables/PaginationService.html":{}}}],["stream",{"_index":1552,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["strict",{"_index":1450,"title":{},"body":{"classes/FileNotImageException.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/UserNotFoundException.html":{}}}],["string",{"_index":316,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/QueryCountryDto.html":{},"interfaces/QueryOptions.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{}}}],["string(value).replace(/['\"]+/g",{"_index":1839,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["stringexample",{"_index":2208,"title":{},"body":{"classes/Query.html":{}}}],["strings",{"_index":466,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["string})@apiokresponse({status",{"_index":1069,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["string})@apiokresponse({type",{"_index":1080,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["string})@isoptional()@transform",{"_index":2284,"title":{},"body":{"classes/QueryCountryDto.html":{}}}],["strippedvalue",{"_index":1838,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["structure",{"_index":928,"title":{},"body":{"classes/Country.html":{},"classes/Currency.html":{},"classes/FileResponseDto-2.html":{},"classes/UpdateDto.html":{},"miscellaneous/functions.html":{}}}],["structures",{"_index":2325,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{},"miscellaneous/functions.html":{}}}],["studio",{"_index":2662,"title":{},"body":{"index.html":{}}}],["style",{"_index":1866,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"contributing.html":{},"index.html":{}}}],["subject",{"_index":2773,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":2766,"title":{},"body":{"license.html":{}}}],["submitting",{"_index":2441,"title":{},"body":{"contributing.html":{}}}],["substantial",{"_index":2777,"title":{},"body":{"license.html":{}}}],["success",{"_index":1178,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["successful",{"_index":1658,"title":{},"body":{"controllers/FilesS3Controller.html":{}}}],["successfully",{"_index":1107,"title":{},"body":{"controllers/CurrenciesController.html":{},"classes/FileResponseDto.html":{}}}],["such",{"_index":939,"title":{},"body":{"classes/Country.html":{},"classes/FileResponseDto-1.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/HttpErrorFilter.html":{},"injectables/PaginationService.html":{},"classes/Query-2.html":{},"index.html":{}}}],["suggesting",{"_index":2422,"title":{},"body":{"contributing.html":{}}}],["summary",{"_index":2723,"title":{},"body":{"index.html":{}}}],["super",{"_index":2164,"title":{},"body":{"injectables/PrismaService.html":{}}}],["super('error.file.not_image",{"_index":1455,"title":{},"body":{"classes/FileNotImageException.html":{}}}],["super('error.user_not_found",{"_index":2369,"title":{},"body":{"classes/UserNotFoundException.html":{}}}],["super(message",{"_index":1454,"title":{},"body":{"classes/FileNotImageException.html":{}}}],["super.catch(exception",{"_index":2126,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["support",{"_index":464,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"index.html":{},"modules.html":{}}}],["supports",{"_index":711,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["svg",{"_index":2801,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":183,"title":{},"body":{"controllers/AppController.html":{},"classes/Currency.html":{},"classes/FileResponseDto-1.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["switch",{"_index":897,"title":{},"body":{"injectables/CountriesService.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["switching",{"_index":1638,"title":{},"body":{"modules/FilesModule.html":{}}}],["symbol",{"_index":739,"title":{},"body":{"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/Query-2.html":{}}}],["symbol_native",{"_index":1013,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/Query-2.html":{}}}],["synchronize",{"_index":493,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{}}}],["syntax",{"_index":1213,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{}}}],["system",{"_index":1422,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/UserNotFoundException.html":{}}}],["t",{"_index":1829,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/SortByDto.html":{},"miscellaneous/typealiases.html":{}}}],["table",{"_index":850,"title":{},"body":{"injectables/CountriesService.html":{},"classes/DynamicQueryBuilder.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/Query.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{},"coverage.html":{}}}],["tables",{"_index":715,"title":{},"body":{"injectables/CountriesService.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2516,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":1655,"title":{},"body":{"controllers/FilesS3Controller.html":{}}}],["tags",{"_index":182,"title":{},"body":{"controllers/AppController.html":{},"controllers/FilesS3Controller.html":{}}}],["takes",{"_index":2564,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tasks",{"_index":1605,"title":{},"body":{"modules/FilesLocalModule.html":{},"injectables/FilesService.html":{}}}],["taskservice",{"_index":1895,"title":{},"body":{"modules/HelperModule.html":{}}}],["teardown",{"_index":2130,"title":{},"body":{"injectables/PrismaService.html":{}}}],["temp_file_upload_url",{"_index":580,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IUploadFileConfig.html":{}}}],["template",{"_index":2056,"title":{},"body":{"classes/PaginationResponseDto.html":{}}}],["terminusmodule",{"_index":217,"title":{},"body":{"modules/AppModule.html":{}}}],["test",{"_index":1303,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"contributing.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["test:covdatabase",{"_index":2693,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":2692,"title":{},"body":{"index.html":{}}}],["testing",{"_index":1304,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["tests",{"_index":2440,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["texposedaccountinfo",{"_index":1826,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["text",{"_index":953,"title":{},"body":{"classes/Country.html":{}}}],["thanks",{"_index":2737,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":2168,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$disconnect",{"_index":2169,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$queryraw`select",{"_index":2188,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$queryrawunsafe(query",{"_index":2171,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$transaction(actions",{"_index":2187,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this._validationfilter(validationerrors",{"_index":272,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["this.builddynamicquery",{"_index":813,"title":{},"body":{"injectables/CountriesService.html":{}}}],["this.builddynamicquery(paginationquery.filters",{"_index":810,"title":{},"body":{"injectables/CountriesService.html":{}}}],["this.configservice.get('app.apiprefix",{"_index":1623,"title":{},"body":{"injectables/FilesLocalService.html":{},"injectables/HomeService.html":{}}}],["this.configservice.get('app.appprefix",{"_index":1917,"title":{},"body":{"injectables/HomeService.html":{}}}],["this.configservice.get('app.description",{"_index":1916,"title":{},"body":{"injectables/HomeService.html":{}}}],["this.configservice.get('app.name",{"_index":1915,"title":{},"body":{"injectables/HomeService.html":{}}}],["this.configservice.get('file.maxfilesize",{"_index":1752,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["this.configservice.getorthrow('file.awsdefaults3bucket",{"_index":1756,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["this.countriesservice.findall(paginationquery",{"_index":679,"title":{},"body":{"controllers/CountriesController.html":{}}}],["this.countriesservice.findall(query",{"_index":640,"title":{},"body":{"controllers/CountriesController.html":{}}}],["this.countriesservice.findmanywithpagination",{"_index":659,"title":{},"body":{"controllers/CountriesController.html":{}}}],["this.create",{"_index":1739,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["this.currenciesservice.create(createdto",{"_index":1095,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["this.currenciesservice.delete(id",{"_index":1109,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["this.currenciesservice.findall(query",{"_index":1104,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["this.currenciesservice.update(id",{"_index":1101,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["this.currentpage",{"_index":2004,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["this.endindex",{"_index":2010,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["this.endpage",{"_index":2008,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["this.filerepository.create",{"_index":1760,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["this.filesservice.create(file",{"_index":1591,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{}}}],["this.filesservice.generatepresignedurl(key",{"_index":1725,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["this.findone(id",{"_index":1168,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["this.findone(inserted.insertid",{"_index":1156,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["this.generatepresignedurl('path/to/file",{"_index":1743,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["this.get(\"database_host",{"_index":483,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get(\"database_pass",{"_index":489,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get(\"database_schema",{"_index":490,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get(\"database_user",{"_index":487,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('api_key",{"_index":576,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('api_prefix",{"_index":509,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('app_name",{"_index":499,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_access_key_id",{"_index":593,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_default_s3_bucket",{"_index":597,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_s3_access_key_id",{"_index":513,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_s3_bucket_name",{"_index":517,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_s3_companion_secret",{"_index":527,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_s3_default_region",{"_index":519,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_s3_endpoint",{"_index":523,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_s3_region",{"_index":599,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_s3_secret_access_key",{"_index":515,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_s3_server_host",{"_index":525,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_s3_temp_directory",{"_index":521,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_secret_access_key",{"_index":595,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('backend_domain",{"_index":506,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('file_driver",{"_index":591,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('file_upload_destination",{"_index":583,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('from_email",{"_index":554,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('frontend_domain",{"_index":504,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('jwt_algorithm",{"_index":541,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('jwt_audience",{"_index":545,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('jwt_issuer",{"_index":543,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('jwt_secret_key",{"_index":539,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('multiple_file_path",{"_index":589,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('node_emailer_from_email",{"_index":569,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('node_emailer_host",{"_index":561,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('node_emailer_password",{"_index":567,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('node_emailer_to_email",{"_index":571,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('node_emailer_user",{"_index":565,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('node_env",{"_index":476,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('profile_pic_file_path",{"_index":587,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('qr_image",{"_index":532,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('qr_image_path",{"_index":534,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('qr_image_path_salt",{"_index":536,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('sender_id",{"_index":578,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('sendgrid_api_key",{"_index":552,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('sms_provider_name",{"_index":574,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('temp_file_upload_url",{"_index":581,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('to_email",{"_index":556,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('tus_storage_driver",{"_index":529,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('welcome_email",{"_index":558,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.getnumber(\"database_port",{"_index":485,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.getnumber('jwt_expiration_time",{"_index":549,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.getnumber('jwt_expires_in_seconds",{"_index":547,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.getnumber('max_upload_file_size",{"_index":585,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.getnumber('node_emailer_port",{"_index":563,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.getnumber('port",{"_index":507,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.healthcheckservice.check",{"_index":201,"title":{},"body":{"controllers/AppController.html":{}}}],["this.module",{"_index":1141,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["this.nodeenv",{"_index":455,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.pages",{"_index":2011,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["this.pagesize",{"_index":2005,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["this.paginationservice.paginate",{"_index":843,"title":{},"body":{"injectables/CountriesService.html":{}}}],["this.paginationservice.paginate(selectquery",{"_index":772,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{}}}],["this.prisma.$queryrawunsafe(countquery",{"_index":2083,"title":{},"body":{"injectables/PaginationService.html":{}}}],["this.prisma.$queryrawunsafe(dataquery",{"_index":2082,"title":{},"body":{"injectables/PaginationService.html":{}}}],["this.prisma.$queryrawunsafe(finalcountquery",{"_index":2101,"title":{},"body":{"injectables/PaginationService.html":{}}}],["this.prisma.$transaction",{"_index":2081,"title":{},"body":{"injectables/PaginationService.html":{}}}],["this.prisma.executerawquery(this.query.delete",{"_index":1176,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["this.prisma.executerawquery(this.query.findbycode",{"_index":1149,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["this.prisma.executerawquery(this.query.findbycode(id",{"_index":1164,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["this.prisma.executerawquery(this.query.findbyid",{"_index":1180,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["this.prisma.executerawquery(this.query.insert",{"_index":1154,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["this.prisma.executerawquery(this.query.update",{"_index":1166,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["this.prismaservice.ishealthy",{"_index":202,"title":{},"body":{"controllers/AppController.html":{}}}],["this.query.pgbasequery",{"_index":1172,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["this.query.pgbaseselectfield",{"_index":1171,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["this.querybuilder.builddeletequery(deleteoptions",{"_index":2283,"title":{},"body":{"classes/Query-2.html":{}}}],["this.querybuilder.buildinsertquery(insertoptions",{"_index":2279,"title":{},"body":{"classes/Query-2.html":{}}}],["this.querybuilder.buildselectquery(selectoptions",{"_index":2276,"title":{},"body":{"classes/Query-2.html":{}}}],["this.querystatements",{"_index":2384,"title":{},"body":{"classes/UtilsService.html":{}}}],["this.s3",{"_index":1746,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["this.service.appinfo",{"_index":1905,"title":{},"body":{"controllers/HomeController.html":{}}}],["this.startindex",{"_index":2009,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["this.startpage",{"_index":2007,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["this.totalitems",{"_index":2003,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["this.totalpages",{"_index":2006,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["this.usersrepository.findmanywithpagination",{"_index":884,"title":{},"body":{"injectables/CountriesService.html":{}}}],["this.utilsservice.builddynamicquery",{"_index":770,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{}}}],["this.utilsservice.builddynamicquery(paginationquery",{"_index":776,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{}}}],["this.utilsservice.querystatements",{"_index":1175,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["those",{"_index":2611,"title":{},"body":{"index.html":{}}}],["through",{"_index":383,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/CurrenciesService.html":{},"modules/FilesModule.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"injectables/SortBy.html":{}}}],["throughout",{"_index":1882,"title":{},"body":{"modules/HelperModule.html":{}}}],["throw",{"_index":1150,"title":{},"body":{"injectables/CurrenciesService.html":{},"classes/FileNotImageException.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/UserNotFoundException.html":{}}}],["thrown",{"_index":43,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/FileNotImageException.html":{},"classes/HttpErrorFilter.html":{},"classes/QueryFailedFilter.html":{},"classes/UserNotFoundException.html":{}}}],["throws",{"_index":194,"title":{},"body":{"controllers/AppController.html":{},"injectables/CurrenciesService.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"miscellaneous/functions.html":{}}}],["time",{"_index":994,"title":{},"body":{"classes/Country.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{}}}],["timestamp",{"_index":76,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["timezone",{"_index":754,"title":{},"body":{"injectables/CountriesService.html":{},"classes/Country.html":{}}}],["timezones.ts",{"_index":2448,"title":{},"body":{"coverage.html":{}}}],["to_email",{"_index":555,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/ISendGridConfig.html":{}}}],["together",{"_index":685,"title":{},"body":{"modules/CountriesModule.html":{},"modules/CurrenciesModule.html":{}}}],["tolowercase",{"_index":1696,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["tonumber",{"_index":1799,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["tool/linter",{"_index":2437,"title":{},"body":{"contributing.html":{}}}],["tools",{"_index":2622,"title":{},"body":{"index.html":{}}}],["toplainonly",{"_index":1199,"title":{},"body":{"classes/Currency.html":{},"classes/FileType.html":{}}}],["tort",{"_index":2797,"title":{},"body":{"license.html":{}}}],["total",{"_index":1833,"title":{},"body":{"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/SortByDto.html":{}}}],["total[0",{"_index":2086,"title":{},"body":{"injectables/PaginationService.html":{}}}],["total[0].count",{"_index":2102,"title":{},"body":{"injectables/PaginationService.html":{}}}],["totalitems",{"_index":912,"title":{},"body":{"injectables/CountriesService.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{}}}],["totalpages",{"_index":1967,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{}}}],["transaction",{"_index":2150,"title":{},"body":{"injectables/PrismaService.html":{}}}],["transactional",{"_index":2152,"title":{},"body":{"injectables/PrismaService.html":{}}}],["transactions",{"_index":2134,"title":{},"body":{"injectables/PrismaService.html":{}}}],["transfer",{"_index":936,"title":{},"body":{"classes/Country.html":{},"classes/CreateDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileUploadDto.html":{},"classes/UpdateDto.html":{}}}],["transform",{"_index":1040,"title":{},"body":{"classes/CreateDto.html":{},"classes/FileType.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"miscellaneous/functions.html":{}}}],["transform(uppercasetransformer",{"_index":1047,"title":{},"body":{"classes/CreateDto.html":{}}}],["transform(uppercasetransformer)@isdefined()@isnotempty()@isstring()@maxlength(3)@apiproperty({type",{"_index":1014,"title":{},"body":{"classes/CreateDto.html":{}}}],["transformation",{"_index":1004,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["transformed",{"_index":1184,"title":{},"body":{"classes/Currency.html":{}}}],["transformer",{"_index":1008,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/FileType.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["transforming",{"_index":1009,"title":{},"body":{"classes/CreateDto.html":{},"classes/FileType.html":{},"miscellaneous/functions.html":{}}}],["transforms",{"_index":1501,"title":{},"body":{"classes/FileType.html":{},"miscellaneous/functions.html":{}}}],["true",{"_index":232,"title":{},"body":{"modules/AppModule.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"injectables/CountriesService.html":{},"classes/Currency.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/FileType.html":{},"injectables/FilesLocalService.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"injectables/HomeService.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PrismaService.html":{},"classes/QueryCountryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{}}}],["true})@isnotempty()@isstring",{"_index":1787,"title":{},"body":{"classes/FilterQueryDto.html":{}}}],["true})@type(undefined",{"_index":2041,"title":{},"body":{"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{}}}],["try",{"_index":284,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/QueryFailedFilter.html":{}}}],["tus_storage_driver",{"_index":528,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IAwsConfig.html":{}}}],["two",{"_index":2580,"title":{},"body":{"miscellaneous/functions.html":{}}}],["type",{"_index":31,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["type/database",{"_index":1377,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["typealiases",{"_index":2810,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":1250,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"injectables/PrismaService.html":{},"interfaces/QueryOptions.html":{}}}],["typeorm",{"_index":2301,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["typeormconfig",{"_index":478,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["typeormmoduleoptions",{"_index":479,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["types",{"_index":1802,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"classes/UpdateDto.html":{},"miscellaneous/enumerations.html":{}}}],["types,@typescript",{"_index":1859,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["typescript",{"_index":346,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"injectables/CountriesService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/FileNotImageException.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"classes/HttpErrorFilter.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/Query.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"index.html":{},"properties.html":{}}}],["tz${0",{"_index":757,"title":{},"body":{"injectables/CountriesService.html":{}}}],["tz${index",{"_index":803,"title":{},"body":{"injectables/CountriesService.html":{}}}],["tz${index}.id_timezone",{"_index":804,"title":{},"body":{"injectables/CountriesService.html":{}}}],["tz${index}.offset",{"_index":827,"title":{},"body":{"injectables/CountriesService.html":{}}}],["tz${index}.offset_in_minutes",{"_index":828,"title":{},"body":{"injectables/CountriesService.html":{}}}],["tz${index}.text",{"_index":829,"title":{},"body":{"injectables/CountriesService.html":{}}}],["tz${index}.value",{"_index":826,"title":{},"body":{"injectables/CountriesService.html":{}}}],["ui",{"_index":2583,"title":{},"body":{"miscellaneous/functions.html":{}}}],["unauthorized",{"_index":1350,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["undefined",{"_index":473,"title":{},"body":{"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/CurrenciesController.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"miscellaneous/typealiases.html":{}}}],["undefined})@apifile()@useinterceptors(undefined",{"_index":1558,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["undefined})@isenum(paginationtype)@isoptional",{"_index":2048,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["under",{"_index":1654,"title":{},"body":{"controllers/FilesS3Controller.html":{}}}],["unique",{"_index":977,"title":{},"body":{"classes/Country.html":{},"classes/Currency.html":{},"classes/FileType.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["unit",{"_index":2690,"title":{},"body":{"index.html":{}}}],["united",{"_index":1847,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["unknown",{"_index":62,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/FilesS3PresignedController.html":{}}}],["unnamed",{"_index":2506,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["unprocessableentityexception",{"_index":1618,"title":{},"body":{"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{}}}],["unsupported",{"_index":1747,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["unused",{"_index":348,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{},"classes/UtilsService.html":{}}}],["up",{"_index":112,"title":{},"body":{"modules/ApiModule.html":{},"controllers/AppController.html":{},"classes/CreateDto.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/PrismaService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["update",{"_index":1055,"title":{},"body":{"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{},"classes/UpdateDto.html":{},"index.html":{}}}],["update(id",{"_index":1077,"title":{},"body":{"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{}}}],["updated",{"_index":1082,"title":{},"body":{"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"changelog.html":{}}}],["updated[0]?.updatedid",{"_index":1167,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["updatedid",{"_index":2265,"title":{},"body":{"classes/Query-2.html":{}}}],["updatedto",{"_index":1078,"title":{"classes/UpdateDto.html":{}},"body":{"controllers/CurrenciesController.html":{},"classes/UpdateDto.html":{},"coverage.html":{}}}],["updates",{"_index":1138,"title":{},"body":{"injectables/CurrenciesService.html":{},"classes/UpdateDto.html":{}}}],["updating",{"_index":1116,"title":{},"body":{"injectables/CurrenciesService.html":{},"classes/Query-2.html":{},"classes/UpdateDto.html":{}}}],["upload",{"_index":1480,"title":{},"body":{"classes/FileResponseDto-2.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{}}}],["upload.service",{"_index":1575,"title":{},"body":{"controllers/FilesLocalController.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["upload.service.ts",{"_index":2499,"title":{},"body":{"coverage.html":{}}}],["uploaded",{"_index":1451,"title":{},"body":{"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3Service.html":{}}}],["uploadedfile",{"_index":1560,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["uploader",{"_index":1636,"title":{},"body":{"modules/FilesModule.html":{}}}],["uploadfile",{"_index":1546,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{}}}],["uploadfile(@body",{"_index":1722,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["uploadfile(@uploadedfile",{"_index":1590,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["uploadfile(file",{"_index":1553,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{}}}],["uploadfileconfig",{"_index":579,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["uploading",{"_index":1487,"title":{},"body":{"classes/FileResponseDto-2.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesService.html":{}}}],["uploads",{"_index":1426,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileNotImageException.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["uploadsignedurl",{"_index":1483,"title":{},"body":{"classes/FileResponseDto-2.html":{},"injectables/FilesS3PresignedService.html":{}}}],["uppercase",{"_index":1018,"title":{},"body":{"classes/CreateDto.html":{}}}],["uppercasetransformer",{"_index":1044,"title":{},"body":{"classes/CreateDto.html":{},"coverage.html":{}}}],["url",{"_index":1359,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"classes/HttpErrorFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{}}}],["urls",{"_index":1703,"title":{},"body":{"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["use",{"_index":866,"title":{},"body":{"injectables/CountriesService.html":{},"classes/FileNotImageException.html":{},"modules/FilesLocalModule.html":{},"modules/FilesS3PresignedModule.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"contributing.html":{},"index.html":{},"license.html":{}}}],["useclass",{"_index":138,"title":{},"body":{"modules/ApiModule.html":{},"classes/HttpErrorFilter.html":{}}}],["used",{"_index":33,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"controllers/HomeController.html":{},"injectables/HomeService.html":{},"interfaces/IAppConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"classes/UpdateDto.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["usefactory",{"_index":1686,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["useful",{"_index":2826,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["useinterceptors",{"_index":1561,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["useinterceptors(fileinterceptor('file",{"_index":1663,"title":{},"body":{"controllers/FilesS3Controller.html":{}}}],["user",{"_index":1375,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"classes/UserNotFoundException.html":{},"index.html":{}}}],["usermodule",{"_index":2202,"title":{},"body":{"classes/Query.html":{}}}],["username",{"_index":486,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{}}}],["usernotfoundexception",{"_index":2360,"title":{"classes/UserNotFoundException.html":{}},"body":{"classes/UserNotFoundException.html":{},"coverage.html":{}}}],["usernotfoundexception('specific",{"_index":2364,"title":{},"body":{"classes/UserNotFoundException.html":{}}}],["users",{"_index":2203,"title":{},"body":{"classes/Query.html":{}}}],["uses",{"_index":150,"title":{},"body":{"controllers/AppController.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"classes/Currency.html":{},"classes/FileType.html":{},"controllers/HomeController.html":{},"classes/Query-2.html":{},"injectables/ResolvePromisesInterceptor.html":{},"miscellaneous/functions.html":{}}}],["using",{"_index":1120,"title":{},"body":{"injectables/CurrenciesService.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"modules/FilesLocalModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/HomeService.html":{},"index.html":{}}}],["utc",{"_index":989,"title":{},"body":{"classes/Country.html":{}}}],["utility",{"_index":1125,"title":{},"body":{"injectables/CurrenciesService.html":{},"modules/HelperModule.html":{},"classes/Query-1.html":{},"classes/UtilsService.html":{},"miscellaneous/typealiases.html":{}}}],["utilize",{"_index":1609,"title":{},"body":{"modules/FilesLocalModule.html":{}}}],["utilizes",{"_index":2068,"title":{},"body":{"injectables/PaginationService.html":{}}}],["utils/dto/infinity",{"_index":643,"title":{},"body":{"controllers/CountriesController.html":{}}}],["utils/dto/pagination",{"_index":625,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"injectables/PaginationService.html":{}}}],["utils/dto/pagination.dto",{"_index":627,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["utils/dto/pagination.meta.dto",{"_index":784,"title":{},"body":{"injectables/CountriesService.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{}}}],["utils/infinity",{"_index":645,"title":{},"body":{"controllers/CountriesController.html":{}}}],["utils/transformers/upper",{"_index":1045,"title":{},"body":{"classes/CreateDto.html":{}}}],["utils/types/deep",{"_index":1139,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["utils/types/pagination",{"_index":722,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["utils/validate",{"_index":435,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["utilsservice",{"_index":699,"title":{"classes/UtilsService.html":{}},"body":{"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"modules/HelperModule.html":{},"classes/UtilsService.html":{},"coverage.html":{},"overview.html":{}}}],["v1/${file.path",{"_index":1625,"title":{},"body":{"injectables/FilesLocalService.html":{}}}],["v1/countries?page=1&limit=10",{"_index":633,"title":{},"body":{"controllers/CountriesController.html":{}}}],["v1/countries?page=1&limit=10this",{"_index":615,"title":{},"body":{"controllers/CountriesController.html":{}}}],["v1/currencies",{"_index":1092,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["v1/currencies/:id_currency",{"_index":1096,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["v1/upload",{"_index":1581,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["v1/upload/s3",{"_index":1657,"title":{},"body":{"controllers/FilesS3Controller.html":{}}}],["val.trim",{"_index":835,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["valid",{"_index":317,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"miscellaneous/functions.html":{}}}],["validate",{"_index":323,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileUploadDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"miscellaneous/functions.html":{}}}],["validate(isvalidfield",{"_index":1824,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["validate(propertyvalue",{"_index":330,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["validate(sortby",{"_index":1843,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["validate(value",{"_index":362,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["validateconfig",{"_index":434,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["validateconfig(config",{"_index":2584,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validateconfig(process.env",{"_index":498,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["validated",{"_index":336,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{},"miscellaneous/functions.html":{}}}],["validateif",{"_index":408,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["validateif((envvalues",{"_index":448,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["validateif(envvalues",{"_index":1356,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["validatenested",{"_index":1779,"title":{},"body":{"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{}}}],["validatenested()@type(undefined",{"_index":2285,"title":{},"body":{"classes/QueryCountryDto.html":{}}}],["validatenested({each",{"_index":2040,"title":{},"body":{"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{}}}],["validates",{"_index":332,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"injectables/FilesS3Service.html":{},"injectables/SortBy.html":{},"miscellaneous/functions.html":{}}}],["validating",{"_index":2588,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validation",{"_index":249,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/CreateDto.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"injectables/SortBy.html":{},"miscellaneous/functions.html":{}}}],["validationarguments",{"_index":325,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["validationerror",{"_index":245,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["validationerror.children",{"_index":307,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["validationerror.children.length",{"_index":308,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["validationerrors",{"_index":251,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["validationoptions",{"_index":2570,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validator",{"_index":256,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"classes/CreateDto.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["validatorconstraint",{"_index":340,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["validatorconstraintinterface",{"_index":341,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["validators/filter.validator",{"_index":1836,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["vals",{"_index":1240,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["vals.join",{"_index":1247,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["value",{"_index":334,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/DynamicQueryBuilder.html":{},"classes/FileType.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query-2.html":{},"classes/QueryCountryDto.html":{},"interfaces/QueryOptions.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UtilsService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["value.split",{"_index":369,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["values",{"_index":832,"title":{},"body":{"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"injectables/HomeService.html":{},"injectables/PaginationService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{}}}],["values.join",{"_index":859,"title":{},"body":{"injectables/CountriesService.html":{},"classes/Query-2.html":{},"classes/UtilsService.html":{}}}],["var",{"_index":285,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["variable",{"_index":1379,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"coverage.html":{}}}],["variables",{"_index":213,"title":{},"body":{"modules/AppModule.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"index.html":{}}}],["various",{"_index":931,"title":{},"body":{"classes/Country.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"modules/FilesModule.html":{},"miscellaneous/functions.html":{}}}],["vars",{"_index":349,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{},"classes/UtilsService.html":{}}}],["verifying",{"_index":163,"title":{},"body":{"controllers/AppController.html":{}}}],["version",{"_index":180,"title":{},"body":{"controllers/AppController.html":{},"classes/EnvironmentVariablesValidator.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"index.html":{},"properties.html":{}}}],["version_neutral",{"_index":172,"title":{},"body":{"controllers/AppController.html":{}}}],["visual",{"_index":2661,"title":{},"body":{"index.html":{}}}],["void",{"_index":52,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/FilesS3Service.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/QueryFailedFilter.html":{},"miscellaneous/functions.html":{}}}],["vscode",{"_index":2668,"title":{},"body":{"index.html":{}}}],["w",{"_index":379,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["warranties",{"_index":2783,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":2779,"title":{},"body":{"license.html":{}}}],["way",{"_index":2594,"title":{},"body":{"index.html":{}}}],["welcome",{"_index":2408,"title":{},"body":{"contributing.html":{}}}],["welcome_email",{"_index":557,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/ISendGridConfig.html":{}}}],["went",{"_index":1158,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["whereclause",{"_index":1255,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["whereclauses",{"_index":795,"title":{},"body":{"injectables/CountriesService.html":{},"classes/DynamicQueryBuilder.html":{},"injectables/PaginationService.html":{},"interfaces/QueryOptions.html":{}}}],["whereclauses.join",{"_index":1257,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["whereclauses.length",{"_index":1256,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["whereclauses.push",{"_index":1254,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["whereclauses.push(`${filter.field",{"_index":907,"title":{},"body":{"injectables/CountriesService.html":{}}}],["whether",{"_index":1348,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"license.html":{}}}],["windows",{"_index":2684,"title":{},"body":{"index.html":{}}}],["within",{"_index":1650,"title":{},"body":{"modules/FilesModule.html":{},"modules/HelperModule.html":{},"injectables/ResolvePromisesInterceptor.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["without",{"_index":1883,"title":{},"body":{"modules/HelperModule.html":{},"license.html":{}}}],["working",{"_index":1947,"title":{},"body":{"interfaces/IAppConfig.html":{}}}],["workingdirectory",{"_index":500,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"interfaces/IAppConfig.html":{}}}],["worry",{"_index":2609,"title":{},"body":{"index.html":{}}}],["writable",{"_index":2065,"title":{},"body":{"classes/PaginationResponseDto.html":{}}}],["wrong",{"_index":1159,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["x",{"_index":2100,"title":{},"body":{"injectables/PaginationService.html":{},"injectables/PrismaService.html":{}}}],["yarn",{"_index":2444,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["yarnrunning",{"_index":2687,"title":{},"body":{"index.html":{}}}],["yes",{"_index":1449,"title":{},"body":{"classes/FileNotImageException.html":{},"classes/Query-2.html":{},"classes/UserNotFoundException.html":{},"miscellaneous/functions.html":{}}}],["you'd",{"_index":2741,"title":{},"body":{"index.html":{}}}],["you're",{"_index":2628,"title":{},"body":{"index.html":{}}}],["yourproject",{"_index":2660,"title":{},"body":{"index.html":{}}}],["yourself",{"_index":2612,"title":{},"body":{"index.html":{}}}],["yu",{"_index":2678,"title":{},"body":{"index.html":{}}}],["yzhang.markdown",{"_index":2677,"title":{},"body":{"index.html":{}}}],["zhang",{"_index":2679,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":104,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/CountriesModule.html":{},"modules/CurrenciesModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AllExceptionsFilter.html":{"url":"classes/AllExceptionsFilter.html","title":"class - AllExceptionsFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllExceptionsFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/all-exceptions.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                A global exception filter to catch and handle all exceptions.\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                reflector\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/all-exceptions.filter.ts:47\n                            \n                        \n\n                \n                    \n                            Creates an instance of AllExceptionsFilter.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe reflector instance used for metadata reflection.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        reflector\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Reflector\n\n                    \n                \n                    \n                        \n                                Defined in src/core/filters/all-exceptions.filter.ts:54\n                        \n                    \n\n            \n                \n                    \nThe reflector instance used for metadata reflection.\n\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/filters/all-exceptions.filter.ts:63\n                        \n                    \n\n\n            \n                \n                        Catches and handles exceptions thrown by the application.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe exception that was thrown.\n\n\n                                            \n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe execution context that contains request and response objects.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ExceptionFilter, Catch, ArgumentsHost, HttpException, HttpStatus } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n\nimport { Request, Response } from 'express';\n\n/**\n * A global exception filter to catch and handle all exceptions.\n *\n * @class\n * @implements {ExceptionFilter}\n */\n\n@Catch()\nexport class AllExceptionsFilter implements ExceptionFilter {\n    /**\n     * Creates an instance of AllExceptionsFilter.\n     *\n     * @param {Reflector} reflector - The reflector instance used for metadata reflection.\n     */\n\n    constructor(public reflector: Reflector) {}\n\n    /**\n     * Catches and handles exceptions thrown by the application.\n     *\n     * @param {unknown} exception - The exception that was thrown.\n     * @param {ArgumentsHost} host - The execution context that contains request and response objects.\n     */\n\n    catch(exception: unknown, host: ArgumentsHost) {\n        console.log('ALL EXEPTION from filter', exception);\n        const ctx = host.switchToHttp();\n        const response = ctx.getResponse();\n        const request = ctx.getRequest();\n        const status =\n            exception instanceof HttpException\n                ? exception.getStatus()\n                : HttpStatus.INTERNAL_SERVER_ERROR;\n\n        const errorResponse = {\n            statusCode: status,\n            timestamp: new Date().toISOString(),\n            path: request.url,\n            message: (exception as any).message || 'Internal server error',\n        };\n\n        response.status(status).json(errorResponse);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ApiModule.html":{"url":"modules/ApiModule.html","title":"module - ApiModule","body":"\n                   \n\n\n\n\n    Modules\n    ApiModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ApiModule\n\n\n\ncluster_ApiModule_imports\n\n\n\n\nCountriesModule\n\nCountriesModule\n\n\n\nApiModule\n\nApiModule\n\nApiModule -->\n\nCountriesModule->ApiModule\n\n\n\n\n\nCurrenciesModule\n\nCurrenciesModule\n\nApiModule -->\n\nCurrenciesModule->ApiModule\n\n\n\n\n\nFilesModule\n\nFilesModule\n\nApiModule -->\n\nFilesModule->ApiModule\n\n\n\n\n\nHomeModule\n\nHomeModule\n\nApiModule -->\n\nHomeModule->ApiModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/api.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            This file contains the ApiModule class, which aggregates several feature modules and sets up a global HTTP error filter.\nThe ApiModule class is responsible for importing feature-specific modules and configuring a global HTTP error filter.\nIt serves as an aggregate module for the API-related functionalities of the application.\n\n        \n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            CountriesModule\n                        \n                        \n                            CurrenciesModule\n                        \n                        \n                            FilesModule\n                        \n                        \n                            HomeModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { APP_FILTER } from '@nestjs/core';\n\nimport { HttpErrorFilter } from '@core/exceptions/http-error.filter';\n\nimport { CountriesModule } from './countries/countries.module';\nimport { CurrenciesModule } from './currencies/currencies.module';\nimport { FilesModule } from './files/files.module';\nimport { HomeModule } from './home/home.module';\n\n/**\n * @fileoverview\n * This file contains the `ApiModule` class, which aggregates several feature modules and sets up a global HTTP error filter.\n *\n * @module\n * @description\n * The `ApiModule` class is responsible for importing feature-specific modules and configuring a global HTTP error filter.\n * It serves as an aggregate module for the API-related functionalities of the application.\n */\n\n@Module({\n    imports: [\n        /**\n         * Module responsible for managing country-related functionalities.\n         */\n        CountriesModule,\n\n        /**\n         * Module responsible for managing currency-related functionalities.\n         */\n        CurrenciesModule,\n\n        /**\n         * Module responsible for managing file-related functionalities.\n         */\n        FilesModule,\n\n        /**\n         * Module responsible for managing home-related functionalities.\n         */\n        HomeModule,\n    ],\n    providers: [\n        {\n            provide: APP_FILTER,\n            useClass: HttpErrorFilter,\n        },\n    ],\n})\nexport class ApiModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/app.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                This file contains the AppController class, which provides health check endpoints for the application.\nThe AppController is responsible for handling HTTP requests related to the application's health status.\nIt uses @nestjs/terminus for health checks and PrismaService to check the database connection status.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Public\n                                    Async\n                                getHealth\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Async\n                        getHealth\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHealth()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/health')@HealthCheck()\n                \n            \n\n                    \n                        \n                            Defined in src/app/app.controller.ts:63\n                        \n                    \n\n\n            \n                \n                        Health check endpoint.\nThis endpoint performs a health check by verifying the status of the database connection.\nThe result of the health check is returned in the response.\nExample :// Example response\n{\n  \"status\": \"ok\",\n  \"info\": {\n    \"prisma\": \"up\"\n  },\n  \"error\": {},\n  \"details\": {}\n}\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves with the health check result.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common'; // VERSION_NEUTRAL\nimport { ApiTags } from '@nestjs/swagger';\nimport { HealthCheck, HealthCheckService } from '@nestjs/terminus';\n\nimport { PrismaService } from '@services/prisma.service';\n// import { PublicRoute } from 'src/core/decorators/public.request.decorator';\n\n// @Controller({\n//     version: VERSION_NEUTRAL,\n//     path: '/',\n// })\n\n/**\n * @fileoverview\n * This file contains the `AppController` class, which provides health check endpoints for the application.\n *\n * @module\n * @description\n * The `AppController` is responsible for handling HTTP requests related to the application's health status.\n * It uses `@nestjs/terminus` for health checks and `PrismaService` to check the database connection status.\n */\n\n@ApiTags('Health') // Tags the controller for Swagger API documentation\n@Controller() // Decorates the class as a NestJS controller\nexport class AppController {\n    /**\n     * Creates an instance of `AppController`.\n     *\n     * @param {HealthCheckService} healthCheckService - Service for performing health checks.\n     * @param {PrismaService} prismaService - Service for interacting with the Prisma ORM.\n     */\n    constructor(\n        private readonly healthCheckService: HealthCheckService,\n        private readonly prismaService: PrismaService\n    ) {}\n\n    /**\n     * Health check endpoint.\n     *\n     * @route GET /health\n     * @returns {Promise} A promise that resolves with the health check result.\n     * @throws {BadRequestException} If the health check fails.\n     *\n     * @description\n     * This endpoint performs a health check by verifying the status of the database connection.\n     * The result of the health check is returned in the response.\n     *\n     * @example\n     * // Example response\n     * {\n     *   \"status\": \"ok\",\n     *   \"info\": {\n     *     \"prisma\": \"up\"\n     *   },\n     *   \"error\": {},\n     *   \"details\": {}\n     * }\n     */\n\n    @Get('/health') // Route to handle GET requests at /health\n    @HealthCheck() // Decorator to indicate that this is a health check endpoint\n    // @PublicRoute()\n    public async getHealth(): Promise {\n        return this.healthCheckService.check([() => this.prismaService.isHealthy()]);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nApiModule\n\nApiModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nApiModule->AppModule\n\n\n\n\n\nHelperModule\n\nHelperModule\n\nAppModule -->\n\nHelperModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            This file contains the AppModule class, which is the root module of the NestJS application.\nThe AppModule class is responsible for importing and configuring the core modules of the application.\nIt includes configuration for environment variables, database connections, and health checks.\n\n        \n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ApiModule\n                        \n                        \n                            HelperModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { TerminusModule } from '@nestjs/terminus';\n\n// import * as dotenv from 'dotenv';\n\nimport { HelperModule } from '@common/helper/helper.module';\nimport appConfig from '@config/app.config';\nimport databaseConfig from '@config/database.config';\nimport fileConfig from '@config/file.config';\n\nimport { ApiModule } from '../modules/api.module';\n\nimport { AppController } from './app.controller';\n\nconst ENV = process.env.NODE_ENV;\n\n/**\n * @fileoverview\n * This file contains the `AppModule` class, which is the root module of the NestJS application.\n *\n * @module\n * @description\n * The `AppModule` class is responsible for importing and configuring the core modules of the application.\n * It includes configuration for environment variables, database connections, and health checks.\n */\n\n@Module({\n    controllers: [AppController],\n    imports: [\n        ConfigModule.forRoot({\n            isGlobal: true,\n            load: [appConfig, databaseConfig, fileConfig],\n            envFilePath: !ENV ? '.env' : `.env.${ENV}`,\n        }),\n        ApiModule,\n        TerminusModule,\n        HelperModule,\n    ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BadRequestExceptionFilter.html":{"url":"classes/BadRequestExceptionFilter.html","title":"class - BadRequestExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BadRequestExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/bad-request.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                A custom exception filter to handle BadRequestException specifically.\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                reflector\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _validationFilter\n                            \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/bad-request.filter.ts:27\n                            \n                        \n\n                \n                    \n                            Creates an instance of BadRequestExceptionFilter.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe reflector instance used for metadata reflection.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        reflector\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Reflector\n\n                    \n                \n                    \n                        \n                                Defined in src/core/filters/bad-request.filter.ts:34\n                        \n                    \n\n            \n                \n                    \nThe reflector instance used for metadata reflection.\n\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _validationFilter\n                        \n                    \n                \n            \n            \n                \n                        \n                    _validationFilter(validationErrors: ValidationError[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/filters/bad-request.filter.ts:93\n                        \n                    \n\n\n            \n                \n                        Filters and formats validation errors.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                validationErrors\n                                            \n                                                        ValidationError[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nArray of validation errors.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                Formatted validation errors.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: BadRequestException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/filters/bad-request.filter.ts:43\n                        \n                    \n\n\n            \n                \n                        Catches and handles BadRequestException thrown by the application.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                        BadRequestException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe BadRequestException that was thrown.\n\n\n                                            \n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe execution context that contains request and response objects.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { STATUS_CODES } from 'http';\n\nimport {\n    ArgumentsHost,\n    BadRequestException,\n    Catch,\n    ExceptionFilter,\n    // HttpStatus,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n\nimport { ValidationError } from 'class-validator';\nimport { Response } from 'express';\nimport * as _ from 'lodash';\n\n// import { PgSQLService } from \"../common/shared/services/pgsql.service\";\n// import { Query } from './query';\n\n/**\n * A custom exception filter to handle BadRequestException specifically.\n *\n * @class\n * @implements {ExceptionFilter}\n */\n\n@Catch(BadRequestException)\nexport class BadRequestExceptionFilter implements ExceptionFilter {\n    /**\n     * Creates an instance of BadRequestExceptionFilter.\n     *\n     * @param {Reflector} reflector - The reflector instance used for metadata reflection.\n     */\n\n    constructor(public reflector: Reflector) {}\n\n    /**\n     * Catches and handles BadRequestException thrown by the application.\n     *\n     * @param {BadRequestException} exception - The BadRequestException that was thrown.\n     * @param {ArgumentsHost} host - The execution context that contains request and response objects.\n     */\n\n    catch(exception: BadRequestException, host: ArgumentsHost) {\n        console.log('BAD REQUREST from fil');\n        const ctx = host.switchToHttp();\n        const response = ctx.getResponse();\n        // const request = ctx.getRequest();\n        const statusCode = exception.getStatus();\n        const r = exception.getResponse();\n\n        if (_.isArray(r.message) && r.message[0] instanceof ValidationError) {\n            const validationErrors = r.message;\n            r.error = this._validationFilter(validationErrors);\n        }\n\n        //put api logic here to fetch from db is erro code found\n        r.statusCode = statusCode;\n        r.message = STATUS_CODES[statusCode];\n\n        response.status(statusCode).json(r);\n\n        // try {\n        //   var sqlService = new PgSQLService();\n        //   var query = new Query();\n        //   var reqstr = JSON.stringify(_.clone(request.body));\n        //   var resstr = JSON.stringify(_.clone(r));\n        //   sqlService.run(\n        //     query.addQueryError(\"BadRequest\", request.method, request.url, reqstr, resstr)\n        //   );\n        // } catch (error) {}\n\n        // try {\n        //   var sqlService = new PgSQLService();\n        //   var query = new Query();\n        //   const reqstrobj = { body: _.clone(request.body), header: _.clone(request.header) };\n        //   var reqstr = JSON.stringify(reqstrobj);\n\n        //   const resstrobj = { res: _.clone(r), exception: exception.stack };\n        //   var resstr = JSON.stringify(resstrobj);\n        //   sqlService.run(\n        //     query.addQueryError(\"BadRequest\", request.method, request.url, reqstr, resstr)\n        //   );\n        // } catch (error) {}\n    }\n\n    /**\n     * Filters and formats validation errors.\n     *\n     * @param {ValidationError[]} validationErrors - Array of validation errors.\n     * @returns {object} Formatted validation errors.\n     */\n\n    private _validationFilter(validationErrors: ValidationError[]) {\n        const errorMessages = {};\n\n        for (const validationError of validationErrors) {\n            if (validationError.children && validationError.children.length > 0) {\n                const nestedErrorMessage = {};\n                for (let i = 0; i \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CommaSeparated.html":{"url":"injectables/CommaSeparated.html","title":"injectable - CommaSeparated","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CommaSeparated\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/filter.validator.ts\n        \n\n\n            \n                Description\n            \n            \n                Custom validator for checking if a string is a valid comma-separated list of numbers.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/validators/filter.validator.ts:47\n                        \n                    \n\n\n            \n                \n                        Default error message when validation fails.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe validation arguments.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \nThe error message.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(propertyValue: string, args: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/validators/filter.validator.ts:28\n                        \n                    \n\n\n            \n                \n                        Validates if the given value is a comma-separated list of numbers.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                propertyValue\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe value to be validated.\n\n\n                                            \n                                        \n                                        \n                                                args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe validation arguments.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \nReturns true if valid; otherwise, false.\n\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\nimport {\n    ValidatorConstraint,\n    ValidatorConstraintInterface,\n    ValidationArguments,\n} from 'class-validator';\n\n/**\n * Custom validator for checking if a string is a valid comma-separated list of numbers.\n *\n * @export\n * @class CommaSeparated\n * @implements {ValidatorConstraintInterface}\n */\n@Injectable()\n@ValidatorConstraint({ name: 'CommaSeparated', async: false })\nexport class CommaSeparated implements ValidatorConstraintInterface {\n    /**\n     * Validates if the given value is a comma-separated list of numbers.\n     *\n     * @param {string} propertyValue - The value to be validated.\n     * @param {ValidationArguments} args - The validation arguments.\n     * @returns {boolean} - Returns true if valid; otherwise, false.\n     */\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    validate(propertyValue: string, args: ValidationArguments): boolean {\n        //\n        //\n        const isValid = /^[0-9]+(,[0-9]+)*$/.test(propertyValue);\n\n        if (isValid) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Default error message when validation fails.\n     *\n     * @param {ValidationArguments} args - The validation arguments.\n     * @returns {string} - The error message.\n     */\n\n    defaultMessage(args: ValidationArguments): string {\n        return `Invalid ${args.property}`;\n    }\n}\n\n/**\n * Custom validator for checking if a string is in the correct \"field direction\" format.\n *\n * @export\n * @class SortBy\n * @implements {ValidatorConstraintInterface}\n */\n@Injectable()\n@ValidatorConstraint({ name: 'SortBy', async: false })\nexport class SortBy implements ValidatorConstraintInterface {\n    /**\n     * Validates if the given value is in the format of \"field direction\" where direction is \"ASC\" or \"DESC\".\n     *\n     * @param {string} value - The value to be validated.\n     * @param {ValidationArguments} args - The validation arguments.\n     * @returns {boolean} - Returns true if valid; otherwise, false.\n     */\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    validate(value: string, args: ValidationArguments): boolean {\n        // Split the input by spaces and validate each pair\n        const parts = value.split(' ');\n\n        // Ensure pairs of field direction (e.g., field direction, field direction, ...)\n        if (parts.length % 2 !== 0) {\n            return false;\n        }\n\n        // Regular expression to match valid field direction\n        const fieldRegex = /^[\\w]+$/;\n        const directionRegex = /^(ASC|DESC|asc|desc|Asc|Desc)$/;\n\n        // Iterate through pairs and validate\n        for (let i = 0; i \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConfigService.html":{"url":"classes/ConfigService.html","title":"class - ConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/helper/services/config.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                get\n                            \n                            \n                                    Public\n                                getBoolean\n                            \n                            \n                                    Public\n                                getNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    nodeEnv\n                                \n                                \n                                    prismaConfig\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/helper/services/config.service.ts:72\n                            \n                        \n\n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        get\n                        \n                    \n                \n            \n            \n                \n                        \n                    get(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/helper/services/config.service.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getBoolean\n                        \n                    \n                \n            \n            \n                \n                        \n                    getBoolean(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/helper/services/config.service.ts:101\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getNumber\n                        \n                    \n                \n            \n            \n                \n                        \n                    getNumber(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/helper/services/config.service.ts:97\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        nodeEnv\n                    \n                \n\n                \n                    \n                        getnodeEnv()\n                    \n                \n                            \n                                \n                                    Defined in src/common/helper/services/config.service.ts:105\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        prismaConfig\n                    \n                \n\n                \n                    \n                        getprismaConfig()\n                    \n                \n                            \n                                \n                                    Defined in src/common/helper/services/config.service.ts:139\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { IsEnum, IsInt, IsOptional, IsString, ValidateIf, IsUrl, Max, Min } from 'class-validator';\nimport * as dotenv from 'dotenv';\n\n// import { FileDriver } from '../../../core/enum/file.type';\nimport { IAppConfig } from '../../../core/interfaces/app.interfaces';\nimport { IAwsConfig } from '../../../core/interfaces/aws.interfaces';\nimport { IFileConfig } from '../../../core/interfaces/file.interfaces';\nimport { IJWTConfig } from '../../../core/interfaces/jwt.interfaces';\nimport { INodeEmailerConfig } from '../../../core/interfaces/node-emailer.interfaces';\n// import { IPostgreSQLConfig } from '../../../core/interfaces/postgres.interfaces';\nimport { ISendGridConfig } from '../../../core/interfaces/sendgrid.interfaces';\nimport { ISMSConfig } from '../../../core/interfaces/sms.interfaces';\nimport { IUploadFileConfig } from '../../../core/interfaces/upload-file.interfaces';\nimport validateConfig from '../../../utils/validate-config';\n\n/**\n * Config service\n * @export\n * @class ConfigService\n */\n\nclass EnvVarAppConfigValidator {\n    @IsInt()\n    @Min(0)\n    @Max(65535)\n    @IsOptional()\n    APP_PORT: number;\n\n    @IsUrl({ require_tld: false })\n    @IsOptional()\n    FRONTEND_DOMAIN: string;\n\n    @IsUrl({ require_tld: false })\n    @IsOptional()\n    BACKEND_DOMAIN: string;\n\n    @IsString()\n    @IsOptional()\n    API_PREFIX: string;\n}\n\n// class EnvVarFileConfigValidator {\n//     // @IsEnum(FileDriver)\n//     // FILE_DRIVER: FileDriver;\n\n//     // @ValidateIf((envValues) =>\n//     //     [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n//     // )\n//     // @IsString()\n//     // AWS_ACCESS_KEY_ID: string;\n\n//     // @ValidateIf((envValues) =>\n//     //     [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n//     // )\n//     // @IsString()\n//     // AWS_SECRET_ACCESS_KEY: string;\n\n//     // @ValidateIf((envValues) =>\n//     //     [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n//     // )\n//     // @IsString()\n//     // AWS_DEFAULT_S3_BUCKET: string;\n\n//     // @ValidateIf((envValues) =>\n//     //     [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n//     // )\n//     @IsString()\n//     AWS_S3_REGION: string;\n// }\n\nexport class ConfigService {\n    constructor() {\n        const nodeEnv = this.nodeEnv;\n        // dotenv.config({\n        //   path: nodeEnv === \"production\" ? \".env\" : `.env.${nodeEnv}`,\n        // });\n        dotenv.config({\n            path:\n                nodeEnv === 'production'\n                    ? '.env.staging'\n                    : nodeEnv === 'staging'\n                      ? '.env.staging'\n                      : '.env.development',\n        });\n\n        // // Replace \\\\n with \\n to support multiline strings in AWS\n        // for (const envName of Object.keys(process.env)) {\n        //   process.env[envName] = process.env[envName].replace(/\\\\n/g, \"\\n\");\n        // }\n    }\n\n    public get(key: string): string {\n        return process.env[key] || 'undefined';\n    }\n\n    public getNumber(key: string): number {\n        return Number(this.get(key));\n    }\n\n    public getBoolean(key: string): boolean {\n        return Boolean(this.get(key));\n    }\n\n    get nodeEnv(): string {\n        return this.get('NODE_ENV') || 'development';\n    }\n\n    // get typeOrmConfig(): TypeOrmModuleOptions {\n    //   const dbConfig = {\n    //     // eslint-disable-next-line @typescript-eslint/prefer-as-const\n    //     type: \"mysql\" as \"mysql\",\n    //     host: this.get(\"DATABASE_HOST\"),\n    //     port: this.getNumber(\"DATABASE_PORT\"),\n    //     username: this.get(\"DATABASE_USER\"),\n    //     password: this.get(\"DATABASE_PASS\"),\n    //     database: this.get(\"DATABASE_SCHEMA\"),\n    //     authSource: \"admin\",\n    //     synchronize: true,\n    //     multipleStatements: true,\n    //     entities: [\"src/**/**.entity{.ts,.js}\"],\n    //     bigNumberStrings: false,\n    //   };\n    //   return dbConfig;\n    // }\n\n    // get appConfig(): IAppConfig {\n    //     validateConfig(process.env, EnvVarAppConfigValidator);\n    //     return {\n    //         name: this.get('APP_NAME') || '',\n    //         workingDirectory: process.env.PWD || process.cwd(),\n    //         frontendDomain: this.get('FRONTEND_DOMAIN') || '',\n    //         backendDomain: this.get('BACKEND_DOMAIN') || '',\n    //         port: this.getNumber('PORT'),\n    //         apiPrefix: this.get('API_PREFIX') || '',\n    //     };\n    // }\n\n    get prismaConfig(): string {\n        return `postgresql://${this.get('POSTGRES_USER')}:${this.get('POSTGRES_PASSWORD')}@${this.get('POSTGRES_HOST')}:${this.get('POSTGRES_PORT')}/${this.get('POSTGRES_NAME')}?connection_limit=${this.get('POSTGRES_CONNECTION_LIMIT')}&pool_timeout=${this.get('POSTGRES_POOL_TIMEOUT')}&schema=${this.get('POSTGRES_SCHEMA')}`;\n    }\n\n    // get awsS3Config(): IAwsConfig {\n    //     return {\n    //         AWS_S3_ACCESS_KEY_ID: this.get('AWS_S3_ACCESS_KEY_ID'),\n    //         AWS_S3_SECRET_ACCESS_KEY: this.get('AWS_S3_SECRET_ACCESS_KEY'),\n    //         AWS_S3_BUCKET_NAME: this.get('AWS_S3_BUCKET_NAME'),\n    //         AWS_S3_DEFAULT_REGION: this.get('AWS_S3_DEFAULT_REGION'),\n    //         AWS_S3_TEMP_DIRECTORY: this.get('AWS_S3_TEMP_DIRECTORY'),\n    //         AWS_S3_ENDPOINT: this.get('AWS_S3_ENDPOINT'),\n    //         AWS_S3_SERVER_HOST: this.get('AWS_S3_SERVER_HOST'),\n    //         AWS_S3_COMPANION_SECRET: this.get('AWS_S3_COMPANION_SECRET'),\n    //         TUS_STORAGE_DRIVER: this.get('TUS_STORAGE_DRIVER'),\n    //     };\n    // }\n\n    // get qrConfig() {\n    //     return {\n    //         QR_IMAGE: this.get('QR_IMAGE') || '',\n    //         QR_IMAGE_PATH: this.get('QR_IMAGE_PATH') || '',\n    //         QR_IMAGE_PATH_SALT: this.get('QR_IMAGE_PATH_SALT') || '',\n    //     };\n    // }\n\n    // get jwtConfig(): IJWTConfig {\n    //     return {\n    //         secret: this.get('JWT_SECRET_KEY'),\n    //         algorithm: this.get('JWT_ALGORITHM'),\n    //         issuer: this.get('JWT_ISSUER'),\n    //         audience: this.get('JWT_AUDIENCE'),\n    //         expiresInSeconds: this.getNumber('JWT_EXPIRES_IN_SECONDS'),\n    //         expirationTime: this.getNumber('JWT_EXPIRATION_TIME'),\n    //     };\n    // }\n\n    // get sendgridConfig(): ISendGridConfig {\n    //     return {\n    //         SENDGRID_API_KEY: this.get('SENDGRID_API_KEY'),\n    //         FROM_EMAIL: this.get('FROM_EMAIL'),\n    //         TO_EMAIL: this.get('TO_EMAIL'),\n    //         WELCOME_EMAIL: this.get('WELCOME_EMAIL'),\n    //     };\n    // }\n\n    // get nodeemailerConfig(): INodeEmailerConfig {\n    //     return {\n    //         NODE_EMAILER_HOST: this.get('NODE_EMAILER_HOST'),\n    //         NODE_EMAILER_PORT: this.getNumber('NODE_EMAILER_PORT'),\n    //         NODE_EMAILER_USER: this.get('NODE_EMAILER_USER'),\n    //         NODE_EMAILER_PASSWORD: this.get('NODE_EMAILER_PASSWORD'),\n    //         NODE_EMAILER_FROM_EMAIL: this.get('NODE_EMAILER_FROM_EMAIL'),\n    //         NODE_EMAILER_TO_EMAIL: this.get('NODE_EMAILER_TO_EMAIL'),\n    //     };\n    // }\n\n    // get smsConfig(): ISMSConfig {\n    //     return {\n    //         SMS_PROVIDER_NAME: this.get('SMS_PROVIDER_NAME'),\n    //         API_KEY: this.get('API_KEY'),\n    //         SENDER_ID: this.get('SENDER_ID'),\n    //     };\n    // }\n\n    // get uploadFileConfig(): IUploadFileConfig {\n    //     return {\n    //         TEMP_FILE_UPLOAD_URL: this.get('TEMP_FILE_UPLOAD_URL'),\n    //         FILE_UPLOAD_DESTINATION: this.get('FILE_UPLOAD_DESTINATION'),\n    //         MAX_UPLOAD_FILE_SIZE: this.getNumber('MAX_UPLOAD_FILE_SIZE'),\n    //         PROFILE_PIC_FILE_PATH: this.get('PROFILE_PIC_FILE_PATH'),\n    //         MULTIPLE_FILE_PATH: this.get('MULTIPLE_FILE_PATH'),\n    //     };\n    // }\n\n    // get fileConfig(): IFileConfig {\n    //     // validateConfig(process.env, EnvVarFileConfigValidator);\n    //     return {\n    //         driver: (this.get('FILE_DRIVER') as any | undefined) ?? undefined,\n    //         accessKeyId: this.get('AWS_ACCESS_KEY_ID'),\n    //         secretAccessKey: this.get('AWS_SECRET_ACCESS_KEY'),\n    //         awsDefaultS3Bucket: this.get('AWS_DEFAULT_S3_BUCKET'),\n    //         awsS3Region: this.get('AWS_S3_REGION'),\n    //         maxFileSize: 5242880, // 5mb\n    //     };\n    // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CountriesController.html":{"url":"controllers/CountriesController.html","title":"controller - CountriesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CountriesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/countries/countries.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                This file defines the CountriesController, which handles HTTP requests related to countries.\nThe CountriesController is responsible for handling requests to find and retrieve country information.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(query: PaginationQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('v1/countries')@HttpCode(HttpStatus.OK)@ApiOkResponse({type: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/countries/countries.controller.ts:43\n                        \n                    \n\n\n            \n                \n                        Find all countries\nExample :GET /v1/countries?page=1&limit=10This endpoint allows the client to retrieve a paginated list of countries.\nSee PaginationQueryDto\nSee PaginationResponseDto\nSee Country\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe pagination query parameters.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                A promise that resolves to a paginated response of countries.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query, HttpStatus, HttpCode } from '@nestjs/common';\nimport { ApiTags, ApiOkResponse } from '@nestjs/swagger';\n\nimport { PaginationResponse, PaginationResponseDto } from '@utils/dto/pagination-response.dto';\nimport { PaginationQueryDto } from '@utils/dto/pagination.dto';\n\nimport { CountriesService } from './countries.service';\nimport { Country } from './dto/country';\n\n/**\n * @fileoverview\n * This file defines the `CountriesController`, which handles HTTP requests related to countries.\n *\n * @module\n * @description\n * The `CountriesController` is responsible for handling requests to find and retrieve country information.\n */\n@ApiTags('Countries')\n@Controller()\nexport class CountriesController {\n    constructor(private readonly countriesService: CountriesService) {}\n\n    /***\n     * Find all countries\n     *\n     * @param {PaginationQueryDto} query - The pagination query parameters.\n     * @returns {Promise>} A promise that resolves to a paginated response of countries.\n     *\n     * @example\n     * GET /v1/countries?page=1&limit=10\n     *\n     * @description\n     * This endpoint allows the client to retrieve a paginated list of countries.\n     *\n     * @see PaginationQueryDto\n     * @see PaginationResponseDto\n     * @see Country\n     */\n\n    @Get('v1/countries')\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ type: PaginationResponse(Country) })\n    async findAll(@Query() query: PaginationQueryDto): Promise> {\n        const get_all = await this.countriesService.findAll(query);\n\n        return get_all;\n    }\n}\n\n// import { Controller, Get, Query, HttpStatus, HttpCode } from '@nestjs/common';\n// import { ApiTags, ApiOkResponse } from '@nestjs/swagger';\n\n// import {\n//     InfinityPaginationResponse,\n//     InfinityPaginationResponseDto,\n// } from '@utils/dto/infinity-pagination-response.dto';\n// import { infinityPagination } from '@utils/infinity-pagination';\n\n// import { CountriesService } from './countries.service';\n// import { Country } from './domain/country';\n// import { QueryCountryDto } from './dto/query-country.dto';\n\n// @ApiTags('Countries')\n// @Controller()\n// export class CountriesController {\n//     constructor(private readonly countriesService: CountriesService) {}\n\n//     /***\n//      * Find all countries\n//      */\n\n//     @Get('v1/countries')\n//     @HttpCode(HttpStatus.OK)\n//     @ApiOkResponse({\n//         type: InfinityPaginationResponse(Country),\n//     })\n//     async findAll(\n//         @Query() query: QueryCountryDto\n//     ): Promise> {\n//         console.log('HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHA');\n//         const page = query?.page ?? 1;\n//         let limit = query?.limit ?? 10;\n//         if (limit > 50) {\n//             limit = 50;\n//         }\n\n//         return infinityPagination(\n//             await this.countriesService.findManyWithPagination({\n//                 filterOptions: query?.filters,\n//                 sortOptions: query?.sort,\n//                 paginationOptions: {\n//                     page,\n//                     limit,\n//                 },\n//             }),\n//             { page, limit }\n//         );\n//     }\n// }\n\n// import { Controller, Get, Query, HttpStatus, HttpCode } from '@nestjs/common';\n// import { ApiTags, ApiOkResponse, ApiQuery } from '@nestjs/swagger';\n\n// // import {\n// //     InfinityPaginationResponse,\n// //     InfinityPaginationResponseDto,\n// // } from '@utils/dto/infinity-pagination-response.dto';\n// // import { infinityPagination } from '@utils/infinity-pagination';\n\n// import { ApiFilterQuery } from '@decorators/api.filter.query';\n// import {\n//     PaginationQueryDto,\n//     PaginatedResultDto,\n//     FilterQueryDto,\n//     // ApiFilterQuery,\n// } from '@utils/dto/pagination.dto';\n\n// // import { ApiNestedQuery } from '../../decorators/api-filter-query';\n\n// import { CountriesService } from './countries.service';\n// import { Country } from './domain/country';\n// // import { QueryCountryDto } from './dto/query-country.dto';\n\n// @ApiTags('Countries')\n// @Controller()\n// export class CountriesController {\n//     constructor(private readonly countriesService: CountriesService) {}\n\n//     /***\n//      * Find all countries\n//      */\n\n//     @Get('v1/countries')\n//     @HttpCode(HttpStatus.OK)\n//     // @ApiQuery({\n//     //     name: 'filters',\n//     //     required: false,\n//     //     type: String,\n//     //     description: 'Array of filter objects as a JSON string',\n//     //     example:\n//     //         '[{\"field\":\"name\",\"operator\":\"LIKE\",\"value\":\"John\"},{\"field\":\"age\",\"operator\":\">\",\"value\":\"30\"}]',\n//     // })\n//     // @ApiQuery({\n//     //     name: 'sort',\n//     //     required: false,\n//     //     type: String,\n//     //     description: 'Array of sort objects as a JSON string',\n//     //     example: '[{\"field\":\"name\",\"direction\":\"ASC\"},{\"field\":\"age\",\"direction\":\"DESC\"}]',\n//     // })\n//     // @ApiFilterQuery('filters', FilterQueryDto, 0)\n//     // @ApiFilterQuery('filters', FilterQueryDto, 1)\n//     @ApiOkResponse({ type: PaginatedResultDto })\n//     async findAll(\n//         @Query() paginationQuery: PaginationQueryDto\n//     ): Promise> {\n//         return this.countriesService.findAll(paginationQuery);\n//     }\n// }\n\n// // import { Controller, Get, Query, HttpStatus, HttpCode } from '@nestjs/common';\n// // import { ApiTags, ApiOkResponse } from '@nestjs/swagger';\n\n// // import {\n// //     InfinityPaginationResponse,\n// //     InfinityPaginationResponseDto,\n// // } from '@utils/dto/infinity-pagination-response.dto';\n// // import { infinityPagination } from '@utils/infinity-pagination';\n\n// // import { CountriesService } from './countries.service';\n// // import { Country } from './domain/country';\n// // import { QueryCountryDto } from './dto/query-country.dto';\n\n// // @ApiTags('Countries')\n// // @Controller()\n// // export class CountriesController {\n// //     constructor(private readonly countriesService: CountriesService) {}\n\n// //     /***\n// //      * Find all countries\n// //      */\n\n// //     @Get('v1/countries')\n// //     @HttpCode(HttpStatus.OK)\n// //     @ApiOkResponse({\n// //         type: InfinityPaginationResponse(Country),\n// //     })\n// //     async findAll(\n// //         @Query() query: QueryCountryDto\n// //     ): Promise> {\n// //         console.log('HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHA');\n// //         const page = query?.page ?? 1;\n// //         let limit = query?.limit ?? 10;\n// //         if (limit > 50) {\n// //             limit = 50;\n// //         }\n\n// //         return infinityPagination(\n// //             await this.countriesService.findManyWithPagination({\n// //                 filterOptions: query?.filters,\n// //                 sortOptions: query?.sort,\n// //                 paginationOptions: {\n// //                     page,\n// //                     limit,\n// //                 },\n// //             }),\n// //             { page, limit }\n// //         );\n// //     }\n// // }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CountriesModule.html":{"url":"modules/CountriesModule.html","title":"module - CountriesModule","body":"\n                   \n\n\n\n\n    Modules\n    CountriesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CountriesModule\n\n\n\ncluster_CountriesModule_exports\n\n\n\ncluster_CountriesModule_providers\n\n\n\n\nCountriesService \n\nCountriesService \n\n\n\nCountriesModule\n\nCountriesModule\n\nCountriesService  -->\n\nCountriesModule->CountriesService \n\n\n\n\n\nCountriesService\n\nCountriesService\n\nCountriesModule -->\n\nCountriesService->CountriesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/countries/countries.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            This file defines the CountriesModule, which bundles the CountriesController and CountriesService together.\nThe CountriesModule is responsible for handling country-related operations. It provides the necessary controllers and services to manage countries.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CountriesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CountriesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CountriesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { CountriesController } from './countries.controller';\nimport { CountriesService } from './countries.service';\n\n/**\n * @fileoverview\n * This file defines the `CountriesModule`, which bundles the `CountriesController` and `CountriesService` together.\n *\n * @module\n * @description\n * The `CountriesModule` is responsible for handling country-related operations. It provides the necessary controllers and services to manage countries.\n */\n@Module({\n    controllers: [CountriesController],\n    providers: [CountriesService],\n    exports: [CountriesService],\n})\nexport class CountriesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CountriesService.html":{"url":"injectables/CountriesService.html","title":"injectable - CountriesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CountriesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/countries/countries.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the CountriesService, which handles the business logic for managing countries.\nThe CountriesService is responsible for providing country-related services, including pagination and dynamic queries.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(paginationService: PaginationService, utilsService: UtilsService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/countries/countries.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        paginationService\n                                                  \n                                                        \n                                                                        PaginationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        utilsService\n                                                  \n                                                        \n                                                                        UtilsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(paginationQuery: PaginationQueryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/countries/countries.service.ts:52\n                        \n                    \n\n\n            \n                \n                        Find all countries with pagination.\nThis method allows the client to retrieve a paginated list of countries based on the provided query parameters.\nIt dynamically builds SQL queries to select and count countries, and supports field configurations for joining additional tables.\nExample :```typescript\nconst paginationQuery: PaginationQueryDto = {\n  page: 1,\n  limit: 10,\n  sortBy: 'name',\n  filter: { continent: 'Asia' },\n};\nconst countries = await countriesService.findAll(paginationQuery);Example :See PaginationQueryDto\nSee PaginationResponseDto\nSee Country\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                paginationQuery\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe pagination query parameters.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                A promise that resolves to a paginated response of countries.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\nimport { PaginationService } from '@services/pagination.service';\nimport { UtilsService } from '@services/util.service';\nimport { PaginationResponseDto } from '@utils/dto/pagination-response.dto';\nimport { PaginationQueryDto } from '@utils/dto/pagination.dto';\nimport { IPaginationFieldConfig } from '@utils/types/pagination-options';\n\nimport { Country } from './dto/country';\n\n/**\n * @fileoverview\n * This file defines the `CountriesService`, which handles the business logic for managing countries.\n *\n * @module\n * @description\n * The `CountriesService` is responsible for providing country-related services, including pagination and dynamic queries.\n */\n@Injectable()\nexport class CountriesService {\n    constructor(\n        private readonly paginationService: PaginationService,\n        private readonly utilsService: UtilsService\n    ) {}\n\n    /**\n     * Find all countries with pagination.\n     *\n     * @param {PaginationQueryDto} paginationQuery - The pagination query parameters.\n     * @returns {Promise>} A promise that resolves to a paginated response of countries.\n     *\n     * @description\n     * This method allows the client to retrieve a paginated list of countries based on the provided query parameters.\n     * It dynamically builds SQL queries to select and count countries, and supports field configurations for joining additional tables.\n     *\n     * @example\n     * ```typescript\n     * const paginationQuery: PaginationQueryDto = {\n     *   page: 1,\n     *   limit: 10,\n     *   sortBy: 'name',\n     *   filter: { continent: 'Asia' },\n     * };\n     * const countries = await countriesService.findAll(paginationQuery);\n     * ```\n     *\n     * @see PaginationQueryDto\n     * @see PaginationResponseDto\n     * @see Country\n     */\n\n    async findAll(paginationQuery: PaginationQueryDto): Promise> {\n        const baseQuery = [\n            'ptbl.id_country',\n            'ptbl.name',\n            'ptbl.iso',\n            'ptbl.nice_name',\n            'ptbl.iso3',\n            'ptbl.num_code',\n            'ptbl.dial_code',\n            'ptbl.continent',\n            'ptbl.capital',\n        ];\n        const fromQuery = ` FROM countries ptbl`;\n\n        const fieldConfigs: Record = {\n            symbol: {\n                joinTable: (alias: string) =>\n                    `JOIN currencies ${alias} ON ${alias}.id_currency = ptlb.id_currency`,\n                alias: () => `c${0}`, // Reusing the same alias logic for symbol and code\n                selectFields: (alias: string) => [\n                    `${alias}.symbol`,\n                    `${alias}.name AS currency_name`,\n                ],\n            },\n            offset: {\n                joinTable: (alias: string) =>\n                    `JOIN timezone ${alias} ON ${alias}.id_timezone = ptlb.id_timezone`,\n                alias: () => `tz${0}`,\n                selectFields: (alias: string) => [\n                    `${alias}.value`,\n                    `${alias}.offset`,\n                    `${alias}.offset_in_minutes`,\n                    `${alias}.text`,\n                ],\n            },\n            abbr: {\n                joinTable: (alias: string) =>\n                    `JOIN timezone ${alias} ON ${alias}.id_timezone = ptlb.id_timezone`,\n                alias: () => `tz${0}`,\n                selectFields: (alias: string) => [`${alias}.abbr`],\n            },\n            code: {\n                joinTable: (alias: string) =>\n                    `JOIN currencies ${alias} ON ${alias}.id_currency = ptlb.id_currency`, // Reusing join logic for code\n                alias: () => `c${0}`, // Reusing the same alias logic for symbol and code\n                selectFields: (alias: string) => [`${alias}.code`],\n            },\n            // Add more field configurations as needed\n        };\n\n        const { selectQuery, countQuery } = this.utilsService.buildDynamicQuery(\n            paginationQuery,\n            fieldConfigs,\n            baseQuery,\n            fromQuery\n        );\n\n        // const select = selectFields.join(', ');\n        return this.paginationService.paginate(selectQuery, countQuery, paginationQuery);\n\n        // const { joinTables, selectFields, filterQuery, sortByQuery } =\n        //     this.utilsService.buildDynamicQuery(paginationQuery, fieldConfigs);\n\n        // console.log(\n        //     'HELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL selectFields',\n        //     selectFields\n        // );\n\n        // // const selectQuery = `SELECT ${baseQuery.join(', ')} ${selectFields.join(', ')} ${fromQuery} ${joinTables.join(' ')} ${filterQuery} ${sortByQuery}`;\n        // const selectQuery = `SELECT ${baseQuery.join(', ')} ${selectFields} ${fromQuery} ${joinTables.join(' ')} ${filterQuery} ${sortByQuery}`;\n        // const countQuery = `SELECT count(*) ${fromQuery} ${joinTables.join(' ')} ${filterQuery}`;\n\n        // // const select = selectFields.join(', ');\n        // return this.paginationService.paginate(selectQuery, countQuery, paginationQuery);\n    }\n}\n\n// start\n// import { Injectable } from '@nestjs/common';\n\n// import { PaginationService } from '@services/pagination.service';\n// import { UtilsService } from '@services/util.service';\n// import { PaginationResponseDto } from '@utils/dto/pagination-response.dto';\n// import { PaginationQueryDto } from '@utils/dto/pagination.dto';\n// import { IFieldConfig } from '@utils/types/pagination-options';\n// // import { PaginationMetaDto } from '@utils/dto/pagination.meta.dto';\n\n// import { Country } from './dto/country';\n\n// @Injectable()\n// export class CountriesService {\n//     constructor(\n//         private readonly paginationService: PaginationService,\n//         private readonly utilsService: UtilsService\n//     ) {}\n\n//     async findAll(\n//         paginationQuery: PaginationQueryDto\n//     ): Promise> {\n//         const baseQuery = [\n//             'ptlb.id_country',\n//             'ptlb.name',\n//             'ptlb.iso',\n//             'ptlb.nice_name',\n//             'ptlb.iso3',\n//             'ptlb.num_code',\n//             'ptlb.dial_code',\n//             'ptlb.continent',\n//             'ptlb.capital',\n//         ];\n//         const fromQuery = ` FROM countries ptlb`;\n\n//         // const joinTables = [];\n//         // const whereClauses = [];\n\n//         //     const baseQuery = `\n//         //   SELECT\n//         //     s.id,\n//         //     s.name,\n//         //     s.population,\n//         //     s.area\n//         // `;\n\n//         //     const fromQuery = `\n//         //   FROM\n//         //     states s\n//         // `;\n//         //  let sortByQuery = '';\n\n//         // const fieldConfigs: Record = {\n//         //     symbol: {\n//         //         joinTable: (index: number) =>\n//         //             `JOIN currencies c${0} ON c${0}.id_currency = ptlb.id_currency`,\n//         //         alias: (index: number) => `c${0}`, // Reusing the same alias logic for symbol and code\n//         //         selectFields: (alias: string) => [\n//         //             `${alias}.symbol`,\n//         //             `${alias}.name AS currency_name`,\n//         //         ],\n//         //     },\n//         //     offset: {\n//         //         joinTable: (index: number) =>\n//         //             `JOIN timezone tz${index} ON tz${index}.id_timezone = ptlb.id_timezone`,\n//         //         alias: (index: number) => `tz${index}`,\n//         //         selectFields: (alias: string) => [\n//         //             `${alias}.value`,\n//         //             `${alias}.offset`,\n//         //             `${alias}.offset_in_minutes`,\n//         //             `${alias}.text`,\n//         //         ],\n//         //     },\n//         //     code: {\n//         //         joinTable: (index: number) =>\n//         //             `JOIN currencies c${0} ON c${0}.id_currency = ptlb.id_currency`, // Reusing join logic for code\n//         //         alias: (index: number) => `c${0}`, // Reusing the same alias logic for symbol and code\n//         //         selectFields: (alias: string) => [`${alias}.code`],\n//         //     },\n//         //     // Add more field configurations as needed\n//         // };\n\n//         const fieldConfigs: Record = {\n//             symbol: {\n//                 joinTable: (alias: string) =>\n//                     `JOIN currencies ${alias} ON ${alias}.id_currency = ptlb.id_currency`,\n//                 alias: () => `c${0}`, // Reusing the same alias logic for symbol and code\n//                 selectFields: (alias: string) => [\n//                     `${alias}.symbol`,\n//                     `${alias}.name AS currency_name`,\n//                 ],\n//             },\n//             offset: {\n//                 joinTable: (alias: string) =>\n//                     `JOIN timezone ${alias} ON ${alias}.id_timezone = ptlb.id_timezone`,\n//                 alias: () => `tz${0}`,\n//                 selectFields: (alias: string) => [\n//                     `${alias}.value`,\n//                     `${alias}.offset`,\n//                     `${alias}.offset_in_minutes`,\n//                     `${alias}.text`,\n//                 ],\n//             },\n//             abbr: {\n//                 joinTable: (alias: string) =>\n//                     `JOIN timezone ${alias} ON ${alias}.id_timezone = ptlb.id_timezone`,\n//                 alias: () => `tz${0}`,\n//                 selectFields: (alias: string) => [`${alias}.abbr`],\n//             },\n//             code: {\n//                 joinTable: (alias: string) =>\n//                     `JOIN currencies ${alias} ON ${alias}.id_currency = ptlb.id_currency`, // Reusing join logic for code\n//                 alias: () => `c${0}`, // Reusing the same alias logic for symbol and code\n//                 selectFields: (alias: string) => [`${alias}.code`],\n//             },\n//             // Add more field configurations as needed\n//         };\n\n//         // const fieldConfigs: Record = {\n//         //     symbol: {\n//         //         joinTable: (index: number) =>\n//         //             `JOIN currencies c${index} ON c${index}.id_currency = s.currency_id`,\n//         //         alias: (index: number) => `c${index}`,\n//         //         selectFields: (alias: string) => [\n//         //             `${alias}.symbol`,\n//         //             `${alias}.name AS currency_name`,\n//         //         ],\n//         //     },\n//         //     offset: {\n//         //         joinTable: (index: number) =>\n//         //             `JOIN timezone tz${index} ON tz${index}.id_timezone = s.timezone_id`,\n//         //         alias: (index: number) => `tz${index}`,\n//         //         selectFields: (alias: string) => [\n//         //             `${alias}.value`,\n//         //             `${alias}.offset`,\n//         //             `${alias}.offset_in_minutes`,\n//         //             `${alias}.text`,\n//         //         ],\n//         //     },\n//         //     code: {\n//         //         joinTable: (index: number) =>\n//         //             `JOIN currencies c${index} ON c${index}.id_currency = s.currency_id`,\n//         //         alias: (index: number) => `c${index}`,\n//         //         selectFields: (alias: string) => [`${alias}.code`],\n//         //     },\n//         //     // Add more field configurations as needed\n//         // };\n\n//         // const { joinTables, selectFields, filterQuery, filterValues, sortByQuery } =\n//         //     this.buildDynamicQuery(paginationQuery.filters, paginationQuery.sort, fieldConfigs);\n\n//         // const finalSelectQuery = `SELECT ${baseQuery.join(', ')}, ${selectFields.join(', ')} ${fromQuery} ${joinTables.join(\n//         //     ' '\n//         // )} ${filterQuery} ${sortByQuery}`;\n\n//         // const { joinTables, selectFields, filterQuery, sortByQuery } = this.buildDynamicQuery(\n//         //     paginationQuery,\n//         //     // paginationQuery.filters,\n//         //     // paginationQuery.sort,\n//         //     fieldConfigs\n//         // );\n\n//         const { joinTables, selectFields, filterQuery, sortByQuery } =\n//             this.utilsService.buildDynamicQuery(\n//                 paginationQuery,\n//                 // paginationQuery.filters,\n//                 // paginationQuery.sort,\n//                 fieldConfigs\n//             );\n\n//         const finalSelectQuery = `SELECT ${baseQuery.join(', ')}, ${selectFields.join(', ')} ${fromQuery} ${joinTables.join(\n//             ' '\n//         )} ${filterQuery} ${sortByQuery}`;\n\n//         console.log('BENCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC', finalSelectQuery);\n\n//         // let filterQuery = '';\n//         // if (paginationQuery.filters && paginationQuery.filters.length > 0) {\n//         //     const filterConditions = paginationQuery.filters\n//         //         .map((filter, index) => {\n//         //             const field = filter.field.toLowerCase();\n//         //             let alias = ``;\n//         //             if (field === 'symbol') {\n//         //                 joinTables.push(\n//         //                     ` JOIN currencies c${index} ON c.id_currency = c${index}.id_currency`\n//         //                 );\n//         //                 selectFields.push(`c${index}.symbol`, `c${index}.name AS currency_name`);\n//         //                 alias = `c${index}`;\n//         //             } else if (field === 'offset') {\n//         //                 joinTables.push(\n//         //                     ` JOIN timezone tz${index} ON c.id_timezone = tz${index}.id_timezone`\n//         //                 );\n//         //                 selectFields.push(\n//         //                     `tz${index}.value`,\n//         //                     `tz${index}.offset`,\n//         //                     `tz${index}.offset_in_minutes`,\n//         //                     `tz${index}.text`\n//         //                 );\n//         //                 alias = `tz${index}`;\n//         //             } else {\n//         //                 alias = `c${index}`;\n//         //             }\n//         //             const operator = filter.operator.toUpperCase();\n//         //             if (operator === 'IN') {\n//         //                 const values = filter.value\n//         //                     .split(',')\n//         //                     .map((val) => `'${val.trim()}'`)\n//         //                     .join(', ');\n//         //                 return ` ${alias}.${filter.field} IN (${values})`;\n//         //             }\n//         //             return ` ${alias}.${filter.field} ${filter.operator} '${filter.value}'`;\n//         //         })\n//         //         .join(' AND ');\n//         //     filterQuery = `WHERE ${filterConditions}`;\n//         // }\n\n//         // console.log('____________________________________', joinTables);\n\n//         // Add sort by clauses based on filters\n//         // if (paginationQuery.sort) {\n//         //     sortByQuery = ` order by `;\n//         //     sortByQuery += paginationQuery.sort\n//         //         .map((filter) => {\n//         //             return `${filter.field} ${filter.direction}`;\n//         //         })\n//         //         .join(', ');\n//         // }\n\n//         // const select = selectFields.join(', ');\n//         return this.paginationService.paginate(\n//             selectFields,\n//             `${fromQuery}`,\n//             joinTables,\n//             `${filterQuery}`,\n//             sortByQuery,\n//             paginationQuery\n//         );\n//     }\n\n//     private buildDynamicQuery(\n//         paginationQuery: any,\n//         // filters: any | undefined,\n//         // sort: any | undefined,\n//         fieldConfigs: Record\n//     ) {\n//         let filterQuery = '';\n//         let sortByQuery = '';\n//         const filterValues: any[] = [];\n//         const joinTables: string[] = [];\n//         const selectFields: string[] = [];\n\n//         const filters = paginationQuery.filters;\n//         const sort = paginationQuery.sort;\n\n//         const mySet = new Set();\n\n//         if (filters && filters.length > 0) {\n//             const filterConditions = filters\n//                 .map(\n//                     (filter: { field: string; operator: string; value: string }, index: number) => {\n//                         const field = filter.field.toLowerCase();\n//                         let alias = `ptlb`; // default alias for the main table\n//                         if (fieldConfigs[field]) {\n//                             const config = fieldConfigs[field];\n//                             alias = config.alias(index);\n\n//                             if (!mySet.has(alias)) {\n//                                 mySet.add(alias);\n//                                 // joinTables.push(config.joinTable(index));\n//                                 joinTables.push(config.joinTable(alias));\n//                             }\n//                             selectFields.push(...config.selectFields(alias));\n//                         }\n//                         const operator = filter.operator.toUpperCase();\n//                         if (operator === 'IN') {\n//                             const values = filter.value.split(',').map((val) => `'${val.trim()}'`);\n//                             return `${alias}.${filter.field} IN (${values.join(', ')})`;\n//                         }\n//                         // Add the value to the filterValues array for parameterized query\n//                         filterValues.push(filter.value);\n//                         // return `${alias}.${filter.field} ${filter.operator} ?`;\n//                         return `${alias}.${filter.field} ${filter.operator} '${filter.value}'`;\n//                     }\n//                 )\n//                 .join(' AND ');\n\n//             filterQuery = `WHERE ${filterConditions}`;\n//         }\n\n//         if (sort && sort.length > 0) {\n//             sortByQuery = `ORDER BY `;\n//             sortByQuery += sort\n//                 .map((sortItem: { field: string; direction: any }) => {\n//                     const field = sortItem.field.toLowerCase();\n//                     let alias = `ptlb`; // default alias for the main table\n\n//                     if (fieldConfigs[field]) {\n//                         const config = fieldConfigs[field];\n//                         alias = config.alias(0); // Use index 0 since sorting doesn't require multiple aliases\n//                     }\n\n//                     return `${alias}.${sortItem.field} ${sortItem.direction}`;\n//                 })\n//                 .join(', ');\n//         }\n\n//         return { filterQuery, filterValues, joinTables, selectFields, sortByQuery };\n//     }\n\n//     // private buildDynamicQuery(\n//     //     filters: any | undefined,\n//     //     sort: any | undefined,\n//     //     fieldConfigs: Record\n//     // ) {\n//     //     let filterQuery = '';\n//     //     let sortByQuery = '';\n//     //     const filterValues: any[] = [];\n//     //     const joinTables: string[] = [];\n//     //     const selectFields: string[] = [];\n\n//     //     if (filters && filters.length > 0) {\n//     //         const filterConditions = filters\n//     //             .map(\n//     //                 (filter: { field: string; operator: string; value: string }, index: number) => {\n//     //                     const field = filter.field.toLowerCase();\n//     //                     let alias = `s`; // default alias for the main table\n\n//     //                     if (fieldConfigs[field]) {\n//     //                         const config = fieldConfigs[field];\n//     //                         alias = config.alias(index);\n//     //                         joinTables.push(config.joinTable(index));\n//     //                         selectFields.push(...config.selectFields(alias));\n//     //                     }\n\n//     //                     const operator = filter.operator.toUpperCase();\n//     //                     if (operator === 'IN') {\n//     //                         const values = filter.value.split(',').map((val) => `'${val.trim()}'`);\n//     //                         return `${alias}.${filter.field} IN (${values.join(', ')})`;\n//     //                     }\n\n//     //                     // Add the value to the filterValues array for parameterized query\n//     //                     filterValues.push(filter.value);\n//     //                     // return `${alias}.${filter.field} ${filter.operator} ?`;\n//     //                     return `${alias}.${filter.field} ${filter.operator} '${filter.value}'`;\n//     //                 }\n//     //             )\n//     //             .join(' AND ');\n\n//     //         filterQuery = `WHERE ${filterConditions}`;\n//     //     }\n\n//     //     if (sort && sort.length > 0) {\n//     //         sortByQuery = `ORDER BY `;\n//     //         sortByQuery += sort\n//     //             .map((sortItem) => {\n//     //                 const field = sortItem.field.toLowerCase();\n//     //                 let alias = `s`; // default alias for the main table\n\n//     //                 if (fieldConfigs[field]) {\n//     //                     const config = fieldConfigs[field];\n//     //                     alias = config.alias(0); // Use index 0 since sorting doesn't require multiple aliases\n//     //                 }\n\n//     //                 return `${alias}.${sortItem.field} ${sortItem.direction}`;\n//     //             })\n//     //             .join(', ');\n//     //     }\n\n//     //     return { filterQuery, filterValues, joinTables, selectFields, sortByQuery };\n//     // }\n// }\n// end\n// import { Injectable } from '@nestjs/common';\n\n// import { IPaginationOptions } from '@utils/types/pagination-options';\n\n// import { Country } from './domain/country';\n// import { FilterCountryDto, SortCountryDto } from './dto/query-country.dto';\n\n// @Injectable()\n// export class CountriesService {\n//     findManyWithPagination({\n//         filterOptions,\n//         sortOptions,\n//         paginationOptions,\n//     }: {\n//         filterOptions?: FilterCountryDto | null;\n//         sortOptions?: SortCountryDto[] | null;\n//         paginationOptions: IPaginationOptions;\n//     }): Promise {\n//         console.log('filterOptions', filterOptions);\n//         console.log('sortOptions', sortOptions);\n//         console.log('paginationOptions', paginationOptions);\n\n//         return 'hi' as any;\n//         // return this.usersRepository.findManyWithPagination({\n//         //     filterOptions,\n//         //     sortOptions,\n//         //     paginationOptions,\n//         // });\n//     }\n// }\n\n// import { Injectable } from '@nestjs/common';\n\n// import { PaginationService } from '@services/pagination.service';\n// import { PaginationResponseDto } from '@utils/dto/pagination-response.dto';\n// import { PaginationQueryDto } from '@utils/dto/pagination.dto';\n// // import { PaginationMetaDto } from '@utils/dto/pagination.meta.dto';\n\n// import { Country } from './dto/country';\n\n// @Injectable()\n// export class CountriesService {\n//     constructor(private readonly paginationService: PaginationService) {}\n\n//     async findAll(\n//         paginationQuery: PaginationQueryDto\n//     ): Promise> {\n//         const selectFields = [\n//             'c.id_country',\n//             'c.name',\n//             'c.iso',\n//             'c.nice_name',\n//             'c.iso3',\n//             'c.num_code',\n//             'c.dial_code',\n//             'c.continent',\n//             'c.capital',\n//         ];\n//         const fromQuery = ` FROM countries c`;\n\n//         const joinTables = [];\n//         // const whereClauses = [];\n//         let sortByQuery = '';\n\n//         let filterQuery = '';\n//         if (paginationQuery.filters && paginationQuery.filters.length > 0) {\n//             const filterConditions = paginationQuery.filters\n//                 .map((filter, index) => {\n//                     const field = filter.field.toLowerCase();\n//                     let alias = ``;\n//                     if (field === 'symbol') {\n//                         joinTables.push(\n//                             ` JOIN currencies c${index} ON c.id_currency = c${index}.id_currency`\n//                         );\n//                         selectFields.push(`c${index}.symbol`, `c${index}.name AS currency_name`);\n//                         alias = `c${index}`;\n//                     } else if (field === 'offset') {\n//                         joinTables.push(\n//                             ` JOIN timezone tz${index} ON c.id_timezone = tz${index}.id_timezone`\n//                         );\n//                         selectFields.push(\n//                             `tz${index}.value`,\n//                             `tz${index}.offset`,\n//                             `tz${index}.offset_in_minutes`,\n//                             `tz${index}.text`\n//                         );\n//                         alias = `tz${index}`;\n//                     } else {\n//                         alias = `c${index}`;\n//                     }\n//                     const operator = filter.operator.toUpperCase();\n//                     if (operator === 'IN') {\n//                         const values = filter.value\n//                             .split(',')\n//                             .map((val) => `'${val.trim()}'`)\n//                             .join(', ');\n//                         return ` ${alias}.${filter.field} IN (${values})`;\n//                     }\n//                     return ` ${alias}.${filter.field} ${filter.operator} '${filter.value}'`;\n//                 })\n//                 .join(' AND ');\n//             filterQuery = `WHERE ${filterConditions}`;\n//         }\n\n//         // // Add join if filter by country_name\n//         // paginationQuery.filters?.forEach((filter, index) => {\n//         //     let alias = ``;\n//         //     switch (filter.field) {\n//         //         case 'symbol':\n//         //             joinTables.push(\n//         //                 ` JOIN currencies c${index} ON c.id_currency = c${index}.id_currency`\n//         //             );\n//         //             selectFields.push(`c${index}.symbol`, `c${index}.name AS currency_name`);\n//         //             alias = `c${index}`;\n//         //             // selectFields.push(`c${index}.name AS currency_name`);\n//         //             break;\n//         //         case 'offset':\n//         //             joinTables.push(\n//         //                 ` JOIN timezone tz${index} ON c.id_timezone = tz${index}.id_timezone`\n//         //             );\n//         //             selectFields.push(\n//         //                 `tz${index}.value`,\n//         //                 `tz${index}.offset`,\n//         //                 `tz${index}.offset_in_minutes`,\n//         //                 `tz${index}.text`\n//         //             );\n//         //             alias = `tz${index}`;\n//         //             // selectFields.push(`tz${index}.offset`);\n//         //             // selectFields.push(`tz${index}.offset_in_minutes`);\n//         //             // selectFields.push(`tz${index}.text`);\n//         //             break;\n//         //         // Add more cases as needed for other filter fields\n//         //         default:\n//         //             alias = `c`;\n//         //             // Handle other filter fields if needed\n//         //             break;\n//         //     }\n\n//         //     if (filter.operator.toUpperCase() === 'IN') {\n//         //         const values = filter.value\n//         //             .split(',')\n//         //             .map((val) => `'${val.trim()}'`)\n//         //             .join(', ');\n//         //         return ` ${alias}.${filter.field} IN (${values})`;\n//         //     } else {\n//         //         filterQuery += ` ${alias}.${filter.field} ${filter.operator} '${filter.value}'`;\n//         //     }\n//         // });\n\n//         // Add where clauses based on filters\n//         // if (paginationQuery.filters) {\n//         //     paginationQuery.filters.forEach((filter) => {\n//         //         switch (filter.operator) {\n//         //             case 'LIKE':\n//         //                 whereClauses.push(`${filter.field} LIKE '%${filter.value}%'`);\n//         //                 break;\n//         //             case '>':\n//         //                 whereClauses.push(`${filter.field} > ${filter.value}`);\n//         //                 break;\n//         //             case ' 0) {\n//         //     const filterConditions = paginationQuery.filters\n//         //         .map((filter) => {\n//         //             console.log('hi');\n//         //             if (filter.operator.toUpperCase() === 'IN') {\n//         //                 const values = filter.value\n//         //                     .split(',')\n//         //                     .map((val) => `'${val.trim()}'`)\n//         //                     .join(', ');\n//         //                 return `${filter.field} IN (${values})`;\n//         //             }\n//         //             return `${filter.field} ${filter.operator} '${filter.value}'`;\n//         //         })\n//         //         .join(' AND ');\n//         //     filterQuery = `WHERE ${filterConditions}`;\n//         // }\n//         // let filterQuery = '';\n//         // if (paginationQuery.filters && paginationQuery.filters.length > 0) {\n//         //     const filterConditions = paginationQuery.filters\n//         //         .map((filter) => {\n//         //             const operator = filter.operator.toUpperCase();\n//         //             if (operator === 'IN') {\n//         //                 const values = filter.value\n//         //                     .split(',')\n//         //                     .map((val) => `'${val.trim()}'`)\n//         //                     .join(', ');\n//         //                 return `${filter.field} IN (${values})`;\n//         //             }\n//         //             return `${filter.field} ${filter.operator} '${filter.value}'`;\n//         //         })\n//         //         .join(' AND ');\n//         //     filterQuery = `WHERE ${filterConditions}`;\n//         // }\n\n//         console.log('____________________________________', joinTables);\n\n//         // Add sort by clauses based on filters\n//         if (paginationQuery.sort) {\n//             sortByQuery = ` order by `;\n//             sortByQuery += paginationQuery.sort\n//                 .map((filter) => {\n//                     return `${filter.field} ${filter.direction}`;\n//                 })\n//                 .join(', ');\n//         }\n\n//         // const select = selectFields.join(', ');\n//         return this.paginationService.paginate(\n//             selectFields,\n//             `${fromQuery}`,\n//             joinTables,\n//             `${filterQuery}`,\n//             sortByQuery,\n//             paginationQuery\n//         );\n\n//         // const data = [\n//         //     { id_country: '1', name: 'Country 1' },\n//         //     { id_country: '2', name: 'Country 2' },\n//         // ];\n\n//         // const meta = new PaginationMetaDto({\n//         //     paginationQueryDto: paginationQuery,\n//         //     totalItems: 77,\n//         // });\n\n//         // return { data, meta, hasNextPage: true };\n//         // const baseQuery = `SELECT `;\n//         // const selectFields = ['s.id', 's.name', 's.population', 's.area'];\n//         // const fromQuery = ` FROM states s`;\n//         // const countQuery = `SELECT COUNT(*)`;\n\n//         // const joinTables = [];\n//         // // if (paginationQuery.filters?.some((filter) => filter.field === 'country_name')) {\n//         // //     joinTables.push('JOIN countries c ON s.country_id = c.id');\n//         // //     selectFields.push('c.name as country_name');\n//         // // }\n//         // // Iterate over each filter in paginationQuery.filters\n//         // // Iterate over each filter in paginationQuery.filters\n//         // paginationQuery.filters?.forEach((filter, index) => {\n//         //     switch (filter.field) {\n//         //         case 'country_name':\n//         //             joinTables.push(`JOIN countries c${index} ON s.country_id = c${index}.id`);\n//         //             selectFields.push(`c${index}.name AS country_name`);\n//         //             break;\n//         //         case 'name':\n//         //             joinTables.push(`JOIN state c${index} ON s.state_id = c${index}.id`);\n//         //             selectFields.push(`c${index}.name AS state_name`);\n//         //             break;\n//         //         // Add more cases as needed for other filter fields\n//         //         default:\n//         //             // Handle other filter fields if needed\n//         //             break;\n//         //     }\n//         // });\n\n//         // // const select = selectFields.join(', ');\n//         // return this.paginationService.paginate(\n//         //     `${baseQuery} ${selectFields} ${fromQuery}`,\n//         //     `${countQuery} ${fromQuery}`,\n//         //     paginationQuery,\n//         //     joinTables\n//         // );\n//     }\n// }\n\n// // import { Injectable } from '@nestjs/common';\n\n// // import { IPaginationOptions } from '@utils/types/pagination-options';\n\n// // import { Country } from './domain/country';\n// // import { FilterCountryDto, SortCountryDto } from './dto/query-country.dto';\n\n// // @Injectable()\n// // export class CountriesService {\n// //     findManyWithPagination({\n// //         filterOptions,\n// //         sortOptions,\n// //         paginationOptions,\n// //     }: {\n// //         filterOptions?: FilterCountryDto | null;\n// //         sortOptions?: SortCountryDto[] | null;\n// //         paginationOptions: IPaginationOptions;\n// //     }): Promise {\n// //         console.log('filterOptions', filterOptions);\n// //         console.log('sortOptions', sortOptions);\n// //         console.log('paginationOptions', paginationOptions);\n\n// //         return 'hi' as any;\n// //         // return this.usersRepository.findManyWithPagination({\n// //         //     filterOptions,\n// //         //     sortOptions,\n// //         //     paginationOptions,\n// //         // });\n// //     }\n// // }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Country.html":{"url":"classes/Country.html","title":"class - Country","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Country\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/countries/dto/country.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the Country class, which represents the data structure of a country\nentity used in the application. The Country class is used to describe various details\nabout a country, including its identification, name, ISO codes, and other related attributes.\nThe Country class serves as a Data Transfer Object (DTO) for representing country data.\nIt includes properties such as the country's ID, name, ISO codes, dial code, capital city,\ncontinent, currency details, and timezone information. Each property is annotated with @ApiResponseProperty\nto define its type and provide example values for API documentation purposes.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                abbr\n                            \n                            \n                                    \n                                capital\n                            \n                            \n                                    \n                                continent\n                            \n                            \n                                    \n                                currency_name\n                            \n                            \n                                    \n                                dial_code\n                            \n                            \n                                    \n                                id_country\n                            \n                            \n                                    \n                                iso\n                            \n                            \n                                    \n                                iso3\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                offset\n                            \n                            \n                                    \n                                offset_in_minutes\n                            \n                            \n                                    \n                                symbol\n                            \n                            \n                                    \n                                text\n                            \n                            \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        abbr\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'IST'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:185\n                        \n                    \n\n            \n                \n                    The abbreviation for the timezone.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        capital\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'New Delhi'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:94\n                        \n                    \n\n            \n                \n                    The capital city of the country.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        continent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'Asia'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:107\n                        \n                    \n\n            \n                \n                    The continent where the country is located.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        currency_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'Indian Rupee, US Dollar etc'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:133\n                        \n                    \n\n            \n                \n                    The name of the currency used in the country.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        dial_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: '91'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:81\n                        \n                    \n\n            \n                \n                    The international dialing code for the country.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id_country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: '123e4567-e89b-12d3-a456-426614174000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:29\n                        \n                    \n\n            \n                \n                    The unique identifier for the country.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        iso\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'IN'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:55\n                        \n                    \n\n            \n                \n                    The ISO 3166-1 alpha-2 code of the country.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        iso3\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'IND'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:68\n                        \n                    \n\n            \n                \n                    The ISO 3166-1 alpha-3 code of the country.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'India'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:42\n                        \n                    \n\n            \n                \n                    The name of the country.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        offset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: '+5:30'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:159\n                        \n                    \n\n            \n                \n                    The timezone offset from UTC.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        offset_in_minutes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: '270'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:172\n                        \n                    \n\n            \n                \n                    The timezone offset in minutes from UTC.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        symbol\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'currency symbol ₹, $ etc'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:120\n                        \n                    \n\n            \n                \n                    The symbol used for the country's currency.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'Indian Time'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:198\n                        \n                    \n\n            \n                \n                    The descriptive name of the timezone.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'Asia/Mumbai'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:146\n                        \n                    \n\n            \n                \n                    The timezone value of the country.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiResponseProperty } from '@nestjs/swagger';\n\n/**\n * @fileoverview\n * This file defines the `Country` class, which represents the data structure of a country\n * entity used in the application. The `Country` class is used to describe various details\n * about a country, including its identification, name, ISO codes, and other related attributes.\n *\n * @module\n * @description\n * The `Country` class serves as a Data Transfer Object (DTO) for representing country data.\n * It includes properties such as the country's ID, name, ISO codes, dial code, capital city,\n * continent, currency details, and timezone information. Each property is annotated with `@ApiResponseProperty`\n * to define its type and provide example values for API documentation purposes.\n */\n\nexport class Country {\n    /**\n     * The unique identifier for the country.\n     *\n     * @type {string}\n     * @example '123e4567-e89b-12d3-a456-426614174000'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: '123e4567-e89b-12d3-a456-426614174000',\n    })\n    id_country: string;\n\n    /**\n     * The name of the country.\n     *\n     * @type {string}\n     * @example 'India'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: 'India',\n    })\n    name: string;\n\n    /**\n     * The ISO 3166-1 alpha-2 code of the country.\n     *\n     * @type {string}\n     * @example 'IN'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: 'IN',\n    })\n    iso: string;\n\n    /**\n     * The ISO 3166-1 alpha-3 code of the country.\n     *\n     * @type {string}\n     * @example 'IND'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: 'IND',\n    })\n    iso3: string;\n\n    /**\n     * The international dialing code for the country.\n     *\n     * @type {string}\n     * @example '91'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: '91',\n    })\n    dial_code: string;\n\n    /**\n     * The capital city of the country.\n     *\n     * @type {string}\n     * @example 'New Delhi'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: 'New Delhi',\n    })\n    capital: string;\n\n    /**\n     * The continent where the country is located.\n     *\n     * @type {string}\n     * @example 'Asia'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: 'Asia',\n    })\n    continent: string;\n\n    /**\n     * The symbol used for the country's currency.\n     *\n     * @type {string}\n     * @example '₹'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: 'currency symbol ₹, $ etc',\n    })\n    symbol: string;\n\n    /**\n     * The name of the currency used in the country.\n     *\n     * @type {string}\n     * @example 'Indian Rupee'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: 'Indian Rupee, US Dollar etc',\n    })\n    currency_name: string;\n\n    /**\n     * The timezone value of the country.\n     *\n     * @type {string}\n     * @example 'Asia/Mumbai'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: 'Asia/Mumbai',\n    })\n    value: string;\n\n    /**\n     * The timezone offset from UTC.\n     *\n     * @type {string}\n     * @example '+5:30'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: '+5:30',\n    })\n    offset: string;\n\n    /**\n     * The timezone offset in minutes from UTC.\n     *\n     * @type {number}\n     * @example 330\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: '270',\n    })\n    offset_in_minutes: number;\n\n    /**\n     * The abbreviation for the timezone.\n     *\n     * @type {string}\n     * @example 'IST'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: 'IST',\n    })\n    abbr: string;\n\n    /**\n     * The descriptive name of the timezone.\n     *\n     * @type {string}\n     * @example 'Indian Time'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: 'Indian Time',\n    })\n    text: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateDto.html":{"url":"classes/CreateDto.html","title":"class - CreateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/currencies/dto/create.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the CreateDto class, which represents the data transfer object (DTO)\nused for creating a new currency record. It includes validation rules and transformation logic\nfor the properties of the currency.\nThe CreateDto class ensures that the data provided for creating a currency adheres to\nspecified validation rules and formats. It uses decorators from class-validator for validation\nand class-transformer for transforming input data.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                code\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                decimal_digits\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name_plural\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                rounding\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                symbol\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                symbol_native\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Readonly\n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Transform(upperCaseTransformer)@IsDefined()@IsNotEmpty()@IsString()@MaxLength(3)@ApiProperty({type: String, description: 'Currency Code', example: 'INR', maxLength: 3})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/create.dto.ts:38\n                        \n                    \n\n            \n                \n                    Currency code, which must be uppercase and 3 characters long.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Readonly\n                        decimal_digits\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@Type(undefined)@IsNumber()@Min(0)@ApiProperty({type: Number, description: 'Decimal digits', example: '2'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/create.dto.ts:122\n                        \n                    \n\n            \n                \n                    Number of decimal digits used for the currency.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@MaxLength(80)@ApiProperty({type: String, description: 'name of currency', example: 'Indian Rupee', maxLength: 80})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/create.dto.ts:55\n                        \n                    \n\n            \n                \n                    Name of the currency.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name_plural\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@MaxLength(80)@ApiProperty({type: String, description: 'plural name of currency', example: 'Indian rupees', maxLength: 80})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/create.dto.ts:72\n                        \n                    \n\n            \n                \n                    Plural name of the currency.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Readonly\n                        rounding\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@Type(undefined)@IsNumber()@Min(0)@ApiProperty({type: Number, description: 'Rounding', example: '0'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/create.dto.ts:138\n                        \n                    \n\n            \n                \n                    Rounding precision used for the currency.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        symbol\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@MaxLength(6)@ApiProperty({type: String, description: 'Symbol of currency', example: '₹', maxLength: 6})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/create.dto.ts:89\n                        \n                    \n\n            \n                \n                    Symbol of the currency, which can be up to 6 characters long.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        symbol_native\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@MaxLength(10)@ApiProperty({type: String, description: 'native symbol of currency', example: '₹', maxLength: 10})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/create.dto.ts:106\n                        \n                    \n\n            \n                \n                    Native symbol of the currency, which can be up to 10 characters long.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nimport { Transform, Type } from 'class-transformer';\nimport { IsDefined, IsNotEmpty, IsNumber, IsString, Min, MaxLength } from 'class-validator';\n\nimport { upperCaseTransformer } from '@utils/transformers/upper-case.transformer';\n\n/**\n * @fileoverview\n * This file defines the `CreateDto` class, which represents the data transfer object (DTO)\n * used for creating a new currency record. It includes validation rules and transformation logic\n * for the properties of the currency.\n *\n * @module\n * @description\n * The `CreateDto` class ensures that the data provided for creating a currency adheres to\n * specified validation rules and formats. It uses decorators from `class-validator` for validation\n * and `class-transformer` for transforming input data.\n */\n\nexport class CreateDto {\n    /**\n     * Currency code, which must be uppercase and 3 characters long.\n     * @example 'INR'\n     */\n\n    @Transform(upperCaseTransformer)\n    @IsDefined()\n    @IsNotEmpty()\n    @IsString()\n    @MaxLength(3)\n    @ApiProperty({\n        type: String,\n        description: 'Currency Code',\n        example: 'INR',\n        maxLength: 3,\n    })\n    readonly code: string;\n\n    /**\n     * Name of the currency.\n     * @example 'Indian Rupee'\n     */\n\n    @IsDefined()\n    @IsNotEmpty()\n    @IsString()\n    @MaxLength(80)\n    @ApiProperty({\n        type: String,\n        description: 'name of currency',\n        example: 'Indian Rupee',\n        maxLength: 80,\n    })\n    name: string;\n\n    /**\n     * Plural name of the currency.\n     * @example 'Indian rupees'\n     */\n\n    @IsDefined()\n    @IsNotEmpty()\n    @IsString()\n    @MaxLength(80)\n    @ApiProperty({\n        type: String,\n        description: 'plural name of currency',\n        example: 'Indian rupees',\n        maxLength: 80,\n    })\n    name_plural: string;\n\n    /**\n     * Symbol of the currency, which can be up to 6 characters long.\n     * @example '₹'\n     */\n\n    @IsDefined()\n    @IsNotEmpty()\n    @IsString()\n    @MaxLength(6)\n    @ApiProperty({\n        type: String,\n        description: 'Symbol of currency',\n        example: '₹',\n        maxLength: 6,\n    })\n    symbol: string;\n\n    /**\n     * Native symbol of the currency, which can be up to 10 characters long.\n     * @example '₹'\n     */\n\n    @IsDefined()\n    @IsNotEmpty()\n    @IsString()\n    @MaxLength(10)\n    @ApiProperty({\n        type: String,\n        description: 'native symbol of currency',\n        example: '₹',\n        maxLength: 10,\n    })\n    symbol_native: string;\n\n    /**\n     * Number of decimal digits used for the currency.\n     * @example 2\n     */\n\n    @IsDefined()\n    @Type(() => Number)\n    @IsNumber()\n    @Min(0)\n    @ApiProperty({\n        type: Number,\n        description: 'Decimal digits',\n        example: '2',\n    })\n    readonly decimal_digits: number;\n\n    /**\n     * Rounding precision used for the currency.\n     * @example 0\n     */\n\n    @IsDefined()\n    @Type(() => Number)\n    @IsNumber()\n    @Min(0)\n    @ApiProperty({\n        type: Number,\n        description: 'Rounding',\n        example: '0',\n    })\n    readonly rounding: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CurrenciesController.html":{"url":"controllers/CurrenciesController.html","title":"controller - CurrenciesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CurrenciesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/currencies/currencies.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                This file defines the CurrenciesController, which handles HTTP requests related to currencies.\nIt provides endpoints to create, update, retrieve, and delete currencies.\nThe CurrenciesController is responsible for exposing endpoints that interact with the CurrenciesService.\nIt uses various HTTP methods to manage currency data and handles responses with appropriate HTTP status codes.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createDto: CreateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(undefined)@HttpCode(HttpStatus.OK)@ApiCreatedResponse({type: Currency, description: 'Create currency'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/currencies/currencies.controller.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createDto\n                                            \n                                                            CreateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data required to create a new currency.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The created currency object.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(undefined)@HttpCode(HttpStatus.OK)@ApiParam({name: 'id_currency', type: String})@ApiOkResponse({status: undefined, description: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/currencies/currencies.controller.ts:113\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the currency to be deleted.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                An object indicating the deletion result.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(query: PaginationQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(undefined)@HttpCode(HttpStatus.OK)@ApiOkResponse({type: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/currencies/currencies.controller.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe pagination and filtering parameters.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                A paginated list of currencies.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateDto: UpdateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(undefined)@HttpCode(HttpStatus.OK)@ApiParam({name: 'id_currency', type: String})@ApiOkResponse({type: Currency, description: 'Update Currency'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/currencies/currencies.controller.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the currency to be updated.\n\n\n                                            \n                                        \n                                        \n                                                updateDto\n                                            \n                                                            UpdateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data to update the currency with.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The updated currency object or null if not found.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    HttpCode,\n    HttpStatus,\n    Param,\n    Patch,\n    Post,\n    Query,\n} from '@nestjs/common';\nimport { ApiTags, ApiOkResponse, ApiCreatedResponse, ApiParam } from '@nestjs/swagger';\n\nimport { PaginationResponse, PaginationResponseDto } from '@utils/dto/pagination-response.dto';\nimport { PaginationQueryDto } from '@utils/dto/pagination.dto';\n\nimport { CurrenciesService } from './currencies.service';\nimport { CreateDto } from './dto/create.dto';\nimport { Currency } from './dto/currency';\nimport { UpdateDto } from './dto/update.dto';\n\nconst modules = 'currencies';\n\n/**\n * @fileoverview\n * This file defines the `CurrenciesController`, which handles HTTP requests related to currencies.\n * It provides endpoints to create, update, retrieve, and delete currencies.\n *\n * @module\n * @description\n * The `CurrenciesController` is responsible for exposing endpoints that interact with the `CurrenciesService`.\n * It uses various HTTP methods to manage currency data and handles responses with appropriate HTTP status codes.\n */\n\n@ApiTags('Currencies')\n@Controller()\nexport class CurrenciesController {\n    constructor(private readonly currenciesService: CurrenciesService) {}\n\n    /**\n     * @route POST /v1/currencies\n     * @description Create a new currency.\n     * @param {CreateDto} createDto - The data required to create a new currency.\n     * @returns {Promise} The created currency object.\n     */\n\n    @Post(`v1/${modules}`)\n    @HttpCode(HttpStatus.OK)\n    @ApiCreatedResponse({\n        type: Currency,\n        description: 'Create currency',\n    })\n    async create(@Body() createDto: CreateDto): Promise {\n        const created = await this.currenciesService.create(createDto);\n        return created;\n    }\n\n    /**\n     * @route PATCH /v1/currencies/:id_currency\n     * @description Update an existing currency by its ID.\n     * @param {string} id - The ID of the currency to be updated.\n     * @param {UpdateDto} updateDto - The data to update the currency with.\n     * @returns {Promise} The updated currency object or null if not found.\n     */\n\n    @Patch(`v1/${modules}/:id_currency`)\n    @HttpCode(HttpStatus.OK)\n    @ApiParam({ name: 'id_currency', type: String })\n    @ApiOkResponse({\n        type: Currency,\n        description: 'Update Currency',\n    })\n    async update(\n        @Param('id_currency') id: string,\n        @Body() updateDto: UpdateDto\n    ): Promise {\n        console.log('UPDATE', id, updateDto);\n        const updated = await this.currenciesService.update(id, updateDto);\n        return updated;\n    }\n\n    /**\n     * @route GET /v1/currencies\n     * @description Retrieve a list of currencies with pagination.\n     * @param {PaginationQueryDto} query - The pagination and filtering parameters.\n     * @returns {Promise>} A paginated list of currencies.\n     */\n\n    @Get(`v1/${modules}`)\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ type: PaginationResponse(Currency) })\n    async findAll(@Query() query: PaginationQueryDto): Promise> {\n        const get_all = await this.currenciesService.findAll(query);\n\n        return get_all;\n    }\n\n    /**\n     * @route DELETE /v1/currencies/:id_currency\n     * @description Delete a currency by its ID.\n     * @param {string} id - The ID of the currency to be deleted.\n     * @returns {Promise} An object indicating the deletion result.\n     */\n\n    @Delete(`v1/${modules}/:id_currency`)\n    @HttpCode(HttpStatus.OK)\n    @ApiParam({ name: 'id_currency', type: String })\n    @ApiOkResponse({\n        status: HttpStatus.OK,\n        description: `${modules} has been successfully deleted.`,\n    })\n    async delete(@Param('id_currency') id: string): Promise {\n        const deleted = await this.currenciesService.delete(id);\n\n        return deleted;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CurrenciesModule.html":{"url":"modules/CurrenciesModule.html","title":"module - CurrenciesModule","body":"\n                   \n\n\n\n\n    Modules\n    CurrenciesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CurrenciesModule\n\n\n\ncluster_CurrenciesModule_providers\n\n\n\n\nCurrenciesService\n\nCurrenciesService\n\n\n\nCurrenciesModule\n\nCurrenciesModule\n\nCurrenciesModule -->\n\nCurrenciesService->CurrenciesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/currencies/currencies.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            This file defines the CurrenciesModule, which is responsible for managing currency-related functionalities.\nThe CurrenciesModule bundles together the controller and service related to currencies,\nalong with any other necessary providers.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CurrenciesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CurrenciesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { CurrenciesController } from './currencies.controller';\nimport { CurrenciesService } from './currencies.service';\nimport { Query } from './query';\n\n/**\n * @fileoverview\n * This file defines the `CurrenciesModule`, which is responsible for managing currency-related functionalities.\n *\n * @module\n * @description\n * The `CurrenciesModule` bundles together the controller and service related to currencies,\n * along with any other necessary providers.\n */\n@Module({\n    controllers: [CurrenciesController],\n    providers: [CurrenciesService, Query],\n})\nexport class CurrenciesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CurrenciesService.html":{"url":"injectables/CurrenciesService.html","title":"injectable - CurrenciesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CurrenciesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/currencies/currencies.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the CurrenciesService class, which provides methods to manage currency data.\nIt includes operations for creating, updating, retrieving, and deleting currencies.\nThe CurrenciesService class is responsible for handling business logic related to currencies.\nIt interacts with the database through the PrismaService and performs various operations using raw SQL queries.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                MODULE\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(paginationService: PaginationService, prisma: PrismaService, query: Query, utilsService: UtilsService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/currencies/currencies.service.ts:27\n                            \n                        \n\n                \n                    \n                            Creates an instance of CurrenciesService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        paginationService\n                                                  \n                                                        \n                                                                        PaginationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to handle pagination logic.\n\n\n                                                        \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to interact with the database.\n\n\n                                                        \n                                                \n                                                \n                                                        query\n                                                  \n                                                        \n                                                                        Query\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for SQL query generation.\n\n\n                                                        \n                                                \n                                                \n                                                        utilsService\n                                                  \n                                                        \n                                                                        UtilsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for utility functions, including dynamic query building.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createDto: CreateDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/currencies/currencies.service.ts:53\n                        \n                    \n\n\n            \n                \n                        Creates a new currency.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createDto\n                                            \n                                                            CreateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nData required to create a new currency.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The created currency object.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/currencies/currencies.service.ts:175\n                        \n                    \n\n\n            \n                \n                        Deletes a currency by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the currency to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                An object indicating the result of the deletion.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(paginationQuery: PaginationQueryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/currencies/currencies.service.ts:136\n                        \n                    \n\n\n            \n                \n                        Retrieves a paginated list of currencies.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                paginationQuery\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nPagination and filtering parameters.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                A paginated list of currencies.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/currencies/currencies.service.ts:201\n                        \n                    \n\n\n            \n                \n                        Retrieves a currency by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, payload: DeepPartial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/currencies/currencies.service.ts:86\n                        \n                    \n\n\n            \n                \n                        Updates an existing currency by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the currency to update.\n\n\n                                            \n                                        \n                                        \n                                                payload\n                                            \n                                                            DeepPartial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nData to update the currency with.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The updated currency object or null if not found.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        MODULE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/currencies.service.ts:27\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, HttpException, HttpStatus } from '@nestjs/common';\n\nimport { PaginationService } from '@services/pagination.service';\nimport { PrismaService } from '@services/prisma.service';\nimport { UtilsService } from '@services/util.service';\nimport { PaginationResponseDto } from '@utils/dto/pagination-response.dto';\nimport { PaginationQueryDto } from '@utils/dto/pagination.dto';\nimport { DeepPartial } from '@utils/types/deep-partial.type';\nimport { IPaginationFieldConfig } from '@utils/types/pagination-options';\n\nimport { CreateDto } from './dto/create.dto';\nimport { Currency } from './dto/currency';\nimport { Query } from './query';\n\n/**\n * @fileoverview\n * This file defines the `CurrenciesService` class, which provides methods to manage currency data.\n * It includes operations for creating, updating, retrieving, and deleting currencies.\n *\n * @module\n * @description\n * The `CurrenciesService` class is responsible for handling business logic related to currencies.\n * It interacts with the database through the `PrismaService` and performs various operations using raw SQL queries.\n */\n@Injectable()\nexport class CurrenciesService {\n    private readonly MODULE: string;\n\n    /**\n     * Creates an instance of `CurrenciesService`.\n     * @param {PaginationService} paginationService - Service to handle pagination logic.\n     * @param {PrismaService} prisma - Service to interact with the database.\n     * @param {Query} query - Service for SQL query generation.\n     * @param {UtilsService} utilsService - Service for utility functions, including dynamic query building.\n     */\n\n    constructor(\n        private readonly paginationService: PaginationService,\n        private readonly prisma: PrismaService,\n        private readonly query: Query,\n        private readonly utilsService: UtilsService\n    ) {\n        this.MODULE = 'currency';\n    }\n\n    /**\n     * Creates a new currency.\n     * @param {CreateDto} createDto - Data required to create a new currency.\n     * @returns {Promise} The created currency object.\n     * @throws {HttpException} If the currency code already exists or if an error occurs during creation.\n     */\n\n    async create(createDto: CreateDto): Promise {\n        // Check Code for prevent duplicate\n        const find = await this.prisma.executeRawQuery(this.query.findByCode(), createDto);\n\n        if (find) {\n            throw new HttpException({ message: 'CODE ALREADY EXIST' }, HttpStatus.CONFLICT);\n        }\n\n        // Create\n        const inserted = await this.prisma.executeRawQuery(this.query.insert(), createDto, [\n            'name',\n        ]);\n\n        if (inserted && inserted.insertid) {\n            const get = await this.findOne(inserted.insertid);\n\n            return get as any;\n        } else {\n            throw new HttpException(\n                { message: 'Something went wrong' },\n                HttpStatus.INTERNAL_SERVER_ERROR\n            );\n        }\n    }\n\n    /**\n     * Updates an existing currency by its ID.\n     * @param {string} id - The ID of the currency to update.\n     * @param {DeepPartial} payload - Data to update the currency with.\n     * @returns {Promise} The updated currency object or null if not found.\n     * @throws {HttpException} If nothing to update is provided, if the code already exists, or if an error occurs during the update.\n     */\n\n    async update(id: string, payload: DeepPartial): Promise {\n        if (Object.keys(payload).length === 0) {\n            throw new HttpException(\n                {\n                    message: 'Nothing to be update!',\n                },\n                HttpStatus.BAD_REQUEST\n            );\n        }\n        if (payload.code) {\n            // Check Code\n\n            const find = await this.prisma.executeRawQuery(this.query.findByCode(id), payload);\n\n            if (find) {\n                throw new HttpException(\n                    {\n                        message: 'Code already exists!',\n                    },\n                    HttpStatus.CONFLICT\n                );\n            }\n        }\n\n        payload.id = id;\n\n        // Update\n        const updated = await this.prisma.executeRawQuery(this.query.update(), payload, ['name']);\n\n        if (!updated) {\n            throw new HttpException(\n                { message: 'Something went wrong' },\n                HttpStatus.INTERNAL_SERVER_ERROR\n            );\n        }\n\n        if (updated[0]?.updatedid) {\n            const get = await this.findOne(id);\n            return get;\n        } else {\n            throw new HttpException({ message: `${this.MODULE} not found` }, HttpStatus.NOT_FOUND);\n        }\n    }\n\n    /**\n     * Retrieves a paginated list of currencies.\n     * @param {PaginationQueryDto} paginationQuery - Pagination and filtering parameters.\n     * @returns {Promise>} A paginated list of currencies.\n     */\n\n    async findAll(paginationQuery: PaginationQueryDto): Promise> {\n        const baseFields = this.query.pgBaseSelectField();\n        const fromQuery = this.query.pgBaseQuery();\n\n        const fieldConfigs: Record = null;\n\n        const { selectQuery, countQuery } = this.utilsService.buildDynamicQuery(\n            paginationQuery,\n            fieldConfigs,\n            baseFields,\n            fromQuery,\n            'ptbl.id_currency'\n        );\n\n        return this.paginationService.paginate(selectQuery, countQuery, paginationQuery);\n\n        // const { joinTables, selectFields, filterQuery, sortByQuery } =\n        //     this.utilsService.buildDynamicQuery(paginationQuery, fieldConfigs);\n\n        // const selectQuery = `SELECT ${baseFields.join(', ')} ${selectFields} ${fromQuery} ${joinTables.join(' ')} ${filterQuery} ${sortByQuery}`;\n        // const countQuery = `SELECT count(*) ${fromQuery} ${joinTables.join(' ')} ${filterQuery}`;\n\n        // const { selectQuery, countQuery } = this.utilsService.queryStatements(\n        //     baseFields,\n        //     selectFields,\n        //     fromQuery,\n        //     joinTables,\n        //     filterQuery,\n        //     sortByQuery\n        // );\n    }\n\n    /**\n     * Deletes a currency by its ID.\n     * @param {string} id - The ID of the currency to delete.\n     * @returns {Promise} An object indicating the result of the deletion.\n     * @throws {HttpException} If an error occurs during deletion or if the currency is not found.\n     */\n\n    async delete(id: string): Promise {\n        // Delete\n        const deleted = await this.prisma.executeRawQuery(this.query.delete(), id);\n\n        if (!deleted) {\n            throw new HttpException(\n                { message: 'Something went wrong' },\n                HttpStatus.INTERNAL_SERVER_ERROR\n            );\n        }\n\n        if (deleted[0]?.deletedid) {\n            return { status: 'success' };\n        } else {\n            throw new HttpException({ message: `${this.MODULE} not found` }, HttpStatus.NOT_FOUND);\n        }\n    }\n\n    /*** HELPER METHODS */\n\n    /**\n     * Retrieves a currency by its ID.\n     * @param {string} id - The ID of the currency to retrieve.\n     * @returns {Promise} The currency object.\n     */\n\n    async findOne(id: string): Promise {\n        // Get\n        const data = await this.prisma.executeRawQuery(this.query.findById(), { id });\n\n        return data;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Currency.html":{"url":"classes/Currency.html","title":"class - Currency","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Currency\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/currencies/dto/currency.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the Currency class, which represents the data structure of a currency entity.\nIt includes properties that describe the currency and uses decorators for Swagger documentation\nand data transformation.\nThe Currency class is used to define the structure of a currency object, including its code, name,\nplural name, symbol, native symbol, decimal digits, and rounding. The class also uses decorators\nto configure how the properties should be documented and transformed.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                code\n                            \n                            \n                                    \n                                decimal_digits\n                            \n                            \n                                    \n                                    Optional\n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                name_plural\n                            \n                            \n                                    \n                                rounding\n                            \n                            \n                                    \n                                symbol\n                            \n                            \n                                    \n                                symbol_native\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'Currency Code', example: 'INR'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/currency.ts:28\n                        \n                    \n\n            \n                \n                    The code of the currency (e.g., 'INR').\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        decimal_digits\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: 'Decimal digits', example: '2'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/currency.ts:88\n                        \n                    \n\n            \n                \n                    The number of decimal digits used for the currency.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude({toPlainOnly: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/currency.ts:108\n                        \n                    \n\n            \n                \n                    The unique identifier for the currency.\nThis property is excluded from the plain representation of the object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'name of currency', example: 'Indian Rupee'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/currency.ts:40\n                        \n                    \n\n            \n                \n                    The name of the currency (e.g., 'Indian Rupee').\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name_plural\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'plural name of currency', example: 'Indian rupees'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/currency.ts:52\n                        \n                    \n\n            \n                \n                    The plural name of the currency (e.g., 'Indian rupees').\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        rounding\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: 'Rounding', example: '0'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/currency.ts:100\n                        \n                    \n\n            \n                \n                    The rounding precision used for the currency.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        symbol\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'Symbol of currency', example: '₹'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/currency.ts:64\n                        \n                    \n\n            \n                \n                    The symbol of the currency (e.g., '₹').\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        symbol_native\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'native symbol of currency', example: '₹'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/currency.ts:76\n                        \n                    \n\n            \n                \n                    The native symbol of the currency (e.g., '₹').\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nimport { Exclude } from 'class-transformer';\n\n/**\n * @fileoverview\n * This file defines the `Currency` class, which represents the data structure of a currency entity.\n * It includes properties that describe the currency and uses decorators for Swagger documentation\n * and data transformation.\n *\n * @module\n * @description\n * The `Currency` class is used to define the structure of a currency object, including its code, name,\n * plural name, symbol, native symbol, decimal digits, and rounding. The class also uses decorators\n * to configure how the properties should be documented and transformed.\n */\nexport class Currency {\n    /**\n     * The code of the currency (e.g., 'INR').\n     * @example 'INR'\n     */\n\n    @ApiProperty({\n        type: String,\n        description: 'Currency Code',\n        example: 'INR',\n    })\n    code: string;\n\n    /**\n     * The name of the currency (e.g., 'Indian Rupee').\n     * @example 'Indian Rupee'\n     */\n\n    @ApiProperty({\n        type: String,\n        description: 'name of currency',\n        example: 'Indian Rupee',\n    })\n    name: string;\n\n    /**\n     * The plural name of the currency (e.g., 'Indian rupees').\n     * @example 'Indian rupees'\n     */\n\n    @ApiProperty({\n        type: String,\n        description: 'plural name of currency',\n        example: 'Indian rupees',\n    })\n    name_plural: string;\n\n    /**\n     * The symbol of the currency (e.g., '₹').\n     * @example '₹'\n     */\n\n    @ApiProperty({\n        type: String,\n        description: 'Symbol of currency',\n        example: '₹',\n    })\n    symbol: string;\n\n    /**\n     * The native symbol of the currency (e.g., '₹').\n     * @example '₹'\n     */\n\n    @ApiProperty({\n        type: String,\n        description: 'native symbol of currency',\n        example: '₹',\n    })\n    symbol_native: string;\n\n    /**\n     * The number of decimal digits used for the currency.\n     * @example 2\n     */\n\n    @ApiProperty({\n        type: Number,\n        description: 'Decimal digits',\n        example: '2',\n    })\n    decimal_digits: number;\n\n    /**\n     * The rounding precision used for the currency.\n     * @example 0\n     */\n\n    @ApiProperty({\n        type: Number,\n        description: 'Rounding',\n        example: '0',\n    })\n    rounding: number;\n\n    /**\n     * The unique identifier for the currency.\n     * This property is excluded from the plain representation of the object.\n     */\n\n    @Exclude({ toPlainOnly: true })\n    id?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DynamicQueryBuilder.html":{"url":"classes/DynamicQueryBuilder.html","title":"class - DynamicQueryBuilder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DynamicQueryBuilder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/providers/dynamic-query.service-to-be-remove.ts\n        \n\n\n            \n                Description\n            \n            \n                Class to build dynamic SQL queries.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                buildDeleteQuery\n                            \n                            \n                                buildInsertQuery\n                            \n                            \n                                buildSelectQuery\n                            \n                            \n                                buildUpdateQuery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        buildDeleteQuery\n                        \n                    \n                \n            \n            \n                \nbuildDeleteQuery(options: QueryOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/providers/dynamic-query.service-to-be-remove.ts:235\n                        \n                    \n\n\n            \n                \n                        Builds a DELETE SQL query.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                            QueryOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nOptions for the DELETE query.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         object\n\n                        \n                            \n                                \nAn object containing the query name, type, and the SQL syntax.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildInsertQuery\n                        \n                    \n                \n            \n            \n                \nbuildInsertQuery(options: QueryOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/providers/dynamic-query.service-to-be-remove.ts:116\n                        \n                    \n\n\n            \n                \n                        Builds an INSERT SQL query.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                            QueryOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nOptions for the INSERT query.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         object\n\n                        \n                            \n                                \nAn object containing the query name, type, and the SQL syntax.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildSelectQuery\n                        \n                    \n                \n            \n            \n                \nbuildSelectQuery(options: QueryOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/providers/dynamic-query.service-to-be-remove.ts:145\n                        \n                    \n\n\n            \n                \n                        Builds a SELECT SQL query.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                            QueryOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nOptions for the SELECT query.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         object\n\n                        \n                            \n                                \nAn object containing the query name, type, and the SQL syntax.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildUpdateQuery\n                        \n                    \n                \n            \n            \n                \nbuildUpdateQuery(options: QueryOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/providers/dynamic-query.service-to-be-remove.ts:195\n                        \n                    \n\n\n            \n                \n                        Builds an UPDATE SQL query.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                            QueryOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nOptions for the UPDATE query.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         object\n\n                        \n                            \n                                \nAn object containing the query name, type, SQL syntax, and values to be used.\n\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as _ from 'lodash';\n\n/**\n * Options for building queries.\n *\n * @export\n * @interface QueryOptions\n */\n\nexport interface QueryOptions {\n    /**\n     * Name of the query.\n     *\n     * @type {string}\n     * @memberof QueryOptions\n     */\n\n    queryName?: string;\n\n    /**\n     * Type of the query (e.g., INSERT, SELECT, UPDATE, DELETE).\n     *\n     * @type {string}\n     * @memberof QueryOptions\n     */\n\n    queryType?: string;\n\n    /**\n     * Name of the table to perform the query on.\n     *\n     * @type {string}\n     * @memberof QueryOptions\n     */\n\n    table: string;\n\n    /**\n     * List of fields to include in the query (e.g., columns for SELECT, INSERT, or UPDATE).\n     *\n     * @type {string[]}\n     * @memberof QueryOptions\n     */\n\n    fields?: string[];\n\n    /**\n     * Values to be used in the query (e.g., for INSERT or UPDATE operations).\n     *\n     * @type {Record}\n     * @memberof QueryOptions\n     */\n\n    values?: Record;\n\n    /**\n     * Conditions for the query (e.g., WHERE clauses).\n     *\n     * @type {Record}\n     * @memberof QueryOptions\n     */\n\n    conditions?: Record;\n\n    /**\n     * Optional conditions for the query.\n     *\n     * @type {Record}\n     * @memberof QueryOptions\n     */\n\n    optionalConditions?: Record;\n\n    /**\n     * Join clauses to include in the query.\n     *\n     * @type {string[]}\n     * @memberof QueryOptions\n     */\n\n    joins?: string[];\n\n    /**\n     * Fields to return from the query.\n     *\n     * @type {string[]}\n     * @memberof QueryOptions\n     */\n\n    returningFields?: string[];\n\n    /**\n     * Type of delete operation ('soft' or 'hard').\n     *\n     * @type {string}\n     * @memberof QueryOptions\n     */\n    deleteType?: string;\n}\n\n/**\n * Class to build dynamic SQL queries.\n *\n * @export\n * @class DynamicQueryBuilder\n */\nexport class DynamicQueryBuilder {\n    /**\n     * Builds an INSERT SQL query.\n     *\n     * @param {QueryOptions} options - Options for the INSERT query.\n     * @returns {object} - An object containing the query name, type, and the SQL syntax.\n     * @memberof DynamicQueryBuilder\n     */\n\n    buildInsertQuery(options: QueryOptions): object {\n        const { queryName, queryType, fields, table, values = {}, returningFields = [] } = options;\n        const conds = _.pick(values, fields);\n        const keys = _.keys(conds);\n        const vals = _.values(conds);\n\n        const returningClause = returningFields.length\n            ? `RETURNING ${returningFields.join(', ')}`\n            : '';\n\n        const sql = `INSERT INTO ${table} (${keys.join()}) VALUES ('${vals.join(\"','\")}') ${returningClause};`;\n\n        return {\n            name: queryName ? queryName : 'add',\n            type: queryType ? queryType : 'INSERT',\n            syntax: () => {\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Builds a SELECT SQL query.\n     *\n     * @param {QueryOptions} options - Options for the SELECT query.\n     * @returns {object} - An object containing the query name, type, and the SQL syntax.\n     * @memberof DynamicQueryBuilder\n     */\n\n    buildSelectQuery(options: QueryOptions): object {\n        const {\n            queryName,\n            queryType,\n            table,\n            fields = ['*'],\n            conditions = {},\n            joins = [],\n            optionalConditions = null,\n        } = options;\n\n        const whereClauses = Object.keys(conditions).map((key) => {\n            const value = conditions[key];\n            return typeof value === 'string' ? `${key} = '${value}'` : `${key} = ${value}`;\n        });\n\n        if (optionalConditions) {\n            // Adding optional conditions dynamically\n            Object.keys(optionalConditions).forEach((key) => {\n                const value = optionalConditions[key];\n                if (value) {\n                    whereClauses.push(\n                        typeof value === 'string' ? `${key} != '${value}'` : `${key} != ${value}`\n                    );\n                }\n            });\n        }\n\n        const whereClause = whereClauses.length ? `WHERE ${whereClauses.join(' AND ')}` : '';\n        const joinClause = joins.length ? joins.join(' ') : '';\n\n        const sql = `SELECT ${fields.join(', ')} FROM ${table} ${joinClause} ${whereClause}`;\n\n        return {\n            name: queryName ? queryName : 'find',\n            type: queryType ? queryType : 'SELECT_ONE',\n            syntax: () => {\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Builds an UPDATE SQL query.\n     *\n     * @param {QueryOptions} options - Options for the UPDATE query.\n     * @returns {object} - An object containing the query name, type, SQL syntax, and values to be used.\n     * @memberof DynamicQueryBuilder\n     */\n\n    buildUpdateQuery(options: QueryOptions): object {\n        const { table, values = {}, conditions = {}, returningFields = [] } = options;\n\n        const setClauses = Object.keys(values).map((key, index) => `${key} = $${index + 1}`);\n        const whereClauses = Object.keys(conditions).map(\n            (key, index) => `${key} = $${index + Object.keys(values).length + 1}`\n        );\n\n        const returningClause = returningFields.length\n            ? `RETURNING ${returningFields.join(', ')}`\n            : '';\n\n        const sql = `UPDATE ${table} SET ${setClauses.join(', ')} WHERE ${whereClauses.join(' AND ')} ${returningClause};`;\n\n        return {\n            name: 'update',\n            type: 'UPDATE',\n            sql,\n            values: [...Object.values(values), ...Object.values(conditions)],\n        };\n    }\n\n    //     return {\n    //   name: `delete`,\n    //   type: `UPDATE`,\n    //   syntax: (idArea: number) => {\n    //     const sql = `UPDATE Area SET Status = 127 WHERE Status = 1 AND idArea = ${idArea}`;\n\n    //     return sql;\n    //   },\n    // };\n\n    /**\n     * Builds a DELETE SQL query.\n     *\n     * @param {QueryOptions} options - Options for the DELETE query.\n     * @returns {object} - An object containing the query name, type, and the SQL syntax.\n     * @memberof DynamicQueryBuilder\n     */\n\n    buildDeleteQuery(options: QueryOptions): object {\n        const {\n            queryName,\n            queryType,\n            table,\n            conditions = {},\n            optionalConditions = null,\n            joins = [],\n            returningFields = [],\n            deleteType = 'soft',\n        } = options;\n\n        const whereClauses = Object.keys(conditions).map((key) => {\n            const value = conditions[key];\n            return typeof value === 'string' ? `${key} = '${value}'` : `${key} = ${value}`;\n        });\n\n        if (optionalConditions) {\n            // Adding optional conditions dynamically\n            Object.keys(optionalConditions).forEach((key) => {\n                const value = optionalConditions[key];\n                if (value) {\n                    whereClauses.push(\n                        typeof value === 'string' ? `${key} != '${value}'` : `${key} != ${value}`\n                    );\n                }\n            });\n        }\n\n        const whereClause = whereClauses.length ? `WHERE ${whereClauses.join(' AND ')}` : '';\n        const joinClause = joins.length ? joins.join(' ') : '';\n\n        // const whereClauses = Object.keys(conditions).map((key, index) => `${key} = $${index + 1}`);\n        // const whereClause = whereClauses.length ? `WHERE ${whereClauses.join(' AND ')}` : '';\n\n        const returningClause = returningFields.length\n            ? `RETURNING ${returningFields.join(', ')}`\n            : '';\n\n        let sql: string;\n        if (deleteType === 'soft') {\n            sql = `UPDATE ${table} SET status = 127 ${whereClause} ${returningClause};`;\n        } else {\n            sql = `DELETE FROM ${table} ${joinClause} ${whereClause} ${returningClause};`;\n        }\n\n        console.log('QQQQQQQQQQQQQQQQQQQQ', sql);\n\n        return {\n            name: queryName ? queryName : 'delete',\n            type: queryType ? queryType : 'DELETE',\n            syntax: () => {\n                return sql;\n            },\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EnvVarAppConfigValidator.html":{"url":"classes/EnvVarAppConfigValidator.html","title":"class - EnvVarAppConfigValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EnvVarAppConfigValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/helper/services/config.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Config service\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                API_PREFIX\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                APP_PORT\n                            \n                            \n                                    \n                                    \n                                BACKEND_DOMAIN\n                            \n                            \n                                    \n                                    \n                                FRONTEND_DOMAIN\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        API_PREFIX\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/helper/services/config.service.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        APP_PORT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@Min(0)@Max(65535)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/helper/services/config.service.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        BACKEND_DOMAIN\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUrl({require_tld: false})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/helper/services/config.service.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        FRONTEND_DOMAIN\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUrl({require_tld: false})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/helper/services/config.service.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsInt, IsOptional, IsString, ValidateIf, IsUrl, Max, Min } from 'class-validator';\nimport * as dotenv from 'dotenv';\n\n// import { FileDriver } from '../../../core/enum/file.type';\nimport { IAppConfig } from '../../../core/interfaces/app.interfaces';\nimport { IAwsConfig } from '../../../core/interfaces/aws.interfaces';\nimport { IFileConfig } from '../../../core/interfaces/file.interfaces';\nimport { IJWTConfig } from '../../../core/interfaces/jwt.interfaces';\nimport { INodeEmailerConfig } from '../../../core/interfaces/node-emailer.interfaces';\n// import { IPostgreSQLConfig } from '../../../core/interfaces/postgres.interfaces';\nimport { ISendGridConfig } from '../../../core/interfaces/sendgrid.interfaces';\nimport { ISMSConfig } from '../../../core/interfaces/sms.interfaces';\nimport { IUploadFileConfig } from '../../../core/interfaces/upload-file.interfaces';\nimport validateConfig from '../../../utils/validate-config';\n\n/**\n * Config service\n * @export\n * @class ConfigService\n */\n\nclass EnvVarAppConfigValidator {\n    @IsInt()\n    @Min(0)\n    @Max(65535)\n    @IsOptional()\n    APP_PORT: number;\n\n    @IsUrl({ require_tld: false })\n    @IsOptional()\n    FRONTEND_DOMAIN: string;\n\n    @IsUrl({ require_tld: false })\n    @IsOptional()\n    BACKEND_DOMAIN: string;\n\n    @IsString()\n    @IsOptional()\n    API_PREFIX: string;\n}\n\n// class EnvVarFileConfigValidator {\n//     // @IsEnum(FileDriver)\n//     // FILE_DRIVER: FileDriver;\n\n//     // @ValidateIf((envValues) =>\n//     //     [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n//     // )\n//     // @IsString()\n//     // AWS_ACCESS_KEY_ID: string;\n\n//     // @ValidateIf((envValues) =>\n//     //     [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n//     // )\n//     // @IsString()\n//     // AWS_SECRET_ACCESS_KEY: string;\n\n//     // @ValidateIf((envValues) =>\n//     //     [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n//     // )\n//     // @IsString()\n//     // AWS_DEFAULT_S3_BUCKET: string;\n\n//     // @ValidateIf((envValues) =>\n//     //     [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n//     // )\n//     @IsString()\n//     AWS_S3_REGION: string;\n// }\n\nexport class ConfigService {\n    constructor() {\n        const nodeEnv = this.nodeEnv;\n        // dotenv.config({\n        //   path: nodeEnv === \"production\" ? \".env\" : `.env.${nodeEnv}`,\n        // });\n        dotenv.config({\n            path:\n                nodeEnv === 'production'\n                    ? '.env.staging'\n                    : nodeEnv === 'staging'\n                      ? '.env.staging'\n                      : '.env.development',\n        });\n\n        // // Replace \\\\n with \\n to support multiline strings in AWS\n        // for (const envName of Object.keys(process.env)) {\n        //   process.env[envName] = process.env[envName].replace(/\\\\n/g, \"\\n\");\n        // }\n    }\n\n    public get(key: string): string {\n        return process.env[key] || 'undefined';\n    }\n\n    public getNumber(key: string): number {\n        return Number(this.get(key));\n    }\n\n    public getBoolean(key: string): boolean {\n        return Boolean(this.get(key));\n    }\n\n    get nodeEnv(): string {\n        return this.get('NODE_ENV') || 'development';\n    }\n\n    // get typeOrmConfig(): TypeOrmModuleOptions {\n    //   const dbConfig = {\n    //     // eslint-disable-next-line @typescript-eslint/prefer-as-const\n    //     type: \"mysql\" as \"mysql\",\n    //     host: this.get(\"DATABASE_HOST\"),\n    //     port: this.getNumber(\"DATABASE_PORT\"),\n    //     username: this.get(\"DATABASE_USER\"),\n    //     password: this.get(\"DATABASE_PASS\"),\n    //     database: this.get(\"DATABASE_SCHEMA\"),\n    //     authSource: \"admin\",\n    //     synchronize: true,\n    //     multipleStatements: true,\n    //     entities: [\"src/**/**.entity{.ts,.js}\"],\n    //     bigNumberStrings: false,\n    //   };\n    //   return dbConfig;\n    // }\n\n    // get appConfig(): IAppConfig {\n    //     validateConfig(process.env, EnvVarAppConfigValidator);\n    //     return {\n    //         name: this.get('APP_NAME') || '',\n    //         workingDirectory: process.env.PWD || process.cwd(),\n    //         frontendDomain: this.get('FRONTEND_DOMAIN') || '',\n    //         backendDomain: this.get('BACKEND_DOMAIN') || '',\n    //         port: this.getNumber('PORT'),\n    //         apiPrefix: this.get('API_PREFIX') || '',\n    //     };\n    // }\n\n    get prismaConfig(): string {\n        return `postgresql://${this.get('POSTGRES_USER')}:${this.get('POSTGRES_PASSWORD')}@${this.get('POSTGRES_HOST')}:${this.get('POSTGRES_PORT')}/${this.get('POSTGRES_NAME')}?connection_limit=${this.get('POSTGRES_CONNECTION_LIMIT')}&pool_timeout=${this.get('POSTGRES_POOL_TIMEOUT')}&schema=${this.get('POSTGRES_SCHEMA')}`;\n    }\n\n    // get awsS3Config(): IAwsConfig {\n    //     return {\n    //         AWS_S3_ACCESS_KEY_ID: this.get('AWS_S3_ACCESS_KEY_ID'),\n    //         AWS_S3_SECRET_ACCESS_KEY: this.get('AWS_S3_SECRET_ACCESS_KEY'),\n    //         AWS_S3_BUCKET_NAME: this.get('AWS_S3_BUCKET_NAME'),\n    //         AWS_S3_DEFAULT_REGION: this.get('AWS_S3_DEFAULT_REGION'),\n    //         AWS_S3_TEMP_DIRECTORY: this.get('AWS_S3_TEMP_DIRECTORY'),\n    //         AWS_S3_ENDPOINT: this.get('AWS_S3_ENDPOINT'),\n    //         AWS_S3_SERVER_HOST: this.get('AWS_S3_SERVER_HOST'),\n    //         AWS_S3_COMPANION_SECRET: this.get('AWS_S3_COMPANION_SECRET'),\n    //         TUS_STORAGE_DRIVER: this.get('TUS_STORAGE_DRIVER'),\n    //     };\n    // }\n\n    // get qrConfig() {\n    //     return {\n    //         QR_IMAGE: this.get('QR_IMAGE') || '',\n    //         QR_IMAGE_PATH: this.get('QR_IMAGE_PATH') || '',\n    //         QR_IMAGE_PATH_SALT: this.get('QR_IMAGE_PATH_SALT') || '',\n    //     };\n    // }\n\n    // get jwtConfig(): IJWTConfig {\n    //     return {\n    //         secret: this.get('JWT_SECRET_KEY'),\n    //         algorithm: this.get('JWT_ALGORITHM'),\n    //         issuer: this.get('JWT_ISSUER'),\n    //         audience: this.get('JWT_AUDIENCE'),\n    //         expiresInSeconds: this.getNumber('JWT_EXPIRES_IN_SECONDS'),\n    //         expirationTime: this.getNumber('JWT_EXPIRATION_TIME'),\n    //     };\n    // }\n\n    // get sendgridConfig(): ISendGridConfig {\n    //     return {\n    //         SENDGRID_API_KEY: this.get('SENDGRID_API_KEY'),\n    //         FROM_EMAIL: this.get('FROM_EMAIL'),\n    //         TO_EMAIL: this.get('TO_EMAIL'),\n    //         WELCOME_EMAIL: this.get('WELCOME_EMAIL'),\n    //     };\n    // }\n\n    // get nodeemailerConfig(): INodeEmailerConfig {\n    //     return {\n    //         NODE_EMAILER_HOST: this.get('NODE_EMAILER_HOST'),\n    //         NODE_EMAILER_PORT: this.getNumber('NODE_EMAILER_PORT'),\n    //         NODE_EMAILER_USER: this.get('NODE_EMAILER_USER'),\n    //         NODE_EMAILER_PASSWORD: this.get('NODE_EMAILER_PASSWORD'),\n    //         NODE_EMAILER_FROM_EMAIL: this.get('NODE_EMAILER_FROM_EMAIL'),\n    //         NODE_EMAILER_TO_EMAIL: this.get('NODE_EMAILER_TO_EMAIL'),\n    //     };\n    // }\n\n    // get smsConfig(): ISMSConfig {\n    //     return {\n    //         SMS_PROVIDER_NAME: this.get('SMS_PROVIDER_NAME'),\n    //         API_KEY: this.get('API_KEY'),\n    //         SENDER_ID: this.get('SENDER_ID'),\n    //     };\n    // }\n\n    // get uploadFileConfig(): IUploadFileConfig {\n    //     return {\n    //         TEMP_FILE_UPLOAD_URL: this.get('TEMP_FILE_UPLOAD_URL'),\n    //         FILE_UPLOAD_DESTINATION: this.get('FILE_UPLOAD_DESTINATION'),\n    //         MAX_UPLOAD_FILE_SIZE: this.getNumber('MAX_UPLOAD_FILE_SIZE'),\n    //         PROFILE_PIC_FILE_PATH: this.get('PROFILE_PIC_FILE_PATH'),\n    //         MULTIPLE_FILE_PATH: this.get('MULTIPLE_FILE_PATH'),\n    //     };\n    // }\n\n    // get fileConfig(): IFileConfig {\n    //     // validateConfig(process.env, EnvVarFileConfigValidator);\n    //     return {\n    //         driver: (this.get('FILE_DRIVER') as any | undefined) ?? undefined,\n    //         accessKeyId: this.get('AWS_ACCESS_KEY_ID'),\n    //         secretAccessKey: this.get('AWS_SECRET_ACCESS_KEY'),\n    //         awsDefaultS3Bucket: this.get('AWS_DEFAULT_S3_BUCKET'),\n    //         awsS3Region: this.get('AWS_S3_REGION'),\n    //         maxFileSize: 5242880, // 5mb\n    //     };\n    // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EnvironmentVariablesValidator.html":{"url":"classes/EnvironmentVariablesValidator.html","title":"class - EnvironmentVariablesValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EnvironmentVariablesValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/app.config.ts\n        \n\n\n            \n                Description\n            \n            \n                Class to validate environment variables using class-validator decorators.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                API_PREFIX\n                            \n                            \n                                    \n                                    \n                                APP_DESCRIPTION\n                            \n                            \n                                    \n                                    \n                                APP_NAME\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                APP_PORT\n                            \n                            \n                                    \n                                    \n                                APP_PREFIX\n                            \n                            \n                                    \n                                    \n                                APP_VERSION\n                            \n                            \n                                    \n                                    \n                                BACKEND_DOMAIN\n                            \n                            \n                                    \n                                    \n                                FRONTEND_DOMAIN\n                            \n                            \n                                    \n                                    \n                                NODE_ENV\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        API_PREFIX\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/app.config.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        APP_DESCRIPTION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/app.config.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        APP_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/app.config.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        APP_PORT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@Min(0)@Max(65535)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/app.config.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        APP_PREFIX\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/app.config.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        APP_VERSION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/app.config.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        BACKEND_DOMAIN\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUrl({require_tld: false})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/app.config.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        FRONTEND_DOMAIN\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUrl({require_tld: false})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/app.config.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        NODE_ENV\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Environment\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(Environment)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/app.config.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { registerAs } from '@nestjs/config';\n\nimport { IsEnum, IsInt, IsOptional, IsString, IsUrl, Max, Min } from 'class-validator';\n\nimport { AppConfig } from '@config/type/app-config.type';\nimport validateConfig from '@utils/validate-config';\n\nenum Environment {\n    Development = 'development',\n    Production = 'production',\n    Staging = 'staging',\n    Test = 'testing',\n}\n\n/**\n * Class to validate environment variables using class-validator decorators.\n *\n * @export\n * @class EnvironmentVariablesValidator\n */\n\nclass EnvironmentVariablesValidator {\n    @IsEnum(Environment)\n    @IsOptional()\n    NODE_ENV: Environment;\n\n    @IsString()\n    @IsOptional()\n    APP_NAME: string;\n\n    @IsString()\n    @IsOptional()\n    APP_DESCRIPTION: string;\n\n    @IsString()\n    @IsOptional()\n    APP_VERSION: string;\n\n    @IsString()\n    @IsOptional()\n    APP_PREFIX: string;\n\n    @IsInt()\n    @Min(0)\n    @Max(65535)\n    @IsOptional()\n    APP_PORT: number;\n\n    @IsUrl({ require_tld: false })\n    @IsOptional()\n    FRONTEND_DOMAIN: string;\n\n    @IsUrl({ require_tld: false })\n    @IsOptional()\n    BACKEND_DOMAIN: string;\n\n    @IsString()\n    @IsOptional()\n    API_PREFIX: string;\n}\n\n/**\n * Configuration registration and validation.\n *\n * Registers the configuration with NestJS and validates the environment variables\n * using `EnvironmentVariablesValidator`. Returns an `AppConfig` object with default values\n * for the application configuration.\n *\n * @export\n * @function\n * @returns {AppConfig} The application configuration.\n */\n\nexport default registerAs('app', (): AppConfig => {\n    validateConfig(process.env, EnvironmentVariablesValidator);\n\n    return {\n        nodeEnv: process.env.NODE_ENV || 'development',\n        name: process.env.APP_NAME || 'app',\n        description: process.env.APP_DESCRIPTION || 'description',\n        version: process.env.APP_VERSION || '1',\n        appPrefix: process.env.APP_PREFIX || 'docs',\n        workingDirectory: process.env.PWD || process.cwd(),\n        frontendDomain: process.env.FRONTEND_DOMAIN,\n        backendDomain: process.env.BACKEND_DOMAIN ?? 'http://localhost',\n        port: process.env.APP_PORT\n            ? parseInt(process.env.APP_PORT, 10)\n            : process.env.PORT\n              ? parseInt(process.env.PORT, 10)\n              : 3000,\n        apiPrefix: process.env.API_PREFIX || 'api',\n    };\n});\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EnvironmentVariablesValidator-1.html":{"url":"classes/EnvironmentVariablesValidator-1.html","title":"class - EnvironmentVariablesValidator-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EnvironmentVariablesValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/database.config.ts\n        \n\n\n            \n                Description\n            \n            \n                Class to validate environment variables using class-validator decorators.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                DATABASE_CA\n                            \n                            \n                                    \n                                    \n                                DATABASE_CERT\n                            \n                            \n                                    \n                                    \n                                DATABASE_KEY\n                            \n                            \n                                    \n                                    \n                                DATABASE_REJECT_UNAUTHORIZED\n                            \n                            \n                                    \n                                    \n                                DATABASE_SSL_ENABLED\n                            \n                            \n                                    \n                                    \n                                DATABASE_SYNCHRONIZE\n                            \n                            \n                                    \n                                    \n                                DATABASE_URL\n                            \n                            \n                                    \n                                    \n                                POSTGRES_HOST\n                            \n                            \n                                    \n                                    \n                                POSTGRES_MAX_CONNECTIONS\n                            \n                            \n                                    \n                                    \n                                POSTGRES_NAME\n                            \n                            \n                                    \n                                    \n                                POSTGRES_PASSWORD\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                POSTGRES_PORT\n                            \n                            \n                                    \n                                    \n                                POSTGRES_USER\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        DATABASE_CA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:139\n                        \n                    \n\n            \n                \n                    Path to the SSL CA certificate.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        DATABASE_CERT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:161\n                        \n                    \n\n            \n                \n                    Path to the SSL certificate file.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        DATABASE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:150\n                        \n                    \n\n            \n                \n                    Path to the SSL key file.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        DATABASE_REJECT_UNAUTHORIZED\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:128\n                        \n                    \n\n            \n                \n                    Whether to reject unauthorized SSL certificates.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        DATABASE_SSL_ENABLED\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:117\n                        \n                    \n\n            \n                \n                    Whether to enable SSL for the database connection.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        DATABASE_SYNCHRONIZE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:95\n                        \n                    \n\n            \n                \n                    Whether to synchronize the database schema on every application start.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        DATABASE_URL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateIf(envValues => envValues.DATABASE_URL)@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:26\n                        \n                    \n\n            \n                \n                    URL for the database connection. Overrides individual PostgreSQL settings if provided.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        POSTGRES_HOST\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateIf(envValues => )@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:37\n                        \n                    \n\n            \n                \n                    PostgreSQL host if DATABASE_URL is not provided.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        POSTGRES_MAX_CONNECTIONS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:106\n                        \n                    \n\n            \n                \n                    Maximum number of PostgreSQL connections.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        POSTGRES_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateIf(envValues => )@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:73\n                        \n                    \n\n            \n                \n                    PostgreSQL database name if DATABASE_URL is not provided.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        POSTGRES_PASSWORD\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateIf(envValues => )@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:62\n                        \n                    \n\n            \n                \n                    PostgreSQL password if DATABASE_URL is not provided.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        POSTGRES_PORT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateIf(envValues => )@IsInt()@Min(0)@Max(65535)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:51\n                        \n                    \n\n            \n                \n                    PostgreSQL port if DATABASE_URL is not provided.\nMust be between 0 and 65535.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        POSTGRES_USER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateIf(envValues => )@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:84\n                        \n                    \n\n            \n                \n                    PostgreSQL user if DATABASE_URL is not provided.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { registerAs } from '@nestjs/config';\n\nimport { IsOptional, IsInt, Min, Max, IsString, ValidateIf, IsBoolean } from 'class-validator';\n\nimport validateConfig from '@utils/validate-config';\n\nimport { DatabaseConfig } from './type/database-config.type';\n\n/**\n * Class to validate environment variables using class-validator decorators.\n *\n * @export\n * @class EnvironmentVariablesValidator\n */\n\nclass EnvironmentVariablesValidator {\n    /**\n     * URL for the database connection. Overrides individual PostgreSQL settings if provided.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @ValidateIf((envValues) => envValues.DATABASE_URL)\n    @IsString()\n    DATABASE_URL: string;\n\n    /**\n     * PostgreSQL host if `DATABASE_URL` is not provided.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @ValidateIf((envValues) => !envValues.DATABASE_URL)\n    @IsString()\n    POSTGRES_HOST: string;\n\n    /**\n     * PostgreSQL port if `DATABASE_URL` is not provided.\n     * Must be between 0 and 65535.\n     *\n     * @type {number}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @ValidateIf((envValues) => !envValues.DATABASE_URL)\n    @IsInt()\n    @Min(0)\n    @Max(65535)\n    POSTGRES_PORT: number;\n\n    /**\n     * PostgreSQL password if `DATABASE_URL` is not provided.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @ValidateIf((envValues) => !envValues.DATABASE_URL)\n    @IsString()\n    POSTGRES_PASSWORD: string;\n\n    /**\n     * PostgreSQL database name if `DATABASE_URL` is not provided.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @ValidateIf((envValues) => !envValues.DATABASE_URL)\n    @IsString()\n    POSTGRES_NAME: string;\n\n    /**\n     * PostgreSQL user if `DATABASE_URL` is not provided.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @ValidateIf((envValues) => !envValues.DATABASE_URL)\n    @IsString()\n    POSTGRES_USER: string;\n\n    /**\n     * Whether to synchronize the database schema on every application start.\n     *\n     * @type {boolean}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @IsBoolean()\n    @IsOptional()\n    DATABASE_SYNCHRONIZE: boolean;\n\n    /**\n     * Maximum number of PostgreSQL connections.\n     *\n     * @type {number}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @IsInt()\n    @IsOptional()\n    POSTGRES_MAX_CONNECTIONS: number;\n\n    /**\n     * Whether to enable SSL for the database connection.\n     *\n     * @type {boolean}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @IsBoolean()\n    @IsOptional()\n    DATABASE_SSL_ENABLED: boolean;\n\n    /**\n     * Whether to reject unauthorized SSL certificates.\n     *\n     * @type {boolean}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @IsBoolean()\n    @IsOptional()\n    DATABASE_REJECT_UNAUTHORIZED: boolean;\n\n    /**\n     * Path to the SSL CA certificate.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @IsString()\n    @IsOptional()\n    DATABASE_CA: string;\n\n    /**\n     * Path to the SSL key file.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @IsString()\n    @IsOptional()\n    DATABASE_KEY: string;\n\n    /**\n     * Path to the SSL certificate file.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @IsString()\n    @IsOptional()\n    DATABASE_CERT: string;\n}\n\n/**\n * Configuration registration and validation for database settings.\n *\n * Registers the database configuration with NestJS and validates the environment variables\n * using `EnvironmentVariablesValidator`. Returns a `DatabaseConfig` object with default values\n * and environment variable values for the database configuration.\n *\n * @export\n * @function\n * @returns {DatabaseConfig} The database configuration.\n */\n\nexport default registerAs('database', (): DatabaseConfig => {\n    validateConfig(process.env, EnvironmentVariablesValidator);\n\n    return {\n        url: `postgresql://${process.env.POSTGRES_USER}:${process.env.POSTGRES_PASSWORD}@${process.env.POSTGRES_HOST}:${process.env.POSTGRES_PORT}/${process.env.POSTGRES_NAME}?connection_limit=${process.env.POSTGRES_MAX_CONNECTIONS}&pool_timeout=${process.env.POSTGRES_POOL_TIMEOUT}&schema=${process.env.POSTGRES_SCHEMA}`,\n        host: process.env.POSTGRES_HOST,\n        port: process.env.POSTGRES_PORT ? parseInt(process.env.POSTGRES_PORT, 10) : 5432,\n        password: process.env.POSTGRES_PASSWORD,\n        name: process.env.POSTGRES_NAME,\n        username: process.env.POSTGRES_USER,\n        synchronize: process.env.DATABASE_SYNCHRONIZE === 'true',\n        maxConnections: process.env.POSTGRES_MAX_CONNECTIONS\n            ? parseInt(process.env.POSTGRES_MAX_CONNECTIONS, 10)\n            : 100,\n        poolTimeout: process.env.POSTGRES_POOL_TIMEOUT\n            ? parseInt(process.env.POSTGRES_POOL_TIMEOUT, 10)\n            : 100,\n        schema: process.env.POSTGRES_SCHEMA ? process.env.POSTGRES_SCHEMA : 'public',\n        sslEnabled: process.env.DATABASE_SSL_ENABLED === 'true',\n        rejectUnauthorized: process.env.DATABASE_REJECT_UNAUTHORIZED === 'true',\n        ca: process.env.DATABASE_CA,\n        key: process.env.DATABASE_KEY,\n        cert: process.env.DATABASE_CERT,\n    };\n});\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EnvironmentVariablesValidator-2.html":{"url":"classes/EnvironmentVariablesValidator-2.html","title":"class - EnvironmentVariablesValidator-2","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EnvironmentVariablesValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/file.config.ts\n        \n\n\n            \n                Description\n            \n            \n                Class to validate environment variables related to file storage configuration.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                AWS_ACCESS_KEY_ID\n                            \n                            \n                                    \n                                    \n                                AWS_DEFAULT_S3_BUCKET\n                            \n                            \n                                    \n                                    \n                                AWS_S3_REGION\n                            \n                            \n                                    \n                                    \n                                AWS_SECRET_ACCESS_KEY\n                            \n                            \n                                    \n                                    \n                                FILE_DRIVER\n                            \n                            \n                                    \n                                    \n                                MAX_FILE_SIZE\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        AWS_ACCESS_KEY_ID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateIf(envValues => )@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/file.config.ts:38\n                        \n                    \n\n            \n                \n                    AWS access key ID, required if using S3 or presigned S3 driver.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        AWS_DEFAULT_S3_BUCKET\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateIf(envValues => )@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/file.config.ts:64\n                        \n                    \n\n            \n                \n                    Default S3 bucket name, required if using S3 or presigned S3 driver.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        AWS_S3_REGION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateIf(envValues => )@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/file.config.ts:77\n                        \n                    \n\n            \n                \n                    AWS S3 region, required if using S3 or presigned S3 driver.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        AWS_SECRET_ACCESS_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateIf(envValues => )@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/file.config.ts:51\n                        \n                    \n\n            \n                \n                    AWS secret access key, required if using S3 or presigned S3 driver.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        FILE_DRIVER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FileDriver\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(FileDriver)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/file.config.ts:25\n                        \n                    \n\n            \n                \n                    Driver for file storage. Specifies the method of file storage, e.g., local file system or S3.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        MAX_FILE_SIZE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/file.config.ts:88\n                        \n                    \n\n            \n                \n                    Maximum file size allowed for uploads, in bytes.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { registerAs } from '@nestjs/config';\n\nimport { IsEnum, IsString, ValidateIf, IsOptional } from 'class-validator';\n\nimport { FileDriver, FileConfig } from '@config/type/file-config.type';\nimport validateConfig from '@utils/validate-config';\n\n/**\n * Class to validate environment variables related to file storage configuration.\n *\n * @export\n * @class EnvironmentVariablesValidator\n */\n\nclass EnvironmentVariablesValidator {\n    /**\n     * Driver for file storage. Specifies the method of file storage, e.g., local file system or S3.\n     *\n     * @type {FileDriver}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @IsEnum(FileDriver)\n    @IsOptional()\n    FILE_DRIVER: FileDriver;\n\n    /**\n     * AWS access key ID, required if using S3 or presigned S3 driver.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @ValidateIf((envValues) =>\n        [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n    )\n    @IsString()\n    AWS_ACCESS_KEY_ID: string;\n\n    /**\n     * AWS secret access key, required if using S3 or presigned S3 driver.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @ValidateIf((envValues) =>\n        [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n    )\n    @IsString()\n    AWS_SECRET_ACCESS_KEY: string;\n\n    /**\n     * Default S3 bucket name, required if using S3 or presigned S3 driver.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @ValidateIf((envValues) =>\n        [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n    )\n    @IsString()\n    AWS_DEFAULT_S3_BUCKET: string;\n\n    /**\n     * AWS S3 region, required if using S3 or presigned S3 driver.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @ValidateIf((envValues) =>\n        [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n    )\n    @IsString()\n    AWS_S3_REGION: string;\n\n    /**\n     * Maximum file size allowed for uploads, in bytes.\n     *\n     * @type {number}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @IsString()\n    @IsOptional()\n    MAX_FILE_SIZE: number;\n}\n\n/**\n * Configuration registration and validation for file storage settings.\n *\n * Registers the file storage configuration with NestJS and validates the environment variables\n * using `EnvironmentVariablesValidator`. Returns a `FileConfig` object with default values\n * and environment variable values for file storage configuration.\n *\n * @export\n * @function\n * @returns {FileConfig} The file storage configuration.\n */\n\nexport default registerAs('file', (): FileConfig => {\n    validateConfig(process.env, EnvironmentVariablesValidator);\n\n    // console.log(\n    //     'registerAS fileconfig',\n    //     (process.env.FILE_DRIVER as FileDriver | undefined) ?? FileDriver.LOCAL,\n    //     process.env.FILE_DRIVER,\n    //     process.env\n    // );\n\n    return {\n        driver: (process.env.FILE_DRIVER as FileDriver | undefined) ?? FileDriver.LOCAL,\n        accessKeyId: process.env.AWS_ACCESS_KEY_ID,\n        secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,\n        awsDefaultS3Bucket: process.env.AWS_DEFAULT_S3_BUCKET,\n        awsS3Region: process.env.AWS_S3_REGION,\n        maxFileSize: process.env.MAX_FILE_SIZE\n            ? parseInt(process.env.MAX_FILE_SIZE, 10)\n            : process.env.MAX_FILE_SIZE\n              ? parseInt(process.env.MAX_FILE_SIZE, 10)\n              : 5242880,\n        // maxFileSize: 5242880, // 5mb\n    };\n});\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileNotImageException.html":{"url":"classes/FileNotImageException.html","title":"class - FileNotImageException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileNotImageException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/exceptions/file-not-image.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Exception class for handling non-image file uploads.\nExample :```typescript\nimport { FileNotImageException } from './path/to/exception';throw new FileNotImageException('Custom error message');\nExample :\n            \n\n            \n                Extends\n            \n            \n                        BadRequestException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message?: string | any, error?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/exceptions/file-not-image.exception.ts:20\n                            \n                        \n\n                \n                    \n                            Creates an instance of FileNotImageException.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                    string | any\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                \nOptional custom error message.\n\n\n                                                        \n                                                \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                \nOptional custom error code.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        'use strict';\n\nimport { BadRequestException } from '@nestjs/common';\n\n/**\n * Exception class for handling non-image file uploads.\n *\n * @description This exception is thrown when a file that is not an image is uploaded, extending the `BadRequestException` from NestJS.\n *\n * @example\n * ```typescript\n * import { FileNotImageException } from './path/to/exception';\n *\n * throw new FileNotImageException('Custom error message');\n * ```\n *\n * @extends {BadRequestException}\n */\n\nexport class FileNotImageException extends BadRequestException {\n    /**\n     * Creates an instance of FileNotImageException.\n     *\n     * @param {string | any} [message] - Optional custom error message.\n     * @param {string} [error] - Optional custom error code.\n     */\n\n    constructor(message?: string | any, error?: string) {\n        if (message) {\n            super(message, error);\n        } else {\n            super('error.file.not_image');\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileResponseDto.html":{"url":"classes/FileResponseDto.html","title":"class - FileResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/local/dto/file-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                The FileResponseDto represents the response object returned when a file is successfully uploaded or processed.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                file\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        file\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FileType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: () => FileType})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/infrastructure/uploader/local/dto/file-response.dto.ts:27\n                        \n                    \n\n            \n                \n                    The file details.\nExample :{\n  id: 'cbcfa8b8-3a25-4adb-a9c6-e325f0d0f3ae',\n  path: '/api/v1/uploads/example-file.jpg'\n}\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiResponseProperty } from '@nestjs/swagger';\n\nimport { FileType } from '../../../../domain/file';\n\n/**\n * @dto FileResponseDto\n *\n * @description\n * The `FileResponseDto` represents the response object returned when a file is successfully uploaded or processed.\n */\nexport class FileResponseDto {\n    /**\n     * The file details.\n     *\n     * @type {FileType}\n     *\n     * @example\n     * {\n     *   id: 'cbcfa8b8-3a25-4adb-a9c6-e325f0d0f3ae',\n     *   path: '/api/v1/uploads/example-file.jpg'\n     * }\n     */\n\n    @ApiResponseProperty({\n        type: () => FileType,\n    })\n    file: FileType;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileResponseDto-1.html":{"url":"classes/FileResponseDto-1.html","title":"class - FileResponseDto-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/s3/dto/file-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data transfer object (DTO) for representing the response format when returning file metadata. This DTO is used to encapsulate the file's information in API responses.\n\n@ApiResponseProperty(): Marks the property for inclusion in Swagger API documentation.\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                file\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        file\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FileType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: () => FileType})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/infrastructure/uploader/s3/dto/file-response.dto.ts:34\n                        \n                    \n\n            \n                \n                    Represents the metadata of the uploaded file.\nExample :{\n    \"id\": \"cbcfa8b8-3a25-4adb-a9c6-e325f0d0f3ae\",\n    \"path\": \"https://example.com/path/to/file.jpg\"\n}\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiResponseProperty } from '@nestjs/swagger';\n\nimport { FileType } from '../../../../domain/file';\n\n/**\n * @dto FileResponseDto\n *\n * @description\n * Data transfer object (DTO) for representing the response format when returning file metadata. This DTO is used to encapsulate the file's information in API responses.\n *\n * @properties\n *\n * @property {FileType} file - Represents the metadata of the uploaded file, including its path and any other relevant information.\n *\n * @decorators\n * - `@ApiResponseProperty()`: Marks the property for inclusion in Swagger API documentation.\n */\nexport class FileResponseDto {\n    /**\n     * Represents the metadata of the uploaded file.\n     *\n     * @type {FileType}\n     * @description Contains details about the file, such as its path and identifier.\n     * @example\n     * {\n     *     \"id\": \"cbcfa8b8-3a25-4adb-a9c6-e325f0d0f3ae\",\n     *     \"path\": \"https://example.com/path/to/file.jpg\"\n     * }\n     */\n\n    @ApiResponseProperty({\n        type: () => FileType,\n    })\n    file: FileType;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileResponseDto-2.html":{"url":"classes/FileResponseDto-2.html","title":"class - FileResponseDto-2","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/s3-presigned/dto/file-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                The FileResponseDto class represents the response structure for file operations, including the file metadata and upload signed URL. This DTO is used to standardize the response format for file upload operations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                file\n                            \n                            \n                                    \n                                uploadSignedUrl\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        file\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FileType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: () => FileType})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/infrastructure/uploader/s3-presigned/dto/file-response.dto.ts:27\n                        \n                    \n\n            \n                \n                    The metadata of the file, including its path and other relevant information.\nExample :{\n  id: 'abc123',\n  path: '/files/example.jpg'\n}\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        uploadSignedUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/infrastructure/uploader/s3-presigned/dto/file-response.dto.ts:41\n                        \n                    \n\n            \n                \n                    The presigned URL for uploading the file to the server or cloud storage.\nThis URL is used to securely upload the file to the specified location.\nExample :'https://example-bucket.s3.amazonaws.com/unique-file-key?AWSAccessKeyId=ACCESS_KEY&Expires=EXPIRATION_TIME&Signature=SIGNATURE'\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiResponseProperty } from '@nestjs/swagger';\n\nimport { FileType } from '../../../../domain/file';\n\n/**\n * @class FileResponseDto\n *\n * @description\n * The `FileResponseDto` class represents the response structure for file operations, including the file metadata and upload signed URL. This DTO is used to standardize the response format for file upload operations.\n */\n\nexport class FileResponseDto {\n    /**\n     * The metadata of the file, including its path and other relevant information.\n     *\n     * @type {FileType}\n     * @example\n     * {\n     *   id: 'abc123',\n     *   path: '/files/example.jpg'\n     * }\n     */\n\n    @ApiResponseProperty({\n        type: () => FileType,\n    })\n    file: FileType;\n\n    /**\n     * The presigned URL for uploading the file to the server or cloud storage.\n     * This URL is used to securely upload the file to the specified location.\n     *\n     * @type {string}\n     * @example\n     * 'https://example-bucket.s3.amazonaws.com/unique-file-key?AWSAccessKeyId=ACCESS_KEY&Expires=EXPIRATION_TIME&Signature=SIGNATURE'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n    })\n    uploadSignedUrl: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileType.html":{"url":"classes/FileType.html","title":"class - FileType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/domain/file.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the FileType class used for representing file metadata and handling file paths.\nThe FileType class represents the metadata associated with a file, including its unique identifier and file path.\nIt uses decorators from @nestjs/swagger for API documentation and class-transformer for transforming file paths based on the file configuration.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                path\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'cbcfa8b8-3a25-4adb-a9c6-e325f0d0f3ae'})@Allow()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/domain/file.ts:35\n                        \n                    \n\n            \n                \n                    The unique identifier for the file.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'https://example.com/path/to/file.jpg'})@Transform( => , {toPlainOnly: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/domain/file.ts:81\n                        \n                    \n\n            \n                \n                    The URL or path of the file. Transforms the file path based on the file driver configuration.\nIf the driver is LOCAL, the URL is constructed using the backend domain.\nIf the driver is S3 or S3_PRESIGNED, a presigned URL is generated for accessing the file.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiResponseProperty } from '@nestjs/swagger';\n\nimport { GetObjectCommand, S3Client } from '@aws-sdk/client-s3';\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner';\nimport { Transform } from 'class-transformer';\nimport { Allow } from 'class-validator';\n\nimport appConfig from '@config/app.config';\nimport fileConfig from '@config/file.config';\nimport { AppConfig } from '@config/type/app-config.type';\nimport { FileConfig, FileDriver } from '@config/type/file-config.type';\n\n/**\n * @fileoverview\n * Defines the `FileType` class used for representing file metadata and handling file paths.\n *\n * @module\n * @description\n * The `FileType` class represents the metadata associated with a file, including its unique identifier and file path.\n * It uses decorators from `@nestjs/swagger` for API documentation and `class-transformer` for transforming file paths based on the file configuration.\n */\nexport class FileType {\n    /**\n     * The unique identifier for the file.\n     *\n     * @example 'cbcfa8b8-3a25-4adb-a9c6-e325f0d0f3ae'\n     * @type {string}\n     */\n\n    @ApiProperty({\n        type: String,\n        example: 'cbcfa8b8-3a25-4adb-a9c6-e325f0d0f3ae',\n    })\n    @Allow()\n    id: string;\n\n    /**\n     * The URL or path of the file. Transforms the file path based on the file driver configuration.\n     * If the driver is LOCAL, the URL is constructed using the backend domain.\n     * If the driver is S3 or S3_PRESIGNED, a presigned URL is generated for accessing the file.\n     *\n     * @example 'https://example.com/path/to/file.jpg'\n     * @type {string}\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: 'https://example.com/path/to/file.jpg',\n    })\n    @Transform(\n        ({ value }) => {\n            if ((fileConfig() as FileConfig).driver === FileDriver.LOCAL) {\n                return (appConfig() as AppConfig).backendDomain + value;\n            } else if (\n                [FileDriver.S3_PRESIGNED, FileDriver.S3].includes(\n                    (fileConfig() as FileConfig).driver\n                )\n            ) {\n                const s3 = new S3Client({\n                    region: (fileConfig() as FileConfig).awsS3Region ?? '',\n                    credentials: {\n                        accessKeyId: (fileConfig() as FileConfig).accessKeyId ?? '',\n                        secretAccessKey: (fileConfig() as FileConfig).secretAccessKey ?? '',\n                    },\n                });\n\n                const command = new GetObjectCommand({\n                    Bucket: (fileConfig() as FileConfig).awsDefaultS3Bucket ?? '',\n                    Key: value,\n                });\n\n                return getSignedUrl(s3, command, { expiresIn: 3600 });\n            }\n\n            return value;\n        },\n        {\n            toPlainOnly: true,\n        }\n    )\n    path: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileUploadDto.html":{"url":"classes/FileUploadDto.html","title":"class - FileUploadDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileUploadDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/s3-presigned/dto/file.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                The FileUploadDto class defines the data transfer object for uploading files. It includes properties to specify the file's name and size. This DTO is used to validate and document the data required for file upload operations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                fileName\n                            \n                            \n                                    \n                                    \n                                fileSize\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        fileName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'image.jpg'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/infrastructure/uploader/s3-presigned/dto/file.dto.ts:23\n                        \n                    \n\n            \n                \n                    The name of the file to be uploaded.\nExample :'image.jpg'\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        fileSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 138723})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/infrastructure/uploader/s3-presigned/dto/file.dto.ts:35\n                        \n                    \n\n            \n                \n                    The size of the file in bytes.\nExample :138723\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nimport { IsNumber, IsString } from 'class-validator';\n\n/**\n * @class FileUploadDto\n *\n * @description\n * The `FileUploadDto` class defines the data transfer object for uploading files. It includes properties to specify the file's name and size. This DTO is used to validate and document the data required for file upload operations.\n */\n\nexport class FileUploadDto {\n    /**\n     * The name of the file to be uploaded.\n     *\n     * @type {string}\n     * @example\n     * 'image.jpg'\n     */\n\n    @ApiProperty({ example: 'image.jpg' })\n    @IsString()\n    fileName: string;\n\n    /**\n     * The size of the file in bytes.\n     *\n     * @type {number}\n     * @example\n     * 138723\n     */\n\n    @ApiProperty({ example: 138723 })\n    @IsNumber()\n    fileSize: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FilesLocalController.html":{"url":"controllers/FilesLocalController.html","title":"controller - FilesLocalController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FilesLocalController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/local/files.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                The FilesLocalController is responsible for handling file operations related to local storage.\nIt provides endpoints for uploading and downloading files.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                download\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        download\n                        \n                    \n                \n            \n            \n                \n                        \n                    download(path, response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':path')@ApiExcludeEndpoint()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/files/infrastructure/uploader/local/files.controller.ts:96\n                        \n                    \n\n\n            \n                \n                        Downloads a file from local storage.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                path\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The path to the file to be downloaded.\n\n                                            \n                                        \n                                        \n                                                response\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A file response stream.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiCreatedResponse({type: FileResponseDto})@Post('v1/upload')@ApiConsumes('multipart/form-data')@ApiBody({schema: undefined})@ApiFile()@UseInterceptors(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/files/infrastructure/uploader/local/files.controller.ts:79\n                        \n                    \n\n\n            \n                \n                        Uploads a file to local storage.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The file to be uploaded.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                FileResponseDto The response containing file details after upload.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Get,\n    Param,\n    Post,\n    Response,\n    UploadedFile,\n    UseInterceptors,\n} from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport {\n    ApiBody,\n    ApiConsumes,\n    ApiCreatedResponse,\n    ApiExcludeEndpoint,\n    ApiTags,\n} from '@nestjs/swagger';\n\nimport { diskStorage } from 'multer';\n\n// import { ApiFile } from '@decorators/swagger.schema';\nimport { ApiFile } from '@decorators/swagger.schema';\nimport { filesRoot, editFileName, imageFileFilter } from '@providers/file-upload.service';\n\nimport { FileResponseDto } from './dto/file-response.dto';\nimport { FilesLocalService } from './files.service';\n\n/**\n * @controller FilesLocalController\n *\n * @description\n * The `FilesLocalController` is responsible for handling file operations related to local storage.\n * It provides endpoints for uploading and downloading files.\n */\n\n@ApiTags('Files')\n@Controller()\nexport class FilesLocalController {\n    constructor(private readonly filesService: FilesLocalService) {}\n\n    /**\n     * Uploads a file to local storage.\n     *\n     * @endpoint POST /v1/upload\n     * @consumes multipart/form-data\n     *\n     * @param file The file to be uploaded.\n     * @returns FileResponseDto The response containing file details after upload.\n     *\n     * @throws { HttpException } If there is an error during file upload.\n     */\n\n    @ApiCreatedResponse({\n        type: FileResponseDto,\n    })\n    @Post('v1/upload')\n    @ApiConsumes('multipart/form-data')\n    @ApiBody({\n        schema: {\n            type: 'object',\n            properties: {\n                file: {\n                    type: 'string',\n                    format: 'binary',\n                },\n            },\n        },\n    })\n    @ApiFile()\n    @UseInterceptors(\n        FileInterceptor('file', {\n            storage: diskStorage({\n                destination: filesRoot() + '/local',\n                filename: editFileName,\n            }),\n            fileFilter: imageFileFilter,\n        })\n    )\n    async uploadFile(@UploadedFile() file: Express.Multer.File): Promise {\n        return this.filesService.create(file);\n    }\n\n    /**\n     * Downloads a file from local storage.\n     *\n     * @endpoint GET /:path\n     *\n     * @param path The path to the file to be downloaded.\n     * @returns A file response stream.\n     *\n     * @throws { HttpException } If the file cannot be found or there is an error during download.\n     */\n\n    @Get(':path')\n    @ApiExcludeEndpoint()\n    download(@Param('path') path, @Response() response) {\n        return response.sendFile(path, { root: filesRoot() + '/local' });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FilesLocalModule.html":{"url":"modules/FilesLocalModule.html","title":"module - FilesLocalModule","body":"\n                   \n\n\n\n\n    Modules\n    FilesLocalModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FilesLocalModule\n\n\n\ncluster_FilesLocalModule_providers\n\n\n\ncluster_FilesLocalModule_exports\n\n\n\n\nFilesLocalService \n\nFilesLocalService \n\n\n\nFilesLocalModule\n\nFilesLocalModule\n\nFilesLocalService  -->\n\nFilesLocalModule->FilesLocalService \n\n\n\n\n\nFilesLocalService\n\nFilesLocalService\n\nFilesLocalModule -->\n\nFilesLocalService->FilesLocalModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/local/files.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            The FilesLocalModule is responsible for managing file operations using local storage.\nIt provides the necessary components to handle file uploads, retrievals, and other file-related operations specific to local storage.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FilesLocalService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            FilesLocalController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FilesLocalService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { FilesLocalController } from './files.controller';\nimport { FilesLocalService } from './files.service';\n\n/**\n * @module FilesLocalModule\n *\n * @description\n * The `FilesLocalModule` is responsible for managing file operations using local storage.\n * It provides the necessary components to handle file uploads, retrievals, and other file-related operations specific to local storage.\n */\n@Module({\n    /**\n     * The list of controllers that handle incoming requests and provide endpoints related to local file operations.\n     */\n\n    controllers: [FilesLocalController],\n\n    /**\n     * The list of providers that contain the business logic for file operations.\n     * These providers are used to handle file-related tasks such as uploading, retrieving, and managing files.\n     */\n\n    providers: [FilesLocalService],\n\n    /**\n     * The list of providers that are made available for other modules to use.\n     * `FilesLocalService` is exported so that other modules can utilize the service for local file operations.\n     */\n    exports: [FilesLocalService],\n})\nexport class FilesLocalModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FilesLocalService.html":{"url":"injectables/FilesLocalService.html","title":"injectable - FilesLocalService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FilesLocalService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/local/files.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The FilesLocalService provides functionality for handling file operations related to local storage.\nIt manages file creation and provides necessary file details.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/files/infrastructure/uploader/local/files.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(file: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/files/infrastructure/uploader/local/files.service.ts:37\n                        \n                    \n\n\n            \n                \n                        Handles file creation and returns file details.\nExample :// Example response:\n{\n  file: {\n    id: 'asas',\n    path: '/api/v1/uploads/example-file.jpg'\n  }\n}\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The file to be processed.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves to an object containing file details.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpStatus, Injectable, UnprocessableEntityException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\nimport { AllConfigType } from '@config/type/config.type';\n\nimport { FileType } from '../../../domain/file';\n\n/**\n * @service FilesLocalService\n *\n * @description\n * The `FilesLocalService` provides functionality for handling file operations related to local storage.\n * It manages file creation and provides necessary file details.\n */\n@Injectable()\nexport class FilesLocalService {\n    constructor(private readonly configService: ConfigService) {}\n\n    /**\n     * Handles file creation and returns file details.\n     *\n     * @param file The file to be processed.\n     * @returns A promise that resolves to an object containing file details.\n     *\n     * @throws { UnprocessableEntityException } If the file is not provided.\n     *\n     * @example\n     * // Example response:\n     * {\n     *   file: {\n     *     id: 'asas',\n     *     path: '/api/v1/uploads/example-file.jpg'\n     *   }\n     * }\n     */\n\n    async create(file: Express.Multer.File): Promise {\n        if (!file) {\n            throw new UnprocessableEntityException({\n                status: HttpStatus.UNPROCESSABLE_ENTITY,\n                errors: {\n                    file: 'selectFile',\n                },\n            });\n        }\n\n        return {\n            file: {\n                id: 'asas',\n                path: `/${this.configService.get('app.apiPrefix', {\n                    infer: true,\n                })}/v1/${file.path}`,\n            },\n        } as any;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FilesModule.html":{"url":"modules/FilesModule.html","title":"module - FilesModule","body":"\n                   \n\n\n\n\n    Modules\n    FilesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_providers\n\n\n\ncluster_FilesModule_imports\n\n\n\ncluster_FilesModule_exports\n\n\n\n\nFilesS3Module\n\nFilesS3Module\n\n\n\nFilesModule\n\nFilesModule\n\nFilesModule -->\n\nFilesS3Module->FilesModule\n\n\n\n\n\nFilesS3PresignedModule\n\nFilesS3PresignedModule\n\nFilesModule -->\n\nFilesS3PresignedModule->FilesModule\n\n\n\n\n\nFilesService \n\nFilesService \n\nFilesService  -->\n\nFilesModule->FilesService \n\n\n\n\n\nFilesService\n\nFilesService\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/files/files.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            This file defines the FilesModule, which is responsible for managing file uploads\nthrough different infrastructure modules. It conditionally imports the appropriate\nfile uploader module based on configuration settings.\nThe FilesModule class integrates various file uploader modules and provides\nthe FilesService for handling file operations. The module configuration allows\nswitching between different file storage solutions such as local storage, S3, and\nS3 presigned uploads.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FilesService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            FilesS3Module\n                        \n                        \n                            FilesS3PresignedModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FilesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { FilesService } from './files.service';\nimport { FilesLocalModule } from './infrastructure/uploader/local/files.module';\nimport { FilesS3Module } from './infrastructure/uploader/s3/files.module';\nimport { FilesS3PresignedModule } from './infrastructure/uploader/s3-presigned/files.module';\n\n// import { InfrastructureUploaderModule } from './infrastructureUploaderModule';\n\n// const infrastructureUploaderModule =\n//     (fileConfig() as FileConfig).driver === FileDriver.LOCAL\n//         ? FilesLocalModule\n//         : (fileConfig() as FileConfig).driver === FileDriver.S3\n//           ? FilesS3Module\n//           : FilesS3PresignedModule;\n\n// console.log(\n//     '********************************************************************===============================',\n//     fileConfig() as FileConfig\n// );\n\nconst infrastructureUploaderModule = FilesLocalModule;\n\n/**\n * @fileoverview\n * This file defines the `FilesModule`, which is responsible for managing file uploads\n * through different infrastructure modules. It conditionally imports the appropriate\n * file uploader module based on configuration settings.\n *\n * @module\n * @description\n * The `FilesModule` class integrates various file uploader modules and provides\n * the `FilesService` for handling file operations. The module configuration allows\n * switching between different file storage solutions such as local storage, S3, and\n * S3 presigned uploads.\n */\n\n@Module({\n    /**\n     * The `imports` array specifies the modules that are imported into this module.\n     * The choice of uploader module is determined based on the configuration settings.\n     */\n\n    imports: [infrastructureUploaderModule, FilesS3Module, FilesS3PresignedModule],\n\n    /**\n     * The `providers` array defines the providers that are instantiated by this module.\n     * The `FilesService` is included here to be used within this module.\n     */\n\n    providers: [FilesService],\n\n    /**\n     * The `exports` array specifies the providers that are exported from this module.\n     * The `FilesService` is exported so it can be used by other modules.\n     */\n\n    exports: [FilesService],\n})\nexport class FilesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FilesS3Controller.html":{"url":"controllers/FilesS3Controller.html","title":"controller - FilesS3Controller","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FilesS3Controller\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/s3/files.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                The FilesS3Controller handles HTTP requests related to file uploads using AWS S3. It provides an endpoint for uploading files to S3 and returning the file metadata.\n\nFiles: Grouped under the 'Files' tag for API documentation purposes.\n\nfiles: Base path for file-related operations.\n\nv1/upload/s3: Endpoint for file uploads to S3.\n\n\nHandles file upload requests. Files are processed and uploaded to S3. The response includes metadata about the uploaded file.\n\n@ApiTags('Files'): Tags the controller with 'Files' for API documentation.\n@ApiCreatedResponse({ type: FileResponseDto }): Specifies the response type for successful file uploads.\n@Post('v1/upload/s3'): Defines the HTTP POST endpoint for file uploads.\n@ApiConsumes('multipart/form-data'): Indicates that the endpoint consumes 'multipart/form-data' for file uploads.\n@ApiBody({ schema: { type: 'object', properties: { file: { type: 'string', format: 'binary' } } } }): Documents the expected request body schema for file uploads.\n@ApiFile(): Custom decorator for file upload handling.\n@UseInterceptors(FileInterceptor('file')): Applies the FileInterceptor to handle file uploads.\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(file: Express.MulterS3.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiCreatedResponse({type: FileResponseDto})@Post('v1/upload/s3')@ApiConsumes('multipart/form-data')@ApiBody({schema: undefined})@ApiFile()@UseInterceptors(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/files/infrastructure/uploader/s3/files.controller.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.MulterS3.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, UploadedFile, UseInterceptors } from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { ApiBody, ApiConsumes, ApiCreatedResponse, ApiTags } from '@nestjs/swagger';\n\n// import { ApiFile } from '../../../../../decorators/swagger.schema';\nimport { ApiFile } from '@decorators/swagger.schema';\n\nimport { FileResponseDto } from './dto/file-response.dto';\nimport { FilesS3Service } from './files.service';\n\n/**\n * @controller FilesS3Controller\n *\n * @description\n * The `FilesS3Controller` handles HTTP requests related to file uploads using AWS S3. It provides an endpoint for uploading files to S3 and returning the file metadata.\n *\n * @tags\n * - Files: Grouped under the 'Files' tag for API documentation purposes.\n *\n * @path\n * - `files`: Base path for file-related operations.\n * - `v1/upload/s3`: Endpoint for file uploads to S3.\n *\n * @controller\n *\n * @constructor\n * @param {FilesS3Service} filesService - Service responsible for handling file operations with S3.\n *\n * @methods\n *\n * @method uploadFile\n * @description\n * Handles file upload requests. Files are processed and uploaded to S3. The response includes metadata about the uploaded file.\n *\n * @param {Express.MulterS3.File} file - The uploaded file from the request.\n * @returns {Promise} - A promise that resolves to the file metadata.\n *\n * @decorators\n * - `@ApiTags('Files')`: Tags the controller with 'Files' for API documentation.\n * - `@ApiCreatedResponse({ type: FileResponseDto })`: Specifies the response type for successful file uploads.\n * - `@Post('v1/upload/s3')`: Defines the HTTP POST endpoint for file uploads.\n * - `@ApiConsumes('multipart/form-data')`: Indicates that the endpoint consumes 'multipart/form-data' for file uploads.\n * - `@ApiBody({ schema: { type: 'object', properties: { file: { type: 'string', format: 'binary' } } } })`: Documents the expected request body schema for file uploads.\n * - `@ApiFile()`: Custom decorator for file upload handling.\n * - `@UseInterceptors(FileInterceptor('file'))`: Applies the `FileInterceptor` to handle file uploads.\n */\n\n@ApiTags('Files')\n@Controller({\n    path: 'files',\n    version: '1',\n})\nexport class FilesS3Controller {\n    constructor(private readonly filesService: FilesS3Service) {}\n\n    @ApiCreatedResponse({\n        type: FileResponseDto,\n    })\n    @Post('v1/upload/s3')\n    @ApiConsumes('multipart/form-data')\n    @ApiBody({\n        schema: {\n            type: 'object',\n            properties: {\n                file: {\n                    type: 'string',\n                    format: 'binary',\n                },\n            },\n        },\n    })\n    @ApiFile()\n    @UseInterceptors(FileInterceptor('file'))\n    async uploadFile(@UploadedFile() file: Express.MulterS3.File): Promise {\n        return this.filesService.create(file);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FilesS3Module.html":{"url":"modules/FilesS3Module.html","title":"module - FilesS3Module","body":"\n                   \n\n\n\n\n    Modules\n    FilesS3Module\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FilesS3Module\n\n\n\ncluster_FilesS3Module_exports\n\n\n\ncluster_FilesS3Module_providers\n\n\n\n\nFilesS3Service \n\nFilesS3Service \n\n\n\nFilesS3Module\n\nFilesS3Module\n\nFilesS3Service  -->\n\nFilesS3Module->FilesS3Service \n\n\n\n\n\nFilesS3Service\n\nFilesS3Service\n\nFilesS3Module -->\n\nFilesS3Service->FilesS3Module\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/s3/files.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            The FilesS3Module configures the integration with AWS S3 for file upload functionality. It sets up the Multer middleware to handle file uploads, configures the S3 client, and defines the file storage and filtering logic.\n\nMulterModule: Configures Multer for file handling and integrates it with S3.\n\nConfigModule: Provides access to application configuration settings.\n\nFilesS3Service: Handles file upload and processing logic using S3.\n\nFilesS3Controller: Manages HTTP requests related to file uploads and downloads.\n\nFilesS3Service: Exposes the service for file operations to other modules.\n\n\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FilesS3Service\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            FilesS3Controller\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FilesS3Service\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { randomStringGenerator } from '@nestjs/common/utils/random-string-generator.util';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { MulterModule } from '@nestjs/platform-express';\n\nimport { S3Client } from '@aws-sdk/client-s3';\nimport multerS3 from 'multer-s3';\n\n// import { HelperModule } from '../../../../../common/helper/helper.module';\n// import { ConfigService } from '../../../../../common/helper/services/config.service';\nimport { AllConfigType } from '@config/type/config.type';\nimport { imageFileFilter } from '@providers/file-upload.service';\n\nimport { FilesS3Controller } from './files.controller';\nimport { FilesS3Service } from './files.service';\n\n/**\n * @module FilesS3Module\n *\n * @description\n * The `FilesS3Module` configures the integration with AWS S3 for file upload functionality. It sets up the Multer middleware to handle file uploads, configures the S3 client, and defines the file storage and filtering logic.\n *\n * @imports\n * - `MulterModule`: Configures Multer for file handling and integrates it with S3.\n * - `ConfigModule`: Provides access to application configuration settings.\n *\n * @providers\n * - `FilesS3Service`: Handles file upload and processing logic using S3.\n *\n * @controllers\n * - `FilesS3Controller`: Manages HTTP requests related to file uploads and downloads.\n *\n * @exports\n * - `FilesS3Service`: Exposes the service for file operations to other modules.\n */\n\n@Module({\n    imports: [\n        MulterModule.registerAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: (configService: ConfigService) => {\n                const s3 = new S3Client({\n                    region: configService.get('file.awsS3Region', { infer: true }),\n                    credentials: {\n                        accessKeyId: configService.getOrThrow('file.accessKeyId', {\n                            infer: true,\n                        }),\n                        secretAccessKey: configService.getOrThrow('file.secretAccessKey', {\n                            infer: true,\n                        }),\n                    },\n                });\n\n                return {\n                    fileFilter: imageFileFilter,\n                    storage: multerS3({\n                        s3: s3,\n                        bucket: configService.getOrThrow('file.awsDefaultS3Bucket', {\n                            infer: true,\n                        }),\n                        contentType: multerS3.AUTO_CONTENT_TYPE,\n                        key: (request, file, callback) => {\n                            callback(\n                                null,\n                                `${randomStringGenerator()}.${file.originalname\n                                    .split('.')\n                                    .pop()\n                                    ?.toLowerCase()}`\n                            );\n                        },\n                    }),\n                    limits: {\n                        fileSize: configService.get('file.maxFileSize', { infer: true }),\n                    },\n                };\n            },\n        }),\n    ],\n    controllers: [FilesS3Controller],\n    providers: [FilesS3Service],\n    exports: [FilesS3Service],\n})\nexport class FilesS3Module {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FilesS3PresignedController.html":{"url":"controllers/FilesS3PresignedController.html","title":"controller - FilesS3PresignedController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FilesS3PresignedController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/s3-presigned/files.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                The FilesS3PresignedController manages HTTP requests for file operations involving Amazon S3 presigned URLs. It provides endpoints for uploading files and generating presigned URLs for downloading files from S3.\n\nFilesS3PresignedController: Handles file upload and presigned URL generation requests.\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                getDownloadUrl\n                            \n                            \n                                    \n                                    \n                                    Async\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getDownloadUrl\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDownloadUrl(key: string, expiresIn: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('v1/download/:key')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/files/infrastructure/uploader/s3-presigned/files.controller.ts:69\n                        \n                    \n\n\n            \n                \n                        Generates a presigned URL for downloading a file from Amazon S3.\nExample :GET /files/v1/download/{key}?expiresIn=3600\nResponse:\n{\n  \"url\": \"https://s3.amazonaws.com/bucket/path/to/file?signature\"\n}\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe key (path) of the file in the S3 bucket.\n\n\n                                            \n                                        \n                                        \n                                                expiresIn\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe expiration time for the presigned URL in seconds.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An object containing the presigned URL for file download.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(file: FileUploadDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiCreatedResponse({type: FileResponseDto})@Post('v1/upload')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/files/infrastructure/uploader/s3-presigned/files.controller.ts:49\n                        \n                    \n\n\n            \n                \n                        Uploads a file to Amazon S3.\nExample :POST /files/v1/upload\nRequest body:\n{\n  \"file\": \"base64-encoded-file-data\"\n}\nResponse:\n{\n  \"file\": {\n    \"path\": \"s3://bucket/path/to/file\"\n  }\n}\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                            FileUploadDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe file data to upload.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                A FileResponseDto object containing information about the uploaded file.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Post, Query } from '@nestjs/common';\nimport { ApiCreatedResponse, ApiTags } from '@nestjs/swagger';\n\nimport { FileResponseDto } from './dto/file-response.dto';\nimport { FileUploadDto } from './dto/file.dto';\nimport { FilesS3PresignedService } from './files.service';\n\n/**\n * @module FilesS3PresignedController\n *\n * @description\n * The `FilesS3PresignedController` manages HTTP requests for file operations involving Amazon S3 presigned URLs. It provides endpoints for uploading files and generating presigned URLs for downloading files from S3.\n *\n * @controllers\n * - `FilesS3PresignedController`: Handles file upload and presigned URL generation requests.\n */\n@ApiTags('Files')\n@Controller({\n    path: 'files',\n    version: '1',\n})\nexport class FilesS3PresignedController {\n    constructor(private readonly filesService: FilesS3PresignedService) {}\n\n    /**\n     * Uploads a file to Amazon S3.\n     *\n     * @param file - The file data to upload.\n     * @returns A `FileResponseDto` object containing information about the uploaded file.\n     *\n     * @example\n     * POST /files/v1/upload\n     * Request body:\n     * {\n     *   \"file\": \"base64-encoded-file-data\"\n     * }\n     * Response:\n     * {\n     *   \"file\": {\n     *     \"path\": \"s3://bucket/path/to/file\"\n     *   }\n     * }\n     */\n\n    @ApiCreatedResponse({\n        type: FileResponseDto,\n    })\n    @Post('v1/upload')\n    async uploadFile(@Body() file: FileUploadDto) {\n        return this.filesService.create(file);\n    }\n\n    /**\n     * Generates a presigned URL for downloading a file from Amazon S3.\n     *\n     * @param key - The key (path) of the file in the S3 bucket.\n     * @param expiresIn - The expiration time for the presigned URL in seconds.\n     * @returns An object containing the presigned URL for file download.\n     *\n     * @example\n     * GET /files/v1/download/{key}?expiresIn=3600\n     * Response:\n     * {\n     *   \"url\": \"https://s3.amazonaws.com/bucket/path/to/file?signature\"\n     * }\n     */\n\n    @Get('v1/download/:key')\n    async getDownloadUrl(@Param('key') key: string, @Query('expiresIn') expiresIn: number) {\n        const url = await this.filesService.generatePresignedUrl(key, expiresIn);\n        return { url };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FilesS3PresignedModule.html":{"url":"modules/FilesS3PresignedModule.html","title":"module - FilesS3PresignedModule","body":"\n                   \n\n\n\n\n    Modules\n    FilesS3PresignedModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FilesS3PresignedModule\n\n\n\ncluster_FilesS3PresignedModule_exports\n\n\n\ncluster_FilesS3PresignedModule_providers\n\n\n\n\nFilesS3PresignedService \n\nFilesS3PresignedService \n\n\n\nFilesS3PresignedModule\n\nFilesS3PresignedModule\n\nFilesS3PresignedService  -->\n\nFilesS3PresignedModule->FilesS3PresignedService \n\n\n\n\n\nFilesS3PresignedService\n\nFilesS3PresignedService\n\nFilesS3PresignedModule -->\n\nFilesS3PresignedService->FilesS3PresignedModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/s3-presigned/files.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            The FilesS3PresignedModule configures and sets up the module for handling file uploads to an Amazon S3 bucket using presigned URLs. It integrates the necessary dependencies and configurations for Multer to manage file uploads and provides the service and controller for handling S3 interactions.\n\nMulterModule: Configured asynchronously to use multer-s3 for file storage on S3.\n\nConfigModule: Provides configuration services for retrieving AWS S3 settings.\n\nFilesS3PresignedService: Service that handles the logic for interacting with S3 and generating presigned URLs.\n\nFilesS3PresignedController: Controller for handling HTTP requests related to file uploads and presigned URLs.\n\n\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FilesS3PresignedService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            FilesS3PresignedController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FilesS3PresignedService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { randomStringGenerator } from '@nestjs/common/utils/random-string-generator.util';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { MulterModule } from '@nestjs/platform-express';\n\nimport { S3Client } from '@aws-sdk/client-s3';\nimport multerS3 from 'multer-s3';\n\n// import { HelperModule } from '../../../../../common/helper/helper.module';\n// import { ConfigService } from '../../../../../common/helper/services/config.service';\nimport { AllConfigType } from '@config/type/config.type';\n\nimport { imageFileFilter } from '../../../../../providers/file-upload.service';\n\nimport { FilesS3PresignedController } from './files.controller';\nimport { FilesS3PresignedService } from './files.service';\n\n/**\n * @module FilesS3PresignedModule\n *\n * @description\n * The `FilesS3PresignedModule` configures and sets up the module for handling file uploads to an Amazon S3 bucket using presigned URLs. It integrates the necessary dependencies and configurations for Multer to manage file uploads and provides the service and controller for handling S3 interactions.\n *\n * @imports\n * - `MulterModule`: Configured asynchronously to use `multer-s3` for file storage on S3.\n * - `ConfigModule`: Provides configuration services for retrieving AWS S3 settings.\n *\n * @providers\n * - `FilesS3PresignedService`: Service that handles the logic for interacting with S3 and generating presigned URLs.\n *\n * @controllers\n * - `FilesS3PresignedController`: Controller for handling HTTP requests related to file uploads and presigned URLs.\n */\n@Module({\n    imports: [\n        MulterModule.registerAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: (configService: ConfigService) => {\n                const s3 = new S3Client({\n                    region: configService.get('file.awsS3Region', { infer: true }),\n                    credentials: {\n                        accessKeyId: configService.getOrThrow('file.accessKeyId', {\n                            infer: true,\n                        }),\n                        secretAccessKey: configService.getOrThrow('file.secretAccessKey', {\n                            infer: true,\n                        }),\n                    },\n                });\n\n                return {\n                    fileFilter: imageFileFilter,\n                    storage: multerS3({\n                        s3: s3,\n                        bucket: '',\n                        acl: 'public-read',\n                        contentType: multerS3.AUTO_CONTENT_TYPE,\n                        key: (request, file, callback) => {\n                            callback(\n                                null,\n                                `${randomStringGenerator()}.${file.originalname\n                                    .split('.')\n                                    .pop()\n                                    ?.toLowerCase()}`\n                            );\n                        },\n                    }),\n                };\n            },\n        }),\n    ],\n    controllers: [FilesS3PresignedController],\n    providers: [FilesS3PresignedService],\n    exports: [FilesS3PresignedService],\n})\nexport class FilesS3PresignedModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FilesS3PresignedService.html":{"url":"injectables/FilesS3PresignedService.html","title":"injectable - FilesS3PresignedService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FilesS3PresignedService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/s3-presigned/files.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The FilesS3PresignedService handles operations related to file uploads and downloads using Amazon S3 with presigned URLs. It provides methods for creating upload presigned URLs and generating download presigned URLs.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                s3\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                generatePresignedUrl\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/files/infrastructure/uploader/s3-presigned/files.service.ts:26\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(file: FileUploadDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/files/infrastructure/uploader/s3-presigned/files.service.ts:59\n                        \n                    \n\n\n            \n                \n                        Creates a presigned URL for uploading a file to Amazon S3.\nExample :const response = await this.create({\n  fileName: 'image.jpg',\n  fileSize: 123456\n});\n// response will include file metadata and uploadSignedUrl\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                            FileUploadDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe file upload data containing file information.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                An object containing the file metadata and the presigned URL for uploading.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generatePresignedUrl\n                        \n                    \n                \n            \n            \n                \n                        \n                    generatePresignedUrl(key: string, expiresIn: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/files/infrastructure/uploader/s3-presigned/files.service.ts:128\n                        \n                    \n\n\n            \n                \n                        Generates a presigned URL for downloading a file from Amazon S3.\nExample :const url = await this.generatePresignedUrl('path/to/file', 3600);\n// url will be a presigned URL for downloading the file\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe key (path) of the file in the S3 bucket.\n\n\n                                            \n                                        \n                                        \n                                                expiresIn\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe expiration time for the presigned URL in seconds.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                The presigned URL for downloading the file.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        s3\n                        \n                    \n                \n            \n                \n                    \n                        Type :     S3Client\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/files/infrastructure/uploader/s3-presigned/files.service.ts:26\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n    HttpStatus,\n    Injectable,\n    PayloadTooLargeException,\n    UnprocessableEntityException,\n} from '@nestjs/common';\nimport { randomStringGenerator } from '@nestjs/common/utils/random-string-generator.util';\nimport { ConfigService } from '@nestjs/config';\n\nimport { GetObjectCommand, PutObjectCommand, S3Client } from '@aws-sdk/client-s3';\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner';\n\n// import { ConfigService } from '../../../../../common/helper/services/config.service';\nimport { FileType } from '../../../domain/file';\n\nimport { FileUploadDto } from './dto/file.dto';\n\n/**\n * @module FilesS3PresignedService\n *\n * @description\n * The `FilesS3PresignedService` handles operations related to file uploads and downloads using Amazon S3 with presigned URLs. It provides methods for creating upload presigned URLs and generating download presigned URLs.\n */\n@Injectable()\nexport class FilesS3PresignedService {\n    private s3: S3Client;\n\n    constructor(private readonly configService: ConfigService) {\n        this.s3 = new S3Client({\n            region: configService.get('file.awsS3Region', { infer: true }),\n            credentials: {\n                accessKeyId: configService.getOrThrow('file.accessKeyId', {\n                    infer: true,\n                }),\n                secretAccessKey: configService.getOrThrow('file.secretAccessKey', {\n                    infer: true,\n                }),\n            },\n        });\n    }\n\n    /**\n     * Creates a presigned URL for uploading a file to Amazon S3.\n     *\n     * @param file - The file upload data containing file information.\n     * @returns An object containing the file metadata and the presigned URL for uploading.\n     *\n     * @throws {UnprocessableEntityException} If the file is not provided or has an unsupported type.\n     * @throws {PayloadTooLargeException} If the file size exceeds the maximum allowed size.\n     *\n     * @example\n     * const response = await this.create({\n     *   fileName: 'image.jpg',\n     *   fileSize: 123456\n     * });\n     * // response will include file metadata and uploadSignedUrl\n     */\n\n    async create(file: FileUploadDto): Promise {\n        if (!file) {\n            throw new UnprocessableEntityException({\n                status: HttpStatus.UNPROCESSABLE_ENTITY,\n                errors: {\n                    file: 'selectFile',\n                },\n            });\n        }\n\n        if (!file.fileName.match(/\\.(jpg|jpeg|png|gif)$/i)) {\n            throw new UnprocessableEntityException({\n                status: HttpStatus.UNPROCESSABLE_ENTITY,\n                errors: {\n                    file: `cantUploadFileType`,\n                },\n            });\n        }\n\n        if (\n            file.fileSize >\n            (this.configService.get('file.maxFileSize', {\n                infer: true,\n            }) || 0)\n        ) {\n            throw new PayloadTooLargeException({\n                statusCode: HttpStatus.PAYLOAD_TOO_LARGE,\n                error: 'Payload Too Large',\n                message: 'File too large',\n            });\n        }\n\n        const key = `${randomStringGenerator()}.${file.fileName.split('.').pop()?.toLowerCase()}`;\n\n        const command = new PutObjectCommand({\n            Bucket: this.configService.getOrThrow('file.awsDefaultS3Bucket', {\n                infer: true,\n            }),\n            Key: key,\n            ContentLength: file.fileSize,\n        });\n        const signedUrl = await getSignedUrl(this.s3, command, { expiresIn: 3600 });\n\n        // const data = await this.fileRepository.create({\n        //     path: key,\n        // });\n\n        const data = {\n            path: key,\n        } as any;\n\n        return {\n            file: data,\n            uploadSignedUrl: signedUrl,\n        };\n    }\n\n    /**\n     * Generates a presigned URL for downloading a file from Amazon S3.\n     *\n     * @param key - The key (path) of the file in the S3 bucket.\n     * @param expiresIn - The expiration time for the presigned URL in seconds.\n     * @returns The presigned URL for downloading the file.\n     *\n     * @example\n     * const url = await this.generatePresignedUrl('path/to/file', 3600);\n     * // url will be a presigned URL for downloading the file\n     */\n\n    async generatePresignedUrl(key: string, expiresIn: number): Promise {\n        const command = new GetObjectCommand({\n            Bucket: this.configService.getOrThrow('file.awsDefaultS3Bucket', {\n                infer: true,\n            }),\n            Key: key,\n        });\n\n        return await getSignedUrl(this.s3, command, { expiresIn });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FilesS3Service.html":{"url":"injectables/FilesS3Service.html","title":"injectable - FilesS3Service","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FilesS3Service\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/s3/files.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The FilesS3Service provides methods for handling file operations with AWS S3. It includes functionality to process uploaded files and return their metadata.\nHandles the creation and metadata retrieval for uploaded files. It validates the presence of the file and returns its metadata.\n\n@Injectable(): Marks the class as a provider that can be injected into other components.\n\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/modules/files/infrastructure/uploader/s3/files.service.ts:29\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(file: Express.MulterS3.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/files/infrastructure/uploader/s3/files.service.ts:40\n                        \n                    \n\n\n            \n                \n                        Handles the creation and metadata retrieval for uploaded files.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.MulterS3.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe uploaded file from the request.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nA promise that resolves to an object containing the file metadata.\n\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpStatus, Injectable, UnprocessableEntityException } from '@nestjs/common';\n\nimport { FileType } from '../../../domain/file';\n\n/**\n * @service FilesS3Service\n *\n * @description\n * The `FilesS3Service` provides methods for handling file operations with AWS S3. It includes functionality to process uploaded files and return their metadata.\n *\n * @constructor\n * @param {void} - No parameters are injected into the constructor.\n *\n * @methods\n *\n * @method create\n * @description\n * Handles the creation and metadata retrieval for uploaded files. It validates the presence of the file and returns its metadata.\n *\n * @param {Express.MulterS3.File} file - The uploaded file from the request. It should include information such as the file's S3 key.\n * @returns {Promise} - A promise that resolves to an object containing the file metadata.\n *\n * @throws {UnprocessableEntityException} - Throws an exception if the file is not provided in the request.\n *\n * @decorators\n * - `@Injectable()`: Marks the class as a provider that can be injected into other components.\n */\n@Injectable()\nexport class FilesS3Service {\n    constructor() {}\n\n    /**\n     * Handles the creation and metadata retrieval for uploaded files.\n     *\n     * @param {Express.MulterS3.File} file - The uploaded file from the request.\n     * @returns {Promise} - A promise that resolves to an object containing the file metadata.\n     * @throws {UnprocessableEntityException} - Throws an exception if the file is not provided.\n     */\n\n    async create(file: Express.MulterS3.File): Promise {\n        if (!file) {\n            throw new UnprocessableEntityException({\n                status: HttpStatus.UNPROCESSABLE_ENTITY,\n                errors: {\n                    file: 'selectFile',\n                },\n            });\n        }\n\n        return {\n            file: {\n                path: file.key,\n            } as any,\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FilesService.html":{"url":"injectables/FilesService.html","title":"injectable - FilesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FilesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/files.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the FilesService, a service responsible for handling file operations.\nThe FilesService class is an injectable service in the NestJS framework. It is designed\nto manage and process file-related tasks, such as uploading, retrieving, and managing files.\nThe service's methods and functionalities should be implemented based on the specific file\nhandling requirements of the application.\n\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n/**\n * @fileoverview\n * This file defines the `FilesService`, a service responsible for handling file operations.\n *\n * @module\n * @description\n * The `FilesService` class is an injectable service in the NestJS framework. It is designed\n * to manage and process file-related tasks, such as uploading, retrieving, and managing files.\n * The service's methods and functionalities should be implemented based on the specific file\n * handling requirements of the application.\n */\n@Injectable()\nexport class FilesService {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilterCountryDto.html":{"url":"classes/FilterCountryDto.html","title":"class - FilterCountryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilterCountryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/countries/dto/query-country.dto-remove.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nimport { Transform, Type, plainToInstance } from 'class-transformer';\nimport { IsNumber, IsOptional, IsString, ValidateNested } from 'class-validator';\n\nimport { Country } from './country';\n\nexport class FilterCountryDto {}\n\nexport class SortCountryDto {\n    @ApiProperty()\n    @Type(() => String)\n    @IsString()\n    orderBy: keyof Country;\n\n    @ApiProperty()\n    @IsString()\n    order: string;\n}\n\nexport class QueryCountryDto {\n    @ApiPropertyOptional()\n    @Transform(({ value }) => (value ? Number(value) : 1))\n    @IsNumber()\n    @IsOptional()\n    page?: number;\n\n    @ApiPropertyOptional()\n    @Transform(({ value }) => (value ? Number(value) : 10))\n    @IsNumber()\n    @IsOptional()\n    limit?: number;\n\n    @ApiPropertyOptional({ type: String })\n    @IsOptional()\n    @Transform(({ value }) =>\n        value ? plainToInstance(FilterCountryDto, JSON.parse(value)) : undefined\n    )\n    @ValidateNested()\n    @Type(() => FilterCountryDto)\n    filters?: FilterCountryDto | null;\n\n    @ApiPropertyOptional({ type: String })\n    @IsOptional()\n    @Transform(({ value }) => {\n        return value ? plainToInstance(SortCountryDto, JSON.parse(value)) : undefined;\n    })\n    @ValidateNested({ each: true })\n    @Type(() => SortCountryDto)\n    sort?: SortCountryDto[] | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilterQueryDto.html":{"url":"classes/FilterQueryDto.html","title":"class - FilterQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilterQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/dto/pagination.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO class for filter query parameters.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                field\n                            \n                            \n                                    \n                                    \n                                    \n                                operator\n                            \n                            \n                                    \n                                    \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        field\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'iso', required: true})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.dto.ts:160\n                        \n                    \n\n            \n                \n                    The field to filter on.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        operator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '='})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.dto.ts:172\n                        \n                    \n\n            \n                \n                    The operator to use for filtering.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'IN'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.dto.ts:184\n                        \n                    \n\n            \n                \n                    The value to filter by.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nimport { Type, Transform, plainToInstance } from 'class-transformer';\nimport {\n    IsOptional,\n    Min,\n    Max,\n    IsNotEmpty,\n    IsString,\n    ValidateNested,\n    Matches,\n    IsEnum,\n    // Validate,\n    // IsIn,\n} from 'class-validator';\n\n// import { IsValidField } from '@core/validators/field.validator'; // Import the custom validator\nimport { IsNumberStringOrNumber } from '@decorators/number.string.validator';\nimport { ToNumber } from '@decorators/transforms.decorator';\n// import { IsNumberStringOrNumber } from '@decorators/number.string.validator';\n// import { ToNumber } from '@decorators/transforms.decorator';\n// import { Country } from '@modules/countries/dto/country';\n\n/**\n * Enum representing different pagination types.\n *\n * @export\n * @enum {string}\n */\n\nexport enum PaginationType {\n    NONE = 'no',\n    INFINITY = 'infinity',\n    PAGINATE = 'paginate',\n    ALL = 'all',\n}\n\n/**\n * DTO class for pagination query parameters.\n *\n * @export\n */\nexport class PaginationQueryDto {\n    /**\n     * The type of pagination to apply.\n     *\n     * @type {PaginationType}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        description:\n            'Pagination must all (Page and has_next_page), infinity (only has_next_page), paginate(only page)',\n        enum: PaginationType,\n        default: PaginationType.ALL,\n    })\n    @IsEnum(PaginationType)\n    @IsOptional()\n    readonly pagination: PaginationType;\n\n    /**\n     * The page number for pagination.\n     *\n     * @type {number}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        description: 'Page number',\n        minimum: 1,\n        default: 1,\n    })\n    @IsOptional()\n    @IsNumberStringOrNumber()\n    @ToNumber()\n    @Min(1)\n    readonly page?: number;\n\n    /**\n     * The number of records per page.\n     *\n     * @type {number}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        description: 'Record limit',\n        minimum: 1,\n        maximum: 500,\n        default: 10,\n    })\n    @IsOptional()\n    @IsNumberStringOrNumber()\n    @ToNumber()\n    @Min(10)\n    @Max(500)\n    readonly limit?: number = 10;\n\n    /**\n     * Filters to apply to the query.\n     *\n     * @type {FilterQueryDto[] | null}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        name: 'filters',\n        required: false,\n        type: String,\n        description: 'Array of filter objects as a JSON string',\n        example: '[{\"field\":\"name\",\"operator\":\"=\",\"value\":\"IN\"}]',\n    })\n    @IsOptional()\n    @Transform(({ value }) => {\n        return value ? plainToInstance(FilterQueryDto, JSON.parse(value)) : undefined;\n    })\n    @ValidateNested({ each: true })\n    @Type(() => FilterQueryDto)\n    filters?: FilterQueryDto[] | null;\n\n    /**\n     * Sorting options for the query.\n     *\n     * @type {SortByDto[] | null}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        name: 'sort',\n        required: false,\n        type: String,\n        description: 'Array of sort objects as a JSON string',\n        example: '[{\"field\":\"name\",\"direction\":\"ASC\"}]',\n    })\n    @IsOptional()\n    @Transform(({ value }) => {\n        return value ? plainToInstance(SortByDto, JSON.parse(value)) : undefined;\n    })\n    @ValidateNested({ each: true })\n    @Type(() => SortByDto)\n    sort?: SortByDto[] | null;\n}\n\n/**\n * DTO class for filter query parameters.\n *\n * @export\n */\nexport class FilterQueryDto {\n    /**\n     * The field to filter on.\n     *\n     * @type {string}\n     * @memberof FilterQueryDto\n     */\n\n    @ApiProperty({ example: 'iso', required: true })\n    @IsNotEmpty()\n    @IsString()\n    field: string;\n\n    /**\n     * The operator to use for filtering.\n     *\n     * @type {string}\n     * @memberof FilterQueryDto\n     */\n\n    @ApiProperty({ example: '=' })\n    @IsNotEmpty()\n    @IsString()\n    operator: string;\n\n    /**\n     * The value to filter by.\n     *\n     * @type {string}\n     * @memberof FilterQueryDto\n     */\n\n    @ApiProperty({ example: 'IN' })\n    @IsNotEmpty()\n    @IsString()\n    value: string;\n}\n\n/**\n * DTO class for sorting options.\n *\n * @export\n */\nexport class SortByDto {\n    // @ApiProperty({ example: 'name' })\n    // @IsString()\n    // @Validate(IsValidField, [Country], {\n    //     message: 'Field must be a valid key of Country',\n    // })\n    // field: keyof Country;\n    /**\n     * The field to sort by.\n     *\n     * @type {string}\n     * @memberof SortByDto\n     */\n\n    @ApiProperty()\n    @IsString()\n    // @IsIn(abc(x : keyof TExposedAccountInfo), {\n    //     message: 'Field must be one of \"name\", \"age\", or \"status\"',\n    // })\n    // @Validate(IsValidField, [{ entity: () => T }], {\n    //     message: 'Field must be a valid key of the specified entity',\n    // })\n    field: string;\n\n    /**\n     * The direction of the sort (ascending or descending).\n     *\n     * @type {string}\n     * @memberof SortByDto\n     */\n\n    @ApiProperty({ example: 'ASC' })\n    @IsString()\n    @Matches(/^(ASC|DESC|asc|desc)$/, {\n        message: 'operator must be one of ASC, DESC, asc, or desc',\n    })\n    direction: string;\n}\n\n// export class PaginatedResultDto {\n//     @ApiProperty()\n//     data: T[];\n\n//     @ApiProperty()\n//     total: number;\n\n//     @ApiProperty()\n//     page: number;\n\n//     @ApiProperty()\n//     limit: number;\n// }\n\n//DX\n// import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\n// import { Type, Transform, plainToInstance } from 'class-transformer';\n// import {\n//     IsOptional,\n//     Min,\n//     Max,\n//     IsNotEmpty,\n//     IsString,\n//     IsArray,\n//     ValidateNested,\n//     Validate,\n//     Matches,\n// } from 'class-validator';\n\n// import { IsNumberStringOrNumber } from '@decorators/number.string.validator';\n// import { ToNumber } from '@decorators/transforms.decorator';\n// import { SortBy } from '@validators/filter.validator';\n\n// export class FilterQueryDto {\n//     @ApiProperty({ example: 'name', required: true })\n//     @IsNotEmpty()\n//     @IsString()\n//     field: string;\n\n//     @ApiProperty({ example: 'LIKE' })\n//     @IsNotEmpty()\n//     @IsString()\n//     operator: string;\n\n//     @ApiProperty({ example: '%John%' })\n//     @IsNotEmpty()\n//     @IsString()\n//     value: string;\n// }\n\n// export class SortByDto {\n//     @ApiProperty({ example: 'name' })\n//     @IsString()\n//     field: string;\n\n//     @ApiProperty({ example: 'ASC' })\n//     @IsString()\n//     @Matches(/^(ASC|DESC|asc|desc)$/, {\n//         message: 'operator must be one of ASC, DESC, asc, or desc',\n//     })\n//     direction: string;\n// }\n\n// export class PaginationQueryDto {\n//     @ApiPropertyOptional({\n//         description: 'Page number',\n//         minimum: 1,\n//         default: 1,\n//     })\n//     @IsOptional()\n//     @IsNumberStringOrNumber()\n//     @ToNumber()\n//     @Min(1)\n//     // @Transform(({ value }) => {\n//     //     const strippedValue = String(value).replace(/['\"]+/g, '');\n//     //     const numberValue = Number(strippedValue);\n//     //     return isNaN(numberValue) ? 'undefined' : numberValue;\n//     // })\n//     readonly page?: number;\n\n//     @ApiPropertyOptional({\n//         description: 'Record limit',\n//         minimum: 1,\n//         maximum: 500,\n//         default: 10,\n//     })\n//     @IsOptional()\n//     @IsNumberStringOrNumber()\n//     @ToNumber()\n//     @Min(10)\n//     @Max(500)\n//     readonly limit?: number = 10;\n\n//     // @IsOptional()\n//     // @IsArray()\n//     // @ValidateNested({ each: true })\n//     // @Type(() => FilterQueryDto)\n//     // filters?: FilterQueryDto[];\n//     // // filters?: any;\n//     @ApiPropertyOptional({\n//         name: 'filters',\n//         required: false,\n//         type: String,\n//         description: 'Array of filter objects as a JSON string',\n//         example:\n//             '[{\"field\":\"name\",\"operator\":\"LIKE\",\"value\":\"John\"},{\"field\":\"age\",\"operator\":\">\",\"value\":\"30\"}]',\n//     })\n//     @IsOptional()\n//     @Transform(({ value }) => {\n//         return value ? plainToInstance(FilterQueryDto, JSON.parse(value)) : undefined;\n//     })\n//     @ValidateNested({ each: true })\n//     @Type(() => FilterQueryDto)\n//     filters?: FilterQueryDto[] | null;\n\n//     // @ApiPropertyOptional({\n//     //     description: ' Name or City:  ASC or DESC',\n//     //     example: 'name ASC',\n//     // })\n//     // @IsOptional()\n//     // @IsString()\n//     // @Validate(SortBy)\n//     // readonly sort?: string;\n//     // @ApiPropertyOptional({ type: [SortByDto], isArray: true })\n//     // @IsOptional()\n//     // @Transform(({ value }) => {\n//     //     return value ? plainToInstance(SortUserDto, JSON.parse(value)) : undefined;\n//     // })\n//     // @ValidateNested({ each: true })\n//     // @Type(() => SortUserDto)\n//     // sort?: SortUserDto[] | null;\n\n//     @ApiPropertyOptional({\n//         name: 'sort',\n//         required: false,\n//         type: String,\n//         description: 'Array of sort objects as a JSON string',\n//         example: '[{\"field\":\"name\",\"direction\":\"ASC\"},{\"field\":\"age\",\"direction\":\"DESC\"}]',\n//     })\n//     @IsOptional()\n//     @Transform(({ value }) => {\n//         return value ? plainToInstance(SortByDto, JSON.parse(value)) : undefined;\n//     })\n//     @ValidateNested({ each: true })\n//     @Type(() => SortByDto)\n//     sort?: SortByDto[] | null;\n// }\n\n// export class PaginatedResultDto {\n//     @ApiProperty()\n//     data: T[];\n\n//     @ApiProperty()\n//     total: number;\n\n//     @ApiProperty()\n//     page: number;\n\n//     @ApiProperty()\n//     limit: number;\n// }\n\n// // import { ApiProperty, ApiExtraModels } from '@nestjs/swagger';\n\n// // import { Type } from 'class-transformer';\n// // import { IsOptional, IsString, IsArray, ValidateNested, IsNumber } from 'class-validator';\n\n// // // export class FilterQueryDto {\n// // //     @ApiProperty({ example: 'name' })\n// // //     field: string;\n\n// // //     @ApiProperty({ example: 'LIKE' })\n// // //     operator: string;\n\n// // //     @ApiProperty({ example: '%John%' })\n// // //     value: string;\n// // // }\n// // export class FilterQueryDto {\n// //     @ApiProperty({ example: 'country_name' })\n// //     @IsString()\n// //     field: string;\n\n// //     @ApiProperty({ example: 'LIKE' })\n// //     @IsString()\n// //     operator: string;\n\n// //     @ApiProperty({ example: '%United%' })\n// //     @IsString()\n// //     value: string;\n// // }\n// // @ApiExtraModels(FilterQueryDto)\n// // export class PaginationQueryDto {\n// //     @ApiProperty({ example: 1, required: false })\n// //     @IsOptional()\n// //     @IsNumber()\n// //     @Type(() => Number)\n// //     page?: number = 1;\n\n// //     @ApiProperty({ example: 10, required: false })\n// //     @IsOptional()\n// //     @IsNumber()\n// //     @Type(() => Number)\n// //     limit?: number = 10;\n\n// //     // @ApiProperty({\n// //     //     type: [FilterQueryDto],\n// //     //     required: false,\n// //     //     isArray: true,\n// //     // })\n// //     // @Type(() => FilterQueryDto)\n// //     // filters?: FilterQueryDto[];\n// //     @ApiProperty({\n// //         type: FilterQueryDto,\n// //         required: false,\n// //         isArray: true,\n// //     })\n// //     // @IsOptional()\n// //     @IsArray()\n// //     @ValidateNested({ each: true })\n// //     @Type(() => FilterQueryDto)\n// //     filters?: FilterQueryDto[];\n\n// //     // @ApiProperty({\n// //     //     type: [Object],\n// //     //     // items: {\n// //     //     //     type: 'object',\n// //     //     //     items: {\n// //     //     //         type: 'object',\n// //     //     //     },\n// //     //     // },\n// //     // })\n// //     // coords: FilterQueryDto[];\n\n// //     // @ApiProperty({ type: String, required: false })\n// //     // @IsOptional()\n// //     // @IsArray()\n// //     // @ValidateNested({ each: true })\n// //     // @Type(() => FilterQueryDto)\n// //     // filters?: FilterQueryDto[];\n\n// //     @ApiProperty({ example: 'name ASC1', required: false })\n// //     sort?: string;\n// // }\n\n// // // export class PaginationQueryDto {\n// // //     @ApiProperty({ example: 1, required: false })\n// // //     page?: number = 1;\n\n// // //     @ApiProperty({ example: 10, required: false })\n// // //     limit?: number = 10;\n\n// // //     // @ApiProperty({ type: [FilterQueryDto], required: false, isArray: true })\n// // //     // filters?: FilterQueryDto[];\n\n// // //     // @ApiProperty({ type: String, required: false, isArray: true })\n// // //     // filters?: FilterQueryDto[];\n\n// // //     // @ApiProperty({ type: [FilterQueryDto], required: false, isArray: true })\n// // //     // @Type(() => FilterQueryDto)\n// // //     // filters?: FilterQueryDto[];\n\n// // //     @ApiProperty({ type: [FilterQueryDto], required: false })\n// // //     @IsOptional()\n// // //     @IsArray()\n// // //     @ValidateNested({ each: true })\n// // //     @Type(() => FilterQueryDto)\n// // //     filters?: FilterQueryDto[];\n\n// // //     @ApiProperty({ example: 'name ASC1', required: false })\n// // //     sort?: string;\n// // // }\n\n// // export class PaginatedResultDto {\n// //     @ApiProperty()\n// //     data: T[];\n\n// //     @ApiProperty()\n// //     total: number;\n\n// //     @ApiProperty()\n// //     page: number;\n\n// //     @ApiProperty()\n// //     limit: number;\n// // }\n\n// // export class abc {\n// //     @ApiProperty()\n// //     page: number;\n\n// //     @ApiProperty()\n// //     limit: number;\n// // }\n\n// // import { applyDecorators } from '@nestjs/common';\n// // import { ApiProperty, ApiExtraModels, ApiQuery, getSchemaPath } from '@nestjs/swagger';\n\n// // /**\n// //  * Combines Swagger Decorators to create a description for `filters[name]=something`\n// //  *  - has support for swagger\n// //  *  - automatic transformation with nestjs\n// //  */\n// // // // eslint-disable-next-line @typescript-eslint/ban-types,@typescript-eslint/explicit-module-boundary-types\n// // // export function ApiFilterQuery(fieldName: string, filterDto: Function) {\n// // //     return applyDecorators(\n// // //         ApiExtraModels(filterDto),\n// // //         ApiQuery({\n// // //             required: false,\n// // //             name: fieldName,\n// // //             style: 'deepObject',\n// // //             explode: true,\n// // //             type: 'object',\n// // //             schema: {\n// // //                 $ref: getSchemaPath(filterDto),\n// // //             },\n// // //         })\n// // //     );\n// // // }\n// // // eslint-disable-next-line @typescript-eslint/ban-types,@typescript-eslint/explicit-module-boundary-types\n// // export function ApiFilterQuery(fieldName: string, filterDto: Function, index: number) {\n// //     return applyDecorators(\n// //         ApiExtraModels(filterDto),\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}]`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //             schema: {\n// //                 $ref: getSchemaPath(filterDto),\n// //             },\n// //         })\n// //     );\n// // }\n\n// // export function ApiFilterQuery(fieldName: string, index: number) {\n// //     return applyDecorators(\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}].field`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //         }),\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}].operator`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //         }),\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}].value`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //         })\n// //     );\n// // }\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HelperModule.html":{"url":"modules/HelperModule.html","title":"module - HelperModule","body":"\n                   \n\n\n\n\n    Modules\n    HelperModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_HelperModule\n\n\n\ncluster_HelperModule_exports\n\n\n\ncluster_HelperModule_providers\n\n\n\n\nPaginationService \n\nPaginationService \n\n\n\nPrismaService \n\nPrismaService \n\n\n\nUtilsService \n\nUtilsService \n\n\n\nHelperModule\n\nHelperModule\n\nPaginationService  -->\n\nHelperModule->PaginationService \n\n\n\nPrismaService  -->\n\nHelperModule->PrismaService \n\n\n\nUtilsService  -->\n\nHelperModule->UtilsService \n\n\n\n\n\nPaginationService\n\nPaginationService\n\nHelperModule -->\n\nPaginationService->HelperModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nHelperModule -->\n\nPrismaService->HelperModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/helper/helper.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            The HelperModule is a global module that provides common utility services across the application.\nIt is marked as global, meaning its providers are available throughout the application without needing to import the module in other modules.\n\nThe HttpModule is imported to allow services within this module to make HTTP requests.\nThe module exports its services and HttpModule, making them available for use in other modules.\n\nExample :```typescript\n@Module({\n    imports: [HttpModule],\n    providers: [PaginationService, PrismaService, UtilsService],\n    exports: [PaginationService, PrismaService, UtilsService, HttpModule],\n})\nexport class HelperModule {}Example :\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PaginationService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PaginationService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            UtilsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from '@nestjs/axios';\nimport { Global, Module } from '@nestjs/common';\n\n// import { ConfigService } from './services/config.service';\nimport { PaginationService } from './services/pagination.service';\nimport { PrismaService } from './services/prisma.service';\nimport { UtilsService } from './services/util.service';\n\nconst providers = [PaginationService, PrismaService, UtilsService]; // ConfigService,\n\n/**\n * @module HelperModule\n *\n * @description\n * The `HelperModule` is a global module that provides common utility services across the application.\n * It is marked as global, meaning its providers are available throughout the application without needing to import the module in other modules.\n *\n * @remarks\n * - The `HttpModule` is imported to allow services within this module to make HTTP requests.\n * - The module exports its services and `HttpModule`, making them available for use in other modules.\n *\n * @example\n * ```typescript\n * @Module({\n *     imports: [HttpModule],\n *     providers: [PaginationService, PrismaService, UtilsService],\n *     exports: [PaginationService, PrismaService, UtilsService, HttpModule],\n * })\n * export class HelperModule {}\n * ```\n */\n\n@Global()\n@Module({\n    // imports: [],\n    // providers: [ConfigService, PrismaService],\n    // controllers: [],\n    // exports: [ConfigService, PrismaService],\n    providers,\n    imports: [HttpModule],\n    exports: [...providers, HttpModule],\n})\nexport class HelperModule {}\n\n// import { Module } from '@nestjs/common';\n// import { JwtService } from '@nestjs/jwt';\n\n// import { EncryptionService } from './services/encryption.service';\n// import { PrismaService } from './services/prisma.service';\n// import { TaskService } from './services/task.service';\n\n// @Module({\n//   imports: [],\n//   providers: [JwtService, EncryptionService, PrismaService, TaskService],\n//   controllers: [],\n//   exports: [EncryptionService, PrismaService, TaskService],\n// })\n// export class HelperModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HomeController.html":{"url":"controllers/HomeController.html","title":"controller - HomeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HomeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/home/home.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                This file defines the HomeController class, which handles HTTP requests related to the home feature of the application.\nThe HomeController class is responsible for handling incoming HTTP requests and returning responses for the home-related endpoints.\nThis controller uses the HomeService to perform the necessary business logic.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                appInfo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        appInfo\n                        \n                    \n                \n            \n            \n                \n                        \n                    appInfo()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/home/home.controller.ts:30\n                        \n                    \n\n\n            \n                \n                        Handles GET requests to the root endpoint and returns application information.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The application information.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\n\nimport { HomeService } from './home.service';\n\n/**\n * @fileoverview\n * This file defines the `HomeController` class, which handles HTTP requests related to the home feature of the application.\n *\n * @module\n * @description\n * The `HomeController` class is responsible for handling incoming HTTP requests and returning responses for the home-related endpoints.\n * This controller uses the `HomeService` to perform the necessary business logic.\n */\n\n@ApiTags('Home')\n@Controller()\nexport class HomeController {\n    /**\n     * Constructs a new `HomeController`.\n     * @param {HomeService} service - The service used to handle business logic for home-related endpoints.\n     */\n    constructor(private service: HomeService) {}\n\n    /**\n     * Handles GET requests to the root endpoint and returns application information.\n     * @returns {object} The application information.\n     */\n    @Get()\n    appInfo(): object {\n        return this.service.appInfo();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HomeModule.html":{"url":"modules/HomeModule.html","title":"module - HomeModule","body":"\n                   \n\n\n\n\n    Modules\n    HomeModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_HomeModule\n\n\n\ncluster_HomeModule_providers\n\n\n\n\nHomeService\n\nHomeService\n\n\n\nHomeModule\n\nHomeModule\n\nHomeModule -->\n\nHomeService->HomeModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/home/home.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            This file defines the HomeModule class, which is responsible for the home-related functionalities of the application.\nThe HomeModule class configures the home feature of the application by declaring its controller and service.\nThis module handles the business logic and request handling for home-related endpoints.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HomeService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            HomeController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { HomeController } from './home.controller';\nimport { HomeService } from './home.service';\n\n/**\n * @fileoverview\n * This file defines the `HomeModule` class, which is responsible for the home-related functionalities of the application.\n *\n * @module\n * @description\n * The `HomeModule` class configures the home feature of the application by declaring its controller and service.\n * This module handles the business logic and request handling for home-related endpoints.\n */\n\n@Module({\n    imports: [],\n    controllers: [\n        /**\n         * Controller responsible for handling incoming requests and returning responses related to the home feature.\n         */\n        HomeController,\n    ],\n    providers: [\n        /**\n         * Service responsible for handling the business logic related to the home feature.\n         */\n        HomeService,\n    ],\n})\nexport class HomeModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HomeService.html":{"url":"injectables/HomeService.html","title":"injectable - HomeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HomeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/home/home.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the HomeService class, which provides methods for retrieving application information from the configuration.\nThe HomeService class is responsible for retrieving application information from the configuration using the ConfigService.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                appInfo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/home/home.service.ts:15\n                            \n                        \n\n                \n                    \n                            Constructs a new HomeService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe configuration service used to access application configuration values.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        appInfo\n                        \n                    \n                \n            \n            \n                \nappInfo()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/home/home.service.ts:26\n                        \n                    \n\n\n            \n                \n                        Retrieves and returns application information from the configuration.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                An object containing the application's name, description, app prefix, and API prefix.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\nimport { AllConfigType } from '@config/type/config.type';\n\n/**\n * @fileoverview\n * This file defines the `HomeService` class, which provides methods for retrieving application information from the configuration.\n *\n * @module\n * @description\n * The `HomeService` class is responsible for retrieving application information from the configuration using the `ConfigService`.\n */\n@Injectable()\nexport class HomeService {\n    /**\n     * Constructs a new `HomeService`.\n     * @param {ConfigService} configService - The configuration service used to access application configuration values.\n     */\n    constructor(private configService: ConfigService) {}\n\n    /**\n     * Retrieves and returns application information from the configuration.\n     * @returns {object} An object containing the application's name, description, app prefix, and API prefix.\n     */\n    appInfo(): object {\n        return {\n            name: this.configService.get('app.name', { infer: true }),\n            description: this.configService.get('app.description', { infer: true }),\n            appPrefix: this.configService.get('app.appPrefix', { infer: true }),\n            apiPrefix: this.configService.get('app.apiPrefix', { infer: true }),\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpErrorFilter.html":{"url":"classes/HttpErrorFilter.html","title":"class - HttpErrorFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpErrorFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/exceptions/http-error.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                Global HTTP error filter.\nadditional error information such as the HTTP status, timestamp, request URL, method, and message.\nIt logs the error details, particularly for internal server errors.\nExample :```typescript\nimport { HttpErrorFilter } from './path/to/filter';@Module({\n  providers: [\n    {\n      provide: APP_FILTER,\n      useClass: HttpErrorFilter,\n    },\n  ],\n})\nexport class AppModule {}\nExample :\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/exceptions/http-error.filter.ts:50\n                        \n                    \n\n\n            \n                \n                        Method that handles the exception.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                        HttpException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe exception that was thrown.\n\n\n                                            \n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe host object containing the details of the current request.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n    ExceptionFilter,\n    Catch,\n    ArgumentsHost,\n    Logger,\n    HttpException,\n    HttpStatus,\n} from '@nestjs/common';\n\n// import * as _ from 'lodash';\n\n//   import { SQLService } from \"../shared/services/sql.service\";\n\n//   import { Query } from \"./query\";\n\n/**\n * Global HTTP error filter.\n *\n * @description This filter catches all HTTP exceptions and formats the response to include\n * additional error information such as the HTTP status, timestamp, request URL, method, and message.\n * It logs the error details, particularly for internal server errors.\n *\n * @example\n * ```typescript\n * import { HttpErrorFilter } from './path/to/filter';\n *\n * @Module({\n *   providers: [\n *     {\n *       provide: APP_FILTER,\n *       useClass: HttpErrorFilter,\n *     },\n *   ],\n * })\n * export class AppModule {}\n * ```\n *\n * @implements {ExceptionFilter}\n */\n\n@Catch()\nexport class HttpErrorFilter implements ExceptionFilter {\n    /**\n     * Method that handles the exception.\n     *\n     * @param {HttpException} exception - The exception that was thrown.\n     * @param {ArgumentsHost} host - The host object containing the details of the current request.\n     */\n\n    catch(exception: HttpException, host: ArgumentsHost) {\n        const ctx = host.switchToHttp();\n        const response = ctx.getResponse();\n        const request = ctx.getRequest();\n        const status = exception.getStatus\n            ? exception.getStatus()\n            : HttpStatus.INTERNAL_SERVER_ERROR;\n        const errorResponse = {\n            code: status,\n            timestamp: new Date().toLocaleTimeString,\n            path: request.url,\n            method: request.method,\n            message:\n                status !== HttpStatus.INTERNAL_SERVER_ERROR\n                    ? exception.message || null\n                    : 'Internal server error',\n        };\n\n        if (status === HttpStatus.INTERNAL_SERVER_ERROR) {\n            Logger.error(`${request.method} ${request.url}`, exception.stack, 'ExceptionFilter');\n        } else {\n            Logger.error(\n                `${request.method} ${request.url}`,\n                JSON.stringify(errorResponse),\n                'ExceptionFilter'\n            );\n        }\n\n        response.status(status).json(errorResponse);\n\n        //   try {\n        //     const sqlService = new SQLService();\n        //     const query = new Query();\n        //     const reqstrobj = { body: _.clone(request.body), header: _.clone(request.header) };\n        //     const reqstr = JSON.stringify(reqstrobj);\n\n        //     const resstrobj = { res: _.clone(errorResponse), exception: exception.stack };\n        //     const resstr = JSON.stringify(resstrobj);\n        //     sqlService.run(\n        //       query.addHttpQueryError(\"HTTPERROR\", request.method, request.url, reqstr, resstr)\n        //     );\n        //   } catch (error) {}\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/http-exception.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                Exception filter for handling HTTP exceptions in a NestJS application.\nThis filter catches all HttpException instances and formats the response\nwith the status code, timestamp, and request path.\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/filters/http-exception.filter.ts:27\n                        \n                    \n\n\n            \n                \n                        Handles the HTTP exception and formats the error response.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                        HttpException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The HTTP exception to handle.\n\n                                            \n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The arguments host for accessing request and response objects.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ExceptionFilter, Catch, ArgumentsHost, HttpException } from '@nestjs/common';\n\nimport { Request, Response } from 'express';\n\n/**\n * Exception filter for handling HTTP exceptions in a NestJS application.\n *\n * This filter catches all `HttpException` instances and formats the response\n * with the status code, timestamp, and request path.\n *\n * @export\n * @class HttpExceptionFilter\n * @implements {ExceptionFilter}\n */\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n    /**\n     * Handles the HTTP exception and formats the error response.\n     *\n     * @param {HttpException} exception The HTTP exception to handle.\n     * @param {ArgumentsHost} host The arguments host for accessing request and response objects.\n     *\n     * @memberof HttpExceptionFilter\n     */\n\n    catch(exception: HttpException, host: ArgumentsHost) {\n        console.log('HTTP EXEPTION from filter');\n        const ctx = host.switchToHttp();\n        const response = ctx.getResponse();\n        const request = ctx.getRequest();\n        const status = exception.getStatus();\n\n        response.status(status).json({\n            statusCode: status,\n            timestamp: new Date().toISOString(),\n            path: request.url,\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAppConfig.html":{"url":"interfaces/IAppConfig.html","title":"interface - IAppConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IAppConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interfaces/app.interfaces.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration interface for application settings.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            apiPrefix\n                                        \n                                \n                                \n                                        \n                                            backendDomain\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            frontendDomain\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            port\n                                        \n                                \n                                \n                                        \n                                            workingDirectory\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        apiPrefix\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        apiPrefix:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The API prefix used in the application.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        backendDomain\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        backendDomain:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The domain for the backend application.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        frontendDomain\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        frontendDomain:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The domain for the frontend application.\nThis property is optional.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The name of the application.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        port\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        port:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The port on which the application is running.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        workingDirectory\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        workingDirectory:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The working directory of the application.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        'use strict';\n\n'use strict';\n\n/**\n * Configuration interface for application settings.\n *\n * @export\n * @interface IAppConfig\n */\nexport interface IAppConfig {\n    /**\n     * The name of the application.\n     *\n     * @type {string}\n     * @memberof IAppConfig\n     */\n\n    name: string;\n\n    /**\n     * The working directory of the application.\n     *\n     * @type {string}\n     * @memberof IAppConfig\n     */\n\n    workingDirectory: string;\n\n    /**\n     * The domain for the frontend application.\n     * This property is optional.\n     *\n     * @type {string}\n     * @memberof IAppConfig\n     */\n\n    frontendDomain?: string;\n\n    /**\n     * The domain for the backend application.\n     *\n     * @type {string}\n     * @memberof IAppConfig\n     */\n\n    backendDomain: string;\n\n    /**\n     * The port on which the application is running.\n     *\n     * @type {number}\n     * @memberof IAppConfig\n     */\n\n    port: number;\n\n    /**\n     * The API prefix used in the application.\n     *\n     * @type {string}\n     * @memberof IAppConfig\n     */\n\n    apiPrefix: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAwsConfig.html":{"url":"interfaces/IAwsConfig.html","title":"interface - IAwsConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IAwsConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interfaces/aws.interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            AWS_S3_ACCESS_KEY_ID\n                                        \n                                \n                                \n                                        \n                                            AWS_S3_BUCKET_NAME\n                                        \n                                \n                                \n                                        \n                                            AWS_S3_COMPANION_SECRET\n                                        \n                                \n                                \n                                        \n                                            AWS_S3_DEFAULT_REGION\n                                        \n                                \n                                \n                                        \n                                            AWS_S3_ENDPOINT\n                                        \n                                \n                                \n                                        \n                                            AWS_S3_SECRET_ACCESS_KEY\n                                        \n                                \n                                \n                                        \n                                            AWS_S3_SERVER_HOST\n                                        \n                                \n                                \n                                        \n                                            AWS_S3_TEMP_DIRECTORY\n                                        \n                                \n                                \n                                        \n                                            TUS_STORAGE_DRIVER\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        AWS_S3_ACCESS_KEY_ID\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        AWS_S3_ACCESS_KEY_ID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        AWS_S3_BUCKET_NAME\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        AWS_S3_BUCKET_NAME:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        AWS_S3_COMPANION_SECRET\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        AWS_S3_COMPANION_SECRET:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        AWS_S3_DEFAULT_REGION\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        AWS_S3_DEFAULT_REGION:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        AWS_S3_ENDPOINT\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        AWS_S3_ENDPOINT:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        AWS_S3_SECRET_ACCESS_KEY\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        AWS_S3_SECRET_ACCESS_KEY:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        AWS_S3_SERVER_HOST\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        AWS_S3_SERVER_HOST:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        AWS_S3_TEMP_DIRECTORY\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        AWS_S3_TEMP_DIRECTORY:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        TUS_STORAGE_DRIVER\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        TUS_STORAGE_DRIVER:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        'use strict';\n\nexport interface IAwsConfig {\n    AWS_S3_ACCESS_KEY_ID: string;\n    AWS_S3_SECRET_ACCESS_KEY: string;\n    AWS_S3_BUCKET_NAME: string;\n    AWS_S3_DEFAULT_REGION: string;\n    AWS_S3_TEMP_DIRECTORY: string;\n    AWS_S3_ENDPOINT: string;\n\n    AWS_S3_SERVER_HOST: string;\n    AWS_S3_COMPANION_SECRET: string;\n    TUS_STORAGE_DRIVER: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IFileConfig.html":{"url":"interfaces/IFileConfig.html","title":"interface - IFileConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IFileConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interfaces/file.interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            accessKeyId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            awsDefaultS3Bucket\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            awsS3Region\n                                        \n                                \n                                \n                                        \n                                            driver\n                                        \n                                \n                                \n                                        \n                                            maxFileSize\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            secretAccessKey\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accessKeyId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accessKeyId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        awsDefaultS3Bucket\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        awsDefaultS3Bucket:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        awsS3Region\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        awsS3Region:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        driver\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        driver:         FileDriver\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         FileDriver\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxFileSize\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxFileSize:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        secretAccessKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        secretAccessKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        'use strict';\n\nimport { FileDriver } from '@config/type/file-config.type';\nexport interface IFileConfig {\n    driver: FileDriver;\n    accessKeyId?: string;\n    secretAccessKey?: string;\n    awsDefaultS3Bucket?: string;\n    awsS3Region?: string;\n    maxFileSize: number;\n    // encoding: string;\n    // buffer: Buffer;\n    // fieldname: string;\n    // mimetype: string;\n    // originalname: string;\n    // size: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IJWTConfig.html":{"url":"interfaces/IJWTConfig.html","title":"interface - IJWTConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IJWTConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interfaces/jwt.interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            algorithm\n                                        \n                                \n                                \n                                        \n                                            audience\n                                        \n                                \n                                \n                                        \n                                            expirationTime\n                                        \n                                \n                                \n                                        \n                                            expiresInSeconds\n                                        \n                                \n                                \n                                        \n                                            issuer\n                                        \n                                \n                                \n                                        \n                                            secret\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        algorithm\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        algorithm:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        audience\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        audience:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expirationTime\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expirationTime:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expiresInSeconds\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expiresInSeconds:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        issuer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        issuer:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        secret\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        secret:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        'use strict';\n\nexport interface IJWTConfig {\n    secret: string;\n    algorithm: string;\n    expiresInSeconds: number;\n    expirationTime: number;\n    issuer: string;\n    audience: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/INodeEmailerConfig.html":{"url":"interfaces/INodeEmailerConfig.html","title":"interface - INodeEmailerConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  INodeEmailerConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interfaces/node-emailer.interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            NODE_EMAILER_FROM_EMAIL\n                                        \n                                \n                                \n                                        \n                                            NODE_EMAILER_HOST\n                                        \n                                \n                                \n                                        \n                                            NODE_EMAILER_PASSWORD\n                                        \n                                \n                                \n                                        \n                                            NODE_EMAILER_PORT\n                                        \n                                \n                                \n                                        \n                                            NODE_EMAILER_TO_EMAIL\n                                        \n                                \n                                \n                                        \n                                            NODE_EMAILER_USER\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        NODE_EMAILER_FROM_EMAIL\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        NODE_EMAILER_FROM_EMAIL:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        NODE_EMAILER_HOST\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        NODE_EMAILER_HOST:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        NODE_EMAILER_PASSWORD\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        NODE_EMAILER_PASSWORD:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        NODE_EMAILER_PORT\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        NODE_EMAILER_PORT:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        NODE_EMAILER_TO_EMAIL\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        NODE_EMAILER_TO_EMAIL:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        NODE_EMAILER_USER\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        NODE_EMAILER_USER:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        'use strict';\n\nexport interface INodeEmailerConfig {\n    NODE_EMAILER_HOST: string;\n    NODE_EMAILER_PORT: number;\n    NODE_EMAILER_USER: string;\n    NODE_EMAILER_PASSWORD: string;\n    NODE_EMAILER_FROM_EMAIL: string;\n    NODE_EMAILER_TO_EMAIL: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPageMetaDtoParameters.html":{"url":"interfaces/IPageMetaDtoParameters.html","title":"interface - IPageMetaDtoParameters","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPageMetaDtoParameters\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/dto/pagination.meta.dto.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            maxPages\n                                        \n                                \n                                \n                                        \n                                            paginationQueryDto\n                                        \n                                \n                                \n                                        \n                                            totalItems\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        maxPages\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxPages:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        paginationQueryDto\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        paginationQueryDto:         PaginationQueryDto\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PaginationQueryDto\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        totalItems\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        totalItems:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\n\nimport { PaginationQueryDto } from '@utils/dto/pagination.dto';\n\nexport interface IPageMetaDtoParameters {\n    paginationQueryDto: PaginationQueryDto;\n    totalItems: number;\n    maxPages?: number;\n}\n\n/**\n * PaginationMetaDto provides metadata for paginated responses.\n * This class helps in constructing the pagination information that can be used\n * to navigate through large sets of data.\n *\n * @example\n * {\n *   totalItems: 77,\n *   currentPage: 7,\n *   pageSize: 10,\n *   totalPages: 8,\n *   startPage: 1,\n *   endPage: 7,\n *   startIndex: 60,\n *   endIndex: 76,\n *   pages: [1, 2, 3, 4, 5, 6, 7]\n * }\n */\n\nexport class PaginationMetaDto {\n    /**\n     * The total number of items available.\n     *\n     * @example 77\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 77, //  'Total records'\n    })\n    readonly totalItems: number;\n\n    /**\n     * The current page number.\n     *\n     * @example 7\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 7, //  'Current page number',\n    })\n    readonly currentPage: number;\n\n    /**\n     * The number of items per page (page size).\n     *\n     * @example 10\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 10, //  'limit / page record number',\n    })\n    readonly pageSize: number;\n\n    /**\n     * The total number of pages based on total items and page size.\n     *\n     * @example 8\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 8, //  'Total pages',\n    })\n    readonly totalPages: number;\n\n    /**\n     * The start page in the pagination controls.\n     *\n     * @example 1\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 1, //  'Start page',\n    })\n    readonly startPage: number;\n\n    /**\n     * The end page in the pagination controls.\n     *\n     * @example 7\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 7, //  'End page',\n    })\n    readonly endPage: number;\n\n    /**\n     * The index of the first item on the current page.\n     *\n     * @example 60\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 0, //  'Record start index',\n    })\n    readonly startIndex: number;\n\n    /**\n     * The index of the last item on the current page.\n     *\n     * @example 76\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 76, //  'Record end index',\n    })\n    readonly endIndex: number;\n\n    /**\n     * An array of page numbers to display in pagination controls.\n     *\n     * @example [1, 2, 3, 4, 5, 6, 7]\n     */\n\n    @ApiPropertyOptional({\n        type: Array,\n        example: [1, 2, 3, 4, 5, 6, 7], //  'Array of page number',\n    })\n    readonly pages: any;\n\n    /**\n     * Creates an instance of PaginationMetaDto.\n     *\n     * @param {IPageMetaDtoParameters} params - Parameters required for creating pagination metadata.\n     */\n\n    constructor({ paginationQueryDto, totalItems, maxPages = 10 }: IPageMetaDtoParameters) {\n        const pageSize = paginationQueryDto.limit || 10;\n        let currentPage = paginationQueryDto.page || 1;\n\n        // calculate total pages\n\n        const totalPages = Math.ceil(totalItems / pageSize);\n\n        // ensure current page isn't out of range\n        if (currentPage  totalPages) {\n            currentPage = totalPages;\n        }\n\n        let startPage: number, endPage: number;\n\n        if (totalPages = totalPages) {\n                // current page near the end\n                startPage = totalPages - maxPages + 1;\n                endPage = totalPages;\n            } else {\n                // current page somewhere in the middle\n                startPage = currentPage - maxPagesBeforeCurrentPage;\n                endPage = currentPage + maxPagesAfterCurrentPage;\n            }\n        }\n\n        // calculate start and end item indexes\n        const startIndex = (currentPage - 1) * pageSize;\n        const endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\n\n        // create an array of pages to ng-repeat in the pager control\n        const pages = Array.from(Array(endPage + 1 - startPage).keys()).map((i) => startPage + i);\n\n        this.totalItems = totalItems;\n        this.currentPage = currentPage;\n        this.pageSize = pageSize;\n        this.totalPages = totalPages;\n        this.startPage = startPage;\n        this.endPage = endPage;\n        this.startIndex = startIndex > 0 ? startIndex : 0;\n        this.endIndex = endIndex > 0 ? endIndex : 0;\n        this.pages = pages;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPaginationFieldConfig.html":{"url":"interfaces/IPaginationFieldConfig.html","title":"interface - IPaginationFieldConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPaginationFieldConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/types/pagination-options.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for configuring pagination fields in a query.\nThis interface provides a contract for configuring how fields should be handled when constructing\npagination queries, including specifying the table to join, generating an alias, and selecting fields.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            alias\n                                        \n                                \n                                \n                                        \n                                            joinTable\n                                        \n                                \n                                \n                                        \n                                            selectFields\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        alias\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        alias:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A function that returns an alias for the table.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        joinTable\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        joinTable:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The table to join for pagination queries.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectFields\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectFields:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A function that returns an array of field names to select based on the provided alias.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface IPaginationFieldConfig {\n    /**\n     * The table to join for pagination queries.\n     *\n     * @type {any}\n     */\n\n    joinTable: any;\n\n    /**\n     * A function that returns an alias for the table.\n     *\n     * @returns {string} - The alias for the table.\n     */\n\n    alias: () => string;\n\n    /**\n     * A function that returns an array of field names to select based on the provided alias.\n     *\n     * @param {string} alias - The alias for the table.\n     * @returns {string[]} - An array of field names to select.\n     */\n\n    selectFields: (alias: string) => string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPostgreSQLConfig.html":{"url":"interfaces/IPostgreSQLConfig.html","title":"interface - IPostgreSQLConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPostgreSQLConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interfaces/postgres.interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            POSTGRES_CONNECTION_LIMIT\n                                        \n                                \n                                \n                                        \n                                            POSTGRES_HOST\n                                        \n                                \n                                \n                                        \n                                            POSTGRES_NAME\n                                        \n                                \n                                \n                                        \n                                            POSTGRES_PASSWORD\n                                        \n                                \n                                \n                                        \n                                            POSTGRES_POOL_TIMEOUT\n                                        \n                                \n                                \n                                        \n                                            POSTGRES_PORT\n                                        \n                                \n                                \n                                        \n                                            POSTGRES_SCHEMA\n                                        \n                                \n                                \n                                        \n                                            POSTGRES_USER\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        POSTGRES_CONNECTION_LIMIT\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        POSTGRES_CONNECTION_LIMIT:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        POSTGRES_HOST\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        POSTGRES_HOST:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        POSTGRES_NAME\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        POSTGRES_NAME:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        POSTGRES_PASSWORD\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        POSTGRES_PASSWORD:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        POSTGRES_POOL_TIMEOUT\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        POSTGRES_POOL_TIMEOUT:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        POSTGRES_PORT\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        POSTGRES_PORT:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        POSTGRES_SCHEMA\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        POSTGRES_SCHEMA:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        POSTGRES_USER\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        POSTGRES_USER:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        'use strict';\n\nexport interface IPostgreSQLConfig {\n    POSTGRES_HOST: string;\n    POSTGRES_PORT: string;\n    POSTGRES_USER: string;\n    POSTGRES_PASSWORD: string;\n    POSTGRES_NAME: string;\n    POSTGRES_CONNECTION_LIMIT: string;\n    POSTGRES_POOL_TIMEOUT: string;\n    POSTGRES_SCHEMA: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISMSConfig.html":{"url":"interfaces/ISMSConfig.html","title":"interface - ISMSConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ISMSConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interfaces/sms.interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            API_KEY\n                                        \n                                \n                                \n                                        \n                                            SENDER_ID\n                                        \n                                \n                                \n                                        \n                                            SMS_PROVIDER_NAME\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        API_KEY\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        API_KEY:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        SENDER_ID\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        SENDER_ID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        SMS_PROVIDER_NAME\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        SMS_PROVIDER_NAME:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        'use strict';\n\nexport interface ISMSConfig {\n    SMS_PROVIDER_NAME: string;\n    API_KEY: string;\n    SENDER_ID: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISendGridConfig.html":{"url":"interfaces/ISendGridConfig.html","title":"interface - ISendGridConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ISendGridConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interfaces/sendgrid.interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            FROM_EMAIL\n                                        \n                                \n                                \n                                        \n                                            SENDGRID_API_KEY\n                                        \n                                \n                                \n                                        \n                                            TO_EMAIL\n                                        \n                                \n                                \n                                        \n                                            WELCOME_EMAIL\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        FROM_EMAIL\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        FROM_EMAIL:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        SENDGRID_API_KEY\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        SENDGRID_API_KEY:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        TO_EMAIL\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        TO_EMAIL:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        WELCOME_EMAIL\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        WELCOME_EMAIL:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        'use strict';\n\nexport interface ISendGridConfig {\n    SENDGRID_API_KEY: string;\n    FROM_EMAIL: string;\n    TO_EMAIL: string;\n    WELCOME_EMAIL: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUploadFileConfig.html":{"url":"interfaces/IUploadFileConfig.html","title":"interface - IUploadFileConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUploadFileConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interfaces/upload-file.interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            FILE_UPLOAD_DESTINATION\n                                        \n                                \n                                \n                                        \n                                            MAX_UPLOAD_FILE_SIZE\n                                        \n                                \n                                \n                                        \n                                            MULTIPLE_FILE_PATH\n                                        \n                                \n                                \n                                        \n                                            PROFILE_PIC_FILE_PATH\n                                        \n                                \n                                \n                                        \n                                            TEMP_FILE_UPLOAD_URL\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        FILE_UPLOAD_DESTINATION\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        FILE_UPLOAD_DESTINATION:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        MAX_UPLOAD_FILE_SIZE\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        MAX_UPLOAD_FILE_SIZE:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        MULTIPLE_FILE_PATH\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        MULTIPLE_FILE_PATH:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        PROFILE_PIC_FILE_PATH\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        PROFILE_PIC_FILE_PATH:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        TEMP_FILE_UPLOAD_URL\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        TEMP_FILE_UPLOAD_URL:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        'use strict';\n\nexport interface IUploadFileConfig {\n    TEMP_FILE_UPLOAD_URL: string;\n    FILE_UPLOAD_DESTINATION: string;\n    MAX_UPLOAD_FILE_SIZE: number;\n    PROFILE_PIC_FILE_PATH: string;\n    MULTIPLE_FILE_PATH: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationMetaDto.html":{"url":"classes/PaginationMetaDto.html","title":"class - PaginationMetaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationMetaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/dto/pagination.meta.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                PaginationMetaDto provides metadata for paginated responses.\nThis class helps in constructing the pagination information that can be used\nto navigate through large sets of data.\nExample :{\n  totalItems: 77,\n  currentPage: 7,\n  pageSize: 10,\n  totalPages: 8,\n  startPage: 1,\n  endPage: 7,\n  startIndex: 60,\n  endIndex: 76,\n  pages: [1, 2, 3, 4, 5, 6, 7]\n}\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Readonly\n                                currentPage\n                            \n                            \n                                    \n                                    Readonly\n                                endIndex\n                            \n                            \n                                    \n                                    Readonly\n                                endPage\n                            \n                            \n                                    \n                                    Readonly\n                                pages\n                            \n                            \n                                    \n                                    Readonly\n                                pageSize\n                            \n                            \n                                    \n                                    Readonly\n                                startIndex\n                            \n                            \n                                    \n                                    Readonly\n                                startPage\n                            \n                            \n                                    \n                                    Readonly\n                                totalItems\n                            \n                            \n                                    \n                                    Readonly\n                                totalPages\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: IPageMetaDtoParameters)\n                    \n                \n                        \n                            \n                                Defined in src/utils/dto/pagination.meta.dto.ts:137\n                            \n                        \n\n                \n                    \n                            Creates an instance of PaginationMetaDto.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                        IPageMetaDtoParameters\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        currentPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: Number, example: 7})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.meta.dto.ts:53\n                        \n                    \n\n            \n                \n                    The current page number.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        endIndex\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: Number, example: 76})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.meta.dto.ts:125\n                        \n                    \n\n            \n                \n                    The index of the last item on the current page.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        endPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: Number, example: 7})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.meta.dto.ts:101\n                        \n                    \n\n            \n                \n                    The end page in the pagination controls.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        pages\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: Array, example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.meta.dto.ts:137\n                        \n                    \n\n            \n                \n                    An array of page numbers to display in pagination controls.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        pageSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: Number, example: 10})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.meta.dto.ts:65\n                        \n                    \n\n            \n                \n                    The number of items per page (page size).\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        startIndex\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: Number, example: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.meta.dto.ts:113\n                        \n                    \n\n            \n                \n                    The index of the first item on the current page.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        startPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: Number, example: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.meta.dto.ts:89\n                        \n                    \n\n            \n                \n                    The start page in the pagination controls.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        totalItems\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: Number, example: 77})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.meta.dto.ts:41\n                        \n                    \n\n            \n                \n                    The total number of items available.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        totalPages\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: Number, example: 8})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.meta.dto.ts:77\n                        \n                    \n\n            \n                \n                    The total number of pages based on total items and page size.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\n\nimport { PaginationQueryDto } from '@utils/dto/pagination.dto';\n\nexport interface IPageMetaDtoParameters {\n    paginationQueryDto: PaginationQueryDto;\n    totalItems: number;\n    maxPages?: number;\n}\n\n/**\n * PaginationMetaDto provides metadata for paginated responses.\n * This class helps in constructing the pagination information that can be used\n * to navigate through large sets of data.\n *\n * @example\n * {\n *   totalItems: 77,\n *   currentPage: 7,\n *   pageSize: 10,\n *   totalPages: 8,\n *   startPage: 1,\n *   endPage: 7,\n *   startIndex: 60,\n *   endIndex: 76,\n *   pages: [1, 2, 3, 4, 5, 6, 7]\n * }\n */\n\nexport class PaginationMetaDto {\n    /**\n     * The total number of items available.\n     *\n     * @example 77\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 77, //  'Total records'\n    })\n    readonly totalItems: number;\n\n    /**\n     * The current page number.\n     *\n     * @example 7\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 7, //  'Current page number',\n    })\n    readonly currentPage: number;\n\n    /**\n     * The number of items per page (page size).\n     *\n     * @example 10\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 10, //  'limit / page record number',\n    })\n    readonly pageSize: number;\n\n    /**\n     * The total number of pages based on total items and page size.\n     *\n     * @example 8\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 8, //  'Total pages',\n    })\n    readonly totalPages: number;\n\n    /**\n     * The start page in the pagination controls.\n     *\n     * @example 1\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 1, //  'Start page',\n    })\n    readonly startPage: number;\n\n    /**\n     * The end page in the pagination controls.\n     *\n     * @example 7\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 7, //  'End page',\n    })\n    readonly endPage: number;\n\n    /**\n     * The index of the first item on the current page.\n     *\n     * @example 60\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 0, //  'Record start index',\n    })\n    readonly startIndex: number;\n\n    /**\n     * The index of the last item on the current page.\n     *\n     * @example 76\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 76, //  'Record end index',\n    })\n    readonly endIndex: number;\n\n    /**\n     * An array of page numbers to display in pagination controls.\n     *\n     * @example [1, 2, 3, 4, 5, 6, 7]\n     */\n\n    @ApiPropertyOptional({\n        type: Array,\n        example: [1, 2, 3, 4, 5, 6, 7], //  'Array of page number',\n    })\n    readonly pages: any;\n\n    /**\n     * Creates an instance of PaginationMetaDto.\n     *\n     * @param {IPageMetaDtoParameters} params - Parameters required for creating pagination metadata.\n     */\n\n    constructor({ paginationQueryDto, totalItems, maxPages = 10 }: IPageMetaDtoParameters) {\n        const pageSize = paginationQueryDto.limit || 10;\n        let currentPage = paginationQueryDto.page || 1;\n\n        // calculate total pages\n\n        const totalPages = Math.ceil(totalItems / pageSize);\n\n        // ensure current page isn't out of range\n        if (currentPage  totalPages) {\n            currentPage = totalPages;\n        }\n\n        let startPage: number, endPage: number;\n\n        if (totalPages = totalPages) {\n                // current page near the end\n                startPage = totalPages - maxPages + 1;\n                endPage = totalPages;\n            } else {\n                // current page somewhere in the middle\n                startPage = currentPage - maxPagesBeforeCurrentPage;\n                endPage = currentPage + maxPagesAfterCurrentPage;\n            }\n        }\n\n        // calculate start and end item indexes\n        const startIndex = (currentPage - 1) * pageSize;\n        const endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\n\n        // create an array of pages to ng-repeat in the pager control\n        const pages = Array.from(Array(endPage + 1 - startPage).keys()).map((i) => startPage + i);\n\n        this.totalItems = totalItems;\n        this.currentPage = currentPage;\n        this.pageSize = pageSize;\n        this.totalPages = totalPages;\n        this.startPage = startPage;\n        this.endPage = endPage;\n        this.startIndex = startIndex > 0 ? startIndex : 0;\n        this.endIndex = endIndex > 0 ? endIndex : 0;\n        this.pages = pages;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationQueryDto.html":{"url":"classes/PaginationQueryDto.html","title":"class - PaginationQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/dto/pagination.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO class for pagination query parameters.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                filters\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                pagination\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                sort\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        filters\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FilterQueryDto[] | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({name: 'filters', required: false, type: String, description: 'Array of filter objects as a JSON string', example: '[{\"field\":\"name\",\"operator\":\"=\",\"value\":\"IN\"}]'})@IsOptional()@Transform( => )@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.dto.ts:119\n                        \n                    \n\n            \n                \n                    Filters to apply to the query.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Record limit', minimum: 1, maximum: 500, default: 10})@IsOptional()@IsNumberStringOrNumber()@ToNumber()@Min(10)@Max(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.dto.ts:97\n                        \n                    \n\n            \n                \n                    The number of records per page.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Page number', minimum: 1, default: 1})@IsOptional()@IsNumberStringOrNumber()@ToNumber()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.dto.ts:77\n                        \n                    \n\n            \n                \n                    The page number for pagination.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        pagination\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PaginationType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Pagination must all (Page and has_next_page), infinity (only has_next_page), paginate(only page)', enum: PaginationType, default: undefined})@IsEnum(PaginationType)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.dto.ts:59\n                        \n                    \n\n            \n                \n                    The type of pagination to apply.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        sort\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SortByDto[] | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({name: 'sort', required: false, type: String, description: 'Array of sort objects as a JSON string', example: '[{\"field\":\"name\",\"direction\":\"ASC\"}]'})@IsOptional()@Transform( => )@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.dto.ts:141\n                        \n                    \n\n            \n                \n                    Sorting options for the query.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nimport { Type, Transform, plainToInstance } from 'class-transformer';\nimport {\n    IsOptional,\n    Min,\n    Max,\n    IsNotEmpty,\n    IsString,\n    ValidateNested,\n    Matches,\n    IsEnum,\n    // Validate,\n    // IsIn,\n} from 'class-validator';\n\n// import { IsValidField } from '@core/validators/field.validator'; // Import the custom validator\nimport { IsNumberStringOrNumber } from '@decorators/number.string.validator';\nimport { ToNumber } from '@decorators/transforms.decorator';\n// import { IsNumberStringOrNumber } from '@decorators/number.string.validator';\n// import { ToNumber } from '@decorators/transforms.decorator';\n// import { Country } from '@modules/countries/dto/country';\n\n/**\n * Enum representing different pagination types.\n *\n * @export\n * @enum {string}\n */\n\nexport enum PaginationType {\n    NONE = 'no',\n    INFINITY = 'infinity',\n    PAGINATE = 'paginate',\n    ALL = 'all',\n}\n\n/**\n * DTO class for pagination query parameters.\n *\n * @export\n */\nexport class PaginationQueryDto {\n    /**\n     * The type of pagination to apply.\n     *\n     * @type {PaginationType}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        description:\n            'Pagination must all (Page and has_next_page), infinity (only has_next_page), paginate(only page)',\n        enum: PaginationType,\n        default: PaginationType.ALL,\n    })\n    @IsEnum(PaginationType)\n    @IsOptional()\n    readonly pagination: PaginationType;\n\n    /**\n     * The page number for pagination.\n     *\n     * @type {number}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        description: 'Page number',\n        minimum: 1,\n        default: 1,\n    })\n    @IsOptional()\n    @IsNumberStringOrNumber()\n    @ToNumber()\n    @Min(1)\n    readonly page?: number;\n\n    /**\n     * The number of records per page.\n     *\n     * @type {number}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        description: 'Record limit',\n        minimum: 1,\n        maximum: 500,\n        default: 10,\n    })\n    @IsOptional()\n    @IsNumberStringOrNumber()\n    @ToNumber()\n    @Min(10)\n    @Max(500)\n    readonly limit?: number = 10;\n\n    /**\n     * Filters to apply to the query.\n     *\n     * @type {FilterQueryDto[] | null}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        name: 'filters',\n        required: false,\n        type: String,\n        description: 'Array of filter objects as a JSON string',\n        example: '[{\"field\":\"name\",\"operator\":\"=\",\"value\":\"IN\"}]',\n    })\n    @IsOptional()\n    @Transform(({ value }) => {\n        return value ? plainToInstance(FilterQueryDto, JSON.parse(value)) : undefined;\n    })\n    @ValidateNested({ each: true })\n    @Type(() => FilterQueryDto)\n    filters?: FilterQueryDto[] | null;\n\n    /**\n     * Sorting options for the query.\n     *\n     * @type {SortByDto[] | null}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        name: 'sort',\n        required: false,\n        type: String,\n        description: 'Array of sort objects as a JSON string',\n        example: '[{\"field\":\"name\",\"direction\":\"ASC\"}]',\n    })\n    @IsOptional()\n    @Transform(({ value }) => {\n        return value ? plainToInstance(SortByDto, JSON.parse(value)) : undefined;\n    })\n    @ValidateNested({ each: true })\n    @Type(() => SortByDto)\n    sort?: SortByDto[] | null;\n}\n\n/**\n * DTO class for filter query parameters.\n *\n * @export\n */\nexport class FilterQueryDto {\n    /**\n     * The field to filter on.\n     *\n     * @type {string}\n     * @memberof FilterQueryDto\n     */\n\n    @ApiProperty({ example: 'iso', required: true })\n    @IsNotEmpty()\n    @IsString()\n    field: string;\n\n    /**\n     * The operator to use for filtering.\n     *\n     * @type {string}\n     * @memberof FilterQueryDto\n     */\n\n    @ApiProperty({ example: '=' })\n    @IsNotEmpty()\n    @IsString()\n    operator: string;\n\n    /**\n     * The value to filter by.\n     *\n     * @type {string}\n     * @memberof FilterQueryDto\n     */\n\n    @ApiProperty({ example: 'IN' })\n    @IsNotEmpty()\n    @IsString()\n    value: string;\n}\n\n/**\n * DTO class for sorting options.\n *\n * @export\n */\nexport class SortByDto {\n    // @ApiProperty({ example: 'name' })\n    // @IsString()\n    // @Validate(IsValidField, [Country], {\n    //     message: 'Field must be a valid key of Country',\n    // })\n    // field: keyof Country;\n    /**\n     * The field to sort by.\n     *\n     * @type {string}\n     * @memberof SortByDto\n     */\n\n    @ApiProperty()\n    @IsString()\n    // @IsIn(abc(x : keyof TExposedAccountInfo), {\n    //     message: 'Field must be one of \"name\", \"age\", or \"status\"',\n    // })\n    // @Validate(IsValidField, [{ entity: () => T }], {\n    //     message: 'Field must be a valid key of the specified entity',\n    // })\n    field: string;\n\n    /**\n     * The direction of the sort (ascending or descending).\n     *\n     * @type {string}\n     * @memberof SortByDto\n     */\n\n    @ApiProperty({ example: 'ASC' })\n    @IsString()\n    @Matches(/^(ASC|DESC|asc|desc)$/, {\n        message: 'operator must be one of ASC, DESC, asc, or desc',\n    })\n    direction: string;\n}\n\n// export class PaginatedResultDto {\n//     @ApiProperty()\n//     data: T[];\n\n//     @ApiProperty()\n//     total: number;\n\n//     @ApiProperty()\n//     page: number;\n\n//     @ApiProperty()\n//     limit: number;\n// }\n\n//DX\n// import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\n// import { Type, Transform, plainToInstance } from 'class-transformer';\n// import {\n//     IsOptional,\n//     Min,\n//     Max,\n//     IsNotEmpty,\n//     IsString,\n//     IsArray,\n//     ValidateNested,\n//     Validate,\n//     Matches,\n// } from 'class-validator';\n\n// import { IsNumberStringOrNumber } from '@decorators/number.string.validator';\n// import { ToNumber } from '@decorators/transforms.decorator';\n// import { SortBy } from '@validators/filter.validator';\n\n// export class FilterQueryDto {\n//     @ApiProperty({ example: 'name', required: true })\n//     @IsNotEmpty()\n//     @IsString()\n//     field: string;\n\n//     @ApiProperty({ example: 'LIKE' })\n//     @IsNotEmpty()\n//     @IsString()\n//     operator: string;\n\n//     @ApiProperty({ example: '%John%' })\n//     @IsNotEmpty()\n//     @IsString()\n//     value: string;\n// }\n\n// export class SortByDto {\n//     @ApiProperty({ example: 'name' })\n//     @IsString()\n//     field: string;\n\n//     @ApiProperty({ example: 'ASC' })\n//     @IsString()\n//     @Matches(/^(ASC|DESC|asc|desc)$/, {\n//         message: 'operator must be one of ASC, DESC, asc, or desc',\n//     })\n//     direction: string;\n// }\n\n// export class PaginationQueryDto {\n//     @ApiPropertyOptional({\n//         description: 'Page number',\n//         minimum: 1,\n//         default: 1,\n//     })\n//     @IsOptional()\n//     @IsNumberStringOrNumber()\n//     @ToNumber()\n//     @Min(1)\n//     // @Transform(({ value }) => {\n//     //     const strippedValue = String(value).replace(/['\"]+/g, '');\n//     //     const numberValue = Number(strippedValue);\n//     //     return isNaN(numberValue) ? 'undefined' : numberValue;\n//     // })\n//     readonly page?: number;\n\n//     @ApiPropertyOptional({\n//         description: 'Record limit',\n//         minimum: 1,\n//         maximum: 500,\n//         default: 10,\n//     })\n//     @IsOptional()\n//     @IsNumberStringOrNumber()\n//     @ToNumber()\n//     @Min(10)\n//     @Max(500)\n//     readonly limit?: number = 10;\n\n//     // @IsOptional()\n//     // @IsArray()\n//     // @ValidateNested({ each: true })\n//     // @Type(() => FilterQueryDto)\n//     // filters?: FilterQueryDto[];\n//     // // filters?: any;\n//     @ApiPropertyOptional({\n//         name: 'filters',\n//         required: false,\n//         type: String,\n//         description: 'Array of filter objects as a JSON string',\n//         example:\n//             '[{\"field\":\"name\",\"operator\":\"LIKE\",\"value\":\"John\"},{\"field\":\"age\",\"operator\":\">\",\"value\":\"30\"}]',\n//     })\n//     @IsOptional()\n//     @Transform(({ value }) => {\n//         return value ? plainToInstance(FilterQueryDto, JSON.parse(value)) : undefined;\n//     })\n//     @ValidateNested({ each: true })\n//     @Type(() => FilterQueryDto)\n//     filters?: FilterQueryDto[] | null;\n\n//     // @ApiPropertyOptional({\n//     //     description: ' Name or City:  ASC or DESC',\n//     //     example: 'name ASC',\n//     // })\n//     // @IsOptional()\n//     // @IsString()\n//     // @Validate(SortBy)\n//     // readonly sort?: string;\n//     // @ApiPropertyOptional({ type: [SortByDto], isArray: true })\n//     // @IsOptional()\n//     // @Transform(({ value }) => {\n//     //     return value ? plainToInstance(SortUserDto, JSON.parse(value)) : undefined;\n//     // })\n//     // @ValidateNested({ each: true })\n//     // @Type(() => SortUserDto)\n//     // sort?: SortUserDto[] | null;\n\n//     @ApiPropertyOptional({\n//         name: 'sort',\n//         required: false,\n//         type: String,\n//         description: 'Array of sort objects as a JSON string',\n//         example: '[{\"field\":\"name\",\"direction\":\"ASC\"},{\"field\":\"age\",\"direction\":\"DESC\"}]',\n//     })\n//     @IsOptional()\n//     @Transform(({ value }) => {\n//         return value ? plainToInstance(SortByDto, JSON.parse(value)) : undefined;\n//     })\n//     @ValidateNested({ each: true })\n//     @Type(() => SortByDto)\n//     sort?: SortByDto[] | null;\n// }\n\n// export class PaginatedResultDto {\n//     @ApiProperty()\n//     data: T[];\n\n//     @ApiProperty()\n//     total: number;\n\n//     @ApiProperty()\n//     page: number;\n\n//     @ApiProperty()\n//     limit: number;\n// }\n\n// // import { ApiProperty, ApiExtraModels } from '@nestjs/swagger';\n\n// // import { Type } from 'class-transformer';\n// // import { IsOptional, IsString, IsArray, ValidateNested, IsNumber } from 'class-validator';\n\n// // // export class FilterQueryDto {\n// // //     @ApiProperty({ example: 'name' })\n// // //     field: string;\n\n// // //     @ApiProperty({ example: 'LIKE' })\n// // //     operator: string;\n\n// // //     @ApiProperty({ example: '%John%' })\n// // //     value: string;\n// // // }\n// // export class FilterQueryDto {\n// //     @ApiProperty({ example: 'country_name' })\n// //     @IsString()\n// //     field: string;\n\n// //     @ApiProperty({ example: 'LIKE' })\n// //     @IsString()\n// //     operator: string;\n\n// //     @ApiProperty({ example: '%United%' })\n// //     @IsString()\n// //     value: string;\n// // }\n// // @ApiExtraModels(FilterQueryDto)\n// // export class PaginationQueryDto {\n// //     @ApiProperty({ example: 1, required: false })\n// //     @IsOptional()\n// //     @IsNumber()\n// //     @Type(() => Number)\n// //     page?: number = 1;\n\n// //     @ApiProperty({ example: 10, required: false })\n// //     @IsOptional()\n// //     @IsNumber()\n// //     @Type(() => Number)\n// //     limit?: number = 10;\n\n// //     // @ApiProperty({\n// //     //     type: [FilterQueryDto],\n// //     //     required: false,\n// //     //     isArray: true,\n// //     // })\n// //     // @Type(() => FilterQueryDto)\n// //     // filters?: FilterQueryDto[];\n// //     @ApiProperty({\n// //         type: FilterQueryDto,\n// //         required: false,\n// //         isArray: true,\n// //     })\n// //     // @IsOptional()\n// //     @IsArray()\n// //     @ValidateNested({ each: true })\n// //     @Type(() => FilterQueryDto)\n// //     filters?: FilterQueryDto[];\n\n// //     // @ApiProperty({\n// //     //     type: [Object],\n// //     //     // items: {\n// //     //     //     type: 'object',\n// //     //     //     items: {\n// //     //     //         type: 'object',\n// //     //     //     },\n// //     //     // },\n// //     // })\n// //     // coords: FilterQueryDto[];\n\n// //     // @ApiProperty({ type: String, required: false })\n// //     // @IsOptional()\n// //     // @IsArray()\n// //     // @ValidateNested({ each: true })\n// //     // @Type(() => FilterQueryDto)\n// //     // filters?: FilterQueryDto[];\n\n// //     @ApiProperty({ example: 'name ASC1', required: false })\n// //     sort?: string;\n// // }\n\n// // // export class PaginationQueryDto {\n// // //     @ApiProperty({ example: 1, required: false })\n// // //     page?: number = 1;\n\n// // //     @ApiProperty({ example: 10, required: false })\n// // //     limit?: number = 10;\n\n// // //     // @ApiProperty({ type: [FilterQueryDto], required: false, isArray: true })\n// // //     // filters?: FilterQueryDto[];\n\n// // //     // @ApiProperty({ type: String, required: false, isArray: true })\n// // //     // filters?: FilterQueryDto[];\n\n// // //     // @ApiProperty({ type: [FilterQueryDto], required: false, isArray: true })\n// // //     // @Type(() => FilterQueryDto)\n// // //     // filters?: FilterQueryDto[];\n\n// // //     @ApiProperty({ type: [FilterQueryDto], required: false })\n// // //     @IsOptional()\n// // //     @IsArray()\n// // //     @ValidateNested({ each: true })\n// // //     @Type(() => FilterQueryDto)\n// // //     filters?: FilterQueryDto[];\n\n// // //     @ApiProperty({ example: 'name ASC1', required: false })\n// // //     sort?: string;\n// // // }\n\n// // export class PaginatedResultDto {\n// //     @ApiProperty()\n// //     data: T[];\n\n// //     @ApiProperty()\n// //     total: number;\n\n// //     @ApiProperty()\n// //     page: number;\n\n// //     @ApiProperty()\n// //     limit: number;\n// // }\n\n// // export class abc {\n// //     @ApiProperty()\n// //     page: number;\n\n// //     @ApiProperty()\n// //     limit: number;\n// // }\n\n// // import { applyDecorators } from '@nestjs/common';\n// // import { ApiProperty, ApiExtraModels, ApiQuery, getSchemaPath } from '@nestjs/swagger';\n\n// // /**\n// //  * Combines Swagger Decorators to create a description for `filters[name]=something`\n// //  *  - has support for swagger\n// //  *  - automatic transformation with nestjs\n// //  */\n// // // // eslint-disable-next-line @typescript-eslint/ban-types,@typescript-eslint/explicit-module-boundary-types\n// // // export function ApiFilterQuery(fieldName: string, filterDto: Function) {\n// // //     return applyDecorators(\n// // //         ApiExtraModels(filterDto),\n// // //         ApiQuery({\n// // //             required: false,\n// // //             name: fieldName,\n// // //             style: 'deepObject',\n// // //             explode: true,\n// // //             type: 'object',\n// // //             schema: {\n// // //                 $ref: getSchemaPath(filterDto),\n// // //             },\n// // //         })\n// // //     );\n// // // }\n// // // eslint-disable-next-line @typescript-eslint/ban-types,@typescript-eslint/explicit-module-boundary-types\n// // export function ApiFilterQuery(fieldName: string, filterDto: Function, index: number) {\n// //     return applyDecorators(\n// //         ApiExtraModels(filterDto),\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}]`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //             schema: {\n// //                 $ref: getSchemaPath(filterDto),\n// //             },\n// //         })\n// //     );\n// // }\n\n// // export function ApiFilterQuery(fieldName: string, index: number) {\n// //     return applyDecorators(\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}].field`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //         }),\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}].operator`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //         }),\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}].value`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //         })\n// //     );\n// // }\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationResponseDto.html":{"url":"classes/PaginationResponseDto.html","title":"class - PaginationResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/dto/pagination-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO class for paginated responses.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                    Optional\n                                has_next_page\n                            \n                            \n                                    Optional\n                                meta\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T[]\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination-response.dto.ts:21\n                        \n                    \n\n            \n                \n                    The array of paginated data.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        has_next_page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination-response.dto.ts:39\n                        \n                    \n\n            \n                \n                    Indicates if there is a next page available.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        meta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PaginationMetaDto\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination-response.dto.ts:30\n                        \n                    \n\n            \n                \n                    Metadata about the pagination.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from '@nestjs/common';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nimport { PaginationMetaDto } from '@utils/dto/pagination.meta.dto';\n\n/**\n * DTO class for paginated responses.\n *\n * @export\n * @template T - Type of the data contained in the response.\n */\n\nexport class PaginationResponseDto {\n    /**\n     * The array of paginated data.\n     *\n     * @type {T[]}\n     * @memberof PaginationResponseDto\n     */\n\n    data: T[];\n\n    /**\n     * Metadata about the pagination.\n     *\n     * @type {PaginationMetaDto}\n     * @memberof PaginationResponseDto\n     */\n\n    meta?: PaginationMetaDto;\n\n    /**\n     * Indicates if there is a next page available.\n     *\n     * @type {boolean}\n     * @memberof PaginationResponseDto\n     */\n\n    has_next_page?: boolean;\n}\n\n/**\n * Creates a pagination response DTO class with specified data type.\n *\n * @export\n * @template T - Type of the data contained in the response.\n * @param {Type} classReference - The class reference for the data type.\n * @returns {Type} The class type of the pagination response DTO.\n */\n\nexport function PaginationResponse(classReference: Type) {\n    abstract class Pagination {\n        /**\n         * The array of paginated data.\n         *\n         * @type {T[]}\n         * @memberof Pagination\n         */\n\n        @ApiProperty({ type: [classReference] })\n        readonly data!: T[];\n\n        /**\n         * Metadata about the pagination.\n         *\n         * @type {PaginationMetaDto}\n         * @memberof Pagination\n         */\n\n        @ApiPropertyOptional({\n            type: PaginationMetaDto,\n            example: {\n                totalItems: 77,\n                currentPage: 1,\n                pageSize: 10,\n                totalPages: 8,\n                startPage: 1,\n                endPage: 8,\n                startIndex: 0,\n                endIndex: 76,\n                pages: [1, 2, 3, 4, 5, 6, 7],\n            },\n            description:\n                'When you pass `all` or `pagination` in the pagination query field, you will receive the meta field in the response.',\n        })\n        meta?: PaginationMetaDto;\n\n        /**\n         * Indicates if there is a next page available.\n         *\n         * @type {boolean}\n         * @memberof Pagination\n         */\n\n        @ApiPropertyOptional({\n            type: Boolean,\n            example: true,\n            description:\n                'When you pass `all` or `infinity` in the pagination query field, you will receive the has_next_page field in the response.',\n        })\n        readonly has_next_page?: boolean;\n    }\n\n    Object.defineProperty(Pagination, 'name', {\n        writable: false,\n        value: `Pagination${classReference.name}ResponseDto`,\n    });\n\n    return Pagination;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaginationService.html":{"url":"injectables/PaginationService.html","title":"injectable - PaginationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaginationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/helper/services/pagination.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The PaginationService provides functionality to handle pagination for database queries. It utilizes Prisma's query capabilities\nto perform paginated data retrieval based on the provided query parameters.\n\nThe paginate method constructs SQL queries to fetch paginated data and its corresponding metadata.\nThe method supports different pagination strategies such as 'all' and 'infinity'.\n\nExample :```typescript\nconst paginationQuery = new PaginationQueryDto({\n    page: 1,\n    limit: 10,\n    pagination: 'paginate',\n});const result = await paginationService.paginate(\n    'SELECT * FROM my_table',\n    'SELECT COUNT(*) as count FROM my_table',\n    paginationQuery\n);\nExample :\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                paginate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/common/helper/services/pagination.service.ts:36\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        paginate\n                        \n                    \n                \n            \n            \n                \n                        \n                    paginate(selectQuery: string, countQuery: string, paginationQuery: PaginationQueryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/helper/services/pagination.service.ts:39\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                selectQuery\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                countQuery\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                paginationQuery\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\nimport { PrismaService } from '@services/prisma.service';\nimport { PaginationResponseDto } from '@utils/dto/pagination-response.dto';\nimport { PaginationQueryDto } from '@utils/dto/pagination.dto';\nimport { PaginationMetaDto } from '@utils/dto/pagination.meta.dto';\n\n/**\n * @service PaginationService\n *\n * @description\n * The `PaginationService` provides functionality to handle pagination for database queries. It utilizes Prisma's query capabilities\n * to perform paginated data retrieval based on the provided query parameters.\n *\n * @remarks\n * - The `paginate` method constructs SQL queries to fetch paginated data and its corresponding metadata.\n * - The method supports different pagination strategies such as 'all' and 'infinity'.\n *\n * @example\n * ```typescript\n * const paginationQuery = new PaginationQueryDto({\n *     page: 1,\n *     limit: 10,\n *     pagination: 'paginate',\n * });\n *\n * const result = await paginationService.paginate(\n *     'SELECT * FROM my_table',\n *     'SELECT COUNT(*) as count FROM my_table',\n *     paginationQuery\n * );\n * ```\n */\n\n@Injectable()\nexport class PaginationService {\n    constructor(private readonly prisma: PrismaService) {}\n\n    async paginate(\n        selectQuery: string,\n        countQuery: string,\n        paginationQuery: PaginationQueryDto\n    ): Promise> {\n        const { page, limit, pagination } = paginationQuery;\n\n        const offset = (page - 1) * limit;\n\n        const dataQuery = `${selectQuery} LIMIT ${limit} OFFSET ${offset}`;\n\n        const metaPage = pagination === 'all' || pagination === 'paginate';\n\n        // const [data, total] = await this.prisma.$transaction([\n        //     this.prisma.$queryRawUnsafe(dataQuery),\n        //     this.prisma.$queryRawUnsafe(countQuery),\n        // ]);\n\n        // console.log('DATTTTTTTTTTTTTTTTTTTTTTTTT', dataQuery);\n\n        const [data, total] = await Promise.all([\n            this.prisma.$queryRawUnsafe(dataQuery),\n            metaPage\n                ? this.prisma.$queryRawUnsafe(countQuery)\n                : [{ count: 0 }],\n        ]);\n\n        // console.log('DATTTTTTTTTTTTTTTTTTTTTTTTT', total, total[0]);\n\n        const meta = metaPage\n            ? new PaginationMetaDto({\n                  paginationQueryDto: paginationQuery,\n                  totalItems: Number(total[0].count),\n              })\n            : undefined;\n\n        const has_next_page =\n            pagination === 'all' || pagination === 'infinity' ? data.length === limit : undefined;\n\n        return {\n            data,\n            meta,\n            has_next_page,\n        };\n    }\n}\n\n// start\n// import { Injectable } from '@nestjs/common';\n\n// import { PrismaService } from '@services/prisma.service';\n// import { PaginationResponseDto } from '@utils/dto/pagination-response.dto';\n// import { PaginationQueryDto } from '@utils/dto/pagination.dto';\n// import { PaginationMetaDto } from '@utils/dto/pagination.meta.dto';\n// import { IFieldConfig } from '@utils/types/pagination-options';\n\n// @Injectable()\n// export class PaginationService {\n//     constructor(private readonly prisma: PrismaService) {}\n\n//     async paginate(\n//         selectFields: string[],\n//         fromQuery: string,\n//         joinTables: string[] = [],\n//         filterQuery: string,\n//         sortByQuery: string,\n//         paginationQuery: PaginationQueryDto\n//     ): Promise> {\n//         const { page, limit, filters, pagination } = paginationQuery;\n\n//         // console.log('Hiii pagination service', page);\n\n//         // console.log('Hiii selectFields', selectFields);\n//         // console.log('Hiii fromQuery', fromQuery);\n//         // console.log('Hiii joinTables', joinTables);\n//         // console.log('Hiii whereClauses', filterQuery);\n\n//         // console.log('Hiii paginationQuery', paginationQuery);\n\n//         // console.log('Hiii paginationQuery---------------------------------', pagination === 'all');\n\n//         const offset = (page - 1) * limit;\n//         const select = selectFields.join(', ');\n\n//         const joinQuery = joinTables.join(' ');\n\n//         // const filterQuery = '';\n//         // if (filters && filters.length > 0) {\n//         //     const filterConditions = filters\n//         //         .map((filter) => {\n//         //             if (filter.operator.toUpperCase() === 'IN') {\n//         //                 const values = filter.value\n//         //                     .split(',')\n//         //                     .map((val) => `'${val.trim()}'`)\n//         //                     .join(', ');\n//         //                 return `${filter.field} IN (${values})`;\n//         //             }\n//         //             return `${filter.field} ${filter.operator} '${filter.value}'`;\n//         //         })\n//         //         .join(' AND ');\n//         //     filterQuery = `WHERE ${filterConditions}`;\n//         // }\n\n//         // console.log('____________________________________', filterQuery);\n\n//         const dataQuery = `SELECT ${select} ${fromQuery} ${joinQuery} ${filterQuery} ${sortByQuery} LIMIT ${limit} OFFSET ${offset}`;\n//         const countQuery = `SELECT count(*) ${fromQuery} ${joinQuery} ${filterQuery}`;\n\n//         // console.log('____________________________________', dataQuery);\n//         // console.log('____________________________________', countQuery);\n\n//         const metaPage = pagination === 'all' || pagination === 'paginate';\n\n//         // const [data, total] = await this.prisma.$transaction([\n//         //     this.prisma.$queryRawUnsafe(dataQuery),\n//         //     this.prisma.$queryRawUnsafe(countQuery),\n//         // ]);\n\n//         const [data, total] = await Promise.all([\n//             this.prisma.$queryRawUnsafe(dataQuery),\n//             metaPage\n//                 ? this.prisma.$queryRawUnsafe(countQuery)\n//                 : [{ count: 0 }],\n//         ]);\n\n//         // console.log('DATTTTTTTTTTTTTTTTTTTTTTTTT', total, total[0]);\n\n//         const meta = metaPage\n//             ? new PaginationMetaDto({\n//                   paginationQueryDto: paginationQuery,\n//                   totalItems: Number(total[0].count),\n//               })\n//             : undefined;\n\n//         const has_next_page =\n//             pagination === 'all' || pagination === 'infinity' ? data.length === limit : undefined;\n\n//         return {\n//             data,\n//             meta,\n//             has_next_page,\n//         };\n\n//         // const dataQuery = `SELECT ${select} ${joinQuery} ${filterQuery} ${sortQuery} LIMIT ${limit} OFFSET ${offset}`;\n\n//         return 'hi' as any;\n//         // const offset = (page - 1) * limit;\n//         // // const select = selectFields.join(', ');\n\n//         // let filterQuery = '';\n//         // if (filters && filters.length > 0) {\n//         //     const filterConditions = filters\n//         //         .map((filter) => {\n//         //             if (filter.operator.toUpperCase() === 'IN') {\n//         //                 const values = filter.value\n//         //                     .split(',')\n//         //                     .map((val) => `'${val.trim()}'`)\n//         //                     .join(', ');\n//         //                 return `${filter.field} IN (${values})`;\n//         //             }\n//         //             return `${filter.field} ${filter.operator} '${filter.value}'`;\n//         //         })\n//         //         .join(' AND ');\n//         //     filterQuery = `WHERE ${filterConditions}`;\n//         // }\n\n//         // let sortQuery = '';\n//         // // if (sort) {\n//         // //     const sortConditions = sort\n//         // //         .split(',')\n//         // //         .map((s) => s.trim())\n//         // //         .join(', ');\n//         // //     sortQuery = `ORDER BY ${sortConditions}`;\n//         // // }\n\n//         // const joinQuery = joinTables.join(' ');\n\n//         // const dataQuery = `${baseQuery} ${joinQuery} ${filterQuery} ${sortQuery} LIMIT ${limit} OFFSET ${offset}`;\n//         // const countFilterQuery = filterQuery ? filterQuery : '';\n//         // const finalCountQuery = `${countQuery} ${joinQuery} ${countFilterQuery}`;\n//         // console.log('DATA QUERY', dataQuery);\n//         // console.log('finalCountQuery QUERY', finalCountQuery);\n//         // console.log(offset, select, filters, sort, filterQuery, sortQuery, joinQuery);\n//         return 'x' as any;\n//         // const [data, total] = await this.prisma.$transaction([\n//         //     this.prisma.$queryRawUnsafe(dataQuery),\n//         //     this.prisma.$queryRawUnsafe(finalCountQuery),\n//         // ]);\n//         // return {\n//         //     data,\n//         //     total: total[0].count,\n//         //     page,\n//         //     limit,\n//         // };\n//     }\n// }\n// end\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PrismaClientExceptionFilter.html":{"url":"classes/PrismaClientExceptionFilter.html","title":"class - PrismaClientExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PrismaClientExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/prisma-exception.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                Exception filter for handling Prisma Client known request errors.\nThis filter catches PrismaClientKnownRequestError exceptions and formats the\nresponse based on the specific Prisma error codes.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: Prisma.PrismaClientKnownRequestError, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/filters/prisma-exception.filter.ts:30\n                        \n                    \n\n\n            \n                \n                        Handles the Prisma Client exception and formats the error response\nbased on the error code.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                        Prisma.PrismaClientKnownRequestError\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The Prisma Client error to handle.\n\n                                            \n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The arguments host for accessing request and response objects.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ArgumentsHost, Catch, HttpStatus } from '@nestjs/common';\nimport { BaseExceptionFilter } from '@nestjs/core';\n\nimport { Prisma } from '@prisma/client';\nimport { Response } from 'express';\n\n/**\n * Exception filter for handling Prisma Client known request errors.\n *\n * This filter catches `PrismaClientKnownRequestError` exceptions and formats the\n * response based on the specific Prisma error codes.\n *\n * @export\n * @class PrismaClientExceptionFilter\n * @extends {BaseExceptionFilter}\n */\n\n@Catch(Prisma.PrismaClientKnownRequestError)\nexport class PrismaClientExceptionFilter extends BaseExceptionFilter {\n    /**\n     * Handles the Prisma Client exception and formats the error response\n     * based on the error code.\n     *\n     * @param {Prisma.PrismaClientKnownRequestError} exception The Prisma Client error to handle.\n     * @param {ArgumentsHost} host The arguments host for accessing request and response objects.\n     *\n     * @memberof PrismaClientExceptionFilter\n     */\n\n    catch(exception: Prisma.PrismaClientKnownRequestError, host: ArgumentsHost) {\n        console.log('PRISMA CLIENT EXCEPTION', exception.message);\n        const ctx = host.switchToHttp();\n        const response = ctx.getResponse();\n        const message = exception.message.replace(/\\n/g, '');\n        switch (exception.code) {\n            case 'P2002': {\n                // Unique constraint failed on the {constraint}\n                const status = HttpStatus.CONFLICT;\n                response.status(status).json({\n                    statusCode: status,\n                    message: message,\n                });\n                break;\n            }\n            case 'P2000': {\n                // The provided value for the column is too long for the column’s type. Column: {column_name}\n                const status = HttpStatus.BAD_REQUEST;\n                response.status(status).json({\n                    statusCode: status,\n                    message: message,\n                });\n                break;\n            }\n            case 'P2025': {\n                // An operation failed because it depends on one or more records that were required but not found. {cause}\n                const status = HttpStatus.NOT_FOUND;\n                response.status(status).json({\n                    statusCode: status,\n                    message: message,\n                });\n                break;\n            }\n            case 'P2010': {\n                // An operation failed because it depends on one or more records that were required but not found. {cause}\n                const status = HttpStatus.BAD_REQUEST;\n                response.status(status).json({\n                    statusCode: status,\n                    message: message,\n                });\n                break;\n            }\n            default:\n                // default 500 error code\n                super.catch(exception, host);\n                break;\n        }\n    }\n\n    //   catch(exception: PrismaClientKnownRequestError, host: ArgumentsHost) {\n    //     const ctx = host.switchToHttp();\n    //     const response = ctx.getResponse();\n    //     const status = HttpStatus.BAD_REQUEST;\n\n    //     const errorResponse = {\n    //       statusCode: status,\n    //       timestamp: new Date().toISOString(),\n    //       message: exception.message,\n    //     };\n\n    //     response.status(status).json(errorResponse);\n    //   }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/helper/services/prisma.service.ts\n        \n\n\n            \n                Description\n            \n            \n                PrismaService\nPrismaService is a service that extends the PrismaClient class to manage database operations with Prisma ORM. It handles\ninitialization and teardown of database connections, executes raw queries with parameter escaping, supports transactions,\nand provides a health check for the database connection.\n\n            \n\n            \n                Extends\n            \n            \n                        PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                executeRawQuery\n                            \n                            \n                                    Async\n                                executeTransaction\n                            \n                            \n                                    Async\n                                isHealthy\n                            \n                            \n                                    Async\n                                onModuleDestroy\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/common/helper/services/prisma.service.ts:28\n                            \n                        \n\n                \n                    \n                            Creates an instance of PrismaService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe configuration service for retrieving database connection details.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        executeRawQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    executeRawQuery(queryObj: any, data: any, fields: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/helper/services/prisma.service.ts:79\n                        \n                    \n\n\n            \n                \n                        Executes a raw query with optional data and field sanitization.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                queryObj\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    null\n                                            \n\n                                            \n                                                    \nThe query object with a syntax method to generate the query string.\n\n\n                                            \n                                        \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    null\n                                            \n\n                                            \n                                                    \nOptional data to be used in the query.\n\n\n                                            \n                                        \n                                        \n                                                fields\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    []\n                                            \n\n                                            \n                                                    \nOptional fields to be sanitized in the data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe result of the query.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        executeTransaction\n                        \n                    \n                \n            \n            \n                \n                        \n                    executeTransaction(actions: (prisma: Prisma.TransactionClient) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/helper/services/prisma.service.ts:129\n                        \n                    \n\n\n            \n                \n                        Executes a transaction with Prisma.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                actions\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nA function containing the transactional operations.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe result of the transaction.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        isHealthy\n                        \n                    \n                \n            \n            \n                \n                        \n                    isHealthy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/helper/services/prisma.service.ts:141\n                        \n                    \n\n\n            \n                \n                        Checks the health of the Prisma connection by executing a simple query.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe result of the health check.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/helper/services/prisma.service.ts:61\n                        \n                    \n\n\n            \n                \n                        Called when the module is destroyed. Disconnects from the database.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/helper/services/prisma.service.ts:51\n                        \n                    \n\n\n            \n                \n                        Called when the module is initialized. Connects to the database.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit, OnModuleDestroy } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { HealthIndicatorResult } from '@nestjs/terminus';\n\nimport { Prisma, PrismaClient } from '@prisma/client';\nimport * as _ from 'lodash';\n\nimport { AllConfigType } from '@config/type/config.type';\n\n// import { ConfigService } from '../services/config.service';\n\n/**\n * PrismaService\n *\n * @description\n * `PrismaService` is a service that extends the PrismaClient class to manage database operations with Prisma ORM. It handles\n * initialization and teardown of database connections, executes raw queries with parameter escaping, supports transactions,\n * and provides a health check for the database connection.\n *\n * @export\n * @class PrismaService\n * @extends PrismaClient\n * @implements {OnModuleInit}\n * @implements {OnModuleDestroy}\n */\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit, OnModuleDestroy {\n    /**\n     * Creates an instance of PrismaService.\n     *\n     * @param {ConfigService} configService - The configuration service for retrieving database connection details.\n     */\n\n    constructor(private readonly configService: ConfigService) {\n        super({\n            datasources: {\n                db: {\n                    url: configService.get('database.url', { infer: true }), // configService.prismaConfig,\n                },\n            },\n        });\n    }\n\n    /**\n     * Called when the module is initialized. Connects to the database.\n     *\n     * @returns {Promise}\n     */\n\n    async onModuleInit(): Promise {\n        await this.$connect();\n    }\n\n    /**\n     * Called when the module is destroyed. Disconnects from the database.\n     *\n     * @returns {Promise}\n     */\n\n    async onModuleDestroy(): Promise {\n        await this.$disconnect();\n    }\n\n    // async executeRawQuery(query: string, params?: any[]): Promise {\n    //     return this.$queryRawUnsafe(query, ...params);\n    // }\n\n    /**\n     * Executes a raw query with optional data and field sanitization.\n     *\n     * @param {any} queryObj - The query object with a `syntax` method to generate the query string.\n     * @param {any} [data=null] - Optional data to be used in the query.\n     * @param {string[]} [fields=[]] - Optional fields to be sanitized in the data.\n     *\n     * @returns {Promise} - The result of the query.\n     */\n\n    async executeRawQuery(\n        queryObj: any = null,\n        data: any = null,\n        fields: string[] = []\n    ): Promise {\n        const newObj = Object.assign({}, data);\n\n        if (typeof data == 'object' && data instanceof Object && !(data instanceof Array)) {\n            for (const [key, value] of Object.entries(newObj)) {\n                const found = fields.includes(key);\n                if (found) {\n                    const escValue = value as any;\n                    // newObj[key] = escValue.replace(/'/g, \"\\\\'\");\n                    newObj[key] = escValue.replace(/'/g, \"''\");\n                }\n            }\n        }\n\n        let query: string;\n        if (data) {\n            query = queryObj.syntax(\n                typeof data == 'object' && data instanceof Object && !(data instanceof Array)\n                    ? newObj\n                    : data\n            );\n        } else {\n            query = queryObj.syntax();\n        }\n\n        // return this.$queryRawUnsafe(query, ...params);\n        const rows = await this.$queryRawUnsafe(query);\n\n        let result: any;\n        if (queryObj.type == 'SELECT_ONE' || queryObj.type == 'INSERT') {\n            result = !_.isEmpty(rows) ? rows[0] : null; //do not change null to balnk object\n        } else {\n            result = rows;\n        }\n\n        return result;\n    }\n\n    /**\n     * Executes a transaction with Prisma.\n     *\n     * @param {(prisma: Prisma.TransactionClient) => Promise} actions - A function containing the transactional operations.\n     *\n     * @returns {Promise} - The result of the transaction.\n     */\n\n    async executeTransaction(\n        actions: (prisma: Prisma.TransactionClient) => Promise\n    ): Promise {\n        return this.$transaction(actions);\n    }\n\n    /**\n     * Checks the health of the Prisma connection by executing a simple query.\n     *\n     * @returns {Promise} - The result of the health check.\n     */\n\n    async isHealthy(): Promise {\n        try {\n            await this.$queryRaw`SELECT 1`;\n            // console.log('RESULTTTTTTTTTTTTTTTTTTTT', x);\n            return Promise.resolve({\n                prisma: {\n                    status: 'up',\n                },\n            });\n        } catch (e) {\n            return Promise.resolve({\n                prisma: {\n                    status: 'down',\n                },\n            });\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Query.html":{"url":"classes/Query.html","title":"class - Query","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Query\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/exceptions/query.ts\n        \n\n\n            \n                Description\n            \n            \n                Class representing SQL query builder for error logging.\ninto an Error table. The query escapes single quotes in request and response data\nto prevent SQL injection.\nExample :```typescript\nconst query = new Query();\nconst sqlQuery = query.addHttpQueryError(\n  'UserModule',\n  'GET',\n  '/users',\n  JSON.stringify(requestData),\n  JSON.stringify(responseData)\n).syntax();\nconsole.log(sqlQuery); // Outputs the SQL query stringExample :\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addHttpQueryError\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addHttpQueryError\n                        \n                    \n                \n            \n            \n                \naddHttpQueryError(module: any, method: any, url: any, reqdata: string, resdata: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/exceptions/query.ts:36\n                        \n                    \n\n\n            \n                \n                        Constructs an SQL query to insert HTTP error details into the Error table.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                module\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the module where the error occurred.\n\n\n                                            \n                                        \n                                        \n                                                method\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe HTTP method used in the request.\n\n\n                                            \n                                        \n                                        \n                                                url\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe URL of the request that caused the error.\n\n\n                                            \n                                        \n                                        \n                                                reqdata\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe request data, serialized as a JSON string.\n\n\n                                            \n                                        \n                                        \n                                                resdata\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe response data, serialized as a JSON string.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                An object representing the SQL query with a name, type, and syntax function.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class Query {\n    /**\n     * Constructs an SQL query to insert HTTP error details into the `Error` table.\n     *\n     * @param {string} module - The name of the module where the error occurred.\n     * @param {string} method - The HTTP method used in the request.\n     * @param {string} url - The URL of the request that caused the error.\n     * @param {string} reqdata - The request data, serialized as a JSON string.\n     * @param {string} resdata - The response data, serialized as a JSON string.\n     * @returns {Object} An object representing the SQL query with a `name`, `type`, and `syntax` function.\n     */\n\n    addHttpQueryError(module: any, method: any, url: any, reqdata: string, resdata: string): any {\n        return {\n            name: `addQueryError`,\n            type: `INSERT`,\n            /**\n             * Generates the SQL query string for inserting the error details.\n             *\n             * @returns {string} The SQL query string.\n             */\n\n            syntax: (): string => {\n                //data: any[]\n                try {\n                    let reqescValue = reqdata;\n                    let resescValue = resdata;\n                    reqescValue = reqescValue.replace(/'/g, \"\\\\'\");\n                    resescValue = resescValue.replace(/'/g, \"\\\\'\");\n                    const sql = `INSERT INTO Error (Module,Method,Url,Req,Response) VALUES\n                ('${module}','${method}','${url}','${reqescValue}','${resescValue}');`;\n                    return sql;\n                } catch (error) {\n                    return `Select ${module} ,${method},${url},${reqdata},${resdata}`;\n                }\n            },\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Query-1.html":{"url":"classes/Query-1.html","title":"class - Query-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Query\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/query.ts\n        \n\n\n            \n                Description\n            \n            \n                A utility class for generating SQL queries related to error logging.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addQueryError\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addQueryError\n                        \n                    \n                \n            \n            \n                \naddQueryError(module: any, method: any, url: any, reqdata: string, resdata: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/filters/query.ts:24\n                        \n                    \n\n\n            \n                \n                        Generates an SQL query for logging query errors.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                module\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The module where the error occurred.\n\n                                            \n                                        \n                                        \n                                                method\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The method that caused the error.\n\n                                            \n                                        \n                                        \n                                                url\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The URL where the error occurred.\n\n                                            \n                                        \n                                        \n                                                reqdata\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The request data associated with the error.\n\n                                            \n                                        \n                                        \n                                                resdata\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The response data associated with the error.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { name: string; type: string; syntax: () => string; }\n\n                        \n                            \n                                An object containing the SQL query details.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class Query {\n    /**\n     * Generates an SQL query for logging query errors.\n     *\n     * @param {any} module The module where the error occurred.\n     * @param {any} method The method that caused the error.\n     * @param {any} url The URL where the error occurred.\n     * @param {string} reqdata The request data associated with the error.\n     * @param {string} resdata The response data associated with the error.\n     * @returns {{ name: string, type: string, syntax: () => string }} An object containing the SQL query details.\n     *\n     * @memberof Query\n     */\n\n    addQueryError(module: any, method: any, url: any, reqdata: string, resdata: string) {\n        return {\n            name: `addQueryError`,\n            type: `INSERT`,\n            syntax: () => {\n                // data: any[]\n                try {\n                    let reqescValue = reqdata;\n                    let resescValue = resdata;\n                    reqescValue = reqescValue.replace(/'/g, \"\\\\'\");\n                    resescValue = resescValue.replace(/'/g, \"\\\\'\");\n                    const sql = `INSERT INTO Error (Module,Method,Url,Req,Response) VALUES\n                ('${module}','${method}','${url}','${reqescValue}','${resescValue}');`;\n                    return sql;\n                } catch (error) {\n                    return `Select ${module} ,${method},${url},${reqdata},${resdata}`;\n                }\n            },\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Query-2.html":{"url":"classes/Query-2.html","title":"class - Query-2","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Query\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/currencies/query.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the Query class, which provides methods for generating SQL queries\nrelated to currency data management.\nThe Query class includes methods to generate SQL queries for operations such as\nretrieving, inserting, updating, and deleting currency records from the database.\nIt uses the lodash library for object manipulation and query construction.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                findByCode\n                            \n                            \n                                findById\n                            \n                            \n                                insert\n                            \n                            \n                                pgBaseQuery\n                            \n                            \n                                pgBaseSelectField\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/currencies/query.ts:139\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to delete a currency by its ID.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, and syntax properties.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByCode\n                        \n                    \n                \n            \n            \n                \nfindByCode(id?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/currencies/query.ts:49\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to find a currency by its code.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional ID to exclude from the search if provided.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, and syntax properties.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findById\n                        \n                    \n                \n            \n            \n                \nfindById()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/currencies/query.ts:21\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to find a currency by its ID.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, and syntax properties.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        insert\n                        \n                    \n                \n            \n            \n                \ninsert()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/currencies/query.ts:71\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to insert a new currency.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, and syntax properties.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pgBaseQuery\n                        \n                    \n                \n            \n            \n                \npgBaseQuery()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/currencies/query.ts:172\n                        \n                    \n\n\n            \n                \n                        Provides the base query for selecting currencies.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                The base query string for selecting currencies.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pgBaseSelectField\n                        \n                    \n                \n            \n            \n                \npgBaseSelectField()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/currencies/query.ts:156\n                        \n                    \n\n\n            \n                \n                        Provides the base fields for selecting currencies in pagination queries.\n\n\n                        \n                            Returns :     string[]\n\n                        \n                            \n                                An array of column names to be selected in pagination queries.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/currencies/query.ts:100\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to update an existing currency.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, and syntax properties.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as _ from 'lodash';\n\n/**\n * @fileoverview\n * This file defines the `Query` class, which provides methods for generating SQL queries\n * related to currency data management.\n *\n * @module\n * @description\n * The `Query` class includes methods to generate SQL queries for operations such as\n * retrieving, inserting, updating, and deleting currency records from the database.\n * It uses the lodash library for object manipulation and query construction.\n */\n\nexport class Query {\n    /**\n     * Generates a SQL query to find a currency by its ID.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n\n    findById(): object {\n        return {\n            name: `findById`,\n            type: `SELECT_ONE`,\n            syntax: (where: any) => {\n                const allowedKeys = [\n                    'c.id_currency',\n                    'c.code',\n                    'c.name',\n                    'c.name_plural',\n                    'c.symbol',\n                    'c.symbol_native',\n                    'c.decimal_digits',\n                    'c.rounding',\n                ];\n                const id = _.get(where, 'id');\n                const sql = `select ${allowedKeys.join()} from currencies c WHERE c.status = 1 AND c.id_currency = '${id}';`;\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to find a currency by its code.\n     * @param {string} [id] - Optional ID to exclude from the search if provided.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n\n    findByCode(id?: string): object {\n        return {\n            name: `findByCode`,\n            type: `SELECT_ONE`,\n            syntax: (where: any) => {\n                const allowedKeys = ['c.id_currency', 'c.code'];\n                const code = _.get(where, 'code');\n\n                let sql = `SELECT ${allowedKeys.join()} FROM currencies c WHERE c.status = 1 AND c.code = '${code}'`;\n                if (id) {\n                    sql += ` AND c.id_currency != '${id}';`;\n                }\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to insert a new currency.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n\n    insert(): object {\n        return {\n            name: `add`,\n            type: `INSERT`,\n            syntax: (where: any) => {\n                const allowedKeys = [\n                    'code',\n                    'name',\n                    'name_plural',\n                    'symbol',\n                    'symbol_native',\n                    'decimal_digits',\n                    'rounding',\n                ];\n                const conds = _.pick(where, allowedKeys);\n                const keys = _.keys(conds);\n                const values = _.values(conds);\n                const sql = `insert into currencies (${keys.join()}) values ('${values.join(\"','\")}') RETURNING id_currency as insertid, code;`;\n                console.log('QUERY', sql);\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to update an existing currency.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n\n    update(): object {\n        return {\n            name: `update`,\n            type: `UPDATE`,\n            syntax: (where: any) => {\n                let sql = `UPDATE currencies SET `;\n                const id = _.get(where, 'id');\n                _.unset(where, 'id');\n                const allowedKeys = [\n                    'code',\n                    'name',\n                    'name_plural',\n                    'symbol',\n                    'symbol_native',\n                    'decimal_digits',\n                    'rounding',\n                ];\n                where = _.pick(where, allowedKeys);\n\n                const lastKey = Object.keys(where)[Object.keys(where).length - 1];\n                _.mapKeys(where, (value, key) => {\n                    sql += `${key} = '${value}'`;\n                    sql += lastKey == key ? `` : `, `;\n                });\n                sql += ` WHERE status = 1 AND id_currency = '${id}' RETURNING id_currency as updatedid, code;`;\n\n                console.log('QQQQQQQQQQQQQQ', sql);\n\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to delete a currency by its ID.\n     * @param {string} id - The ID of the currency to delete.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n\n    delete(): object {\n        return {\n            name: `delete`,\n            type: `UPDATE`,\n            syntax: (id: string) => {\n                const sql = `UPDATE currencies SET status = 127 WHERE status = 1 AND id_currency = '${id}' RETURNING id_currency as deletedid, code;`;\n\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Provides the base fields for selecting currencies in pagination queries.\n     * @returns {string[]} An array of column names to be selected in pagination queries.\n     */\n\n    pgBaseSelectField(): string[] {\n        return [\n            'ptbl.id_currency',\n            'ptbl.code',\n            'ptbl.name',\n            'ptbl.symbol',\n            'ptbl.decimal_digits',\n            'ptbl.rounding',\n        ];\n    }\n\n    /**\n     * Provides the base query for selecting currencies.\n     * @returns {string} The base query string for selecting currencies.\n     */\n\n    pgBaseQuery(): string {\n        return ` FROM currencies ptbl`;\n    }\n}\n\n// import * as _ from 'lodash';\n\n// import { DynamicQueryBuilder, QueryOptions } from '@providers/dynamic-query.service';\n\n// export class Query {\n//     private queryBuilder = new DynamicQueryBuilder();\n\n//     findBy(key: string, value: string, id?: string) {\n//         const selectOptions: QueryOptions = {\n//             table: 'currencies',\n//             fields: ['id_currency', 'code'],\n//             conditions: { status: 1, ...(key && { [key]: value }) },\n//             ...(id && {\n//                 optionalConditions: {\n//                     id_currency: id,\n//                 },\n//             }),\n//         };\n\n//         return this.queryBuilder.buildSelectQuery(selectOptions);\n//     }\n\n//     insert(values: any) {\n//         const insertOptions: QueryOptions = {\n//             table: 'currencies',\n//             fields: [\n//                 'code',\n//                 'name',\n//                 'name_plural',\n//                 'symbol',\n//                 'symbol_native',\n//                 'decimal_digits',\n//                 'rounding',\n//             ],\n//             values: values,\n//             returningFields: ['id_currency as insertid', 'code'],\n//         };\n\n//         return this.queryBuilder.buildInsertQuery(insertOptions);\n//     }\n\n//     delete(key: string, value: string) {\n//         const deleteOptions: QueryOptions = {\n//             table: 'currencies',\n//             conditions: { status: 1, ...(key && { [key]: value }) },\n//             returningFields: ['id_currency as deleteid'],\n//         };\n\n//         return this.queryBuilder.buildDeleteQuery(deleteOptions);\n//     }\n\n//     pgBaseSelectField(): string[] {\n//         return [\n//             'ptbl.id_currency',\n//             'ptbl.code',\n//             'ptbl.name',\n//             'ptbl.symbol',\n//             'ptbl.decimal_digits',\n//             'ptbl.rounding',\n//         ];\n//     }\n\n//     pgBaseQuery() {\n//         return ` FROM currencies ptbl`;\n//     }\n// }\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QueryCountryDto.html":{"url":"classes/QueryCountryDto.html","title":"class - QueryCountryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QueryCountryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/countries/dto/query-country.dto-remove.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                filters\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                sort\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        filters\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FilterCountryDto | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: String})@IsOptional()@Transform( => )@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/query-country.dto-remove.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@Transform( => )@IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/query-country.dto-remove.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@Transform( => )@IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/query-country.dto-remove.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        sort\n                        \n                    \n                \n            \n                \n                    \n                        Type :     SortCountryDto[] | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: String})@IsOptional()@Transform( => )@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/query-country.dto-remove.ts:50\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nimport { Transform, Type, plainToInstance } from 'class-transformer';\nimport { IsNumber, IsOptional, IsString, ValidateNested } from 'class-validator';\n\nimport { Country } from './country';\n\nexport class FilterCountryDto {}\n\nexport class SortCountryDto {\n    @ApiProperty()\n    @Type(() => String)\n    @IsString()\n    orderBy: keyof Country;\n\n    @ApiProperty()\n    @IsString()\n    order: string;\n}\n\nexport class QueryCountryDto {\n    @ApiPropertyOptional()\n    @Transform(({ value }) => (value ? Number(value) : 1))\n    @IsNumber()\n    @IsOptional()\n    page?: number;\n\n    @ApiPropertyOptional()\n    @Transform(({ value }) => (value ? Number(value) : 10))\n    @IsNumber()\n    @IsOptional()\n    limit?: number;\n\n    @ApiPropertyOptional({ type: String })\n    @IsOptional()\n    @Transform(({ value }) =>\n        value ? plainToInstance(FilterCountryDto, JSON.parse(value)) : undefined\n    )\n    @ValidateNested()\n    @Type(() => FilterCountryDto)\n    filters?: FilterCountryDto | null;\n\n    @ApiPropertyOptional({ type: String })\n    @IsOptional()\n    @Transform(({ value }) => {\n        return value ? plainToInstance(SortCountryDto, JSON.parse(value)) : undefined;\n    })\n    @ValidateNested({ each: true })\n    @Type(() => SortCountryDto)\n    sort?: SortCountryDto[] | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QueryFailedFilter.html":{"url":"classes/QueryFailedFilter.html","title":"class - QueryFailedFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QueryFailedFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/query-failed.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                Exception filter for handling database query failures.\nThis filter catches exceptions related to failed database queries and formats\nthe response based on the type of database constraint error.\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                reflector\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/query-failed.filter.ts:26\n                            \n                        \n\n                \n                    \n                            Creates an instance of QueryFailedFilter.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The reflector instance used for metadata reflection.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        reflector\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Reflector\n\n                    \n                \n                    \n                        \n                                Defined in src/core/filters/query-failed.filter.ts:34\n                        \n                    \n\n            \n                \n                    The reflector instance used for metadata reflection.\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: any, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/filters/query-failed.filter.ts:45\n                        \n                    \n\n\n            \n                \n                        Handles the database query failure exception and formats the error response.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The exception thrown by a failed database query.\n\n                                            \n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The arguments host for accessing request and response objects.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { STATUS_CODES } from 'http';\n\nimport { ArgumentsHost, ExceptionFilter, HttpStatus, Logger } from '@nestjs/common'; // Catch\nimport { Reflector } from '@nestjs/core';\n\nimport { Response } from 'express';\n// import { QueryFailedError } from \"typeorm\";\n// import * as _ from 'lodash';\n\n// import { PgSQLService } from \"../common/shared/services/pgsql.service\";\nimport { constraintErrors } from './constraint-errors';\n// import { Query } from './query';\n\n/**\n * Exception filter for handling database query failures.\n *\n * This filter catches exceptions related to failed database queries and formats\n * the response based on the type of database constraint error.\n *\n * @export\n * @class QueryFailedFilter\n * @implements {ExceptionFilter}\n */\n\n// @Catch(QueryFailedError)\nexport class QueryFailedFilter implements ExceptionFilter {\n    /**\n     * Creates an instance of QueryFailedFilter.\n     * @param {Reflector} reflector The reflector instance used for metadata reflection.\n     *\n     * @memberof QueryFailedFilter\n     */\n\n    constructor(public reflector: Reflector) {}\n\n    /**\n     * Handles the database query failure exception and formats the error response.\n     *\n     * @param {any} exception The exception thrown by a failed database query.\n     * @param {ArgumentsHost} host The arguments host for accessing request and response objects.\n     *\n     * @memberof QueryFailedFilter\n     */\n\n    catch(exception: any, host: ArgumentsHost) {\n        console.log('QUERY FAIL from filter');\n        const ctx = host.switchToHttp();\n        const response = ctx.getResponse();\n        const request = ctx.getRequest();\n\n        const errorMessage = constraintErrors[exception.constraint];\n\n        const status =\n            exception.constraint && exception.constraint.startsWith('UQ')\n                ? HttpStatus.CONFLICT\n                : HttpStatus.INTERNAL_SERVER_ERROR;\n\n        const errorResponse = {\n            message: exception.sqlMessage,\n            query: exception.query,\n        };\n\n        try {\n            Logger.error(\n                `${request.method} ${request.url}`,\n                JSON.stringify(errorResponse),\n                'ExceptionFilter'\n            );\n\n            // const sqlService = new PgSQLService();\n            // const query = new Query();\n            // const reqstr = JSON.stringify(_.clone(request.body));\n            // const resstr = JSON.stringify(_.clone(errorResponse));\n            // sqlService.run(query.addQueryError(\"DBQuery\", request.method, request.url, reqstr, resstr));\n        } catch (error) {\n            Logger.error(\n                `${request.method} ${request.url}`,\n                JSON.stringify(errorResponse),\n                'ExceptionFilter'\n            );\n        }\n        response.status(status).json({\n            statusCode: status,\n            error: STATUS_CODES[status],\n            message: errorMessage,\n        });\n    }\n}\n\n// import { ArgumentsHost, Catch, ExceptionFilter, HttpException, HttpStatus } from '@nestjs/common';\n// import { Response } from 'express';\n// import { Prisma } from '@prisma/client';\n\n// @Catch(Prisma.PrismaClientKnownRequestError)\n// export class PrismaClientExceptionFilter implements ExceptionFilter {\n//   catch(exception: Prisma.PrismaClientKnownRequestError, host: ArgumentsHost) {\n//     const ctx = host.switchToHttp();\n//     const response = ctx.getResponse();\n//     const status = HttpStatus.INTERNAL_SERVER_ERROR;\n\n//     let message = exception.message;\n\n//     // Handle specific Prisma errors\n//     if (exception.code === 'P2002') {\n//       message = 'Unique constraint failed';\n//     }\n\n//     response.status(status).json({\n//       statusCode: status,\n//       message,\n//     });\n//   }\n// }\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/QueryOptions.html":{"url":"interfaces/QueryOptions.html","title":"interface - QueryOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  QueryOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/providers/dynamic-query.service-to-be-remove.ts\n        \n\n\n            \n                Description\n            \n            \n                Options for building queries.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            conditions\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            deleteType\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            fields\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            joins\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            optionalConditions\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            queryName\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            queryType\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            returningFields\n                                        \n                                \n                                \n                                        \n                                            table\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            values\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        conditions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        conditions:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Conditions for the query (e.g., WHERE clauses).\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        deleteType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        deleteType:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Type of delete operation ('soft' or 'hard').\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fields\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fields:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    List of fields to include in the query (e.g., columns for SELECT, INSERT, or UPDATE).\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        joins\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        joins:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Join clauses to include in the query.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        optionalConditions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        optionalConditions:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional conditions for the query.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        queryName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        queryName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Name of the query.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        queryType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        queryType:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Type of the query (e.g., INSERT, SELECT, UPDATE, DELETE).\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        returningFields\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        returningFields:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Fields to return from the query.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        table\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        table:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Name of the table to perform the query on.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        values\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        values:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Values to be used in the query (e.g., for INSERT or UPDATE operations).\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import * as _ from 'lodash';\n\n/**\n * Options for building queries.\n *\n * @export\n * @interface QueryOptions\n */\n\nexport interface QueryOptions {\n    /**\n     * Name of the query.\n     *\n     * @type {string}\n     * @memberof QueryOptions\n     */\n\n    queryName?: string;\n\n    /**\n     * Type of the query (e.g., INSERT, SELECT, UPDATE, DELETE).\n     *\n     * @type {string}\n     * @memberof QueryOptions\n     */\n\n    queryType?: string;\n\n    /**\n     * Name of the table to perform the query on.\n     *\n     * @type {string}\n     * @memberof QueryOptions\n     */\n\n    table: string;\n\n    /**\n     * List of fields to include in the query (e.g., columns for SELECT, INSERT, or UPDATE).\n     *\n     * @type {string[]}\n     * @memberof QueryOptions\n     */\n\n    fields?: string[];\n\n    /**\n     * Values to be used in the query (e.g., for INSERT or UPDATE operations).\n     *\n     * @type {Record}\n     * @memberof QueryOptions\n     */\n\n    values?: Record;\n\n    /**\n     * Conditions for the query (e.g., WHERE clauses).\n     *\n     * @type {Record}\n     * @memberof QueryOptions\n     */\n\n    conditions?: Record;\n\n    /**\n     * Optional conditions for the query.\n     *\n     * @type {Record}\n     * @memberof QueryOptions\n     */\n\n    optionalConditions?: Record;\n\n    /**\n     * Join clauses to include in the query.\n     *\n     * @type {string[]}\n     * @memberof QueryOptions\n     */\n\n    joins?: string[];\n\n    /**\n     * Fields to return from the query.\n     *\n     * @type {string[]}\n     * @memberof QueryOptions\n     */\n\n    returningFields?: string[];\n\n    /**\n     * Type of delete operation ('soft' or 'hard').\n     *\n     * @type {string}\n     * @memberof QueryOptions\n     */\n    deleteType?: string;\n}\n\n/**\n * Class to build dynamic SQL queries.\n *\n * @export\n * @class DynamicQueryBuilder\n */\nexport class DynamicQueryBuilder {\n    /**\n     * Builds an INSERT SQL query.\n     *\n     * @param {QueryOptions} options - Options for the INSERT query.\n     * @returns {object} - An object containing the query name, type, and the SQL syntax.\n     * @memberof DynamicQueryBuilder\n     */\n\n    buildInsertQuery(options: QueryOptions): object {\n        const { queryName, queryType, fields, table, values = {}, returningFields = [] } = options;\n        const conds = _.pick(values, fields);\n        const keys = _.keys(conds);\n        const vals = _.values(conds);\n\n        const returningClause = returningFields.length\n            ? `RETURNING ${returningFields.join(', ')}`\n            : '';\n\n        const sql = `INSERT INTO ${table} (${keys.join()}) VALUES ('${vals.join(\"','\")}') ${returningClause};`;\n\n        return {\n            name: queryName ? queryName : 'add',\n            type: queryType ? queryType : 'INSERT',\n            syntax: () => {\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Builds a SELECT SQL query.\n     *\n     * @param {QueryOptions} options - Options for the SELECT query.\n     * @returns {object} - An object containing the query name, type, and the SQL syntax.\n     * @memberof DynamicQueryBuilder\n     */\n\n    buildSelectQuery(options: QueryOptions): object {\n        const {\n            queryName,\n            queryType,\n            table,\n            fields = ['*'],\n            conditions = {},\n            joins = [],\n            optionalConditions = null,\n        } = options;\n\n        const whereClauses = Object.keys(conditions).map((key) => {\n            const value = conditions[key];\n            return typeof value === 'string' ? `${key} = '${value}'` : `${key} = ${value}`;\n        });\n\n        if (optionalConditions) {\n            // Adding optional conditions dynamically\n            Object.keys(optionalConditions).forEach((key) => {\n                const value = optionalConditions[key];\n                if (value) {\n                    whereClauses.push(\n                        typeof value === 'string' ? `${key} != '${value}'` : `${key} != ${value}`\n                    );\n                }\n            });\n        }\n\n        const whereClause = whereClauses.length ? `WHERE ${whereClauses.join(' AND ')}` : '';\n        const joinClause = joins.length ? joins.join(' ') : '';\n\n        const sql = `SELECT ${fields.join(', ')} FROM ${table} ${joinClause} ${whereClause}`;\n\n        return {\n            name: queryName ? queryName : 'find',\n            type: queryType ? queryType : 'SELECT_ONE',\n            syntax: () => {\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Builds an UPDATE SQL query.\n     *\n     * @param {QueryOptions} options - Options for the UPDATE query.\n     * @returns {object} - An object containing the query name, type, SQL syntax, and values to be used.\n     * @memberof DynamicQueryBuilder\n     */\n\n    buildUpdateQuery(options: QueryOptions): object {\n        const { table, values = {}, conditions = {}, returningFields = [] } = options;\n\n        const setClauses = Object.keys(values).map((key, index) => `${key} = $${index + 1}`);\n        const whereClauses = Object.keys(conditions).map(\n            (key, index) => `${key} = $${index + Object.keys(values).length + 1}`\n        );\n\n        const returningClause = returningFields.length\n            ? `RETURNING ${returningFields.join(', ')}`\n            : '';\n\n        const sql = `UPDATE ${table} SET ${setClauses.join(', ')} WHERE ${whereClauses.join(' AND ')} ${returningClause};`;\n\n        return {\n            name: 'update',\n            type: 'UPDATE',\n            sql,\n            values: [...Object.values(values), ...Object.values(conditions)],\n        };\n    }\n\n    //     return {\n    //   name: `delete`,\n    //   type: `UPDATE`,\n    //   syntax: (idArea: number) => {\n    //     const sql = `UPDATE Area SET Status = 127 WHERE Status = 1 AND idArea = ${idArea}`;\n\n    //     return sql;\n    //   },\n    // };\n\n    /**\n     * Builds a DELETE SQL query.\n     *\n     * @param {QueryOptions} options - Options for the DELETE query.\n     * @returns {object} - An object containing the query name, type, and the SQL syntax.\n     * @memberof DynamicQueryBuilder\n     */\n\n    buildDeleteQuery(options: QueryOptions): object {\n        const {\n            queryName,\n            queryType,\n            table,\n            conditions = {},\n            optionalConditions = null,\n            joins = [],\n            returningFields = [],\n            deleteType = 'soft',\n        } = options;\n\n        const whereClauses = Object.keys(conditions).map((key) => {\n            const value = conditions[key];\n            return typeof value === 'string' ? `${key} = '${value}'` : `${key} = ${value}`;\n        });\n\n        if (optionalConditions) {\n            // Adding optional conditions dynamically\n            Object.keys(optionalConditions).forEach((key) => {\n                const value = optionalConditions[key];\n                if (value) {\n                    whereClauses.push(\n                        typeof value === 'string' ? `${key} != '${value}'` : `${key} != ${value}`\n                    );\n                }\n            });\n        }\n\n        const whereClause = whereClauses.length ? `WHERE ${whereClauses.join(' AND ')}` : '';\n        const joinClause = joins.length ? joins.join(' ') : '';\n\n        // const whereClauses = Object.keys(conditions).map((key, index) => `${key} = $${index + 1}`);\n        // const whereClause = whereClauses.length ? `WHERE ${whereClauses.join(' AND ')}` : '';\n\n        const returningClause = returningFields.length\n            ? `RETURNING ${returningFields.join(', ')}`\n            : '';\n\n        let sql: string;\n        if (deleteType === 'soft') {\n            sql = `UPDATE ${table} SET status = 127 ${whereClause} ${returningClause};`;\n        } else {\n            sql = `DELETE FROM ${table} ${joinClause} ${whereClause} ${returningClause};`;\n        }\n\n        console.log('QQQQQQQQQQQQQQQQQQQQ', sql);\n\n        return {\n            name: queryName ? queryName : 'delete',\n            type: queryType ? queryType : 'DELETE',\n            syntax: () => {\n                return sql;\n            },\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ResolvePromisesInterceptor.html":{"url":"injectables/ResolvePromisesInterceptor.html","title":"injectable - ResolvePromisesInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ResolvePromisesInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/serializer.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                Interceptor that resolves all nested promises in the response data.\nThis interceptor is designed to be used within a NestJS application to ensure that any promises\nwithin the response data are fully resolved before the response is sent to the client.\nIt uses the deepResolvePromises function to recursively handle promises in nested structures.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/serializer.interceptor.ts:30\n                        \n                    \n\n\n            \n                \n                        Intercepts the request and resolves nested promises in the response data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe execution context of the request.\n\n\n                                            \n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe handler for the request.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable<>\n\n                        \n                            \n                                \nAn observable that emits the resolved data.\n\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestInterceptor, ExecutionContext, CallHandler } from '@nestjs/common';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport deepResolvePromises from './deep-resolver';\n\n/**\n * Interceptor that resolves all nested promises in the response data.\n *\n * This interceptor is designed to be used within a NestJS application to ensure that any promises\n * within the response data are fully resolved before the response is sent to the client.\n * It uses the `deepResolvePromises` function to recursively handle promises in nested structures.\n *\n * @export\n * @class ResolvePromisesInterceptor\n * @implements {NestInterceptor}\n */\n\n@Injectable()\nexport class ResolvePromisesInterceptor implements NestInterceptor {\n    /**\n     * Intercepts the request and resolves nested promises in the response data.\n     *\n     * @param {ExecutionContext} context - The execution context of the request.\n     * @param {CallHandler} next - The handler for the request.\n     * @returns {Observable} - An observable that emits the resolved data.\n     */\n\n    intercept(context: ExecutionContext, next: CallHandler): Observable {\n        return next.handle().pipe(map((data) => deepResolvePromises(data)));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SortBy.html":{"url":"injectables/SortBy.html","title":"injectable - SortBy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SortBy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/filter.validator.ts\n        \n\n\n            \n                Description\n            \n            \n                Custom validator for checking if a string is in the correct \"field direction\" format.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/validators/filter.validator.ts:101\n                        \n                    \n\n\n            \n                \n                        Default error message when validation fails.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe validation arguments.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \nThe error message.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(value: string, args: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/validators/filter.validator.ts:71\n                        \n                    \n\n\n            \n                \n                        Validates if the given value is in the format of \"field direction\" where direction is \"ASC\" or \"DESC\".\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe value to be validated.\n\n\n                                            \n                                        \n                                        \n                                                args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe validation arguments.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \nReturns true if valid; otherwise, false.\n\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\nimport {\n    ValidatorConstraint,\n    ValidatorConstraintInterface,\n    ValidationArguments,\n} from 'class-validator';\n\n/**\n * Custom validator for checking if a string is a valid comma-separated list of numbers.\n *\n * @export\n * @class CommaSeparated\n * @implements {ValidatorConstraintInterface}\n */\n@Injectable()\n@ValidatorConstraint({ name: 'CommaSeparated', async: false })\nexport class CommaSeparated implements ValidatorConstraintInterface {\n    /**\n     * Validates if the given value is a comma-separated list of numbers.\n     *\n     * @param {string} propertyValue - The value to be validated.\n     * @param {ValidationArguments} args - The validation arguments.\n     * @returns {boolean} - Returns true if valid; otherwise, false.\n     */\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    validate(propertyValue: string, args: ValidationArguments): boolean {\n        //\n        //\n        const isValid = /^[0-9]+(,[0-9]+)*$/.test(propertyValue);\n\n        if (isValid) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Default error message when validation fails.\n     *\n     * @param {ValidationArguments} args - The validation arguments.\n     * @returns {string} - The error message.\n     */\n\n    defaultMessage(args: ValidationArguments): string {\n        return `Invalid ${args.property}`;\n    }\n}\n\n/**\n * Custom validator for checking if a string is in the correct \"field direction\" format.\n *\n * @export\n * @class SortBy\n * @implements {ValidatorConstraintInterface}\n */\n@Injectable()\n@ValidatorConstraint({ name: 'SortBy', async: false })\nexport class SortBy implements ValidatorConstraintInterface {\n    /**\n     * Validates if the given value is in the format of \"field direction\" where direction is \"ASC\" or \"DESC\".\n     *\n     * @param {string} value - The value to be validated.\n     * @param {ValidationArguments} args - The validation arguments.\n     * @returns {boolean} - Returns true if valid; otherwise, false.\n     */\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    validate(value: string, args: ValidationArguments): boolean {\n        // Split the input by spaces and validate each pair\n        const parts = value.split(' ');\n\n        // Ensure pairs of field direction (e.g., field direction, field direction, ...)\n        if (parts.length % 2 !== 0) {\n            return false;\n        }\n\n        // Regular expression to match valid field direction\n        const fieldRegex = /^[\\w]+$/;\n        const directionRegex = /^(ASC|DESC|asc|desc|Asc|Desc)$/;\n\n        // Iterate through pairs and validate\n        for (let i = 0; i \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SortByDto.html":{"url":"classes/SortByDto.html","title":"class - SortByDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SortByDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/dto/pagination.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO class for sorting options.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                direction\n                            \n                            \n                                    \n                                    \n                                field\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        direction\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'ASC'})@IsString()@Matches(/^(ASC|DESC|asc|desc)$/, {message: 'operator must be one of ASC, DESC, asc, or desc'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.dto.ts:228\n                        \n                    \n\n            \n                \n                    The direction of the sort (ascending or descending).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        field\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.dto.ts:214\n                        \n                    \n\n            \n                \n                    The field to sort by.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nimport { Type, Transform, plainToInstance } from 'class-transformer';\nimport {\n    IsOptional,\n    Min,\n    Max,\n    IsNotEmpty,\n    IsString,\n    ValidateNested,\n    Matches,\n    IsEnum,\n    // Validate,\n    // IsIn,\n} from 'class-validator';\n\n// import { IsValidField } from '@core/validators/field.validator'; // Import the custom validator\nimport { IsNumberStringOrNumber } from '@decorators/number.string.validator';\nimport { ToNumber } from '@decorators/transforms.decorator';\n// import { IsNumberStringOrNumber } from '@decorators/number.string.validator';\n// import { ToNumber } from '@decorators/transforms.decorator';\n// import { Country } from '@modules/countries/dto/country';\n\n/**\n * Enum representing different pagination types.\n *\n * @export\n * @enum {string}\n */\n\nexport enum PaginationType {\n    NONE = 'no',\n    INFINITY = 'infinity',\n    PAGINATE = 'paginate',\n    ALL = 'all',\n}\n\n/**\n * DTO class for pagination query parameters.\n *\n * @export\n */\nexport class PaginationQueryDto {\n    /**\n     * The type of pagination to apply.\n     *\n     * @type {PaginationType}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        description:\n            'Pagination must all (Page and has_next_page), infinity (only has_next_page), paginate(only page)',\n        enum: PaginationType,\n        default: PaginationType.ALL,\n    })\n    @IsEnum(PaginationType)\n    @IsOptional()\n    readonly pagination: PaginationType;\n\n    /**\n     * The page number for pagination.\n     *\n     * @type {number}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        description: 'Page number',\n        minimum: 1,\n        default: 1,\n    })\n    @IsOptional()\n    @IsNumberStringOrNumber()\n    @ToNumber()\n    @Min(1)\n    readonly page?: number;\n\n    /**\n     * The number of records per page.\n     *\n     * @type {number}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        description: 'Record limit',\n        minimum: 1,\n        maximum: 500,\n        default: 10,\n    })\n    @IsOptional()\n    @IsNumberStringOrNumber()\n    @ToNumber()\n    @Min(10)\n    @Max(500)\n    readonly limit?: number = 10;\n\n    /**\n     * Filters to apply to the query.\n     *\n     * @type {FilterQueryDto[] | null}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        name: 'filters',\n        required: false,\n        type: String,\n        description: 'Array of filter objects as a JSON string',\n        example: '[{\"field\":\"name\",\"operator\":\"=\",\"value\":\"IN\"}]',\n    })\n    @IsOptional()\n    @Transform(({ value }) => {\n        return value ? plainToInstance(FilterQueryDto, JSON.parse(value)) : undefined;\n    })\n    @ValidateNested({ each: true })\n    @Type(() => FilterQueryDto)\n    filters?: FilterQueryDto[] | null;\n\n    /**\n     * Sorting options for the query.\n     *\n     * @type {SortByDto[] | null}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        name: 'sort',\n        required: false,\n        type: String,\n        description: 'Array of sort objects as a JSON string',\n        example: '[{\"field\":\"name\",\"direction\":\"ASC\"}]',\n    })\n    @IsOptional()\n    @Transform(({ value }) => {\n        return value ? plainToInstance(SortByDto, JSON.parse(value)) : undefined;\n    })\n    @ValidateNested({ each: true })\n    @Type(() => SortByDto)\n    sort?: SortByDto[] | null;\n}\n\n/**\n * DTO class for filter query parameters.\n *\n * @export\n */\nexport class FilterQueryDto {\n    /**\n     * The field to filter on.\n     *\n     * @type {string}\n     * @memberof FilterQueryDto\n     */\n\n    @ApiProperty({ example: 'iso', required: true })\n    @IsNotEmpty()\n    @IsString()\n    field: string;\n\n    /**\n     * The operator to use for filtering.\n     *\n     * @type {string}\n     * @memberof FilterQueryDto\n     */\n\n    @ApiProperty({ example: '=' })\n    @IsNotEmpty()\n    @IsString()\n    operator: string;\n\n    /**\n     * The value to filter by.\n     *\n     * @type {string}\n     * @memberof FilterQueryDto\n     */\n\n    @ApiProperty({ example: 'IN' })\n    @IsNotEmpty()\n    @IsString()\n    value: string;\n}\n\n/**\n * DTO class for sorting options.\n *\n * @export\n */\nexport class SortByDto {\n    // @ApiProperty({ example: 'name' })\n    // @IsString()\n    // @Validate(IsValidField, [Country], {\n    //     message: 'Field must be a valid key of Country',\n    // })\n    // field: keyof Country;\n    /**\n     * The field to sort by.\n     *\n     * @type {string}\n     * @memberof SortByDto\n     */\n\n    @ApiProperty()\n    @IsString()\n    // @IsIn(abc(x : keyof TExposedAccountInfo), {\n    //     message: 'Field must be one of \"name\", \"age\", or \"status\"',\n    // })\n    // @Validate(IsValidField, [{ entity: () => T }], {\n    //     message: 'Field must be a valid key of the specified entity',\n    // })\n    field: string;\n\n    /**\n     * The direction of the sort (ascending or descending).\n     *\n     * @type {string}\n     * @memberof SortByDto\n     */\n\n    @ApiProperty({ example: 'ASC' })\n    @IsString()\n    @Matches(/^(ASC|DESC|asc|desc)$/, {\n        message: 'operator must be one of ASC, DESC, asc, or desc',\n    })\n    direction: string;\n}\n\n// export class PaginatedResultDto {\n//     @ApiProperty()\n//     data: T[];\n\n//     @ApiProperty()\n//     total: number;\n\n//     @ApiProperty()\n//     page: number;\n\n//     @ApiProperty()\n//     limit: number;\n// }\n\n//DX\n// import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\n// import { Type, Transform, plainToInstance } from 'class-transformer';\n// import {\n//     IsOptional,\n//     Min,\n//     Max,\n//     IsNotEmpty,\n//     IsString,\n//     IsArray,\n//     ValidateNested,\n//     Validate,\n//     Matches,\n// } from 'class-validator';\n\n// import { IsNumberStringOrNumber } from '@decorators/number.string.validator';\n// import { ToNumber } from '@decorators/transforms.decorator';\n// import { SortBy } from '@validators/filter.validator';\n\n// export class FilterQueryDto {\n//     @ApiProperty({ example: 'name', required: true })\n//     @IsNotEmpty()\n//     @IsString()\n//     field: string;\n\n//     @ApiProperty({ example: 'LIKE' })\n//     @IsNotEmpty()\n//     @IsString()\n//     operator: string;\n\n//     @ApiProperty({ example: '%John%' })\n//     @IsNotEmpty()\n//     @IsString()\n//     value: string;\n// }\n\n// export class SortByDto {\n//     @ApiProperty({ example: 'name' })\n//     @IsString()\n//     field: string;\n\n//     @ApiProperty({ example: 'ASC' })\n//     @IsString()\n//     @Matches(/^(ASC|DESC|asc|desc)$/, {\n//         message: 'operator must be one of ASC, DESC, asc, or desc',\n//     })\n//     direction: string;\n// }\n\n// export class PaginationQueryDto {\n//     @ApiPropertyOptional({\n//         description: 'Page number',\n//         minimum: 1,\n//         default: 1,\n//     })\n//     @IsOptional()\n//     @IsNumberStringOrNumber()\n//     @ToNumber()\n//     @Min(1)\n//     // @Transform(({ value }) => {\n//     //     const strippedValue = String(value).replace(/['\"]+/g, '');\n//     //     const numberValue = Number(strippedValue);\n//     //     return isNaN(numberValue) ? 'undefined' : numberValue;\n//     // })\n//     readonly page?: number;\n\n//     @ApiPropertyOptional({\n//         description: 'Record limit',\n//         minimum: 1,\n//         maximum: 500,\n//         default: 10,\n//     })\n//     @IsOptional()\n//     @IsNumberStringOrNumber()\n//     @ToNumber()\n//     @Min(10)\n//     @Max(500)\n//     readonly limit?: number = 10;\n\n//     // @IsOptional()\n//     // @IsArray()\n//     // @ValidateNested({ each: true })\n//     // @Type(() => FilterQueryDto)\n//     // filters?: FilterQueryDto[];\n//     // // filters?: any;\n//     @ApiPropertyOptional({\n//         name: 'filters',\n//         required: false,\n//         type: String,\n//         description: 'Array of filter objects as a JSON string',\n//         example:\n//             '[{\"field\":\"name\",\"operator\":\"LIKE\",\"value\":\"John\"},{\"field\":\"age\",\"operator\":\">\",\"value\":\"30\"}]',\n//     })\n//     @IsOptional()\n//     @Transform(({ value }) => {\n//         return value ? plainToInstance(FilterQueryDto, JSON.parse(value)) : undefined;\n//     })\n//     @ValidateNested({ each: true })\n//     @Type(() => FilterQueryDto)\n//     filters?: FilterQueryDto[] | null;\n\n//     // @ApiPropertyOptional({\n//     //     description: ' Name or City:  ASC or DESC',\n//     //     example: 'name ASC',\n//     // })\n//     // @IsOptional()\n//     // @IsString()\n//     // @Validate(SortBy)\n//     // readonly sort?: string;\n//     // @ApiPropertyOptional({ type: [SortByDto], isArray: true })\n//     // @IsOptional()\n//     // @Transform(({ value }) => {\n//     //     return value ? plainToInstance(SortUserDto, JSON.parse(value)) : undefined;\n//     // })\n//     // @ValidateNested({ each: true })\n//     // @Type(() => SortUserDto)\n//     // sort?: SortUserDto[] | null;\n\n//     @ApiPropertyOptional({\n//         name: 'sort',\n//         required: false,\n//         type: String,\n//         description: 'Array of sort objects as a JSON string',\n//         example: '[{\"field\":\"name\",\"direction\":\"ASC\"},{\"field\":\"age\",\"direction\":\"DESC\"}]',\n//     })\n//     @IsOptional()\n//     @Transform(({ value }) => {\n//         return value ? plainToInstance(SortByDto, JSON.parse(value)) : undefined;\n//     })\n//     @ValidateNested({ each: true })\n//     @Type(() => SortByDto)\n//     sort?: SortByDto[] | null;\n// }\n\n// export class PaginatedResultDto {\n//     @ApiProperty()\n//     data: T[];\n\n//     @ApiProperty()\n//     total: number;\n\n//     @ApiProperty()\n//     page: number;\n\n//     @ApiProperty()\n//     limit: number;\n// }\n\n// // import { ApiProperty, ApiExtraModels } from '@nestjs/swagger';\n\n// // import { Type } from 'class-transformer';\n// // import { IsOptional, IsString, IsArray, ValidateNested, IsNumber } from 'class-validator';\n\n// // // export class FilterQueryDto {\n// // //     @ApiProperty({ example: 'name' })\n// // //     field: string;\n\n// // //     @ApiProperty({ example: 'LIKE' })\n// // //     operator: string;\n\n// // //     @ApiProperty({ example: '%John%' })\n// // //     value: string;\n// // // }\n// // export class FilterQueryDto {\n// //     @ApiProperty({ example: 'country_name' })\n// //     @IsString()\n// //     field: string;\n\n// //     @ApiProperty({ example: 'LIKE' })\n// //     @IsString()\n// //     operator: string;\n\n// //     @ApiProperty({ example: '%United%' })\n// //     @IsString()\n// //     value: string;\n// // }\n// // @ApiExtraModels(FilterQueryDto)\n// // export class PaginationQueryDto {\n// //     @ApiProperty({ example: 1, required: false })\n// //     @IsOptional()\n// //     @IsNumber()\n// //     @Type(() => Number)\n// //     page?: number = 1;\n\n// //     @ApiProperty({ example: 10, required: false })\n// //     @IsOptional()\n// //     @IsNumber()\n// //     @Type(() => Number)\n// //     limit?: number = 10;\n\n// //     // @ApiProperty({\n// //     //     type: [FilterQueryDto],\n// //     //     required: false,\n// //     //     isArray: true,\n// //     // })\n// //     // @Type(() => FilterQueryDto)\n// //     // filters?: FilterQueryDto[];\n// //     @ApiProperty({\n// //         type: FilterQueryDto,\n// //         required: false,\n// //         isArray: true,\n// //     })\n// //     // @IsOptional()\n// //     @IsArray()\n// //     @ValidateNested({ each: true })\n// //     @Type(() => FilterQueryDto)\n// //     filters?: FilterQueryDto[];\n\n// //     // @ApiProperty({\n// //     //     type: [Object],\n// //     //     // items: {\n// //     //     //     type: 'object',\n// //     //     //     items: {\n// //     //     //         type: 'object',\n// //     //     //     },\n// //     //     // },\n// //     // })\n// //     // coords: FilterQueryDto[];\n\n// //     // @ApiProperty({ type: String, required: false })\n// //     // @IsOptional()\n// //     // @IsArray()\n// //     // @ValidateNested({ each: true })\n// //     // @Type(() => FilterQueryDto)\n// //     // filters?: FilterQueryDto[];\n\n// //     @ApiProperty({ example: 'name ASC1', required: false })\n// //     sort?: string;\n// // }\n\n// // // export class PaginationQueryDto {\n// // //     @ApiProperty({ example: 1, required: false })\n// // //     page?: number = 1;\n\n// // //     @ApiProperty({ example: 10, required: false })\n// // //     limit?: number = 10;\n\n// // //     // @ApiProperty({ type: [FilterQueryDto], required: false, isArray: true })\n// // //     // filters?: FilterQueryDto[];\n\n// // //     // @ApiProperty({ type: String, required: false, isArray: true })\n// // //     // filters?: FilterQueryDto[];\n\n// // //     // @ApiProperty({ type: [FilterQueryDto], required: false, isArray: true })\n// // //     // @Type(() => FilterQueryDto)\n// // //     // filters?: FilterQueryDto[];\n\n// // //     @ApiProperty({ type: [FilterQueryDto], required: false })\n// // //     @IsOptional()\n// // //     @IsArray()\n// // //     @ValidateNested({ each: true })\n// // //     @Type(() => FilterQueryDto)\n// // //     filters?: FilterQueryDto[];\n\n// // //     @ApiProperty({ example: 'name ASC1', required: false })\n// // //     sort?: string;\n// // // }\n\n// // export class PaginatedResultDto {\n// //     @ApiProperty()\n// //     data: T[];\n\n// //     @ApiProperty()\n// //     total: number;\n\n// //     @ApiProperty()\n// //     page: number;\n\n// //     @ApiProperty()\n// //     limit: number;\n// // }\n\n// // export class abc {\n// //     @ApiProperty()\n// //     page: number;\n\n// //     @ApiProperty()\n// //     limit: number;\n// // }\n\n// // import { applyDecorators } from '@nestjs/common';\n// // import { ApiProperty, ApiExtraModels, ApiQuery, getSchemaPath } from '@nestjs/swagger';\n\n// // /**\n// //  * Combines Swagger Decorators to create a description for `filters[name]=something`\n// //  *  - has support for swagger\n// //  *  - automatic transformation with nestjs\n// //  */\n// // // // eslint-disable-next-line @typescript-eslint/ban-types,@typescript-eslint/explicit-module-boundary-types\n// // // export function ApiFilterQuery(fieldName: string, filterDto: Function) {\n// // //     return applyDecorators(\n// // //         ApiExtraModels(filterDto),\n// // //         ApiQuery({\n// // //             required: false,\n// // //             name: fieldName,\n// // //             style: 'deepObject',\n// // //             explode: true,\n// // //             type: 'object',\n// // //             schema: {\n// // //                 $ref: getSchemaPath(filterDto),\n// // //             },\n// // //         })\n// // //     );\n// // // }\n// // // eslint-disable-next-line @typescript-eslint/ban-types,@typescript-eslint/explicit-module-boundary-types\n// // export function ApiFilterQuery(fieldName: string, filterDto: Function, index: number) {\n// //     return applyDecorators(\n// //         ApiExtraModels(filterDto),\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}]`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //             schema: {\n// //                 $ref: getSchemaPath(filterDto),\n// //             },\n// //         })\n// //     );\n// // }\n\n// // export function ApiFilterQuery(fieldName: string, index: number) {\n// //     return applyDecorators(\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}].field`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //         }),\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}].operator`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //         }),\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}].value`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //         })\n// //     );\n// // }\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SortCountryDto.html":{"url":"classes/SortCountryDto.html","title":"class - SortCountryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SortCountryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/countries/dto/query-country.dto-remove.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                order\n                            \n                            \n                                    \n                                    \n                                    \n                                orderBy\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/query-country.dto-remove.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Type(undefined)@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/query-country.dto-remove.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nimport { Transform, Type, plainToInstance } from 'class-transformer';\nimport { IsNumber, IsOptional, IsString, ValidateNested } from 'class-validator';\n\nimport { Country } from './country';\n\nexport class FilterCountryDto {}\n\nexport class SortCountryDto {\n    @ApiProperty()\n    @Type(() => String)\n    @IsString()\n    orderBy: keyof Country;\n\n    @ApiProperty()\n    @IsString()\n    order: string;\n}\n\nexport class QueryCountryDto {\n    @ApiPropertyOptional()\n    @Transform(({ value }) => (value ? Number(value) : 1))\n    @IsNumber()\n    @IsOptional()\n    page?: number;\n\n    @ApiPropertyOptional()\n    @Transform(({ value }) => (value ? Number(value) : 10))\n    @IsNumber()\n    @IsOptional()\n    limit?: number;\n\n    @ApiPropertyOptional({ type: String })\n    @IsOptional()\n    @Transform(({ value }) =>\n        value ? plainToInstance(FilterCountryDto, JSON.parse(value)) : undefined\n    )\n    @ValidateNested()\n    @Type(() => FilterCountryDto)\n    filters?: FilterCountryDto | null;\n\n    @ApiPropertyOptional({ type: String })\n    @IsOptional()\n    @Transform(({ value }) => {\n        return value ? plainToInstance(SortCountryDto, JSON.parse(value)) : undefined;\n    })\n    @ValidateNested({ each: true })\n    @Type(() => SortCountryDto)\n    sort?: SortCountryDto[] | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateDto.html":{"url":"classes/UpdateDto.html","title":"class - UpdateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/currencies/dto/update.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the UpdateDto class, which represents the Data Transfer Object (DTO)\nused for updating an existing currency entity. It extends from the CreateDto class,\nmaking all fields optional for the update operation.\nThe UpdateDto class is used to define the structure of the data required to update\nan existing currency entity. It inherits all properties from the CreateDto class but\nmakes them optional, allowing partial updates.\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreateDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\n\nimport { CreateDto } from './create.dto';\n\n/**\n * @fileoverview\n * This file defines the `UpdateDto` class, which represents the Data Transfer Object (DTO)\n * used for updating an existing currency entity. It extends from the `CreateDto` class,\n * making all fields optional for the update operation.\n *\n * @module\n * @description\n * The `UpdateDto` class is used to define the structure of the data required to update\n * an existing currency entity. It inherits all properties from the `CreateDto` class but\n * makes them optional, allowing partial updates.\n */\n\nexport class UpdateDto extends PartialType(CreateDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserNotFoundException.html":{"url":"classes/UserNotFoundException.html","title":"class - UserNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/exceptions/user-not-found.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Custom exception for user not found errors.\nIt extends the NotFoundException provided by NestJS.\nExample :```typescript\nthrow new UserNotFoundException();\nthrow new UserNotFoundException('Specific error message');Example :\n            \n\n            \n                Extends\n            \n            \n                        NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(error?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/exceptions/user-not-found.exception.ts:20\n                            \n                        \n\n                \n                    \n                            Creates an instance of UserNotFoundException.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                \nOptional error message.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        'use strict';\n\nimport { NotFoundException } from '@nestjs/common';\n\n/**\n * Custom exception for user not found errors.\n *\n * @extends {NotFoundException}\n *\n * @description This exception is thrown when a requested user is not found in the system.\n * It extends the `NotFoundException` provided by NestJS.\n *\n * @example\n * ```typescript\n * throw new UserNotFoundException();\n * throw new UserNotFoundException('Specific error message');\n * ```\n */\n\nexport class UserNotFoundException extends NotFoundException {\n    /**\n     * Creates an instance of UserNotFoundException.\n     *\n     * @param {string} [error] - Optional error message.\n     */\n\n    constructor(error?: string) {\n        super('error.user_not_found', error);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UtilsService.html":{"url":"classes/UtilsService.html","title":"class - UtilsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UtilsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/helper/services/util.service.ts\n        \n\n\n            \n                Description\n            \n            \n                UtilsService\nUtilsService provides utility methods for building dynamic SQL queries, including pagination, filtering, sorting, and query construction.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                buildDynamicQuery\n                            \n                            \n                                    Public\n                                queryStatements\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        buildDynamicQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    buildDynamicQuery(paginationQuery: PaginationQueryDto, fieldConfigs: Record, baseFields: string[], fromQuery: string, countByField: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/helper/services/util.service.ts:29\n                        \n                    \n\n\n            \n                \n                        Builds dynamic SQL queries based on pagination, filtering, sorting, and field configuration.\nExample :selectQuery: string;\ncountQuery: string;}} - An object containing the dynamically built SELECT and COUNT queries.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                paginationQuery\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe pagination query parameters including filters and sorting options.\n\n\n                                            \n                                        \n                                        \n                                                fieldConfigs\n                                            \n                                                            Record\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nConfiguration for each field including alias, join table, and select fields.\n\n\n                                            \n                                        \n                                        \n                                                baseFields\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe base fields to include in the SELECT clause.\n\n\n                                            \n                                        \n                                        \n                                                fromQuery\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe base FROM clause for the query.\n\n\n                                            \n                                        \n                                        \n                                                countByField\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    '*'\n                                            \n\n                                            \n                                                    \nThe field to use for counting records in the count query.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                \nAn object containing the dynamically built SELECT and COUNT queries.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        queryStatements\n                        \n                    \n                \n            \n            \n                \n                        \n                    queryStatements(baseFields: string[], selectFields: string | string[], fromQuery: string, joinTables: string[], filterQuery: string, sortByQuery: string, countByField: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/helper/services/util.service.ts:136\n                        \n                    \n\n\n            \n                \n                        Constructs SELECT and COUNT SQL queries based on the provided parameters.\nExample :selectQuery: string;\ncountQuery: string;}} - An object containing the constructed SELECT and COUNT queries.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                baseFields\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe base fields to include in the SELECT clause.\n\n\n                                            \n                                        \n                                        \n                                                selectFields\n                                            \n                                                        string | string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAdditional fields to include in the SELECT clause.\n\n\n                                            \n                                        \n                                        \n                                                fromQuery\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe base FROM clause for the query.\n\n\n                                            \n                                        \n                                        \n                                                joinTables\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nJOIN clauses to include in the query.\n\n\n                                            \n                                        \n                                        \n                                                filterQuery\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe WHERE clause for filtering.\n\n\n                                            \n                                        \n                                        \n                                                sortByQuery\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe ORDER BY clause for sorting.\n\n\n                                            \n                                        \n                                        \n                                                countByField\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    '*'\n                                            \n\n                                            \n                                                    \nThe field to use for counting records in the count query.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                \nAn object containing the constructed SELECT and COUNT queries.\n\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PaginationQueryDto } from '@utils/dto/pagination.dto';\nimport { IPaginationFieldConfig } from '@utils/types/pagination-options';\n\n/**\n * UtilsService\n *\n * @description\n * `UtilsService` provides utility methods for building dynamic SQL queries, including pagination, filtering, sorting, and query construction.\n *\n * @export\n * @class UtilsService\n */\nexport class UtilsService {\n    /**\n     * Builds dynamic SQL queries based on pagination, filtering, sorting, and field configuration.\n     *\n     * @param {PaginationQueryDto} paginationQuery - The pagination query parameters including filters and sorting options.\n     * @param {Record} fieldConfigs - Configuration for each field including alias, join table, and select fields.\n     * @param {string[]} baseFields - The base fields to include in the SELECT clause.\n     * @param {string} fromQuery - The base FROM clause for the query.\n     * @param {string} [countByField='*'] - The field to use for counting records in the count query.\n     *\n     * @returns {{\n     *     selectQuery: string;\n     *     countQuery: string;\n     * }} - An object containing the dynamically built SELECT and COUNT queries.\n     */\n\n    public buildDynamicQuery(\n        paginationQuery: PaginationQueryDto,\n        fieldConfigs: Record,\n        baseFields: string[],\n        fromQuery: string,\n        countByField: string = '*'\n    ): {\n        selectQuery: string;\n        countQuery: string;\n    } {\n        let filterQuery = '';\n        let sortByQuery = '';\n        const filterValues: any[] = [];\n        const joinTables: string[] = [];\n        const selectFields: string[] = [];\n\n        const filters = paginationQuery.filters;\n        const sort = paginationQuery.sort;\n\n        const mySet = new Set();\n\n        if (filters && filters.length > 0) {\n            const filterConditions = filters\n                .map(\n                    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                    (filter: { field: string; operator: string; value: string }, index: number) => {\n                        const field = filter.field.toLowerCase();\n                        let alias = `ptbl`; // default alias for the main table\n                        if (fieldConfigs && fieldConfigs[field]) {\n                            const config = fieldConfigs[field];\n                            alias = config.alias();\n\n                            if (!mySet.has(alias)) {\n                                mySet.add(alias);\n                                // joinTables.push(config.joinTable(index));\n                                joinTables.push(config.joinTable(alias));\n                            }\n                            selectFields.push(...config.selectFields(alias));\n                        }\n                        const operator = filter.operator.toUpperCase();\n                        if (operator === 'IN') {\n                            const values = filter.value.split(',').map((val) => `'${val.trim()}'`);\n                            return `${alias}.${filter.field} IN (${values.join(', ')})`;\n                        }\n                        // Add the value to the filterValues array for parameterized query\n                        filterValues.push(filter.value);\n\n                        // return `${alias}.${filter.field} ${filter.operator} ?`;\n                        return `${alias}.${filter.field} ${filter.operator} '${filter.value}'`;\n                    }\n                )\n                .join(' AND ');\n\n            filterQuery = `WHERE ${filterConditions}`;\n        }\n\n        if (sort && sort.length > 0) {\n            sortByQuery = `ORDER BY `;\n            sortByQuery += sort\n                .map((sortItem: { field: string; direction: any }) => {\n                    const field = sortItem.field.toLowerCase();\n                    let alias = `ptbl`; // default alias for the main table\n\n                    if (fieldConfigs && fieldConfigs[field]) {\n                        const config = fieldConfigs[field];\n                        alias = config.alias(); // Use index 0 since sorting doesn't require multiple aliases\n                    }\n\n                    return `${alias}.${sortItem.field} ${sortItem.direction}`;\n                })\n                .join(', ');\n        }\n\n        const selectedFields = selectFields.length > 0 ? `${', '}${selectFields.join(', ')}` : [];\n\n        // return { filterQuery, filterValues, joinTables, selectFields: selectedFields, sortByQuery };\n\n        const { selectQuery, countQuery } = this.queryStatements(\n            baseFields,\n            selectedFields,\n            fromQuery,\n            joinTables,\n            filterQuery,\n            sortByQuery,\n            countByField\n        );\n\n        return { selectQuery, countQuery };\n    }\n\n    /**\n     * Constructs SELECT and COUNT SQL queries based on the provided parameters.\n     *\n     * @param {string[]} baseFields - The base fields to include in the SELECT clause.\n     * @param {string | string[]} selectFields - Additional fields to include in the SELECT clause.\n     * @param {string} fromQuery - The base FROM clause for the query.\n     * @param {string[]} joinTables - JOIN clauses to include in the query.\n     * @param {string} filterQuery - The WHERE clause for filtering.\n     * @param {string} sortByQuery - The ORDER BY clause for sorting.\n     * @param {string} [countByField='*'] - The field to use for counting records in the count query.\n     *\n     * @returns {{\n     *     selectQuery: string;\n     *     countQuery: string;\n     * }} - An object containing the constructed SELECT and COUNT queries.\n     */\n\n    public queryStatements(\n        baseFields: string[],\n        selectFields: string | string[],\n        fromQuery: string,\n        joinTables: string[],\n        filterQuery: string,\n        sortByQuery: string,\n        countByField: string = '*'\n    ): {\n        selectQuery: string;\n        countQuery: string;\n    } {\n        const selectQuery = `SELECT ${baseFields.join(', ')} ${selectFields} ${fromQuery} ${joinTables.join(' ')} ${filterQuery} ${sortByQuery}`;\n        const countQuery = `SELECT count(${countByField}) ${fromQuery} ${joinTables.join(' ')} ${filterQuery}`;\n\n        return { selectQuery, countQuery };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChangelog\n[1.0.1] - 2024-07-01\nBug Fixes\n\nconfig: Fixed issue with configuration\ndeps: Updated dependencies\n\n[1.0.0] - 2024-06-25\nFeatures\n\nstart: Initial release\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"contributing.html":{"url":"contributing.html","title":"getting-started - contributing","body":"\n                   \n\n2. CONTRIBUTING.md\nGuidelines for contributing to your project.\nExample:\nExample :# Contributing to Project Name\n\nWe welcome contributions from the community. Please follow these guidelines to ensure a smooth process for everyone.\n\n## How to Contribute\n\n### Reporting Bugs\nIf you find a bug, please open an issue on GitHub and include as much information as possible.\n\n### Suggesting Features\nWe welcome feature requests! Please open an issue on GitHub and describe the feature in detail.\n\n### Code Contributions\n1. Fork the repository.\n2. Create a new branch (`git checkout -b feature-name`).\n3. Make your changes.\n4. Commit your changes (`git commit -m 'Add feature'`).\n5. Push to the branch (`git push origin feature-name`).\n6. Open a pull request on GitHub.\n\n## Code Style\nPlease adhere to the code style used in the project. We use [tool/linter] for code formatting and linting.\n\n## Running Tests\nEnsure that all tests pass before submitting a pull request. Run tests with:\n```sh\nyarn test\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                prisma/data/countries-currencies-timezones.ts\n            \n            variable\n            countries\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/data/countries-dummy.ts\n            \n            variable\n            countries\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/data/countries-dummy.ts\n            \n            variable\n            countriesjson\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/data/countries-dummy.ts\n            \n            variable\n            countriesjson1\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/data/countries-dummy.ts\n            \n            variable\n            countriesList\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/data/countries-dummy.ts\n            \n            variable\n            currencies\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/seed.ts\n            \n            variable\n            prisma\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/seed.ts\n            \n            variable\n            seed\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app/app.module.ts\n            \n            variable\n            ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/helper/helper.module.ts\n            \n            variable\n            providers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/helper/services/config.service.ts\n            \n            class\n            ConfigService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/helper/services/config.service.ts\n            \n            class\n            EnvVarAppConfigValidator\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/common/helper/services/pagination.service.ts\n            \n            injectable\n            PaginationService\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/common/helper/services/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/common/helper/services/util.service.ts\n            \n            class\n            UtilsService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/config/app.config.ts\n            \n            class\n            EnvironmentVariablesValidator\n            \n                10 %\n                (1/10)\n            \n        \n        \n            \n                \n                src/config/database.config.ts\n            \n            class\n            EnvironmentVariablesValidator\n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                src/config/file.config.ts\n            \n            class\n            EnvironmentVariablesValidator\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/core/constants/core.constant.ts\n            \n            variable\n            HTTP_STATUS_MESSAGES\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/constants/core.constant.ts\n            \n            variable\n            PUBLIC_ROUTE_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/constants/core.constant.ts\n            \n            variable\n            RESPONSE_SERIALIZATION_META_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/decorators/number.string.validator.ts\n            \n            function\n            IsNumberStringOrNumber\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/decorators/public.request.decorator.ts\n            \n            variable\n            PublicRoute\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/decorators/swagger.schema.ts\n            \n            variable\n            ApiFile\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/decorators/swagger.schema.ts\n            \n            variable\n            ApiMultiFile\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/decorators/transforms.decorator.ts\n            \n            function\n            ToNumber\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/exceptions/file-not-image.exception.ts\n            \n            class\n            FileNotImageException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/core/exceptions/http-error.filter.ts\n            \n            class\n            HttpErrorFilter\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/core/exceptions/query.ts\n            \n            class\n            Query\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/core/exceptions/user-not-found.exception.ts\n            \n            class\n            UserNotFoundException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/core/filters/all-exceptions.filter.ts\n            \n            class\n            AllExceptionsFilter\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/core/filters/bad-request.filter.ts\n            \n            class\n            BadRequestExceptionFilter\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/core/filters/constraint-errors.ts\n            \n            variable\n            constraintErrors\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/filters/http-exception.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/core/filters/prisma-exception.filter.ts\n            \n            class\n            PrismaClientExceptionFilter\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/core/filters/query-failed.filter.ts\n            \n            class\n            QueryFailedFilter\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/core/filters/query.ts\n            \n            class\n            Query\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/core/interfaces/app.interfaces.ts\n            \n            interface\n            IAppConfig\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/core/interfaces/aws.interfaces.ts\n            \n            interface\n            IAwsConfig\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/core/interfaces/file.interfaces.ts\n            \n            interface\n            IFileConfig\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/core/interfaces/jwt.interfaces.ts\n            \n            interface\n            IJWTConfig\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/core/interfaces/node-emailer.interfaces.ts\n            \n            interface\n            INodeEmailerConfig\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/core/interfaces/postgres.interfaces.ts\n            \n            interface\n            IPostgreSQLConfig\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/core/interfaces/sendgrid.interfaces.ts\n            \n            interface\n            ISendGridConfig\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/interfaces/sms.interfaces.ts\n            \n            interface\n            ISMSConfig\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/interfaces/upload-file.interfaces.ts\n            \n            interface\n            IUploadFileConfig\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/core/validators/field.validator.ts\n            \n            function\n            IsValidField\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/validators/filter.validator.ts\n            \n            injectable\n            CommaSeparated\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/core/validators/filter.validator.ts\n            \n            injectable\n            SortBy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/countries/countries.controller.ts\n            \n            controller\n            CountriesController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/modules/countries/countries.service.ts\n            \n            injectable\n            CountriesService\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/modules/countries/dto/country.ts\n            \n            class\n            Country\n            \n                100 %\n                (15/15)\n            \n        \n        \n            \n                \n                src/modules/countries/dto/query-country.dto-remove.ts\n            \n            class\n            FilterCountryDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/countries/dto/query-country.dto-remove.ts\n            \n            class\n            QueryCountryDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/countries/dto/query-country.dto-remove.ts\n            \n            class\n            SortCountryDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/currencies/currencies.controller.ts\n            \n            controller\n            CurrenciesController\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/modules/currencies/currencies.controller.ts\n            \n            variable\n            modules\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/currencies/currencies.service.ts\n            \n            injectable\n            CurrenciesService\n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                src/modules/currencies/dto/create.dto.ts\n            \n            class\n            CreateDto\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/modules/currencies/dto/currency.ts\n            \n            class\n            Currency\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/modules/currencies/dto/update.dto.ts\n            \n            class\n            UpdateDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/currencies/query.ts\n            \n            class\n            Query\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/modules/files/domain/file.ts\n            \n            class\n            FileType\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/files/files.module.ts\n            \n            variable\n            infrastructureUploaderModule\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/files/files.service.ts\n            \n            injectable\n            FilesService\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/files/infrastructure/uploader/local/dto/file-response.dto.ts\n            \n            class\n            FileResponseDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/modules/files/infrastructure/uploader/local/files.controller.ts\n            \n            controller\n            FilesLocalController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/files/infrastructure/uploader/local/files.service.ts\n            \n            injectable\n            FilesLocalService\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/modules/files/infrastructure/uploader/s3-presigned/dto/file-response.dto.ts\n            \n            class\n            FileResponseDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/files/infrastructure/uploader/s3-presigned/dto/file.dto.ts\n            \n            class\n            FileUploadDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/files/infrastructure/uploader/s3-presigned/files.controller.ts\n            \n            controller\n            FilesS3PresignedController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/files/infrastructure/uploader/s3-presigned/files.service.ts\n            \n            injectable\n            FilesS3PresignedService\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/modules/files/infrastructure/uploader/s3/dto/file-response.dto.ts\n            \n            class\n            FileResponseDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/modules/files/infrastructure/uploader/s3/files.controller.ts\n            \n            controller\n            FilesS3Controller\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/modules/files/infrastructure/uploader/s3/files.service.ts\n            \n            injectable\n            FilesS3Service\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/modules/home/home.controller.ts\n            \n            controller\n            HomeController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/modules/home/home.service.ts\n            \n            injectable\n            HomeService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/providers/dynamic-query.service-to-be-remove.ts\n            \n            class\n            DynamicQueryBuilder\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/providers/dynamic-query.service-to-be-remove.ts\n            \n            interface\n            QueryOptions\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/providers/file-upload.service.ts\n            \n            variable\n            copyFile\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/providers/file-upload.service.ts\n            \n            variable\n            editFileName\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/providers/file-upload.service.ts\n            \n            variable\n            fileName\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/providers/file-upload.service.ts\n            \n            variable\n            filesRoot\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/providers/file-upload.service.ts\n            \n            variable\n            fsRoot\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/providers/file-upload.service.ts\n            \n            variable\n            imageFileFilter\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/providers/file-upload.service.ts\n            \n            variable\n            multiFileDestDir\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/providers/file-upload.service.ts\n            \n            variable\n            profileDestDir\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/providers/file-upload.service.ts\n            \n            variable\n            removeFile\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/swagger.ts\n            \n            function\n            Unnamed function\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/deep-resolver.ts\n            \n            function\n            deepResolvePromises\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/dto/pagination-response.dto.ts\n            \n            class\n            PaginationResponseDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/utils/dto/pagination-response.dto.ts\n            \n            function\n            PaginationResponse\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/dto/pagination.dto.ts\n            \n            class\n            FilterQueryDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/utils/dto/pagination.dto.ts\n            \n            class\n            PaginationQueryDto\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/utils/dto/pagination.dto.ts\n            \n            class\n            SortByDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/utils/dto/pagination.meta.dto.ts\n            \n            class\n            PaginationMetaDto\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/utils/dto/pagination.meta.dto.ts\n            \n            interface\n            IPageMetaDtoParameters\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/utils/serializer.interceptor.ts\n            \n            injectable\n            ResolvePromisesInterceptor\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/utils/transformers/lower-case.transformer.ts\n            \n            variable\n            lowerCaseTransformer\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/transformers/upper-case.transformer.ts\n            \n            variable\n            upperCaseTransformer\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/types/pagination-options.ts\n            \n            interface\n            IPaginationFieldConfig\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/utils/validate-config.ts\n            \n            function\n            validateConfig\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @aws-sdk/client-s3 : ^3.609.0\n        \n            @aws-sdk/s3-request-presigner : ^3.613.0\n        \n            @nestjs/axios : ^3.0.2\n        \n            @nestjs/common : ^10.3.9\n        \n            @nestjs/config : ^3.2.2\n        \n            @nestjs/core : ^10.3.9\n        \n            @nestjs/platform-express : ^10.3.9\n        \n            @nestjs/swagger : ^7.3.1\n        \n            @nestjs/terminus : ^10.2.3\n        \n            @prisma/client : ^5.17.0\n        \n            axios : ^1.7.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            compression : ^1.7.4\n        \n            express : ^4.19.2\n        \n            express-rate-limit : ^7.3.1\n        \n            helmet : ^7.1.0\n        \n            multer : ^1.4.5-lts.1\n        \n            multer-s3 : ^3.0.1\n        \n            pg : ^8.12.0\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Environment   (src/.../app.config.ts)\n                        \n                        \n                            FileDriver   (src/.../file-config.type.ts)\n                        \n                        \n                            PaginationType   (src/.../pagination.dto.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/app.config.ts\n    \n        \n            \n                \n                    \n                        \n                        Environment\n                    \n                \n                        \n                            \n                                 Development\n                            \n                        \n                        \n                            \n                                Value : development\n                            \n                        \n                        \n                            \n                                 Production\n                            \n                        \n                        \n                            \n                                Value : production\n                            \n                        \n                        \n                            \n                                 Staging\n                            \n                        \n                        \n                            \n                                Value : staging\n                            \n                        \n                        \n                            \n                                 Test\n                            \n                        \n                        \n                            \n                                Value : testing\n                            \n                        \n            \n        \n\n    src/config/type/file-config.type.ts\n    \n        \n            \n                \n                    \n                        \n                        FileDriver\n                    \n                \n                    \n                        \n                            Enum representing the available file storage drivers.\n\n                        \n                    \n                        \n                            \n                                 LOCAL\n                            \n                        \n                        \n                            \n                                Value : local\n                            \n                        \n                        \n                            \n                                 S3\n                            \n                        \n                        \n                            \n                                Value : s3\n                            \n                        \n                        \n                            \n                                 S3_PRESIGNED\n                            \n                        \n                        \n                            \n                                Value : s3-presigned\n                            \n                        \n            \n        \n\n    src/utils/dto/pagination.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        PaginationType\n                    \n                \n                    \n                        \n                            Enum representing different pagination types.\n\n                        \n                    \n                        \n                            \n                                 NONE\n                            \n                        \n                        \n                            \n                                Value : no\n                            \n                        \n                        \n                            \n                                 INFINITY\n                            \n                        \n                        \n                            \n                                Value : infinity\n                            \n                        \n                        \n                            \n                                 PAGINATE\n                            \n                        \n                        \n                            \n                                Value : paginate\n                            \n                        \n                        \n                            \n                                 ALL\n                            \n                        \n                        \n                            \n                                Value : all\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            deepResolvePromises   (src/.../deep-resolver.ts)\n                        \n                        \n                            IsNumberStringOrNumber   (src/.../number.string.validator.ts)\n                        \n                        \n                            IsValidField   (src/.../field.validator.ts)\n                        \n                        \n                            PaginationResponse   (src/.../pagination-response.dto.ts)\n                        \n                        \n                            ToNumber   (src/.../transforms.decorator.ts)\n                        \n                        \n                            Unnamed function   (src/.../swagger.ts)\n                        \n                        \n                            validateConfig   (src/.../validate-config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                        Initializes and starts the NestJS application.\nConfigures global settings, middleware, and exception handling.\nSets up Swagger documentation if in development, staging, or testing environments.\n\n\n                \n            \n        \n    \n    src/utils/deep-resolver.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        deepResolvePromises\n                        \n                    \n                \n            \n            \n                \ndeepResolvePromises(input)\n                \n            \n\n\n\n\n            \n                \n                        Recursively resolves all nested promises in an object or array.\nThis function takes an input that can be a promise, an array, an object, or a primitive value,\nand recursively resolves any promises contained within. It supports nested structures and\npreserves the original structure of the input while resolving promises.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                input\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe input to process, which may include promises.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/core/decorators/number.string.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsNumberStringOrNumber\n                        \n                    \n                \n            \n            \n                \nIsNumberStringOrNumber(validationOptions?: ValidationOptions)\n                \n            \n\n\n\n\n            \n                \n                        Custom decorator that checks if a value is a number or a numeric string,\nand if it is greater than or equal to 1.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                validationOptions\n                                            \n                                                        ValidationOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptions used to pass to validation decorators.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/core/validators/field.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsValidField\n                        \n                    \n                \n            \n            \n                \nIsValidField(entity: any, validationOptions?: ValidationOptions)\n                \n            \n\n\n\n\n            \n                \n                        Custom decorator to validate if a field is a valid key of the provided entity class.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                entity\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe class constructor of the entity to check against.\n\n\n                                            \n                                        \n                                        \n                                                validationOptions\n                                            \n                                                        ValidationOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional validation options.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/utils/dto/pagination-response.dto.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PaginationResponse\n                        \n                    \n                \n            \n            \n                \nPaginationResponse(classReference: Type)\n                \n            \n\n\n\n\n            \n                \n                        Creates a pagination response DTO class with specified data type.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                classReference\n                                            \n                                                        Type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe class reference for the data type.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/core/decorators/transforms.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ToNumber\n                        \n                    \n                \n            \n            \n                \nToNumber()\n                \n            \n\n\n\n\n            \n                \n                        Decorator that converts a string number or number to an integer.\n\n\n                        \n                            Returns :         void\n\n                        \n                            \n                                \nA property decorator function.\n\n\n                            \n                \n            \n        \n    \n    src/swagger.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Unnamed function\n                        \n                    \n                \n            \n            \n                \nUnnamed function(app: INestApplication)\n                \n            \n\n\n\n\n            \n                \n                        Configures and sets up Swagger documentation for the NestJS application.\nThis function creates and configures Swagger documentation based on application configuration.\nIt sets up two separate Swagger documents: one for the main application modules and another\nfor common modules. It also configures various Swagger UI options.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                app\n                                            \n                                                        INestApplication\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe NestJS application instance.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/utils/validate-config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        validateConfig\n                        \n                    \n                \n            \n            \n                \nvalidateConfig(config: Record, envVariablesClass: ClassConstructor)\n                \n            \n\n\n\n\n            \n                \n                        Validates and transforms a configuration object based on a class schema.\nThis function uses class-transformer to transform a plain object into an instance of a class\nand class-validator to validate the instance. If validation fails, it throws an error with\ndetailed information about the validation errors.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                        Record\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe configuration object to be validated.\n\n\n                                            \n                                        \n                                        \n                                                envVariablesClass\n                                            \n                                                        ClassConstructor\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe class constructor used for transforming and validating the configuration.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nNestJS Starter Boilerplate\nIntroduction\nIntroducing the NestJS boilerplate - a great way to get started on your next Node.js project! It's built using the latest version of NestJS, which is a powerful and flexible framework for creating efficient and scalable server-side applications. The boilerplate includes TypeScript, PostgreSQL, and JWT authentication right out of the box, so you don't have to worry about setting those up yourself.\nOther awesome features include configuration support with Dotenv, Prisma for interacting with databases, Swagger for API documentation, and Docker Compose for container orchestration. Plus, the boilerplate also comes with pre-configured linting tools and secure HTTP headers with Helmet.\nGetting started is easy - just clone the repository, install the dependencies, and you're ready to start building your next great idea!\n🚀 Features\n\n📱 NestJS — latest version\n🎉 TypeScript - Type checking\n⚙️ Dotenv - Supports environment variables\n🗝 Authentication - JWT, RSA256\n🏬 Authorization - RBAC, CBAC\n🏪 Prisma - Database ORM\n🏪 PostgreSQL - Open-Source Relational Database\n🧠 Configuration - Single config for all\n📃 Swagger - API Documentation\n🐳 Docker Compose - Container Orchestration\n🔐 Helmet - secure HTTP headers\n📏 ESLint — Pluggable JavaScript linter\n💖 Prettier - Opinionated Code Formatter\n✨ Commitlint - Lint your conventional commits\n🕵️‍♂️ Code Scanning - Code scanning with CodeQL\n\nGetting Started\nPrerequisites\nEnsure you have the following installed:\n\nNode.js (20+)\nYarn or npm (yarn recomandation)\nDocker (if applicable)\n\nInstallation\n\nClone the repository:Example :git clone https://github.com/dharmesh--patel/nestjs-starter.git\ncd yourproject\n\nVisual Studio Code Extensions\nExample :- ESLint - `dbaeumer.vscode-eslint` - Dirk Baeumer\n\n- Prettier - Code formatter by `esbenp.prettier-vscode` - Esben Petersen\n \n- Prisma - `Prisma.prisma` - prisma.io\n\n- Dockfile - `foxundermoon.shell-format` - foxundermoon\n\n- markdown - `yzhang.markdown-all-in-one` - Yu Zhang\n\n- To open the command pallette, \n  you can use Command + Shift + P on Mac or Control + Shift + P on Windows. \n  In the command pallette search format, then choose Format Document.Installation\nExample :$ yarnRunning Server\nDevelopment / Staging / Production\nExample :# development\n$ yarn start\n\n# staging\n$ yarn staging\n\n# production\n$ yarn productionBuild\nExample :yarn buildTests\nExample :# unit tests\n$ yarn test\n\n# e2e tests\n$ yarn test:e2e\n\n# test coverage\n$ yarn test:covDatabase Migration Development\nExample :   # Change in database file (it will create migration file in prisma/migration)\n   $ yarn migrationDocker Container and Database Migration for Staging/Production\nExample :   # To run docker file run script (it will create docker container run update database)\n   $ bash ./start.sh staging/productionDocker Container down\nExample :   # To run docker file run script (it will create docker container run update database)\n   $ bash ./stop.sh staging/productionRunning all services on Docker\nExample :docker-compose up --buildRun only database and redis services on Docker\nExample :docker-compose up postgres redisSwagger Documentation\n\nSwagger documentation endpoint will be running at  /docs .\n\nK8s Deployment Local\nExample :# first start minikube\nminikube start\n\n# deployment\nkubectl apply -f k8s/\n\n# get endpoint of k8s cluster\nminikube service nestjs-starter-serviceCommit Message Guidelines\n[optional scope]: \n[optional body]\n[optional footer(s)]\nType: The type of change (e.g., feat, fix, docs, style, refactor, test, chore).\nScope: The scope of the change (e.g., core, api, config), which is optional.\nDescription: A short, imperative summary of the change.\nBody: Detailed explanation of the change, which is optional.\nFooter: Any footer notes, such as breaking changes or issues closed, which is optional.\ngit commit -m \"feat(api): add new endpoint for user registration\"\ngit commit -m \"fix(core): handle edge case in data processing\"\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nLicense\nNest is MIT licensed.\nAuthor\n🇮🇳 Dharmesh Patel \nGithub\nLinkedin\nInstagram\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2024 Dharmesh Patel\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ApiModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CountriesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CurrenciesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FilesLocalModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FilesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FilesS3Module\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FilesS3PresignedModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HelperModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HomeModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ApiModule\n\n\n\ncluster_ApiModule_imports\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_CountriesModule\n\n\n\ncluster_CountriesModule_exports\n\n\n\ncluster_CountriesModule_providers\n\n\n\ncluster_CurrenciesModule\n\n\n\ncluster_CurrenciesModule_providers\n\n\n\ncluster_FilesLocalModule\n\n\n\ncluster_FilesLocalModule_exports\n\n\n\ncluster_FilesLocalModule_providers\n\n\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_imports\n\n\n\ncluster_FilesModule_exports\n\n\n\ncluster_FilesModule_providers\n\n\n\ncluster_FilesS3Module\n\n\n\ncluster_FilesS3Module_exports\n\n\n\ncluster_FilesS3Module_providers\n\n\n\ncluster_FilesS3PresignedModule\n\n\n\ncluster_FilesS3PresignedModule_exports\n\n\n\ncluster_FilesS3PresignedModule_providers\n\n\n\ncluster_HelperModule\n\n\n\ncluster_HelperModule_exports\n\n\n\ncluster_HelperModule_providers\n\n\n\ncluster_HomeModule\n\n\n\ncluster_HomeModule_providers\n\n\n\n\nCountriesModule\n\nCountriesModule\n\n\n\nApiModule\n\nApiModule\n\nApiModule -->\n\nCountriesModule->ApiModule\n\n\n\n\n\nCountriesService \n\nCountriesService \n\nCountriesService  -->\n\nCountriesModule->CountriesService \n\n\n\n\n\nCurrenciesModule\n\nCurrenciesModule\n\nApiModule -->\n\nCurrenciesModule->ApiModule\n\n\n\n\n\nFilesModule\n\nFilesModule\n\nApiModule -->\n\nFilesModule->ApiModule\n\n\n\n\n\nFilesService \n\nFilesService \n\nFilesService  -->\n\nFilesModule->FilesService \n\n\n\n\n\nHomeModule\n\nHomeModule\n\nApiModule -->\n\nHomeModule->ApiModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nApiModule->AppModule\n\n\n\n\n\nHelperModule\n\nHelperModule\n\nAppModule -->\n\nHelperModule->AppModule\n\n\n\n\n\nPaginationService \n\nPaginationService \n\nPaginationService  -->\n\nHelperModule->PaginationService \n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nHelperModule->PrismaService \n\n\n\n\n\nUtilsService \n\nUtilsService \n\nUtilsService  -->\n\nHelperModule->UtilsService \n\n\n\n\n\nCountriesService\n\nCountriesService\n\nCountriesModule -->\n\nCountriesService->CountriesModule\n\n\n\n\n\nCurrenciesService\n\nCurrenciesService\n\nCurrenciesModule -->\n\nCurrenciesService->CurrenciesModule\n\n\n\n\n\nFilesLocalService \n\nFilesLocalService \n\n\n\nFilesLocalModule\n\nFilesLocalModule\n\nFilesLocalService  -->\n\nFilesLocalModule->FilesLocalService \n\n\n\n\n\nFilesLocalService\n\nFilesLocalService\n\nFilesLocalModule -->\n\nFilesLocalService->FilesLocalModule\n\n\n\n\n\nFilesS3Module\n\nFilesS3Module\n\nFilesModule -->\n\nFilesS3Module->FilesModule\n\n\n\n\n\nFilesS3Service \n\nFilesS3Service \n\nFilesS3Service  -->\n\nFilesS3Module->FilesS3Service \n\n\n\n\n\nFilesS3PresignedModule\n\nFilesS3PresignedModule\n\nFilesModule -->\n\nFilesS3PresignedModule->FilesModule\n\n\n\n\n\nFilesS3PresignedService \n\nFilesS3PresignedService \n\nFilesS3PresignedService  -->\n\nFilesS3PresignedModule->FilesS3PresignedService \n\n\n\n\n\nFilesService\n\nFilesService\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\nFilesS3Service\n\nFilesS3Service\n\nFilesS3Module -->\n\nFilesS3Service->FilesS3Module\n\n\n\n\n\nFilesS3PresignedService\n\nFilesS3PresignedService\n\nFilesS3PresignedModule -->\n\nFilesS3PresignedService->FilesS3PresignedModule\n\n\n\n\n\nPaginationService\n\nPaginationService\n\nHelperModule -->\n\nPaginationService->HelperModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nHelperModule -->\n\nPrismaService->HelperModule\n\n\n\n\n\nHomeService\n\nHomeService\n\nHomeModule -->\n\nHomeService->HomeModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        10 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    7 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    12 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    35 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    12 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.0.0\n        \n            Description : Nest TypeScript starter repository\n        \n            Homepage : https://github.com/dharmesh-r-patel/nestjs-starter.git#readme\n        \n            Bugs : https://github.com/dharmesh-r-patel/nestjs-starter.git/issues\n        \n            License : MIT\n        \n            Repository : git+https://github.com/dharmesh-r-patel/nestjs-starter.git\n        \n            Author : Dharmesh Patel\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AllConfigType   (src/.../config.type.ts)\n                        \n                        \n                            AppConfig   (src/.../app-config.type.ts)\n                        \n                        \n                            DatabaseConfig   (src/.../database-config.type.ts)\n                        \n                        \n                            DeepPartial   (src/.../deep-partial.type.ts)\n                        \n                        \n                            FileConfig   (src/.../file-config.type.ts)\n                        \n                        \n                            MaybeType   (src/.../maybe.type.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/type/config.type.ts\n    \n    \n        \n            \n                \n                    \n                    AllConfigType\n                \n            \n            \n                \n                    Aggregated configuration type for the entire application.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/config/type/app-config.type.ts\n    \n    \n        \n            \n                \n                    \n                    AppConfig\n                \n            \n            \n                \n                    Configuration settings for the application.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/config/type/database-config.type.ts\n    \n    \n        \n            \n                \n                    \n                    DatabaseConfig\n                \n            \n            \n                \n                    Configuration settings for database connectivity.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/utils/types/deep-partial.type.ts\n    \n    \n        \n            \n                \n                    \n                    DeepPartial\n                \n            \n            \n                \n                    A utility type that recursively makes all properties of a given type T optional.\nThis allows for partial objects to be deeply nested within the original type T.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/config/type/file-config.type.ts\n    \n    \n        \n            \n                \n                    \n                    FileConfig\n                \n            \n            \n                \n                    Configuration settings for file storage.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/utils/types/maybe.type.ts\n    \n    \n        \n            \n                \n                    \n                    MaybeType\n                \n            \n            \n                \n                    A utility type that represents a type T that may be either of type T or undefined.\nThis is useful for cases where a value may or may not be present.\n\n                \n            \n            \n                \n                        T | undefined\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
