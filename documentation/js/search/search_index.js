var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AllExceptionsFilter.html",[0,0.149,1,3.36]],["body/classes/AllExceptionsFilter.html",[0,0.226,1,5.953,2,1.07,3,0.183,4,0.167,5,0.121,6,6.57,7,4.38,8,0.5,9,4.392,10,4.341,11,3.295,12,4.365,13,2.764,14,5.124,15,3.905,16,5.124,17,0.37,18,1.107,19,3.533,20,6.757,21,1.65,22,1.808,23,3.968,24,0.936,25,5.004,26,2.981,27,3.902,28,1.418,29,0.012,30,0.971,31,0.5,32,1.142,33,2.19,34,3.171,35,5.639,36,5.004,37,4.13,38,4.122,39,4.984,40,5.004,41,4.13,42,2.403,43,4.818,44,2.325,45,5.102,46,4.392,47,4.13,48,2.804,49,2.541,50,3.376,51,1.038,52,2.748,53,0.526,54,4.13,55,2.514,56,0.917,57,3.212,58,2.514,59,0.183,60,1.616,61,3.968,62,5.631,63,5.004,64,4.38,65,1.66,66,3.212,67,3.212,68,3.212,69,3.416,70,2.486,71,3.968,72,3.661,73,3.661,74,3.661,75,3.212,76,3.661,77,1.363,78,3.968,79,2.001,80,3.416,81,2.15,82,5.004,83,4.38,84,3.416,85,1.869,86,3.968,87,0.009,88,0.009]],["title/modules/ApiModule.html",[89,0.729,90,2.893]],["body/modules/ApiModule.html",[0,0.274,3,0.184,4,0.169,5,0.183,8,0.455,9,5.142,11,3.49,29,0.012,44,2.339,47,4.155,53,0.599,56,0.926,57,3.242,59,0.184,85,2.814,87,0.009,88,0.009,89,1.437,90,5.862,91,3.227,92,2.17,93,2.538,94,2.538,95,2.252,96,2.999,97,2.538,98,4.421,99,4.421,100,5.439,101,5.439,102,5.439,103,5.439,104,3.253,105,2.538,106,2.17,107,5.051,108,6.473,109,6.473,110,5.511,111,4.155,112,3.73,113,3.121,114,3.187,115,5.665,116,4.419,117,5.133,118,5.665,119,6.473,120,3.121,121,2.613,122,5.83,123,3.928,124,5.665,125,4.736,126,5.051,127,5.051,128,5.051,129,5.051,130,5.051,131,5.051,132,1.825,133,4.835,134,2.34,135,2.538,136,4.006,137,3.448,138,4.421]],["title/controllers/AppController.html",[139,1.637,140,3.1]],["body/controllers/AppController.html",[0,0.222,3,0.256,4,0.111,5,0.139,8,0.444,13,1.43,17,0.246,19,3.154,21,1.247,22,1.203,24,0.64,26,1.543,27,1.673,29,0.012,30,0.503,44,1.757,46,3.92,47,3.121,49,2.514,51,1.31,53,0.518,56,0.61,59,0.122,60,1.105,65,0.712,70,3.013,77,1.83,79,1.332,81,3.112,85,2.829,87,0.007,88,0.007,89,0.573,95,2.561,112,2.802,113,2.014,114,1.945,120,1.605,121,1.595,132,1.203,139,2.595,140,5.299,141,1.38,142,2.914,143,1.595,144,6.582,145,6.136,146,2.951,147,1.757,148,2.769,149,4.255,150,2.67,151,4.202,152,4.202,153,3.978,154,3.045,155,4.621,156,2.467,157,6.315,158,6.717,159,1.365,160,3.329,161,3.329,162,5.006,163,5.527,164,4.862,165,5.069,166,5.527,167,2.023,168,6.717,169,3.31,170,2.551,171,3.44,172,3.64,173,4.862,174,3.329,175,7.573,176,4.788,177,1.105,178,2.64,179,4.862,180,2.021,181,1.026,182,4.862,183,6.717,184,3.329,185,2.64,186,3.329,187,2.273,188,4.255,189,3.329,190,2.137,191,3.329,192,2.914,193,1.919,194,1.747,195,3.329,196,1.38,197,1.879,198,3.329,199,2.64,200,2.64,201,3.329,202,3.686,203,1.816,204,5.026,205,2.951,206,3.856,207,3.557,208,3.329,209,2.64,210,3.329,211,0.948,212,3.329,213,3.329,214,2.436,215,1.605,216,3.329,217,2.436,218,3.329,219,3.329,220,4.862,221,3.329,222,3.329,223,3.329,224,0.88,225,3.329,226,3.329,227,3.329,228,3.329,229,3.329,230,3.329,231,3.329,232,3.329,233,4.862,234,4.255,235,3.329,236,4.255,237,3.329,238,7.573,239,3.329,240,7.425,241,7.425,242,7.425,243,6.315,244,3.329,245,5.743,246,5.743,247,5.743,248,5.743,249,5.743,250,5.743,251,5.743,252,3.686,253,7.243,254,4.862,255,2.137,256,3.329,257,3.329,258,4.862,259,3.329,260,4.862,261,3.329,262,2.021,263,6.315,264,6.315,265,3.329,266,4.862,267,3.329,268,4.862,269,3.329]],["title/modules/AppModule.html",[89,0.729,252,2.72]],["body/modules/AppModule.html",[0,0.275,3,0.186,4,0.17,5,0.174,8,0.458,29,0.012,44,2.731,47,4.18,53,0.631,56,0.934,59,0.186,65,1.09,87,0.009,88,0.009,89,1.374,90,5.453,91,2.973,92,2.191,93,2.563,94,2.563,95,2.274,96,3.017,97,2.563,104,3.272,105,2.563,106,2.191,114,2.605,115,5.7,117,5.165,123,3.952,132,1.843,137,3.481,140,5.25,141,2.698,144,5.165,151,3.731,152,4.765,153,3.94,154,3.14,185,5.165,187,3.481,196,2.698,252,5.435,270,4.463,271,4.463,272,4.848,273,4.463,274,5.165,275,5.7,276,3.417,277,2.516,278,3.952,279,4.18,280,5.165,281,4.044,282,2.459,283,6.512,284,4.765,285,6.512,286,5.099,287,5.099,288,5.099,289,4.044,290,4.18,291,4.463,292,5.165,293,5.099,294,3.952,295,4.463,296,5.165,297,5.099,298,5.099,299,5.099,300,5.25,301,4.044,302,5.099,303,5.099,304,1.672,305,5.099,306,5.099,307,5.099,308,5.099,309,5.099,310,5.099]],["title/classes/BadRequestExceptionFilter.html",[0,0.149,311,3.36]],["body/classes/BadRequestExceptionFilter.html",[0,0.224,2,0.858,3,0.147,4,0.134,5,0.097,8,0.483,10,3.784,11,2.572,12,3.96,13,2.385,15,3.496,16,4.689,17,0.296,18,0.955,19,3.048,20,6.56,21,1.423,22,1.449,23,3.181,24,0.904,26,2.572,27,3.624,28,1.403,29,0.012,30,0.961,31,0.483,32,1.13,33,1.961,34,2.838,35,5.048,37,3.563,38,3.772,39,4.629,41,3.563,42,2.073,43,4.409,44,2.006,45,4.402,46,3.789,47,3.563,48,2.378,49,2.326,50,2.913,51,1.32,52,2.203,53,0.576,55,2.016,56,0.735,57,2.575,58,2.016,59,0.147,60,1.561,61,3.181,65,1.73,66,2.575,67,2.575,68,2.575,69,2.739,71,3.181,72,2.935,75,3.563,77,1.871,80,3.789,85,2.073,87,0.008,88,0.008,113,1.662,120,1.934,177,0.911,202,4.086,206,6.417,311,5.447,312,6.312,313,3.511,314,2.913,315,5.551,316,5.551,317,4.012,318,4.012,319,5.551,320,7.647,321,4.012,322,2.789,323,3.563,324,4.096,325,3.914,326,6.869,327,2.385,328,5.551,329,4.012,330,3.511,331,1.449,332,2.435,333,2.435,334,5.571,335,3.511,336,2.228,337,4.012,338,4.012,339,4.012,340,4.012,341,3.511,342,4.012,343,4.012,344,4.012,345,5.551,346,4.012,347,4.012,348,4.012,349,2.203,350,3.181,351,3.511,352,3.511,353,4.012,354,1.859,355,2.435,356,4.012,357,4.012,358,4.012,359,3.563,360,7.794,361,4.402,362,5.447,363,3.511,364,5.447,365,4.012,366,4.858,367,5.551,368,4.402,369,3.511,370,2.575,371,3.511,372,3.511,373,3.511,374,3.511,375,3.511,376,3.511,377,4.012,378,3.511,379,3.511,380,4.012,381,4.012,382,4.012,383,2.3,384,4.012]],["title/injectables/CommaSeparated.html",[385,1.305,386,3.1]],["body/injectables/CommaSeparated.html",[0,0.261,3,0.159,4,0.146,5,0.106,8,0.467,15,3.906,17,0.322,21,1.507,24,0.774,28,1.295,29,0.012,30,1.074,31,0.413,32,1.043,51,1.648,53,0.434,56,0.799,59,0.26,60,1.687,65,1.521,81,3.055,85,2.657,87,0.008,88,0.008,156,2.524,207,4.299,211,1.387,304,2.333,314,3.487,324,4.293,331,2.57,383,2.754,385,2.047,386,5.204,387,2.02,388,3.458,389,5.271,390,1.128,391,4.909,392,6.225,393,6.225,394,3.906,395,5.204,396,5.143,397,3.574,398,5.143,399,7.187,400,4.36,401,2.723,402,6.957,403,5.068,404,5.143,405,4.36,406,3.83,407,5.271,408,2.647,409,5.143,410,5.271,411,4.506,412,5.271,413,3.928,414,5.817,415,6.498,416,3.227,417,3.386,418,2.953,419,3.386,420,2.35,421,4.66,422,4.66,423,4.66,424,5.143,425,3.816,426,3.816,427,3.816,428,3.816,429,3.816,430,3.844,431,4.744,432,3.566,433,3.83,434,2.976,435,2.976,436,3.816,437,2.798,438,3.19,439,3.816,440,2.191,441,3.816,442,3.816,443,3.816,444,2.646,445,5.143,446,2.646,447,3.816,448,2.02,449,3.816,450,3.816,451,3.816,452,3.816,453,3.816,454,3.816,455,3.816,456,3.458,457,2.798]],["title/classes/ConfigService.html",[0,0.149,458,2.129]],["body/classes/ConfigService.html",[0,0.233,2,0.688,3,0.117,4,0.107,5,0.078,17,0.238,19,4.122,21,1.215,22,2.034,24,0.912,28,1.241,29,0.012,30,0.938,31,0.436,32,1,38,1.766,51,1.167,53,0.585,59,0.173,65,1.328,79,1.896,87,0.006,88,0.006,154,1.551,197,1.243,211,1.568,224,1.488,284,3.468,290,2.065,294,1.952,300,2.353,304,1.555,331,1.162,390,1.127,411,2.877,413,2.829,416,1.766,417,1.854,418,1.616,419,1.854,420,1.287,458,2.829,459,2.551,460,4.74,461,4.74,462,4.74,463,5.242,464,4.927,465,3.217,466,4.149,467,3.217,468,2.175,469,4.149,470,3.217,471,4.149,472,3.217,473,3.217,474,3.217,475,3.217,476,3.217,477,1.854,478,3.468,479,3.193,480,3.089,481,2.353,482,4.464,483,1.952,484,1.854,485,3.043,486,2.815,487,3.236,488,2.815,489,3.236,490,2.815,491,3.236,492,2.815,493,3.236,494,2.815,495,3.236,496,2.815,497,2.815,498,2.196,499,2.815,500,3.236,501,2.815,502,3.236,503,2.815,504,3.236,505,2.815,506,2.815,507,1.854,508,2.065,509,2.382,510,3.468,511,2.196,512,2.353,513,2.551,514,3.759,515,2.551,516,2.551,517,2.551,518,4.149,519,2.551,520,2.551,521,4.545,522,4.545,523,4.926,524,2.551,525,2.551,526,2.551,527,2.551,528,2.815,529,4.149,530,3.043,531,2.815,532,4.149,533,1.952,534,2.815,535,2.815,536,4.927,537,1.952,538,2.815,539,2.815,540,1.688,541,2.815,542,2.815,543,2.815,544,2.815,545,2.551,546,2.418,547,2.815,548,2.815,549,2.815,550,1.952,551,2.815,552,2.815,553,4.149,554,2.815,555,4.149,556,2.815,557,3.236,558,2.815,559,2.551,560,2.815,561,2.551,562,2.815,563,2.815,564,2.815,565,2.815,566,2.551,567,2.815,568,2.815,569,2.815,570,2.815,571,3.043,572,2.815,573,2.353,574,2.551,575,2.551,576,2.353,577,2.815,578,2.353,579,2.815,580,2.815,581,2.196,582,2.815,583,2.815,584,2.815,585,2.551,586,2.815,587,2.551,588,2.815,589,2.551,590,2.815,591,2.551,592,2.815,593,2.551,594,2.815,595,2.551,596,2.815,597,2.551,598,2.815,599,2.551,600,2.815,601,2.551,602,2.815,603,2.815,604,2.815,605,2.815,606,2.815,607,2.815,608,2.815,609,2.815,610,2.815,611,2.353,612,2.815,613,2.551,614,2.815,615,2.551,616,2.815,617,2.551,618,2.815,619,2.551,620,2.815,621,2.551,622,2.815,623,2.815,624,2.551,625,2.815,626,2.551,627,2.815,628,2.551,629,2.815,630,2.551,631,2.815,632,2.815,633,2.551,634,2.815,635,2.551,636,2.815,637,2.551,638,2.815,639,2.551,640,2.815,641,2.551,642,2.815,643,2.551,644,2.815,645,2.815,646,2.551,647,2.815,648,2.551,649,2.815,650,2.551,651,2.815,652,2.815,653,2.551,654,2.815,655,2.551,656,2.815,657,2.551,658,2.815,659,2.551,660,2.815,661,2.551,662,2.815,663,2.196,664,2.815,665,1.854,666,2.815,667,1.854,668,2.815,669,2.353,670,2.815,671,2.353,672,2.815,673,2.353,674,2.551,675,2.551]],["title/controllers/CountriesController.html",[139,1.637,676,3.1]],["body/controllers/CountriesController.html",[0,0.212,3,0.11,4,0.101,5,0.131,8,0.476,11,2.096,17,0.223,21,1.16,24,0.398,28,1.196,29,0.012,30,0.819,31,0.493,32,0.536,42,1.69,49,1.532,50,2.374,51,0.938,53,0.624,55,3.027,56,1.104,59,0.22,60,0.686,65,1.16,87,0.006,88,0.006,89,0.52,113,1.875,114,1.81,121,1.484,132,1.091,134,3.345,139,2.789,141,1.252,147,1.635,148,2.904,156,2.909,159,0.848,162,2.904,167,1.641,171,3.345,172,2.608,180,3.656,181,1.855,203,2.25,211,1.175,322,1.518,327,1.944,336,2.376,383,1.252,390,0.821,394,2.485,413,2.273,546,1.298,676,5.401,677,2.644,678,1.635,679,5.584,680,4.261,681,4.407,682,2.017,683,4.72,684,2.644,685,3.42,686,3.021,687,3.021,688,3.021,689,3.31,690,3.089,691,3.471,692,5.926,693,3.126,694,2.991,695,5.272,696,6.318,697,2.21,698,2.062,699,3.471,700,2.608,701,4.962,702,5.272,703,2.644,704,6.023,705,2.904,706,3.021,707,6.023,708,5.272,709,3.021,710,2.644,711,3.96,712,3.126,713,3.021,714,5.424,715,5.424,716,5.424,717,6.451,718,5.424,719,4.747,720,4.14,721,4.747,722,3.482,723,4.524,724,4.524,725,3.265,726,4.524,727,1.671,728,3.625,729,4.524,730,1.748,731,5.272,732,4.524,733,3.96,734,4.524,735,3.96,736,4.524,737,3.96,738,3.969,739,4.524,740,3.021,741,3.31,742,3.482,743,3.021,744,3.021,745,2.181,746,3.089,747,2.21,748,2.374,749,2.21,750,4.524,751,2.062,752,3.021]],["title/modules/CountriesModule.html",[89,0.729,100,2.893]],["body/modules/CountriesModule.html",[0,0.203,3,0.211,4,0.193,5,0.184,8,0.495,29,0.012,53,0.561,56,1.058,59,0.211,87,0.01,88,0.01,89,1.359,91,2.393,92,2.481,93,2.902,94,2.902,95,2.575,96,3.518,97,3.815,100,5.851,104,3.537,105,2.902,106,2.481,114,2.815,121,2.308,132,2.087,134,3.261,141,3.274,143,2.308,147,2.543,676,5.927,678,2.543,679,5.15,701,5.559,702,5.055,753,5.055,754,5.055,755,5.055,756,5.776,757,6.16,758,6.16,759,2.72,760,4.518,761,4.805,762,4.518,763,5.776]],["title/injectables/CountriesService.html",[385,1.305,701,2.72]],["body/injectables/CountriesService.html",[0,0.129,3,0.04,4,0.036,5,0.064,8,0.224,11,2.511,13,0.834,17,0.494,21,0.498,22,0.95,24,0.255,28,0.897,29,0.012,30,0.667,31,0.136,32,0.345,42,0.725,49,0.657,51,0.402,53,0.532,56,0.672,59,0.134,60,0.247,65,1.763,77,0.529,87,0.003,88,0.003,89,0.187,114,0.776,121,0.636,132,0.393,133,1.246,134,2.511,156,1.575,167,0.529,171,2.307,172,1.118,202,2.612,203,1.37,211,1.423,224,1.566,236,2.795,255,0.698,304,0.357,322,2.619,327,0.834,336,1.215,349,2.976,354,2.675,383,2.159,385,1.605,387,0.504,390,1.006,394,1.066,401,1.885,408,1.081,420,0.776,430,3.272,431,0.66,433,1.118,437,2.354,440,0.975,448,0.899,456,1.539,509,1.605,546,1.372,678,0.701,679,4.614,680,1.178,681,1.42,683,2.336,685,2.745,689,1.42,690,1.325,691,1.84,692,3.561,693,2.113,694,1.686,698,1.794,699,1.515,700,1.515,701,3.345,703,2.3,705,0.524,712,1.118,719,1.699,721,1.699,722,1.246,725,0.936,727,0.984,728,0.936,730,0.75,733,4.127,735,4.127,737,4.127,748,2.612,751,4.226,761,1.325,764,0.952,765,1.325,766,1.941,767,1.018,768,1.325,769,1.605,770,0.952,771,3.402,772,3.163,773,1.087,774,1.699,775,1.087,776,1.066,777,1.768,778,0.834,779,1.42,780,1.42,781,1.066,782,3.182,783,2.336,784,1.325,785,3.561,786,1.941,787,1.539,788,1.941,789,1.699,790,1.699,791,1.087,792,2.084,793,1.539,794,0.698,795,2.336,796,1.676,797,1.087,798,3.561,799,1.087,800,0.952,801,1.087,802,1.087,803,1.087,804,1.087,805,1.087,806,1.087,807,1.087,808,4.437,809,0.862,810,4.298,811,1.962,812,3.941,813,5.186,814,6.503,815,4.607,816,3.479,817,3.193,818,4.069,819,4.715,820,4.979,821,4.069,822,4.948,823,3.193,824,3.193,825,4.127,826,3.501,827,4.358,828,3.193,829,3.667,830,3.193,831,3.193,832,3.193,833,3.193,834,3.193,835,1.699,836,1.941,837,3.193,838,3.402,839,3.227,840,4.715,841,1.923,842,2.977,843,1.699,844,3.739,845,1.699,846,4.529,847,5.104,848,5.056,849,0.952,850,0.862,851,1.087,852,3.193,853,2.683,854,0.66,855,0.952,856,1.595,857,1.539,858,1.087,859,1.087,860,1.087,861,1.087,862,1.087,863,1.087,864,1.087,865,1.087,866,1.087,867,2.628,868,1.42,869,1.941,870,1.941,871,1.941,872,1.941,873,1.941,874,1.941,875,5.212,876,3.667,877,5.925,878,3.667,879,1.941,880,1.087,881,3.864,882,1.087,883,4.127,884,2.628,885,1.087,886,5.053,887,1.087,888,2.628,889,4.445,890,3.561,891,2.795,892,4.069,893,2.3,894,2.628,895,2.628,896,2.628,897,2.628,898,2.628,899,2.628,900,2.628,901,2.628,902,3.827,903,3.501,904,2.499,905,4.699,906,3.209,907,3.501,908,4.906,909,4.133,910,1.699,911,1.923,912,2.05,913,4.358,914,1.941,915,2.628,916,1.699,917,0.952,918,1.539,919,1.539,920,2.533,921,1.84,922,4.127,923,1.941,924,0.952,925,0.952,926,1.699,927,0.952,928,1.699,929,1.699,930,1.539,931,1.699,932,1.699,933,1.699,934,1.699,935,1.699,936,1.941,937,0.657,938,1.325,939,1.699,940,1.699,941,1.699,942,1.539,943,1.699,944,1.699,945,0.796,946,3.193,947,2.05,948,2.05,949,1.941,950,1.372,951,1.941,952,1.941,953,1.941,954,1.699,955,1.941,956,1.087,957,0.952,958,1.087,959,1.087,960,1.087,961,1.087,962,1.087,963,1.087,964,1.087,965,2.084,966,2.683,967,1.941,968,2.3,969,3.501,970,2.628,971,4.127,972,1.087,973,1.087,974,1.087,975,1.699,976,1.84,977,1.087,978,1.941,979,1.087,980,0.562,981,1.699,982,1.539,983,0.742,984,0.796,985,1.087,986,1.087,987,1.087,988,1.941,989,1.087,990,1.087,991,1.941,992,1.941,993,1.941,994,1.087,995,1.087,996,1.087]],["title/classes/Country.html",[0,0.149,134,1.963]],["body/classes/Country.html",[0,0.249,2,0.66,3,0.113,4,0.103,5,0.133,8,0.323,17,0.228,18,1.048,24,1.043,29,0.012,30,1.185,31,0.606,33,2.238,44,1.662,53,0.228,59,0.113,77,1.497,87,0.006,88,0.006,89,0.531,118,4.026,120,2.218,121,1.509,132,1.116,134,3.938,135,3.652,137,3.14,159,2.225,167,2.375,170,3.196,177,1.045,181,0.951,194,2.414,215,2.218,224,1.453,276,2.414,354,3.367,390,1.194,408,2.205,440,2.311,448,2.131,678,1.662,682,2.051,727,1.876,767,2.414,789,6.189,790,4.811,812,4.827,825,4.811,826,5.608,827,6.798,835,4.811,904,2.051,980,1.977,981,4.811,997,2.703,998,2.526,999,3.14,1000,2.792,1001,3.648,1002,3.14,1003,4.6,1004,5.613,1005,4.83,1006,4.6,1007,3.14,1008,2.218,1009,2.651,1010,2.414,1011,6.09,1012,4.6,1013,7.072,1014,4.456,1015,3.14,1016,4.6,1017,5.526,1018,3.648,1019,4.026,1020,5.496,1021,5.496,1022,5.496,1023,5.496,1024,5.409,1025,5.496,1026,3.089,1027,4.6,1028,5.496,1029,3.089,1030,3.089,1031,4.6,1032,5.414,1033,4.359,1034,4.6,1035,6.09,1036,3.089,1037,5.496,1038,3.089,1039,4.6,1040,4.6,1041,5.496,1042,5.496,1043,5.496,1044,5.496,1045,5.496,1046,3.089,1047,3.14,1048,3.14,1049,3.089,1050,6.09,1051,6.09,1052,5.496,1053,3.089,1054,2.792,1055,5.496,1056,3.089,1057,5.496,1058,3.089,1059,6.09,1060,4.6,1061,3.089,1062,4.6,1063,3.089,1064,4.359,1065,3.089,1066,4.6,1067,5.496,1068,3.089,1069,3.089]],["title/classes/CreateDto.html",[0,0.149,1070,2.72]],["body/classes/CreateDto.html",[0,0.281,2,0.795,3,0.136,4,0.124,5,0.148,8,0.581,17,0.275,18,1.143,24,0.986,29,0.012,30,1.204,31,0.584,33,2.243,53,0.491,59,0.136,77,1.434,87,0.007,88,0.007,89,0.64,112,3.829,132,1.343,135,4.321,150,2.891,159,2.184,167,2.335,177,1.196,181,1.145,203,2.905,224,2.128,276,2.762,323,3.378,324,3.999,331,2.208,349,2.891,354,3.469,383,2.532,390,1.147,438,3.851,448,2.831,480,3.247,484,2.143,511,3.593,678,1.902,730,2.567,778,2.261,811,2.538,812,5.445,980,2.108,998,2.891,1007,3.593,1008,2.538,1032,5.774,1033,4.846,1054,4.033,1070,4.673,1071,3.254,1072,4.265,1073,6.644,1074,3.593,1075,5.263,1076,5.263,1077,3.194,1078,3.07,1079,4.174,1080,4.846,1081,4.846,1082,5.937,1083,4.846,1084,3.718,1085,5.348,1086,7.976,1087,3.718,1088,5.263,1089,7.281,1090,6.373,1091,5.263,1092,5.815,1093,5.815,1094,3.718,1095,5.263,1096,6.644,1097,3.718,1098,5.815,1099,5.348,1100,3.718,1101,3.718,1102,4.607,1103,3.718,1104,4.536,1105,3.718,1106,3.718,1107,5.815,1108,3.718,1109,3.843,1110,2.042,1111,7.648,1112,5.327,1113,3.521,1114,3.254,1115,3.718,1116,3.718,1117,3.718,1118,3.718,1119,5.263,1120,3.718,1121,3.718]],["title/controllers/CurrenciesController.html",[139,1.637,1122,3.1]],["body/controllers/CurrenciesController.html",[0,0.131,3,0.136,4,0.125,5,0.148,8,0.582,17,0.276,21,1.706,24,0.876,28,1.607,29,0.012,30,1.101,31,0.561,32,1.182,42,2.486,51,1.587,53,0.566,55,1.875,56,0.684,59,0.136,60,1.656,65,1.501,70,2.365,77,1.668,87,0.007,88,0.007,89,0.642,91,2.186,113,3.02,114,2.11,121,1.731,132,1.348,135,4.293,139,2.039,141,1.546,143,1.731,146,4.039,148,2.544,150,2.898,156,3.462,159,1.869,165,3.602,171,3.734,177,1.656,180,2.264,181,1.149,203,1.394,204,5.824,211,1.298,215,3.917,336,1.987,355,3.202,370,3.387,390,1.076,394,3.362,546,2.63,678,1.907,681,4.479,683,3.861,684,3.266,685,3.253,691,3.041,693,2.15,694,2.536,695,3.266,696,5.824,697,2.73,698,2.547,699,2.15,700,2.15,705,1.799,708,5.824,710,3.266,711,4.618,712,3.835,745,2.544,762,3.387,816,4.913,950,2.267,980,2.111,1002,3.602,1005,4.185,1070,4.913,1122,5.333,1123,3.266,1124,3.753,1125,4.789,1126,5.116,1127,5.276,1128,4.618,1129,4.507,1130,3.202,1131,4.618,1132,3.266,1133,3.731,1134,3.731,1135,5.824,1136,3.266,1137,3.731,1138,5.824,1139,3.731,1140,3.731,1141,6.146,1142,4.618,1143,4.618,1144,3.731,1145,3.731,1146,3.202,1147,3.266,1148,5.84,1149,3.731,1150,3.731,1151,3.731,1152,5.781,1153,5.276,1154,3.861,1155,3.861,1156,6.122,1157,3.266,1158,3.266,1159,3.266,1160,3.731,1161,3.731,1162,5.276,1163,3.731,1164,3.731,1165,3.731,1166,5.276,1167,2.73,1168,3.731,1169,3.731,1170,3.731,1171,3.731,1172,3.731,1173,3.731,1174,3.731,1175,3.731,1176,3.731,1177,3.266,1178,3.731,1179,3.731]],["title/modules/CurrenciesModule.html",[89,0.729,101,2.893]],["body/modules/CurrenciesModule.html",[0,0.205,3,0.213,4,0.194,5,0.185,8,0.497,29,0.012,53,0.586,56,1.067,59,0.213,87,0.01,88,0.01,89,1.363,91,2.413,92,2.502,93,2.926,94,2.926,95,2.596,96,3.762,97,2.926,101,5.83,104,3.554,105,2.926,106,2.502,114,2.829,121,2.599,122,5.175,132,2.104,133,4.54,135,3.554,139,2.733,141,2.931,197,2.733,336,2.275,678,2.556,757,6.191,758,6.191,760,4.54,816,4.54,1122,5.574,1129,5.299,1157,5.096,1180,5.096,1181,5.096,1182,5.823,1183,7.073,1184,5.823]],["title/injectables/CurrenciesService.html",[385,1.305,1129,2.72]],["body/injectables/CurrenciesService.html",[0,0.22,3,0.103,4,0.094,5,0.126,8,0.482,13,1.848,17,0.209,18,0.74,21,1.606,22,1.554,24,0.903,26,2.698,27,2.161,28,1.559,29,0.012,30,1.068,31,0.482,32,1.172,51,1.533,53,0.555,54,4.89,55,1.42,56,0.518,59,0.103,60,1.679,65,1.694,70,1.092,73,3.811,77,2.075,81,3.038,85,1.945,87,0.006,88,0.006,89,1.002,114,1.72,121,1.411,132,1.021,135,4.198,143,1.411,145,3.147,147,1.554,153,3.768,154,2.807,156,3.377,163,3.764,165,2.936,169,3.355,171,3.642,177,1.559,187,1.928,197,2.733,202,4.404,203,2.563,205,3.161,211,1.222,215,3.915,276,2.257,336,2.326,349,3.197,354,3.058,355,3.802,383,1.17,385,1.325,387,1.309,390,1.062,394,3.197,457,2.761,678,1.554,680,3.533,681,2.067,683,3.147,685,2.903,691,3.355,693,1.628,694,2.412,698,1.928,699,1.628,700,1.628,712,4.076,745,2.074,751,3.974,759,2.25,762,2.761,765,2.936,767,2.257,768,2.936,769,2.161,770,2.472,771,4.292,772,4.397,774,3.764,778,1.214,781,3.197,782,2.257,783,2.067,792,2.24,793,2.24,794,1.813,795,2.067,796,1.482,808,4.584,810,4.13,811,1.362,816,4.54,822,3.555,841,3.811,842,4.26,843,2.472,845,2.472,846,3.147,847,4.26,848,3.811,849,2.472,853,3.147,950,2.237,980,2.048,1002,2.936,1070,4.651,1072,2.761,1124,3.021,1125,4.485,1126,4.277,1128,3.764,1129,4.54,1132,3.764,1135,3.764,1136,3.764,1141,3.764,1142,3.764,1143,4.558,1146,2.61,1147,3.764,1152,4.617,1158,2.472,1159,2.472,1167,3.147,1185,2.472,1186,3.411,1187,2.61,1188,3.764,1189,4.301,1190,1.993,1191,3.764,1192,4.301,1193,4.301,1194,3.764,1195,2.936,1196,3.411,1197,2.936,1198,2.825,1199,2.825,1200,4.301,1201,2.825,1202,5.096,1203,4.301,1204,2.825,1205,5.777,1206,5.483,1207,2.825,1208,3.764,1209,2.825,1210,2.825,1211,5.208,1212,5.822,1213,5.208,1214,5.208,1215,4.558,1216,2.24,1217,2.472,1218,2.825,1219,2.825,1220,4.54,1221,2.825,1222,3.411,1223,4.301,1224,2.825,1225,2.825,1226,2.825,1227,5.208,1228,5.208,1229,5.208,1230,4.301,1231,2.825,1232,2.472,1233,2.825,1234,2.825,1235,2.825,1236,2.825,1237,2.825,1238,2.825,1239,3.764,1240,4.558,1241,2.825,1242,2.825,1243,2.472,1244,2.472,1245,2.825,1246,2.825,1247,2.825,1248,2.825,1249,2.825,1250,2.825]],["title/classes/Currency.html",[0,0.149,135,2.129]],["body/classes/Currency.html",[0,0.271,2,0.823,3,0.141,4,0.129,5,0.151,8,0.584,17,0.284,18,1.267,24,1.016,29,0.012,30,1.249,31,0.581,32,0.958,33,2.268,53,0.399,59,0.141,87,0.007,88,0.007,89,0.662,132,1.391,135,4.372,150,3.705,159,2.276,167,2.342,177,1.533,181,1.185,193,3.108,194,2.83,215,3.002,224,2.099,276,2.83,304,1.769,354,3.633,383,2.58,390,1.158,446,4.821,448,2.885,678,1.949,767,2.83,812,5.645,980,1.954,998,2.962,999,4.606,1000,3.273,1001,4.277,1015,3.682,1018,4.277,1032,6.299,1033,5.633,1047,3.682,1048,3.682,1074,3.682,1078,1.934,1080,4.937,1081,4.937,1082,6.218,1083,4.937,1085,6.217,1092,6.444,1093,6.444,1098,6.444,1099,6.217,1102,4.72,1107,6.444,1109,3.877,1251,3.369,1252,5.393,1253,5.393,1254,5.393,1255,6.617,1256,3.849,1257,3.849,1258,3.849,1259,3.849,1260,5.393,1261,4.72,1262,5.393,1263,3.849,1264,3.849,1265,3.849,1266,3.849,1267,3.849,1268,4.72,1269,3.369]],["title/classes/DynamicQueryBuilder.html",[0,0.149,1270,2.893]],["body/classes/DynamicQueryBuilder.html",[0,0.199,2,0.57,3,0.097,4,0.089,5,0.065,8,0.429,17,0.497,21,1.055,24,0.744,28,1.245,29,0.012,30,1.209,31,0.585,32,1.194,33,1.548,51,1.44,53,0.197,59,0.206,60,1.283,65,1.775,70,1.941,87,0.006,88,0.006,177,1.829,211,1.466,224,0.705,255,3.225,332,1.618,333,1.618,336,2.509,390,1.091,394,1.464,408,2.694,446,3.428,468,2.905,680,1.618,727,1.74,759,1.03,768,2.809,769,2.525,779,3.01,780,5.08,781,4.594,782,3.528,796,4.246,811,3.11,815,1.618,838,1.618,868,4.133,904,3.096,911,3.01,921,4.268,950,1.768,976,3.718,1125,4.621,1126,4.968,1197,1.82,1270,4.59,1271,4.841,1272,4.466,1273,1.711,1274,3.601,1275,4.114,1276,4.114,1277,4.114,1278,4.114,1279,3.601,1280,5.668,1281,2.666,1282,3.348,1283,4.825,1284,3.601,1285,2.666,1286,4.573,1287,3.601,1288,2.666,1289,3.601,1290,2.666,1291,1.191,1292,3.568,1293,6.369,1294,6.369,1295,1.951,1296,2.259,1297,2.333,1298,5.08,1299,4.841,1300,4.397,1301,4.48,1302,1.951,1303,4.397,1304,2.333,1305,4.397,1306,2.114,1307,2.333,1308,2.114,1309,2.114,1310,2.333,1311,2.114,1312,5.884,1313,4.397,1314,3.049,1315,4.397,1316,2.114,1317,2.333,1318,4.397,1319,3.601,1320,4.48,1321,3.601,1322,3.601,1323,3.601,1324,3.601,1325,5.646,1326,4.397,1327,4.944,1328,4.944,1329,3.601,1330,3.601,1331,2.333,1332,1.951,1333,2.333,1334,2.333,1335,2.333,1336,2.333,1337,2.333,1338,2.333,1339,2.333,1340,4.397,1341,2.333,1342,3.263,1343,2.333]],["title/classes/EnvVarAppConfigValidator.html",[0,0.149,510,3.1]],["body/classes/EnvVarAppConfigValidator.html",[0,0.235,2,0.7,3,0.12,4,0.109,5,0.079,8,0.23,17,0.242,18,0.826,19,3.123,22,1.183,24,0.825,29,0.012,30,0.494,31,0.469,38,1.798,53,0.587,59,0.175,65,1.339,79,1.921,87,0.007,88,0.007,154,1.578,159,1.759,197,1.855,211,1.573,224,1.503,284,3.513,290,2.101,294,1.987,300,2.395,304,1.575,331,1.183,390,1.107,411,1.987,413,2.858,416,1.798,417,1.887,418,1.645,419,1.887,420,1.309,458,2.413,459,2.596,463,4.881,464,2.865,466,2.865,469,2.865,471,2.865,477,1.887,478,3.513,479,3.216,480,3.109,481,2.395,482,4.51,483,1.987,484,1.887,485,3.082,486,2.865,487,3.278,488,2.865,489,3.278,490,2.865,491,3.278,492,2.865,493,3.278,494,2.865,495,3.278,496,2.865,497,2.865,498,2.235,499,2.865,500,3.278,501,2.865,502,3.278,503,2.865,504,3.278,505,2.865,506,2.865,507,1.887,508,2.101,509,2.858,510,4.161,511,2.235,512,2.395,513,4.51,514,3.808,515,4.51,516,4.51,517,4.51,518,4.203,519,2.596,520,2.596,521,4.583,522,4.583,523,4.968,524,2.596,525,2.596,526,2.596,527,2.596,528,2.865,529,4.203,530,3.082,531,2.865,532,4.203,533,1.987,534,2.865,535,2.865,536,4.977,537,1.987,538,2.865,539,2.865,540,1.718,541,2.865,542,2.865,543,2.865,544,2.865,545,2.596,546,2.443,547,2.865,548,2.865,549,2.865,550,1.987,551,2.865,552,2.865,553,4.203,554,2.865,555,4.203,556,2.865,557,3.278,558,2.865,559,2.596,560,2.865,561,2.596,562,2.865,563,2.865,564,2.865,565,2.865,566,2.596,567,2.865,568,2.865,569,2.865,570,2.865,571,3.082,572,2.865,573,2.395,574,2.596,575,2.596,576,2.395,577,2.865,578,2.395,579,2.865,580,2.865,581,2.235,582,2.865,583,2.865,584,2.865,585,2.596,586,2.865,587,2.596,588,2.865,589,2.596,590,2.865,591,2.596,592,2.865,593,2.596,594,2.865,595,2.596,596,2.865,597,2.596,598,2.865,599,2.596,600,2.865,601,2.596,602,2.865,603,2.865,604,2.865,605,2.865,606,2.865,607,2.865,608,2.865,609,2.865,610,2.865,611,2.395,612,2.865,613,2.596,614,2.865,615,2.596,616,2.865,617,2.596,618,2.865,619,2.596,620,2.865,621,2.596,622,2.865,623,2.865,624,2.596,625,2.865,626,2.596,627,2.865,628,2.596,629,2.865,630,2.596,631,2.865,632,2.865,633,2.596,634,2.865,635,2.596,636,2.865,637,2.596,638,2.865,639,2.596,640,2.865,641,2.596,642,2.865,643,2.596,644,2.865,645,2.865,646,2.596,647,2.865,648,2.596,649,2.865,650,2.596,651,2.865,652,2.865,653,2.596,654,2.865,655,2.596,656,2.865,657,2.596,658,2.865,659,2.596,660,2.865,661,2.596,662,2.865,663,2.235,664,2.865,665,1.887,666,2.865,667,1.887,668,2.865,669,2.395,670,2.865,671,2.395,672,2.865,673,2.395,674,2.596,675,2.596,1344,2.395,1345,3.273,1346,2.865,1347,3.273,1348,4.203,1349,4.203,1350,3.273,1351,3.273]],["title/classes/EnvironmentVariablesValidator.html",[0,0.149,1352,2.327]],["body/classes/EnvironmentVariablesValidator.html",[0,0.278,2,0.977,3,0.167,4,0.153,5,0.111,8,0.478,17,0.338,18,1.043,24,1.07,29,0.012,30,0.69,31,0.571,44,2.191,51,1.258,53,0.536,59,0.249,87,0.008,88,0.008,120,2.203,159,2.325,177,1.038,190,2.933,196,1.893,211,0.891,224,1.603,277,2.801,278,4.705,279,4.368,282,2.203,290,4.652,301,3.624,324,2.51,331,2.459,390,1.148,397,3.047,401,2.81,406,2.634,413,3.047,463,3.344,477,2.634,478,4.437,479,3.959,480,3.457,482,5.397,483,2.774,484,2.634,507,2.634,508,2.933,509,2.296,511,3.12,512,3.344,513,5.397,514,4.809,515,5.397,516,5.397,517,5.397,530,3.892,533,3.68,550,4.13,557,3.12,571,2.933,573,3.344,574,3.624,575,3.624,576,3.344,578,3.344,581,3.12,727,1.408,730,2.343,904,2.038,1190,3.153,1344,5.519,1346,4,1348,5.307,1349,5.307,1352,4.142,1353,3.624,1354,6.805,1355,6.805,1356,6.805,1357,6.805,1358,5.956,1359,4.57,1360,4.57,1361,4.57,1362,4.57,1363,4.57,1364,4.57,1365,4.57,1366,4.57,1367,4,1368,4.57,1369,3.344,1370,4,1371,2.933,1372,2.933,1373,3.12,1374,3.344,1375,4,1376,3.12,1377,3.344,1378,2.038,1379,4.57,1380,4.57,1381,3.344,1382,4.57,1383,4.57,1384,4,1385,4.57,1386,4,1387,4.57,1388,4.57,1389,4.57,1390,4.57,1391,4.57,1392,4.57,1393,4.57,1394,4.57,1395,4.57]],["title/classes/EnvironmentVariablesValidator-1.html",[0,0.125,727,1.093,1352,1.949]],["body/classes/EnvironmentVariablesValidator-1.html",[0,0.256,2,0.722,3,0.123,4,0.113,5,0.164,8,0.237,17,0.25,18,0.845,19,1.854,24,1.051,29,0.012,30,0.874,31,0.595,38,3.18,44,1.775,51,1.019,53,0.47,59,0.211,79,2.819,87,0.007,88,0.007,154,3.813,155,4.652,159,2.277,177,0.767,196,1.399,211,0.659,214,3.594,224,1.97,277,2.456,278,3.858,279,3.716,280,3.896,282,1.628,292,5.042,304,1.899,324,1.854,331,2.092,383,2.035,390,1.148,397,2.468,401,2.276,406,1.946,411,4.612,468,2.237,478,4.236,479,3.594,480,3.56,481,2.471,483,2.049,484,1.946,507,1.946,508,2.167,509,1.697,511,2.305,512,2.471,521,5.157,557,3.952,559,2.678,561,4.591,566,4.591,571,2.167,730,2.237,778,3.398,854,2.981,904,2.19,1190,2.683,1292,3.699,1344,4.236,1352,4.527,1369,2.471,1371,2.167,1376,2.305,1377,2.471,1378,1.506,1396,2.956,1397,5.79,1398,5.79,1399,5.79,1400,5.79,1401,5.79,1402,5.79,1403,7.984,1404,5.067,1405,5.79,1406,5.067,1407,5.067,1408,5.067,1409,5.067,1410,3.377,1411,7.72,1412,5.79,1413,6.357,1414,3.377,1415,3.377,1416,5.79,1417,3.377,1418,6.169,1419,4.912,1420,4.912,1421,4.912,1422,3.377,1423,4.912,1424,3.377,1425,3.514,1426,6.169,1427,3.377,1428,3.377,1429,3.18,1430,4.912,1431,4.912,1432,7.045,1433,3.337,1434,3.377,1435,3.377,1436,3.377,1437,3.153,1438,3.377,1439,3.377,1440,3.377,1441,3.377,1442,4.299,1443,4.912,1444,3.377,1445,5.564,1446,3.377,1447,7.049,1448,2.678,1449,3.377,1450,3.377,1451,3.377,1452,3.377,1453,3.377,1454,3.377,1455,3.377,1456,3.377,1457,3.377,1458,3.377,1459,3.377,1460,3.377,1461,3.377,1462,4.299,1463,3.377,1464,3.377,1465,3.377,1466,4.912,1467,3.377,1468,3.377,1469,3.377,1470,3.377,1471,3.377,1472,3.377,1473,3.377,1474,3.377]],["title/classes/EnvironmentVariablesValidator-2.html",[0,0.125,448,1.644,1352,1.949]],["body/classes/EnvironmentVariablesValidator-2.html",[0,0.253,2,0.848,3,0.145,4,0.132,5,0.201,8,0.279,17,0.293,18,0.947,24,0.979,29,0.012,30,0.832,31,0.572,51,1.142,53,0.505,59,0.231,87,0.007,88,0.007,121,1.806,159,2.088,177,0.901,196,1.644,211,0.774,215,2.656,224,1.672,277,2.872,278,4.149,279,4.061,282,1.913,294,4.359,324,2.178,331,1.433,390,1.111,397,2.768,401,3.167,406,2.286,446,3.343,468,2.641,477,2.286,479,3.051,480,3.564,481,2.902,485,4.771,507,2.286,508,2.546,509,1.993,519,3.146,520,5.018,521,5.002,522,5.002,523,5.421,524,5.018,525,5.018,526,5.018,527,5.018,540,3.9,546,2.366,571,2.546,611,4.03,663,5.512,665,2.286,667,2.286,669,2.902,671,2.902,673,4.03,674,4.368,675,3.146,730,2.128,745,3.748,776,3.025,850,3.146,904,2.456,1190,3.657,1292,3.444,1344,2.902,1352,4.434,1369,4.03,1371,2.546,1376,2.708,1377,2.902,1378,1.769,1426,5.983,1433,2.286,1437,3.535,1448,3.146,1475,3.472,1476,4.194,1477,6.327,1478,3.967,1479,5.421,1480,4.279,1481,4.48,1482,3.967,1483,3.535,1484,3.967,1485,3.76,1486,3.967,1487,3.967,1488,3.967,1489,4.368,1490,3.174,1491,4.821,1492,3.967,1493,3.535,1494,4.821,1495,2.89,1496,4.821,1497,3.146,1498,3.967,1499,6.327,1500,4.368,1501,3.967,1502,3.967,1503,3.967,1504,3.967,1505,3.967,1506,5.508,1507,5.508]],["title/classes/EnvironmentVariablesValidator-3.html",[0,0.125,1054,2.153,1352,1.949]],["body/classes/EnvironmentVariablesValidator-3.html",[0,0.276,2,0.943,3,0.216,4,0.147,5,0.107,8,0.31,17,0.326,18,1.018,24,1.083,29,0.012,31,0.578,44,1.593,46,3.01,51,1.228,53,0.528,59,0.244,65,1.266,85,1.647,87,0.008,88,0.008,120,2.126,159,2.342,176,3.01,177,1.002,196,1.827,211,1.155,277,2.761,278,4.657,279,4.29,282,2.126,296,5.666,301,3.497,304,1.446,324,2.422,331,2.415,390,1.137,397,2.975,401,2.743,406,2.541,408,2.005,411,4.951,413,3.745,463,3.226,468,1.704,477,2.541,479,3.996,480,3.496,507,2.541,508,2.83,509,2.216,530,3.8,533,3.593,545,3.497,550,4.057,571,2.83,904,1.966,1190,3.097,1352,4.093,1358,5.85,1367,3.859,1369,3.226,1371,2.83,1372,2.83,1373,3.01,1374,3.226,1375,3.859,1376,3.01,1377,3.226,1378,1.966,1381,3.226,1445,6.523,1508,3.497,1509,6.684,1510,6.684,1511,6.684,1512,6.684,1513,6.684,1514,6.684,1515,6.684,1516,6.684,1517,6.684,1518,6.684,1519,7.674,1520,4.409,1521,7.145,1522,4.409,1523,4.409,1524,4.409,1525,4.409,1526,4.409,1527,4.409,1528,4.409,1529,4.409,1530,4.409,1531,4.409,1532,4.409,1533,3.859,1534,5.921,1535,4.409,1536,4.409,1537,4.409,1538,4.409,1539,4.409,1540,4.409,1541,4.409,1542,4.409,1543,4.409,1544,4.409,1545,4.409,1546,4.409,1547,4.409,1548,4.409,1549,4.409,1550,4.409,1551,4.409,1552,4.409,1553,4.409,1554,4.409,1555,4.409,1556,4.409,1557,4.409]],["title/classes/FileNotImageException.html",[0,0.149,1558,3.36]],["body/classes/FileNotImageException.html",[0,0.26,2,1.166,3,0.199,4,0.182,5,0.188,8,0.52,10,3.882,22,1.97,24,0.718,26,3.147,27,3.413,28,1.202,29,0.012,30,0.823,31,0.383,32,1.415,43,3.499,53,0.547,56,0.999,59,0.199,60,1.543,77,1.85,81,3.54,85,3.176,87,0.009,88,0.009,147,2.454,167,2.016,196,2.259,206,6.319,314,4.064,354,3.147,390,1.135,420,2.717,937,1.846,1220,3.499,1495,3.564,1558,6.443,1559,5.945,1560,4.771,1561,6.792,1562,7.399,1563,5.451,1564,6.792,1565,5.051,1566,6.792,1567,5.451,1568,4.97,1569,2.739,1570,3.142,1571,5.451,1572,5.451,1573,5.451,1574,5.451]],["title/classes/FileResponseDto.html",[0,0.149,1575,2.223]],["body/classes/FileResponseDto.html",[0,0.267,2,1.102,3,0.188,4,0.172,5,0.21,8,0.461,17,0.381,18,1.128,24,0.863,29,0.012,31,0.563,33,2.338,34,3.384,49,2.57,53,0.485,59,0.188,79,3.036,84,4.476,87,0.009,88,0.009,159,1.842,167,2.068,181,1.588,215,3.162,390,1.068,432,3.98,682,2.924,759,2.933,767,3.982,998,3.601,999,4.476,1008,3.162,1017,4.923,1024,4.476,1077,3.98,1429,4.399,1476,3.441,1481,3.779,1575,4.112,1576,4.629,1577,6.311,1578,3.309,1579,4.861,1580,6.557,1581,6.557,1582,6.311,1583,4.399,1584,4.512,1585,5.739,1586,6.557,1587,6.557,1588,5.155,1589,3.779,1590,6.557,1591,6.557,1592,6.557,1593,6.557,1594,6.557,1595,6.557,1596,3.309]],["title/classes/FileResponseDto-1.html",[0,0.125,727,1.093,1575,1.862]],["body/classes/FileResponseDto-1.html",[0,0.203,2,1.237,3,0.211,4,0.193,5,0.204,8,0.495,17,0.427,18,1.212,24,0.761,29,0.012,31,0.534,49,2.385,53,0.521,59,0.211,79,2.817,87,0.01,88,0.01,159,1.624,166,6.165,167,1.919,170,3.696,177,1.601,181,1.781,215,3.396,998,3.868,1008,2.789,1017,4.809,1024,3.948,1177,6.165,1570,4.06,1575,4.252,1578,3.712,1583,4.526,1584,5.062,1596,3.712,1597,6.165,1598,5.586,1599,5.586,1600,5.586,1601,5.586,1602,5.586,1603,5.586,1604,6.165,1605,6.165]],["title/classes/FileResponseDto-2.html",[0,0.125,448,1.644,1575,1.862]],["body/classes/FileResponseDto-2.html",[0,0.188,2,1.145,3,0.196,4,0.179,5,0.206,8,0.516,17,0.396,18,1.263,24,0.705,29,0.012,31,0.516,33,2.069,34,3.534,47,3.437,49,2.274,53,0.496,59,0.196,79,3.078,87,0.009,88,0.009,120,3.71,159,1.887,167,1.83,170,2.81,177,1.526,181,1.65,193,3.871,194,3.525,215,3.239,432,4.077,682,3.273,767,2.81,980,1.945,998,4.031,1007,4.586,1008,3.822,1009,3.871,1010,2.81,1015,5.01,1017,5.253,1024,3.656,1048,3.656,1130,4.077,1314,4.077,1570,4.23,1575,3.851,1578,3.437,1583,4.508,1585,4.687,1596,3.437,1599,5.327,1600,5.327,1601,5.327,1602,5.327,1603,5.327,1606,5.879,1607,6.717,1608,5.327,1609,5.879,1610,6.717,1611,5.355,1612,5.879]],["title/classes/FileType.html",[0,0.149,1583,2.327]],["body/classes/FileType.html",[0,0.283,2,0.923,3,0.158,4,0.144,5,0.208,8,0.41,17,0.319,18,1.004,24,0.768,29,0.012,31,0.536,33,1.797,34,3.158,48,1.612,53,0.594,59,0.158,65,1.248,77,1.59,79,3.214,87,0.008,88,0.008,89,0.742,120,2.814,132,1.559,147,2.109,150,3.205,159,1.989,167,2.16,181,2.037,194,3.062,211,1.289,215,3.188,277,2.737,290,4.244,291,3.777,294,4.813,295,3.777,304,1.914,331,1.559,390,1.108,408,2.398,468,1.668,485,2.77,540,3.062,663,5.206,665,2.487,667,2.487,678,2.109,767,3.062,777,3.415,998,3.205,1009,3.363,1017,3.984,1024,2.946,1047,4.835,1048,4.835,1078,3.322,1079,4.628,1109,2.932,1110,3.205,1190,2.704,1255,3.777,1269,5.107,1370,3.777,1371,3.746,1429,4.188,1480,3.559,1481,3.363,1483,2.77,1485,2.946,1490,3.363,1497,3.423,1500,3.423,1583,4.188,1599,5.243,1600,5.243,1601,5.243,1602,5.243,1603,4.628,1612,5.107,1613,3.777,1614,7.083,1615,4.628,1616,4.316,1617,4.316,1618,4.316,1619,4.316,1620,5.107,1621,5.107,1622,5.107,1623,5.107,1624,5.107,1625,5.836,1626,4.27,1627,5.107,1628,4.27,1629,2.946,1630,3.777,1631,3.423,1632,3.423,1633,5.107,1634,5.107,1635,4.316,1636,4.316,1637,4.316,1638,4.316,1639,3.158,1640,4.316,1641,4.316,1642,4.628,1643,4.316,1644,4.316,1645,3.423,1646,3.777]],["title/classes/FileUploadDto.html",[0,0.149,1647,2.893]],["body/classes/FileUploadDto.html",[0,0.281,2,1.169,3,0.2,4,0.182,5,0.2,8,0.478,17,0.404,18,1.333,24,0.896,29,0.012,30,1.17,31,0.545,33,2.095,53,0.503,59,0.2,87,0.009,88,0.009,159,1.911,167,2.215,177,1.546,181,1.683,224,1.958,276,3.57,331,1.975,390,1.01,397,3.418,480,3.033,678,2.458,745,3.28,759,2.629,980,2.245,1007,4.644,1008,3.28,1109,3.722,1113,3.921,1493,4.975,1496,5.954,1570,3.921,1576,4.754,1579,4.129,1589,3.921,1608,5.395,1647,5.443,1648,4.783,1649,3.921,1650,6.803,1651,6.803,1652,5.42,1653,5.874,1654,5.395,1655,5.465,1656,5.465,1657,6.483,1658,5.465,1659,5.465,1660,7.407]],["title/controllers/FilesLocalController.html",[139,1.637,1661,3.1]],["body/controllers/FilesLocalController.html",[0,0.159,3,0.165,4,0.151,5,0.208,8,0.507,17,0.334,18,0.777,21,1.543,24,0.792,28,1.326,29,0.012,30,0.908,31,0.507,32,1.068,49,2.746,51,1.496,53,0.6,54,3.862,56,0.828,58,2.27,59,0.165,60,1.537,79,3.091,85,2.247,87,0.008,88,0.008,114,2.406,121,1.973,139,2.614,141,1.871,143,1.973,146,3.651,147,2.174,156,2.906,159,1.69,162,3.862,170,3.157,171,2.788,177,1.026,180,2.741,181,1.391,203,1.687,205,3.651,211,1.173,274,3.582,355,2.741,390,0.616,432,2.741,699,2.603,705,2.178,759,2.325,980,1.742,1154,4.402,1155,4.402,1215,5.266,1282,2.901,1425,2.741,1476,4.139,1490,4.618,1495,3.157,1570,3.468,1575,3.786,1579,4.106,1589,3.468,1649,3.468,1652,3.305,1661,5.497,1662,3.953,1663,4.771,1664,5.365,1665,4.771,1666,4.517,1667,4.517,1668,4.517,1669,4.771,1670,6.017,1671,6.017,1672,3.582,1673,5.921,1674,3.582,1675,4.517,1676,3.953,1677,3.953,1678,4.517,1679,3.953,1680,5.266,1681,3.953,1682,3.083,1683,5.266,1684,3.953,1685,6.017,1686,6.017,1687,3.305,1688,5.365,1689,5.266,1690,5.921,1691,5.266,1692,4.402,1693,3.582,1694,3.582,1695,3.582,1696,3.862,1697,2.741,1698,3.582,1699,2.603,1700,4.517,1701,3.953,1702,3.953,1703,3.953,1704,3.953,1705,3.953,1706,4.517,1707,4.517,1708,3.582,1709,3.953,1710,3.582,1711,4.517,1712,4.517,1713,4.517]],["title/modules/FilesLocalModule.html",[89,0.729,1714,2.893]],["body/modules/FilesLocalModule.html",[0,0.189,3,0.196,4,0.179,5,0.206,8,0.472,13,3.308,29,0.012,33,1.652,53,0.543,56,0.983,59,0.196,87,0.009,88,0.009,89,1.324,91,3.043,92,2.304,93,2.695,94,2.695,95,2.391,96,3.749,97,3.69,104,3.378,105,2.695,106,2.304,114,2.689,116,4.589,121,2.525,133,4.713,137,3.661,141,3.043,143,2.205,146,3.254,148,2.585,197,2.072,349,2.945,394,4.033,759,3.172,760,4.315,765,3.661,937,1.816,1010,2.814,1187,3.254,1190,3.115,1476,4.04,1490,4.663,1495,3.527,1589,3.09,1649,3.09,1661,5.373,1696,5.494,1697,3.254,1714,5.758,1715,4.693,1716,4.693,1717,4.693,1718,5.362,1719,5.884,1720,6.722,1721,4.252,1722,4.252,1723,5.362,1724,4.693,1725,5.362,1726,3.442,1727,4.693,1728,5.362]],["title/injectables/FilesLocalService.html",[385,1.305,1696,2.72]],["body/injectables/FilesLocalService.html",[0,0.176,3,0.183,4,0.167,5,0.211,8,0.499,17,0.369,21,1.648,22,1.806,24,0.846,28,1.417,29,0.012,30,0.971,31,0.452,32,1.142,42,2.401,49,2.177,51,1.556,53,0.555,55,2.512,56,0.916,59,0.183,60,1.136,70,1.931,77,1.362,79,2.843,87,0.009,88,0.009,121,2.108,143,2.461,147,2.323,156,3.053,167,2.044,170,4.169,171,3.476,172,3.705,177,1.461,197,1.931,203,1.867,205,3.033,211,0.975,215,3.427,282,2.41,304,1.639,325,2.623,385,1.98,387,2.316,458,3.993,705,2.41,759,2.484,760,4.126,778,2.147,1124,3.1,1216,5.95,1220,3.208,1282,3.1,1476,3.373,1490,3.705,1583,2.745,1596,3.208,1598,5.098,1604,5.627,1605,5.627,1673,6.22,1696,4.982,1729,4.374,1730,4.704,1731,5.098,1732,3.657,1733,4.998,1734,5.098,1735,4.998,1736,7.107,1737,5.636,1738,3.208,1739,3.412,1740,3.964,1741,3.964,1742,4.374,1743,3.208,1744,4.998]],["title/modules/FilesModule.html",[89,0.729,102,2.893]],["body/modules/FilesModule.html",[0,0.241,3,0.17,4,0.155,5,0.204,8,0.431,29,0.012,33,1.888,53,0.576,56,0.851,59,0.17,65,1.31,87,0.008,88,0.008,89,1.445,91,3.291,92,1.995,93,2.334,94,2.334,95,2.071,96,3.609,97,3.666,102,5.787,104,3.08,105,2.334,106,1.995,114,2.451,123,4.602,132,1.678,133,3.934,143,2.01,147,2.214,277,2.93,294,4.427,327,2.947,350,3.683,457,3.934,522,3.398,678,2.479,689,4.484,759,2.368,777,3.307,850,3.683,1002,4.184,1010,3.216,1131,5.364,1433,3.953,1442,5.364,1476,3.828,1480,3.666,1481,3.532,1489,4.86,1490,3.532,1495,3.828,1500,3.683,1634,5.364,1697,2.819,1699,4.904,1714,4.683,1727,5.364,1745,4.065,1746,4.065,1747,4.065,1748,4.065,1749,5.422,1750,5.422,1751,4.065,1752,4.682,1753,6.129,1754,6.129,1755,7.583,1756,4.86,1757,6.129,1758,6.129,1759,4.644,1760,4.644,1761,4.644,1762,4.644,1763,6.637,1764,4.065,1765,4.644,1766,4.644,1767,4.644,1768,4.065,1769,3.171]],["title/controllers/FilesS3Controller.html",[139,1.637,1770,3.1]],["body/controllers/FilesS3Controller.html",[0,0.142,3,0.147,4,0.135,5,0.211,8,0.449,13,2.396,17,0.298,18,1.099,21,1.638,22,1.459,24,0.532,28,0.89,29,0.012,30,0.61,31,0.574,32,0.717,34,3.223,42,2.573,48,2.386,49,2.332,51,1.157,53,0.566,56,0.74,58,2.029,59,0.147,60,1.267,79,2.755,87,0.008,88,0.008,113,2.854,114,1.615,120,3.321,121,2.259,139,2.888,141,1.673,143,1.829,147,2.308,148,3.321,156,2.744,159,1.566,162,5.011,171,3.192,172,2.327,177,1.451,180,2.451,181,1.244,190,2.592,192,5.59,194,3.615,197,1.56,203,1.508,209,4.422,211,0.788,276,2.926,314,2.926,370,3.579,390,0.871,432,3.877,540,2.926,678,2.015,699,2.327,705,1.947,727,1.244,759,2.468,776,2.218,980,2.093,1019,4.881,1154,4.673,1155,5.04,1190,2.584,1314,3.384,1425,4.387,1480,3.982,1489,4.422,1495,4.345,1570,4.166,1575,3.615,1579,4.181,1589,3.214,1598,4.422,1649,4.742,1665,5.066,1672,3.202,1674,3.202,1676,3.534,1677,3.534,1679,3.534,1680,3.534,1681,5.59,1682,2.757,1683,6.029,1684,3.534,1688,5.733,1689,4.881,1695,3.202,1697,2.451,1698,5.066,1699,3.214,1701,4.881,1702,4.881,1704,5.59,1705,5.59,1709,3.534,1710,3.202,1770,5.289,1771,3.534,1772,5.576,1773,5.576,1774,5.576,1775,4.422,1776,5.576,1777,5.576,1778,6.387,1779,4.881,1780,4.881,1781,5.576,1782,6.387,1783,5.576,1784,6.029,1785,4.038,1786,4.038,1787,4.1]],["title/modules/FilesS3Module.html",[89,0.729,1749,2.893]],["body/modules/FilesS3Module.html",[0,0.155,3,0.161,4,0.147,5,0.205,8,0.416,13,2.544,29,0.012,42,2.212,44,2.139,48,1.647,53,0.613,56,0.808,58,2.216,59,0.161,65,0.943,77,1.201,87,0.008,88,0.008,89,1.229,91,2.769,92,1.894,93,2.216,94,2.216,95,1.966,96,3.311,97,3.59,104,2.975,105,2.216,106,1.894,111,3.8,112,3.412,113,2.453,121,1.942,123,4.057,141,2.769,143,1.942,147,2.139,148,2.855,178,3.497,197,2.288,211,0.86,272,2.676,277,2.288,281,5.666,282,2.126,289,3.497,304,2.444,349,3.924,390,0.601,437,2.83,458,3.745,468,1.704,540,3.507,665,2.541,667,2.541,678,2.139,690,4.042,759,2.288,950,1.894,1146,3.593,1190,2.743,1433,3.412,1476,3.507,1479,4.695,1480,4.19,1483,2.83,1485,3.01,1495,3.749,1579,4.336,1628,4.332,1629,3.01,1639,3.226,1653,3.497,1669,4.695,1682,3.01,1687,5.453,1692,4.332,1693,3.497,1694,3.497,1697,2.676,1708,3.497,1721,3.497,1730,4.332,1731,4.695,1738,2.83,1739,3.01,1743,4.784,1749,5.568,1756,4.695,1770,5.453,1787,5.428,1788,3.859,1789,3.859,1790,3.859,1791,4.409,1792,5.615,1793,5.921,1794,5.182,1795,5.85,1796,5.182,1797,5.921,1798,3.497,1799,3.497,1800,3.497,1801,5.182,1802,3.497,1803,3.859,1804,3.859,1805,3.497,1806,3.497,1807,3.497,1808,4.409,1809,3.859,1810,3.859,1811,5.182,1812,3.859,1813,3.859,1814,3.859,1815,4.409,1816,4.409]],["title/controllers/FilesS3PresignedController.html",[139,1.637,1817,3.1]],["body/controllers/FilesS3PresignedController.html",[0,0.15,3,0.155,4,0.142,5,0.209,8,0.495,17,0.315,21,1.482,24,0.761,28,1.274,29,0.012,30,0.873,31,0.461,32,1.026,42,2.159,48,2.159,49,2.384,51,1.46,53,0.544,56,0.78,59,0.155,60,1.6,62,5.059,65,0.91,79,2.945,87,0.008,88,0.008,89,0.732,113,2.395,139,2.233,141,2.395,143,1.896,146,3.508,148,3.395,156,3.263,159,1.623,167,1.918,177,1.6,180,2.583,181,1.311,190,2.731,203,1.59,211,1.127,224,1.735,336,1.271,370,4.213,390,0.895,468,2.845,682,2.577,699,2.453,705,2.052,712,2.453,727,1.311,759,2.233,980,2.039,1064,4.584,1154,4.803,1155,4.229,1194,5.059,1282,3.395,1429,4.526,1480,4.072,1481,4.749,1483,3.71,1495,3.033,1570,3.331,1575,3.695,1576,4.213,1579,4.274,1589,3.331,1645,5.839,1647,4.807,1649,4.244,1663,5.584,1664,4.584,1665,4.584,1672,3.375,1674,3.375,1695,3.375,1697,2.583,1698,3.375,1699,2.453,1703,3.725,1710,3.375,1731,4.584,1817,5.684,1818,3.725,1819,5.78,1820,6.023,1821,5.584,1822,3.71,1823,5.78,1824,4.256,1825,5.78,1826,4.256,1827,3.946,1828,5.78,1829,5.78,1830,5.059,1831,5.059,1832,4.256,1833,4.256,1834,5.78,1835,5.78,1836,5.78,1837,5.78,1838,3.725,1839,3.71,1840,4.256,1841,4.256,1842,4.256,1843,4.256]],["title/modules/FilesS3PresignedModule.html",[89,0.729,1750,2.893]],["body/modules/FilesS3PresignedModule.html",[0,0.155,3,0.161,4,0.147,5,0.198,8,0.416,19,2.424,29,0.012,42,2.213,48,1.649,53,0.613,56,0.809,58,2.218,59,0.161,65,0.944,77,1.202,87,0.008,88,0.008,89,1.32,91,1.829,92,2.873,93,2.218,94,2.218,95,1.968,96,3.312,97,3.361,104,2.977,105,2.218,106,1.896,111,3.803,112,3.415,113,2.455,121,1.943,123,4.059,139,2.762,141,2.771,143,2.344,147,2.774,148,2.857,178,3.501,197,2.762,199,4.699,211,0.861,272,2.679,277,2.289,281,5.669,282,2.128,289,3.501,304,2.193,349,3.254,390,0.602,437,2.833,458,3.747,468,1.706,540,3.509,665,2.544,667,2.544,760,3.803,761,4.045,762,3.803,785,5.185,937,2.006,950,1.896,1187,3.596,1190,2.745,1433,3.415,1476,3.509,1480,4.265,1481,4.424,1483,4.293,1485,3.013,1495,4.028,1576,2.833,1628,4.335,1629,3.013,1639,3.23,1682,3.013,1687,5.455,1692,4.335,1693,3.501,1694,3.501,1697,2.679,1708,3.501,1721,3.501,1738,2.833,1739,3.013,1743,4.293,1750,5.57,1756,4.699,1792,4.335,1795,5.853,1798,3.501,1799,3.501,1800,3.501,1801,5.185,1802,3.501,1803,3.863,1804,3.863,1805,3.501,1806,3.501,1807,3.501,1809,3.863,1810,3.863,1811,5.185,1812,3.863,1813,3.863,1814,3.863,1817,5.455,1820,4.699,1821,6.088,1822,3.803,1839,5.382,1844,3.863,1845,3.863,1846,3.863,1847,4.414,1848,5.925,1849,5.185,1850,5.925,1851,4.414,1852,3.863]],["title/injectables/FilesS3PresignedService.html",[385,1.305,1839,2.72]],["body/injectables/FilesS3PresignedService.html",[0,0.127,3,0.132,4,0.12,5,0.208,8,0.461,17,0.267,18,0.886,21,1.681,22,1.304,24,0.863,26,2.387,28,1.325,29,0.012,30,0.907,31,0.487,32,1.067,34,2.923,42,1.925,48,1.348,49,2.219,51,1.359,53,0.561,55,1.813,56,0.661,59,0.132,60,1.365,65,1.675,70,1.991,75,2.316,77,1.964,79,2.622,81,1.55,85,1.348,87,0.007,88,0.007,89,0.621,121,1.69,143,1.69,156,3.097,167,1.786,171,3.037,177,1.171,202,3.857,203,1.348,205,3.127,211,1.005,224,1.588,282,1.74,304,2.364,325,2.704,383,1.495,385,1.587,387,1.672,390,0.894,458,3.729,468,3.064,540,2.704,665,2.079,667,2.079,682,2.297,705,1.74,712,4.277,759,1.991,778,1.55,980,2.008,1064,4.086,1072,3.307,1124,2.484,1190,2.387,1205,3.158,1220,3.857,1282,3.161,1296,2.83,1429,4.524,1437,2.316,1480,4.025,1481,4.793,1483,4.207,1485,2.463,1493,3.307,1494,3.158,1495,2.704,1576,4.45,1579,3.978,1582,5.26,1583,1.981,1589,3.778,1596,2.316,1627,4.509,1628,4.796,1629,2.463,1630,3.158,1631,2.861,1632,2.861,1639,2.64,1642,5.199,1645,5.717,1646,5.26,1647,4.475,1652,3.77,1653,4.086,1657,4.509,1663,5.717,1664,4.086,1669,4.086,1732,2.64,1734,4.086,1737,5.199,1740,4.086,1741,2.861,1743,4.627,1798,2.861,1799,2.861,1800,2.861,1802,2.861,1805,2.861,1806,2.861,1807,2.861,1820,5.717,1821,5.717,1822,3.307,1827,3.517,1830,4.509,1831,4.509,1838,3.158,1839,4.45,1853,3.158,1854,5.152,1855,5.152,1856,3.608,1857,5.152,1858,5.152,1859,5.152,1860,3.608,1861,5.152,1862,6.01,1863,5.152,1864,3.608,1865,3.608,1866,3.608,1867,3.608,1868,3.608,1869,5.152,1870,3.608,1871,3.608,1872,4.086,1873,3.608,1874,5.152,1875,3.608,1876,5.152,1877,5.152,1878,3.608]],["title/injectables/FilesS3Service.html",[385,1.305,1787,2.72]],["body/injectables/FilesS3Service.html",[0,0.247,3,0.177,4,0.162,5,0.209,8,0.521,10,3.311,17,0.359,21,1.972,22,2.779,24,0.831,28,1.391,29,0.012,30,0.733,31,0.341,32,0.862,34,3.727,42,2.772,48,2.772,51,1.595,52,2.667,53,0.466,55,2.44,56,0.89,59,0.177,60,1.593,70,1.876,77,1.323,79,1.942,87,0.009,88,0.009,143,2.069,147,2.28,156,3.011,159,1.364,171,3.719,172,4.04,177,1.593,197,1.876,205,4.504,211,1.367,276,3.311,325,2.548,385,2.286,387,2.25,406,3.637,468,1.876,540,3.311,682,2.165,759,2.438,776,2.667,778,2.711,1010,2.548,1124,3.38,1216,5.885,1220,3.117,1282,3.38,1296,2.667,1480,3.523,1570,4.741,1583,2.667,1596,3.117,1608,3.851,1609,5.523,1649,4.544,1719,5.523,1730,4.617,1734,5.004,1737,5.885,1740,3.851,1741,3.851,1784,6.732,1787,4.937,1879,4.25,1880,4.617,1881,6.495,1882,6.31,1883,6.31,1884,7.01,1885,4.856,1886,4.856,1887,4.856]],["title/injectables/FilesService.html",[385,1.305,1699,2.442]],["body/injectables/FilesService.html",[0,0.27,3,0.216,4,0.197,5,0.206,8,0.501,21,1.829,29,0.012,44,2.577,53,0.436,56,1.082,59,0.216,87,0.01,88,0.01,89,1.016,114,2.853,116,4.869,121,2.339,122,5.219,132,2.133,133,4.578,147,2.877,196,2.955,197,3.076,385,2.452,387,2.735,678,2.577,759,2.756,762,4.578,777,3.439,1010,3.743,1187,4.329,1589,4.111,1649,4.111,1699,4.773,1724,6.243,1880,5.219,1888,5.167,1889,6.243,1890,6.243,1891,7.132,1892,7.132,1893,7.132]],["title/classes/FilterCountryDto.html",[0,0.149,947,2.72]],["body/classes/FilterCountryDto.html",[0,0.282,2,1.193,3,0.204,4,0.186,5,0.135,29,0.012,31,0.574,53,0.577,59,0.273,87,0.009,88,0.009,134,3.464,181,1.719,211,1.088,224,1.821,304,1.83,322,2.804,331,2.016,390,1.065,408,2.832,440,2.804,479,3.868,480,3.334,546,2.96,720,3.581,722,3.581,725,2.69,727,1.719,728,2.69,730,2.156,748,2.928,912,3.581,947,5.012,948,4.799,950,2.96,1078,2.804,1109,3.757,1110,4.405,1113,4.309,1273,3.581,1894,4.082,1895,4.405,1896,3.581,1897,4.799,1898,4.425,1899,3.581,1900,5.465,1901,4.425,1902,4.423,1903,4.425]],["title/classes/FilterQueryDto.html",[0,0.149,742,2.72]],["body/classes/FilterQueryDto.html",[0,0.267,2,0.353,3,0.06,4,0.055,5,0.04,8,0.462,11,2.682,17,0.268,18,0.481,24,0.478,28,0.8,29,0.012,30,1.091,31,0.581,50,2.238,53,0.549,56,0.303,59,0.274,65,0.597,70,0.639,81,2.048,87,0.004,88,0.004,89,0.481,134,1.976,159,1.198,167,2.107,177,1.315,181,1.314,193,1.61,196,0.685,203,1.932,211,1.176,217,2.044,224,2.064,262,2.202,304,2.457,314,0.867,322,3.435,327,1.832,331,1.541,336,1.423,390,1.108,391,1.793,397,1.404,401,2.209,408,2.471,413,3.765,416,1.534,417,1.61,418,1.404,419,1.61,420,1.117,430,3.491,431,2.202,433,0.953,434,3.952,435,3.254,440,3.029,468,1.079,477,0.953,479,3.553,480,3.22,483,1.695,484,1.61,537,1.003,546,2.222,685,2.793,694,2.143,725,3.296,727,1.92,728,3.006,730,2.237,738,3.785,741,2.654,742,5.095,745,3.687,746,2.911,747,1.21,748,3.448,749,1.21,796,1.466,811,1.347,902,4.256,937,0.946,938,1.907,950,2.366,966,1.21,980,1.051,1000,1.695,1004,2.044,1008,2.056,1009,0.953,1014,1.21,1074,1.129,1077,1.003,1078,1.823,1109,4.15,1110,3.179,1112,4.235,1113,2.091,1124,0.797,1146,1.695,1292,2.889,1372,2.737,1378,2.125,1425,1.695,1437,1.793,1654,2.877,1752,1.061,1895,3.686,1896,1.793,1897,4.218,1899,1.793,1902,3.059,1904,1.129,1905,1.653,1906,1.653,1907,1.653,1908,1.653,1909,1.653,1910,1.653,1911,2.215,1912,1.311,1913,1.129,1914,1.311,1915,3.76,1916,2.877,1917,3.76,1918,2.877,1919,1.311,1920,2.477,1921,3.12,1922,1.21,1923,2.329,1924,1.907,1925,2.044,1926,1.907,1927,1.311,1928,1.311,1929,1.311,1930,3.382,1931,2.215,1932,0.953,1933,1.129,1934,2.044,1935,2.215,1936,2.215,1937,1.311,1938,2.215,1939,4.256,1940,1.311,1941,2.215,1942,2.215,1943,1.311,1944,1.311,1945,1.311,1946,2.737,1947,1.311,1948,1.311,1949,2.215,1950,2.329,1951,1.311,1952,5.211,1953,1.311,1954,1.311,1955,1.311,1956,2.215,1957,1.311,1958,1.311,1959,1.311,1960,1.311,1961,2.215,1962,2.215,1963,1.311,1964,1.311,1965,1.907,1966,1.311,1967,2.215,1968,1.311,1969,3.382,1970,1.311,1971,1.311,1972,1.311,1973,1.311,1974,2.215,1975,2.215,1976,2.215,1977,2.215,1978,2.877,1979,2.215,1980,2.215,1981,1.21,1982,3.254,1983,3.78,1984,3.78,1985,2.215,1986,2.215,1987,1.311,1988,1.311,1989,1.311,1990,1.311]],["title/modules/HelperModule.html",[89,0.729,272,2.572]],["body/modules/HelperModule.html",[0,0.254,3,0.165,4,0.151,5,0.11,8,0.423,9,5.277,29,0.012,44,2.608,53,0.619,56,1.103,59,0.264,65,0.967,87,0.008,88,0.008,89,1.459,91,3.114,92,1.942,93,2.272,94,2.272,95,2.016,96,3.828,97,4.077,104,3.026,105,2.272,106,1.942,113,2.495,123,4.562,141,2.495,143,1.975,148,2.903,153,4.713,167,1.844,187,4.11,272,5.165,420,2.408,458,3.627,761,5.277,771,5.128,772,5.014,792,3.586,793,3.586,937,2.039,1195,4.11,1633,5.27,1726,4.633,1764,5.27,1769,4.11,1991,3.957,1992,3.957,1993,3.957,1994,3.957,1995,5.27,1996,6.021,1997,6.021,1998,6.021,1999,5.27,2000,6.021,2001,8.262,2002,5.27,2003,5.27,2004,3.957,2005,3.957,2006,3.957,2007,6.021,2008,4.521,2009,6.769,2010,4.521,2011,6.769,2012,4.521]],["title/controllers/HomeController.html",[139,1.637,2013,3.1]],["body/controllers/HomeController.html",[0,0.28,3,0.198,4,0.181,5,0.179,8,0.475,13,2.327,17,0.4,21,1.735,24,0.713,29,0.012,33,1.668,42,2.886,44,2.931,51,1.603,53,0.545,56,0.993,59,0.198,60,1.231,77,1.476,87,0.009,88,0.009,89,0.932,110,4.95,113,3.202,114,2.706,121,2.608,132,1.957,136,6.307,139,2.986,141,2.244,146,4.477,147,2.444,148,3.911,150,3.715,159,1.521,162,4.342,177,1.676,180,3.287,181,1.668,197,2.851,211,1.056,274,5.365,349,4.051,678,2.444,682,3.445,705,2.612,760,4.342,765,5.036,1130,4.106,1295,4.95,1314,4.106,1722,5.365,2013,6.02,2014,4.741,2015,5.105,2016,6.763,2017,5.417,2018,4.741,2019,5.417,2020,3.698,2021,5.417]],["title/modules/HomeModule.html",[89,0.729,103,2.893]],["body/modules/HomeModule.html",[0,0.281,3,0.201,4,0.184,5,0.18,8,0.48,29,0.012,42,2.553,44,2.808,48,2.553,53,0.549,56,1.009,59,0.201,87,0.009,88,0.009,89,1.401,91,2.282,92,2.366,93,2.768,94,2.768,95,2.456,96,3.444,97,2.768,103,5.782,104,3.435,105,2.768,106,2.366,110,5.687,114,3.109,121,2.671,122,5.001,123,3.343,132,1.99,136,6.618,139,2.872,141,2.832,146,4.149,147,2.808,148,2.655,197,2.872,349,4.082,678,2.47,765,5.074,1130,3.343,1314,3.343,1722,4.368,1792,5.001,2013,5.438,2015,5.228,2018,4.82,2022,4.82,2023,4.82,2024,5.507,2025,6.835,2026,5.507]],["title/injectables/HomeService.html",[385,1.305,2015,2.72]],["body/injectables/HomeService.html",[0,0.277,3,0.19,4,0.174,5,0.176,8,0.564,17,0.385,21,1.954,22,1.883,24,0.869,28,1.149,29,0.012,30,1.151,31,0.366,32,0.925,33,2.034,44,2.983,51,1.58,53,0.536,56,0.955,59,0.19,60,1.184,77,1.799,87,0.009,88,0.009,89,0.897,114,2.641,120,3.184,132,1.883,143,2.166,149,5.779,177,1.786,197,2.551,211,1.016,277,3.244,282,2.513,304,2.499,385,2.034,387,2.415,458,4.219,581,3.558,678,2.386,682,3.582,705,2.513,904,2.944,1187,4.625,1190,3.059,1202,5.779,1282,3.184,1381,4.831,1384,4.561,1479,5.236,1732,3.813,1738,3.345,1739,3.558,1742,4.561,1743,4.891,2015,5.299,2016,6.669,2020,4.508,2027,4.561,2028,5.212,2029,5.212,2030,6.669,2031,5.212,2032,5.212,2033,5.212]],["title/classes/HttpErrorFilter.html",[0,0.149,125,3.1]],["body/classes/HttpErrorFilter.html",[0,0.234,2,0.931,3,0.159,4,0.145,5,0.106,8,0.467,9,4.008,10,4.101,11,3.078,12,4.076,14,2.973,15,3.648,16,5.22,17,0.322,21,1.506,24,0.573,28,0.96,29,0.012,30,0.658,31,0.306,32,0.773,37,3.769,38,4.199,39,4.764,41,2.796,42,2.193,43,3.769,48,2.772,49,1.988,51,0.903,52,2.392,53,0.565,54,4.764,55,2.189,56,0.798,59,0.243,60,1.334,65,1.756,66,2.796,67,2.796,68,2.796,69,2.973,70,2.955,72,4.296,73,4.86,74,3.187,76,4.86,77,1.81,79,1.742,80,4.853,81,2.854,83,5.814,84,4.535,85,2.968,86,3.454,87,0.008,88,0.008,89,0.749,96,2.721,113,3.075,124,5.139,125,5.595,137,4.008,138,5.139,167,1.81,170,3.73,176,2.973,177,1.334,252,3.769,323,2.796,325,3.081,332,2.643,333,2.643,336,2.123,354,2.018,359,2.796,361,5.268,362,4.657,364,4.657,366,3.812,368,5.268,369,3.812,370,2.796,371,3.812,372,3.812,373,3.812,374,3.812,375,3.812,376,3.812,378,5.139,379,3.812,420,2.348,682,2.618,776,4.076,787,4.657,950,1.871,1010,3.081,1282,2.831,1296,2.392,1429,3.225,2034,5.139,2035,3.812,2036,5.872,2037,5.872,2038,4.355,2039,4.355,2040,4.657,2041,4.355,2042,4.355,2043,4.355,2044,3.454,2045,4.355,2046,3.812,2047,3.812,2048,4.355,2049,4.355]],["title/classes/HttpExceptionFilter.html",[0,0.149,2050,3.36]],["body/classes/HttpExceptionFilter.html",[0,0.234,2,1.127,3,0.192,4,0.176,5,0.128,8,0.467,10,4.342,11,3.655,12,4.001,13,2.857,14,4.539,15,4.001,16,5.223,17,0.389,21,1.705,24,0.694,28,1.162,29,0.012,30,0.796,31,0.37,32,0.936,37,4.268,38,4.424,39,5.063,41,4.268,42,2.484,44,2.402,48,3.009,49,2.801,50,3.489,51,1.093,52,2.894,53,0.491,54,5.25,56,0.966,58,2.648,59,0.243,60,1.511,64,4.612,65,1.636,66,3.382,67,3.382,68,3.382,69,3.597,70,2.956,72,3.856,75,3.382,76,5.33,77,1.436,78,4.179,79,2.914,80,3.597,85,2.484,87,0.009,88,0.009,113,3.338,147,2.402,196,2.755,323,4.911,354,3.081,403,4.539,1292,2.442,1626,4.865,2050,6.067,2051,5.82,2052,4.179,2053,6.649,2054,5.269,2055,5.269,2056,5.269,2057,4.179]],["title/interfaces/IAppConfig.html",[487,2.893,1291,1.227]],["body/interfaces/IAppConfig.html",[3,0.191,4,0.175,5,0.127,8,0.368,17,0.387,18,1.139,29,0.012,30,1.214,31,0.597,32,1.356,33,2.04,44,3.095,59,0.242,87,0.009,88,0.009,120,3.193,224,2.017,277,2.559,390,1.185,487,5.694,557,5.49,573,5.585,576,5.585,578,5.585,581,5.211,937,2.243,1015,4.522,1291,2.211,1292,3.727,1433,3.817,1569,3.328,1622,5.797,1623,6.681,2030,5.797,2058,2.427,2059,4.584,2060,6.623,2061,5.253,2062,6.623,2063,6.623]],["title/interfaces/IAwsConfig.html",[489,2.893,1291,1.227]],["body/interfaces/IAwsConfig.html",[3,0.217,4,0.198,5,0.144,17,0.439,18,1.231,29,0.012,31,0.598,59,0.217,87,0.01,88,0.01,390,1.205,489,4.885,585,6.325,587,6.325,589,6.325,591,6.325,593,6.325,595,6.325,597,6.325,599,6.325,601,6.325,937,2.01,1291,1.719,1569,2.983,2058,2.751,2064,5.196]],["title/interfaces/IFileConfig.html",[491,2.893,1291,1.227]],["body/interfaces/IFileConfig.html",[3,0.215,4,0.197,5,0.143,17,0.436,18,1.226,29,0.012,31,0.582,32,1.5,53,0.436,59,0.215,87,0.01,88,0.01,224,2.103,390,1.189,485,5.108,491,4.865,663,5.432,665,4.586,667,4.586,669,5.822,671,5.822,673,5.822,937,1.996,1291,1.707,1371,3.784,1493,3.784,1497,4.675,1569,2.962,1981,4.313,2058,2.732,2065,5.16,2066,5.895,2067,7.126,2068,5.895,2069,5.895]],["title/interfaces/IJWTConfig.html",[493,2.893,1291,1.227]],["body/interfaces/IJWTConfig.html",[3,0.225,4,0.206,5,0.149,17,0.456,18,1.26,29,0.012,31,0.588,59,0.225,87,0.01,88,0.01,224,2.211,390,1.183,493,4.999,611,5.91,613,6.406,615,6.406,617,6.406,619,6.406,621,6.406,937,2.088,1291,1.786,1569,3.099,2058,2.858,2070,5.398]],["title/interfaces/INodeEmailerConfig.html",[495,2.893,1291,1.227]],["body/interfaces/INodeEmailerConfig.html",[3,0.225,4,0.206,5,0.149,17,0.455,18,1.258,29,0.012,31,0.588,59,0.225,87,0.01,88,0.01,224,2.063,390,1.191,495,4.994,633,6.403,635,6.403,637,6.403,639,6.403,641,6.403,643,6.403,937,2.085,1291,1.784,1569,3.095,2058,2.854,2071,5.391,2072,5.391]],["title/interfaces/IPageMetaDtoParameters.html",[1291,1.227,2073,3.1]],["body/interfaces/IPageMetaDtoParameters.html",[0,0.184,3,0.135,4,0.123,5,0.09,17,0.517,18,0.902,22,1.335,26,1.712,27,1.857,28,0.815,29,0.012,31,0.565,32,0.931,33,1.138,34,2.337,53,0.387,59,0.191,60,0.84,65,1.496,87,0.007,88,0.007,106,1.588,111,2.372,143,1.212,167,2.281,181,1.138,203,2.901,224,2.275,327,2.847,383,2.899,395,2.704,444,2.243,448,2.822,457,2.372,682,1.648,685,3.599,691,2.13,694,2.899,700,2.13,725,4.004,727,2.478,728,1.782,730,2.703,745,1.782,777,1.782,811,2.936,854,4.022,856,3.696,945,5.119,980,1.07,983,5.302,984,4.456,1054,3.696,1072,2.372,1104,4.157,1124,1.782,1130,2.243,1291,1.07,1493,3.364,1726,2.372,1872,2.931,1895,4.325,1932,2.13,1933,2.523,1950,4.664,1965,4.157,2040,5.927,2058,1.712,2073,4.848,2074,2.931,2075,6.36,2076,3.234,2077,2.931,2078,3.234,2079,6.16,2080,5.683,2081,5.927,2082,6.246,2083,4.456,2084,5.927,2085,5.763,2086,5.548,2087,4.156,2088,5.548,2089,4.829,2090,6.055,2091,4.456,2092,4.456,2093,5.33,2094,2.931,2095,5.33,2096,3.234,2097,3.234,2098,2.931,2099,3.234,2100,3.234,2101,4.587,2102,3.234,2103,3.234,2104,3.234,2105,3.234,2106,3.234,2107,3.234,2108,3.234,2109,3.234,2110,3.234,2111,3.234,2112,3.234,2113,3.234,2114,3.234,2115,2.931,2116,3.234,2117,3.234,2118,3.234,2119,3.234,2120,3.234,2121,3.234,2122,3.234,2123,3.234,2124,3.234,2125,3.234,2126,3.234]],["title/interfaces/IPaginationFieldConfig.html",[794,2.72,1291,1.227]],["body/interfaces/IPaginationFieldConfig.html",[3,0.206,4,0.189,5,0.137,8,0.397,17,0.418,18,1.195,29,0.012,31,0.551,51,1.7,59,0.206,60,1.284,87,0.009,88,0.009,117,5.509,143,1.854,327,3.231,336,1.688,390,1.118,430,3.779,694,3.25,767,2.966,769,3.779,777,3.349,778,2.984,782,3.946,794,4.459,813,6.865,814,6.832,815,4.564,822,5.355,921,4.786,976,4.334,1291,2.178,1378,3.739,1822,3.629,2058,2.619,2077,4.483,2127,4.948,2128,4.948,2129,4.948,2130,5.653,2131,5.653,2132,4.948,2133,6.582]],["title/interfaces/IPostgreSQLConfig.html",[498,2.893,1291,1.227]],["body/interfaces/IPostgreSQLConfig.html",[3,0.22,4,0.201,5,0.146,17,0.444,18,1.24,29,0.012,31,0.596,59,0.22,87,0.01,88,0.01,390,1.203,498,4.923,937,2.035,1291,1.741,1404,7.01,1406,7.01,1407,7.01,1408,7.01,1409,7.01,1569,3.021,2058,2.785,2134,5.262,2135,8.01,2136,8.01,2137,8.01]],["title/interfaces/ISMSConfig.html",[502,2.893,1291,1.227]],["body/interfaces/ISMSConfig.html",[3,0.234,4,0.214,5,0.156,17,0.474,18,1.289,29,0.012,31,0.558,59,0.234,87,0.01,88,0.01,390,1.175,502,5.117,646,6.489,648,6.489,650,6.489,937,2.173,1291,1.859,1569,3.225,2058,2.974,2138,5.618]],["title/interfaces/ISendGridConfig.html",[500,2.893,1291,1.227]],["body/interfaces/ISendGridConfig.html",[3,0.231,4,0.211,5,0.153,17,0.468,18,1.279,29,0.012,31,0.572,59,0.231,87,0.01,88,0.01,390,1.186,500,5.077,624,6.461,626,6.461,628,6.461,630,6.461,937,2.144,1291,1.834,1569,3.182,2058,2.934,2139,5.543]],["title/interfaces/IUploadFileConfig.html",[504,2.893,1291,1.227]],["body/interfaces/IUploadFileConfig.html",[3,0.228,4,0.208,5,0.151,17,0.461,18,1.268,29,0.012,31,0.581,59,0.228,87,0.01,88,0.01,224,2.074,390,1.184,504,5.033,653,6.431,655,6.431,657,6.431,659,6.431,661,6.431,937,2.113,1291,1.807,1569,3.136,2058,2.891,2140,5.462,2141,5.462]],["title/classes/PaginationMetaDto.html",[0,0.149,856,2.572]],["body/classes/PaginationMetaDto.html",[0,0.193,2,0.658,3,0.112,4,0.103,5,0.075,8,0.216,17,0.522,18,0.789,22,1.658,24,0.994,26,2.126,27,2.305,28,1.011,29,0.012,30,0.465,31,0.575,32,0.546,33,1.413,34,2.446,53,0.339,59,0.168,60,0.699,65,1.39,87,0.006,88,0.006,106,1.322,111,2.945,143,1.505,159,2.084,167,2.335,181,0.948,203,3.141,224,2.287,327,2.929,383,2.825,395,3.357,444,1.868,448,2.817,457,2.945,546,1.322,682,2.046,685,2.817,691,2.644,694,3.074,700,1.774,725,4.043,727,2.459,728,1.484,730,2.729,745,1.484,777,2.212,811,2.644,854,3.946,856,4.138,945,4.988,980,1.328,983,5.065,984,4.757,1054,3.689,1072,1.975,1104,4.15,1124,1.484,1130,2.784,1291,0.891,1493,3.902,1726,2.945,1872,3.638,1895,4.148,1932,1.774,1933,3.132,1950,4.762,1965,4.654,2040,5.989,2073,4.757,2074,2.441,2075,4.8,2076,4.015,2077,3.638,2078,4.015,2079,6.155,2080,5.793,2081,5.989,2082,6.221,2083,4.757,2084,5.989,2085,5.884,2086,5.757,2087,4.35,2088,5.757,2089,5.156,2090,6.155,2091,4.448,2092,4.448,2093,5.967,2094,3.638,2095,5.691,2096,4.015,2097,4.015,2098,2.441,2099,2.693,2100,2.693,2101,4.015,2102,2.693,2103,2.693,2104,2.693,2105,2.693,2106,2.693,2107,2.693,2108,2.693,2109,2.693,2110,2.693,2111,2.693,2112,2.693,2113,2.693,2114,2.693,2115,2.441,2116,2.693,2117,2.693,2118,2.693,2119,2.693,2120,2.693,2121,2.693,2122,2.693,2123,2.693,2124,2.693,2125,2.693,2126,2.693,2142,3.077,2143,4.587,2144,6.493,2145,3.077,2146,3.077,2147,3.077,2148,3.077,2149,3.077,2150,3.077,2151,3.077,2152,3.077]],["title/classes/PaginationQueryDto.html",[0,0.149,685,1.963]],["body/classes/PaginationQueryDto.html",[0,0.265,2,0.34,3,0.058,4,0.053,5,0.039,8,0.475,11,2.348,17,0.261,18,0.465,24,0.613,28,0.777,29,0.012,30,1.08,31,0.583,32,1.01,50,2.659,53,0.545,56,0.291,59,0.271,65,0.578,70,0.614,81,2.002,87,0.004,88,0.004,89,0.465,134,1.926,159,1.423,167,2.114,177,1.293,181,1.281,193,1.558,196,0.659,203,2.423,211,1.157,217,1.977,224,2.093,262,2.139,304,2.437,314,0.834,322,3.595,327,2.177,331,1.502,336,1.614,390,1.105,391,1.735,397,1.358,401,2.749,408,2.393,413,3.79,416,1.484,417,1.558,418,1.358,419,1.558,420,1.081,430,3.259,431,2.139,433,0.916,434,3.884,435,3.181,440,2.981,468,1.044,477,0.916,479,3.521,480,3.19,483,1.64,484,1.558,537,0.965,546,2.177,685,2.846,694,2.687,725,3.553,727,1.998,728,3.196,730,2.292,738,3.707,741,2.579,742,5.065,745,3.682,746,3.459,747,1.163,748,3.659,749,1.163,796,1.85,811,1.7,902,3.69,937,0.538,938,2.406,950,2.548,966,1.163,980,1.021,1000,1.64,1004,1.163,1008,2.005,1009,0.916,1014,1.163,1074,1.085,1077,0.965,1078,1.771,1109,4.133,1110,3.124,1112,4.163,1113,2.032,1124,0.766,1146,0.965,1292,2.846,1372,2.991,1378,2.078,1425,1.64,1437,2.263,1752,1.02,1895,3.64,1896,1.735,1897,4.163,1899,1.735,1902,2.991,1904,1.085,1911,2.143,1912,1.261,1913,1.085,1914,1.261,1915,3.69,1916,2.795,1917,3.69,1918,2.795,1919,1.261,1920,2.406,1921,3.707,1922,1.163,1923,2.669,1924,1.845,1925,3.042,1926,2.838,1927,2.143,1928,1.261,1929,1.261,1930,4.018,1931,2.143,1932,1.558,1933,1.845,1934,2.579,1935,2.143,1936,2.143,1937,1.261,1938,2.143,1939,4.318,1940,1.261,1941,2.143,1942,2.143,1943,1.261,1944,1.261,1945,1.261,1946,2.669,1947,1.261,1948,1.261,1949,2.143,1950,2.263,1951,1.261,1952,5.143,1953,1.261,1954,1.261,1955,1.261,1956,2.143,1957,1.261,1958,1.261,1959,1.261,1960,1.261,1961,2.143,1962,2.143,1963,1.261,1964,1.261,1965,1.845,1966,1.261,1967,2.143,1968,1.261,1969,3.297,1970,1.261,1971,1.261,1972,1.261,1973,1.261,1974,2.143,1975,2.143,1976,2.143,1977,2.143,1978,2.795,1979,2.143,1980,2.143,1981,1.163,1982,3.181,1983,3.695,1984,3.695,1985,2.143,1986,2.143,1987,1.261,1988,1.261,1989,1.261,1990,1.261,2153,2.702,2154,1.59,2155,2.365,2156,2.365,2157,1.59,2158,3.525,2159,1.59,2160,1.59,2161,1.59,2162,1.59,2163,1.59,2164,1.59,2165,1.59,2166,1.59]],["title/classes/PaginationResponseDto.html",[0,0.149,693,2.442]],["body/classes/PaginationResponseDto.html",[0,0.279,2,0.989,3,0.169,4,0.154,5,0.112,8,0.481,17,0.342,18,1.051,24,0.901,26,2.143,29,0.012,30,0.698,31,0.606,32,1.293,34,3.052,49,2.634,51,0.959,53,0.506,56,0.847,59,0.266,60,1.051,87,0.008,88,0.008,167,1.665,181,1.424,203,2.283,211,0.902,304,1.517,327,2.941,336,1.825,383,1.916,408,1.566,411,4.721,413,2.324,418,3.44,430,3.659,448,2.143,691,4.364,693,4.364,694,3.479,725,3.3,727,2.108,730,1.787,856,4.815,857,3.667,980,2.401,982,6.005,983,3.157,984,3.384,1008,3.511,1054,2.807,1077,2.807,1104,3.157,1109,3.071,1130,3.709,1292,3.604,1378,2.062,1578,2.968,1726,4.393,1779,5.991,1895,3.759,1923,2.968,1926,5.169,1946,5.092,2079,3.667,2080,3.384,2081,3.667,2082,3.667,2083,4.471,2084,3.667,2085,3.667,2086,3.667,2088,3.667,2089,3.667,2090,3.667,2091,3.384,2092,3.384,2167,5.775,2168,4.624,2169,4.624,2170,4.624,2171,6.111,2172,5.349,2173,5.349,2174,4.047,2175,4.047,2176,4.624,2177,4.847,2178,6.111,2179,4.624,2180,4.624,2181,4.624]],["title/injectables/PaginationService.html",[385,1.305,771,2.572]],["body/injectables/PaginationService.html",[0,0.145,3,0.097,4,0.089,5,0.064,8,0.289,13,1.765,17,0.197,21,1.053,22,0.962,24,0.541,28,1.344,29,0.012,30,0.62,31,0.353,32,0.73,34,1.832,51,0.552,53,0.547,56,0.753,59,0.15,65,1.809,77,1.537,87,0.006,88,0.006,143,1.347,153,3.54,154,1.981,156,2.424,165,2.805,167,1.367,169,2.892,171,2.325,187,2.805,197,1.587,203,1.535,211,1.389,322,3.239,336,1.925,351,3.596,383,2.338,385,1.738,387,1.233,390,1.009,420,1.643,437,3.221,546,2.424,685,3.37,691,3.252,693,2.368,694,3.296,698,2.805,699,2.368,700,2.368,705,1.981,712,3.872,725,3.433,727,1.878,728,3.835,730,1.587,748,2.633,751,5.306,769,2.836,771,3.912,776,3.099,777,1.981,778,1.765,781,2.256,782,3.943,783,4.916,784,2.805,795,1.947,796,1.396,798,2.329,808,4.462,815,3.701,822,3.426,826,5.871,841,3.672,842,4.716,844,3.258,846,3.672,847,5.631,848,3.006,853,3.006,854,1.615,855,2.329,856,3.425,857,3.258,868,1.947,889,4.475,890,3.596,903,3.258,904,2.516,905,4.475,906,3.596,907,3.258,909,3.258,910,4.392,912,1.708,913,4.939,918,3.258,945,1.947,954,2.329,980,2.176,982,4.475,983,2.805,1010,2.156,1295,3.006,1730,3.006,1752,2.637,1881,3.596,1923,3.622,1924,4.965,1926,3.852,1946,1.708,1950,4.454,2006,2.329,2020,2.805,2182,2.329,2183,4.108,2184,4.108,2185,4.108,2186,4.108,2187,4.108,2188,4.108,2189,5.643,2190,2.661,2191,2.661,2192,2.661,2193,2.661,2194,6.719,2195,6.446,2196,5.018,2197,6.099,2198,5.643,2199,5.018,2200,4.108,2201,4.108,2202,4.108,2203,4.108,2204,6.719,2205,6.939,2206,6.099,2207,4.108,2208,2.661,2209,2.661,2210,4.108,2211,4.108,2212,2.661,2213,2.661,2214,2.661,2215,2.329,2216,2.661,2217,2.661]],["title/classes/PrismaClientExceptionFilter.html",[0,0.149,2218,3.1]],["body/classes/PrismaClientExceptionFilter.html",[0,0.208,2,0.944,3,0.161,4,0.147,5,0.107,8,0.416,10,4.115,11,3.312,12,3.673,13,2.545,14,4.045,17,0.326,21,1.519,24,0.581,28,0.973,29,0.012,30,0.667,31,0.416,32,0.784,37,4.293,38,4.377,39,4.927,41,3.803,42,2.213,48,2.67,49,2.734,50,3.109,51,0.915,52,2.424,53,0.528,55,2.218,56,0.809,57,2.833,58,2.218,59,0.216,60,1.346,65,1.76,66,3.803,67,3.803,68,3.803,70,3.152,74,3.23,75,4.786,76,3.23,77,1.202,78,3.501,81,3.505,85,3.016,86,3.501,87,0.008,88,0.008,116,4.045,147,2.141,169,4.653,262,3.596,323,4.588,325,3.109,354,3.099,355,3.596,401,2.745,403,4.045,408,1.495,690,5.353,745,2.857,777,3.446,778,1.896,839,4.699,968,3.863,969,5.669,971,6.526,1005,4.699,1047,3.013,1090,3.863,1222,3.501,1232,5.853,1239,3.863,1292,2.045,1302,4.335,1565,4.045,1626,4.335,1932,3.415,1934,3.23,2044,4.699,2052,3.501,2057,5.669,2218,5.23,2219,5.185,2220,5.925,2221,6.688,2222,6.256,2223,4.414,2224,6.688,2225,3.23,2226,3.863,2227,4.414,2228,4.414,2229,3.863,2230,3.863,2231,5.185,2232,5.853,2233,4.414,2234,5.185,2235,4.414,2236,4.414,2237,4.414,2238,5.925,2239,5.925,2240,4.414,2241,4.414]],["title/injectables/PrismaService.html",[153,2.327,385,1.305]],["body/injectables/PrismaService.html",[0,0.223,3,0.123,4,0.113,5,0.082,8,0.474,12,1.852,15,3.177,17,0.249,21,1.258,22,1.218,24,0.927,26,2.273,27,2.466,28,1.275,29,0.012,30,0.873,31,0.406,32,1.349,33,1.511,42,1.833,51,1.601,52,1.852,53,0.537,56,0.618,59,0.179,60,1.534,65,1.443,70,1.896,71,5.038,87,0.007,88,0.007,89,1.093,112,1.943,143,1.609,144,5.587,145,4.648,151,2.467,152,3.59,153,4.172,154,3.812,155,5.154,156,3.504,165,5.268,169,4.557,170,2.575,171,3.819,177,1.652,197,2.455,200,3.891,203,1.259,211,1.374,234,5.56,277,1.896,280,3.891,282,1.626,304,1.106,327,2.108,332,2.046,333,2.046,336,2.42,352,2.951,355,2.978,359,2.164,385,1.511,387,1.562,390,1.016,401,1.562,408,1.959,430,2.466,458,3.817,468,1.303,705,1.626,712,3.661,727,1.038,759,2.455,762,3.149,769,2.466,776,2.695,784,3.349,950,3.027,976,4.06,980,2.387,1187,2.978,1191,5.56,1282,2.366,1283,3.149,1286,2.164,1320,3.891,1332,2.467,1378,2.579,1429,1.852,1565,4.608,1732,2.467,1738,2.164,1739,2.302,1743,2.164,2005,2.951,2098,4.587,2215,2.951,2225,2.467,2242,2.951,2243,7.045,2244,4.906,2245,4.906,2246,7.045,2247,4.906,2248,4.906,2249,4.906,2250,5.784,2251,5.784,2252,6.353,2253,7.271,2254,7.271,2255,3.371,2256,3.371,2257,3.371,2258,4.906,2259,5.784,2260,4.294,2261,4.906,2262,3.371,2263,5.784,2264,3.371,2265,6.353,2266,5.784,2267,4.906,2268,3.371,2269,4.906,2270,4.906,2271,3.371,2272,4.906,2273,4.906,2274,3.371,2275,4.906,2276,4.906,2277,3.371,2278,3.371,2279,3.371,2280,3.371,2281,3.371,2282,3.371,2283,3.371,2284,3.371,2285,5.784,2286,3.371,2287,4.906,2288,3.371,2289,3.371,2290,3.371,2291,3.371,2292,4.906,2293,4.906,2294,4.906,2295,4.906,2296,4.906,2297,3.371,2298,3.371,2299,2.951,2300,3.371,2301,3.371,2302,3.371,2303,3.371,2304,4.906,2305,3.371,2306,2.951]],["title/classes/Query.html",[0,0.149,336,1.265]],["body/classes/Query.html",[0,0.221,2,1.031,3,0.176,4,0.161,5,0.117,8,0.441,12,2.649,17,0.356,21,1.611,24,0.635,28,1.063,29,0.012,30,1.188,31,0.52,32,0.856,33,1.935,48,2.994,49,2.366,51,1.449,59,0.176,60,1.744,65,1.494,77,1.314,85,3.154,87,0.009,88,0.009,89,1.32,113,3.067,167,1.314,170,3.666,177,1.587,211,1.363,336,2.522,359,3.096,390,1.174,420,1.929,746,5.053,776,4.322,781,4.585,782,2.531,904,2.151,921,4.027,980,2.279,1009,4.027,1217,4.221,1283,4.751,1286,4.751,1378,2.801,1429,4.322,1827,3.292,2020,4.289,2307,4.221,2308,4.823,2309,4.221,2310,4.823,2311,4.221,2312,4.823,2313,4.823,2314,4.823,2315,4.823,2316,4.823,2317,4.823,2318,4.823,2319,4.823,2320,4.823,2321,4.823,2322,4.823,2323,6.282,2324,6.282,2325,6.718,2326,6.718,2327,4.823,2328,5.498,2329,5.498,2330,7.402,2331,4.221,2332,4.221,2333,5.498,2334,5.498,2335,4.221,2336,4.221,2337,4.221,2338,4.221,2339,4.221]],["title/classes/Query-1.html",[0,0.125,336,1.06,727,1.093]],["body/classes/Query-1.html",[0,0.23,2,1.097,3,0.187,4,0.171,5,0.124,8,0.459,12,2.817,17,0.379,21,1.676,24,0.675,28,1.131,29,0.012,30,1.144,31,0.532,32,0.911,48,2.442,49,2.213,51,1.356,59,0.187,60,1.778,65,1.097,85,3.18,87,0.009,88,0.009,89,1.346,121,1.683,170,3.43,177,1.485,211,1.403,325,3.43,336,2.481,359,3.293,390,1.165,769,2.578,776,4.393,781,4.465,782,2.692,904,2.288,980,2.266,1195,3.502,1282,3.152,1283,4.618,1286,4.196,1292,2.377,1429,4.393,1615,6.008,1822,3.293,1827,4.463,2309,6.297,2325,6.848,2326,6.848,2328,6.631,2329,5.722,2331,6.297,2333,5.722,2334,5.722,2335,4.49,2336,4.49,2337,4.49,2338,4.49,2339,4.49,2340,4.49,2341,6.537,2342,5.13]],["title/classes/Query-2.html",[0,0.125,336,1.06,448,1.644]],["body/classes/Query-2.html",[0,0.231,2,0.598,3,0.102,4,0.093,5,0.125,8,0.364,17,0.207,18,1.268,21,1.685,24,0.9,28,0.616,29,0.012,30,1.218,31,0.556,32,0.919,51,1.612,53,0.382,59,0.156,60,0.969,65,1.703,70,2.409,77,1.41,87,0.006,88,0.006,89,0.481,121,1.399,132,1.01,135,3.942,143,2.156,150,2.343,154,2.057,177,1.891,202,1.794,211,1.554,215,3.975,255,2.739,276,2.239,277,2.848,327,1.833,332,2.589,333,3.514,336,2.52,354,3.564,390,1.105,408,2.225,468,2.642,678,1.542,680,3.514,694,2.399,727,2.106,759,1.649,769,3.542,778,1.833,781,4.606,782,2.239,800,3.734,809,3.384,812,3.532,816,5.076,838,1.696,893,5.068,904,2.582,921,2.982,930,2.217,957,2.446,965,3.384,976,3.337,980,1.235,1010,2.239,1080,4.104,1081,4.104,1082,4.104,1083,4.104,1125,4.548,1126,4.812,1138,6.322,1167,3.122,1186,3.384,1187,2.589,1188,3.734,1243,3.734,1268,3.734,1270,2.913,1272,2.045,1280,3.953,1283,5.036,1286,4.525,1298,3.122,1299,2.217,1301,3.384,1306,2.217,1308,2.217,1309,2.217,1311,2.217,1314,3.14,1316,2.217,1332,3.122,1342,2.217,1568,2.045,1775,5.213,1822,2.739,1827,5.031,1932,2.459,2132,5.753,2133,3.734,2234,3.734,2260,3.734,2332,3.734,2343,2.446,2344,4.266,2345,4.266,2346,4.266,2347,3.734,2348,5.174,2349,6.236,2350,6.236,2351,6.236,2352,2.795,2353,4.266,2354,2.795,2355,3.734,2356,2.795,2357,2.795,2358,2.795,2359,2.795,2360,4.266,2361,2.795,2362,6.573,2363,5.174,2364,2.795,2365,2.795,2366,2.795,2367,2.795,2368,2.795,2369,5.174,2370,4.266,2371,4.266,2372,4.266,2373,4.266,2374,2.446,2375,2.795,2376,4.266,2377,2.795,2378,2.795,2379,2.795,2380,2.795,2381,2.795,2382,4.266,2383,4.266,2384,4.266,2385,4.266,2386,2.795,2387,2.795,2388,2.795,2389,2.795,2390,2.795,2391,2.795,2392,2.795,2393,2.795,2394,2.795,2395,2.795,2396,2.795,2397,2.795]],["title/classes/QueryCountryDto.html",[0,0.149,720,2.72]],["body/classes/QueryCountryDto.html",[0,0.275,2,1.088,3,0.186,4,0.17,5,0.123,17,0.376,18,1.119,24,0.994,29,0.012,31,0.588,32,1.459,53,0.558,59,0.262,87,0.009,88,0.009,134,3.321,159,2.121,181,1.567,211,0.992,224,1.996,304,1.668,322,3.601,331,1.838,390,1.03,408,2.782,440,2.556,479,3.763,480,3.196,546,2.793,720,4.174,722,5.01,725,3.455,727,1.567,728,3.455,730,1.966,748,3.761,912,3.265,947,4.848,948,4.848,950,3.245,1078,2.556,1109,3.601,1110,4.286,1113,4.13,1273,3.265,1894,5.711,1895,4.286,1896,3.265,1897,4.6,1898,4.035,1899,3.265,1900,5.157,1901,4.035,1902,4.174,1903,4.035,2144,5.691,2155,4.453,2156,4.453,2398,6.502,2399,5.087,2400,5.087,2401,6.502,2402,6.502,2403,5.087,2404,5.087,2405,5.087]],["title/classes/QueryFailedFilter.html",[0,0.149,2406,3.36]],["body/classes/QueryFailedFilter.html",[0,0.223,2,0.85,3,0.145,4,0.133,5,0.096,8,0.445,10,4.081,11,3.33,12,3.947,13,1.707,14,3.765,15,3.757,16,5.309,17,0.294,18,0.949,19,3.029,20,6.551,21,1.414,22,1.436,23,3.152,24,0.834,26,2.555,27,3.612,28,1.216,29,0.012,30,0.833,31,0.505,32,0.979,33,1.951,34,2.824,35,5.023,37,4.065,38,4.189,39,4.896,41,3.54,42,2.06,43,3.54,48,2.366,49,2.707,50,2.894,51,0.824,52,2.183,53,0.602,54,2.551,55,2.771,56,1.011,57,2.551,58,2.771,59,0.231,60,1.439,61,3.152,65,1.755,66,3.54,67,3.54,68,3.54,69,2.713,70,2.643,73,4.035,74,2.908,75,3.54,77,1.502,80,4.324,81,3.088,85,2.778,87,0.008,88,0.008,113,1.647,116,2.713,121,1.809,147,1.993,154,3.855,169,3.179,176,2.713,323,4.391,325,2.894,330,3.478,332,2.412,333,2.412,334,4.827,335,3.478,336,2.412,359,2.551,361,3.152,362,4.374,363,3.478,364,4.374,368,5.023,403,3.765,769,2.771,777,2.659,1047,2.713,1222,3.152,1292,2.555,1626,4.035,2044,3.152,2046,4.827,2047,4.827,2057,4.374,2218,2.908,2222,3.478,2225,2.908,2226,3.478,2229,3.478,2230,3.478,2231,5.988,2232,6.29,2374,3.478,2406,6.049,2407,5.988,2408,3.478,2409,5.515,2410,3.974,2411,3.974,2412,3.974,2413,5.515,2414,3.974,2415,3.974,2416,3.478,2417,3.974,2418,3.974,2419,5.515,2420,3.974,2421,3.974,2422,3.974,2423,3.974,2424,3.974,2425,3.974,2426,3.974,2427,3.974]],["title/interfaces/QueryOptions.html",[1280,2.893,1291,1.227]],["body/interfaces/QueryOptions.html",[0,0.177,3,0.097,4,0.089,5,0.065,8,0.187,17,0.497,18,0.708,29,0.012,30,1.15,31,0.59,32,1.443,33,1.548,51,1.171,53,0.197,59,0.206,60,1.283,65,1.775,70,1.941,87,0.006,88,0.006,177,1.708,211,1.485,224,0.705,255,3.225,332,1.618,333,1.618,336,2.492,390,1.146,394,2.259,408,2.694,446,4.214,468,2.905,680,1.618,727,1.74,759,1.59,768,1.82,769,2.525,779,3.01,780,4.133,781,4.464,782,3.528,796,4.04,811,3.625,815,2.497,838,1.618,868,4.133,904,3.302,911,4.133,921,4.481,950,1.768,976,4.268,1125,4.673,1126,4.968,1197,2.809,1270,4.403,1271,2.114,1272,1.951,1273,1.711,1274,2.333,1279,2.333,1280,5.523,1282,2.723,1283,4.457,1284,2.333,1286,4.671,1287,2.333,1289,2.333,1291,1.191,1292,3.568,1293,6.664,1294,6.664,1295,3.01,1296,3.102,1297,3.601,1298,5.571,1299,5.506,1300,5.646,1301,5.332,1302,3.01,1303,4.944,1304,3.601,1305,5.646,1306,2.114,1307,2.333,1308,2.114,1309,2.114,1310,2.333,1311,2.114,1312,5.884,1313,4.397,1314,3.049,1315,4.397,1316,2.114,1317,2.333,1318,4.397,1319,3.601,1320,4.48,1321,3.601,1322,3.601,1323,3.601,1324,3.601,1325,5.646,1326,4.397,1327,4.944,1328,4.944,1329,3.601,1330,3.601,1331,2.333,1332,1.951,1333,2.333,1334,2.333,1335,2.333,1336,2.333,1337,2.333,1338,2.333,1339,2.333,1340,4.397,1341,2.333,1342,3.263,1343,2.333,2058,1.235]],["title/injectables/ResolvePromisesInterceptor.html",[385,1.305,2428,3.36]],["body/injectables/ResolvePromisesInterceptor.html",[0,0.232,3,0.19,4,0.174,5,0.126,8,0.464,13,2.837,15,3.626,17,0.385,21,1.693,24,0.686,28,1.149,29,0.012,30,0.787,31,0.366,32,0.925,33,2.034,44,2.386,45,5.236,46,5.202,48,3,49,2.795,51,1.369,53,0.563,56,0.955,59,0.241,60,1.5,87,0.009,88,0.009,150,3.626,172,4.392,196,2.736,211,1.016,385,2.034,387,2.415,418,3.829,444,4.007,690,4.508,919,4.133,980,2.391,1378,2.944,1769,5.202,1890,5.779,2428,5.748,2429,4.561,2430,7.62,2431,6.37,2432,7.226,2433,6.603,2434,7.62,2435,5.779,2436,6.603,2437,5.748,2438,5.236,2439,5.779,2440,6.603,2441,6.603,2442,7.862,2443,7.862,2444,5.212,2445,6.603,2446,6.603,2447,8.032,2448,6.603,2449,7.248,2450,4.561,2451,5.212,2452,5.212,2453,5.212,2454,5.212,2455,5.212]],["title/injectables/SortBy.html",[385,1.305,433,2.442]],["body/injectables/SortBy.html",[0,0.261,3,0.159,4,0.145,5,0.106,8,0.467,15,3.904,17,0.322,21,1.506,24,0.773,28,1.294,29,0.012,30,1.073,31,0.413,32,1.043,51,1.648,53,0.434,56,0.798,59,0.26,60,1.686,65,1.52,81,3.054,85,2.656,87,0.008,88,0.008,156,2.523,207,4.296,211,1.386,304,2.332,314,3.486,324,4.292,331,2.569,383,2.752,385,2.046,386,4.86,387,2.018,388,3.454,389,5.268,390,1.128,391,4.764,392,5.139,393,5.139,394,3.225,395,4.296,396,5.139,397,3.572,398,5.139,399,7.186,401,2.721,402,6.955,403,5.067,404,3.812,406,3.828,407,5.268,408,2.691,409,3.812,410,5.268,411,4.505,412,5.268,413,3.927,414,5.814,415,6.496,416,3.225,417,3.384,418,2.951,419,3.384,420,2.348,421,4.657,422,4.657,423,4.657,424,5.139,425,3.812,426,3.812,427,3.812,428,3.812,429,5.139,430,3.993,431,4.939,432,4.315,433,4.097,434,4.008,435,4.008,436,5.139,437,2.796,438,3.187,439,3.812,440,2.189,441,3.812,442,3.812,443,3.812,444,2.643,445,5.139,446,2.643,447,3.812,448,2.018,449,3.812,450,3.812,451,3.812,452,3.812,453,3.812,454,3.812,455,3.812,456,3.454,457,2.796,2456,4.355,2457,4.355]],["title/classes/SortByDto.html",[0,0.149,1939,2.893]],["body/classes/SortByDto.html",[0,0.268,2,0.355,3,0.061,4,0.055,5,0.04,8,0.462,11,2.213,17,0.269,18,0.482,24,0.369,28,0.618,29,0.012,30,1.092,31,0.58,50,2.243,53,0.55,56,0.304,59,0.274,65,0.599,70,0.641,81,2.226,87,0.004,88,0.004,89,0.482,134,1.98,159,1.021,167,2.108,177,1.317,181,1.317,193,1.615,196,0.687,203,1.936,211,1.177,217,2.05,224,2.065,262,2.594,304,2.459,314,0.87,322,3.438,327,1.836,331,1.544,336,1.276,390,1.106,391,1.798,397,1.408,401,2.213,408,2.389,413,3.768,416,1.539,417,1.615,418,1.408,419,1.615,420,1.121,430,3.494,431,3.145,433,0.956,434,4.261,435,3.766,440,3.033,468,1.083,477,0.956,479,3.555,480,3.223,483,1.7,484,1.615,537,1.007,546,2.226,685,2.797,694,2.147,725,3.299,727,1.923,728,3.01,730,2.24,738,3.791,741,2.661,742,5.079,745,3.666,746,2.918,747,1.214,748,3.59,749,1.214,796,1.908,811,1.351,902,3.958,937,0.562,938,2.483,950,2.37,966,1.214,980,1.053,1000,1.7,1004,1.214,1008,2.061,1009,0.956,1014,1.214,1074,1.132,1077,1.007,1078,1.828,1109,4.151,1110,3.184,1112,4.242,1113,2.096,1124,0.8,1146,1.007,1292,2.892,1372,2.743,1378,2.13,1425,1.7,1437,1.798,1654,1.316,1752,1.065,1895,3.69,1896,1.798,1897,4.223,1899,1.798,1902,3.066,1904,1.132,1911,2.222,1912,1.316,1913,1.132,1914,1.316,1915,3.766,1916,2.884,1917,3.766,1918,2.884,1919,1.316,1920,2.483,1921,3.127,1922,1.214,1923,2.334,1924,1.913,1925,2.05,1926,1.913,1927,1.316,1928,1.316,1929,1.316,1930,3.39,1931,2.222,1932,0.956,1933,1.132,1934,2.05,1935,2.222,1936,2.222,1937,1.316,1938,2.222,1939,4.384,1940,1.316,1941,2.222,1942,2.222,1943,1.316,1944,1.316,1945,1.316,1946,2.743,1947,2.222,1948,2.222,1949,2.222,1950,2.334,1951,1.316,1952,5.217,1953,1.316,1954,1.316,1955,1.316,1956,2.222,1957,1.316,1958,1.316,1959,1.316,1960,1.316,1961,2.222,1962,2.222,1963,1.316,1964,1.316,1965,1.913,1966,1.316,1967,2.222,1968,1.316,1969,3.39,1970,1.316,1971,1.316,1972,1.316,1973,1.316,1974,2.222,1975,2.222,1976,2.222,1977,2.222,1978,2.884,1979,2.222,1980,2.222,1981,1.214,1982,3.26,1983,3.788,1984,3.788,1985,2.222,1986,2.222,1987,1.316,1988,1.316,1989,1.316,1990,1.316,2458,1.659,2459,1.659,2460,1.452,2461,1.659]],["title/classes/SortCountryDto.html",[0,0.149,948,2.72]],["body/classes/SortCountryDto.html",[0,0.28,2,1.157,3,0.198,4,0.181,5,0.131,17,0.4,18,1.163,24,0.89,29,0.012,31,0.578,53,0.571,59,0.269,87,0.009,88,0.009,134,3.416,159,1.898,181,1.666,211,1.055,224,1.787,304,1.774,322,2.718,331,1.955,390,1.084,408,2.816,440,2.718,479,3.833,480,3.288,546,2.904,720,3.472,722,4.732,725,2.608,727,1.666,728,2.608,730,2.09,748,2.839,912,4.732,947,4.732,948,4.957,950,2.904,1078,2.718,1109,3.705,1110,4.366,1113,4.249,1273,3.472,1894,5.395,1895,4.366,1896,3.472,1897,4.732,1898,5.847,1899,3.472,1900,5.361,1901,4.29,1902,4.339,1903,4.29,2460,4.735,2462,5.41,2463,5.41,2464,5.41]],["title/classes/UpdateDto.html",[0,0.149,1148,3.1]],["body/classes/UpdateDto.html",[0,0.298,2,1.222,3,0.209,4,0.191,5,0.183,8,0.491,18,1.203,29,0.012,32,1.398,33,2.425,53,0.517,59,0.209,87,0.01,88,0.01,89,0.983,132,2.065,135,3.956,177,1.589,678,2.526,745,3.371,976,4.03,980,2.28,998,3.84,999,4.773,1000,4.778,1007,4.773,1008,3.371,1018,5.545,1070,5.184,1125,4.778,1148,6.013,1167,5.76,1186,5.545,1208,6.12,1302,5.116,1565,5.375,1920,3.901,2003,6.12,2465,5.001,2466,6.992,2467,6.12,2468,6.992,2469,6.12,2470,6.992,2471,5.714,2472,5.714,2473,5.714]],["title/classes/UserNotFoundException.html",[0,0.149,2474,3.36]],["body/classes/UserNotFoundException.html",[0,0.2,2,1.217,3,0.208,4,0.19,5,0.138,8,0.53,10,3.958,22,2.056,24,0.749,26,3.232,27,3.505,28,1.254,29,0.012,30,0.859,31,0.4,32,1.339,43,3.653,53,0.421,56,1.043,59,0.208,60,1.293,77,2.142,81,3.24,85,3.106,87,0.009,88,0.009,167,1.9,196,2.89,214,5.519,314,3.66,325,3.66,355,4.578,390,1.072,420,2.79,778,2.997,937,1.927,1220,5.046,1491,4.981,1565,5.507,1568,4.164,1569,2.86,2474,6.511,2475,6.105,2476,4.981,2477,8.21,2478,6.975,2479,5.691,2480,6.975,2481,5.691,2482,5.691,2483,5.691]],["title/classes/UtilsService.html",[0,0.149,772,2.572]],["body/classes/UtilsService.html",[0,0.161,2,0.658,3,0.112,4,0.103,5,0.075,8,0.427,11,1.427,17,0.406,19,3.745,21,1.559,24,0.604,28,1.503,29,0.012,30,0.693,31,0.427,32,0.815,51,1.261,53,0.339,59,0.168,60,1.764,65,1.73,77,0.839,87,0.006,88,0.006,143,1.505,167,1.25,177,1.549,211,1.378,224,0.814,255,1.977,277,2.35,322,3.268,327,1.323,336,2.384,383,2.52,390,1.191,401,2.818,408,2.059,416,1.691,417,1.775,418,1.548,419,1.775,420,1.232,421,2.442,422,2.442,423,2.442,430,3.901,431,1.869,440,2.307,509,2.307,685,3.014,694,2.826,700,1.775,748,2.879,751,3.746,767,3.579,768,4.151,769,3.901,772,4.288,777,2.932,778,1.972,779,4.015,780,3.358,781,3.745,782,4.27,783,5.68,787,3.64,794,1.977,795,2.253,796,2.879,808,5.609,809,3.64,810,5.408,811,2.932,814,5.758,815,4.139,822,4.823,838,1.869,841,5.527,842,5.527,844,2.442,846,5.169,847,5.527,848,5.527,853,3.358,881,4.802,883,2.695,886,2.695,889,3.64,891,2.695,902,3.746,903,2.442,904,1.373,905,2.442,907,2.442,908,4.802,909,3.64,911,3.358,912,3.522,916,4.802,917,2.695,918,2.442,919,2.442,920,3.64,921,3.505,922,5.322,924,2.695,925,2.695,926,2.695,927,2.695,928,2.695,929,2.695,930,2.442,931,2.695,932,2.695,933,2.695,934,2.695,935,2.695,937,2.202,938,5.066,939,2.695,940,2.695,941,2.695,942,2.442,943,2.695,944,2.695,976,4.185,1146,4.139,1195,3.133,1197,3.133,1240,6.355,1244,2.695,1282,3.288,1296,3.987,1621,4.802,1775,5.758,1932,3.505,2020,3.133,2347,4.017,2484,2.695,2485,5.487,2486,3.08,2487,7.42,2488,3.08,2489,4.802,2490,7.919,2491,6.081,2492,4.017,2493,3.08,2494,3.08,2495,4.59,2496,5.487,2497,3.08,2498,3.08,2499,3.08]],["title/changelog.html",[2500,2.422,2501,2.422,2502,3.105]],["body/changelog.html",[29,0.01,87,0.01,88,0.01,92,2.847,277,2.561,509,3.33,854,4.022,1152,5.256,2502,5.801,2503,6.628,2504,6.684,2505,6.628,2506,6.628,2507,5.801,2508,6.628,2509,6.628,2510,5.801,2511,6.628,2512,5.801,2513,6.628,2514,6.628,2515,5.256,2516,6.628,2517,6.628]],["title/contributing.html",[2500,2.422,2501,2.422,2518,3.105]],["body/contributing.html",[29,0.012,30,1.146,33,1.779,48,2.629,77,1.573,87,0.01,88,0.01,110,5.927,148,2.785,167,1.917,354,3.661,444,4.272,448,3.261,680,3.505,682,2.575,727,1.779,838,3.505,937,1.956,1001,4.58,1054,3.505,1104,3.943,1124,2.785,1296,3.172,1373,3.943,1880,4.226,1982,4.805,2002,5.055,2061,4.58,2091,4.226,2092,4.226,2177,4.58,2435,5.055,2507,5.055,2510,6.16,2515,4.58,2518,6.16,2519,5.776,2520,6.16,2521,6.644,2522,7.038,2523,7.038,2524,5.776,2525,6.916,2526,5.776,2527,5.776,2528,5.776,2529,5.776,2530,5.776,2531,5.055,2532,6.644,2533,6.644,2534,5.776,2535,5.776,2536,5.776,2537,5.776,2538,5.776,2539,4.58,2540,7.038,2541,6.644,2542,5.776,2543,5.776,2544,6.16,2545,6.16,2546,5.055,2547,7.038,2548,5.776,2549,7.038,2550,5.776,2551,5.776,2552,5.776,2553,5.055,2554,6.644,2555,5.776,2556,5.055,2557,5.776,2558,5.055]],["title/coverage.html",[2559,4.571]],["body/coverage.html",[0,0.302,1,2.566,5,0.078,6,2.832,7,2.832,29,0.012,31,0.227,77,0.882,87,0.006,88,0.006,91,1.341,95,1.443,96,1.499,125,2.368,134,1.499,135,1.626,139,2.774,140,2.368,142,2.832,153,1.777,169,1.865,188,2.832,194,1.698,273,2.832,300,2.368,311,2.566,312,2.832,313,2.832,336,1.687,383,3.493,385,2.415,386,2.368,388,3.776,433,1.865,458,1.626,459,3.776,487,2.209,489,2.209,491,2.209,493,2.209,495,2.209,498,2.209,500,2.209,502,2.209,504,2.209,507,1.865,510,2.368,676,2.368,677,2.832,679,3.484,685,1.499,693,1.865,697,2.368,701,2.077,720,2.077,722,3.626,730,1.25,731,2.832,742,2.077,764,2.832,771,1.964,772,1.964,794,2.077,816,3.056,856,1.964,921,1.865,947,2.077,948,2.077,997,2.832,1048,2.209,1070,2.077,1071,2.832,1114,2.832,1122,2.368,1123,4.167,1129,2.077,1148,2.368,1185,2.832,1251,2.832,1270,2.209,1271,3.776,1272,3.484,1273,4.262,1280,2.209,1291,2.271,1352,3.421,1353,2.566,1378,3.352,1396,2.832,1448,6.755,1462,7.685,1475,2.832,1508,3.776,1533,2.832,1558,2.566,1559,2.832,1560,2.832,1575,2.964,1576,3.999,1577,2.832,1578,4.262,1583,1.777,1597,2.832,1606,2.832,1613,2.832,1647,2.209,1648,2.832,1652,2.368,1661,2.368,1662,2.832,1688,2.566,1690,2.832,1691,2.832,1692,2.368,1696,2.077,1699,1.865,1729,2.832,1751,2.832,1763,2.832,1770,2.368,1771,2.832,1787,2.077,1817,2.368,1818,2.832,1839,2.077,1853,2.832,1879,2.832,1888,2.832,1894,4.133,1904,3.856,1913,2.209,1915,2.209,1917,2.209,1939,2.209,1994,2.832,2013,2.368,2014,2.832,2015,2.077,2027,2.832,2034,2.832,2035,2.832,2050,2.566,2051,2.832,2052,3.776,2059,2.832,2064,2.832,2065,2.832,2070,2.832,2071,2.832,2072,2.832,2073,2.368,2074,3.776,2083,2.368,2087,2.566,2127,2.832,2128,2.832,2134,2.832,2138,2.832,2139,2.832,2140,2.832,2141,2.832,2167,3.776,2182,2.832,2218,2.368,2219,2.832,2242,2.832,2307,2.832,2340,2.832,2343,2.832,2406,2.566,2407,2.832,2408,2.832,2416,2.832,2428,2.566,2429,2.832,2437,2.566,2465,2.832,2474,2.566,2475,2.832,2476,2.832,2484,2.832,2559,2.566,2560,3.236,2561,6.944,2562,3.236,2563,7.99,2564,6.639,2565,3.236,2566,3.236,2567,3.236,2568,4.761,2569,3.236,2570,7.751,2571,5.649,2572,4.167,2573,4.761,2574,3.236,2575,3.236,2576,5.649,2577,3.236,2578,3.236,2579,3.236,2580,5.649,2581,3.236,2582,8.468,2583,3.236,2584,3.236,2585,2.832,2586,3.236,2587,4.761,2588,3.236,2589,2.832,2590,7.842,2591,6.639,2592,4.761,2593,3.236,2594,3.236,2595,3.236,2596,5.649,2597,3.236,2598,4.761,2599,3.236,2600,2.832,2601,2.832,2602,5.649,2603,5.649,2604,3.236,2605,3.236,2606,3.236,2607,3.236,2608,4.761,2609,3.236,2610,3.236,2611,3.236,2612,4.761,2613,7.518,2614,7.518,2615,3.236,2616,3.236,2617,3.236,2618,3.236,2619,3.236,2620,2.832,2621,2.832,2622,2.832,2623,2.832,2624,3.236,2625,3.236,2626,4.761,2627,3.236,2628,3.236,2629,2.832,2630,2.832,2631,3.236]],["title/dependencies.html",[92,2.187,2632,3.105]],["body/dependencies.html",[0,0.252,29,0.012,34,2.654,48,2.224,56,1.091,57,3.821,58,4.012,87,0.01,88,0.01,92,2.557,151,4.356,176,4.064,181,1.834,185,4.721,282,2.87,331,2.151,540,3.761,728,2.87,1078,2.991,1480,3.602,1629,4.064,1631,4.721,1632,4.721,1682,4.064,1687,5.245,2004,5.21,2225,4.356,2450,5.21,2633,5.953,2634,5.953,2635,7.168,2636,5.953,2637,5.953,2638,5.953,2639,5.953,2640,7.692,2641,5.953,2642,5.953,2643,5.953,2644,5.953,2645,5.953,2646,5.953,2647,5.953,2648,5.953,2649,5.953,2650,5.953,2651,5.953,2652,5.953,2653,5.21,2654,5.953,2655,5.21,2656,5.953,2657,5.953,2658,5.953,2659,5.953,2660,5.21,2661,5.953,2662,5.953,2663,5.953,2664,5.953,2665,5.953,2666,5.953]],["title/miscellaneous/enumerations.html",[2667,2.277,2668,4.456]],["body/miscellaneous/enumerations.html",[5,0.145,17,0.443,29,0.012,87,0.01,88,0.01,278,4.857,408,2.951,485,4.621,530,5.136,533,4.857,550,4.857,694,2.484,1009,4.149,1353,4.754,1372,4.621,1373,4.914,1374,5.267,1476,3.146,1480,3.877,1481,3.455,1490,4.149,1508,4.754,1624,5.247,1726,3.848,1752,3.848,1904,4.092,1920,4.092,1921,5.267,1922,4.386,1923,4.621,1924,4.914,2667,3.848,2668,5.247,2669,5.995,2670,5.995,2671,5.247,2672,6.3,2673,5.995,2674,5.247,2675,5.995]],["title/miscellaneous/functions.html",[1196,4.037,2667,2.277]],["body/miscellaneous/functions.html",[0,0.287,8,0.547,9,3.171,10,2.437,17,0.343,22,2.214,26,2.84,27,3.447,28,1.717,29,0.011,30,1.176,31,0.573,32,1.41,33,1.888,44,2.74,49,1.573,51,1.271,52,2.551,84,3.171,85,1.735,87,0.008,88,0.008,91,2.539,95,3.059,111,4.403,112,3.953,145,3.398,147,1.678,150,2.551,152,3.398,159,1.304,171,3.178,172,3.953,177,1.723,193,4.37,194,3.599,196,2.842,205,2.819,207,3.398,209,5.785,224,1.813,262,2.819,277,2.819,314,3.216,324,4.006,325,2.437,327,2.633,331,1.678,390,0.836,391,2.981,397,3.08,406,2.677,408,2.075,410,3.683,430,2.334,438,5.337,468,1.795,507,3.532,509,2.334,533,2.819,550,2.819,682,2.071,694,1.924,697,4.484,727,1.431,777,2.955,778,1.995,784,3.171,796,3.599,811,2.955,920,3.683,980,1.775,999,3.171,1000,4.163,1002,3.171,1008,2.239,1015,3.171,1077,2.819,1078,2.334,1079,3.683,1110,2.551,1196,3.683,1261,4.065,1296,2.551,1374,3.398,1378,3.473,1381,3.398,1425,2.819,1433,2.677,1568,4.484,1578,3.934,1620,4.065,1769,3.171,1780,4.065,1792,5.337,1794,4.065,1880,3.398,1913,4.184,1915,4.184,1917,4.683,1995,4.065,2167,3.683,2172,4.065,2173,4.065,2174,4.065,2175,4.065,2177,3.683,2431,4.86,2432,6.384,2437,4.86,2438,4.86,2439,4.065,2585,4.065,2589,4.065,2600,4.065,2601,4.065,2620,4.065,2621,6.004,2622,4.065,2623,5.364,2629,4.065,2630,5.364,2667,2.981,2676,4.644,2677,4.065,2678,4.644,2679,4.644,2680,4.644,2681,4.644,2682,4.644,2683,4.644,2684,4.644,2685,6.129,2686,4.644,2687,4.644,2688,4.644,2689,4.644,2690,4.644,2691,4.065,2692,4.644,2693,4.644,2694,7.942,2695,4.644,2696,4.644,2697,4.644,2698,4.644,2699,4.644,2700,4.644,2701,4.644,2702,4.644,2703,6.129,2704,4.644,2705,4.644,2706,4.644,2707,4.644,2708,4.644,2709,6.129,2710,6.129,2711,4.065,2712,4.644]],["title/index.html",[17,0.262,2500,2.422,2501,2.422]],["body/index.html",[4,0.181,5,0.164,8,0.272,13,1.661,29,0.012,31,0.439,32,1.309,77,1.053,81,1.661,84,3.693,87,0.007,88,0.007,92,1.661,106,1.661,112,3.597,113,2.242,120,3.009,154,3.65,162,4.006,167,2.189,169,3.597,190,3.473,193,3.597,194,3.547,196,2.948,197,1.494,199,3.066,200,3.066,214,2.829,262,2.346,275,3.384,276,2.029,277,2.09,278,2.346,279,2.482,284,3.959,350,3.066,354,3.297,370,3.473,389,3.066,416,3.427,418,2.719,420,2.164,432,3.788,444,2.346,446,3.284,509,2.719,530,3.473,533,3.788,537,3.788,550,3.788,761,3.693,784,2.639,815,2.346,838,2.346,839,3.066,854,4.103,937,1.309,969,3.066,980,1.12,1010,2.029,1072,2.482,1124,3.009,1125,3.284,1190,1.791,1197,2.639,1296,2.123,1373,4.261,1376,2.639,1386,4.735,1432,4.735,1490,2.228,1642,4.95,1796,3.384,1849,3.384,1852,3.384,1889,3.384,1925,2.829,1982,2.639,2061,3.066,2094,3.066,2115,3.066,2299,6.227,2306,3.384,2311,3.384,2355,3.384,2489,3.384,2500,3.693,2501,4.261,2515,4.291,2520,3.384,2521,4.735,2525,3.384,2532,5.462,2533,3.384,2539,3.066,2541,5.462,2544,3.384,2545,4.735,2546,4.735,2553,3.384,2554,4.735,2556,6.453,2558,6.958,2559,3.066,2572,3.384,2653,4.735,2655,3.384,2660,3.384,2711,3.384,2713,4.735,2714,6.76,2715,3.866,2716,3.866,2717,5.41,2718,3.866,2719,5.41,2720,3.866,2721,5.41,2722,3.866,2723,3.866,2724,3.866,2725,3.866,2726,3.866,2727,3.866,2728,5.41,2729,5.41,2730,3.866,2731,3.866,2732,3.866,2733,3.866,2734,3.866,2735,3.866,2736,3.866,2737,3.866,2738,3.866,2739,8.036,2740,6.76,2741,7.373,2742,5.41,2743,3.866,2744,3.866,2745,3.866,2746,3.866,2747,5.41,2748,5.41,2749,3.866,2750,6.241,2751,3.866,2752,3.866,2753,3.866,2754,3.866,2755,3.866,2756,3.866,2757,3.866,2758,3.866,2759,3.866,2760,3.866,2761,3.866,2762,5.41,2763,3.866,2764,5.41,2765,3.866,2766,3.866,2767,3.866,2768,3.866,2769,5.41,2770,3.866,2771,3.866,2772,3.384,2773,3.866,2774,3.866,2775,3.866,2776,3.866,2777,3.866,2778,3.384,2779,3.384,2780,3.384,2781,3.866,2782,3.866,2783,3.866,2784,3.866,2785,3.866,2786,3.866,2787,3.866,2788,3.866,2789,3.866,2790,3.866,2791,3.866,2792,3.866,2793,3.866,2794,3.866,2795,3.866,2796,3.866,2797,3.866,2798,3.866,2799,3.866,2800,3.866,2801,3.866,2802,5.41,2803,5.41,2804,5.41,2805,3.866,2806,3.866,2807,3.866,2808,3.866,2809,3.866,2810,3.866,2811,3.866,2812,3.866,2813,3.866,2814,3.866,2815,3.866,2816,6.241,2817,3.866,2818,3.866,2819,3.866,2820,5.41,2821,5.41,2822,3.866,2823,3.866,2824,3.866,2825,3.866,2826,3.866,2827,3.866,2828,3.866,2829,3.866,2830,6.241,2831,5.41,2832,6.241,2833,3.866,2834,3.866,2835,3.866,2836,3.866,2837,6.241,2838,3.866,2839,3.866,2840,3.866,2841,3.866,2842,3.866,2843,3.866,2844,3.866,2845,3.866,2846,3.866,2847,5.41,2848,3.866,2849,3.866,2850,3.866,2851,3.866,2852,3.866,2853,3.866,2854,3.866,2855,4.735,2856,4.291,2857,5.41,2858,3.866,2859,3.866,2860,3.866,2861,3.866,2862,3.866,2863,3.866,2864,2.829,2865,3.384,2866,3.066,2867,3.066,2868,3.866,2869,3.866]],["title/license.html",[2500,2.422,2501,2.422,2864,2.596]],["body/license.html",[29,0.01,58,3,87,0.01,88,0.01,106,2.565,155,4.368,194,3.132,412,4.734,767,3.768,778,2.565,937,2.431,965,4.734,1298,4.368,1418,5.225,1615,4.734,1649,3.441,1768,5.225,1999,6.74,2129,5.225,2504,5.225,2772,5.225,2856,4.734,2864,4.368,2866,4.734,2867,4.734,2870,7.701,2871,7.18,2872,5.97,2873,5.97,2874,5.97,2875,5.97,2876,5.97,2877,5.97,2878,7.18,2879,8.525,2880,5.97,2881,5.97,2882,5.97,2883,5.97,2884,5.97,2885,5.97,2886,5.97,2887,5.97,2888,5.97,2889,5.97,2890,5.97,2891,7.18,2892,5.97,2893,5.97,2894,5.97,2895,5.97,2896,5.97,2897,7.18,2898,7.18,2899,5.97,2900,5.97,2901,5.97,2902,5.97,2903,5.97,2904,5.97,2905,5.97,2906,5.97,2907,5.97,2908,5.97,2909,5.97,2910,5.97,2911,5.97,2912,5.97,2913,5.97,2914,5.97,2915,5.97,2916,5.97,2917,5.97,2918,5.97,2919,5.97,2920,5.97,2921,5.97]],["title/modules.html",[91,2.388]],["body/modules.html",[29,0.01,87,0.01,88,0.01,90,4.33,91,2.628,100,4.33,101,4.33,102,4.33,103,4.33,252,4.071,272,3.849,537,5.246,1714,4.33,1749,4.33,1750,4.33,2922,8.644,2923,8.644,2924,8.644]],["title/overview.html",[2925,5.044]],["body/overview.html",[2,1.106,29,0.012,87,0.009,88,0.009,89,0.89,90,5.761,91,2.144,92,2.223,93,2.6,94,2.6,95,2.307,96,2.397,97,2.6,98,4.528,99,4.528,100,5.473,101,5.355,102,5.725,103,5.355,104,3.303,105,2.6,106,2.223,141,2.144,153,4.473,252,5.146,270,4.528,271,4.528,272,5.09,387,2.397,701,5.228,730,1.999,753,4.528,754,4.528,755,4.528,771,4.943,772,4.612,1129,4.636,1180,4.528,1181,4.528,1696,5.228,1699,4.694,1714,5.355,1715,4.528,1716,4.528,1717,4.528,1745,4.528,1746,4.528,1747,4.528,1748,4.528,1749,5.473,1750,5.473,1787,5.228,1788,4.528,1789,4.528,1790,4.528,1839,5.228,1844,4.528,1845,4.528,1846,4.528,1991,4.528,1992,4.528,1993,4.528,2015,4.636,2022,4.528,2023,4.528,2058,2.397,2080,3.785,2925,4.528,2926,6.572,2927,5.174]],["title/properties.html",[18,0.876,2632,3.105]],["body/properties.html",[8,0.456,18,1.118,29,0.012,87,0.01,88,0.01,190,4.17,341,6.984,420,2.598,2512,5.686,2531,5.686,2539,5.987,2713,5.686,2778,6.607,2779,6.984,2780,5.686,2855,5.686,2856,5.152,2864,4.753,2865,5.686,2866,5.152,2867,5.152,2928,6.497,2929,6.497,2930,6.497,2931,6.497]],["title/miscellaneous/typealiases.html",[2667,2.277,2932,5.091]],["body/miscellaneous/typealiases.html",[5,0.142,17,0.435,18,1.011,29,0.01,31,0.608,32,1.044,44,2.764,50,3.085,87,0.01,88,0.01,154,2.835,277,3.146,290,4.567,292,5.642,294,4.318,296,5.642,407,4.662,408,1.991,546,3.057,689,4.302,942,4.662,975,5.146,998,3.229,1195,4.857,1206,6.227,1433,4.582,1476,3.085,1738,4.567,1769,4.013,1946,5.225,2431,4.662,2438,4.662,2467,5.146,2469,5.146,2492,7.125,2667,3.774,2671,5.146,2672,7.392,2674,5.146,2677,5.146,2691,5.146,2933,5.879,2934,5.879,2935,5.879,2936,7.115,2937,5.879,2938,7.115,2939,5.879,2940,5.879,2941,5.879,2942,5.879,2943,5.879,2944,5.879,2945,5.879,2946,5.879,2947,5.879,2948,5.879,2949,5.879,2950,5.879,2951,5.879]]],"invertedIndex":[["",{"_index":29,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UpdateDto.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"changelog.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":383,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"classes/CreateDto.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"injectables/FilesS3PresignedService.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"injectables/SortBy.html":{},"classes/UtilsService.html":{},"coverage.html":{}}}],["0.13.0",{"_index":2656,"title":{},"body":{"dependencies.html":{}}}],["0.14.1",{"_index":2648,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":2665,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":2647,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":2563,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":2595,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":2605,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":2598,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":2571,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":2599,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":2596,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":2597,"title":{},"body":{"coverage.html":{}}}],["01",{"_index":2506,"title":{},"body":{"changelog.html":{}}}],["06",{"_index":2513,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":2505,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":727,"title":{"classes/EnvironmentVariablesValidator-1.html":{},"classes/FileResponseDto-1.html":{},"classes/Query-1.html":{}},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvironmentVariablesValidator.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query-2.html":{},"classes/QueryCountryDto.html":{},"interfaces/QueryOptions.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["1.0.0",{"_index":2512,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["1.0.1",{"_index":2503,"title":{},"body":{"changelog.html":{}}}],["1.0.2",{"_index":2637,"title":{},"body":{"dependencies.html":{}}}],["1.0.23",{"_index":2638,"title":{},"body":{"dependencies.html":{}}}],["1.4.5",{"_index":2657,"title":{},"body":{"dependencies.html":{}}}],["1.7.2",{"_index":2646,"title":{},"body":{"dependencies.html":{}}}],["1.7.4",{"_index":2650,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":2582,"title":{},"body":{"coverage.html":{}}}],["1/10",{"_index":2577,"title":{},"body":{"coverage.html":{}}}],["1/12",{"_index":2579,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":2611,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":2575,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":2573,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":730,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"classes/CreateDto.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"coverage.html":{},"overview.html":{}}}],["10.2.3",{"_index":2643,"title":{},"body":{"dependencies.html":{}}}],["10.3.9",{"_index":2640,"title":{},"body":{"dependencies.html":{}}}],["10.8.3",{"_index":2661,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":1462,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"coverage.html":{}}}],["10})@isoptional()@isnumberstringornumber()@tonumber()@min(10)@max(500",{"_index":2159,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["11/11",{"_index":2612,"title":{},"body":{"coverage.html":{}}}],["12",{"_index":2926,"title":{},"body":{"overview.html":{}}}],["120",{"_index":257,"title":{},"body":{"controllers/AppController.html":{}}}],["123",{"_index":220,"title":{},"body":{"controllers/AppController.html":{}}}],["123456",{"_index":1858,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["123e4567",{"_index":1041,"title":{},"body":{"classes/Country.html":{}}}],["127",{"_index":1342,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{}}}],["12d3",{"_index":1043,"title":{},"body":{"classes/Country.html":{}}}],["138723",{"_index":1660,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["138723})@isnumber",{"_index":1658,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["14/14",{"_index":2578,"title":{},"body":{"coverage.html":{}}}],["15/15",{"_index":2604,"title":{},"body":{"coverage.html":{}}}],["1b3fd064",{"_index":246,"title":{},"body":{"controllers/AppController.html":{}}}],["1})@isoptional()@isnumberstringornumber()@tonumber()@min(1",{"_index":2161,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["2",{"_index":448,"title":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileResponseDto-2.html":{},"classes/Query-2.html":{}},"body":{"injectables/CommaSeparated.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"classes/Currency.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/SortBy.html":{},"contributing.html":{}}}],["2/2",{"_index":2590,"title":{},"body":{"coverage.html":{}}}],["2/3",{"_index":2603,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":2572,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["2023",{"_index":227,"title":{},"body":{"controllers/AppController.html":{}}}],["2024",{"_index":2504,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["2027",{"_index":229,"title":{},"body":{"controllers/AppController.html":{}}}],["234",{"_index":231,"title":{},"body":{"controllers/AppController.html":{}}}],["25",{"_index":2514,"title":{},"body":{"changelog.html":{}}}],["270",{"_index":1060,"title":{},"body":{"classes/Country.html":{}}}],["2bed",{"_index":247,"title":{},"body":{"controllers/AppController.html":{}}}],["3",{"_index":1054,"title":{"classes/EnvironmentVariablesValidator-3.html":{}},"body":{"classes/Country.html":{},"classes/CreateDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"contributing.html":{}}}],["3.0.1",{"_index":2659,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":2639,"title":{},"body":{"dependencies.html":{}}}],["3.2.2",{"_index":2641,"title":{},"body":{"dependencies.html":{}}}],["3.609.0",{"_index":2633,"title":{},"body":{"dependencies.html":{}}}],["3.613.0",{"_index":2634,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":2570,"title":{},"body":{"coverage.html":{}}}],["3/5",{"_index":2610,"title":{},"body":{"coverage.html":{}}}],["3000",{"_index":1394,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["3166",{"_index":1050,"title":{},"body":{"classes/Country.html":{}}}],["33",{"_index":2574,"title":{},"body":{"coverage.html":{}}}],["330",{"_index":1069,"title":{},"body":{"classes/Country.html":{}}}],["36",{"_index":2927,"title":{},"body":{"overview.html":{}}}],["3600",{"_index":1646,"title":{},"body":{"classes/FileType.html":{},"injectables/FilesS3PresignedService.html":{}}}],["3a25",{"_index":1600,"title":{},"body":{"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{}}}],["4",{"_index":2091,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"contributing.html":{}}}],["4.19.2",{"_index":2651,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":2591,"title":{},"body":{"coverage.html":{}}}],["426614174000",{"_index":1045,"title":{},"body":{"classes/Country.html":{}}}],["4adb",{"_index":1601,"title":{},"body":{"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{}}}],["4bb4",{"_index":248,"title":{},"body":{"controllers/AppController.html":{}}}],["5",{"_index":2092,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"contributing.html":{}}}],["5.17.0",{"_index":2644,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":2592,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":731,"title":{},"body":{"controllers/CountriesController.html":{},"coverage.html":{}}}],["500",{"_index":1934,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/SortByDto.html":{}}}],["5242880",{"_index":674,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["5432",{"_index":1454,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["544",{"_index":232,"title":{},"body":{"controllers/AppController.html":{}}}],["5:30",{"_index":1057,"title":{},"body":{"classes/Country.html":{}}}],["5mb",{"_index":675,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["6",{"_index":1104,"title":{},"body":{"classes/CreateDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"contributing.html":{}}}],["6/6",{"_index":2624,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":2087,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"coverage.html":{}}}],["65535",{"_index":1443,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["66",{"_index":2602,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":2080,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"overview.html":{}}}],["7.1.0",{"_index":2654,"title":{},"body":{"dependencies.html":{}}}],["7.3.1",{"_index":2642,"title":{},"body":{"dependencies.html":{}}}],["7.4.0",{"_index":2652,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":2666,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":2576,"title":{},"body":{"coverage.html":{}}}],["7/8",{"_index":2607,"title":{},"body":{"coverage.html":{}}}],["76",{"_index":2089,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{}}}],["77",{"_index":984,"title":{},"body":{"injectables/CountriesService.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{}}}],["8",{"_index":2083,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"coverage.html":{}}}],["8.12.0",{"_index":2663,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":2608,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":1096,"title":{},"body":{"classes/CreateDto.html":{}}}],["87",{"_index":2606,"title":{},"body":{"coverage.html":{}}}],["9/9",{"_index":2609,"title":{},"body":{"coverage.html":{}}}],["91",{"_index":1037,"title":{},"body":{"classes/Country.html":{}}}],["9]+(,[0",{"_index":425,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["9]+)*$/.test(propertyvalue",{"_index":426,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["_",{"_index":332,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/DynamicQueryBuilder.html":{},"classes/HttpErrorFilter.html":{},"injectables/PrismaService.html":{},"classes/Query-2.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{}}}],["_.clone(errorresponse",{"_index":2048,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["_.clone(r",{"_index":377,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["_.clone(request.body",{"_index":371,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{}}}],["_.clone(request.header",{"_index":373,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{}}}],["_.get(where",{"_index":2369,"title":{},"body":{"classes/Query-2.html":{}}}],["_.isarray(r.message",{"_index":343,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["_.isempty(rows",{"_index":2297,"title":{},"body":{"injectables/PrismaService.html":{}}}],["_.keys(conds",{"_index":1309,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{}}}],["_.mapkeys(where",{"_index":2378,"title":{},"body":{"classes/Query-2.html":{}}}],["_.pick(values",{"_index":1307,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["_.pick(where",{"_index":2372,"title":{},"body":{"classes/Query-2.html":{}}}],["_.unset(where",{"_index":2375,"title":{},"body":{"classes/Query-2.html":{}}}],["_.values(conds",{"_index":1311,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{}}}],["_validationfilter",{"_index":316,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["_validationfilter(validationerrors",{"_index":319,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["a456",{"_index":1044,"title":{},"body":{"classes/Country.html":{}}}],["a5f3686b1b53",{"_index":250,"title":{},"body":{"controllers/AppController.html":{}}}],["a9c6",{"_index":1602,"title":{},"body":{"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{}}}],["abbr",{"_index":835,"title":{},"body":{"injectables/CountriesService.html":{},"classes/Country.html":{}}}],["abbreviation",{"_index":1027,"title":{},"body":{"classes/Country.html":{}}}],["abc",{"_index":1968,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["abc123",{"_index":1586,"title":{},"body":{"classes/FileResponseDto.html":{}}}],["above",{"_index":2896,"title":{},"body":{"license.html":{}}}],["abstract",{"_index":2176,"title":{},"body":{"classes/PaginationResponseDto.html":{}}}],["access",{"_index":1479,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"modules/FilesS3Module.html":{},"injectables/HomeService.html":{}}}],["accessing",{"_index":1626,"title":{},"body":{"classes/FileType.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["accesskeyid",{"_index":665,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"interfaces/IFileConfig.html":{}}}],["accessors",{"_index":462,"title":{},"body":{"classes/ConfigService.html":{}}}],["acl",{"_index":1851,"title":{},"body":{"modules/FilesS3PresignedModule.html":{}}}],["action",{"_index":2918,"title":{},"body":{"license.html":{}}}],["actions",{"_index":2266,"title":{},"body":{"injectables/PrismaService.html":{}}}],["add",{"_index":838,"title":{},"body":{"injectables/CountriesService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{},"contributing.html":{},"index.html":{}}}],["addhttpqueryerror",{"_index":2323,"title":{},"body":{"classes/Query.html":{}}}],["addhttpqueryerror(module",{"_index":2324,"title":{},"body":{"classes/Query.html":{}}}],["adding",{"_index":1321,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["additional",{"_index":787,"title":{},"body":{"injectables/CountriesService.html":{},"classes/HttpErrorFilter.html":{},"classes/UtilsService.html":{}}}],["addqueryerror",{"_index":2331,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["addqueryerror(module",{"_index":2341,"title":{},"body":{"classes/Query-1.html":{}}}],["address",{"_index":219,"title":{},"body":{"controllers/AppController.html":{}}}],["adhere",{"_index":2550,"title":{},"body":{"contributing.html":{}}}],["adheres",{"_index":1076,"title":{},"body":{"classes/CreateDto.html":{}}}],["admin",{"_index":565,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["against",{"_index":2699,"title":{},"body":{"miscellaneous/functions.html":{}}}],["age",{"_index":1945,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["aggregate",{"_index":119,"title":{},"body":{"modules/ApiModule.html":{}}}],["aggregated",{"_index":2941,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["aggregates",{"_index":108,"title":{},"body":{"modules/ApiModule.html":{}}}],["algorithm",{"_index":613,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IJWTConfig.html":{}}}],["alias",{"_index":814,"title":{},"body":{"injectables/CountriesService.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/UtilsService.html":{}}}],["aliases",{"_index":942,"title":{},"body":{"injectables/CountriesService.html":{},"classes/UtilsService.html":{},"miscellaneous/typealiases.html":{}}}],["alias}.${filter.field",{"_index":908,"title":{},"body":{"injectables/CountriesService.html":{},"classes/UtilsService.html":{}}}],["alias}.${sortitem.field",{"_index":943,"title":{},"body":{"injectables/CountriesService.html":{},"classes/UtilsService.html":{}}}],["alias}.abbr",{"_index":836,"title":{},"body":{"injectables/CountriesService.html":{}}}],["alias}.code",{"_index":837,"title":{},"body":{"injectables/CountriesService.html":{}}}],["alias}.id_currency",{"_index":817,"title":{},"body":{"injectables/CountriesService.html":{}}}],["alias}.id_timezone",{"_index":828,"title":{},"body":{"injectables/CountriesService.html":{}}}],["alias}.name",{"_index":824,"title":{},"body":{"injectables/CountriesService.html":{}}}],["alias}.offset",{"_index":832,"title":{},"body":{"injectables/CountriesService.html":{}}}],["alias}.offset_in_minutes",{"_index":833,"title":{},"body":{"injectables/CountriesService.html":{}}}],["alias}.symbol",{"_index":823,"title":{},"body":{"injectables/CountriesService.html":{}}}],["alias}.text",{"_index":834,"title":{},"body":{"injectables/CountriesService.html":{}}}],["alias}.value",{"_index":831,"title":{},"body":{"injectables/CountriesService.html":{}}}],["allconfigtype",{"_index":1738,"title":{},"body":{"injectables/FilesLocalService.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/HomeService.html":{},"injectables/PrismaService.html":{},"miscellaneous/typealiases.html":{}}}],["allexceptionsfilter",{"_index":1,"title":{"classes/AllExceptionsFilter.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["allow",{"_index":1633,"title":{},"body":{"classes/FileType.html":{},"modules/HelperModule.html":{}}}],["allowed",{"_index":1494,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"injectables/FilesS3PresignedService.html":{}}}],["allowedkeys",{"_index":2362,"title":{},"body":{"classes/Query-2.html":{}}}],["allowedkeys.join",{"_index":2370,"title":{},"body":{"classes/Query-2.html":{}}}],["allowing",{"_index":2468,"title":{},"body":{"classes/UpdateDto.html":{}}}],["allows",{"_index":689,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"modules/FilesModule.html":{},"miscellaneous/typealiases.html":{}}}],["along",{"_index":1183,"title":{},"body":{"modules/CurrenciesModule.html":{}}}],["alpha",{"_index":1051,"title":{},"body":{"classes/Country.html":{}}}],["already",{"_index":1212,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["amazing",{"_index":2861,"title":{},"body":{"index.html":{}}}],["amazon",{"_index":1820,"title":{},"body":{"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["and/or",{"_index":2889,"title":{},"body":{"license.html":{}}}],["annotated",{"_index":1016,"title":{},"body":{"classes/Country.html":{}}}],["another",{"_index":2706,"title":{},"body":{"miscellaneous/functions.html":{}}}],["any).message",{"_index":82,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["api",{"_index":120,"title":{},"body":{"modules/ApiModule.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/Country.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"controllers/FilesS3Controller.html":{},"injectables/HomeService.html":{},"interfaces/IAppConfig.html":{},"index.html":{}}}],["api/v1/uploads/example",{"_index":1604,"title":{},"body":{"classes/FileResponseDto-1.html":{},"injectables/FilesLocalService.html":{}}}],["api_key",{"_index":648,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/ISMSConfig.html":{}}}],["api_prefix",{"_index":517,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{}}}],["apibody",{"_index":1683,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["apiconsumes",{"_index":1684,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["apiconsumes('multipart/form",{"_index":1704,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["apicreatedresponse",{"_index":1155,"title":{},"body":{"controllers/CurrenciesController.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{}}}],["apicreatedresponse({type",{"_index":1674,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{}}}],["apiexcludeendpoint",{"_index":1685,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["apiextramodels",{"_index":1962,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["apiextramodels(filterdto",{"_index":1980,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["apiextramodels(filterquerydto",{"_index":1964,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["apifile",{"_index":1688,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"coverage.html":{}}}],["apifilterquery",{"_index":739,"title":{},"body":{"controllers/CountriesController.html":{}}}],["apifilterquery('filters",{"_index":750,"title":{},"body":{"controllers/CountriesController.html":{}}}],["apifilterquery(fieldname",{"_index":1978,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["apimodule",{"_index":90,"title":{"modules/ApiModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["apimultifile",{"_index":2588,"title":{},"body":{"coverage.html":{}}}],["apinestedquery",{"_index":743,"title":{},"body":{"controllers/CountriesController.html":{}}}],["apiokresponse",{"_index":696,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{}}}],["apiparam",{"_index":1156,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["apiprefix",{"_index":581,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"injectables/HomeService.html":{},"interfaces/IAppConfig.html":{}}}],["apiproperty",{"_index":1109,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{}}}],["apiproperty()@isstring",{"_index":2460,"title":{},"body":{"classes/SortByDto.html":{},"classes/SortCountryDto.html":{}}}],["apiproperty()@type(undefined)@isstring",{"_index":2463,"title":{},"body":{"classes/SortCountryDto.html":{}}}],["apiproperty({example",{"_index":1654,"title":{},"body":{"classes/FileUploadDto.html":{},"classes/FilterQueryDto.html":{},"classes/SortByDto.html":{}}}],["apiproperty({type",{"_index":1255,"title":{},"body":{"classes/Currency.html":{},"classes/FileType.html":{}}}],["apipropertyoptional",{"_index":1895,"title":{},"body":{"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{}}}],["apipropertyoptional()@transform",{"_index":2401,"title":{},"body":{"classes/QueryCountryDto.html":{}}}],["apipropertyoptional({description",{"_index":2158,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["apipropertyoptional({name",{"_index":2153,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["apipropertyoptional({type",{"_index":2144,"title":{},"body":{"classes/PaginationMetaDto.html":{},"classes/QueryCountryDto.html":{}}}],["apiquery",{"_index":738,"title":{},"body":{"controllers/CountriesController.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["apiresponseproperty",{"_index":1017,"title":{},"body":{"classes/Country.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{}}}],["apiresponseproperty({type",{"_index":1024,"title":{},"body":{"classes/Country.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{}}}],["apitags",{"_index":180,"title":{},"body":{"controllers/AppController.html":{},"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"controllers/HomeController.html":{}}}],["apitags('countries",{"_index":704,"title":{},"body":{"controllers/CountriesController.html":{}}}],["apitags('currencies",{"_index":1161,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["apitags('files",{"_index":1698,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{}}}],["apitags('health",{"_index":191,"title":{},"body":{"controllers/AppController.html":{}}}],["apitags('home",{"_index":2019,"title":{},"body":{"controllers/HomeController.html":{}}}],["app",{"_index":1381,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"injectables/HomeService.html":{},"miscellaneous/functions.html":{}}}],["app.controller",{"_index":299,"title":{},"body":{"modules/AppModule.html":{}}}],["app_description",{"_index":1354,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["app_filter",{"_index":124,"title":{},"body":{"modules/ApiModule.html":{},"classes/HttpErrorFilter.html":{}}}],["app_name",{"_index":1355,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["app_port",{"_index":513,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{}}}],["app_prefix",{"_index":1356,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["app_version",{"_index":1357,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["appconfig",{"_index":290,"title":{},"body":{"modules/AppModule.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/FileType.html":{},"miscellaneous/typealiases.html":{}}}],["appconfig).backenddomain",{"_index":1635,"title":{},"body":{"classes/FileType.html":{}}}],["appcontroller",{"_index":140,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appinfo",{"_index":2016,"title":{},"body":{"controllers/HomeController.html":{},"injectables/HomeService.html":{}}}],["applicable",{"_index":2775,"title":{},"body":{"index.html":{}}}],["application",{"_index":44,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/Country.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"modules/FilesS3Module.html":{},"injectables/FilesService.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"injectables/ResolvePromisesInterceptor.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["application's",{"_index":149,"title":{},"body":{"controllers/AppController.html":{},"injectables/HomeService.html":{}}}],["applications",{"_index":2727,"title":{},"body":{"index.html":{}}}],["applies",{"_index":1783,"title":{},"body":{"controllers/FilesS3Controller.html":{}}}],["apply",{"_index":1925,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"index.html":{}}}],["applydecorators",{"_index":1969,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["appmodule",{"_index":252,"title":{"modules/AppModule.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/HttpErrorFilter.html":{},"modules.html":{},"overview.html":{}}}],["appprefix",{"_index":1384,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"injectables/HomeService.html":{}}}],["appropriate",{"_index":1131,"title":{},"body":{"controllers/CurrenciesController.html":{},"modules/FilesModule.html":{}}}],["area",{"_index":1341,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["args",{"_index":402,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["args.property",{"_index":428,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["arguments",{"_index":403,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"injectables/SortBy.html":{}}}],["argumentshost",{"_index":39,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["arising",{"_index":2920,"title":{},"body":{"license.html":{}}}],["array",{"_index":327,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"modules/FilesModule.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PrismaService.html":{},"classes/Query-2.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{}}}],["array.from(array(endpage",{"_index":2116,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["asas",{"_index":1736,"title":{},"body":{"injectables/FilesLocalService.html":{}}}],["asc",{"_index":434,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{}}}],["asc'})@isstring()@matches(/^(asc|desc|asc|desc",{"_index":2458,"title":{},"body":{"classes/SortByDto.html":{}}}],["asc1",{"_index":1967,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["ascending",{"_index":1947,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["asc|desc|asc|desc|asc|desc",{"_index":455,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["asia",{"_index":790,"title":{},"body":{"injectables/CountriesService.html":{},"classes/Country.html":{}}}],["asia/mumbai",{"_index":1067,"title":{},"body":{"classes/Country.html":{}}}],["associated",{"_index":1615,"title":{},"body":{"classes/FileType.html":{},"classes/Query-1.html":{},"license.html":{}}}],["async",{"_index":156,"title":{},"body":{"controllers/AppController.html":{},"injectables/CommaSeparated.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"injectables/SortBy.html":{}}}],["asynchronously",{"_index":1850,"title":{},"body":{"modules/FilesS3PresignedModule.html":{}}}],["attributes",{"_index":1006,"title":{},"body":{"classes/Country.html":{}}}],["audience",{"_index":617,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IJWTConfig.html":{}}}],["authentication",{"_index":2729,"title":{},"body":{"index.html":{}}}],["author",{"_index":2865,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authorization",{"_index":2755,"title":{},"body":{"index.html":{}}}],["authors",{"_index":2912,"title":{},"body":{"license.html":{}}}],["authsource",{"_index":564,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["automatic",{"_index":1973,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["available",{"_index":1726,"title":{},"body":{"modules/FilesLocalModule.html":{},"modules/HelperModule.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"miscellaneous/enumerations.html":{}}}],["await",{"_index":712,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{}}}],["awesome",{"_index":2737,"title":{},"body":{"index.html":{}}}],["aws",{"_index":540,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"dependencies.html":{}}}],["aws_access_key_id",{"_index":524,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["aws_default_s3_bucket",{"_index":526,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["aws_s3_access_key_id",{"_index":585,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IAwsConfig.html":{}}}],["aws_s3_bucket_name",{"_index":589,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IAwsConfig.html":{}}}],["aws_s3_companion_secret",{"_index":599,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IAwsConfig.html":{}}}],["aws_s3_default_region",{"_index":591,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IAwsConfig.html":{}}}],["aws_s3_endpoint",{"_index":595,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IAwsConfig.html":{}}}],["aws_s3_region",{"_index":527,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["aws_s3_secret_access_key",{"_index":587,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IAwsConfig.html":{}}}],["aws_s3_server_host",{"_index":597,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IAwsConfig.html":{}}}],["aws_s3_temp_directory",{"_index":593,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IAwsConfig.html":{}}}],["aws_secret_access_key",{"_index":525,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["awsdefaults3bucket",{"_index":669,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"interfaces/IFileConfig.html":{}}}],["awss3config",{"_index":584,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["awss3region",{"_index":671,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"interfaces/IFileConfig.html":{}}}],["axios",{"_index":2645,"title":{},"body":{"dependencies.html":{}}}],["b",{"_index":2543,"title":{},"body":{"contributing.html":{}}}],["b3af",{"_index":249,"title":{},"body":{"controllers/AppController.html":{}}}],["backend",{"_index":1622,"title":{},"body":{"classes/FileType.html":{},"interfaces/IAppConfig.html":{}}}],["backend_domain",{"_index":516,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{}}}],["backenddomain",{"_index":578,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"interfaces/IAppConfig.html":{}}}],["backers",{"_index":2862,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":206,"title":{},"body":{"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/FileNotImageException.html":{}}}],["badrequestexceptionfilter",{"_index":311,"title":{"classes/BadRequestExceptionFilter.html":{}},"body":{"classes/BadRequestExceptionFilter.html":{},"coverage.html":{}}}],["baeumer",{"_index":2788,"title":{},"body":{"index.html":{}}}],["bar",{"_index":238,"title":{},"body":{"controllers/AppController.html":{}}}],["base",{"_index":1775,"title":{},"body":{"controllers/FilesS3Controller.html":{},"classes/Query-2.html":{},"classes/UtilsService.html":{}}}],["base64",{"_index":1835,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["based",{"_index":777,"title":{},"body":{"injectables/CountriesService.html":{},"classes/FileType.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/PaginationMetaDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{}}}],["baseexceptionfilter",{"_index":2224,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["basefields",{"_index":1240,"title":{},"body":{"injectables/CurrenciesService.html":{},"classes/UtilsService.html":{}}}],["basefields.join",{"_index":1244,"title":{},"body":{"injectables/CurrenciesService.html":{},"classes/UtilsService.html":{}}}],["basequery",{"_index":798,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/PaginationService.html":{}}}],["basequery.join",{"_index":852,"title":{},"body":{"injectables/CountriesService.html":{}}}],["bash",{"_index":2821,"title":{},"body":{"index.html":{}}}],["baz",{"_index":241,"title":{},"body":{"controllers/AppController.html":{}}}],["be123892",{"_index":225,"title":{},"body":{"controllers/AppController.html":{}}}],["before",{"_index":2435,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{},"contributing.html":{}}}],["between",{"_index":1442,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"modules/FilesModule.html":{}}}],["bignumberstrings",{"_index":570,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["binary",{"_index":1705,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["blank",{"_index":2300,"title":{},"body":{"injectables/PrismaService.html":{}}}],["body",{"_index":370,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"controllers/CurrenciesController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"classes/HttpErrorFilter.html":{},"index.html":{}}}],["boilerplate",{"_index":2714,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":411,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/PaginationResponseDto.html":{},"injectables/SortBy.html":{}}}],["boolean(this.get(key",{"_index":548,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["bootstrap",{"_index":95,"title":{},"body":{"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/CountriesModule.html":{},"modules/CurrenciesModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["boundary",{"_index":1977,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["box",{"_index":2731,"title":{},"body":{"index.html":{}}}],["branch",{"_index":2540,"title":{},"body":{"contributing.html":{}}}],["break",{"_index":971,"title":{},"body":{"injectables/CountriesService.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["breaking",{"_index":2849,"title":{},"body":{"index.html":{}}}],["browse",{"_index":2924,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2922,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":1483,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["bucket.s3.amazonaws.com/unique",{"_index":1594,"title":{},"body":{"classes/FileResponseDto.html":{}}}],["buffer",{"_index":2067,"title":{},"body":{"interfaces/IFileConfig.html":{}}}],["bug",{"_index":2507,"title":{},"body":{"changelog.html":{},"contributing.html":{}}}],["bugs",{"_index":2531,"title":{},"body":{"contributing.html":{},"properties.html":{}}}],["build",{"_index":1274,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["builddeletequery",{"_index":1275,"title":{},"body":{"classes/DynamicQueryBuilder.html":{}}}],["builddeletequery(options",{"_index":1279,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["builddynamicquery",{"_index":916,"title":{},"body":{"injectables/CountriesService.html":{},"classes/UtilsService.html":{}}}],["builddynamicquery(paginationquery",{"_index":2486,"title":{},"body":{"classes/UtilsService.html":{}}}],["builder",{"_index":2308,"title":{},"body":{"classes/Query.html":{}}}],["building",{"_index":1197,"title":{},"body":{"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{},"index.html":{}}}],["buildinsertquery",{"_index":1276,"title":{},"body":{"classes/DynamicQueryBuilder.html":{}}}],["buildinsertquery(options",{"_index":1284,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["buildrun",{"_index":2826,"title":{},"body":{"index.html":{}}}],["builds",{"_index":780,"title":{},"body":{"injectables/CountriesService.html":{},"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{}}}],["buildselectquery",{"_index":1277,"title":{},"body":{"classes/DynamicQueryBuilder.html":{}}}],["buildselectquery(options",{"_index":1287,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["buildtests",{"_index":2811,"title":{},"body":{"index.html":{}}}],["buildupdatequery",{"_index":1278,"title":{},"body":{"classes/DynamicQueryBuilder.html":{}}}],["buildupdatequery(options",{"_index":1289,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["built",{"_index":2489,"title":{},"body":{"classes/UtilsService.html":{},"index.html":{}}}],["bundles",{"_index":757,"title":{},"body":{"modules/CountriesModule.html":{},"modules/CurrenciesModule.html":{}}}],["business",{"_index":765,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"modules/FilesLocalModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{}}}],["bytes",{"_index":1496,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileUploadDto.html":{}}}],["c",{"_index":965,"title":{},"body":{"injectables/CountriesService.html":{},"classes/Query-2.html":{},"license.html":{}}}],["c${0",{"_index":819,"title":{},"body":{"injectables/CountriesService.html":{}}}],["c${0}.id_currency",{"_index":874,"title":{},"body":{"injectables/CountriesService.html":{}}}],["c${index",{"_index":877,"title":{},"body":{"injectables/CountriesService.html":{}}}],["c${index}.id",{"_index":993,"title":{},"body":{"injectables/CountriesService.html":{}}}],["c${index}.id_currency",{"_index":878,"title":{},"body":{"injectables/CountriesService.html":{}}}],["c${index}.name",{"_index":895,"title":{},"body":{"injectables/CountriesService.html":{}}}],["c.capital",{"_index":964,"title":{},"body":{"injectables/CountriesService.html":{}}}],["c.code",{"_index":2363,"title":{},"body":{"classes/Query-2.html":{}}}],["c.continent",{"_index":963,"title":{},"body":{"injectables/CountriesService.html":{}}}],["c.decimal_digits",{"_index":2367,"title":{},"body":{"classes/Query-2.html":{}}}],["c.dial_code",{"_index":962,"title":{},"body":{"injectables/CountriesService.html":{}}}],["c.id",{"_index":989,"title":{},"body":{"injectables/CountriesService.html":{}}}],["c.id_country",{"_index":956,"title":{},"body":{"injectables/CountriesService.html":{}}}],["c.id_currency",{"_index":893,"title":{},"body":{"injectables/CountriesService.html":{},"classes/Query-2.html":{}}}],["c.id_timezone",{"_index":896,"title":{},"body":{"injectables/CountriesService.html":{}}}],["c.iso",{"_index":958,"title":{},"body":{"injectables/CountriesService.html":{}}}],["c.iso3",{"_index":960,"title":{},"body":{"injectables/CountriesService.html":{}}}],["c.name",{"_index":957,"title":{},"body":{"injectables/CountriesService.html":{},"classes/Query-2.html":{}}}],["c.name_plural",{"_index":2364,"title":{},"body":{"classes/Query-2.html":{}}}],["c.nice_name",{"_index":959,"title":{},"body":{"injectables/CountriesService.html":{}}}],["c.num_code",{"_index":961,"title":{},"body":{"injectables/CountriesService.html":{}}}],["c.rounding",{"_index":2368,"title":{},"body":{"classes/Query-2.html":{}}}],["c.status",{"_index":2371,"title":{},"body":{"classes/Query-2.html":{}}}],["c.symbol",{"_index":2365,"title":{},"body":{"classes/Query-2.html":{}}}],["c.symbol_native",{"_index":2366,"title":{},"body":{"classes/Query-2.html":{}}}],["ca",{"_index":1412,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["calculate",{"_index":2101,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["callback",{"_index":1811,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["called",{"_index":234,"title":{},"body":{"controllers/AppController.html":{},"injectables/PrismaService.html":{}}}],["callhandler",{"_index":2443,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["cantuploadfiletype",{"_index":1868,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["capabilities",{"_index":2185,"title":{},"body":{"injectables/PaginationService.html":{}}}],["capital",{"_index":1013,"title":{},"body":{"classes/Country.html":{}}}],["case",{"_index":969,"title":{},"body":{"injectables/CountriesService.html":{},"classes/PrismaClientExceptionFilter.html":{},"index.html":{}}}],["case.transformer",{"_index":1116,"title":{},"body":{"classes/CreateDto.html":{}}}],["case.transformer.ts",{"_index":2626,"title":{},"body":{"coverage.html":{}}}],["cases",{"_index":975,"title":{},"body":{"injectables/CountriesService.html":{},"miscellaneous/typealiases.html":{}}}],["catch",{"_index":12,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/QueryFailedFilter.html":{}}}],["catch(badrequestexception",{"_index":337,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["catch(exception",{"_index":37,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["catch(httpexception",{"_index":2055,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catch(prisma.prismaclientknownrequesterror",{"_index":2226,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["catch(queryfailederror",{"_index":2417,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["catches",{"_index":41,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["cause",{"_index":2239,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["caused",{"_index":2329,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["cbac",{"_index":2757,"title":{},"body":{"index.html":{}}}],["cbcfa8b8",{"_index":1599,"title":{},"body":{"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{}}}],["cd",{"_index":2781,"title":{},"body":{"index.html":{}}}],["cert",{"_index":1473,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["certificate",{"_index":1413,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["certificates",{"_index":1421,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["change",{"_index":2299,"title":{},"body":{"injectables/PrismaService.html":{},"index.html":{}}}],["changelog",{"_index":2502,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["changes",{"_index":2544,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["characters",{"_index":1089,"title":{},"body":{"classes/CreateDto.html":{}}}],["charge",{"_index":2875,"title":{},"body":{"license.html":{}}}],["check",{"_index":145,"title":{},"body":{"controllers/AppController.html":{},"injectables/CurrenciesService.html":{},"injectables/PrismaService.html":{},"miscellaneous/functions.html":{}}}],["checking",{"_index":389,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{},"index.html":{}}}],["checkout",{"_index":2542,"title":{},"body":{"contributing.html":{}}}],["checks",{"_index":152,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/PrismaService.html":{},"miscellaneous/functions.html":{}}}],["choice",{"_index":1765,"title":{},"body":{"modules/FilesModule.html":{}}}],["choose",{"_index":2807,"title":{},"body":{"index.html":{}}}],["chore",{"_index":2842,"title":{},"body":{"index.html":{}}}],["city",{"_index":1014,"title":{},"body":{"classes/Country.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["claim",{"_index":2915,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/ConfigService.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UpdateDto.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UpdateDto.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["classconstructor",{"_index":2710,"title":{},"body":{"miscellaneous/functions.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/ConfigService.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UpdateDto.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"overview.html":{}}}],["classreference",{"_index":2173,"title":{},"body":{"classes/PaginationResponseDto.html":{},"miscellaneous/functions.html":{}}}],["clause",{"_index":2490,"title":{},"body":{"classes/UtilsService.html":{}}}],["clauses",{"_index":911,"title":{},"body":{"injectables/CountriesService.html":{},"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{}}}],["client",{"_index":690,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"modules/FilesS3Module.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/ResolvePromisesInterceptor.html":{}}}],["clone",{"_index":2750,"title":{},"body":{"index.html":{}}}],["closed",{"_index":2851,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":1590,"title":{},"body":{"classes/FileResponseDto.html":{}}}],["cluster",{"_index":2835,"title":{},"body":{"index.html":{}}}],["cluster_apimodule",{"_index":98,"title":{},"body":{"modules/ApiModule.html":{},"overview.html":{}}}],["cluster_apimodule_imports",{"_index":99,"title":{},"body":{"modules/ApiModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":270,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":271,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_countriesmodule",{"_index":753,"title":{},"body":{"modules/CountriesModule.html":{},"overview.html":{}}}],["cluster_countriesmodule_exports",{"_index":755,"title":{},"body":{"modules/CountriesModule.html":{},"overview.html":{}}}],["cluster_countriesmodule_providers",{"_index":754,"title":{},"body":{"modules/CountriesModule.html":{},"overview.html":{}}}],["cluster_currenciesmodule",{"_index":1180,"title":{},"body":{"modules/CurrenciesModule.html":{},"overview.html":{}}}],["cluster_currenciesmodule_providers",{"_index":1181,"title":{},"body":{"modules/CurrenciesModule.html":{},"overview.html":{}}}],["cluster_fileslocalmodule",{"_index":1715,"title":{},"body":{"modules/FilesLocalModule.html":{},"overview.html":{}}}],["cluster_fileslocalmodule_exports",{"_index":1716,"title":{},"body":{"modules/FilesLocalModule.html":{},"overview.html":{}}}],["cluster_fileslocalmodule_providers",{"_index":1717,"title":{},"body":{"modules/FilesLocalModule.html":{},"overview.html":{}}}],["cluster_filesmodule",{"_index":1745,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_filesmodule_exports",{"_index":1748,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_filesmodule_imports",{"_index":1747,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_filesmodule_providers",{"_index":1746,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_filess3module",{"_index":1788,"title":{},"body":{"modules/FilesS3Module.html":{},"overview.html":{}}}],["cluster_filess3module_exports",{"_index":1789,"title":{},"body":{"modules/FilesS3Module.html":{},"overview.html":{}}}],["cluster_filess3module_providers",{"_index":1790,"title":{},"body":{"modules/FilesS3Module.html":{},"overview.html":{}}}],["cluster_filess3presignedmodule",{"_index":1844,"title":{},"body":{"modules/FilesS3PresignedModule.html":{},"overview.html":{}}}],["cluster_filess3presignedmodule_exports",{"_index":1845,"title":{},"body":{"modules/FilesS3PresignedModule.html":{},"overview.html":{}}}],["cluster_filess3presignedmodule_providers",{"_index":1846,"title":{},"body":{"modules/FilesS3PresignedModule.html":{},"overview.html":{}}}],["cluster_helpermodule",{"_index":1991,"title":{},"body":{"modules/HelperModule.html":{},"overview.html":{}}}],["cluster_helpermodule_exports",{"_index":1993,"title":{},"body":{"modules/HelperModule.html":{},"overview.html":{}}}],["cluster_helpermodule_providers",{"_index":1992,"title":{},"body":{"modules/HelperModule.html":{},"overview.html":{}}}],["cluster_homemodule",{"_index":2022,"title":{},"body":{"modules/HomeModule.html":{},"overview.html":{}}}],["cluster_homemodule_providers",{"_index":2023,"title":{},"body":{"modules/HomeModule.html":{},"overview.html":{}}}],["code",{"_index":354,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/FileNotImageException.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/Query-2.html":{},"contributing.html":{},"index.html":{}}}],["codeql",{"_index":2770,"title":{},"body":{"index.html":{}}}],["codes",{"_index":1005,"title":{},"body":{"classes/Country.html":{},"controllers/CurrenciesController.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["column",{"_index":2234,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"classes/Query-2.html":{}}}],["column_name",{"_index":2236,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["columns",{"_index":1297,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["column’s",{"_index":2235,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["combines",{"_index":1971,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["comes",{"_index":2744,"title":{},"body":{"index.html":{}}}],["comma",{"_index":392,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["command",{"_index":1642,"title":{},"body":{"classes/FileType.html":{},"injectables/FilesS3PresignedService.html":{},"index.html":{}}}],["commaseparated",{"_index":386,"title":{"injectables/CommaSeparated.html":{}},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{},"coverage.html":{}}}],["commit",{"_index":2545,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["commitlint",{"_index":2765,"title":{},"body":{"index.html":{}}}],["commits",{"_index":2768,"title":{},"body":{"index.html":{}}}],["common",{"_index":1995,"title":{},"body":{"modules/HelperModule.html":{},"miscellaneous/functions.html":{}}}],["common/helper/helper.module",{"_index":289,"title":{},"body":{"modules/AppModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["common/helper/services/config.service",{"_index":1802,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["common/shared/services/pgsql.service",{"_index":335,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["community",{"_index":2524,"title":{},"body":{"contributing.html":{}}}],["components",{"_index":1719,"title":{},"body":{"modules/FilesLocalModule.html":{},"injectables/FilesS3Service.html":{}}}],["compose",{"_index":2740,"title":{},"body":{"index.html":{}}}],["compression",{"_index":2649,"title":{},"body":{"dependencies.html":{}}}],["conditionally",{"_index":1754,"title":{},"body":{"modules/FilesModule.html":{}}}],["conditions",{"_index":1298,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{},"license.html":{}}}],["conditions[key",{"_index":1319,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["conds",{"_index":1306,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{}}}],["config",{"_index":509,"title":{},"body":{"classes/ConfigService.html":{},"injectables/CountriesService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/UtilsService.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["config.alias",{"_index":2495,"title":{},"body":{"classes/UtilsService.html":{}}}],["config.alias(0",{"_index":936,"title":{},"body":{"injectables/CountriesService.html":{}}}],["config.alias(index",{"_index":923,"title":{},"body":{"injectables/CountriesService.html":{}}}],["config.ts",{"_index":2630,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["config.type",{"_index":1371,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileType.html":{},"interfaces/IFileConfig.html":{}}}],["config.type.ts",{"_index":2672,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["config/app.config",{"_index":291,"title":{},"body":{"modules/AppModule.html":{},"classes/FileType.html":{}}}],["config/database.config",{"_index":293,"title":{},"body":{"modules/AppModule.html":{}}}],["config/file.config",{"_index":295,"title":{},"body":{"modules/AppModule.html":{},"classes/FileType.html":{}}}],["config/logger.config",{"_index":297,"title":{},"body":{"modules/AppModule.html":{}}}],["config/type/app",{"_index":1370,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"classes/FileType.html":{}}}],["config/type/config.type",{"_index":1739,"title":{},"body":{"injectables/FilesLocalService.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/HomeService.html":{},"injectables/PrismaService.html":{}}}],["config/type/file",{"_index":1497,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"interfaces/IFileConfig.html":{}}}],["config/type/logger",{"_index":1532,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["configmodule",{"_index":281,"title":{},"body":{"modules/AppModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["configmodule.forroot",{"_index":302,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":458,"title":{"classes/ConfigService.html":{}},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"injectables/FilesLocalService.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"modules/HelperModule.html":{},"injectables/HomeService.html":{},"injectables/PrismaService.html":{},"coverage.html":{}}}],["configservice.get('database.url",{"_index":2280,"title":{},"body":{"injectables/PrismaService.html":{}}}],["configservice.get('file.awss3region",{"_index":1805,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["configservice.get('file.maxfilesize",{"_index":1816,"title":{},"body":{"modules/FilesS3Module.html":{}}}],["configservice.getorthrow('file.accesskeyid",{"_index":1806,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["configservice.getorthrow('file.awsdefaults3bucket",{"_index":1808,"title":{},"body":{"modules/FilesS3Module.html":{}}}],["configservice.getorthrow('file.secretaccesskey",{"_index":1807,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["configservice.prismaconfig",{"_index":2281,"title":{},"body":{"injectables/PrismaService.html":{}}}],["configuration",{"_index":277,"title":{},"body":{"modules/AppModule.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileType.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/HomeService.html":{},"interfaces/IAppConfig.html":{},"injectables/PrismaService.html":{},"classes/Query-2.html":{},"classes/UtilsService.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["configurations",{"_index":785,"title":{},"body":{"injectables/CountriesService.html":{},"modules/FilesS3PresignedModule.html":{}}}],["configure",{"_index":1252,"title":{},"body":{"classes/Currency.html":{}}}],["configured",{"_index":1849,"title":{},"body":{"modules/FilesS3PresignedModule.html":{},"index.html":{}}}],["configures",{"_index":1792,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HomeModule.html":{},"miscellaneous/functions.html":{}}}],["configuring",{"_index":117,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"interfaces/IPaginationFieldConfig.html":{}}}],["connection",{"_index":155,"title":{},"body":{"controllers/AppController.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"injectables/PrismaService.html":{},"license.html":{}}}],["connections",{"_index":280,"title":{},"body":{"modules/AppModule.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"injectables/PrismaService.html":{}}}],["connectivity",{"_index":2945,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["connects",{"_index":2276,"title":{},"body":{"injectables/PrismaService.html":{}}}],["console.log",{"_index":850,"title":{},"body":{"injectables/CountriesService.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"modules/FilesModule.html":{}}}],["console.log('____________________________________",{"_index":910,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/PaginationService.html":{}}}],["console.log('all",{"_index":63,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["console.log('bad",{"_index":338,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["console.log('benccccccccccccccccccccccccccccccccccccccccccc",{"_index":887,"title":{},"body":{"injectables/CountriesService.html":{}}}],["console.log('data",{"_index":2212,"title":{},"body":{"injectables/PaginationService.html":{}}}],["console.log('dattttttttttttttttttttttttt",{"_index":2199,"title":{},"body":{"injectables/PaginationService.html":{}}}],["console.log('filteroptions",{"_index":951,"title":{},"body":{"injectables/CountriesService.html":{}}}],["console.log('finalcountquery",{"_index":2213,"title":{},"body":{"injectables/PaginationService.html":{}}}],["console.log('hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhha",{"_index":724,"title":{},"body":{"controllers/CountriesController.html":{}}}],["console.log('hi",{"_index":979,"title":{},"body":{"injectables/CountriesService.html":{}}}],["console.log('hiii",{"_index":2204,"title":{},"body":{"injectables/PaginationService.html":{}}}],["console.log('http",{"_index":2056,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["console.log('paginationoptions",{"_index":953,"title":{},"body":{"injectables/CountriesService.html":{}}}],["console.log('prisma",{"_index":2227,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["console.log('qqqqqqqqqqqqqq",{"_index":2380,"title":{},"body":{"classes/Query-2.html":{}}}],["console.log('qqqqqqqqqqqqqqqqqqqq",{"_index":1343,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["console.log('query",{"_index":2374,"title":{},"body":{"classes/Query-2.html":{},"classes/QueryFailedFilter.html":{}}}],["console.log('resultttttttttttttttttttt",{"_index":2303,"title":{},"body":{"injectables/PrismaService.html":{}}}],["console.log('sortoptions",{"_index":952,"title":{},"body":{"injectables/CountriesService.html":{}}}],["console.log('update",{"_index":1170,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["console.log(offset",{"_index":2214,"title":{},"body":{"injectables/PaginationService.html":{}}}],["console.log(sqlquery",{"_index":2320,"title":{},"body":{"classes/Query.html":{}}}],["console_print",{"_index":1551,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["const",{"_index":65,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileType.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{}}}],["constraint",{"_index":2231,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["constrainterrors",{"_index":2416,"title":{},"body":{"classes/QueryFailedFilter.html":{},"coverage.html":{}}}],["constrainterrors[exception.constraint",{"_index":2420,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["constructed",{"_index":1621,"title":{},"body":{"classes/FileType.html":{},"classes/UtilsService.html":{}}}],["constructing",{"_index":2077,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/PaginationMetaDto.html":{}}}],["construction",{"_index":2347,"title":{},"body":{"classes/Query-2.html":{},"classes/UtilsService.html":{}}}],["constructor",{"_index":22,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/ConfigService.html":{},"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/FileNotImageException.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/HomeService.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/QueryFailedFilter.html":{},"classes/UserNotFoundException.html":{},"miscellaneous/functions.html":{}}}],["constructor(configservice",{"_index":1732,"title":{},"body":{"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/HomeService.html":{},"injectables/PrismaService.html":{}}}],["constructor(error",{"_index":2480,"title":{},"body":{"classes/UserNotFoundException.html":{}}}],["constructor(message",{"_index":1566,"title":{},"body":{"classes/FileNotImageException.html":{}}}],["constructor(paginationservice",{"_index":770,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{}}}],["constructor(prisma",{"_index":2190,"title":{},"body":{"injectables/PaginationService.html":{}}}],["constructor(private",{"_index":705,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/CurrenciesController.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"controllers/HomeController.html":{},"injectables/HomeService.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{}}}],["constructor(public",{"_index":61,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["constructor(reflector",{"_index":23,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["constructor(undefined",{"_index":2142,"title":{},"body":{"classes/PaginationMetaDto.html":{}}}],["constructs",{"_index":2020,"title":{},"body":{"controllers/HomeController.html":{},"injectables/HomeService.html":{},"injectables/PaginationService.html":{},"classes/Query.html":{},"classes/UtilsService.html":{}}}],["consumes",{"_index":1701,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["contain",{"_index":1723,"title":{},"body":{"modules/FilesLocalModule.html":{}}}],["contained",{"_index":2172,"title":{},"body":{"classes/PaginationResponseDto.html":{},"miscellaneous/functions.html":{}}}],["container",{"_index":2741,"title":{},"body":{"index.html":{}}}],["containing",{"_index":1282,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"injectables/PrismaService.html":{},"classes/Query-1.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{}}}],["contains",{"_index":47,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/FileResponseDto-2.html":{}}}],["contentlength",{"_index":1875,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["contenttype",{"_index":1809,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["context",{"_index":46,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"injectables/ResolvePromisesInterceptor.html":{}}}],["contextmodule",{"_index":285,"title":{},"body":{"modules/AppModule.html":{}}}],["continent",{"_index":789,"title":{},"body":{"injectables/CountriesService.html":{},"classes/Country.html":{}}}],["contract",{"_index":2129,"title":{},"body":{"interfaces/IPaginationFieldConfig.html":{},"license.html":{}}}],["contribute",{"_index":2529,"title":{},"body":{"contributing.html":{}}}],["contributing",{"_index":2518,"title":{"contributing.html":{}},"body":{"contributing.html":{}}}],["contributing.md",{"_index":2519,"title":{},"body":{"contributing.html":{}}}],["contributions",{"_index":2523,"title":{},"body":{"contributing.html":{}}}],["control",{"_index":2115,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"index.html":{}}}],["controller",{"_index":139,"title":{"controllers/AppController.html":{},"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"controllers/HomeController.html":{}},"body":{"controllers/AppController.html":{},"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"coverage.html":{}}}],["controllers",{"_index":141,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"overview.html":{}}}],["controls",{"_index":2093,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["conventional",{"_index":2767,"title":{},"body":{"index.html":{}}}],["converts",{"_index":2700,"title":{},"body":{"miscellaneous/functions.html":{}}}],["coords",{"_index":1966,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["copies",{"_index":2891,"title":{},"body":{"license.html":{}}}],["copy",{"_index":2878,"title":{},"body":{"license.html":{}}}],["copyfile",{"_index":2615,"title":{},"body":{"coverage.html":{}}}],["copyright",{"_index":2870,"title":{},"body":{"license.html":{}}}],["core",{"_index":275,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["core/enum/file.type",{"_index":486,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["core/exceptions/http",{"_index":126,"title":{},"body":{"modules/ApiModule.html":{}}}],["core/interfaces/app.interfaces",{"_index":488,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["core/interfaces/aws.interfaces",{"_index":490,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["core/interfaces/file.interfaces",{"_index":492,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["core/interfaces/jwt.interfaces",{"_index":494,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["core/interfaces/node",{"_index":496,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["core/interfaces/postgres.interfaces",{"_index":499,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["core/interfaces/sendgrid.interfaces",{"_index":501,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["core/interfaces/sms.interfaces",{"_index":503,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["core/interfaces/upload",{"_index":505,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["core/validators/field.validator",{"_index":1914,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["correct",{"_index":429,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["correlationid",{"_index":245,"title":{},"body":{"controllers/AppController.html":{}}}],["corresponding",{"_index":2186,"title":{},"body":{"injectables/PaginationService.html":{}}}],["count",{"_index":783,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["count(${countbyfield",{"_index":2499,"title":{},"body":{"classes/UtilsService.html":{}}}],["countbyfield",{"_index":2487,"title":{},"body":{"classes/UtilsService.html":{}}}],["countfilterquery",{"_index":2210,"title":{},"body":{"injectables/PaginationService.html":{}}}],["counting",{"_index":2491,"title":{},"body":{"classes/UtilsService.html":{}}}],["countquery",{"_index":842,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["countries",{"_index":679,"title":{},"body":{"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"coverage.html":{}}}],["countries.controller",{"_index":763,"title":{},"body":{"modules/CountriesModule.html":{}}}],["countries.service",{"_index":702,"title":{},"body":{"controllers/CountriesController.html":{},"modules/CountriesModule.html":{}}}],["countries/countries.module",{"_index":128,"title":{},"body":{"modules/ApiModule.html":{}}}],["countriescontroller",{"_index":676,"title":{"controllers/CountriesController.html":{}},"body":{"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"coverage.html":{}}}],["countriesjson",{"_index":2565,"title":{},"body":{"coverage.html":{}}}],["countriesjson1",{"_index":2566,"title":{},"body":{"coverage.html":{}}}],["countrieslist",{"_index":2567,"title":{},"body":{"coverage.html":{}}}],["countriesmodule",{"_index":100,"title":{"modules/CountriesModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/CountriesModule.html":{},"modules.html":{},"overview.html":{}}}],["countriesservice",{"_index":701,"title":{"injectables/CountriesService.html":{}},"body":{"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"coverage.html":{},"overview.html":{}}}],["countriesservice.findall(paginationquery",{"_index":797,"title":{},"body":{"injectables/CountriesService.html":{}}}],["countriesservice.findall(paginationquery);example",{"_index":791,"title":{},"body":{"injectables/CountriesService.html":{}}}],["country",{"_index":134,"title":{"classes/Country.html":{}},"body":{"modules/ApiModule.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"coverage.html":{}}}],["country's",{"_index":1011,"title":{},"body":{"classes/Country.html":{}}}],["country.dto",{"_index":722,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"classes/FilterCountryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortCountryDto.html":{},"coverage.html":{}}}],["country_name",{"_index":966,"title":{},"body":{"injectables/CountriesService.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["coverage",{"_index":2559,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":1124,"title":{},"body":{"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"contributing.html":{},"index.html":{}}}],["create(@body",{"_index":1164,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["create(createdto",{"_index":1132,"title":{},"body":{"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{}}}],["create(file",{"_index":1734,"title":{},"body":{"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{}}}],["create.dto",{"_index":2473,"title":{},"body":{"classes/UpdateDto.html":{}}}],["created",{"_index":1135,"title":{},"body":{"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{}}}],["createdto",{"_index":1070,"title":{"classes/CreateDto.html":{}},"body":{"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/UpdateDto.html":{},"coverage.html":{}}}],["creates",{"_index":26,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CurrenciesService.html":{},"classes/FileNotImageException.html":{},"injectables/FilesS3PresignedService.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PrismaService.html":{},"classes/QueryFailedFilter.html":{},"classes/UserNotFoundException.html":{},"miscellaneous/functions.html":{}}}],["creating",{"_index":1072,"title":{},"body":{"classes/CreateDto.html":{},"injectables/CurrenciesService.html":{},"injectables/FilesS3PresignedService.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"index.html":{}}}],["creation",{"_index":1216,"title":{},"body":{"injectables/CurrenciesService.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3Service.html":{}}}],["credentials",{"_index":1639,"title":{},"body":{"classes/FileType.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["ctx",{"_index":66,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["ctx.getrequest",{"_index":69,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["ctx.getresponse",{"_index":68,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["currencies",{"_index":816,"title":{},"body":{"injectables/CountriesService.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Query-2.html":{},"coverage.html":{}}}],["currencies.controller",{"_index":1184,"title":{},"body":{"modules/CurrenciesModule.html":{}}}],["currencies.service",{"_index":1157,"title":{},"body":{"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{}}}],["currencies/currencies.module",{"_index":129,"title":{},"body":{"modules/ApiModule.html":{}}}],["currenciescontroller",{"_index":1122,"title":{"controllers/CurrenciesController.html":{}},"body":{"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"coverage.html":{}}}],["currenciesmodule",{"_index":101,"title":{"modules/CurrenciesModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/CurrenciesModule.html":{},"modules.html":{},"overview.html":{}}}],["currenciesservice",{"_index":1129,"title":{"injectables/CurrenciesService.html":{}},"body":{"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"coverage.html":{},"overview.html":{}}}],["currency",{"_index":135,"title":{"classes/Currency.html":{}},"body":{"modules/ApiModule.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/Query-2.html":{},"classes/UpdateDto.html":{},"coverage.html":{}}}],["currency_name",{"_index":825,"title":{},"body":{"injectables/CountriesService.html":{},"classes/Country.html":{}}}],["current",{"_index":2040,"title":{},"body":{"classes/HttpErrorFilter.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["currentpage",{"_index":2079,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{}}}],["custom",{"_index":314,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/FileNotImageException.html":{},"controllers/FilesS3Controller.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UserNotFoundException.html":{},"miscellaneous/functions.html":{}}}],["damages",{"_index":2916,"title":{},"body":{"license.html":{}}}],["data",{"_index":980,"title":{},"body":{"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/FileResponseDto-2.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"injectables/ResolvePromisesInterceptor.html":{},"classes/SortByDto.html":{},"classes/UpdateDto.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["data')@apibody({schema",{"_index":1676,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["data.length",{"_index":2203,"title":{},"body":{"injectables/PaginationService.html":{}}}],["data=null",{"_index":2286,"title":{},"body":{"injectables/PrismaService.html":{}}}],["database",{"_index":154,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/ConfigService.html":{},"injectables/CurrenciesService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query-2.html":{},"classes/QueryFailedFilter.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["database_ca",{"_index":1397,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["database_cert",{"_index":1398,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["database_key",{"_index":1399,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["database_log_level",{"_index":1545,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["database_reject_unauthorized",{"_index":1400,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["database_ssl_enabled",{"_index":1401,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["database_storage",{"_index":1543,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["database_synchronize",{"_index":1402,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["database_url",{"_index":1403,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["databaseconfig",{"_index":292,"title":{},"body":{"modules/AppModule.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"miscellaneous/typealiases.html":{}}}],["databases",{"_index":2738,"title":{},"body":{"index.html":{}}}],["dataquery",{"_index":2194,"title":{},"body":{"injectables/PaginationService.html":{}}}],["datasources",{"_index":2279,"title":{},"body":{"injectables/PrismaService.html":{}}}],["date().toisostring",{"_index":78,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["date().tolocaletimestring",{"_index":2043,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["db",{"_index":352,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"injectables/PrismaService.html":{}}}],["dbaeumer.vscode",{"_index":2786,"title":{},"body":{"index.html":{}}}],["dbconfig",{"_index":553,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["deal",{"_index":2880,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":2921,"title":{},"body":{"license.html":{}}}],["debug",{"_index":243,"title":{},"body":{"controllers/AppController.html":{}}}],["decimal",{"_index":1092,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{}}}],["decimal_digits",{"_index":1080,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/Query-2.html":{}}}],["declarations",{"_index":94,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/CountriesModule.html":{},"modules/CurrenciesModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{},"overview.html":{}}}],["declaring",{"_index":2025,"title":{},"body":{"modules/HomeModule.html":{}}}],["decorates",{"_index":195,"title":{},"body":{"controllers/AppController.html":{}}}],["decorator",{"_index":209,"title":{},"body":{"controllers/AppController.html":{},"controllers/FilesS3Controller.html":{},"miscellaneous/functions.html":{}}}],["decorators",{"_index":159,"title":{},"body":{"controllers/AppController.html":{},"controllers/CountriesController.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"classes/Currency.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3Service.html":{},"classes/FilterQueryDto.html":{},"controllers/HomeController.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"miscellaneous/functions.html":{}}}],["decorators/api",{"_index":744,"title":{},"body":{"controllers/CountriesController.html":{}}}],["decorators/api.filter.query",{"_index":740,"title":{},"body":{"controllers/CountriesController.html":{}}}],["decorators/number.string.validator",{"_index":1916,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["decorators/swagger.schema",{"_index":1689,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["decorators/transforms.decorator",{"_index":1918,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["deep",{"_index":2452,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["deeply",{"_index":2947,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["deepobject",{"_index":1983,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["deeppartial",{"_index":1206,"title":{},"body":{"injectables/CurrenciesService.html":{},"miscellaneous/typealiases.html":{}}}],["deepresolvepromises",{"_index":2437,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["deepresolvepromises(data",{"_index":2455,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["deepresolvepromises(input",{"_index":2687,"title":{},"body":{"miscellaneous/functions.html":{}}}],["default",{"_index":401,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/CountriesService.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{}}}],["defaultmessage",{"_index":396,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["defaultmessage(args",{"_index":398,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["defaultvalue",{"_index":1534,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["define",{"_index":1018,"title":{},"body":{"classes/Country.html":{},"classes/Currency.html":{},"classes/UpdateDto.html":{}}}],["defined",{"_index":24,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/FilterQueryDto.html":{},"controllers/HomeController.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{}}}],["defines",{"_index":678,"title":{},"body":{"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"injectables/FilesService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/Query-2.html":{},"classes/UpdateDto.html":{}}}],["delete",{"_index":1126,"title":{},"body":{"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{}}}],["delete(@param('id_currency",{"_index":1178,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["delete(`v1/${modules}/:id_currency",{"_index":1175,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["delete(id",{"_index":1136,"title":{},"body":{"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{}}}],["delete(key",{"_index":2394,"title":{},"body":{"classes/Query-2.html":{}}}],["delete(undefined)@httpcode(httpstatus.ok)@apiparam({name",{"_index":1137,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["deleted",{"_index":1141,"title":{},"body":{"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{}}}],["deleted[0]?.deletedid",{"_index":1247,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["deletedid",{"_index":2381,"title":{},"body":{"classes/Query-2.html":{}}}],["deleteid",{"_index":2396,"title":{},"body":{"classes/Query-2.html":{}}}],["deleteoptions",{"_index":2395,"title":{},"body":{"classes/Query-2.html":{}}}],["deletes",{"_index":1200,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["deletetype",{"_index":1305,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["deleting",{"_index":1188,"title":{},"body":{"injectables/CurrenciesService.html":{},"classes/Query-2.html":{}}}],["deletion",{"_index":1143,"title":{},"body":{"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{}}}],["delhi",{"_index":1028,"title":{},"body":{"classes/Country.html":{}}}],["dependencies",{"_index":92,"title":{"dependencies.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/CountriesModule.html":{},"modules/CurrenciesModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{},"changelog.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["depends",{"_index":2238,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["deployment",{"_index":2831,"title":{},"body":{"index.html":{}}}],["deps",{"_index":2511,"title":{},"body":{"changelog.html":{}}}],["desc",{"_index":435,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{}}}],["descending",{"_index":1948,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["describe",{"_index":1001,"title":{},"body":{"classes/Country.html":{},"classes/Currency.html":{},"contributing.html":{}}}],["description",{"_index":8,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UpdateDto.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["descriptive",{"_index":1066,"title":{},"body":{"classes/Country.html":{}}}],["designed",{"_index":1890,"title":{},"body":{"injectables/FilesService.html":{},"injectables/ResolvePromisesInterceptor.html":{}}}],["destination",{"_index":1707,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["destroyed",{"_index":2272,"title":{},"body":{"injectables/PrismaService.html":{}}}],["detail",{"_index":2537,"title":{},"body":{"contributing.html":{}}}],["detailed",{"_index":2711,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["details",{"_index":170,"title":{},"body":{"controllers/AppController.html":{},"classes/Country.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"classes/HttpErrorFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{}}}],["determined",{"_index":1766,"title":{},"body":{"modules/FilesModule.html":{}}}],["development",{"_index":550,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["dharmesh",{"_index":2866,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["dial",{"_index":1012,"title":{},"body":{"classes/Country.html":{}}}],["dial_code",{"_index":1020,"title":{},"body":{"classes/Country.html":{}}}],["dialing",{"_index":1040,"title":{},"body":{"classes/Country.html":{}}}],["different",{"_index":1752,"title":{},"body":{"modules/FilesModule.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/SortByDto.html":{},"miscellaneous/enumerations.html":{}}}],["digits",{"_index":1093,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{}}}],["direction",{"_index":431,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/CountriesService.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{}}}],["directionregex",{"_index":454,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["directory",{"_index":2063,"title":{},"body":{"interfaces/IAppConfig.html":{}}}],["dirk",{"_index":2787,"title":{},"body":{"index.html":{}}}],["disable",{"_index":417,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{}}}],["disconnects",{"_index":2273,"title":{},"body":{"injectables/PrismaService.html":{}}}],["diskstorage",{"_index":1686,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["display",{"_index":2097,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["distribute",{"_index":2887,"title":{},"body":{"license.html":{}}}],["docker",{"_index":2739,"title":{},"body":{"index.html":{}}}],["dockfile",{"_index":2795,"title":{},"body":{"index.html":{}}}],["docs",{"_index":1386,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"index.html":{}}}],["document",{"_index":1651,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["document.installation",{"_index":2808,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":194,"title":{},"body":{"controllers/AppController.html":{},"classes/Country.html":{},"classes/Currency.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"controllers/FilesS3Controller.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{}}}],["documented",{"_index":1253,"title":{},"body":{"classes/Currency.html":{}}}],["documents",{"_index":1780,"title":{},"body":{"controllers/FilesS3Controller.html":{},"miscellaneous/functions.html":{}}}],["doe",{"_index":218,"title":{},"body":{"controllers/AppController.html":{}}}],["doesn't",{"_index":939,"title":{},"body":{"injectables/CountriesService.html":{},"classes/UtilsService.html":{}}}],["dollar",{"_index":1034,"title":{},"body":{"classes/Country.html":{}}}],["domain",{"_index":1623,"title":{},"body":{"classes/FileType.html":{},"interfaces/IAppConfig.html":{}}}],["domain/country",{"_index":719,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{}}}],["domain/file",{"_index":1596,"title":{},"body":{"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{}}}],["don't",{"_index":2732,"title":{},"body":{"index.html":{}}}],["dotenv",{"_index":284,"title":{},"body":{"modules/AppModule.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"index.html":{}}}],["dotenv.config",{"_index":529,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["down",{"_index":2306,"title":{},"body":{"injectables/PrismaService.html":{},"index.html":{}}}],["download",{"_index":1664,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{}}}],["download(@param('path",{"_index":1712,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["download(path",{"_index":1666,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["downloaded",{"_index":1670,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["downloading",{"_index":1663,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{}}}],["downloads",{"_index":1669,"title":{},"body":{"controllers/FilesLocalController.html":{},"modules/FilesS3Module.html":{},"injectables/FilesS3PresignedService.html":{}}}],["driver",{"_index":663,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"interfaces/IFileConfig.html":{}}}],["drivers",{"_index":2675,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["dto",{"_index":1008,"title":{},"body":{"classes/Country.html":{},"classes/CreateDto.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileUploadDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"classes/SortByDto.html":{},"classes/UpdateDto.html":{},"miscellaneous/functions.html":{}}}],["dto/country",{"_index":703,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{}}}],["dto/create.dto",{"_index":1158,"title":{},"body":{"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{}}}],["dto/currency",{"_index":1159,"title":{},"body":{"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{}}}],["dto/file",{"_index":1695,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{}}}],["dto/file.dto",{"_index":1838,"title":{},"body":{"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{}}}],["dto/query",{"_index":721,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{}}}],["dto/update.dto",{"_index":1160,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["dummy.ts",{"_index":2564,"title":{},"body":{"coverage.html":{}}}],["duplicate",{"_index":1218,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["duration",{"_index":1547,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["duration_log_level",{"_index":1549,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["durationms",{"_index":256,"title":{},"body":{"controllers/AppController.html":{}}}],["during",{"_index":1215,"title":{},"body":{"injectables/CurrenciesService.html":{},"controllers/FilesLocalController.html":{}}}],["dx",{"_index":1951,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["dynamic",{"_index":768,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{}}}],["dynamically",{"_index":779,"title":{},"body":{"injectables/CountriesService.html":{},"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{}}}],["dynamicquerybuilder",{"_index":1270,"title":{"classes/DynamicQueryBuilder.html":{}},"body":{"classes/DynamicQueryBuilder.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{},"coverage.html":{}}}],["e",{"_index":2305,"title":{},"body":{"injectables/PrismaService.html":{}}}],["e.g",{"_index":446,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"interfaces/QueryOptions.html":{},"injectables/SortBy.html":{},"index.html":{}}}],["e2e",{"_index":2813,"title":{},"body":{"index.html":{}}}],["e325f0d0f3ae",{"_index":1603,"title":{},"body":{"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{}}}],["e325f0d0f3ae'})@allow",{"_index":1616,"title":{},"body":{"classes/FileType.html":{}}}],["e89b",{"_index":1042,"title":{},"body":{"classes/Country.html":{}}}],["each",{"_index":440,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UtilsService.html":{}}}],["easy",{"_index":2749,"title":{},"body":{"index.html":{}}}],["edge",{"_index":2854,"title":{},"body":{"index.html":{}}}],["editfilename",{"_index":1691,"title":{},"body":{"controllers/FilesLocalController.html":{},"coverage.html":{}}}],["efficient",{"_index":2724,"title":{},"body":{"index.html":{}}}],["emailer.interfaces",{"_index":497,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["emailer.interfaces.ts",{"_index":2072,"title":{},"body":{"interfaces/INodeEmailerConfig.html":{},"coverage.html":{}}}],["emergency",{"_index":268,"title":{},"body":{"controllers/AppController.html":{}}}],["emits",{"_index":2448,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["enable",{"_index":1423,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["encapsulate",{"_index":1607,"title":{},"body":{"classes/FileResponseDto-2.html":{}}}],["encoded",{"_index":1836,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["encoding",{"_index":2066,"title":{},"body":{"interfaces/IFileConfig.html":{}}}],["encryptionservice",{"_index":2009,"title":{},"body":{"modules/HelperModule.html":{}}}],["end",{"_index":945,"title":{},"body":{"injectables/CountriesService.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"injectables/PaginationService.html":{}}}],["endindex",{"_index":2088,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{}}}],["endpage",{"_index":2085,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{}}}],["endpoint",{"_index":162,"title":{},"body":{"controllers/AppController.html":{},"controllers/CountriesController.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/HomeController.html":{},"index.html":{}}}],["endpoints",{"_index":146,"title":{},"body":{"controllers/AppController.html":{},"controllers/CurrenciesController.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"controllers/FilesS3PresignedController.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{}}}],["ensure",{"_index":444,"title":{},"body":{"injectables/CommaSeparated.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"contributing.html":{},"index.html":{}}}],["ensures",{"_index":1075,"title":{},"body":{"classes/CreateDto.html":{}}}],["entire",{"_index":2942,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["entities",{"_index":568,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["entity",{"_index":1000,"title":{},"body":{"classes/Country.html":{},"classes/Currency.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"classes/UpdateDto.html":{},"miscellaneous/functions.html":{}}}],["enum",{"_index":1372,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"miscellaneous/enumerations.html":{}}}],["enumerations",{"_index":2668,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":300,"title":{},"body":{"modules/AppModule.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"coverage.html":{}}}],["env.${env",{"_index":307,"title":{},"body":{"modules/AppModule.html":{}}}],["env.${nodeenv",{"_index":531,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["env.development",{"_index":534,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["env.staging",{"_index":532,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["envfilepath",{"_index":306,"title":{},"body":{"modules/AppModule.html":{}}}],["environment",{"_index":278,"title":{},"body":{"modules/AppModule.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["environments",{"_index":2686,"title":{},"body":{"miscellaneous/functions.html":{}}}],["environmentvariablesvalidator",{"_index":1352,"title":{"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{}},"body":{"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"coverage.html":{}}}],["envname",{"_index":541,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["envvalues.database_url",{"_index":1447,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["envvalues.database_url)@isstring",{"_index":1427,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["envvarappconfigvalidator",{"_index":510,"title":{"classes/EnvVarAppConfigValidator.html":{}},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"coverage.html":{}}}],["envvarfileconfigvalidator",{"_index":518,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["envvariablesclass",{"_index":2709,"title":{},"body":{"miscellaneous/functions.html":{}}}],["equal",{"_index":2697,"title":{},"body":{"miscellaneous/functions.html":{}}}],["erro",{"_index":353,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["error",{"_index":85,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"injectables/CurrenciesService.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesS3PresignedService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/QueryFailedFilter.html":{},"injectables/SortBy.html":{},"classes/UserNotFoundException.html":{},"miscellaneous/functions.html":{}}}],["error('hello",{"_index":263,"title":{},"body":{"controllers/AppController.html":{}}}],["error.filter",{"_index":127,"title":{},"body":{"modules/ApiModule.html":{}}}],["error.filter.ts",{"_index":2035,"title":{},"body":{"classes/HttpErrorFilter.html":{},"coverage.html":{}}}],["error.filter.ts:50",{"_index":2039,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["errormessage",{"_index":2419,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["errormessages",{"_index":380,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["errorresponse",{"_index":74,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["errors",{"_index":325,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/HttpErrorFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/Query-1.html":{},"classes/QueryFailedFilter.html":{},"classes/UserNotFoundException.html":{},"miscellaneous/functions.html":{}}}],["errors.ts",{"_index":2594,"title":{},"body":{"coverage.html":{}}}],["esben",{"_index":2791,"title":{},"body":{"index.html":{}}}],["esbenp.prettier",{"_index":2789,"title":{},"body":{"index.html":{}}}],["escapes",{"_index":2310,"title":{},"body":{"classes/Query.html":{}}}],["escaping",{"_index":2248,"title":{},"body":{"injectables/PrismaService.html":{}}}],["escvalue",{"_index":2291,"title":{},"body":{"injectables/PrismaService.html":{}}}],["escvalue.replace(/'/g",{"_index":2293,"title":{},"body":{"injectables/PrismaService.html":{}}}],["eslint",{"_index":416,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{},"index.html":{}}}],["eslint/ban",{"_index":1974,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["eslint/explicit",{"_index":1976,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["eslint/no",{"_index":421,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{},"classes/UtilsService.html":{}}}],["eslint/prefer",{"_index":554,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["etc",{"_index":1035,"title":{},"body":{"classes/Country.html":{}}}],["event",{"_index":2911,"title":{},"body":{"license.html":{}}}],["everyone",{"_index":2528,"title":{},"body":{"contributing.html":{}}}],["example",{"_index":167,"title":{},"body":{"controllers/AppController.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"classes/HttpErrorFilter.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/Query.html":{},"classes/SortByDto.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"contributing.html":{},"index.html":{}}}],["exceeds",{"_index":1866,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["exception",{"_index":10,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/FileNotImageException.html":{},"injectables/FilesS3Service.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"classes/UserNotFoundException.html":{},"miscellaneous/functions.html":{}}}],["exception.code",{"_index":2229,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["exception.constraint",{"_index":2421,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["exception.constraint.startswith('uq",{"_index":2422,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["exception.filter.ts",{"_index":2052,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:27",{"_index":2054,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts:30",{"_index":2223,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["exception.getresponse",{"_index":342,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["exception.getstatus",{"_index":72,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exception.message",{"_index":2044,"title":{},"body":{"classes/HttpErrorFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["exception.message.replace(/\\n/g",{"_index":2228,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["exception.query",{"_index":2424,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["exception.sqlmessage",{"_index":2423,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["exception.stack",{"_index":378,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{}}}],["exceptionfilter",{"_index":16,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["exceptions",{"_index":14,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["exceptions.filter.ts",{"_index":7,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["exceptions.filter.ts:47",{"_index":25,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exceptions.filter.ts:54",{"_index":36,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exceptions.filter.ts:63",{"_index":40,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exclude",{"_index":1268,"title":{},"body":{"classes/Currency.html":{},"classes/Query-2.html":{}}}],["exclude({toplainonly",{"_index":1258,"title":{},"body":{"classes/Currency.html":{}}}],["excluded",{"_index":1260,"title":{},"body":{"classes/Currency.html":{}}}],["executerawquery",{"_index":2250,"title":{},"body":{"injectables/PrismaService.html":{}}}],["executerawquery(query",{"_index":2284,"title":{},"body":{"injectables/PrismaService.html":{}}}],["executerawquery(queryobj",{"_index":2256,"title":{},"body":{"injectables/PrismaService.html":{}}}],["executes",{"_index":2246,"title":{},"body":{"injectables/PrismaService.html":{}}}],["executetransaction",{"_index":2251,"title":{},"body":{"injectables/PrismaService.html":{}}}],["executetransaction(actions",{"_index":2262,"title":{},"body":{"injectables/PrismaService.html":{}}}],["executing",{"_index":2269,"title":{},"body":{"injectables/PrismaService.html":{}}}],["execution",{"_index":45,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/ResolvePromisesInterceptor.html":{}}}],["executioncontext",{"_index":2442,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["exeption",{"_index":64,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exist",{"_index":1221,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["existing",{"_index":1167,"title":{},"body":{"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/Query-2.html":{},"classes/UpdateDto.html":{}}}],["exists",{"_index":1213,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["expected",{"_index":1781,"title":{},"body":{"controllers/FilesS3Controller.html":{}}}],["expiration",{"_index":1830,"title":{},"body":{"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{}}}],["expirationtime",{"_index":621,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IJWTConfig.html":{}}}],["expires",{"_index":228,"title":{},"body":{"controllers/AppController.html":{}}}],["expiresin",{"_index":1645,"title":{},"body":{"classes/FileType.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{}}}],["expiresinseconds",{"_index":619,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IJWTConfig.html":{}}}],["explanation",{"_index":2846,"title":{},"body":{"index.html":{}}}],["explode",{"_index":1984,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["export",{"_index":59,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UpdateDto.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{}}}],["exported",{"_index":1727,"title":{},"body":{"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{}}}],["exports",{"_index":97,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/CountriesModule.html":{},"modules/CurrenciesModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{},"overview.html":{}}}],["exposes",{"_index":1797,"title":{},"body":{"modules/FilesS3Module.html":{}}}],["exposing",{"_index":1127,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["express",{"_index":58,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"dependencies.html":{},"license.html":{}}}],["express.multer.file",{"_index":1673,"title":{},"body":{"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{}}}],["express.multers3.file",{"_index":1784,"title":{},"body":{"controllers/FilesS3Controller.html":{},"injectables/FilesS3Service.html":{}}}],["expression",{"_index":450,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["extending",{"_index":1571,"title":{},"body":{"classes/FileNotImageException.html":{}}}],["extends",{"_index":1565,"title":{},"body":{"classes/FileNotImageException.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/UpdateDto.html":{},"classes/UserNotFoundException.html":{}}}],["extensions",{"_index":2785,"title":{},"body":{"index.html":{}}}],["f",{"_index":2834,"title":{},"body":{"index.html":{}}}],["fail",{"_index":2418,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["failed",{"_index":2232,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["failed.filter.ts",{"_index":2408,"title":{},"body":{"classes/QueryFailedFilter.html":{},"coverage.html":{}}}],["failed.filter.ts:26",{"_index":2410,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["failed.filter.ts:34",{"_index":2411,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["failed.filter.ts:45",{"_index":2412,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["fails",{"_index":207,"title":{},"body":{"controllers/AppController.html":{},"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{},"miscellaneous/functions.html":{}}}],["failure",{"_index":2413,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["failures",{"_index":2409,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["false",{"_index":413,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{}}}],["false})@isoptional",{"_index":1349,"title":{},"body":{"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{}}}],["fatal",{"_index":266,"title":{},"body":{"controllers/AppController.html":{}}}],["feat",{"_index":2839,"title":{},"body":{"index.html":{}}}],["feat(api",{"_index":2852,"title":{},"body":{"index.html":{}}}],["feature",{"_index":110,"title":{},"body":{"modules/ApiModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"contributing.html":{}}}],["features",{"_index":2515,"title":{},"body":{"changelog.html":{},"contributing.html":{},"index.html":{}}}],["fetch",{"_index":351,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"injectables/PaginationService.html":{}}}],["field",{"_index":430,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/CountriesService.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PrismaService.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{}}}],["field\":\"name\",\"direction\":\"asc",{"_index":1940,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["field\":\"name\",\"direction\":\"asc\"},{\"field\":\"age\",\"direction\":\"desc",{"_index":749,"title":{},"body":{"controllers/CountriesController.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["field\":\"name\",\"direction\":\"asc\"}]'})@isoptional()@transform",{"_index":2165,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["field\":\"name\",\"operator\":\"=\",\"value\":\"in",{"_index":1937,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["field\":\"name\",\"operator\":\"=\",\"value\":\"in\"}]'})@isoptional()@transform",{"_index":2154,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["field\":\"name\",\"operator\":\"like\",\"value\":\"john\"},{\"field\":\"age\",\"operator\":\">\",\"value\":\"30",{"_index":747,"title":{},"body":{"controllers/CountriesController.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["fieldconfigs",{"_index":810,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"classes/UtilsService.html":{}}}],["fieldconfigs[field",{"_index":922,"title":{},"body":{"injectables/CountriesService.html":{},"classes/UtilsService.html":{}}}],["fieldname",{"_index":1981,"title":{},"body":{"classes/FilterQueryDto.html":{},"interfaces/IFileConfig.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["fieldname}[${index",{"_index":1987,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["fieldname}[${index}].field",{"_index":1988,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["fieldname}[${index}].operator",{"_index":1989,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["fieldname}[${index}].value",{"_index":1990,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["fieldregex",{"_index":452,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["fields",{"_index":976,"title":{},"body":{"injectables/CountriesService.html":{},"classes/DynamicQueryBuilder.html":{},"interfaces/IPaginationFieldConfig.html":{},"injectables/PrismaService.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{},"classes/UpdateDto.html":{},"classes/UtilsService.html":{}}}],["fields.includes(key",{"_index":2290,"title":{},"body":{"injectables/PrismaService.html":{}}}],["fields.join",{"_index":1331,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["fil",{"_index":340,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UpdateDto.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["file's",{"_index":1608,"title":{},"body":{"classes/FileResponseDto-2.html":{},"classes/FileUploadDto.html":{},"injectables/FilesS3Service.html":{}}}],["file.filename.match(/\\.(jpg|jpeg|png|gif)$/i",{"_index":1867,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["file.filesize",{"_index":1869,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["file.interfaces",{"_index":506,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["file.interfaces.ts",{"_index":2141,"title":{},"body":{"interfaces/IUploadFileConfig.html":{},"coverage.html":{}}}],["file.jpg",{"_index":1605,"title":{},"body":{"classes/FileResponseDto-1.html":{},"injectables/FilesLocalService.html":{}}}],["file.key",{"_index":1887,"title":{},"body":{"injectables/FilesS3Service.html":{}}}],["file_driver",{"_index":520,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["file_upload_destination",{"_index":655,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IUploadFileConfig.html":{}}}],["fileconfig",{"_index":294,"title":{},"body":{"modules/AppModule.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"modules/FilesModule.html":{},"miscellaneous/typealiases.html":{}}}],["fileconfig).accesskeyid",{"_index":1640,"title":{},"body":{"classes/FileType.html":{}}}],["fileconfig).awsdefaults3bucket",{"_index":1643,"title":{},"body":{"classes/FileType.html":{}}}],["fileconfig).awss3region",{"_index":1638,"title":{},"body":{"classes/FileType.html":{}}}],["fileconfig).driver",{"_index":1634,"title":{},"body":{"classes/FileType.html":{},"modules/FilesModule.html":{}}}],["fileconfig).secretaccesskey",{"_index":1641,"title":{},"body":{"classes/FileType.html":{}}}],["filedriver",{"_index":485,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"interfaces/IFileConfig.html":{},"miscellaneous/enumerations.html":{}}}],["filedriver.local",{"_index":1500,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"modules/FilesModule.html":{}}}],["filedriver.s3",{"_index":522,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"modules/FilesModule.html":{}}}],["filedriver.s3].includes",{"_index":1637,"title":{},"body":{"classes/FileType.html":{}}}],["filedriver.s3_presigned",{"_index":1636,"title":{},"body":{"classes/FileType.html":{}}}],["filedriver.s3_presigned].includes(envvalues.file_driver",{"_index":523,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["filefilter",{"_index":1708,"title":{},"body":{"controllers/FilesLocalController.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["fileinterceptor",{"_index":1681,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["fileinterceptor('file",{"_index":1706,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["filename",{"_index":1652,"title":{},"body":{"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesS3PresignedService.html":{},"coverage.html":{}}}],["filenotimageexception",{"_index":1558,"title":{"classes/FileNotImageException.html":{}},"body":{"classes/FileNotImageException.html":{},"coverage.html":{}}}],["filenotimageexception('custom",{"_index":1564,"title":{},"body":{"classes/FileNotImageException.html":{}}}],["fileoverview",{"_index":132,"title":{},"body":{"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/FileType.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/Query-2.html":{},"classes/UpdateDto.html":{}}}],["fileresponsedto",{"_index":1575,"title":{"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{}},"body":{"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"coverage.html":{}}}],["fileresponsedto})@post('v1/upload",{"_index":1832,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["fileresponsedto})@post('v1/upload')@apiconsumes('multipart/form",{"_index":1675,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["fileresponsedto})@post('v1/upload/s3')@apiconsumes('multipart/form",{"_index":1785,"title":{},"body":{"controllers/FilesS3Controller.html":{}}}],["files",{"_index":1649,"title":{},"body":{"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"license.html":{}}}],["files.controller",{"_index":1721,"title":{},"body":{"modules/FilesLocalModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["files.service",{"_index":1697,"title":{},"body":{"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{}}}],["files/example.jpg",{"_index":1587,"title":{},"body":{"classes/FileResponseDto.html":{}}}],["files/files.module",{"_index":130,"title":{},"body":{"modules/ApiModule.html":{}}}],["files/v1/download/{key}?expiresin=3600",{"_index":1828,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["files/v1/upload",{"_index":1834,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["filesize",{"_index":1653,"title":{},"body":{"classes/FileUploadDto.html":{},"modules/FilesS3Module.html":{},"injectables/FilesS3PresignedService.html":{}}}],["fileslocalcontroller",{"_index":1661,"title":{"controllers/FilesLocalController.html":{}},"body":{"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"coverage.html":{}}}],["fileslocalmodule",{"_index":1714,"title":{"modules/FilesLocalModule.html":{}},"body":{"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules.html":{},"overview.html":{}}}],["fileslocalservice",{"_index":1696,"title":{"injectables/FilesLocalService.html":{}},"body":{"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"coverage.html":{},"overview.html":{}}}],["filesmodule",{"_index":102,"title":{"modules/FilesModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/FilesModule.html":{},"modules.html":{},"overview.html":{}}}],["filesroot",{"_index":1690,"title":{},"body":{"controllers/FilesLocalController.html":{},"coverage.html":{}}}],["filess3controller",{"_index":1770,"title":{"controllers/FilesS3Controller.html":{}},"body":{"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"coverage.html":{}}}],["filess3module",{"_index":1749,"title":{"modules/FilesS3Module.html":{}},"body":{"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules.html":{},"overview.html":{}}}],["filess3presignedcontroller",{"_index":1817,"title":{"controllers/FilesS3PresignedController.html":{}},"body":{"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"coverage.html":{}}}],["filess3presignedmodule",{"_index":1750,"title":{"modules/FilesS3PresignedModule.html":{}},"body":{"modules/FilesModule.html":{},"modules/FilesS3PresignedModule.html":{},"modules.html":{},"overview.html":{}}}],["filess3presignedservice",{"_index":1839,"title":{"injectables/FilesS3PresignedService.html":{}},"body":{"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"coverage.html":{},"overview.html":{}}}],["filess3service",{"_index":1787,"title":{"injectables/FilesS3Service.html":{}},"body":{"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"injectables/FilesS3Service.html":{},"coverage.html":{},"overview.html":{}}}],["filesservice",{"_index":1699,"title":{"injectables/FilesService.html":{}},"body":{"controllers/FilesLocalController.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesService.html":{},"coverage.html":{},"overview.html":{}}}],["filetype",{"_index":1583,"title":{"classes/FileType.html":{}},"body":{"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"coverage.html":{}}}],["fileuploaddto",{"_index":1647,"title":{"classes/FileUploadDto.html":{}},"body":{"classes/FileUploadDto.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"coverage.html":{}}}],["filter",{"_index":11,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"classes/FilterQueryDto.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PaginationQueryDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{}}}],["filter.direction",{"_index":914,"title":{},"body":{"injectables/CountriesService.html":{}}}],["filter.field",{"_index":913,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/PaginationService.html":{}}}],["filter.field.tolowercase",{"_index":891,"title":{},"body":{"injectables/CountriesService.html":{},"classes/UtilsService.html":{}}}],["filter.operator",{"_index":909,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["filter.operator.touppercase",{"_index":903,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["filter.value",{"_index":905,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["filter.value.split(',').map((val",{"_index":929,"title":{},"body":{"injectables/CountriesService.html":{},"classes/UtilsService.html":{}}}],["filterconditions",{"_index":889,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["filtercountrydto",{"_index":947,"title":{"classes/FilterCountryDto.html":{}},"body":{"injectables/CountriesService.html":{},"classes/FilterCountryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortCountryDto.html":{},"coverage.html":{}}}],["filterdto",{"_index":1979,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["filtering",{"_index":1146,"title":{},"body":{"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"modules/FilesS3Module.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{}}}],["filteroptions",{"_index":733,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{}}}],["filterquery",{"_index":847,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["filterquerydto",{"_index":742,"title":{"classes/FilterQueryDto.html":{}},"body":{"controllers/CountriesController.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"coverage.html":{}}}],["filters",{"_index":322,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UtilsService.html":{}}}],["filters.length",{"_index":918,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["filters[name]=something",{"_index":1972,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["filtervalues",{"_index":881,"title":{},"body":{"injectables/CountriesService.html":{},"classes/UtilsService.html":{}}}],["filtervalues.push(filter.value",{"_index":932,"title":{},"body":{"injectables/CountriesService.html":{},"classes/UtilsService.html":{}}}],["finalcountquery",{"_index":2211,"title":{},"body":{"injectables/PaginationService.html":{}}}],["finalselectquery",{"_index":884,"title":{},"body":{"injectables/CountriesService.html":{}}}],["find",{"_index":680,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{},"contributing.html":{}}}],["findall",{"_index":683,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{}}}],["findall(@query",{"_index":710,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{}}}],["findall(paginationquery",{"_index":774,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{}}}],["findall(query",{"_index":684,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{}}}],["findby(key",{"_index":2388,"title":{},"body":{"classes/Query-2.html":{}}}],["findbycode",{"_index":2348,"title":{},"body":{"classes/Query-2.html":{}}}],["findbycode(id",{"_index":2353,"title":{},"body":{"classes/Query-2.html":{}}}],["findbyid",{"_index":2349,"title":{},"body":{"classes/Query-2.html":{}}}],["findmanywithpagination",{"_index":949,"title":{},"body":{"injectables/CountriesService.html":{}}}],["findone",{"_index":1192,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["findone(id",{"_index":1203,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["first",{"_index":2094,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"index.html":{}}}],["fitness",{"_index":2907,"title":{},"body":{"license.html":{}}}],["fix",{"_index":2840,"title":{},"body":{"index.html":{}}}],["fix(core",{"_index":2853,"title":{},"body":{"index.html":{}}}],["fixed",{"_index":2509,"title":{},"body":{"changelog.html":{}}}],["fixes",{"_index":2508,"title":{},"body":{"changelog.html":{}}}],["flexible",{"_index":2723,"title":{},"body":{"index.html":{}}}],["follow",{"_index":2526,"title":{},"body":{"contributing.html":{}}}],["following",{"_index":2772,"title":{},"body":{"index.html":{},"license.html":{}}}],["foo",{"_index":240,"title":{},"body":{"controllers/AppController.html":{}}}],["footer",{"_index":2847,"title":{},"body":{"index.html":{}}}],["footer(s",{"_index":2838,"title":{},"body":{"index.html":{}}}],["fork",{"_index":2538,"title":{},"body":{"contributing.html":{}}}],["format",{"_index":432,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-2.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"injectables/SortBy.html":{},"index.html":{}}}],["formats",{"_index":323,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/CreateDto.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["formatted",{"_index":328,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["formatter",{"_index":2764,"title":{},"body":{"index.html":{}}}],["formatting",{"_index":2552,"title":{},"body":{"contributing.html":{}}}],["found",{"_index":355,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/FilesLocalController.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/UserNotFoundException.html":{}}}],["found.exception.ts",{"_index":2476,"title":{},"body":{"classes/UserNotFoundException.html":{},"coverage.html":{}}}],["found.exception.ts:20",{"_index":2481,"title":{},"body":{"classes/UserNotFoundException.html":{}}}],["foxundermoon",{"_index":2797,"title":{},"body":{"index.html":{}}}],["foxundermoon.shell",{"_index":2796,"title":{},"body":{"index.html":{}}}],["framework",{"_index":1889,"title":{},"body":{"injectables/FilesService.html":{},"index.html":{}}}],["free",{"_index":2874,"title":{},"body":{"license.html":{}}}],["from_email",{"_index":626,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/ISendGridConfig.html":{}}}],["fromquery",{"_index":808,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["frontend",{"_index":2060,"title":{},"body":{"interfaces/IAppConfig.html":{}}}],["frontend_domain",{"_index":515,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{}}}],["frontenddomain",{"_index":576,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"interfaces/IAppConfig.html":{}}}],["fsroot",{"_index":2616,"title":{},"body":{"coverage.html":{}}}],["fully",{"_index":2433,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["function",{"_index":1378,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"injectables/ResolvePromisesInterceptor.html":{},"classes/SortByDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["function(app",{"_index":2702,"title":{},"body":{"miscellaneous/functions.html":{}}}],["functionalities",{"_index":122,"title":{},"body":{"modules/ApiModule.html":{},"modules/CurrenciesModule.html":{},"injectables/FilesService.html":{},"modules/HomeModule.html":{}}}],["functionality",{"_index":1730,"title":{},"body":{"injectables/FilesLocalService.html":{},"modules/FilesS3Module.html":{},"injectables/FilesS3Service.html":{},"injectables/PaginationService.html":{}}}],["functions",{"_index":1196,"title":{"miscellaneous/functions.html":{}},"body":{"injectables/CurrenciesService.html":{},"miscellaneous/functions.html":{}}}],["furnished",{"_index":2894,"title":{},"body":{"license.html":{}}}],["generate",{"_index":2260,"title":{},"body":{"injectables/PrismaService.html":{},"classes/Query-2.html":{}}}],["generated",{"_index":1625,"title":{},"body":{"classes/FileType.html":{}}}],["generatepresignedurl",{"_index":1854,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["generatepresignedurl(key",{"_index":1859,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["generates",{"_index":1827,"title":{},"body":{"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{}}}],["generating",{"_index":1822,"title":{},"body":{"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{}}}],["generation",{"_index":1194,"title":{},"body":{"injectables/CurrenciesService.html":{},"controllers/FilesS3PresignedController.html":{}}}],["generator.util",{"_index":1800,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["get('/health",{"_index":208,"title":{},"body":{"controllers/AppController.html":{}}}],["get('/health')@healthcheck",{"_index":160,"title":{},"body":{"controllers/AppController.html":{}}}],["get('/log",{"_index":173,"title":{},"body":{"controllers/AppController.html":{}}}],["get(':path",{"_index":1711,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["get(':path')@apiexcludeendpoint",{"_index":1667,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["get('v1/countries",{"_index":707,"title":{},"body":{"controllers/CountriesController.html":{}}}],["get('v1/countries')@httpcode(httpstatus.ok)@apiokresponse({type",{"_index":686,"title":{},"body":{"controllers/CountriesController.html":{}}}],["get('v1/download/:key",{"_index":1825,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["get(`v1/${modules",{"_index":1172,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["get(key",{"_index":466,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["get(undefined)@httpcode(httpstatus.ok)@apiokresponse({type",{"_index":1144,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["get_all",{"_index":711,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{}}}],["getboolean",{"_index":460,"title":{},"body":{"classes/ConfigService.html":{}}}],["getboolean(key",{"_index":469,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["getbooleanenvvar",{"_index":1533,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{},"coverage.html":{}}}],["getbooleanenvvar('logger_console_print",{"_index":1552,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["getbooleanenvvar('logger_database_storage",{"_index":1544,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["getbooleanenvvar('logger_duration",{"_index":1548,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["getbooleanenvvar('logger_log_in_file",{"_index":1554,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["getdownloadurl",{"_index":1823,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["getdownloadurl(@param('key",{"_index":1841,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["getdownloadurl(key",{"_index":1824,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["gethealth",{"_index":157,"title":{},"body":{"controllers/AppController.html":{}}}],["gethello",{"_index":158,"title":{},"body":{"controllers/AppController.html":{}}}],["getnodeenv",{"_index":473,"title":{},"body":{"classes/ConfigService.html":{}}}],["getnumber",{"_index":461,"title":{},"body":{"classes/ConfigService.html":{}}}],["getnumber(key",{"_index":471,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["getobjectcommand",{"_index":1627,"title":{},"body":{"classes/FileType.html":{},"injectables/FilesS3PresignedService.html":{}}}],["getprismaconfig",{"_index":475,"title":{},"body":{"classes/ConfigService.html":{}}}],["getschemapath",{"_index":1970,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["getschemapath(filterdto",{"_index":1986,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["getsignedurl",{"_index":1630,"title":{},"body":{"classes/FileType.html":{},"injectables/FilesS3PresignedService.html":{}}}],["getsignedurl(s3",{"_index":1644,"title":{},"body":{"classes/FileType.html":{}}}],["getsignedurl(this.s3",{"_index":1877,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["getting",{"_index":2500,"title":{"changelog.html":{},"contributing.html":{},"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["git",{"_index":2541,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["git+https://github.com/dharmesh",{"_index":2931,"title":{},"body":{"properties.html":{}}}],["github",{"_index":2533,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["given",{"_index":407,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{},"miscellaneous/typealiases.html":{}}}],["global",{"_index":9,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"modules/HelperModule.html":{},"classes/HttpErrorFilter.html":{},"miscellaneous/functions.html":{}}}],["granted",{"_index":2873,"title":{},"body":{"license.html":{}}}],["great",{"_index":2717,"title":{},"body":{"index.html":{}}}],["greater",{"_index":2696,"title":{},"body":{"miscellaneous/functions.html":{}}}],["grouped",{"_index":1772,"title":{},"body":{"controllers/FilesS3Controller.html":{}}}],["grow",{"_index":2858,"title":{},"body":{"index.html":{}}}],["guidelines",{"_index":2520,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["handle",{"_index":13,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"modules/FilesLocalModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/HomeController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResolvePromisesInterceptor.html":{},"index.html":{}}}],["handled",{"_index":2130,"title":{},"body":{"interfaces/IPaginationFieldConfig.html":{}}}],["handler",{"_index":2446,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["handles",{"_index":42,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/CurrenciesController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/QueryFailedFilter.html":{}}}],["handling",{"_index":147,"title":{},"body":{"controllers/AppController.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CurrenciesService.html":{},"classes/FileNotImageException.html":{},"classes/FileType.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"miscellaneous/functions.html":{}}}],["hard",{"_index":1304,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["has_next_page",{"_index":1926,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/SortByDto.html":{}}}],["hasnextpage",{"_index":985,"title":{},"body":{"injectables/CountriesService.html":{}}}],["header",{"_index":372,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{}}}],["headers",{"_index":2748,"title":{},"body":{"index.html":{}}}],["health",{"_index":144,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/PrismaService.html":{}}}],["healthcheck",{"_index":182,"title":{},"body":{"controllers/AppController.html":{}}}],["healthcheckservice",{"_index":183,"title":{},"body":{"controllers/AppController.html":{}}}],["healthindicatorresult",{"_index":2277,"title":{},"body":{"injectables/PrismaService.html":{}}}],["helllllllllllllllllllllllllllllllllllllllllllllllll",{"_index":851,"title":{},"body":{"injectables/CountriesService.html":{}}}],["helmet",{"_index":2653,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["helper",{"_index":1249,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["helpermodule",{"_index":272,"title":{"modules/HelperModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules.html":{},"overview.html":{}}}],["helps",{"_index":2076,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["here",{"_index":350,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"modules/FilesModule.html":{},"index.html":{}}}],["hereby",{"_index":2872,"title":{},"body":{"license.html":{}}}],["hi",{"_index":954,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/PaginationService.html":{}}}],["holders",{"_index":2913,"title":{},"body":{"license.html":{}}}],["home",{"_index":136,"title":{},"body":{"modules/ApiModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{}}}],["home.controller",{"_index":2026,"title":{},"body":{"modules/HomeModule.html":{}}}],["home.service",{"_index":2018,"title":{},"body":{"controllers/HomeController.html":{},"modules/HomeModule.html":{}}}],["home/home.module",{"_index":131,"title":{},"body":{"modules/ApiModule.html":{}}}],["homecontroller",{"_index":2013,"title":{"controllers/HomeController.html":{}},"body":{"controllers/HomeController.html":{},"modules/HomeModule.html":{},"coverage.html":{}}}],["homemodule",{"_index":103,"title":{"modules/HomeModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/HomeModule.html":{},"modules.html":{},"overview.html":{}}}],["homepage",{"_index":2928,"title":{},"body":{"properties.html":{}}}],["homeservice",{"_index":2015,"title":{"injectables/HomeService.html":{}},"body":{"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"coverage.html":{},"overview.html":{}}}],["host",{"_index":38,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["host.switchtohttp",{"_index":67,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["http",{"_index":113,"title":{},"body":{"modules/ApiModule.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/Query.html":{},"classes/QueryFailedFilter.html":{},"index.html":{}}}],["http://localhost",{"_index":1389,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["http_status_messages",{"_index":2581,"title":{},"body":{"coverage.html":{}}}],["httpcode",{"_index":695,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{}}}],["httpcode(httpstatus.ok",{"_index":708,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{}}}],["httperrorfilter",{"_index":125,"title":{"classes/HttpErrorFilter.html":{}},"body":{"modules/ApiModule.html":{},"classes/HttpErrorFilter.html":{},"coverage.html":{}}}],["httpexception",{"_index":54,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/CurrenciesService.html":{},"controllers/FilesLocalController.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["httpexceptionfilter",{"_index":2050,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["httpmodule",{"_index":2001,"title":{},"body":{"modules/HelperModule.html":{}}}],["https://example",{"_index":1593,"title":{},"body":{"classes/FileResponseDto.html":{}}}],["https://example.com/path/to/file.jpg",{"_index":1612,"title":{},"body":{"classes/FileResponseDto-2.html":{},"classes/FileType.html":{}}}],["https://example.com/path/to/file.jpg'})@transform",{"_index":1618,"title":{},"body":{"classes/FileType.html":{}}}],["https://github.com/dharmesh",{"_index":2778,"title":{},"body":{"index.html":{},"properties.html":{}}}],["https://hooks.slack.com/services/xxxxxxxxx/xxxxxxxxx/xxxxxxxxxxxxxxxxxxxxxxxx",{"_index":1557,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["https://s3.amazonaws.com/bucket/path/to/file?signature",{"_index":1829,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["httpstatus",{"_index":55,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/HttpErrorFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["httpstatus.bad_request",{"_index":1232,"title":{},"body":{"injectables/CurrenciesService.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["httpstatus.conflict",{"_index":1222,"title":{},"body":{"injectables/CurrenciesService.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["httpstatus.internal_server_error",{"_index":73,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/CurrenciesService.html":{},"classes/HttpErrorFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["httpstatus.not_found",{"_index":1239,"title":{},"body":{"injectables/CurrenciesService.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["httpstatus.ok",{"_index":1176,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["httpstatus.payload_too_large",{"_index":1871,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["httpstatus.unprocessable_entity",{"_index":1740,"title":{},"body":{"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{}}}],["iappconfig",{"_index":487,"title":{"interfaces/IAppConfig.html":{}},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IAppConfig.html":{},"coverage.html":{}}}],["iawsconfig",{"_index":489,"title":{"interfaces/IAwsConfig.html":{}},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IAwsConfig.html":{},"coverage.html":{}}}],["id",{"_index":215,"title":{},"body":{"controllers/AppController.html":{},"classes/Country.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"injectables/FilesLocalService.html":{},"classes/Query-2.html":{}}}],["id_country",{"_index":981,"title":{},"body":{"injectables/CountriesService.html":{},"classes/Country.html":{}}}],["id_currency",{"_index":1138,"title":{},"body":{"controllers/CurrenciesController.html":{},"classes/Query-2.html":{}}}],["idarea",{"_index":1340,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["idea",{"_index":2753,"title":{},"body":{"index.html":{}}}],["identification",{"_index":1003,"title":{},"body":{"classes/Country.html":{}}}],["identifier",{"_index":1048,"title":{},"body":{"classes/Country.html":{},"classes/Currency.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"coverage.html":{}}}],["ifieldconfig",{"_index":855,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/PaginationService.html":{}}}],["ifileconfig",{"_index":491,"title":{"interfaces/IFileConfig.html":{}},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IFileConfig.html":{},"coverage.html":{}}}],["ijwtconfig",{"_index":493,"title":{"interfaces/IJWTConfig.html":{}},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IJWTConfig.html":{},"coverage.html":{}}}],["image",{"_index":1562,"title":{},"body":{"classes/FileNotImageException.html":{}}}],["image.exception.ts",{"_index":1560,"title":{},"body":{"classes/FileNotImageException.html":{},"coverage.html":{}}}],["image.exception.ts:20",{"_index":1567,"title":{},"body":{"classes/FileNotImageException.html":{}}}],["image.jpg",{"_index":1657,"title":{},"body":{"classes/FileUploadDto.html":{},"injectables/FilesS3PresignedService.html":{}}}],["image.jpg'})@isstring",{"_index":1655,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["imagefilefilter",{"_index":1692,"title":{},"body":{"controllers/FilesLocalController.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"coverage.html":{}}}],["imaginary",{"_index":221,"title":{},"body":{"controllers/AppController.html":{}}}],["imperative",{"_index":2844,"title":{},"body":{"index.html":{}}}],["implemented",{"_index":1892,"title":{},"body":{"injectables/FilesService.html":{}}}],["implements",{"_index":15,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{}}}],["implied",{"_index":2903,"title":{},"body":{"license.html":{}}}],["import",{"_index":53,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IFileConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query-2.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UpdateDto.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{}}}],["imported",{"_index":1764,"title":{},"body":{"modules/FilesModule.html":{},"modules/HelperModule.html":{}}}],["importing",{"_index":115,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{}}}],["imports",{"_index":123,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{}}}],["in'})@isnotempty()@isstring",{"_index":1909,"title":{},"body":{"classes/FilterQueryDto.html":{}}}],["include",{"_index":1296,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/HttpErrorFilter.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{},"contributing.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["included",{"_index":1768,"title":{},"body":{"modules/FilesModule.html":{},"license.html":{}}}],["includes",{"_index":276,"title":{},"body":{"modules/AppModule.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/FileUploadDto.html":{},"controllers/FilesS3Controller.html":{},"injectables/FilesS3Service.html":{},"classes/Query-2.html":{},"index.html":{}}}],["including",{"_index":767,"title":{},"body":{"injectables/CountriesService.html":{},"classes/Country.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/UtilsService.html":{},"license.html":{}}}],["inclusion",{"_index":1610,"title":{},"body":{"classes/FileResponseDto-2.html":{}}}],["incoming",{"_index":1722,"title":{},"body":{"modules/FilesLocalModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{}}}],["ind",{"_index":1052,"title":{},"body":{"classes/Country.html":{}}}],["index",{"_index":17,"title":{"index.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/FilterQueryDto.html":{},"controllers/HomeController.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UtilsService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["indexes",{"_index":2110,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["india",{"_index":1055,"title":{},"body":{"classes/Country.html":{}}}],["indian",{"_index":1032,"title":{},"body":{"classes/Country.html":{},"classes/CreateDto.html":{},"classes/Currency.html":{}}}],["indicate",{"_index":210,"title":{},"body":{"controllers/AppController.html":{}}}],["indicates",{"_index":1779,"title":{},"body":{"controllers/FilesS3Controller.html":{},"classes/PaginationResponseDto.html":{}}}],["indicating",{"_index":1142,"title":{},"body":{"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{}}}],["individual",{"_index":1431,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["inestapplication",{"_index":2703,"title":{},"body":{"miscellaneous/functions.html":{}}}],["infer",{"_index":1743,"title":{},"body":{"injectables/FilesLocalService.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/HomeService.html":{},"injectables/PrismaService.html":{}}}],["infineit/winston",{"_index":185,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"dependencies.html":{}}}],["infinity",{"_index":1923,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/SortByDto.html":{},"miscellaneous/enumerations.html":{}}}],["infinitypagination",{"_index":717,"title":{},"body":{"controllers/CountriesController.html":{}}}],["infinitypaginationresponse",{"_index":714,"title":{},"body":{"controllers/CountriesController.html":{}}}],["infinitypaginationresponse(country",{"_index":723,"title":{},"body":{"controllers/CountriesController.html":{}}}],["infinitypaginationresponsedto",{"_index":715,"title":{},"body":{"controllers/CountriesController.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UpdateDto.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{}}}],["information",{"_index":682,"title":{},"body":{"controllers/CountriesController.html":{},"classes/Country.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-2.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"controllers/HomeController.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["infrastructure",{"_index":1753,"title":{},"body":{"modules/FilesModule.html":{}}}],["infrastructure/uploader/local/files.module",{"_index":1759,"title":{},"body":{"modules/FilesModule.html":{}}}],["infrastructure/uploader/s3",{"_index":1761,"title":{},"body":{"modules/FilesModule.html":{}}}],["infrastructure/uploader/s3/files.module",{"_index":1760,"title":{},"body":{"modules/FilesModule.html":{}}}],["infrastructureuploadermodule",{"_index":1763,"title":{},"body":{"modules/FilesModule.html":{},"coverage.html":{}}}],["inherits",{"_index":2466,"title":{},"body":{"classes/UpdateDto.html":{}}}],["initial",{"_index":2516,"title":{},"body":{"changelog.html":{}}}],["initialization",{"_index":2244,"title":{},"body":{"injectables/PrismaService.html":{}}}],["initialized",{"_index":2275,"title":{},"body":{"injectables/PrismaService.html":{}}}],["initializes",{"_index":2684,"title":{},"body":{"miscellaneous/functions.html":{}}}],["inject",{"_index":178,"title":{},"body":{"controllers/AppController.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["inject(loggerkey",{"_index":201,"title":{},"body":{"controllers/AppController.html":{}}}],["injectable",{"_index":385,"title":{"injectables/CommaSeparated.html":{},"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"injectables/HomeService.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{}},"body":{"injectables/CommaSeparated.html":{},"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"injectables/HomeService.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"coverage.html":{}}}],["injectables",{"_index":387,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"injectables/HomeService.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"overview.html":{}}}],["injected",{"_index":1884,"title":{},"body":{"injectables/FilesS3Service.html":{}}}],["injection",{"_index":2313,"title":{},"body":{"classes/Query.html":{}}}],["inodeemailerconfig",{"_index":495,"title":{"interfaces/INodeEmailerConfig.html":{}},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/INodeEmailerConfig.html":{},"coverage.html":{}}}],["input",{"_index":438,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/CreateDto.html":{},"injectables/SortBy.html":{},"miscellaneous/functions.html":{}}}],["inr",{"_index":1085,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{}}}],["insert",{"_index":1286,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{}}}],["insert(values",{"_index":2391,"title":{},"body":{"classes/Query-2.html":{}}}],["inserted",{"_index":1223,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["inserted.insertid",{"_index":1225,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["insertid",{"_index":2373,"title":{},"body":{"classes/Query-2.html":{}}}],["inserting",{"_index":2332,"title":{},"body":{"classes/Query.html":{},"classes/Query-2.html":{}}}],["insertoptions",{"_index":2392,"title":{},"body":{"classes/Query-2.html":{}}}],["instagram",{"_index":2869,"title":{},"body":{"index.html":{}}}],["install",{"_index":2655,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["installation",{"_index":2776,"title":{},"body":{"index.html":{}}}],["installed",{"_index":2773,"title":{},"body":{"index.html":{}}}],["instance",{"_index":27,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CurrenciesService.html":{},"classes/FileNotImageException.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"injectables/PrismaService.html":{},"classes/QueryFailedFilter.html":{},"classes/UserNotFoundException.html":{},"miscellaneous/functions.html":{}}}],["instanceof",{"_index":71,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/PrismaService.html":{}}}],["instances",{"_index":2053,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["instantiated",{"_index":1767,"title":{},"body":{"modules/FilesModule.html":{}}}],["integer",{"_index":2701,"title":{},"body":{"miscellaneous/functions.html":{}}}],["integrates",{"_index":1756,"title":{},"body":{"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["integration",{"_index":1793,"title":{},"body":{"modules/FilesS3Module.html":{}}}],["interact",{"_index":1128,"title":{},"body":{"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{}}}],["interacting",{"_index":199,"title":{},"body":{"controllers/AppController.html":{},"modules/FilesS3PresignedModule.html":{},"index.html":{}}}],["interactions",{"_index":1848,"title":{},"body":{"modules/FilesS3PresignedModule.html":{}}}],["interacts",{"_index":1189,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["intercept",{"_index":2440,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["intercept(context",{"_index":2441,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["interceptor",{"_index":2430,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["intercepts",{"_index":2445,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["interface",{"_index":1291,"title":{"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"interfaces/QueryOptions.html":{}},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"interfaces/QueryOptions.html":{},"coverage.html":{}}}],["interfaces",{"_index":2058,"title":{},"body":{"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"interfaces/QueryOptions.html":{},"overview.html":{}}}],["internal",{"_index":83,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpErrorFilter.html":{}}}],["international",{"_index":1039,"title":{},"body":{"classes/Country.html":{}}}],["introducing",{"_index":2716,"title":{},"body":{"index.html":{}}}],["introduction",{"_index":2715,"title":{},"body":{"index.html":{}}}],["invalid",{"_index":427,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["involving",{"_index":1819,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["ipagemetadtoparameters",{"_index":2073,"title":{"interfaces/IPageMetaDtoParameters.html":{}},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"coverage.html":{}}}],["ipaginationfieldconfig",{"_index":794,"title":{"interfaces/IPaginationFieldConfig.html":{}},"body":{"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/UtilsService.html":{},"coverage.html":{}}}],["ipaginationoptions",{"_index":946,"title":{},"body":{"injectables/CountriesService.html":{}}}],["ipostgresqlconfig",{"_index":498,"title":{"interfaces/IPostgreSQLConfig.html":{}},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IPostgreSQLConfig.html":{},"coverage.html":{}}}],["isarray",{"_index":1952,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["isboolean",{"_index":1445,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-3.html":{}}}],["isboolean()@isoptional",{"_index":1416,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["isdefined",{"_index":1111,"title":{},"body":{"classes/CreateDto.html":{}}}],["isdefined()@isnotempty()@isstring()@maxlength(10)@apiproperty({type",{"_index":1106,"title":{},"body":{"classes/CreateDto.html":{}}}],["isdefined()@isnotempty()@isstring()@maxlength(6)@apiproperty({type",{"_index":1103,"title":{},"body":{"classes/CreateDto.html":{}}}],["isdefined()@isnotempty()@isstring()@maxlength(80)@apiproperty({type",{"_index":1095,"title":{},"body":{"classes/CreateDto.html":{}}}],["isdefined()@type(undefined)@isnumber()@min(0)@apiproperty({type",{"_index":1091,"title":{},"body":{"classes/CreateDto.html":{}}}],["isendgridconfig",{"_index":500,"title":{"interfaces/ISendGridConfig.html":{}},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/ISendGridConfig.html":{},"coverage.html":{}}}],["isenum",{"_index":477,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["isenum(environment",{"_index":1375,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-3.html":{}}}],["isenum(environment)@isoptional",{"_index":1367,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-3.html":{}}}],["isenum(filedriver",{"_index":519,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["isenum(filedriver)@isoptional",{"_index":1487,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["isenum(paginationtype",{"_index":1929,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["isglobal",{"_index":303,"title":{},"body":{"modules/AppModule.html":{}}}],["ishealthy",{"_index":2252,"title":{},"body":{"injectables/PrismaService.html":{}}}],["isin",{"_index":1912,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["isin(abc(x",{"_index":1943,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["isint",{"_index":478,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{}}}],["isint()@isoptional",{"_index":1435,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["isint()@min(0)@max(65535",{"_index":1440,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["isint()@min(0)@max(65535)@isoptional",{"_index":1346,"title":{},"body":{"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{}}}],["ismsconfig",{"_index":502,"title":{"interfaces/ISMSConfig.html":{}},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/ISMSConfig.html":{},"coverage.html":{}}}],["isn't",{"_index":2103,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["isnan(numbervalue",{"_index":1958,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["isnotempty",{"_index":1112,"title":{},"body":{"classes/CreateDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["isnotempty()@isstring",{"_index":1907,"title":{},"body":{"classes/FilterQueryDto.html":{}}}],["isnumber",{"_index":1113,"title":{},"body":{"classes/CreateDto.html":{},"classes/FileUploadDto.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{}}}],["isnumber()@isoptional",{"_index":2402,"title":{},"body":{"classes/QueryCountryDto.html":{}}}],["isnumberstringornumber",{"_index":1915,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["isnumberstringornumber(validationoptions",{"_index":2693,"title":{},"body":{"miscellaneous/functions.html":{}}}],["iso",{"_index":1004,"title":{},"body":{"classes/Country.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["iso3",{"_index":1021,"title":{},"body":{"classes/Country.html":{}}}],["isoptional",{"_index":479,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{}}}],["isoptional()@isboolean",{"_index":1521,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["isoptional()@isstring",{"_index":1519,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["isstring",{"_index":480,"title":{},"body":{"classes/ConfigService.html":{},"classes/CreateDto.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileUploadDto.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{}}}],["isstring()@isoptional",{"_index":1344,"title":{},"body":{"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["issue",{"_index":2510,"title":{},"body":{"changelog.html":{},"contributing.html":{}}}],["issued",{"_index":226,"title":{},"body":{"controllers/AppController.html":{}}}],["issuer",{"_index":615,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IJWTConfig.html":{}}}],["issues",{"_index":2850,"title":{},"body":{"index.html":{}}}],["ist",{"_index":1025,"title":{},"body":{"classes/Country.html":{}}}],["isurl",{"_index":482,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{}}}],["isurl({require_tld",{"_index":1348,"title":{},"body":{"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{}}}],["isvalid",{"_index":424,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["isvalidfield",{"_index":1913,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["isvalidfield(entity",{"_index":2698,"title":{},"body":{"miscellaneous/functions.html":{}}}],["it's",{"_index":2720,"title":{},"body":{"index.html":{}}}],["item",{"_index":2095,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["items",{"_index":1965,"title":{},"body":{"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["iterate",{"_index":456,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/CountriesService.html":{},"injectables/SortBy.html":{}}}],["iuploadfileconfig",{"_index":504,"title":{"interfaces/IUploadFileConfig.html":{}},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IUploadFileConfig.html":{},"coverage.html":{}}}],["javascript",{"_index":2760,"title":{},"body":{"index.html":{}}}],["john",{"_index":217,"title":{},"body":{"controllers/AppController.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["johndoe",{"_index":216,"title":{},"body":{"controllers/AppController.html":{}}}],["join",{"_index":815,"title":{},"body":{"injectables/CountriesService.html":{},"classes/DynamicQueryBuilder.html":{},"interfaces/IPaginationFieldConfig.html":{},"injectables/PaginationService.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{},"index.html":{}}}],["joinclause",{"_index":1328,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["joining",{"_index":786,"title":{},"body":{"injectables/CountriesService.html":{}}}],["joinquery",{"_index":2205,"title":{},"body":{"injectables/PaginationService.html":{}}}],["joins",{"_index":1300,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["joins.join",{"_index":1330,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["joins.length",{"_index":1329,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["jointable",{"_index":813,"title":{},"body":{"injectables/CountriesService.html":{},"interfaces/IPaginationFieldConfig.html":{}}}],["jointables",{"_index":846,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["jointables.join",{"_index":853,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["jointables.push",{"_index":892,"title":{},"body":{"injectables/CountriesService.html":{}}}],["jointables.push('join",{"_index":987,"title":{},"body":{"injectables/CountriesService.html":{}}}],["jointables.push(`join",{"_index":992,"title":{},"body":{"injectables/CountriesService.html":{}}}],["jointables.push(config.jointable(alias",{"_index":927,"title":{},"body":{"injectables/CountriesService.html":{},"classes/UtilsService.html":{}}}],["jointables.push(config.jointable(index",{"_index":926,"title":{},"body":{"injectables/CountriesService.html":{},"classes/UtilsService.html":{}}}],["json",{"_index":746,"title":{},"body":{"controllers/CountriesController.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/Query.html":{},"classes/SortByDto.html":{}}}],["json.parse(value",{"_index":1902,"title":{},"body":{"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{}}}],["json.stringify(_.clone(errorresponse",{"_index":2425,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["json.stringify(_.clone(r",{"_index":365,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["json.stringify(_.clone(request.body",{"_index":363,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["json.stringify(errorresponse",{"_index":2047,"title":{},"body":{"classes/HttpErrorFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["json.stringify(reqstrobj",{"_index":374,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{}}}],["json.stringify(requestdata",{"_index":2318,"title":{},"body":{"classes/Query.html":{}}}],["json.stringify(responsedata",{"_index":2319,"title":{},"body":{"classes/Query.html":{}}}],["json.stringify(resstrobj",{"_index":379,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{}}}],["jwt",{"_index":2728,"title":{},"body":{"index.html":{}}}],["jwtconfig",{"_index":610,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["jwtservice",{"_index":2007,"title":{},"body":{"modules/HelperModule.html":{}}}],["k8s",{"_index":2830,"title":{},"body":{"index.html":{}}}],["key",{"_index":468,"title":{},"body":{"classes/ConfigService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileType.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PrismaService.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{},"classes/SortByDto.html":{},"miscellaneous/functions.html":{}}}],["key?awsaccesskeyid=access_key&expires=expiration_time&signature=signature",{"_index":1595,"title":{},"body":{"classes/FileResponseDto.html":{}}}],["keyof",{"_index":1899,"title":{},"body":{"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{}}}],["keys",{"_index":1308,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{}}}],["keys.join",{"_index":1316,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{}}}],["kind",{"_index":2902,"title":{},"body":{"license.html":{}}}],["known",{"_index":2220,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["kubectl",{"_index":2833,"title":{},"body":{"index.html":{}}}],["large",{"_index":1872,"title":{},"body":{"injectables/FilesS3PresignedService.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["last",{"_index":2096,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["lastkey",{"_index":2376,"title":{},"body":{"classes/Query-2.html":{}}}],["latest",{"_index":2721,"title":{},"body":{"index.html":{}}}],["legend",{"_index":93,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/CountriesModule.html":{},"modules/CurrenciesModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{},"overview.html":{}}}],["liability",{"_index":2917,"title":{},"body":{"license.html":{}}}],["liable",{"_index":2914,"title":{},"body":{"license.html":{}}}],["library",{"_index":2345,"title":{},"body":{"classes/Query-2.html":{}}}],["license",{"_index":2864,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["licensed",{"_index":2857,"title":{},"body":{"index.html":{}}}],["limit",{"_index":728,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"dependencies.html":{}}}],["limit/tsconfig",{"_index":2636,"title":{},"body":{"dependencies.html":{}}}],["limitation",{"_index":2882,"title":{},"body":{"license.html":{}}}],["limited",{"_index":2904,"title":{},"body":{"license.html":{}}}],["limits",{"_index":1815,"title":{},"body":{"modules/FilesS3Module.html":{}}}],["line",{"_index":419,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{}}}],["linkedin",{"_index":2868,"title":{},"body":{"index.html":{}}}],["lint",{"_index":2766,"title":{},"body":{"index.html":{}}}],["linter",{"_index":2761,"title":{},"body":{"index.html":{}}}],["linting",{"_index":2553,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["list",{"_index":394,"title":{},"body":{"injectables/CommaSeparated.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"modules/FilesLocalModule.html":{},"interfaces/QueryOptions.html":{},"injectables/SortBy.html":{}}}],["literal",{"_index":2492,"title":{},"body":{"classes/UtilsService.html":{},"miscellaneous/typealiases.html":{}}}],["load",{"_index":305,"title":{},"body":{"modules/AppModule.html":{}}}],["local",{"_index":1490,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["located",{"_index":1031,"title":{},"body":{"classes/Country.html":{}}}],["location",{"_index":1592,"title":{},"body":{"classes/FileResponseDto.html":{}}}],["lodash",{"_index":333,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/DynamicQueryBuilder.html":{},"classes/HttpErrorFilter.html":{},"injectables/PrismaService.html":{},"classes/Query-2.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{}}}],["log",{"_index":175,"title":{},"body":{"controllers/AppController.html":{}}}],["log_in_file",{"_index":1553,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["logger",{"_index":176,"title":{},"body":{"controllers/AppController.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/HttpErrorFilter.html":{},"classes/QueryFailedFilter.html":{},"dependencies.html":{}}}],["logger.error",{"_index":2046,"title":{},"body":{"classes/HttpErrorFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["logger.error(`${request.method",{"_index":2045,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["logger/context/infrastructure/nestjs/contextmodule",{"_index":286,"title":{},"body":{"modules/AppModule.html":{}}}],["logger/logger/domain/logger",{"_index":186,"title":{},"body":{"controllers/AppController.html":{}}}],["logger/logger/infrastructure/nestjs/loggermodule",{"_index":288,"title":{},"body":{"modules/AppModule.html":{}}}],["logger_app",{"_index":1509,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["logger_console_print",{"_index":1510,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["logger_context",{"_index":1511,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["logger_database_storage",{"_index":1512,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["logger_duration",{"_index":1513,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["logger_duration_log_level",{"_index":1514,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["logger_log_in_file",{"_index":1515,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["logger_log_level",{"_index":1516,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["logger_organization",{"_index":1517,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["logger_slack_inc_webhook_url",{"_index":1518,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["loggerconfig",{"_index":296,"title":{},"body":{"modules/AppModule.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"miscellaneous/typealiases.html":{}}}],["loggerkey",{"_index":184,"title":{},"body":{"controllers/AppController.html":{}}}],["loggermodule",{"_index":287,"title":{},"body":{"modules/AppModule.html":{}}}],["loggermodule.forroot(prismaservice",{"_index":308,"title":{},"body":{"modules/AppModule.html":{}}}],["logging",{"_index":2309,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["logic",{"_index":349,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"injectables/CountriesService.html":{},"classes/CreateDto.html":{},"injectables/CurrenciesService.html":{},"modules/FilesLocalModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{}}}],["logs",{"_index":2036,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["long",{"_index":1090,"title":{},"body":{"classes/CreateDto.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["lowercasetransformer",{"_index":2627,"title":{},"body":{"coverage.html":{}}}],["lts.1",{"_index":2658,"title":{},"body":{"dependencies.html":{}}}],["m",{"_index":2546,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["mac",{"_index":2805,"title":{},"body":{"index.html":{}}}],["made",{"_index":1725,"title":{},"body":{"modules/FilesLocalModule.html":{}}}],["main",{"_index":920,"title":{},"body":{"injectables/CountriesService.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{}}}],["make",{"_index":2002,"title":{},"body":{"modules/HelperModule.html":{},"contributing.html":{}}}],["makes",{"_index":2467,"title":{},"body":{"classes/UpdateDto.html":{},"miscellaneous/typealiases.html":{}}}],["making",{"_index":2003,"title":{},"body":{"modules/HelperModule.html":{},"classes/UpdateDto.html":{}}}],["manage",{"_index":762,"title":{},"body":{"modules/CountriesModule.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesService.html":{},"injectables/PrismaService.html":{}}}],["management",{"_index":2344,"title":{},"body":{"classes/Query-2.html":{}}}],["manages",{"_index":1731,"title":{},"body":{"injectables/FilesLocalService.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{}}}],["managing",{"_index":133,"title":{},"body":{"modules/ApiModule.html":{},"injectables/CountriesService.html":{},"modules/CurrenciesModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{}}}],["manipulation",{"_index":2346,"title":{},"body":{"classes/Query-2.html":{}}}],["map",{"_index":919,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/ResolvePromisesInterceptor.html":{},"classes/UtilsService.html":{}}}],["map((filter",{"_index":890,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/PaginationService.html":{}}}],["map((s",{"_index":2208,"title":{},"body":{"injectables/PaginationService.html":{}}}],["map((sortitem",{"_index":934,"title":{},"body":{"injectables/CountriesService.html":{},"classes/UtilsService.html":{}}}],["map((val",{"_index":906,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/PaginationService.html":{}}}],["markdown",{"_index":2798,"title":{},"body":{"index.html":{}}}],["marked",{"_index":1996,"title":{},"body":{"modules/HelperModule.html":{}}}],["marks",{"_index":1609,"title":{},"body":{"classes/FileResponseDto-2.html":{},"injectables/FilesS3Service.html":{}}}],["match",{"_index":451,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["matches",{"_index":1911,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["matches(/^(asc|desc|asc|desc",{"_index":1949,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["matching",{"_index":88,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UpdateDto.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"changelog.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["math.ceil(totalitems",{"_index":2102,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["math.min(startindex",{"_index":2111,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["max",{"_index":483,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["max(500",{"_index":1936,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["max(65535",{"_index":512,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{}}}],["max_file_size",{"_index":1477,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["max_upload_file_size",{"_index":657,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IUploadFileConfig.html":{}}}],["maxconnections",{"_index":1459,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["maxfilesize",{"_index":673,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"interfaces/IFileConfig.html":{}}}],["maximum",{"_index":1437,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"injectables/FilesS3PresignedService.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["maxlength",{"_index":1086,"title":{},"body":{"classes/CreateDto.html":{}}}],["maxlength(10",{"_index":1121,"title":{},"body":{"classes/CreateDto.html":{}}}],["maxlength(3",{"_index":1118,"title":{},"body":{"classes/CreateDto.html":{}}}],["maxlength(6",{"_index":1120,"title":{},"body":{"classes/CreateDto.html":{}}}],["maxlength(80",{"_index":1119,"title":{},"body":{"classes/CreateDto.html":{}}}],["maxpages",{"_index":2075,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["maxpagesaftercurrentpage",{"_index":2109,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["maxpagesbeforecurrentpage",{"_index":2108,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["maybetype",{"_index":2938,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["meaning",{"_index":1997,"title":{},"body":{"modules/HelperModule.html":{}}}],["memberof",{"_index":1292,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FilterQueryDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/Query-1.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"classes/SortByDto.html":{}}}],["merchantability",{"_index":2906,"title":{},"body":{"license.html":{}}}],["merge",{"_index":2885,"title":{},"body":{"license.html":{}}}],["message",{"_index":81,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/CommaSeparated.html":{},"injectables/CurrenciesService.html":{},"classes/FileNotImageException.html":{},"injectables/FilesS3PresignedService.html":{},"classes/FilterQueryDto.html":{},"classes/HttpErrorFilter.html":{},"classes/PaginationQueryDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UserNotFoundException.html":{},"index.html":{}}}],["message');example",{"_index":2479,"title":{},"body":{"classes/UserNotFoundException.html":{}}}],["meta",{"_index":982,"title":{},"body":{"injectables/CountriesService.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{}}}],["metadata",{"_index":34,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"controllers/FilesS3Controller.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/QueryFailedFilter.html":{},"dependencies.html":{}}}],["metapage",{"_index":2195,"title":{},"body":{"injectables/PaginationService.html":{}}}],["method",{"_index":776,"title":{},"body":{"injectables/CountriesService.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"controllers/FilesS3Controller.html":{},"injectables/FilesS3Service.html":{},"classes/HttpErrorFilter.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{}}}],["methods",{"_index":21,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"controllers/HomeController.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/UtilsService.html":{}}}],["method},${url},${reqdata},${resdata",{"_index":2339,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["middle",{"_index":2107,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["middleware",{"_index":1794,"title":{},"body":{"modules/FilesS3Module.html":{},"miscellaneous/functions.html":{}}}],["migration",{"_index":2816,"title":{},"body":{"index.html":{}}}],["migrationdocker",{"_index":2818,"title":{},"body":{"index.html":{}}}],["mimetype",{"_index":2068,"title":{},"body":{"interfaces/IFileConfig.html":{}}}],["min",{"_index":484,"title":{},"body":{"classes/ConfigService.html":{},"classes/CreateDto.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["min(0",{"_index":511,"title":{},"body":{"classes/ConfigService.html":{},"classes/CreateDto.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{}}}],["min(1",{"_index":1931,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["min(10",{"_index":1935,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["minikube",{"_index":2832,"title":{},"body":{"index.html":{}}}],["minimum",{"_index":1930,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["minutes",{"_index":1062,"title":{},"body":{"classes/Country.html":{}}}],["miscellaneous",{"_index":2667,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["mit",{"_index":2856,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["modify",{"_index":2884,"title":{},"body":{"license.html":{}}}],["module",{"_index":89,"title":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/CountriesModule.html":{},"modules/CurrenciesModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{}},"body":{"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/FileType.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesService.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/PaginationQueryDto.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/SortByDto.html":{},"classes/UpdateDto.html":{},"overview.html":{}}}],["module,method,url,req,response",{"_index":2337,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["modules",{"_index":91,"title":{"modules.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/CountriesModule.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"modules.html":{},"overview.html":{}}}],["modules/api.module",{"_index":298,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/countries/dto/country",{"_index":1919,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["module}','${method}','${url}','${reqescvalue}','${resescvalue",{"_index":2338,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["more",{"_index":839,"title":{},"body":{"injectables/CountriesService.html":{},"classes/PrismaClientExceptionFilter.html":{},"index.html":{}}}],["much",{"_index":2534,"title":{},"body":{"contributing.html":{}}}],["multer",{"_index":1687,"title":{},"body":{"controllers/FilesLocalController.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"dependencies.html":{}}}],["multermodule",{"_index":1795,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["multermodule.registerasync",{"_index":1803,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["multers3",{"_index":1801,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["multers3.auto_content_type",{"_index":1810,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["multifiledestdir",{"_index":2617,"title":{},"body":{"coverage.html":{}}}],["multiline",{"_index":538,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["multipart/form",{"_index":1702,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["multiple",{"_index":941,"title":{},"body":{"injectables/CountriesService.html":{},"classes/UtilsService.html":{}}}],["multiple_file_path",{"_index":661,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IUploadFileConfig.html":{}}}],["multiplestatements",{"_index":567,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["my_table",{"_index":2189,"title":{},"body":{"injectables/PaginationService.html":{}}}],["mycontext",{"_index":1541,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["myset",{"_index":917,"title":{},"body":{"injectables/CountriesService.html":{},"classes/UtilsService.html":{}}}],["myset.add(alias",{"_index":925,"title":{},"body":{"injectables/CountriesService.html":{},"classes/UtilsService.html":{}}}],["myset.has(alias",{"_index":924,"title":{},"body":{"injectables/CountriesService.html":{},"classes/UtilsService.html":{}}}],["mysql",{"_index":555,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["n",{"_index":536,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["name",{"_index":30,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileNotImageException.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/FilterQueryDto.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["name_plural",{"_index":1081,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/Query-2.html":{}}}],["names",{"_index":2133,"title":{},"body":{"interfaces/IPaginationFieldConfig.html":{},"classes/Query-2.html":{}}}],["native",{"_index":1107,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{}}}],["navigate",{"_index":2078,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["near",{"_index":2105,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["necessary",{"_index":760,"title":{},"body":{"modules/CountriesModule.html":{},"modules/CurrenciesModule.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesS3PresignedModule.html":{},"controllers/HomeController.html":{}}}],["needed",{"_index":840,"title":{},"body":{"injectables/CountriesService.html":{}}}],["needing",{"_index":2000,"title":{},"body":{"modules/HelperModule.html":{}}}],["nest",{"_index":2855,"title":{},"body":{"index.html":{},"properties.html":{}}}],["nested",{"_index":2431,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["nestederrormessage",{"_index":384,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["nestinterceptor",{"_index":2449,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["nestjs",{"_index":196,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"injectables/FilesService.html":{},"classes/FilterQueryDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/PaginationQueryDto.html":{},"injectables/ResolvePromisesInterceptor.html":{},"classes/SortByDto.html":{},"classes/UserNotFoundException.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["nestjs/axios",{"_index":2004,"title":{},"body":{"modules/HelperModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":56,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/FileNotImageException.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UserNotFoundException.html":{},"dependencies.html":{}}}],["nestjs/common/utils/random",{"_index":1799,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["nestjs/config",{"_index":282,"title":{},"body":{"modules/AppModule.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"injectables/FilesLocalService.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/HomeService.html":{},"injectables/PrismaService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":57,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":2008,"title":{},"body":{"modules/HelperModule.html":{}}}],["nestjs/mapped",{"_index":2472,"title":{},"body":{"classes/UpdateDto.html":{}}}],["nestjs/platform",{"_index":1682,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":181,"title":{},"body":{"controllers/AppController.html":{},"controllers/CountriesController.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"classes/Currency.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"controllers/HomeController.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":151,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/PrismaService.html":{},"dependencies.html":{}}}],["new",{"_index":77,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/FileNotImageException.html":{},"classes/FileType.html":{},"injectables/FilesLocalService.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"controllers/HomeController.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/Query.html":{},"classes/Query-2.html":{},"classes/QueryFailedFilter.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"contributing.html":{},"coverage.html":{},"index.html":{}}}],["newobj",{"_index":2287,"title":{},"body":{"injectables/PrismaService.html":{}}}],["newobj[key",{"_index":2292,"title":{},"body":{"injectables/PrismaService.html":{}}}],["next",{"_index":418,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{},"index.html":{}}}],["next.handle().pipe(map((data",{"_index":2454,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["ng",{"_index":2112,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["node.js",{"_index":2719,"title":{},"body":{"index.html":{}}}],["node_emailer_from_email",{"_index":641,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/INodeEmailerConfig.html":{}}}],["node_emailer_host",{"_index":633,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/INodeEmailerConfig.html":{}}}],["node_emailer_password",{"_index":639,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/INodeEmailerConfig.html":{}}}],["node_emailer_port",{"_index":635,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/INodeEmailerConfig.html":{}}}],["node_emailer_to_email",{"_index":643,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/INodeEmailerConfig.html":{}}}],["node_emailer_user",{"_index":637,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/INodeEmailerConfig.html":{}}}],["node_env",{"_index":1358,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-3.html":{}}}],["nodeemailerconfig",{"_index":632,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["nodeenv",{"_index":463,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-3.html":{}}}],["non",{"_index":1561,"title":{},"body":{"classes/FileNotImageException.html":{}}}],["none",{"_index":1922,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"miscellaneous/enumerations.html":{}}}],["noninfringement",{"_index":2910,"title":{},"body":{"license.html":{}}}],["notes",{"_index":2848,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":2477,"title":{},"body":{"classes/UserNotFoundException.html":{}}}],["nothing",{"_index":1230,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["notice",{"_index":2897,"title":{},"body":{"license.html":{}}}],["npm",{"_index":2660,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["null",{"_index":950,"title":{},"body":{"injectables/CountriesService.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/HttpErrorFilter.html":{},"classes/PaginationQueryDto.html":{},"injectables/PrismaService.html":{},"classes/QueryCountryDto.html":{},"interfaces/QueryOptions.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{}}}],["number",{"_index":224,"title":{},"body":{"controllers/AppController.html":{},"classes/ConfigService.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileUploadDto.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"interfaces/IAppConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"interfaces/QueryOptions.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{}}}],["number(strippedvalue",{"_index":1957,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["number(this.get(key",{"_index":547,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["number(total[0].count",{"_index":2202,"title":{},"body":{"injectables/PaginationService.html":{}}}],["number(value",{"_index":1900,"title":{},"body":{"classes/FilterCountryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortCountryDto.html":{}}}],["numbers",{"_index":395,"title":{},"body":{"injectables/CommaSeparated.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"injectables/SortBy.html":{}}}],["numbervalue",{"_index":1956,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["numeric",{"_index":2695,"title":{},"body":{"miscellaneous/functions.html":{}}}],["o",{"_index":237,"title":{},"body":{"controllers/AppController.html":{}}}],["object",{"_index":177,"title":{},"body":{"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/FilterQueryDto.html":{},"controllers/HomeController.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/PaginationQueryDto.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{},"classes/SortByDto.html":{},"classes/UpdateDto.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{}}}],["object.assign",{"_index":2288,"title":{},"body":{"injectables/PrismaService.html":{}}}],["object.defineproperty(pagination",{"_index":2179,"title":{},"body":{"classes/PaginationResponseDto.html":{}}}],["object.entries(newobj",{"_index":2289,"title":{},"body":{"injectables/PrismaService.html":{}}}],["object.keys(conditions).map",{"_index":1335,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["object.keys(conditions).map((key",{"_index":1318,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["object.keys(optionalconditions).foreach((key",{"_index":1322,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["object.keys(payload).length",{"_index":1231,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["object.keys(process.env",{"_index":542,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["object.keys(values).length",{"_index":1336,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["object.keys(values).map((key",{"_index":1334,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["object.keys(where)[object.keys(where).length",{"_index":2377,"title":{},"body":{"classes/Query-2.html":{}}}],["object.values(conditions",{"_index":1339,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["object.values(values",{"_index":1338,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["objects",{"_index":50,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/CountriesController.html":{},"classes/FilterQueryDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/PaginationQueryDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"classes/SortByDto.html":{},"miscellaneous/typealiases.html":{}}}],["observable",{"_index":2447,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["obtaining",{"_index":2877,"title":{},"body":{"license.html":{}}}],["occurred",{"_index":2328,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["occurs",{"_index":1214,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["offset",{"_index":826,"title":{},"body":{"injectables/CountriesService.html":{},"classes/Country.html":{},"injectables/PaginationService.html":{}}}],["offset_in_minutes",{"_index":1022,"title":{},"body":{"classes/Country.html":{}}}],["ok",{"_index":168,"title":{},"body":{"controllers/AppController.html":{}}}],["one",{"_index":262,"title":{},"body":{"controllers/AppController.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/SortByDto.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["onmoduledestroy",{"_index":2253,"title":{},"body":{"injectables/PrismaService.html":{}}}],["onmoduleinit",{"_index":2254,"title":{},"body":{"injectables/PrismaService.html":{}}}],["open",{"_index":2532,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["operation",{"_index":1302,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/PrismaClientExceptionFilter.html":{},"interfaces/QueryOptions.html":{},"classes/UpdateDto.html":{}}}],["operations",{"_index":759,"title":{},"body":{"modules/CountriesModule.html":{},"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/FileResponseDto.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"injectables/PrismaService.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{}}}],["operator",{"_index":902,"title":{},"body":{"injectables/CountriesService.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{}}}],["opinionated",{"_index":2763,"title":{},"body":{"index.html":{}}}],["optional",{"_index":32,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/FileNotImageException.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/UpdateDto.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["optionalconditions",{"_index":1299,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{}}}],["optionalconditions[key",{"_index":1323,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["options",{"_index":796,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"interfaces/QueryOptions.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{}}}],["options.ts",{"_index":2128,"title":{},"body":{"interfaces/IPaginationFieldConfig.html":{},"coverage.html":{}}}],["orchestration",{"_index":2742,"title":{},"body":{"index.html":{}}}],["order",{"_index":912,"title":{},"body":{"injectables/CountriesService.html":{},"classes/FilterCountryDto.html":{},"injectables/PaginationService.html":{},"classes/QueryCountryDto.html":{},"classes/SortCountryDto.html":{},"classes/UtilsService.html":{}}}],["orderby",{"_index":1898,"title":{},"body":{"classes/FilterCountryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortCountryDto.html":{}}}],["org",{"_index":1539,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["organization",{"_index":1537,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["origin",{"_index":2548,"title":{},"body":{"contributing.html":{}}}],["original",{"_index":2691,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["originalname",{"_index":2069,"title":{},"body":{"interfaces/IFileConfig.html":{}}}],["orm",{"_index":200,"title":{},"body":{"controllers/AppController.html":{},"injectables/PrismaService.html":{},"index.html":{}}}],["otherwise",{"_index":412,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{},"license.html":{}}}],["out",{"_index":106,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/CountriesModule.html":{},"modules/CurrenciesModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["outputs",{"_index":2321,"title":{},"body":{"classes/Query.html":{}}}],["over",{"_index":991,"title":{},"body":{"injectables/CountriesService.html":{}}}],["overrides",{"_index":1430,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["overview",{"_index":2925,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":2804,"title":{},"body":{"index.html":{}}}],["p2000",{"_index":2233,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["p2002",{"_index":2230,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["p2010",{"_index":2240,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["p2025",{"_index":2237,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["package",{"_index":2632,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":725,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{}}}],["pager",{"_index":2114,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["pages",{"_index":2090,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{}}}],["pagesize",{"_index":2081,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{}}}],["paginate",{"_index":1924,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/SortByDto.html":{},"miscellaneous/enumerations.html":{}}}],["paginate(only",{"_index":1927,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["paginate(selectquery",{"_index":2192,"title":{},"body":{"injectables/PaginationService.html":{}}}],["paginated",{"_index":691,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{}}}],["paginatedresultdto",{"_index":741,"title":{},"body":{"controllers/CountriesController.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["pagination",{"_index":694,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/Query-2.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["pagination${classreference.name}responsedto",{"_index":2181,"title":{},"body":{"classes/PaginationResponseDto.html":{}}}],["paginationmetadto",{"_index":856,"title":{"classes/PaginationMetaDto.html":{}},"body":{"injectables/CountriesService.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"coverage.html":{}}}],["paginationoptions",{"_index":737,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{}}}],["paginationquery",{"_index":751,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["paginationquery.filters",{"_index":886,"title":{},"body":{"injectables/CountriesService.html":{},"classes/UtilsService.html":{}}}],["paginationquery.filters.foreach((filter",{"_index":977,"title":{},"body":{"injectables/CountriesService.html":{}}}],["paginationquery.filters.length",{"_index":888,"title":{},"body":{"injectables/CountriesService.html":{}}}],["paginationquery.filters?.foreach((filter",{"_index":967,"title":{},"body":{"injectables/CountriesService.html":{}}}],["paginationquery.filters?.some((filter",{"_index":986,"title":{},"body":{"injectables/CountriesService.html":{}}}],["paginationquery.sort",{"_index":883,"title":{},"body":{"injectables/CountriesService.html":{},"classes/UtilsService.html":{}}}],["paginationquerydto",{"_index":685,"title":{"classes/PaginationQueryDto.html":{}},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{},"coverage.html":{}}}],["paginationquerydto.limit",{"_index":2099,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["paginationquerydto.page",{"_index":2100,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["paginationresponse",{"_index":697,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["paginationresponse(classreference",{"_index":2175,"title":{},"body":{"classes/PaginationResponseDto.html":{},"miscellaneous/functions.html":{}}}],["paginationresponse(country",{"_index":709,"title":{},"body":{"controllers/CountriesController.html":{}}}],["paginationresponse(currency",{"_index":1173,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["paginationresponsedto",{"_index":693,"title":{"classes/PaginationResponseDto.html":{}},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"coverage.html":{}}}],["paginationservice",{"_index":771,"title":{"injectables/PaginationService.html":{}},"body":{"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"modules/HelperModule.html":{},"injectables/PaginationService.html":{},"coverage.html":{},"overview.html":{}}}],["paginationservice.paginate",{"_index":2188,"title":{},"body":{"injectables/PaginationService.html":{}}}],["paginationtype",{"_index":1921,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"miscellaneous/enumerations.html":{}}}],["paginationtype.all",{"_index":1928,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["pair",{"_index":441,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["pairs",{"_index":445,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["pallette",{"_index":2802,"title":{},"body":{"index.html":{}}}],["param",{"_index":60,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/FileNotImageException.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"controllers/HomeController.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{}}}],["param('id_currency",{"_index":1169,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["parameter",{"_index":2247,"title":{},"body":{"injectables/PrismaService.html":{}}}],["parameterized",{"_index":931,"title":{},"body":{"injectables/CountriesService.html":{},"classes/UtilsService.html":{}}}],["parameters",{"_index":28,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/FileNotImageException.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/FilterQueryDto.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":2098,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"injectables/PrismaService.html":{}}}],["parseint(process.env.app_port",{"_index":1391,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["parseint(process.env.max_file_size",{"_index":1507,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["parseint(process.env.port",{"_index":1393,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["parseint(process.env.postgres_max_connections",{"_index":1461,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["parseint(process.env.postgres_pool_timeout",{"_index":1465,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["parseint(process.env.postgres_port",{"_index":1453,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["partial",{"_index":2469,"title":{},"body":{"classes/UpdateDto.html":{},"miscellaneous/typealiases.html":{}}}],["partial.type",{"_index":1210,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["partial.type.ts",{"_index":2936,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["partialtype",{"_index":2471,"title":{},"body":{"classes/UpdateDto.html":{}}}],["partialtype(createdto",{"_index":2470,"title":{},"body":{"classes/UpdateDto.html":{}}}],["particular",{"_index":2908,"title":{},"body":{"license.html":{}}}],["particularly",{"_index":2037,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["parts",{"_index":442,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["parts.length",{"_index":447,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["pass",{"_index":2177,"title":{},"body":{"classes/PaginationResponseDto.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["passport",{"_index":223,"title":{},"body":{"controllers/AppController.html":{}}}],["password",{"_index":561,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{}}}],["patch",{"_index":1153,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["patch(`v1/${modules}/:id_currency",{"_index":1168,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["patch(undefined)@httpcode(httpstatus.ok)@apiparam({name",{"_index":1149,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["patel",{"_index":2867,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["patel/nestjs",{"_index":2779,"title":{},"body":{"index.html":{},"properties.html":{}}}],["path",{"_index":79,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["path/to/exception",{"_index":1572,"title":{},"body":{"classes/FileNotImageException.html":{}}}],["path/to/exception';throw",{"_index":1563,"title":{},"body":{"classes/FileNotImageException.html":{}}}],["path/to/filter",{"_index":2042,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["path/to/filter';@module",{"_index":2038,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["paths",{"_index":1614,"title":{},"body":{"classes/FileType.html":{}}}],["payload",{"_index":1205,"title":{},"body":{"injectables/CurrenciesService.html":{},"injectables/FilesS3PresignedService.html":{}}}],["payload.code",{"_index":1233,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["payload.id",{"_index":1235,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["payloadtoolargeexception",{"_index":1862,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["per",{"_index":1933,"title":{},"body":{"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["perform",{"_index":1295,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"controllers/HomeController.html":{},"injectables/PaginationService.html":{},"interfaces/QueryOptions.html":{}}}],["performing",{"_index":198,"title":{},"body":{"controllers/AppController.html":{}}}],["performs",{"_index":163,"title":{},"body":{"controllers/AppController.html":{},"injectables/CurrenciesService.html":{}}}],["permission",{"_index":2871,"title":{},"body":{"license.html":{}}}],["permit",{"_index":2892,"title":{},"body":{"license.html":{}}}],["person",{"_index":2876,"title":{},"body":{"license.html":{}}}],["persons",{"_index":2893,"title":{},"body":{"license.html":{}}}],["petersen",{"_index":2792,"title":{},"body":{"index.html":{}}}],["pg",{"_index":2662,"title":{},"body":{"dependencies.html":{}}}],["pgbasequery",{"_index":2350,"title":{},"body":{"classes/Query-2.html":{}}}],["pgbaseselectfield",{"_index":2351,"title":{},"body":{"classes/Query-2.html":{}}}],["pgsqlservice",{"_index":334,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["phone",{"_index":230,"title":{},"body":{"controllers/AppController.html":{}}}],["plain",{"_index":1261,"title":{},"body":{"classes/Currency.html":{},"miscellaneous/functions.html":{}}}],["plaintoinstance",{"_index":1896,"title":{},"body":{"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{}}}],["plaintoinstance(filtercountrydto",{"_index":1901,"title":{},"body":{"classes/FilterCountryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortCountryDto.html":{}}}],["plaintoinstance(filterquerydto",{"_index":1938,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["plaintoinstance(sortbydto",{"_index":1941,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["plaintoinstance(sortcountrydto",{"_index":1903,"title":{},"body":{"classes/FilterCountryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortCountryDto.html":{}}}],["plaintoinstance(sortuserdto",{"_index":1960,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["please",{"_index":2525,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["pluggable",{"_index":2759,"title":{},"body":{"index.html":{}}}],["plural",{"_index":1098,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{}}}],["plus",{"_index":2743,"title":{},"body":{"index.html":{}}}],["pooltimeout",{"_index":1463,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["pop",{"_index":1813,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["port",{"_index":557,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"interfaces/IAppConfig.html":{}}}],["portions",{"_index":2900,"title":{},"body":{"license.html":{}}}],["possible",{"_index":2535,"title":{},"body":{"contributing.html":{}}}],["post",{"_index":1154,"title":{},"body":{"controllers/CurrenciesController.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{}}}],["post('v1/upload",{"_index":1703,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3PresignedController.html":{}}}],["post('v1/upload/s3",{"_index":1778,"title":{},"body":{"controllers/FilesS3Controller.html":{}}}],["post(`v1/${modules",{"_index":1163,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["post(undefined)@httpcode(httpstatus.ok)@apicreatedresponse({type",{"_index":1133,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["postgres",{"_index":2828,"title":{},"body":{"index.html":{}}}],["postgres_connection_limit",{"_index":2135,"title":{},"body":{"interfaces/IPostgreSQLConfig.html":{}}}],["postgres_host",{"_index":1404,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"interfaces/IPostgreSQLConfig.html":{}}}],["postgres_max_connections",{"_index":1405,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["postgres_name",{"_index":1406,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"interfaces/IPostgreSQLConfig.html":{}}}],["postgres_password",{"_index":1407,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"interfaces/IPostgreSQLConfig.html":{}}}],["postgres_pool_timeout",{"_index":2136,"title":{},"body":{"interfaces/IPostgreSQLConfig.html":{}}}],["postgres_port",{"_index":1408,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"interfaces/IPostgreSQLConfig.html":{}}}],["postgres_schema",{"_index":2137,"title":{},"body":{"interfaces/IPostgreSQLConfig.html":{}}}],["postgres_user",{"_index":1409,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"interfaces/IPostgreSQLConfig.html":{}}}],["postgresql",{"_index":1432,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"index.html":{}}}],["postgresql://${process.env.postgres_user}:${process.env.postgres_password}@${process.env.postgres_host}:${process.env.postgres_port}/${process.env.postgres_name}?connection_limit=${process.env.postgres_max_connections}&pool_timeout=${process.env.postgres_pool_timeout}&schema=${process.env.postgres_schema",{"_index":1450,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["postgresql://${this.get('postgres_user')}:${this.get('postgres_password')}@${this.get('postgres_host')}:${this.get('postgres_port')}/${this.get('postgres_name')}?connection_limit=${this.get('postgres_connection_limit')}&pool_timeout=${this.get('postgres_pool_timeout')}&schema=${this.get('postgres_schema",{"_index":583,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["powerful",{"_index":2722,"title":{},"body":{"index.html":{}}}],["pre",{"_index":2745,"title":{},"body":{"index.html":{}}}],["precision",{"_index":1102,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{}}}],["prefix",{"_index":2030,"title":{},"body":{"injectables/HomeService.html":{},"interfaces/IAppConfig.html":{}}}],["prerequisites",{"_index":2771,"title":{},"body":{"index.html":{}}}],["presence",{"_index":1882,"title":{},"body":{"injectables/FilesS3Service.html":{}}}],["present",{"_index":2951,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["preserves",{"_index":2690,"title":{},"body":{"miscellaneous/functions.html":{}}}],["presigned",{"_index":1481,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileResponseDto.html":{},"classes/FileType.html":{},"modules/FilesModule.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"miscellaneous/enumerations.html":{}}}],["presigned/dto/file",{"_index":1577,"title":{},"body":{"classes/FileResponseDto.html":{},"coverage.html":{}}}],["presigned/dto/file.dto.ts",{"_index":1648,"title":{},"body":{"classes/FileUploadDto.html":{},"coverage.html":{}}}],["presigned/dto/file.dto.ts:23",{"_index":1656,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["presigned/dto/file.dto.ts:35",{"_index":1659,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["presigned/files.controller.ts",{"_index":1818,"title":{},"body":{"controllers/FilesS3PresignedController.html":{},"coverage.html":{}}}],["presigned/files.controller.ts:49",{"_index":1833,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["presigned/files.controller.ts:69",{"_index":1826,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["presigned/files.module",{"_index":1762,"title":{},"body":{"modules/FilesModule.html":{}}}],["presigned/files.module.ts",{"_index":1847,"title":{},"body":{"modules/FilesS3PresignedModule.html":{}}}],["presigned/files.service.ts",{"_index":1853,"title":{},"body":{"injectables/FilesS3PresignedService.html":{},"coverage.html":{}}}],["presigned/files.service.ts:128",{"_index":1860,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["presigned/files.service.ts:26",{"_index":1855,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["presigned/files.service.ts:59",{"_index":1856,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["presigner",{"_index":1632,"title":{},"body":{"classes/FileType.html":{},"injectables/FilesS3PresignedService.html":{},"dependencies.html":{}}}],["prettier",{"_index":2762,"title":{},"body":{"index.html":{}}}],["prevent",{"_index":1217,"title":{},"body":{"injectables/CurrenciesService.html":{},"classes/Query.html":{}}}],["primitive",{"_index":2689,"title":{},"body":{"miscellaneous/functions.html":{}}}],["prisma",{"_index":169,"title":{},"body":{"controllers/AppController.html":{},"injectables/CurrenciesService.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/QueryFailedFilter.html":{},"coverage.html":{},"index.html":{}}}],["prisma's",{"_index":2184,"title":{},"body":{"injectables/PaginationService.html":{}}}],["prisma.io",{"_index":2794,"title":{},"body":{"index.html":{}}}],["prisma.prisma",{"_index":2793,"title":{},"body":{"index.html":{}}}],["prisma.prismaclientknownrequesterror",{"_index":2222,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["prisma.transactionclient",{"_index":2263,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prisma/client",{"_index":2225,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/QueryFailedFilter.html":{},"dependencies.html":{}}}],["prisma/data/countries",{"_index":2561,"title":{},"body":{"coverage.html":{}}}],["prisma/migration",{"_index":2817,"title":{},"body":{"index.html":{}}}],["prisma/seed.ts",{"_index":2568,"title":{},"body":{"coverage.html":{}}}],["prisma_client",{"_index":309,"title":{},"body":{"modules/AppModule.html":{}}}],["prismaclient",{"_index":2243,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismaclientexceptionfilter",{"_index":2218,"title":{"classes/PrismaClientExceptionFilter.html":{}},"body":{"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"coverage.html":{}}}],["prismaclientknownrequesterror",{"_index":2221,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["prismaconfig",{"_index":464,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["prismaservice",{"_index":153,"title":{"injectables/PrismaService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/CurrenciesService.html":{},"modules/HelperModule.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":202,"title":{},"body":{"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"injectables/FilesS3PresignedService.html":{},"classes/Query-2.html":{}}}],["process",{"_index":1880,"title":{},"body":{"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["process.cwd",{"_index":575,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{}}}],["process.env",{"_index":1501,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["process.env.api_prefix",{"_index":1395,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["process.env.app_description",{"_index":1382,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["process.env.app_name",{"_index":1380,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["process.env.app_port",{"_index":1390,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["process.env.app_prefix",{"_index":1385,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["process.env.app_version",{"_index":1383,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["process.env.aws_access_key_id",{"_index":1502,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["process.env.aws_default_s3_bucket",{"_index":1504,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["process.env.aws_s3_region",{"_index":1505,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["process.env.aws_secret_access_key",{"_index":1503,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["process.env.backend_domain",{"_index":1388,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["process.env.database_ca",{"_index":1471,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.database_cert",{"_index":1474,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.database_key",{"_index":1472,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.database_reject_unauthorized",{"_index":1470,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.database_ssl_enabled",{"_index":1468,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.database_synchronize",{"_index":1458,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.file_driver",{"_index":1499,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["process.env.frontend_domain",{"_index":1387,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["process.env.logger_app",{"_index":1542,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["process.env.logger_context",{"_index":1540,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["process.env.logger_duration_log_level",{"_index":1550,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["process.env.logger_log_level",{"_index":1546,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["process.env.logger_organization",{"_index":1538,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["process.env.logger_slack_inc_webhook_url",{"_index":1556,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["process.env.max_file_size",{"_index":1506,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["process.env.node_env",{"_index":301,"title":{},"body":{"modules/AppModule.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-3.html":{}}}],["process.env.port",{"_index":1392,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["process.env.postgres_host",{"_index":1451,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.postgres_max_connections",{"_index":1460,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.postgres_name",{"_index":1456,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.postgres_password",{"_index":1455,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.postgres_pool_timeout",{"_index":1464,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.postgres_port",{"_index":1452,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.postgres_schema",{"_index":1466,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.postgres_user",{"_index":1457,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.pwd",{"_index":574,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{}}}],["process.env[envname",{"_index":543,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["process.env[envname].replace(/\\\\n/g",{"_index":544,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["process.env[key",{"_index":545,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-3.html":{}}}],["processed",{"_index":1598,"title":{},"body":{"classes/FileResponseDto-1.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{}}}],["processing",{"_index":1796,"title":{},"body":{"modules/FilesS3Module.html":{},"index.html":{}}}],["production",{"_index":530,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["productionbuild",{"_index":2810,"title":{},"body":{"index.html":{}}}],["profile_pic_file_path",{"_index":659,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IUploadFileConfig.html":{}}}],["profiledestdir",{"_index":2618,"title":{},"body":{"coverage.html":{}}}],["project",{"_index":2521,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["promise",{"_index":171,"title":{},"body":{"controllers/AppController.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"miscellaneous/functions.html":{}}}],["promise.all",{"_index":2200,"title":{},"body":{"injectables/PaginationService.html":{}}}],["promise.resolve",{"_index":2304,"title":{},"body":{"injectables/PrismaService.html":{}}}],["promises",{"_index":2432,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{},"miscellaneous/functions.html":{}}}],["properties",{"_index":18,"title":{"properties.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"injectables/FilesS3PresignedService.html":{},"classes/FilterQueryDto.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"classes/Query-2.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UpdateDto.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["property",{"_index":1015,"title":{},"body":{"classes/Country.html":{},"classes/Currency.html":{},"classes/FileResponseDto-2.html":{},"interfaces/IAppConfig.html":{},"miscellaneous/functions.html":{}}}],["propertyvalue",{"_index":409,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["props",{"_index":253,"title":{},"body":{"controllers/AppController.html":{}}}],["provide",{"_index":137,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"classes/Country.html":{},"modules/FilesLocalModule.html":{},"classes/HttpErrorFilter.html":{}}}],["provided",{"_index":778,"title":{},"body":{"injectables/CountriesService.html":{},"classes/CreateDto.html":{},"injectables/CurrenciesService.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"interfaces/IPaginationFieldConfig.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/Query-2.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["provider",{"_index":1883,"title":{},"body":{"injectables/FilesS3Service.html":{}}}],["providers",{"_index":96,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/CountriesModule.html":{},"modules/CurrenciesModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{},"classes/HttpErrorFilter.html":{},"coverage.html":{},"overview.html":{}}}],["providers/dynamic",{"_index":2386,"title":{},"body":{"classes/Query-2.html":{}}}],["providers/file",{"_index":1693,"title":{},"body":{"controllers/FilesLocalController.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["provides",{"_index":143,"title":{},"body":{"controllers/AppController.html":{},"modules/CountriesModule.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"modules/HelperModule.html":{},"injectables/HomeService.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/PaginationMetaDto.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query-2.html":{},"classes/UtilsService.html":{}}}],["providing",{"_index":766,"title":{},"body":{"injectables/CountriesService.html":{}}}],["ptbl",{"_index":809,"title":{},"body":{"injectables/CountriesService.html":{},"classes/Query-2.html":{},"classes/UtilsService.html":{}}}],["ptbl.capital",{"_index":807,"title":{},"body":{"injectables/CountriesService.html":{}}}],["ptbl.code",{"_index":2382,"title":{},"body":{"classes/Query-2.html":{}}}],["ptbl.continent",{"_index":806,"title":{},"body":{"injectables/CountriesService.html":{}}}],["ptbl.decimal_digits",{"_index":2384,"title":{},"body":{"classes/Query-2.html":{}}}],["ptbl.dial_code",{"_index":805,"title":{},"body":{"injectables/CountriesService.html":{}}}],["ptbl.id_country",{"_index":799,"title":{},"body":{"injectables/CountriesService.html":{}}}],["ptbl.id_currency",{"_index":1243,"title":{},"body":{"injectables/CurrenciesService.html":{},"classes/Query-2.html":{}}}],["ptbl.iso",{"_index":801,"title":{},"body":{"injectables/CountriesService.html":{}}}],["ptbl.iso3",{"_index":803,"title":{},"body":{"injectables/CountriesService.html":{}}}],["ptbl.name",{"_index":800,"title":{},"body":{"injectables/CountriesService.html":{},"classes/Query-2.html":{}}}],["ptbl.nice_name",{"_index":802,"title":{},"body":{"injectables/CountriesService.html":{}}}],["ptbl.num_code",{"_index":804,"title":{},"body":{"injectables/CountriesService.html":{}}}],["ptbl.rounding",{"_index":2385,"title":{},"body":{"classes/Query-2.html":{}}}],["ptbl.symbol",{"_index":2383,"title":{},"body":{"classes/Query-2.html":{}}}],["ptlb",{"_index":867,"title":{},"body":{"injectables/CountriesService.html":{}}}],["ptlb.capital",{"_index":866,"title":{},"body":{"injectables/CountriesService.html":{}}}],["ptlb.continent",{"_index":865,"title":{},"body":{"injectables/CountriesService.html":{}}}],["ptlb.dial_code",{"_index":864,"title":{},"body":{"injectables/CountriesService.html":{}}}],["ptlb.id_country",{"_index":858,"title":{},"body":{"injectables/CountriesService.html":{}}}],["ptlb.id_currency",{"_index":818,"title":{},"body":{"injectables/CountriesService.html":{}}}],["ptlb.id_timezone",{"_index":829,"title":{},"body":{"injectables/CountriesService.html":{}}}],["ptlb.iso",{"_index":860,"title":{},"body":{"injectables/CountriesService.html":{}}}],["ptlb.iso3",{"_index":862,"title":{},"body":{"injectables/CountriesService.html":{}}}],["ptlb.name",{"_index":859,"title":{},"body":{"injectables/CountriesService.html":{}}}],["ptlb.nice_name",{"_index":861,"title":{},"body":{"injectables/CountriesService.html":{}}}],["ptlb.num_code",{"_index":863,"title":{},"body":{"injectables/CountriesService.html":{}}}],["public",{"_index":19,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"modules/FilesS3PresignedModule.html":{},"classes/QueryFailedFilter.html":{},"classes/UtilsService.html":{}}}],["public_route_key",{"_index":2583,"title":{},"body":{"coverage.html":{}}}],["publicroute",{"_index":188,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["publish",{"_index":2886,"title":{},"body":{"license.html":{}}}],["pull",{"_index":2549,"title":{},"body":{"contributing.html":{}}}],["purpose",{"_index":2909,"title":{},"body":{"license.html":{}}}],["purposes",{"_index":1019,"title":{},"body":{"classes/Country.html":{},"controllers/FilesS3Controller.html":{}}}],["push",{"_index":2547,"title":{},"body":{"contributing.html":{}}}],["put",{"_index":348,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["putobjectcommand",{"_index":1863,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["qr_image",{"_index":604,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["qr_image_path",{"_index":606,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["qr_image_path_salt",{"_index":608,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["qrconfig",{"_index":603,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["queries",{"_index":769,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"interfaces/IPaginationFieldConfig.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{}}}],["query",{"_index":336,"title":{"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{}},"body":{"classes/BadRequestExceptionFilter.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"controllers/FilesS3PresignedController.html":{},"classes/FilterQueryDto.html":{},"classes/HttpErrorFilter.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{},"coverage.html":{}}}],["query('expiresin",{"_index":1842,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["query.addhttpqueryerror",{"_index":2315,"title":{},"body":{"classes/Query.html":{}}}],["query.addhttpqueryerror(\"httperror",{"_index":2049,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["query.addqueryerror(\"badrequest",{"_index":367,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["query.service",{"_index":1272,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{},"coverage.html":{}}}],["query?.filters",{"_index":734,"title":{},"body":{"controllers/CountriesController.html":{}}}],["query?.limit",{"_index":729,"title":{},"body":{"controllers/CountriesController.html":{}}}],["query?.page",{"_index":726,"title":{},"body":{"controllers/CountriesController.html":{}}}],["query?.sort",{"_index":736,"title":{},"body":{"controllers/CountriesController.html":{}}}],["querybuilder",{"_index":2387,"title":{},"body":{"classes/Query-2.html":{}}}],["querycountrydto",{"_index":720,"title":{"classes/QueryCountryDto.html":{}},"body":{"controllers/CountriesController.html":{},"classes/FilterCountryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortCountryDto.html":{},"coverage.html":{}}}],["queryfailederror",{"_index":2414,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["queryfailedfilter",{"_index":2406,"title":{"classes/QueryFailedFilter.html":{}},"body":{"classes/QueryFailedFilter.html":{},"coverage.html":{}}}],["queryname",{"_index":1293,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["queryobj",{"_index":2259,"title":{},"body":{"injectables/PrismaService.html":{}}}],["queryobj.syntax",{"_index":2294,"title":{},"body":{"injectables/PrismaService.html":{}}}],["queryobj.type",{"_index":2296,"title":{},"body":{"injectables/PrismaService.html":{}}}],["queryoptions",{"_index":1280,"title":{"interfaces/QueryOptions.html":{}},"body":{"classes/DynamicQueryBuilder.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{},"coverage.html":{}}}],["querystatements",{"_index":2485,"title":{},"body":{"classes/UtilsService.html":{}}}],["querystatements(basefields",{"_index":2493,"title":{},"body":{"classes/UtilsService.html":{}}}],["querytype",{"_index":1294,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["quotes",{"_index":2312,"title":{},"body":{"classes/Query.html":{}}}],["qux",{"_index":242,"title":{},"body":{"controllers/AppController.html":{}}}],["r",{"_index":341,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"properties.html":{}}}],["r.error",{"_index":346,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["r.message",{"_index":345,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["r.message[0",{"_index":344,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["r.statuscode",{"_index":356,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["randomstringgenerator",{"_index":1798,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["randomstringgenerator()}.${file.filename.split('.').pop()?.tolowercase",{"_index":1873,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["randomstringgenerator()}.${file.originalname",{"_index":1812,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["range",{"_index":2104,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["rate",{"_index":2635,"title":{},"body":{"dependencies.html":{}}}],["raw",{"_index":1191,"title":{},"body":{"injectables/CurrenciesService.html":{},"injectables/PrismaService.html":{}}}],["rbac",{"_index":2756,"title":{},"body":{"index.html":{}}}],["read",{"_index":1852,"title":{},"body":{"modules/FilesS3PresignedModule.html":{},"index.html":{}}}],["readonly",{"_index":203,"title":{},"body":{"controllers/AppController.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/SortByDto.html":{}}}],["ready",{"_index":2752,"title":{},"body":{"index.html":{}}}],["receive",{"_index":2178,"title":{},"body":{"classes/PaginationResponseDto.html":{}}}],["recomandation",{"_index":2774,"title":{},"body":{"index.html":{}}}],["record",{"_index":811,"title":{},"body":{"injectables/CountriesService.html":{},"classes/CreateDto.html":{},"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"interfaces/QueryOptions.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{}}}],["records",{"_index":1932,"title":{},"body":{"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/Query-2.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{}}}],["recursively",{"_index":2438,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["redis",{"_index":2827,"title":{},"body":{"index.html":{}}}],["redisswagger",{"_index":2829,"title":{},"body":{"index.html":{}}}],["ref",{"_index":1985,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["refactor",{"_index":2841,"title":{},"body":{"index.html":{}}}],["reference",{"_index":2174,"title":{},"body":{"classes/PaginationResponseDto.html":{},"miscellaneous/functions.html":{}}}],["reflect",{"_index":2664,"title":{},"body":{"dependencies.html":{}}}],["reflection",{"_index":35,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["reflector",{"_index":20,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["region",{"_index":1485,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["registeras",{"_index":1369,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{}}}],["registeras('app",{"_index":1379,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["registeras('database",{"_index":1449,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["registeras('file",{"_index":1498,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["registeras('logger",{"_index":1536,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["registers",{"_index":1377,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{}}}],["registration",{"_index":1376,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"index.html":{}}}],["regular",{"_index":449,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["reject",{"_index":1419,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["rejectunauthorized",{"_index":1469,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["related",{"_index":121,"title":{},"body":{"modules/ApiModule.html":{},"controllers/AppController.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/QueryFailedFilter.html":{}}}],["relational",{"_index":2758,"title":{},"body":{"index.html":{}}}],["release",{"_index":2517,"title":{},"body":{"changelog.html":{}}}],["relevant",{"_index":1585,"title":{},"body":{"classes/FileResponseDto.html":{},"classes/FileResponseDto-2.html":{}}}],["remarks",{"_index":2006,"title":{},"body":{"modules/HelperModule.html":{},"injectables/PaginationService.html":{}}}],["remove.ts",{"_index":1273,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/FilterCountryDto.html":{},"classes/QueryCountryDto.html":{},"interfaces/QueryOptions.html":{},"classes/SortCountryDto.html":{},"coverage.html":{}}}],["remove.ts:116",{"_index":1285,"title":{},"body":{"classes/DynamicQueryBuilder.html":{}}}],["remove.ts:14",{"_index":2464,"title":{},"body":{"classes/SortCountryDto.html":{}}}],["remove.ts:145",{"_index":1288,"title":{},"body":{"classes/DynamicQueryBuilder.html":{}}}],["remove.ts:18",{"_index":2462,"title":{},"body":{"classes/SortCountryDto.html":{}}}],["remove.ts:195",{"_index":1290,"title":{},"body":{"classes/DynamicQueryBuilder.html":{}}}],["remove.ts:235",{"_index":1281,"title":{},"body":{"classes/DynamicQueryBuilder.html":{}}}],["remove.ts:26",{"_index":2404,"title":{},"body":{"classes/QueryCountryDto.html":{}}}],["remove.ts:32",{"_index":2403,"title":{},"body":{"classes/QueryCountryDto.html":{}}}],["remove.ts:41",{"_index":2400,"title":{},"body":{"classes/QueryCountryDto.html":{}}}],["remove.ts:50",{"_index":2405,"title":{},"body":{"classes/QueryCountryDto.html":{}}}],["removefile",{"_index":2619,"title":{},"body":{"coverage.html":{}}}],["repeat",{"_index":2113,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["replace",{"_index":535,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["reporting",{"_index":2530,"title":{},"body":{"contributing.html":{}}}],["repository",{"_index":2539,"title":{},"body":{"contributing.html":{},"index.html":{},"properties.html":{}}}],["repository:example",{"_index":2777,"title":{},"body":{"index.html":{}}}],["representation",{"_index":1262,"title":{},"body":{"classes/Currency.html":{}}}],["representing",{"_index":1009,"title":{},"body":{"classes/Country.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/Query.html":{},"classes/SortByDto.html":{},"miscellaneous/enumerations.html":{}}}],["represents",{"_index":998,"title":{},"body":{"classes/Country.html":{},"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/UpdateDto.html":{},"miscellaneous/typealiases.html":{}}}],["reqdata",{"_index":2325,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["reqescvalue",{"_index":2333,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["reqescvalue.replace(/'/g",{"_index":2335,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["reqstr",{"_index":362,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["reqstrobj",{"_index":369,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{}}}],["request",{"_index":48,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/FileType.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"modules/HomeModule.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResolvePromisesInterceptor.html":{},"contributing.html":{},"dependencies.html":{}}}],["request.filter.ts",{"_index":313,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"coverage.html":{}}}],["request.filter.ts:27",{"_index":317,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["request.filter.ts:34",{"_index":318,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["request.filter.ts:43",{"_index":329,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["request.filter.ts:93",{"_index":321,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["request.method",{"_index":368,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["request.url",{"_index":80,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["requested",{"_index":2482,"title":{},"body":{"classes/UserNotFoundException.html":{}}}],["requests",{"_index":148,"title":{},"body":{"controllers/AppController.html":{},"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"modules/FilesLocalModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"contributing.html":{}}}],["require",{"_index":940,"title":{},"body":{"injectables/CountriesService.html":{},"classes/UtilsService.html":{}}}],["require_tld",{"_index":514,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{}}}],["required",{"_index":745,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileUploadDto.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/SortByDto.html":{},"classes/UpdateDto.html":{}}}],["requirements",{"_index":1893,"title":{},"body":{"injectables/FilesService.html":{}}}],["requrest",{"_index":339,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["res",{"_index":376,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{}}}],["resdata",{"_index":2326,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["resescvalue",{"_index":2334,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["resescvalue.replace(/'/g",{"_index":2336,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["reset",{"_index":105,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/CountriesModule.html":{},"modules/CurrenciesModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{},"overview.html":{}}}],["resolved",{"_index":2434,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["resolvepromisesinterceptor",{"_index":2428,"title":{"injectables/ResolvePromisesInterceptor.html":{}},"body":{"injectables/ResolvePromisesInterceptor.html":{},"coverage.html":{}}}],["resolver",{"_index":2453,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["resolver.ts",{"_index":2623,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["resolves",{"_index":172,"title":{},"body":{"controllers/AppController.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"injectables/FilesS3Service.html":{},"injectables/ResolvePromisesInterceptor.html":{},"miscellaneous/functions.html":{}}}],["resolving",{"_index":2692,"title":{},"body":{"miscellaneous/functions.html":{}}}],["response",{"_index":49,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PaginationResponseDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResolvePromisesInterceptor.html":{},"miscellaneous/functions.html":{}}}],["response.dto",{"_index":699,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/PaginationService.html":{}}}],["response.dto.ts",{"_index":1578,"title":{},"body":{"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/PaginationResponseDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["response.dto.ts:21",{"_index":2168,"title":{},"body":{"classes/PaginationResponseDto.html":{}}}],["response.dto.ts:27",{"_index":1584,"title":{},"body":{"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{}}}],["response.dto.ts:30",{"_index":2170,"title":{},"body":{"classes/PaginationResponseDto.html":{}}}],["response.dto.ts:34",{"_index":1611,"title":{},"body":{"classes/FileResponseDto-2.html":{}}}],["response.dto.ts:39",{"_index":2169,"title":{},"body":{"classes/PaginationResponseDto.html":{}}}],["response.dto.ts:41",{"_index":1588,"title":{},"body":{"classes/FileResponseDto.html":{}}}],["response.sendfile(path",{"_index":1713,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["response.status(status).json",{"_index":2057,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["response.status(status).json(errorresponse",{"_index":86,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["response.status(statuscode).json(r",{"_index":358,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["response_serialization_meta_key",{"_index":2584,"title":{},"body":{"coverage.html":{}}}],["responses",{"_index":1130,"title":{},"body":{"controllers/CurrenciesController.html":{},"classes/FileResponseDto-2.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{}}}],["responsible",{"_index":114,"title":{},"body":{"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"injectables/FilesService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{}}}],["resstr",{"_index":364,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["resstrobj",{"_index":375,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{}}}],["restriction",{"_index":2881,"title":{},"body":{"license.html":{}}}],["result",{"_index":165,"title":{},"body":{"controllers/AppController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{}}}],["results",{"_index":87,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UpdateDto.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"changelog.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["retrieval",{"_index":1881,"title":{},"body":{"injectables/FilesS3Service.html":{},"injectables/PaginationService.html":{}}}],["retrievals",{"_index":1720,"title":{},"body":{"modules/FilesLocalModule.html":{}}}],["retrieve",{"_index":681,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{}}}],["retrieves",{"_index":1202,"title":{},"body":{"injectables/CurrenciesService.html":{},"injectables/HomeService.html":{}}}],["retrieving",{"_index":1187,"title":{},"body":{"injectables/CurrenciesService.html":{},"modules/FilesLocalModule.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesService.html":{},"injectables/HomeService.html":{},"injectables/PrismaService.html":{},"classes/Query-2.html":{}}}],["return",{"_index":211,"title":{},"body":{"controllers/AppController.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileType.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"controllers/HomeController.html":{},"injectables/HomeService.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/QueryCountryDto.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UtilsService.html":{}}}],["returned",{"_index":166,"title":{},"body":{"controllers/AppController.html":{},"classes/FileResponseDto-1.html":{}}}],["returning",{"_index":1314,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/FileResponseDto-2.html":{},"controllers/FilesS3Controller.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{}}}],["returningclause",{"_index":1312,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["returningfields",{"_index":1301,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{}}}],["returningfields.join",{"_index":1315,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["returningfields.length",{"_index":1313,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["returns",{"_index":51,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"controllers/HomeController.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{}}}],["reusing",{"_index":820,"title":{},"body":{"injectables/CountriesService.html":{}}}],["right",{"_index":2730,"title":{},"body":{"index.html":{}}}],["rights",{"_index":2883,"title":{},"body":{"license.html":{}}}],["root",{"_index":274,"title":{},"body":{"modules/AppModule.html":{},"controllers/FilesLocalController.html":{},"controllers/HomeController.html":{}}}],["rounding",{"_index":1082,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/Query-2.html":{}}}],["route",{"_index":204,"title":{},"body":{"controllers/AppController.html":{},"controllers/CurrenciesController.html":{}}}],["rows",{"_index":2295,"title":{},"body":{"injectables/PrismaService.html":{}}}],["rows[0",{"_index":2298,"title":{},"body":{"injectables/PrismaService.html":{}}}],["rsa256",{"_index":2754,"title":{},"body":{"index.html":{}}}],["rules",{"_index":1073,"title":{},"body":{"classes/CreateDto.html":{}}}],["run",{"_index":2556,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["running",{"_index":2061,"title":{},"body":{"interfaces/IAppConfig.html":{},"contributing.html":{},"index.html":{}}}],["rupee",{"_index":1033,"title":{},"body":{"classes/Country.html":{},"classes/CreateDto.html":{},"classes/Currency.html":{}}}],["rupees",{"_index":1099,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{}}}],["rxjs",{"_index":2450,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":2451,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["s",{"_index":236,"title":{},"body":{"controllers/AppController.html":{},"injectables/CountriesService.html":{}}}],["s.area",{"_index":872,"title":{},"body":{"injectables/CountriesService.html":{}}}],["s.country_id",{"_index":988,"title":{},"body":{"injectables/CountriesService.html":{}}}],["s.currency_id",{"_index":879,"title":{},"body":{"injectables/CountriesService.html":{}}}],["s.id",{"_index":869,"title":{},"body":{"injectables/CountriesService.html":{}}}],["s.name",{"_index":870,"title":{},"body":{"injectables/CountriesService.html":{}}}],["s.population",{"_index":871,"title":{},"body":{"injectables/CountriesService.html":{}}}],["s.state_id",{"_index":995,"title":{},"body":{"injectables/CountriesService.html":{}}}],["s.timezone_id",{"_index":880,"title":{},"body":{"injectables/CountriesService.html":{}}}],["s.trim",{"_index":2209,"title":{},"body":{"injectables/PaginationService.html":{}}}],["s3",{"_index":1480,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["s3://bucket/path/to/file",{"_index":1837,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["s3_presigned",{"_index":1624,"title":{},"body":{"classes/FileType.html":{},"miscellaneous/enumerations.html":{}}}],["s3client",{"_index":1628,"title":{},"body":{"classes/FileType.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["same",{"_index":821,"title":{},"body":{"injectables/CountriesService.html":{}}}],["sanitization",{"_index":2258,"title":{},"body":{"injectables/PrismaService.html":{}}}],["sanitized",{"_index":2261,"title":{},"body":{"injectables/PrismaService.html":{}}}],["scalable",{"_index":2725,"title":{},"body":{"index.html":{}}}],["scanning",{"_index":2769,"title":{},"body":{"index.html":{}}}],["schema",{"_index":1425,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"miscellaneous/functions.html":{}}}],["scope",{"_index":2837,"title":{},"body":{"index.html":{}}}],["script",{"_index":2820,"title":{},"body":{"index.html":{}}}],["sdk/client",{"_index":1629,"title":{},"body":{"classes/FileType.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"dependencies.html":{}}}],["sdk/s3",{"_index":1631,"title":{},"body":{"classes/FileType.html":{},"injectables/FilesS3PresignedService.html":{},"dependencies.html":{}}}],["search",{"_index":2355,"title":{},"body":{"classes/Query-2.html":{},"index.html":{}}}],["seconds",{"_index":1831,"title":{},"body":{"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{}}}],["secret",{"_index":611,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"interfaces/IJWTConfig.html":{}}}],["secretaccesskey",{"_index":667,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"interfaces/IFileConfig.html":{}}}],["secure",{"_index":2747,"title":{},"body":{"index.html":{}}}],["securely",{"_index":1591,"title":{},"body":{"classes/FileResponseDto.html":{}}}],["see",{"_index":692,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{}}}],["seed",{"_index":2569,"title":{},"body":{"coverage.html":{}}}],["select",{"_index":782,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"interfaces/IPaginationFieldConfig.html":{},"injectables/PaginationService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{}}}],["select_one",{"_index":1332,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"injectables/PrismaService.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{}}}],["selected",{"_index":2360,"title":{},"body":{"classes/Query-2.html":{}}}],["selectedfields",{"_index":2496,"title":{},"body":{"classes/UtilsService.html":{}}}],["selectfields",{"_index":822,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"interfaces/IPaginationFieldConfig.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["selectfields.join",{"_index":844,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["selectfields.length",{"_index":2497,"title":{},"body":{"classes/UtilsService.html":{}}}],["selectfields.push",{"_index":897,"title":{},"body":{"injectables/CountriesService.html":{}}}],["selectfields.push('c.name",{"_index":990,"title":{},"body":{"injectables/CountriesService.html":{}}}],["selectfields.push(...config.selectfields(alias",{"_index":928,"title":{},"body":{"injectables/CountriesService.html":{},"classes/UtilsService.html":{}}}],["selectfields.push(`c${index}.name",{"_index":970,"title":{},"body":{"injectables/CountriesService.html":{}}}],["selectfields.push(`c${index}.symbol",{"_index":894,"title":{},"body":{"injectables/CountriesService.html":{}}}],["selectfields.push(`tz${index}.offset",{"_index":972,"title":{},"body":{"injectables/CountriesService.html":{}}}],["selectfields.push(`tz${index}.offset_in_minutes",{"_index":973,"title":{},"body":{"injectables/CountriesService.html":{}}}],["selectfields.push(`tz${index}.text",{"_index":974,"title":{},"body":{"injectables/CountriesService.html":{}}}],["selectfile",{"_index":1741,"title":{},"body":{"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{}}}],["selecting",{"_index":2132,"title":{},"body":{"interfaces/IPaginationFieldConfig.html":{},"classes/Query-2.html":{}}}],["selectoptions",{"_index":2389,"title":{},"body":{"classes/Query-2.html":{}}}],["selectquery",{"_index":841,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["sell",{"_index":2890,"title":{},"body":{"license.html":{}}}],["sender_id",{"_index":650,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/ISMSConfig.html":{}}}],["sendgrid_api_key",{"_index":624,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/ISendGridConfig.html":{}}}],["sendgridconfig",{"_index":623,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["sent",{"_index":2436,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["separate",{"_index":2705,"title":{},"body":{"miscellaneous/functions.html":{}}}],["separated",{"_index":393,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["serialized",{"_index":2330,"title":{},"body":{"classes/Query.html":{}}}],["server",{"_index":84,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/FileResponseDto.html":{},"classes/HttpErrorFilter.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["serves",{"_index":118,"title":{},"body":{"modules/ApiModule.html":{},"classes/Country.html":{}}}],["service",{"_index":197,"title":{},"body":{"controllers/AppController.html":{},"classes/ConfigService.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/EnvVarAppConfigValidator.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"index.html":{}}}],["service's",{"_index":1891,"title":{},"body":{"injectables/FilesService.html":{}}}],["servicecommit",{"_index":2836,"title":{},"body":{"index.html":{}}}],["services",{"_index":761,"title":{},"body":{"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"index.html":{}}}],["services/config.service",{"_index":2005,"title":{},"body":{"modules/HelperModule.html":{},"injectables/PrismaService.html":{}}}],["services/encryption.service",{"_index":2010,"title":{},"body":{"modules/HelperModule.html":{}}}],["services/pagination.service",{"_index":792,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"modules/HelperModule.html":{}}}],["services/prisma.service",{"_index":187,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/CurrenciesService.html":{},"modules/HelperModule.html":{},"injectables/PaginationService.html":{}}}],["services/task.service",{"_index":2012,"title":{},"body":{"modules/HelperModule.html":{}}}],["services/util.service",{"_index":793,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"modules/HelperModule.html":{}}}],["set",{"_index":255,"title":{},"body":{"controllers/AppController.html":{},"injectables/CountriesService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{}}}],["setclauses",{"_index":1333,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["setclauses.join",{"_index":1337,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["sets",{"_index":111,"title":{},"body":{"modules/ApiModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"miscellaneous/functions.html":{}}}],["setting",{"_index":2734,"title":{},"body":{"index.html":{}}}],["settings",{"_index":1433,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"interfaces/IAppConfig.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["several",{"_index":109,"title":{},"body":{"modules/ApiModule.html":{}}}],["sh",{"_index":2557,"title":{},"body":{"contributing.html":{}}}],["shall",{"_index":2898,"title":{},"body":{"license.html":{}}}],["shared/services/sql.service",{"_index":2041,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["shift",{"_index":2803,"title":{},"body":{"index.html":{}}}],["short",{"_index":2843,"title":{},"body":{"index.html":{}}}],["side",{"_index":2726,"title":{},"body":{"index.html":{}}}],["signed",{"_index":1580,"title":{},"body":{"classes/FileResponseDto.html":{}}}],["signedurl",{"_index":1876,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["simple",{"_index":2270,"title":{},"body":{"injectables/PrismaService.html":{}}}],["single",{"_index":2311,"title":{},"body":{"classes/Query.html":{},"index.html":{}}}],["size",{"_index":1493,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileUploadDto.html":{},"injectables/FilesS3PresignedService.html":{},"interfaces/IFileConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["slack_webhook",{"_index":1555,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["smooth",{"_index":2527,"title":{},"body":{"contributing.html":{}}}],["sms_provider_name",{"_index":646,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/ISMSConfig.html":{}}}],["smsconfig",{"_index":645,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["soft",{"_index":1303,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["software",{"_index":2879,"title":{},"body":{"license.html":{}}}],["solutions",{"_index":1758,"title":{},"body":{"modules/FilesModule.html":{}}}],["something",{"_index":1227,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["somewhere",{"_index":2106,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["sort",{"_index":748,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UtilsService.html":{}}}],["sort.length",{"_index":933,"title":{},"body":{"injectables/CountriesService.html":{},"classes/UtilsService.html":{}}}],["sortby",{"_index":433,"title":{"injectables/SortBy.html":{}},"body":{"injectables/CommaSeparated.html":{},"injectables/CountriesService.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"coverage.html":{}}}],["sortbydto",{"_index":1939,"title":{"classes/SortByDto.html":{}},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"coverage.html":{}}}],["sortbyquery",{"_index":848,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["sortconditions",{"_index":2207,"title":{},"body":{"injectables/PaginationService.html":{}}}],["sortcountrydto",{"_index":948,"title":{"classes/SortCountryDto.html":{}},"body":{"injectables/CountriesService.html":{},"classes/FilterCountryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortCountryDto.html":{},"coverage.html":{}}}],["sorting",{"_index":938,"title":{},"body":{"injectables/CountriesService.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{}}}],["sortitem.direction",{"_index":944,"title":{},"body":{"injectables/CountriesService.html":{},"classes/UtilsService.html":{}}}],["sortitem.field.tolowercase",{"_index":935,"title":{},"body":{"injectables/CountriesService.html":{},"classes/UtilsService.html":{}}}],["sortoptions",{"_index":735,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{}}}],["sortquery",{"_index":2206,"title":{},"body":{"injectables/PaginationService.html":{}}}],["sortuserdto",{"_index":1961,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UpdateDto.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"index.html":{}}}],["sourceclass",{"_index":251,"title":{},"body":{"controllers/AppController.html":{}}}],["spaces",{"_index":439,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["specific",{"_index":116,"title":{},"body":{"modules/ApiModule.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesService.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["specifically",{"_index":315,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["specified",{"_index":1077,"title":{},"body":{"classes/CreateDto.html":{},"classes/FileResponseDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"classes/SortByDto.html":{},"miscellaneous/functions.html":{}}}],["specifies",{"_index":1489,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{}}}],["specify",{"_index":1650,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["specifying",{"_index":2131,"title":{},"body":{"interfaces/IPaginationFieldConfig.html":{}}}],["split",{"_index":437,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/CountriesService.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/PaginationService.html":{},"injectables/SortBy.html":{}}}],["sponsors",{"_index":2860,"title":{},"body":{"index.html":{}}}],["sql",{"_index":781,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"injectables/PaginationService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{}}}],["sqlquery",{"_index":2314,"title":{},"body":{"classes/Query.html":{}}}],["sqlservice",{"_index":361,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["sqlservice.run",{"_index":366,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{}}}],["sqlservice.run(query.addqueryerror(\"dbquery",{"_index":2426,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["src/**/**.entity{.ts,.js",{"_index":569,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["src/.../app",{"_index":2934,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../app.config.ts",{"_index":2669,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../config.type.ts",{"_index":2933,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../database",{"_index":2935,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../deep",{"_index":2677,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../field.validator.ts",{"_index":2679,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../file",{"_index":2671,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../logger",{"_index":2937,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../logger.config.ts",{"_index":2670,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":2676,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../maybe.type.ts",{"_index":2939,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../number.string.validator.ts",{"_index":2678,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../pagination",{"_index":2680,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../pagination.dto.ts",{"_index":2673,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../swagger.ts",{"_index":2682,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../transforms.decorator.ts",{"_index":2681,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../validate",{"_index":2683,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app/app.controller.ts",{"_index":142,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app/app.controller.ts:66",{"_index":161,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app/app.controller.ts:91",{"_index":174,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app/app.module.ts",{"_index":273,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{}}}],["src/common/helper/helper.module.ts",{"_index":1994,"title":{},"body":{"modules/HelperModule.html":{},"coverage.html":{}}}],["src/common/helper/services/config.service.ts",{"_index":459,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"coverage.html":{}}}],["src/common/helper/services/config.service.ts:101",{"_index":470,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/common/helper/services/config.service.ts:105",{"_index":474,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/common/helper/services/config.service.ts:139",{"_index":476,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/common/helper/services/config.service.ts:28",{"_index":1347,"title":{},"body":{"classes/EnvVarAppConfigValidator.html":{}}}],["src/common/helper/services/config.service.ts:32",{"_index":1351,"title":{},"body":{"classes/EnvVarAppConfigValidator.html":{}}}],["src/common/helper/services/config.service.ts:36",{"_index":1350,"title":{},"body":{"classes/EnvVarAppConfigValidator.html":{}}}],["src/common/helper/services/config.service.ts:40",{"_index":1345,"title":{},"body":{"classes/EnvVarAppConfigValidator.html":{}}}],["src/common/helper/services/config.service.ts:72",{"_index":465,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/common/helper/services/config.service.ts:93",{"_index":467,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/common/helper/services/config.service.ts:97",{"_index":472,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/common/helper/services/pagination.service.ts",{"_index":2182,"title":{},"body":{"injectables/PaginationService.html":{},"coverage.html":{}}}],["src/common/helper/services/pagination.service.ts:36",{"_index":2191,"title":{},"body":{"injectables/PaginationService.html":{}}}],["src/common/helper/services/pagination.service.ts:39",{"_index":2193,"title":{},"body":{"injectables/PaginationService.html":{}}}],["src/common/helper/services/prisma.service.ts",{"_index":2242,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/common/helper/services/prisma.service.ts:129",{"_index":2264,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/common/helper/services/prisma.service.ts:141",{"_index":2268,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/common/helper/services/prisma.service.ts:28",{"_index":2255,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/common/helper/services/prisma.service.ts:51",{"_index":2274,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/common/helper/services/prisma.service.ts:61",{"_index":2271,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/common/helper/services/prisma.service.ts:79",{"_index":2257,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/common/helper/services/util.service.ts",{"_index":2484,"title":{},"body":{"classes/UtilsService.html":{},"coverage.html":{}}}],["src/common/helper/services/util.service.ts:136",{"_index":2494,"title":{},"body":{"classes/UtilsService.html":{}}}],["src/common/helper/services/util.service.ts:29",{"_index":2488,"title":{},"body":{"classes/UtilsService.html":{}}}],["src/config/app.config.ts",{"_index":1353,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/config/app.config.ts:25",{"_index":1368,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["src/config/app.config.ts:29",{"_index":1361,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["src/config/app.config.ts:33",{"_index":1360,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["src/config/app.config.ts:37",{"_index":1364,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["src/config/app.config.ts:41",{"_index":1363,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["src/config/app.config.ts:47",{"_index":1362,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["src/config/app.config.ts:51",{"_index":1366,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["src/config/app.config.ts:55",{"_index":1365,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["src/config/app.config.ts:59",{"_index":1359,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["src/config/database.config.ts",{"_index":1396,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"coverage.html":{}}}],["src/config/database.config.ts:106",{"_index":1436,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/database.config.ts:117",{"_index":1422,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/database.config.ts:128",{"_index":1417,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/database.config.ts:139",{"_index":1410,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/database.config.ts:150",{"_index":1415,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/database.config.ts:161",{"_index":1414,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/database.config.ts:26",{"_index":1428,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/database.config.ts:37",{"_index":1434,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/database.config.ts:51",{"_index":1441,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/database.config.ts:62",{"_index":1439,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/database.config.ts:73",{"_index":1438,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/database.config.ts:84",{"_index":1444,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/database.config.ts:95",{"_index":1424,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/file.config.ts",{"_index":1475,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"coverage.html":{}}}],["src/config/file.config.ts:25",{"_index":1488,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["src/config/file.config.ts:38",{"_index":1478,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["src/config/file.config.ts:51",{"_index":1486,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["src/config/file.config.ts:64",{"_index":1482,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["src/config/file.config.ts:77",{"_index":1484,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["src/config/file.config.ts:88",{"_index":1492,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["src/config/logger.config.ts",{"_index":1508,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/config/logger.config.ts:30",{"_index":1531,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["src/config/logger.config.ts:34",{"_index":1529,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["src/config/logger.config.ts:38",{"_index":1523,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["src/config/logger.config.ts:42",{"_index":1520,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["src/config/logger.config.ts:46",{"_index":1524,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["src/config/logger.config.ts:50",{"_index":1528,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["src/config/logger.config.ts:54",{"_index":1525,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["src/config/logger.config.ts:58",{"_index":1526,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["src/config/logger.config.ts:62",{"_index":1522,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["src/config/logger.config.ts:66",{"_index":1527,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["src/config/logger.config.ts:70",{"_index":1530,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["src/config/type/app",{"_index":2943,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/config/type/config.type.ts",{"_index":2940,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/config/type/database",{"_index":2944,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/config/type/file",{"_index":2674,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/config/type/logger",{"_index":2948,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/core/constants/core.constant.ts",{"_index":2580,"title":{},"body":{"coverage.html":{}}}],["src/core/decorators/number.string.validator.ts",{"_index":2585,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/decorators/public.request.decorator",{"_index":189,"title":{},"body":{"controllers/AppController.html":{}}}],["src/core/decorators/public.request.decorator.ts",{"_index":2586,"title":{},"body":{"coverage.html":{}}}],["src/core/decorators/swagger.schema.ts",{"_index":2587,"title":{},"body":{"coverage.html":{}}}],["src/core/decorators/transforms.decorator.ts",{"_index":2589,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/exceptions/file",{"_index":1559,"title":{},"body":{"classes/FileNotImageException.html":{},"coverage.html":{}}}],["src/core/exceptions/http",{"_index":2034,"title":{},"body":{"classes/HttpErrorFilter.html":{},"coverage.html":{}}}],["src/core/exceptions/query.ts",{"_index":2307,"title":{},"body":{"classes/Query.html":{},"coverage.html":{}}}],["src/core/exceptions/query.ts:36",{"_index":2327,"title":{},"body":{"classes/Query.html":{}}}],["src/core/exceptions/user",{"_index":2475,"title":{},"body":{"classes/UserNotFoundException.html":{},"coverage.html":{}}}],["src/core/filters/all",{"_index":6,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["src/core/filters/bad",{"_index":312,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"coverage.html":{}}}],["src/core/filters/constraint",{"_index":2593,"title":{},"body":{"coverage.html":{}}}],["src/core/filters/http",{"_index":2051,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/core/filters/prisma",{"_index":2219,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"coverage.html":{}}}],["src/core/filters/query",{"_index":2407,"title":{},"body":{"classes/QueryFailedFilter.html":{},"coverage.html":{}}}],["src/core/filters/query.ts",{"_index":2340,"title":{},"body":{"classes/Query-1.html":{},"coverage.html":{}}}],["src/core/filters/query.ts:24",{"_index":2342,"title":{},"body":{"classes/Query-1.html":{}}}],["src/core/interfaces/app.interfaces.ts",{"_index":2059,"title":{},"body":{"interfaces/IAppConfig.html":{},"coverage.html":{}}}],["src/core/interfaces/aws.interfaces.ts",{"_index":2064,"title":{},"body":{"interfaces/IAwsConfig.html":{},"coverage.html":{}}}],["src/core/interfaces/file.interfaces.ts",{"_index":2065,"title":{},"body":{"interfaces/IFileConfig.html":{},"coverage.html":{}}}],["src/core/interfaces/jwt.interfaces.ts",{"_index":2070,"title":{},"body":{"interfaces/IJWTConfig.html":{},"coverage.html":{}}}],["src/core/interfaces/node",{"_index":2071,"title":{},"body":{"interfaces/INodeEmailerConfig.html":{},"coverage.html":{}}}],["src/core/interfaces/postgres.interfaces.ts",{"_index":2134,"title":{},"body":{"interfaces/IPostgreSQLConfig.html":{},"coverage.html":{}}}],["src/core/interfaces/sendgrid.interfaces.ts",{"_index":2139,"title":{},"body":{"interfaces/ISendGridConfig.html":{},"coverage.html":{}}}],["src/core/interfaces/sms.interfaces.ts",{"_index":2138,"title":{},"body":{"interfaces/ISMSConfig.html":{},"coverage.html":{}}}],["src/core/interfaces/upload",{"_index":2140,"title":{},"body":{"interfaces/IUploadFileConfig.html":{},"coverage.html":{}}}],["src/core/validators/field.validator.ts",{"_index":2600,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/validators/filter.validator.ts",{"_index":388,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{},"coverage.html":{}}}],["src/core/validators/filter.validator.ts:101",{"_index":2456,"title":{},"body":{"injectables/SortBy.html":{}}}],["src/core/validators/filter.validator.ts:28",{"_index":405,"title":{},"body":{"injectables/CommaSeparated.html":{}}}],["src/core/validators/filter.validator.ts:47",{"_index":400,"title":{},"body":{"injectables/CommaSeparated.html":{}}}],["src/core/validators/filter.validator.ts:71",{"_index":2457,"title":{},"body":{"injectables/SortBy.html":{}}}],["src/main.ts",{"_index":2601,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/api.module.ts",{"_index":107,"title":{},"body":{"modules/ApiModule.html":{}}}],["src/modules/countries/countries.controller.ts",{"_index":677,"title":{},"body":{"controllers/CountriesController.html":{},"coverage.html":{}}}],["src/modules/countries/countries.controller.ts:43",{"_index":687,"title":{},"body":{"controllers/CountriesController.html":{}}}],["src/modules/countries/countries.module.ts",{"_index":756,"title":{},"body":{"modules/CountriesModule.html":{}}}],["src/modules/countries/countries.service.ts",{"_index":764,"title":{},"body":{"injectables/CountriesService.html":{},"coverage.html":{}}}],["src/modules/countries/countries.service.ts:20",{"_index":773,"title":{},"body":{"injectables/CountriesService.html":{}}}],["src/modules/countries/countries.service.ts:52",{"_index":775,"title":{},"body":{"injectables/CountriesService.html":{}}}],["src/modules/countries/dto/country.ts",{"_index":997,"title":{},"body":{"classes/Country.html":{},"coverage.html":{}}}],["src/modules/countries/dto/country.ts:107",{"_index":1030,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:120",{"_index":1063,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:133",{"_index":1036,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:146",{"_index":1068,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:159",{"_index":1058,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:172",{"_index":1061,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:185",{"_index":1026,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:198",{"_index":1065,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:29",{"_index":1046,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:42",{"_index":1056,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:55",{"_index":1049,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:68",{"_index":1053,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:81",{"_index":1038,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:94",{"_index":1029,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/query",{"_index":1894,"title":{},"body":{"classes/FilterCountryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortCountryDto.html":{},"coverage.html":{}}}],["src/modules/currencies/currencies.controller.ts",{"_index":1123,"title":{},"body":{"controllers/CurrenciesController.html":{},"coverage.html":{}}}],["src/modules/currencies/currencies.controller.ts:113",{"_index":1140,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["src/modules/currencies/currencies.controller.ts:54",{"_index":1134,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["src/modules/currencies/currencies.controller.ts:74",{"_index":1151,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["src/modules/currencies/currencies.controller.ts:93",{"_index":1145,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["src/modules/currencies/currencies.module.ts",{"_index":1182,"title":{},"body":{"modules/CurrenciesModule.html":{}}}],["src/modules/currencies/currencies.service.ts",{"_index":1185,"title":{},"body":{"injectables/CurrenciesService.html":{},"coverage.html":{}}}],["src/modules/currencies/currencies.service.ts:136",{"_index":1201,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["src/modules/currencies/currencies.service.ts:175",{"_index":1199,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["src/modules/currencies/currencies.service.ts:201",{"_index":1204,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["src/modules/currencies/currencies.service.ts:27",{"_index":1193,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["src/modules/currencies/currencies.service.ts:53",{"_index":1198,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["src/modules/currencies/currencies.service.ts:86",{"_index":1207,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["src/modules/currencies/dto/create.dto.ts",{"_index":1071,"title":{},"body":{"classes/CreateDto.html":{},"coverage.html":{}}}],["src/modules/currencies/dto/create.dto.ts:106",{"_index":1108,"title":{},"body":{"classes/CreateDto.html":{}}}],["src/modules/currencies/dto/create.dto.ts:122",{"_index":1094,"title":{},"body":{"classes/CreateDto.html":{}}}],["src/modules/currencies/dto/create.dto.ts:138",{"_index":1101,"title":{},"body":{"classes/CreateDto.html":{}}}],["src/modules/currencies/dto/create.dto.ts:38",{"_index":1087,"title":{},"body":{"classes/CreateDto.html":{}}}],["src/modules/currencies/dto/create.dto.ts:55",{"_index":1097,"title":{},"body":{"classes/CreateDto.html":{}}}],["src/modules/currencies/dto/create.dto.ts:72",{"_index":1100,"title":{},"body":{"classes/CreateDto.html":{}}}],["src/modules/currencies/dto/create.dto.ts:89",{"_index":1105,"title":{},"body":{"classes/CreateDto.html":{}}}],["src/modules/currencies/dto/currency.ts",{"_index":1251,"title":{},"body":{"classes/Currency.html":{},"coverage.html":{}}}],["src/modules/currencies/dto/currency.ts:100",{"_index":1265,"title":{},"body":{"classes/Currency.html":{}}}],["src/modules/currencies/dto/currency.ts:108",{"_index":1259,"title":{},"body":{"classes/Currency.html":{}}}],["src/modules/currencies/dto/currency.ts:28",{"_index":1256,"title":{},"body":{"classes/Currency.html":{}}}],["src/modules/currencies/dto/currency.ts:40",{"_index":1263,"title":{},"body":{"classes/Currency.html":{}}}],["src/modules/currencies/dto/currency.ts:52",{"_index":1264,"title":{},"body":{"classes/Currency.html":{}}}],["src/modules/currencies/dto/currency.ts:64",{"_index":1266,"title":{},"body":{"classes/Currency.html":{}}}],["src/modules/currencies/dto/currency.ts:76",{"_index":1267,"title":{},"body":{"classes/Currency.html":{}}}],["src/modules/currencies/dto/currency.ts:88",{"_index":1257,"title":{},"body":{"classes/Currency.html":{}}}],["src/modules/currencies/dto/update.dto.ts",{"_index":2465,"title":{},"body":{"classes/UpdateDto.html":{},"coverage.html":{}}}],["src/modules/currencies/query.ts",{"_index":2343,"title":{},"body":{"classes/Query-2.html":{},"coverage.html":{}}}],["src/modules/currencies/query.ts:100",{"_index":2361,"title":{},"body":{"classes/Query-2.html":{}}}],["src/modules/currencies/query.ts:139",{"_index":2352,"title":{},"body":{"classes/Query-2.html":{}}}],["src/modules/currencies/query.ts:156",{"_index":2359,"title":{},"body":{"classes/Query-2.html":{}}}],["src/modules/currencies/query.ts:172",{"_index":2358,"title":{},"body":{"classes/Query-2.html":{}}}],["src/modules/currencies/query.ts:21",{"_index":2356,"title":{},"body":{"classes/Query-2.html":{}}}],["src/modules/currencies/query.ts:49",{"_index":2354,"title":{},"body":{"classes/Query-2.html":{}}}],["src/modules/currencies/query.ts:71",{"_index":2357,"title":{},"body":{"classes/Query-2.html":{}}}],["src/modules/files/domain/file.ts",{"_index":1613,"title":{},"body":{"classes/FileType.html":{},"coverage.html":{}}}],["src/modules/files/domain/file.ts:35",{"_index":1617,"title":{},"body":{"classes/FileType.html":{}}}],["src/modules/files/domain/file.ts:81",{"_index":1619,"title":{},"body":{"classes/FileType.html":{}}}],["src/modules/files/files.module.ts",{"_index":1751,"title":{},"body":{"modules/FilesModule.html":{},"coverage.html":{}}}],["src/modules/files/files.service.ts",{"_index":1888,"title":{},"body":{"injectables/FilesService.html":{},"coverage.html":{}}}],["src/modules/files/infrastructure/uploader/local/dto/file",{"_index":1597,"title":{},"body":{"classes/FileResponseDto-1.html":{},"coverage.html":{}}}],["src/modules/files/infrastructure/uploader/local/files.controller.ts",{"_index":1662,"title":{},"body":{"controllers/FilesLocalController.html":{},"coverage.html":{}}}],["src/modules/files/infrastructure/uploader/local/files.controller.ts:79",{"_index":1678,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["src/modules/files/infrastructure/uploader/local/files.controller.ts:96",{"_index":1668,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["src/modules/files/infrastructure/uploader/local/files.module.ts",{"_index":1718,"title":{},"body":{"modules/FilesLocalModule.html":{}}}],["src/modules/files/infrastructure/uploader/local/files.service.ts",{"_index":1729,"title":{},"body":{"injectables/FilesLocalService.html":{},"coverage.html":{}}}],["src/modules/files/infrastructure/uploader/local/files.service.ts:16",{"_index":1733,"title":{},"body":{"injectables/FilesLocalService.html":{}}}],["src/modules/files/infrastructure/uploader/local/files.service.ts:37",{"_index":1735,"title":{},"body":{"injectables/FilesLocalService.html":{}}}],["src/modules/files/infrastructure/uploader/s3",{"_index":1576,"title":{},"body":{"classes/FileResponseDto.html":{},"classes/FileUploadDto.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"coverage.html":{}}}],["src/modules/files/infrastructure/uploader/s3/dto/file",{"_index":1606,"title":{},"body":{"classes/FileResponseDto-2.html":{},"coverage.html":{}}}],["src/modules/files/infrastructure/uploader/s3/files.controller.ts",{"_index":1771,"title":{},"body":{"controllers/FilesS3Controller.html":{},"coverage.html":{}}}],["src/modules/files/infrastructure/uploader/s3/files.controller.ts:74",{"_index":1786,"title":{},"body":{"controllers/FilesS3Controller.html":{}}}],["src/modules/files/infrastructure/uploader/s3/files.module.ts",{"_index":1791,"title":{},"body":{"modules/FilesS3Module.html":{}}}],["src/modules/files/infrastructure/uploader/s3/files.service.ts",{"_index":1879,"title":{},"body":{"injectables/FilesS3Service.html":{},"coverage.html":{}}}],["src/modules/files/infrastructure/uploader/s3/files.service.ts:29",{"_index":1885,"title":{},"body":{"injectables/FilesS3Service.html":{}}}],["src/modules/files/infrastructure/uploader/s3/files.service.ts:40",{"_index":1886,"title":{},"body":{"injectables/FilesS3Service.html":{}}}],["src/modules/home/home.controller.ts",{"_index":2014,"title":{},"body":{"controllers/HomeController.html":{},"coverage.html":{}}}],["src/modules/home/home.controller.ts:30",{"_index":2017,"title":{},"body":{"controllers/HomeController.html":{}}}],["src/modules/home/home.module.ts",{"_index":2024,"title":{},"body":{"modules/HomeModule.html":{}}}],["src/modules/home/home.service.ts",{"_index":2027,"title":{},"body":{"injectables/HomeService.html":{},"coverage.html":{}}}],["src/modules/home/home.service.ts:15",{"_index":2028,"title":{},"body":{"injectables/HomeService.html":{}}}],["src/modules/home/home.service.ts:26",{"_index":2029,"title":{},"body":{"injectables/HomeService.html":{}}}],["src/providers/dynamic",{"_index":1271,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{},"coverage.html":{}}}],["src/providers/file",{"_index":2613,"title":{},"body":{"coverage.html":{}}}],["src/swagger.ts",{"_index":2620,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/deep",{"_index":2622,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/dto/pagination",{"_index":2167,"title":{},"body":{"classes/PaginationResponseDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/dto/pagination.dto.ts",{"_index":1904,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/utils/dto/pagination.dto.ts:119",{"_index":2157,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["src/utils/dto/pagination.dto.ts:141",{"_index":2166,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["src/utils/dto/pagination.dto.ts:160",{"_index":1906,"title":{},"body":{"classes/FilterQueryDto.html":{}}}],["src/utils/dto/pagination.dto.ts:172",{"_index":1908,"title":{},"body":{"classes/FilterQueryDto.html":{}}}],["src/utils/dto/pagination.dto.ts:184",{"_index":1910,"title":{},"body":{"classes/FilterQueryDto.html":{}}}],["src/utils/dto/pagination.dto.ts:214",{"_index":2461,"title":{},"body":{"classes/SortByDto.html":{}}}],["src/utils/dto/pagination.dto.ts:228",{"_index":2459,"title":{},"body":{"classes/SortByDto.html":{}}}],["src/utils/dto/pagination.dto.ts:59",{"_index":2164,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["src/utils/dto/pagination.dto.ts:77",{"_index":2162,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["src/utils/dto/pagination.dto.ts:97",{"_index":2160,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["src/utils/dto/pagination.meta.dto.ts",{"_index":2074,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"coverage.html":{}}}],["src/utils/dto/pagination.meta.dto.ts:101",{"_index":2147,"title":{},"body":{"classes/PaginationMetaDto.html":{}}}],["src/utils/dto/pagination.meta.dto.ts:113",{"_index":2149,"title":{},"body":{"classes/PaginationMetaDto.html":{}}}],["src/utils/dto/pagination.meta.dto.ts:125",{"_index":2146,"title":{},"body":{"classes/PaginationMetaDto.html":{}}}],["src/utils/dto/pagination.meta.dto.ts:137",{"_index":2143,"title":{},"body":{"classes/PaginationMetaDto.html":{}}}],["src/utils/dto/pagination.meta.dto.ts:41",{"_index":2151,"title":{},"body":{"classes/PaginationMetaDto.html":{}}}],["src/utils/dto/pagination.meta.dto.ts:53",{"_index":2145,"title":{},"body":{"classes/PaginationMetaDto.html":{}}}],["src/utils/dto/pagination.meta.dto.ts:65",{"_index":2148,"title":{},"body":{"classes/PaginationMetaDto.html":{}}}],["src/utils/dto/pagination.meta.dto.ts:77",{"_index":2152,"title":{},"body":{"classes/PaginationMetaDto.html":{}}}],["src/utils/dto/pagination.meta.dto.ts:89",{"_index":2150,"title":{},"body":{"classes/PaginationMetaDto.html":{}}}],["src/utils/serializer.interceptor.ts",{"_index":2429,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{},"coverage.html":{}}}],["src/utils/serializer.interceptor.ts:30",{"_index":2444,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["src/utils/transformers/lower",{"_index":2625,"title":{},"body":{"coverage.html":{}}}],["src/utils/transformers/upper",{"_index":2628,"title":{},"body":{"coverage.html":{}}}],["src/utils/types/deep",{"_index":2946,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/utils/types/maybe.type.ts",{"_index":2949,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/utils/types/pagination",{"_index":2127,"title":{},"body":{"interfaces/IPaginationFieldConfig.html":{},"coverage.html":{}}}],["src/utils/validate",{"_index":2629,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["ssl",{"_index":1411,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["sslenabled",{"_index":1467,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["stack",{"_index":258,"title":{},"body":{"controllers/AppController.html":{}}}],["staging",{"_index":533,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["staging/production",{"_index":2819,"title":{},"body":{"index.html":{}}}],["staging/productiondocker",{"_index":2823,"title":{},"body":{"index.html":{}}}],["staging/productionrunning",{"_index":2825,"title":{},"body":{"index.html":{}}}],["standardize",{"_index":1581,"title":{},"body":{"classes/FileResponseDto.html":{}}}],["start",{"_index":854,"title":{},"body":{"injectables/CountriesService.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"injectables/PaginationService.html":{},"changelog.html":{},"index.html":{}}}],["start.sh",{"_index":2822,"title":{},"body":{"index.html":{}}}],["started",{"_index":2501,"title":{"changelog.html":{},"contributing.html":{},"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["starter",{"_index":2713,"title":{},"body":{"index.html":{},"properties.html":{}}}],["starter.git",{"_index":2780,"title":{},"body":{"index.html":{},"properties.html":{}}}],["starter.git#readme",{"_index":2929,"title":{},"body":{"properties.html":{}}}],["starter.git/issues",{"_index":2930,"title":{},"body":{"properties.html":{}}}],["startindex",{"_index":2086,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{}}}],["startpage",{"_index":2084,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{}}}],["startpage).keys()).map((i",{"_index":2117,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["starts",{"_index":2685,"title":{},"body":{"miscellaneous/functions.html":{}}}],["state",{"_index":994,"title":{},"body":{"injectables/CountriesService.html":{}}}],["state_name",{"_index":996,"title":{},"body":{"injectables/CountriesService.html":{}}}],["statements",{"_index":2560,"title":{},"body":{"coverage.html":{}}}],["states",{"_index":873,"title":{},"body":{"injectables/CountriesService.html":{}}}],["status",{"_index":70,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/FilterQueryDto.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PaginationQueryDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query-2.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"classes/SortByDto.html":{}}}],["status_codes",{"_index":330,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["status_codes[status",{"_index":2427,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["status_codes[statuscode",{"_index":357,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["statuscode",{"_index":75,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/FilesS3PresignedService.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["stop.sh",{"_index":2824,"title":{},"body":{"index.html":{}}}],["storage",{"_index":1476,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileResponseDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["strategies",{"_index":2187,"title":{},"body":{"injectables/PaginationService.html":{}}}],["stream",{"_index":1671,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["street",{"_index":222,"title":{},"body":{"controllers/AppController.html":{}}}],["strict",{"_index":1569,"title":{},"body":{"classes/FileNotImageException.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/UserNotFoundException.html":{}}}],["string",{"_index":390,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/QueryCountryDto.html":{},"interfaces/QueryOptions.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{}}}],["string(value).replace(/['\"]+/g",{"_index":1955,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["stringexample",{"_index":2322,"title":{},"body":{"classes/Query.html":{}}}],["strings",{"_index":539,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["string})@apiokresponse({status",{"_index":1139,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["string})@apiokresponse({type",{"_index":1150,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["string})@isoptional()@transform",{"_index":2398,"title":{},"body":{"classes/QueryCountryDto.html":{}}}],["strippedvalue",{"_index":1954,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["structure",{"_index":999,"title":{},"body":{"classes/Country.html":{},"classes/Currency.html":{},"classes/FileResponseDto.html":{},"classes/UpdateDto.html":{},"miscellaneous/functions.html":{}}}],["structures",{"_index":2439,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{},"miscellaneous/functions.html":{}}}],["studio",{"_index":2784,"title":{},"body":{"index.html":{}}}],["style",{"_index":1982,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"contributing.html":{},"index.html":{}}}],["subject",{"_index":2895,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":2888,"title":{},"body":{"license.html":{}}}],["submitting",{"_index":2555,"title":{},"body":{"contributing.html":{}}}],["substantial",{"_index":2899,"title":{},"body":{"license.html":{}}}],["success",{"_index":1248,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["successful",{"_index":1777,"title":{},"body":{"controllers/FilesS3Controller.html":{}}}],["successfully",{"_index":1177,"title":{},"body":{"controllers/CurrenciesController.html":{},"classes/FileResponseDto-1.html":{}}}],["such",{"_index":1010,"title":{},"body":{"classes/Country.html":{},"classes/FileResponseDto-2.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/HttpErrorFilter.html":{},"injectables/PaginationService.html":{},"classes/Query-2.html":{},"index.html":{}}}],["suggesting",{"_index":2536,"title":{},"body":{"contributing.html":{}}}],["summary",{"_index":2845,"title":{},"body":{"index.html":{}}}],["super",{"_index":2278,"title":{},"body":{"injectables/PrismaService.html":{}}}],["super('error.file.not_image",{"_index":1574,"title":{},"body":{"classes/FileNotImageException.html":{}}}],["super('error.user_not_found",{"_index":2483,"title":{},"body":{"classes/UserNotFoundException.html":{}}}],["super(message",{"_index":1573,"title":{},"body":{"classes/FileNotImageException.html":{}}}],["super.catch(exception",{"_index":2241,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["support",{"_index":537,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"index.html":{},"modules.html":{}}}],["supports",{"_index":784,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["svg",{"_index":2923,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":193,"title":{},"body":{"controllers/AppController.html":{},"classes/Currency.html":{},"classes/FileResponseDto-2.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["switch",{"_index":968,"title":{},"body":{"injectables/CountriesService.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["switching",{"_index":1757,"title":{},"body":{"modules/FilesModule.html":{}}}],["symbol",{"_index":812,"title":{},"body":{"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/Query-2.html":{}}}],["symbol_native",{"_index":1083,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/Query-2.html":{}}}],["synchronize",{"_index":566,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{}}}],["syntax",{"_index":1283,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{}}}],["system",{"_index":1491,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/UserNotFoundException.html":{}}}],["t",{"_index":1946,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/SortByDto.html":{},"miscellaneous/typealiases.html":{}}}],["table",{"_index":921,"title":{},"body":{"injectables/CountriesService.html":{},"classes/DynamicQueryBuilder.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/Query.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{},"coverage.html":{}}}],["tables",{"_index":788,"title":{},"body":{"injectables/CountriesService.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2631,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":1774,"title":{},"body":{"controllers/FilesS3Controller.html":{}}}],["tags",{"_index":192,"title":{},"body":{"controllers/AppController.html":{},"controllers/FilesS3Controller.html":{}}}],["takes",{"_index":2688,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tasks",{"_index":1724,"title":{},"body":{"modules/FilesLocalModule.html":{},"injectables/FilesService.html":{}}}],["taskservice",{"_index":2011,"title":{},"body":{"modules/HelperModule.html":{}}}],["teardown",{"_index":2245,"title":{},"body":{"injectables/PrismaService.html":{}}}],["temp_file_upload_url",{"_index":653,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IUploadFileConfig.html":{}}}],["template",{"_index":2171,"title":{},"body":{"classes/PaginationResponseDto.html":{}}}],["terminusmodule",{"_index":283,"title":{},"body":{"modules/AppModule.html":{}}}],["test",{"_index":1373,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"contributing.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["test:covdatabase",{"_index":2815,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":2814,"title":{},"body":{"index.html":{}}}],["testing",{"_index":1374,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["tests",{"_index":2554,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["texposedaccountinfo",{"_index":1944,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["text",{"_index":1023,"title":{},"body":{"classes/Country.html":{}}}],["thanks",{"_index":2859,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":2282,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$disconnect",{"_index":2283,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$queryraw`select",{"_index":2302,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$queryrawunsafe(query",{"_index":2285,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$transaction(actions",{"_index":2301,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this._validationfilter(validationerrors",{"_index":347,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["this.builddynamicquery",{"_index":885,"title":{},"body":{"injectables/CountriesService.html":{}}}],["this.builddynamicquery(paginationquery.filters",{"_index":882,"title":{},"body":{"injectables/CountriesService.html":{}}}],["this.configservice.get('app.apiprefix",{"_index":1742,"title":{},"body":{"injectables/FilesLocalService.html":{},"injectables/HomeService.html":{}}}],["this.configservice.get('app.appprefix",{"_index":2033,"title":{},"body":{"injectables/HomeService.html":{}}}],["this.configservice.get('app.description",{"_index":2032,"title":{},"body":{"injectables/HomeService.html":{}}}],["this.configservice.get('app.name",{"_index":2031,"title":{},"body":{"injectables/HomeService.html":{}}}],["this.configservice.get('file.maxfilesize",{"_index":1870,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["this.configservice.getorthrow('file.awsdefaults3bucket",{"_index":1874,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["this.countriesservice.findall(paginationquery",{"_index":752,"title":{},"body":{"controllers/CountriesController.html":{}}}],["this.countriesservice.findall(query",{"_index":713,"title":{},"body":{"controllers/CountriesController.html":{}}}],["this.countriesservice.findmanywithpagination",{"_index":732,"title":{},"body":{"controllers/CountriesController.html":{}}}],["this.create",{"_index":1857,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["this.currenciesservice.create(createdto",{"_index":1165,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["this.currenciesservice.delete(id",{"_index":1179,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["this.currenciesservice.findall(query",{"_index":1174,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["this.currenciesservice.update(id",{"_index":1171,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["this.currentpage",{"_index":2119,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["this.endindex",{"_index":2125,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["this.endpage",{"_index":2123,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["this.filerepository.create",{"_index":1878,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["this.filesservice.create(file",{"_index":1710,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{}}}],["this.filesservice.generatepresignedurl(key",{"_index":1843,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["this.findone(id",{"_index":1238,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["this.findone(inserted.insertid",{"_index":1226,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["this.generatepresignedurl('path/to/file",{"_index":1861,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["this.get(\"database_host",{"_index":556,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get(\"database_pass",{"_index":562,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get(\"database_schema",{"_index":563,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get(\"database_user",{"_index":560,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('api_key",{"_index":649,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('api_prefix",{"_index":582,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('app_name",{"_index":572,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_access_key_id",{"_index":666,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_default_s3_bucket",{"_index":670,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_s3_access_key_id",{"_index":586,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_s3_bucket_name",{"_index":590,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_s3_companion_secret",{"_index":600,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_s3_default_region",{"_index":592,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_s3_endpoint",{"_index":596,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_s3_region",{"_index":672,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_s3_secret_access_key",{"_index":588,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_s3_server_host",{"_index":598,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_s3_temp_directory",{"_index":594,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_secret_access_key",{"_index":668,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('backend_domain",{"_index":579,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('file_driver",{"_index":664,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('file_upload_destination",{"_index":656,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('from_email",{"_index":627,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('frontend_domain",{"_index":577,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('jwt_algorithm",{"_index":614,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('jwt_audience",{"_index":618,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('jwt_issuer",{"_index":616,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('jwt_secret_key",{"_index":612,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('multiple_file_path",{"_index":662,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('node_emailer_from_email",{"_index":642,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('node_emailer_host",{"_index":634,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('node_emailer_password",{"_index":640,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('node_emailer_to_email",{"_index":644,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('node_emailer_user",{"_index":638,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('node_env",{"_index":549,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('profile_pic_file_path",{"_index":660,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('qr_image",{"_index":605,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('qr_image_path",{"_index":607,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('qr_image_path_salt",{"_index":609,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('sender_id",{"_index":651,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('sendgrid_api_key",{"_index":625,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('sms_provider_name",{"_index":647,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('temp_file_upload_url",{"_index":654,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('to_email",{"_index":629,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('tus_storage_driver",{"_index":602,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('welcome_email",{"_index":631,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.getnumber(\"database_port",{"_index":558,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.getnumber('jwt_expiration_time",{"_index":622,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.getnumber('jwt_expires_in_seconds",{"_index":620,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.getnumber('max_upload_file_size",{"_index":658,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.getnumber('node_emailer_port",{"_index":636,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.getnumber('port",{"_index":580,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.healthcheckservice.check",{"_index":212,"title":{},"body":{"controllers/AppController.html":{}}}],["this.logger.debug",{"_index":244,"title":{},"body":{"controllers/AppController.html":{}}}],["this.logger.debug('foo",{"_index":235,"title":{},"body":{"controllers/AppController.html":{}}}],["this.logger.emergency('i",{"_index":269,"title":{},"body":{"controllers/AppController.html":{}}}],["this.logger.error('i",{"_index":265,"title":{},"body":{"controllers/AppController.html":{}}}],["this.logger.fatal('i",{"_index":267,"title":{},"body":{"controllers/AppController.html":{}}}],["this.logger.info('i",{"_index":254,"title":{},"body":{"controllers/AppController.html":{}}}],["this.logger.log('hello",{"_index":233,"title":{},"body":{"controllers/AppController.html":{}}}],["this.logger.verbose",{"_index":239,"title":{},"body":{"controllers/AppController.html":{}}}],["this.logger.warn('i",{"_index":261,"title":{},"body":{"controllers/AppController.html":{}}}],["this.module",{"_index":1211,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["this.nodeenv",{"_index":528,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.pages",{"_index":2126,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["this.pagesize",{"_index":2120,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["this.paginationservice.paginate",{"_index":915,"title":{},"body":{"injectables/CountriesService.html":{}}}],["this.paginationservice.paginate(selectquery",{"_index":845,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{}}}],["this.prisma.$queryrawunsafe(countquery",{"_index":2198,"title":{},"body":{"injectables/PaginationService.html":{}}}],["this.prisma.$queryrawunsafe(dataquery",{"_index":2197,"title":{},"body":{"injectables/PaginationService.html":{}}}],["this.prisma.$queryrawunsafe(finalcountquery",{"_index":2216,"title":{},"body":{"injectables/PaginationService.html":{}}}],["this.prisma.$transaction",{"_index":2196,"title":{},"body":{"injectables/PaginationService.html":{}}}],["this.prisma.executerawquery(this.query.delete",{"_index":1246,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["this.prisma.executerawquery(this.query.findbycode",{"_index":1219,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["this.prisma.executerawquery(this.query.findbycode(id",{"_index":1234,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["this.prisma.executerawquery(this.query.findbyid",{"_index":1250,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["this.prisma.executerawquery(this.query.insert",{"_index":1224,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["this.prisma.executerawquery(this.query.update",{"_index":1236,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["this.prismaservice.ishealthy",{"_index":213,"title":{},"body":{"controllers/AppController.html":{}}}],["this.query.pgbasequery",{"_index":1242,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["this.query.pgbaseselectfield",{"_index":1241,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["this.querybuilder.builddeletequery(deleteoptions",{"_index":2397,"title":{},"body":{"classes/Query-2.html":{}}}],["this.querybuilder.buildinsertquery(insertoptions",{"_index":2393,"title":{},"body":{"classes/Query-2.html":{}}}],["this.querybuilder.buildselectquery(selectoptions",{"_index":2390,"title":{},"body":{"classes/Query-2.html":{}}}],["this.querystatements",{"_index":2498,"title":{},"body":{"classes/UtilsService.html":{}}}],["this.s3",{"_index":1864,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["this.service.appinfo",{"_index":2021,"title":{},"body":{"controllers/HomeController.html":{}}}],["this.startindex",{"_index":2124,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["this.startpage",{"_index":2122,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["this.totalitems",{"_index":2118,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["this.totalpages",{"_index":2121,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["this.usersrepository.findmanywithpagination",{"_index":955,"title":{},"body":{"injectables/CountriesService.html":{}}}],["this.utilsservice.builddynamicquery",{"_index":843,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{}}}],["this.utilsservice.builddynamicquery(paginationquery",{"_index":849,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{}}}],["this.utilsservice.querystatements",{"_index":1245,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["those",{"_index":2735,"title":{},"body":{"index.html":{}}}],["through",{"_index":457,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/CurrenciesService.html":{},"modules/FilesModule.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"injectables/SortBy.html":{}}}],["throughout",{"_index":1998,"title":{},"body":{"modules/HelperModule.html":{}}}],["throw",{"_index":1220,"title":{},"body":{"injectables/CurrenciesService.html":{},"classes/FileNotImageException.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/UserNotFoundException.html":{}}}],["thrown",{"_index":43,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/FileNotImageException.html":{},"classes/HttpErrorFilter.html":{},"classes/QueryFailedFilter.html":{},"classes/UserNotFoundException.html":{}}}],["throws",{"_index":205,"title":{},"body":{"controllers/AppController.html":{},"injectables/CurrenciesService.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"miscellaneous/functions.html":{}}}],["time",{"_index":1064,"title":{},"body":{"classes/Country.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{}}}],["timestamp",{"_index":76,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["timezone",{"_index":827,"title":{},"body":{"injectables/CountriesService.html":{},"classes/Country.html":{}}}],["timezones.ts",{"_index":2562,"title":{},"body":{"coverage.html":{}}}],["to_email",{"_index":628,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/ISendGridConfig.html":{}}}],["together",{"_index":758,"title":{},"body":{"modules/CountriesModule.html":{},"modules/CurrenciesModule.html":{}}}],["tolowercase",{"_index":1814,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["tonumber",{"_index":1917,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["tool/linter",{"_index":2551,"title":{},"body":{"contributing.html":{}}}],["tools",{"_index":2746,"title":{},"body":{"index.html":{}}}],["toplainonly",{"_index":1269,"title":{},"body":{"classes/Currency.html":{},"classes/FileType.html":{}}}],["tort",{"_index":2919,"title":{},"body":{"license.html":{}}}],["total",{"_index":1950,"title":{},"body":{"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/SortByDto.html":{}}}],["total[0",{"_index":2201,"title":{},"body":{"injectables/PaginationService.html":{}}}],["total[0].count",{"_index":2217,"title":{},"body":{"injectables/PaginationService.html":{}}}],["totalitems",{"_index":983,"title":{},"body":{"injectables/CountriesService.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{}}}],["totalpages",{"_index":2082,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{}}}],["trace",{"_index":259,"title":{},"body":{"controllers/AppController.html":{}}}],["transaction",{"_index":2265,"title":{},"body":{"injectables/PrismaService.html":{}}}],["transactional",{"_index":2267,"title":{},"body":{"injectables/PrismaService.html":{}}}],["transactions",{"_index":2249,"title":{},"body":{"injectables/PrismaService.html":{}}}],["transfer",{"_index":1007,"title":{},"body":{"classes/Country.html":{},"classes/CreateDto.html":{},"classes/FileResponseDto-2.html":{},"classes/FileUploadDto.html":{},"classes/UpdateDto.html":{}}}],["transform",{"_index":1110,"title":{},"body":{"classes/CreateDto.html":{},"classes/FileType.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"miscellaneous/functions.html":{}}}],["transform(uppercasetransformer",{"_index":1117,"title":{},"body":{"classes/CreateDto.html":{}}}],["transform(uppercasetransformer)@isdefined()@isnotempty()@isstring()@maxlength(3)@apiproperty({type",{"_index":1084,"title":{},"body":{"classes/CreateDto.html":{}}}],["transformation",{"_index":1074,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["transformed",{"_index":1254,"title":{},"body":{"classes/Currency.html":{}}}],["transformer",{"_index":1078,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/FileType.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["transforming",{"_index":1079,"title":{},"body":{"classes/CreateDto.html":{},"classes/FileType.html":{},"miscellaneous/functions.html":{}}}],["transforms",{"_index":1620,"title":{},"body":{"classes/FileType.html":{},"miscellaneous/functions.html":{}}}],["true",{"_index":304,"title":{},"body":{"modules/AppModule.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"injectables/CountriesService.html":{},"classes/Currency.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileType.html":{},"injectables/FilesLocalService.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"injectables/HomeService.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PrismaService.html":{},"classes/QueryCountryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{}}}],["true})@isnotempty()@isstring",{"_index":1905,"title":{},"body":{"classes/FilterQueryDto.html":{}}}],["true})@type(undefined",{"_index":2156,"title":{},"body":{"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{}}}],["try",{"_index":359,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/QueryFailedFilter.html":{}}}],["tus_storage_driver",{"_index":601,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IAwsConfig.html":{}}}],["two",{"_index":2704,"title":{},"body":{"miscellaneous/functions.html":{}}}],["type",{"_index":31,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["type/database",{"_index":1446,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["typealiases",{"_index":2932,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":1320,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"injectables/PrismaService.html":{},"interfaces/QueryOptions.html":{}}}],["typeorm",{"_index":2415,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["typeormconfig",{"_index":551,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["typeormmoduleoptions",{"_index":552,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["types",{"_index":1920,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"classes/UpdateDto.html":{},"miscellaneous/enumerations.html":{}}}],["types,@typescript",{"_index":1975,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["typescript",{"_index":420,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"injectables/CountriesService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/FileNotImageException.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"classes/HttpErrorFilter.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/Query.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"index.html":{},"properties.html":{}}}],["tz${0",{"_index":830,"title":{},"body":{"injectables/CountriesService.html":{}}}],["tz${index",{"_index":875,"title":{},"body":{"injectables/CountriesService.html":{}}}],["tz${index}.id_timezone",{"_index":876,"title":{},"body":{"injectables/CountriesService.html":{}}}],["tz${index}.offset",{"_index":899,"title":{},"body":{"injectables/CountriesService.html":{}}}],["tz${index}.offset_in_minutes",{"_index":900,"title":{},"body":{"injectables/CountriesService.html":{}}}],["tz${index}.text",{"_index":901,"title":{},"body":{"injectables/CountriesService.html":{}}}],["tz${index}.value",{"_index":898,"title":{},"body":{"injectables/CountriesService.html":{}}}],["ui",{"_index":2707,"title":{},"body":{"miscellaneous/functions.html":{}}}],["unauthorized",{"_index":1420,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["undefined",{"_index":546,"title":{},"body":{"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/CurrenciesController.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"miscellaneous/typealiases.html":{}}}],["undefined})@apifile()@useinterceptors(undefined",{"_index":1677,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["undefined})@isenum(paginationtype)@isoptional",{"_index":2163,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["under",{"_index":1773,"title":{},"body":{"controllers/FilesS3Controller.html":{}}}],["unique",{"_index":1047,"title":{},"body":{"classes/Country.html":{},"classes/Currency.html":{},"classes/FileType.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["unit",{"_index":2812,"title":{},"body":{"index.html":{}}}],["united",{"_index":1963,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["unknown",{"_index":62,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/FilesS3PresignedController.html":{}}}],["unnamed",{"_index":2621,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["unprocessableentityexception",{"_index":1737,"title":{},"body":{"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{}}}],["unsupported",{"_index":1865,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["unused",{"_index":422,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{},"classes/UtilsService.html":{}}}],["up",{"_index":112,"title":{},"body":{"modules/ApiModule.html":{},"controllers/AppController.html":{},"classes/CreateDto.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/PrismaService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["update",{"_index":1125,"title":{},"body":{"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{},"classes/UpdateDto.html":{},"index.html":{}}}],["update(id",{"_index":1147,"title":{},"body":{"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{}}}],["updated",{"_index":1152,"title":{},"body":{"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"changelog.html":{}}}],["updated[0]?.updatedid",{"_index":1237,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["updatedid",{"_index":2379,"title":{},"body":{"classes/Query-2.html":{}}}],["updatedto",{"_index":1148,"title":{"classes/UpdateDto.html":{}},"body":{"controllers/CurrenciesController.html":{},"classes/UpdateDto.html":{},"coverage.html":{}}}],["updates",{"_index":1208,"title":{},"body":{"injectables/CurrenciesService.html":{},"classes/UpdateDto.html":{}}}],["updating",{"_index":1186,"title":{},"body":{"injectables/CurrenciesService.html":{},"classes/Query-2.html":{},"classes/UpdateDto.html":{}}}],["upload",{"_index":1579,"title":{},"body":{"classes/FileResponseDto.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{}}}],["upload.service",{"_index":1694,"title":{},"body":{"controllers/FilesLocalController.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["upload.service.ts",{"_index":2614,"title":{},"body":{"coverage.html":{}}}],["uploaded",{"_index":1570,"title":{},"body":{"classes/FileNotImageException.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3Service.html":{}}}],["uploadedfile",{"_index":1679,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["uploader",{"_index":1755,"title":{},"body":{"modules/FilesModule.html":{}}}],["uploadfile",{"_index":1665,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{}}}],["uploadfile(@body",{"_index":1840,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["uploadfile(@uploadedfile",{"_index":1709,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["uploadfile(file",{"_index":1672,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{}}}],["uploadfileconfig",{"_index":652,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["uploading",{"_index":1589,"title":{},"body":{"classes/FileResponseDto.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesService.html":{}}}],["uploads",{"_index":1495,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileNotImageException.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["uploadsignedurl",{"_index":1582,"title":{},"body":{"classes/FileResponseDto.html":{},"injectables/FilesS3PresignedService.html":{}}}],["uppercase",{"_index":1088,"title":{},"body":{"classes/CreateDto.html":{}}}],["uppercasetransformer",{"_index":1114,"title":{},"body":{"classes/CreateDto.html":{},"coverage.html":{}}}],["url",{"_index":1429,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"classes/FileResponseDto.html":{},"classes/FileType.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"classes/HttpErrorFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{}}}],["urls",{"_index":1821,"title":{},"body":{"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["use",{"_index":937,"title":{},"body":{"injectables/CountriesService.html":{},"classes/FileNotImageException.html":{},"modules/FilesLocalModule.html":{},"modules/FilesS3PresignedModule.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"contributing.html":{},"index.html":{},"license.html":{}}}],["useclass",{"_index":138,"title":{},"body":{"modules/ApiModule.html":{},"classes/HttpErrorFilter.html":{}}}],["used",{"_index":33,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"controllers/HomeController.html":{},"injectables/HomeService.html":{},"interfaces/IAppConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"classes/UpdateDto.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["useexisting",{"_index":310,"title":{},"body":{"modules/AppModule.html":{}}}],["usefactory",{"_index":1804,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["useful",{"_index":2950,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["useinterceptors",{"_index":1680,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["useinterceptors(fileinterceptor('file",{"_index":1782,"title":{},"body":{"controllers/FilesS3Controller.html":{}}}],["user",{"_index":214,"title":{},"body":{"controllers/AppController.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/UserNotFoundException.html":{},"index.html":{}}}],["usermodule",{"_index":2316,"title":{},"body":{"classes/Query.html":{}}}],["username",{"_index":559,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{}}}],["usernotfoundexception",{"_index":2474,"title":{"classes/UserNotFoundException.html":{}},"body":{"classes/UserNotFoundException.html":{},"coverage.html":{}}}],["usernotfoundexception('specific",{"_index":2478,"title":{},"body":{"classes/UserNotFoundException.html":{}}}],["users",{"_index":2317,"title":{},"body":{"classes/Query.html":{}}}],["uses",{"_index":150,"title":{},"body":{"controllers/AppController.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"classes/Currency.html":{},"classes/FileType.html":{},"controllers/HomeController.html":{},"classes/Query-2.html":{},"injectables/ResolvePromisesInterceptor.html":{},"miscellaneous/functions.html":{}}}],["using",{"_index":1190,"title":{},"body":{"injectables/CurrenciesService.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileType.html":{},"modules/FilesLocalModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/HomeService.html":{},"index.html":{}}}],["utc",{"_index":1059,"title":{},"body":{"classes/Country.html":{}}}],["utility",{"_index":1195,"title":{},"body":{"injectables/CurrenciesService.html":{},"modules/HelperModule.html":{},"classes/Query-1.html":{},"classes/UtilsService.html":{},"miscellaneous/typealiases.html":{}}}],["utilize",{"_index":1728,"title":{},"body":{"modules/FilesLocalModule.html":{}}}],["utilizes",{"_index":2183,"title":{},"body":{"injectables/PaginationService.html":{}}}],["utils/dto/infinity",{"_index":716,"title":{},"body":{"controllers/CountriesController.html":{}}}],["utils/dto/pagination",{"_index":698,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"injectables/PaginationService.html":{}}}],["utils/dto/pagination.dto",{"_index":700,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["utils/dto/pagination.meta.dto",{"_index":857,"title":{},"body":{"injectables/CountriesService.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{}}}],["utils/infinity",{"_index":718,"title":{},"body":{"controllers/CountriesController.html":{}}}],["utils/transformers/upper",{"_index":1115,"title":{},"body":{"classes/CreateDto.html":{}}}],["utils/types/deep",{"_index":1209,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["utils/types/pagination",{"_index":795,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["utils/validate",{"_index":508,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{}}}],["utilsservice",{"_index":772,"title":{"classes/UtilsService.html":{}},"body":{"injectables/CountriesService.html":{},"injectables/CurrenciesService.html":{},"modules/HelperModule.html":{},"classes/UtilsService.html":{},"coverage.html":{},"overview.html":{}}}],["v1/${file.path",{"_index":1744,"title":{},"body":{"injectables/FilesLocalService.html":{}}}],["v1/countries?page=1&limit=10",{"_index":706,"title":{},"body":{"controllers/CountriesController.html":{}}}],["v1/countries?page=1&limit=10this",{"_index":688,"title":{},"body":{"controllers/CountriesController.html":{}}}],["v1/currencies",{"_index":1162,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["v1/currencies/:id_currency",{"_index":1166,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["v1/upload",{"_index":1700,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["v1/upload/s3",{"_index":1776,"title":{},"body":{"controllers/FilesS3Controller.html":{}}}],["val.trim",{"_index":907,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["valid",{"_index":391,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"miscellaneous/functions.html":{}}}],["validate",{"_index":397,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileUploadDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"miscellaneous/functions.html":{}}}],["validate(isvalidfield",{"_index":1942,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["validate(propertyvalue",{"_index":404,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["validate(sortby",{"_index":1959,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["validate(value",{"_index":436,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["validateconfig",{"_index":507,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["validateconfig(config",{"_index":2708,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validateconfig(process.env",{"_index":571,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{}}}],["validated",{"_index":410,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{},"miscellaneous/functions.html":{}}}],["validateif",{"_index":481,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["validateif((envvalues",{"_index":521,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["validateif(envvalues",{"_index":1426,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["validatenested",{"_index":1897,"title":{},"body":{"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{}}}],["validatenested()@type(undefined",{"_index":2399,"title":{},"body":{"classes/QueryCountryDto.html":{}}}],["validatenested({each",{"_index":2155,"title":{},"body":{"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{}}}],["validates",{"_index":406,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"injectables/FilesS3Service.html":{},"injectables/SortBy.html":{},"miscellaneous/functions.html":{}}}],["validating",{"_index":2712,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validation",{"_index":324,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/CreateDto.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"injectables/SortBy.html":{},"miscellaneous/functions.html":{}}}],["validationarguments",{"_index":399,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["validationerror",{"_index":320,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["validationerror.children",{"_index":381,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["validationerror.children.length",{"_index":382,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["validationerrors",{"_index":326,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["validationoptions",{"_index":2694,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validator",{"_index":331,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"classes/CreateDto.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["validatorconstraint",{"_index":414,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["validatorconstraintinterface",{"_index":415,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["validators/filter.validator",{"_index":1953,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["vals",{"_index":1310,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["vals.join",{"_index":1317,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["value",{"_index":408,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileType.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query-2.html":{},"classes/QueryCountryDto.html":{},"interfaces/QueryOptions.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UtilsService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["value.split",{"_index":443,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["value.tolowercase",{"_index":1535,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["values",{"_index":904,"title":{},"body":{"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"injectables/HomeService.html":{},"injectables/PaginationService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{}}}],["values.join",{"_index":930,"title":{},"body":{"injectables/CountriesService.html":{},"classes/Query-2.html":{},"classes/UtilsService.html":{}}}],["var",{"_index":360,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["variable",{"_index":1448,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"coverage.html":{}}}],["variables",{"_index":279,"title":{},"body":{"modules/AppModule.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"index.html":{}}}],["various",{"_index":1002,"title":{},"body":{"classes/Country.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"modules/FilesModule.html":{},"miscellaneous/functions.html":{}}}],["vars",{"_index":423,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{},"classes/UtilsService.html":{}}}],["verifying",{"_index":164,"title":{},"body":{"controllers/AppController.html":{}}}],["version",{"_index":190,"title":{},"body":{"controllers/AppController.html":{},"classes/EnvironmentVariablesValidator.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"index.html":{},"properties.html":{}}}],["version_neutral",{"_index":179,"title":{},"body":{"controllers/AppController.html":{}}}],["visual",{"_index":2783,"title":{},"body":{"index.html":{}}}],["void",{"_index":52,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/FilesS3Service.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/QueryFailedFilter.html":{},"miscellaneous/functions.html":{}}}],["vscode",{"_index":2790,"title":{},"body":{"index.html":{}}}],["w",{"_index":453,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["warn",{"_index":260,"title":{},"body":{"controllers/AppController.html":{}}}],["warranties",{"_index":2905,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":2901,"title":{},"body":{"license.html":{}}}],["way",{"_index":2718,"title":{},"body":{"index.html":{}}}],["welcome",{"_index":2522,"title":{},"body":{"contributing.html":{}}}],["welcome_email",{"_index":630,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/ISendGridConfig.html":{}}}],["went",{"_index":1228,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["whereclause",{"_index":1325,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["whereclauses",{"_index":868,"title":{},"body":{"injectables/CountriesService.html":{},"classes/DynamicQueryBuilder.html":{},"injectables/PaginationService.html":{},"interfaces/QueryOptions.html":{}}}],["whereclauses.join",{"_index":1327,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["whereclauses.length",{"_index":1326,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["whereclauses.push",{"_index":1324,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["whereclauses.push(`${filter.field",{"_index":978,"title":{},"body":{"injectables/CountriesService.html":{}}}],["whether",{"_index":1418,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"license.html":{}}}],["windows",{"_index":2806,"title":{},"body":{"index.html":{}}}],["within",{"_index":1769,"title":{},"body":{"modules/FilesModule.html":{},"modules/HelperModule.html":{},"injectables/ResolvePromisesInterceptor.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["without",{"_index":1999,"title":{},"body":{"modules/HelperModule.html":{},"license.html":{}}}],["working",{"_index":2062,"title":{},"body":{"interfaces/IAppConfig.html":{}}}],["workingdirectory",{"_index":573,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"interfaces/IAppConfig.html":{}}}],["world",{"_index":264,"title":{},"body":{"controllers/AppController.html":{}}}],["worry",{"_index":2733,"title":{},"body":{"index.html":{}}}],["writable",{"_index":2180,"title":{},"body":{"classes/PaginationResponseDto.html":{}}}],["wrong",{"_index":1229,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["x",{"_index":2215,"title":{},"body":{"injectables/PaginationService.html":{},"injectables/PrismaService.html":{}}}],["yarn",{"_index":2558,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["yarnrunning",{"_index":2809,"title":{},"body":{"index.html":{}}}],["yes",{"_index":1568,"title":{},"body":{"classes/FileNotImageException.html":{},"classes/Query-2.html":{},"classes/UserNotFoundException.html":{},"miscellaneous/functions.html":{}}}],["you'd",{"_index":2863,"title":{},"body":{"index.html":{}}}],["you're",{"_index":2751,"title":{},"body":{"index.html":{}}}],["yourproject",{"_index":2782,"title":{},"body":{"index.html":{}}}],["yourself",{"_index":2736,"title":{},"body":{"index.html":{}}}],["yu",{"_index":2800,"title":{},"body":{"index.html":{}}}],["yzhang.markdown",{"_index":2799,"title":{},"body":{"index.html":{}}}],["zhang",{"_index":2801,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":104,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/CountriesModule.html":{},"modules/CurrenciesModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AllExceptionsFilter.html":{"url":"classes/AllExceptionsFilter.html","title":"class - AllExceptionsFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllExceptionsFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/all-exceptions.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                A global exception filter to catch and handle all exceptions.\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                reflector\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/all-exceptions.filter.ts:47\n                            \n                        \n\n                \n                    \n                            Creates an instance of AllExceptionsFilter.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe reflector instance used for metadata reflection.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        reflector\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Reflector\n\n                    \n                \n                    \n                        \n                                Defined in src/core/filters/all-exceptions.filter.ts:54\n                        \n                    \n\n            \n                \n                    \nThe reflector instance used for metadata reflection.\n\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/filters/all-exceptions.filter.ts:63\n                        \n                    \n\n\n            \n                \n                        Catches and handles exceptions thrown by the application.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe exception that was thrown.\n\n\n                                            \n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe execution context that contains request and response objects.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ExceptionFilter, Catch, ArgumentsHost, HttpException, HttpStatus } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n\nimport { Request, Response } from 'express';\n\n/**\n * A global exception filter to catch and handle all exceptions.\n *\n * @class\n * @implements {ExceptionFilter}\n */\n\n@Catch()\nexport class AllExceptionsFilter implements ExceptionFilter {\n    /**\n     * Creates an instance of AllExceptionsFilter.\n     *\n     * @param {Reflector} reflector - The reflector instance used for metadata reflection.\n     */\n\n    constructor(public reflector: Reflector) {}\n\n    /**\n     * Catches and handles exceptions thrown by the application.\n     *\n     * @param {unknown} exception - The exception that was thrown.\n     * @param {ArgumentsHost} host - The execution context that contains request and response objects.\n     */\n\n    catch(exception: unknown, host: ArgumentsHost) {\n        console.log('ALL EXEPTION from filter', exception);\n        const ctx = host.switchToHttp();\n        const response = ctx.getResponse();\n        const request = ctx.getRequest();\n        const status =\n            exception instanceof HttpException\n                ? exception.getStatus()\n                : HttpStatus.INTERNAL_SERVER_ERROR;\n\n        const errorResponse = {\n            statusCode: status,\n            timestamp: new Date().toISOString(),\n            path: request.url,\n            message: (exception as any).message || 'Internal server error',\n        };\n\n        response.status(status).json(errorResponse);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ApiModule.html":{"url":"modules/ApiModule.html","title":"module - ApiModule","body":"\n                   \n\n\n\n\n    Modules\n    ApiModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ApiModule\n\n\n\ncluster_ApiModule_imports\n\n\n\n\nCountriesModule\n\nCountriesModule\n\n\n\nApiModule\n\nApiModule\n\nApiModule -->\n\nCountriesModule->ApiModule\n\n\n\n\n\nCurrenciesModule\n\nCurrenciesModule\n\nApiModule -->\n\nCurrenciesModule->ApiModule\n\n\n\n\n\nFilesModule\n\nFilesModule\n\nApiModule -->\n\nFilesModule->ApiModule\n\n\n\n\n\nHomeModule\n\nHomeModule\n\nApiModule -->\n\nHomeModule->ApiModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/api.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            This file contains the ApiModule class, which aggregates several feature modules and sets up a global HTTP error filter.\nThe ApiModule class is responsible for importing feature-specific modules and configuring a global HTTP error filter.\nIt serves as an aggregate module for the API-related functionalities of the application.\n\n        \n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            CountriesModule\n                        \n                        \n                            CurrenciesModule\n                        \n                        \n                            FilesModule\n                        \n                        \n                            HomeModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { APP_FILTER } from '@nestjs/core';\n\nimport { HttpErrorFilter } from '@core/exceptions/http-error.filter';\n\nimport { CountriesModule } from './countries/countries.module';\nimport { CurrenciesModule } from './currencies/currencies.module';\nimport { FilesModule } from './files/files.module';\nimport { HomeModule } from './home/home.module';\n\n/**\n * @fileoverview\n * This file contains the `ApiModule` class, which aggregates several feature modules and sets up a global HTTP error filter.\n *\n * @module\n * @description\n * The `ApiModule` class is responsible for importing feature-specific modules and configuring a global HTTP error filter.\n * It serves as an aggregate module for the API-related functionalities of the application.\n */\n\n@Module({\n    imports: [\n        /**\n         * Module responsible for managing country-related functionalities.\n         */\n        CountriesModule,\n\n        /**\n         * Module responsible for managing currency-related functionalities.\n         */\n        CurrenciesModule,\n\n        /**\n         * Module responsible for managing file-related functionalities.\n         */\n        FilesModule,\n\n        /**\n         * Module responsible for managing home-related functionalities.\n         */\n        HomeModule,\n    ],\n    providers: [\n        {\n            provide: APP_FILTER,\n            useClass: HttpErrorFilter,\n        },\n    ],\n})\nexport class ApiModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/app.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                This file contains the AppController class, which provides health check endpoints for the application.\nThe AppController is responsible for handling HTTP requests related to the application's health status.\nIt uses @nestjs/terminus for health checks and PrismaService to check the database connection status.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Public\n                                    Async\n                                getHealth\n                            \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Async\n                        getHealth\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHealth()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/health')@HealthCheck()\n                \n            \n\n                    \n                        \n                            Defined in src/app/app.controller.ts:66\n                        \n                    \n\n\n            \n                \n                        Health check endpoint.\nThis endpoint performs a health check by verifying the status of the database connection.\nThe result of the health check is returned in the response.\nExample :// Example response\n{\n  \"status\": \"ok\",\n  \"info\": {\n    \"prisma\": \"up\"\n  },\n  \"error\": {},\n  \"details\": {}\n}\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves with the health check result.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/log')\n                \n            \n\n                    \n                        \n                            Defined in src/app/app.controller.ts:91\n                        \n                    \n\n\n            \n                \n                        Log check endpoint.\nThis endpoint performs a log check.\nThe result of the log check is returned in the response.\nExample :// Example response\n{\n  \"logger\": {\n    \"status\": \"ok\"\n  },\n}\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                A promise that resolves with the log check result.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Inject } from '@nestjs/common'; // VERSION_NEUTRAL\nimport { ApiTags } from '@nestjs/swagger';\nimport { HealthCheck, HealthCheckService } from '@nestjs/terminus';\n\nimport Logger, { LoggerKey } from '@infineit/winston-logger/logger/domain/logger';\n\nimport { PrismaService } from '@services/prisma.service';\n// import { PublicRoute } from 'src/core/decorators/public.request.decorator';\n\n// @Controller({\n//     version: VERSION_NEUTRAL,\n//     path: '/',\n// })\n\n/**\n * @fileoverview\n * This file contains the `AppController` class, which provides health check endpoints for the application.\n *\n * @module\n * @description\n * The `AppController` is responsible for handling HTTP requests related to the application's health status.\n * It uses `@nestjs/terminus` for health checks and `PrismaService` to check the database connection status.\n */\n\n@ApiTags('Health') // Tags the controller for Swagger API documentation\n@Controller() // Decorates the class as a NestJS controller\nexport class AppController {\n    /**\n     * Creates an instance of `AppController`.\n     *\n     * @param {HealthCheckService} healthCheckService - Service for performing health checks.\n     * @param {PrismaService} prismaService - Service for interacting with the Prisma ORM.\n     */\n    constructor(\n        @Inject(LoggerKey) private logger: Logger,\n        private readonly healthCheckService: HealthCheckService,\n        private readonly prismaService: PrismaService\n    ) {}\n\n    /**\n     * Health check endpoint.\n     *\n     * @route GET /health\n     * @returns {Promise} A promise that resolves with the health check result.\n     * @throws {BadRequestException} If the health check fails.\n     *\n     * @description\n     * This endpoint performs a health check by verifying the status of the database connection.\n     * The result of the health check is returned in the response.\n     *\n     * @example\n     * // Example response\n     * {\n     *   \"status\": \"ok\",\n     *   \"info\": {\n     *     \"prisma\": \"up\"\n     *   },\n     *   \"error\": {},\n     *   \"details\": {}\n     * }\n     */\n\n    @Get('/health') // Route to handle GET requests at /health\n    @HealthCheck() // Decorator to indicate that this is a health check endpoint\n    // @PublicRoute()\n    public async getHealth(): Promise {\n        return this.healthCheckService.check([() => this.prismaService.isHealthy()]);\n    }\n\n    /**\n     * Log check endpoint.\n     *\n     * @route GET /log\n     * @returns {Promise} A promise that resolves with the log check result.\n     * @throws {BadRequestException} If the health check fails.\n     *\n     * @description\n     * This endpoint performs a log check.\n     * The result of the log check is returned in the response.\n     *\n     * @example\n     * // Example response\n     * {\n     *   \"logger\": {\n     *     \"status\": \"ok\"\n     *   },\n     * }\n     */\n\n    @Get('/log')\n    getHello(): object {\n        // const user = {\n        //     id: 'johndoe',\n        //     name: 'John Doe',\n        //     address: '123 Imaginary Street',\n        //     passport: {\n        //         number: 'BE123892',\n        //         issued: 2023,\n        //         expires: 2027,\n        //     },\n        //     phone: '123-234-544',\n        // };\n        // this.logger.log('Hello endpoint called');\n        // this.logger.log('Hello endpoint called');\n        // this.logger.debug('foo %s %o', 'bar');\n        // this.logger.verbose({ foo: 'bar' }, 'baz %s', 'qux');\n        // Debug\n        // Debug\n        this.logger.debug(\n            'I am a debug message!',\n            {\n                context: 'Bootstrap',\n                correlationId: '1b3fd064-2bed-4bb4-b3af-a5f3686b1b53',\n                sourceClass: 'AppModule',\n                props: {\n                    foo: 'bar-debug',\n                    baz: 'qux',\n                },\n            },\n            'getHello'\n        );\n\n        // // Info\n        // this.logger.info('I am an info message!', {\n        //     props: {\n        //         foo: 'bar',\n        //         baz: 'qux',\n        //     },\n        // });\n\n        this.logger.info('I am an info message should be set!', {\n            context: 'Bootstrap',\n            correlationId: '1b3fd064-2bed-4bb4-b3af-a5f3686b1b53',\n            sourceClass: 'AppModule',\n            // durationMs: 120,\n            // stack: 'Error stack trace',\n            props: { foo: 'bar', baz: 'qux' },\n        });\n\n        // Warn\n        this.logger.warn('I am a warn message! new one', {\n            context: 'Bootstrap',\n            correlationId: '1b3fd064-2bed-4bb4-b3af-a5f3686b1b53',\n            sourceClass: 'AppModule',\n            props: {\n                foo: 'bar',\n                baz: 'qux',\n            },\n            error: new Error('Hello World!'),\n        });\n\n        // Error\n        this.logger.error('I am an error message!', {\n            props: {\n                foo: 'bar',\n                baz: 'qux',\n            },\n            error: new Error('Hello World!'),\n        });\n\n        // Fatal\n        this.logger.fatal('I am a fatal message!', {\n            props: {\n                foo: 'bar',\n                baz: 'qux',\n            },\n            error: new Error('Hello World!'),\n        });\n\n        // Emergency\n        this.logger.emergency('I am an emergency message!', {\n            props: {\n                foo: 'bar',\n                baz: 'qux',\n            },\n            error: new Error('Hello World!'),\n        });\n\n        return {\n            logger: {\n                status: 'ok',\n            },\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nApiModule\n\nApiModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nApiModule->AppModule\n\n\n\n\n\nHelperModule\n\nHelperModule\n\nAppModule -->\n\nHelperModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            This file contains the AppModule class, which is the root module of the NestJS application.\nThe AppModule class is responsible for importing and configuring the core modules of the application.\nIt includes configuration for environment variables, database connections, and health checks.\n\n        \n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ApiModule\n                        \n                        \n                            HelperModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { TerminusModule } from '@nestjs/terminus';\n\n// import * as dotenv from 'dotenv';\nimport { ContextModule } from '@infineit/winston-logger/context/infrastructure/nestjs/contextModule';\nimport { LoggerModule } from '@infineit/winston-logger/logger/infrastructure/nestjs/loggerModule';\n\nimport { HelperModule } from '@common/helper/helper.module';\nimport appConfig from '@config/app.config';\nimport databaseConfig from '@config/database.config';\nimport fileConfig from '@config/file.config';\nimport loggerConfig from '@config/logger.config';\nimport { PrismaService } from '@services/prisma.service';\n\nimport { ApiModule } from '../modules/api.module';\n\nimport { AppController } from './app.controller';\n\nconst ENV = process.env.NODE_ENV;\n\n/**\n * @fileoverview\n * This file contains the `AppModule` class, which is the root module of the NestJS application.\n *\n * @module\n * @description\n * The `AppModule` class is responsible for importing and configuring the core modules of the application.\n * It includes configuration for environment variables, database connections, and health checks.\n */\n\n@Module({\n    controllers: [AppController],\n    imports: [\n        ConfigModule.forRoot({\n            isGlobal: true,\n            load: [appConfig, databaseConfig, fileConfig, loggerConfig],\n            envFilePath: !ENV ? '.env' : `.env.${ENV}`,\n        }),\n        ApiModule,\n        TerminusModule,\n        HelperModule,\n        LoggerModule.forRoot(PrismaService),\n        ContextModule,\n    ],\n    // providers: [\n    //     PrismaService,\n    //     {\n    //         provide: 'PRISMA_CLIENT',\n    //         useExisting: PrismaService,\n    //     },\n    // ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BadRequestExceptionFilter.html":{"url":"classes/BadRequestExceptionFilter.html","title":"class - BadRequestExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BadRequestExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/bad-request.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                A custom exception filter to handle BadRequestException specifically.\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                reflector\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _validationFilter\n                            \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/bad-request.filter.ts:27\n                            \n                        \n\n                \n                    \n                            Creates an instance of BadRequestExceptionFilter.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe reflector instance used for metadata reflection.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        reflector\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Reflector\n\n                    \n                \n                    \n                        \n                                Defined in src/core/filters/bad-request.filter.ts:34\n                        \n                    \n\n            \n                \n                    \nThe reflector instance used for metadata reflection.\n\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _validationFilter\n                        \n                    \n                \n            \n            \n                \n                        \n                    _validationFilter(validationErrors: ValidationError[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/filters/bad-request.filter.ts:93\n                        \n                    \n\n\n            \n                \n                        Filters and formats validation errors.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                validationErrors\n                                            \n                                                        ValidationError[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nArray of validation errors.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                Formatted validation errors.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: BadRequestException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/filters/bad-request.filter.ts:43\n                        \n                    \n\n\n            \n                \n                        Catches and handles BadRequestException thrown by the application.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                        BadRequestException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe BadRequestException that was thrown.\n\n\n                                            \n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe execution context that contains request and response objects.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { STATUS_CODES } from 'http';\n\nimport {\n    ArgumentsHost,\n    BadRequestException,\n    Catch,\n    ExceptionFilter,\n    // HttpStatus,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n\nimport { ValidationError } from 'class-validator';\nimport { Response } from 'express';\nimport * as _ from 'lodash';\n\n// import { PgSQLService } from \"../common/shared/services/pgsql.service\";\n// import { Query } from './query';\n\n/**\n * A custom exception filter to handle BadRequestException specifically.\n *\n * @class\n * @implements {ExceptionFilter}\n */\n\n@Catch(BadRequestException)\nexport class BadRequestExceptionFilter implements ExceptionFilter {\n    /**\n     * Creates an instance of BadRequestExceptionFilter.\n     *\n     * @param {Reflector} reflector - The reflector instance used for metadata reflection.\n     */\n\n    constructor(public reflector: Reflector) {}\n\n    /**\n     * Catches and handles BadRequestException thrown by the application.\n     *\n     * @param {BadRequestException} exception - The BadRequestException that was thrown.\n     * @param {ArgumentsHost} host - The execution context that contains request and response objects.\n     */\n\n    catch(exception: BadRequestException, host: ArgumentsHost) {\n        console.log('BAD REQUREST from fil');\n        const ctx = host.switchToHttp();\n        const response = ctx.getResponse();\n        // const request = ctx.getRequest();\n        const statusCode = exception.getStatus();\n        const r = exception.getResponse();\n\n        if (_.isArray(r.message) && r.message[0] instanceof ValidationError) {\n            const validationErrors = r.message;\n            r.error = this._validationFilter(validationErrors);\n        }\n\n        //put api logic here to fetch from db is erro code found\n        r.statusCode = statusCode;\n        r.message = STATUS_CODES[statusCode];\n\n        response.status(statusCode).json(r);\n\n        // try {\n        //   var sqlService = new PgSQLService();\n        //   var query = new Query();\n        //   var reqstr = JSON.stringify(_.clone(request.body));\n        //   var resstr = JSON.stringify(_.clone(r));\n        //   sqlService.run(\n        //     query.addQueryError(\"BadRequest\", request.method, request.url, reqstr, resstr)\n        //   );\n        // } catch (error) {}\n\n        // try {\n        //   var sqlService = new PgSQLService();\n        //   var query = new Query();\n        //   const reqstrobj = { body: _.clone(request.body), header: _.clone(request.header) };\n        //   var reqstr = JSON.stringify(reqstrobj);\n\n        //   const resstrobj = { res: _.clone(r), exception: exception.stack };\n        //   var resstr = JSON.stringify(resstrobj);\n        //   sqlService.run(\n        //     query.addQueryError(\"BadRequest\", request.method, request.url, reqstr, resstr)\n        //   );\n        // } catch (error) {}\n    }\n\n    /**\n     * Filters and formats validation errors.\n     *\n     * @param {ValidationError[]} validationErrors - Array of validation errors.\n     * @returns {object} Formatted validation errors.\n     */\n\n    private _validationFilter(validationErrors: ValidationError[]) {\n        const errorMessages = {};\n\n        for (const validationError of validationErrors) {\n            if (validationError.children && validationError.children.length > 0) {\n                const nestedErrorMessage = {};\n                for (let i = 0; i \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CommaSeparated.html":{"url":"injectables/CommaSeparated.html","title":"injectable - CommaSeparated","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CommaSeparated\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/filter.validator.ts\n        \n\n\n            \n                Description\n            \n            \n                Custom validator for checking if a string is a valid comma-separated list of numbers.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/validators/filter.validator.ts:47\n                        \n                    \n\n\n            \n                \n                        Default error message when validation fails.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe validation arguments.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \nThe error message.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(propertyValue: string, args: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/validators/filter.validator.ts:28\n                        \n                    \n\n\n            \n                \n                        Validates if the given value is a comma-separated list of numbers.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                propertyValue\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe value to be validated.\n\n\n                                            \n                                        \n                                        \n                                                args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe validation arguments.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \nReturns true if valid; otherwise, false.\n\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\nimport {\n    ValidatorConstraint,\n    ValidatorConstraintInterface,\n    ValidationArguments,\n} from 'class-validator';\n\n/**\n * Custom validator for checking if a string is a valid comma-separated list of numbers.\n *\n * @export\n * @class CommaSeparated\n * @implements {ValidatorConstraintInterface}\n */\n@Injectable()\n@ValidatorConstraint({ name: 'CommaSeparated', async: false })\nexport class CommaSeparated implements ValidatorConstraintInterface {\n    /**\n     * Validates if the given value is a comma-separated list of numbers.\n     *\n     * @param {string} propertyValue - The value to be validated.\n     * @param {ValidationArguments} args - The validation arguments.\n     * @returns {boolean} - Returns true if valid; otherwise, false.\n     */\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    validate(propertyValue: string, args: ValidationArguments): boolean {\n        //\n        //\n        const isValid = /^[0-9]+(,[0-9]+)*$/.test(propertyValue);\n\n        if (isValid) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Default error message when validation fails.\n     *\n     * @param {ValidationArguments} args - The validation arguments.\n     * @returns {string} - The error message.\n     */\n\n    defaultMessage(args: ValidationArguments): string {\n        return `Invalid ${args.property}`;\n    }\n}\n\n/**\n * Custom validator for checking if a string is in the correct \"field direction\" format.\n *\n * @export\n * @class SortBy\n * @implements {ValidatorConstraintInterface}\n */\n@Injectable()\n@ValidatorConstraint({ name: 'SortBy', async: false })\nexport class SortBy implements ValidatorConstraintInterface {\n    /**\n     * Validates if the given value is in the format of \"field direction\" where direction is \"ASC\" or \"DESC\".\n     *\n     * @param {string} value - The value to be validated.\n     * @param {ValidationArguments} args - The validation arguments.\n     * @returns {boolean} - Returns true if valid; otherwise, false.\n     */\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    validate(value: string, args: ValidationArguments): boolean {\n        // Split the input by spaces and validate each pair\n        const parts = value.split(' ');\n\n        // Ensure pairs of field direction (e.g., field direction, field direction, ...)\n        if (parts.length % 2 !== 0) {\n            return false;\n        }\n\n        // Regular expression to match valid field direction\n        const fieldRegex = /^[\\w]+$/;\n        const directionRegex = /^(ASC|DESC|asc|desc|Asc|Desc)$/;\n\n        // Iterate through pairs and validate\n        for (let i = 0; i \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConfigService.html":{"url":"classes/ConfigService.html","title":"class - ConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/helper/services/config.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                get\n                            \n                            \n                                    Public\n                                getBoolean\n                            \n                            \n                                    Public\n                                getNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    nodeEnv\n                                \n                                \n                                    prismaConfig\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/helper/services/config.service.ts:72\n                            \n                        \n\n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        get\n                        \n                    \n                \n            \n            \n                \n                        \n                    get(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/helper/services/config.service.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getBoolean\n                        \n                    \n                \n            \n            \n                \n                        \n                    getBoolean(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/helper/services/config.service.ts:101\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getNumber\n                        \n                    \n                \n            \n            \n                \n                        \n                    getNumber(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/helper/services/config.service.ts:97\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        nodeEnv\n                    \n                \n\n                \n                    \n                        getnodeEnv()\n                    \n                \n                            \n                                \n                                    Defined in src/common/helper/services/config.service.ts:105\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        prismaConfig\n                    \n                \n\n                \n                    \n                        getprismaConfig()\n                    \n                \n                            \n                                \n                                    Defined in src/common/helper/services/config.service.ts:139\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { IsEnum, IsInt, IsOptional, IsString, ValidateIf, IsUrl, Max, Min } from 'class-validator';\nimport * as dotenv from 'dotenv';\n\n// import { FileDriver } from '../../../core/enum/file.type';\nimport { IAppConfig } from '../../../core/interfaces/app.interfaces';\nimport { IAwsConfig } from '../../../core/interfaces/aws.interfaces';\nimport { IFileConfig } from '../../../core/interfaces/file.interfaces';\nimport { IJWTConfig } from '../../../core/interfaces/jwt.interfaces';\nimport { INodeEmailerConfig } from '../../../core/interfaces/node-emailer.interfaces';\n// import { IPostgreSQLConfig } from '../../../core/interfaces/postgres.interfaces';\nimport { ISendGridConfig } from '../../../core/interfaces/sendgrid.interfaces';\nimport { ISMSConfig } from '../../../core/interfaces/sms.interfaces';\nimport { IUploadFileConfig } from '../../../core/interfaces/upload-file.interfaces';\nimport validateConfig from '../../../utils/validate-config';\n\n/**\n * Config service\n * @export\n * @class ConfigService\n */\n\nclass EnvVarAppConfigValidator {\n    @IsInt()\n    @Min(0)\n    @Max(65535)\n    @IsOptional()\n    APP_PORT: number;\n\n    @IsUrl({ require_tld: false })\n    @IsOptional()\n    FRONTEND_DOMAIN: string;\n\n    @IsUrl({ require_tld: false })\n    @IsOptional()\n    BACKEND_DOMAIN: string;\n\n    @IsString()\n    @IsOptional()\n    API_PREFIX: string;\n}\n\n// class EnvVarFileConfigValidator {\n//     // @IsEnum(FileDriver)\n//     // FILE_DRIVER: FileDriver;\n\n//     // @ValidateIf((envValues) =>\n//     //     [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n//     // )\n//     // @IsString()\n//     // AWS_ACCESS_KEY_ID: string;\n\n//     // @ValidateIf((envValues) =>\n//     //     [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n//     // )\n//     // @IsString()\n//     // AWS_SECRET_ACCESS_KEY: string;\n\n//     // @ValidateIf((envValues) =>\n//     //     [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n//     // )\n//     // @IsString()\n//     // AWS_DEFAULT_S3_BUCKET: string;\n\n//     // @ValidateIf((envValues) =>\n//     //     [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n//     // )\n//     @IsString()\n//     AWS_S3_REGION: string;\n// }\n\nexport class ConfigService {\n    constructor() {\n        const nodeEnv = this.nodeEnv;\n        // dotenv.config({\n        //   path: nodeEnv === \"production\" ? \".env\" : `.env.${nodeEnv}`,\n        // });\n        dotenv.config({\n            path:\n                nodeEnv === 'production'\n                    ? '.env.staging'\n                    : nodeEnv === 'staging'\n                      ? '.env.staging'\n                      : '.env.development',\n        });\n\n        // // Replace \\\\n with \\n to support multiline strings in AWS\n        // for (const envName of Object.keys(process.env)) {\n        //   process.env[envName] = process.env[envName].replace(/\\\\n/g, \"\\n\");\n        // }\n    }\n\n    public get(key: string): string {\n        return process.env[key] || 'undefined';\n    }\n\n    public getNumber(key: string): number {\n        return Number(this.get(key));\n    }\n\n    public getBoolean(key: string): boolean {\n        return Boolean(this.get(key));\n    }\n\n    get nodeEnv(): string {\n        return this.get('NODE_ENV') || 'development';\n    }\n\n    // get typeOrmConfig(): TypeOrmModuleOptions {\n    //   const dbConfig = {\n    //     // eslint-disable-next-line @typescript-eslint/prefer-as-const\n    //     type: \"mysql\" as \"mysql\",\n    //     host: this.get(\"DATABASE_HOST\"),\n    //     port: this.getNumber(\"DATABASE_PORT\"),\n    //     username: this.get(\"DATABASE_USER\"),\n    //     password: this.get(\"DATABASE_PASS\"),\n    //     database: this.get(\"DATABASE_SCHEMA\"),\n    //     authSource: \"admin\",\n    //     synchronize: true,\n    //     multipleStatements: true,\n    //     entities: [\"src/**/**.entity{.ts,.js}\"],\n    //     bigNumberStrings: false,\n    //   };\n    //   return dbConfig;\n    // }\n\n    // get appConfig(): IAppConfig {\n    //     validateConfig(process.env, EnvVarAppConfigValidator);\n    //     return {\n    //         name: this.get('APP_NAME') || '',\n    //         workingDirectory: process.env.PWD || process.cwd(),\n    //         frontendDomain: this.get('FRONTEND_DOMAIN') || '',\n    //         backendDomain: this.get('BACKEND_DOMAIN') || '',\n    //         port: this.getNumber('PORT'),\n    //         apiPrefix: this.get('API_PREFIX') || '',\n    //     };\n    // }\n\n    get prismaConfig(): string {\n        return `postgresql://${this.get('POSTGRES_USER')}:${this.get('POSTGRES_PASSWORD')}@${this.get('POSTGRES_HOST')}:${this.get('POSTGRES_PORT')}/${this.get('POSTGRES_NAME')}?connection_limit=${this.get('POSTGRES_CONNECTION_LIMIT')}&pool_timeout=${this.get('POSTGRES_POOL_TIMEOUT')}&schema=${this.get('POSTGRES_SCHEMA')}`;\n    }\n\n    // get awsS3Config(): IAwsConfig {\n    //     return {\n    //         AWS_S3_ACCESS_KEY_ID: this.get('AWS_S3_ACCESS_KEY_ID'),\n    //         AWS_S3_SECRET_ACCESS_KEY: this.get('AWS_S3_SECRET_ACCESS_KEY'),\n    //         AWS_S3_BUCKET_NAME: this.get('AWS_S3_BUCKET_NAME'),\n    //         AWS_S3_DEFAULT_REGION: this.get('AWS_S3_DEFAULT_REGION'),\n    //         AWS_S3_TEMP_DIRECTORY: this.get('AWS_S3_TEMP_DIRECTORY'),\n    //         AWS_S3_ENDPOINT: this.get('AWS_S3_ENDPOINT'),\n    //         AWS_S3_SERVER_HOST: this.get('AWS_S3_SERVER_HOST'),\n    //         AWS_S3_COMPANION_SECRET: this.get('AWS_S3_COMPANION_SECRET'),\n    //         TUS_STORAGE_DRIVER: this.get('TUS_STORAGE_DRIVER'),\n    //     };\n    // }\n\n    // get qrConfig() {\n    //     return {\n    //         QR_IMAGE: this.get('QR_IMAGE') || '',\n    //         QR_IMAGE_PATH: this.get('QR_IMAGE_PATH') || '',\n    //         QR_IMAGE_PATH_SALT: this.get('QR_IMAGE_PATH_SALT') || '',\n    //     };\n    // }\n\n    // get jwtConfig(): IJWTConfig {\n    //     return {\n    //         secret: this.get('JWT_SECRET_KEY'),\n    //         algorithm: this.get('JWT_ALGORITHM'),\n    //         issuer: this.get('JWT_ISSUER'),\n    //         audience: this.get('JWT_AUDIENCE'),\n    //         expiresInSeconds: this.getNumber('JWT_EXPIRES_IN_SECONDS'),\n    //         expirationTime: this.getNumber('JWT_EXPIRATION_TIME'),\n    //     };\n    // }\n\n    // get sendgridConfig(): ISendGridConfig {\n    //     return {\n    //         SENDGRID_API_KEY: this.get('SENDGRID_API_KEY'),\n    //         FROM_EMAIL: this.get('FROM_EMAIL'),\n    //         TO_EMAIL: this.get('TO_EMAIL'),\n    //         WELCOME_EMAIL: this.get('WELCOME_EMAIL'),\n    //     };\n    // }\n\n    // get nodeemailerConfig(): INodeEmailerConfig {\n    //     return {\n    //         NODE_EMAILER_HOST: this.get('NODE_EMAILER_HOST'),\n    //         NODE_EMAILER_PORT: this.getNumber('NODE_EMAILER_PORT'),\n    //         NODE_EMAILER_USER: this.get('NODE_EMAILER_USER'),\n    //         NODE_EMAILER_PASSWORD: this.get('NODE_EMAILER_PASSWORD'),\n    //         NODE_EMAILER_FROM_EMAIL: this.get('NODE_EMAILER_FROM_EMAIL'),\n    //         NODE_EMAILER_TO_EMAIL: this.get('NODE_EMAILER_TO_EMAIL'),\n    //     };\n    // }\n\n    // get smsConfig(): ISMSConfig {\n    //     return {\n    //         SMS_PROVIDER_NAME: this.get('SMS_PROVIDER_NAME'),\n    //         API_KEY: this.get('API_KEY'),\n    //         SENDER_ID: this.get('SENDER_ID'),\n    //     };\n    // }\n\n    // get uploadFileConfig(): IUploadFileConfig {\n    //     return {\n    //         TEMP_FILE_UPLOAD_URL: this.get('TEMP_FILE_UPLOAD_URL'),\n    //         FILE_UPLOAD_DESTINATION: this.get('FILE_UPLOAD_DESTINATION'),\n    //         MAX_UPLOAD_FILE_SIZE: this.getNumber('MAX_UPLOAD_FILE_SIZE'),\n    //         PROFILE_PIC_FILE_PATH: this.get('PROFILE_PIC_FILE_PATH'),\n    //         MULTIPLE_FILE_PATH: this.get('MULTIPLE_FILE_PATH'),\n    //     };\n    // }\n\n    // get fileConfig(): IFileConfig {\n    //     // validateConfig(process.env, EnvVarFileConfigValidator);\n    //     return {\n    //         driver: (this.get('FILE_DRIVER') as any | undefined) ?? undefined,\n    //         accessKeyId: this.get('AWS_ACCESS_KEY_ID'),\n    //         secretAccessKey: this.get('AWS_SECRET_ACCESS_KEY'),\n    //         awsDefaultS3Bucket: this.get('AWS_DEFAULT_S3_BUCKET'),\n    //         awsS3Region: this.get('AWS_S3_REGION'),\n    //         maxFileSize: 5242880, // 5mb\n    //     };\n    // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CountriesController.html":{"url":"controllers/CountriesController.html","title":"controller - CountriesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CountriesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/countries/countries.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                This file defines the CountriesController, which handles HTTP requests related to countries.\nThe CountriesController is responsible for handling requests to find and retrieve country information.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(query: PaginationQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('v1/countries')@HttpCode(HttpStatus.OK)@ApiOkResponse({type: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/countries/countries.controller.ts:43\n                        \n                    \n\n\n            \n                \n                        Find all countries\nExample :GET /v1/countries?page=1&limit=10This endpoint allows the client to retrieve a paginated list of countries.\nSee PaginationQueryDto\nSee PaginationResponseDto\nSee Country\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe pagination query parameters.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                A promise that resolves to a paginated response of countries.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query, HttpStatus, HttpCode } from '@nestjs/common';\nimport { ApiTags, ApiOkResponse } from '@nestjs/swagger';\n\nimport { PaginationResponse, PaginationResponseDto } from '@utils/dto/pagination-response.dto';\nimport { PaginationQueryDto } from '@utils/dto/pagination.dto';\n\nimport { CountriesService } from './countries.service';\nimport { Country } from './dto/country';\n\n/**\n * @fileoverview\n * This file defines the `CountriesController`, which handles HTTP requests related to countries.\n *\n * @module\n * @description\n * The `CountriesController` is responsible for handling requests to find and retrieve country information.\n */\n@ApiTags('Countries')\n@Controller()\nexport class CountriesController {\n    constructor(private readonly countriesService: CountriesService) {}\n\n    /***\n     * Find all countries\n     *\n     * @param {PaginationQueryDto} query - The pagination query parameters.\n     * @returns {Promise>} A promise that resolves to a paginated response of countries.\n     *\n     * @example\n     * GET /v1/countries?page=1&limit=10\n     *\n     * @description\n     * This endpoint allows the client to retrieve a paginated list of countries.\n     *\n     * @see PaginationQueryDto\n     * @see PaginationResponseDto\n     * @see Country\n     */\n\n    @Get('v1/countries')\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ type: PaginationResponse(Country) })\n    async findAll(@Query() query: PaginationQueryDto): Promise> {\n        const get_all = await this.countriesService.findAll(query);\n\n        return get_all;\n    }\n}\n\n// import { Controller, Get, Query, HttpStatus, HttpCode } from '@nestjs/common';\n// import { ApiTags, ApiOkResponse } from '@nestjs/swagger';\n\n// import {\n//     InfinityPaginationResponse,\n//     InfinityPaginationResponseDto,\n// } from '@utils/dto/infinity-pagination-response.dto';\n// import { infinityPagination } from '@utils/infinity-pagination';\n\n// import { CountriesService } from './countries.service';\n// import { Country } from './domain/country';\n// import { QueryCountryDto } from './dto/query-country.dto';\n\n// @ApiTags('Countries')\n// @Controller()\n// export class CountriesController {\n//     constructor(private readonly countriesService: CountriesService) {}\n\n//     /***\n//      * Find all countries\n//      */\n\n//     @Get('v1/countries')\n//     @HttpCode(HttpStatus.OK)\n//     @ApiOkResponse({\n//         type: InfinityPaginationResponse(Country),\n//     })\n//     async findAll(\n//         @Query() query: QueryCountryDto\n//     ): Promise> {\n//         console.log('HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHA');\n//         const page = query?.page ?? 1;\n//         let limit = query?.limit ?? 10;\n//         if (limit > 50) {\n//             limit = 50;\n//         }\n\n//         return infinityPagination(\n//             await this.countriesService.findManyWithPagination({\n//                 filterOptions: query?.filters,\n//                 sortOptions: query?.sort,\n//                 paginationOptions: {\n//                     page,\n//                     limit,\n//                 },\n//             }),\n//             { page, limit }\n//         );\n//     }\n// }\n\n// import { Controller, Get, Query, HttpStatus, HttpCode } from '@nestjs/common';\n// import { ApiTags, ApiOkResponse, ApiQuery } from '@nestjs/swagger';\n\n// // import {\n// //     InfinityPaginationResponse,\n// //     InfinityPaginationResponseDto,\n// // } from '@utils/dto/infinity-pagination-response.dto';\n// // import { infinityPagination } from '@utils/infinity-pagination';\n\n// import { ApiFilterQuery } from '@decorators/api.filter.query';\n// import {\n//     PaginationQueryDto,\n//     PaginatedResultDto,\n//     FilterQueryDto,\n//     // ApiFilterQuery,\n// } from '@utils/dto/pagination.dto';\n\n// // import { ApiNestedQuery } from '../../decorators/api-filter-query';\n\n// import { CountriesService } from './countries.service';\n// import { Country } from './domain/country';\n// // import { QueryCountryDto } from './dto/query-country.dto';\n\n// @ApiTags('Countries')\n// @Controller()\n// export class CountriesController {\n//     constructor(private readonly countriesService: CountriesService) {}\n\n//     /***\n//      * Find all countries\n//      */\n\n//     @Get('v1/countries')\n//     @HttpCode(HttpStatus.OK)\n//     // @ApiQuery({\n//     //     name: 'filters',\n//     //     required: false,\n//     //     type: String,\n//     //     description: 'Array of filter objects as a JSON string',\n//     //     example:\n//     //         '[{\"field\":\"name\",\"operator\":\"LIKE\",\"value\":\"John\"},{\"field\":\"age\",\"operator\":\">\",\"value\":\"30\"}]',\n//     // })\n//     // @ApiQuery({\n//     //     name: 'sort',\n//     //     required: false,\n//     //     type: String,\n//     //     description: 'Array of sort objects as a JSON string',\n//     //     example: '[{\"field\":\"name\",\"direction\":\"ASC\"},{\"field\":\"age\",\"direction\":\"DESC\"}]',\n//     // })\n//     // @ApiFilterQuery('filters', FilterQueryDto, 0)\n//     // @ApiFilterQuery('filters', FilterQueryDto, 1)\n//     @ApiOkResponse({ type: PaginatedResultDto })\n//     async findAll(\n//         @Query() paginationQuery: PaginationQueryDto\n//     ): Promise> {\n//         return this.countriesService.findAll(paginationQuery);\n//     }\n// }\n\n// // import { Controller, Get, Query, HttpStatus, HttpCode } from '@nestjs/common';\n// // import { ApiTags, ApiOkResponse } from '@nestjs/swagger';\n\n// // import {\n// //     InfinityPaginationResponse,\n// //     InfinityPaginationResponseDto,\n// // } from '@utils/dto/infinity-pagination-response.dto';\n// // import { infinityPagination } from '@utils/infinity-pagination';\n\n// // import { CountriesService } from './countries.service';\n// // import { Country } from './domain/country';\n// // import { QueryCountryDto } from './dto/query-country.dto';\n\n// // @ApiTags('Countries')\n// // @Controller()\n// // export class CountriesController {\n// //     constructor(private readonly countriesService: CountriesService) {}\n\n// //     /***\n// //      * Find all countries\n// //      */\n\n// //     @Get('v1/countries')\n// //     @HttpCode(HttpStatus.OK)\n// //     @ApiOkResponse({\n// //         type: InfinityPaginationResponse(Country),\n// //     })\n// //     async findAll(\n// //         @Query() query: QueryCountryDto\n// //     ): Promise> {\n// //         console.log('HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHA');\n// //         const page = query?.page ?? 1;\n// //         let limit = query?.limit ?? 10;\n// //         if (limit > 50) {\n// //             limit = 50;\n// //         }\n\n// //         return infinityPagination(\n// //             await this.countriesService.findManyWithPagination({\n// //                 filterOptions: query?.filters,\n// //                 sortOptions: query?.sort,\n// //                 paginationOptions: {\n// //                     page,\n// //                     limit,\n// //                 },\n// //             }),\n// //             { page, limit }\n// //         );\n// //     }\n// // }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CountriesModule.html":{"url":"modules/CountriesModule.html","title":"module - CountriesModule","body":"\n                   \n\n\n\n\n    Modules\n    CountriesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CountriesModule\n\n\n\ncluster_CountriesModule_providers\n\n\n\ncluster_CountriesModule_exports\n\n\n\n\nCountriesService \n\nCountriesService \n\n\n\nCountriesModule\n\nCountriesModule\n\nCountriesService  -->\n\nCountriesModule->CountriesService \n\n\n\n\n\nCountriesService\n\nCountriesService\n\nCountriesModule -->\n\nCountriesService->CountriesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/countries/countries.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            This file defines the CountriesModule, which bundles the CountriesController and CountriesService together.\nThe CountriesModule is responsible for handling country-related operations. It provides the necessary controllers and services to manage countries.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CountriesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CountriesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CountriesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { CountriesController } from './countries.controller';\nimport { CountriesService } from './countries.service';\n\n/**\n * @fileoverview\n * This file defines the `CountriesModule`, which bundles the `CountriesController` and `CountriesService` together.\n *\n * @module\n * @description\n * The `CountriesModule` is responsible for handling country-related operations. It provides the necessary controllers and services to manage countries.\n */\n@Module({\n    controllers: [CountriesController],\n    providers: [CountriesService],\n    exports: [CountriesService],\n})\nexport class CountriesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CountriesService.html":{"url":"injectables/CountriesService.html","title":"injectable - CountriesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CountriesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/countries/countries.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the CountriesService, which handles the business logic for managing countries.\nThe CountriesService is responsible for providing country-related services, including pagination and dynamic queries.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(paginationService: PaginationService, utilsService: UtilsService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/countries/countries.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        paginationService\n                                                  \n                                                        \n                                                                        PaginationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        utilsService\n                                                  \n                                                        \n                                                                        UtilsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(paginationQuery: PaginationQueryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/countries/countries.service.ts:52\n                        \n                    \n\n\n            \n                \n                        Find all countries with pagination.\nThis method allows the client to retrieve a paginated list of countries based on the provided query parameters.\nIt dynamically builds SQL queries to select and count countries, and supports field configurations for joining additional tables.\nExample :```typescript\nconst paginationQuery: PaginationQueryDto = {\n  page: 1,\n  limit: 10,\n  sortBy: 'name',\n  filter: { continent: 'Asia' },\n};\nconst countries = await countriesService.findAll(paginationQuery);Example :See PaginationQueryDto\nSee PaginationResponseDto\nSee Country\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                paginationQuery\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe pagination query parameters.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                A promise that resolves to a paginated response of countries.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\nimport { PaginationService } from '@services/pagination.service';\nimport { UtilsService } from '@services/util.service';\nimport { PaginationResponseDto } from '@utils/dto/pagination-response.dto';\nimport { PaginationQueryDto } from '@utils/dto/pagination.dto';\nimport { IPaginationFieldConfig } from '@utils/types/pagination-options';\n\nimport { Country } from './dto/country';\n\n/**\n * @fileoverview\n * This file defines the `CountriesService`, which handles the business logic for managing countries.\n *\n * @module\n * @description\n * The `CountriesService` is responsible for providing country-related services, including pagination and dynamic queries.\n */\n@Injectable()\nexport class CountriesService {\n    constructor(\n        private readonly paginationService: PaginationService,\n        private readonly utilsService: UtilsService\n    ) {}\n\n    /**\n     * Find all countries with pagination.\n     *\n     * @param {PaginationQueryDto} paginationQuery - The pagination query parameters.\n     * @returns {Promise>} A promise that resolves to a paginated response of countries.\n     *\n     * @description\n     * This method allows the client to retrieve a paginated list of countries based on the provided query parameters.\n     * It dynamically builds SQL queries to select and count countries, and supports field configurations for joining additional tables.\n     *\n     * @example\n     * ```typescript\n     * const paginationQuery: PaginationQueryDto = {\n     *   page: 1,\n     *   limit: 10,\n     *   sortBy: 'name',\n     *   filter: { continent: 'Asia' },\n     * };\n     * const countries = await countriesService.findAll(paginationQuery);\n     * ```\n     *\n     * @see PaginationQueryDto\n     * @see PaginationResponseDto\n     * @see Country\n     */\n\n    async findAll(paginationQuery: PaginationQueryDto): Promise> {\n        const baseQuery = [\n            'ptbl.id_country',\n            'ptbl.name',\n            'ptbl.iso',\n            'ptbl.nice_name',\n            'ptbl.iso3',\n            'ptbl.num_code',\n            'ptbl.dial_code',\n            'ptbl.continent',\n            'ptbl.capital',\n        ];\n        const fromQuery = ` FROM countries ptbl`;\n\n        const fieldConfigs: Record = {\n            symbol: {\n                joinTable: (alias: string) =>\n                    `JOIN currencies ${alias} ON ${alias}.id_currency = ptlb.id_currency`,\n                alias: () => `c${0}`, // Reusing the same alias logic for symbol and code\n                selectFields: (alias: string) => [\n                    `${alias}.symbol`,\n                    `${alias}.name AS currency_name`,\n                ],\n            },\n            offset: {\n                joinTable: (alias: string) =>\n                    `JOIN timezone ${alias} ON ${alias}.id_timezone = ptlb.id_timezone`,\n                alias: () => `tz${0}`,\n                selectFields: (alias: string) => [\n                    `${alias}.value`,\n                    `${alias}.offset`,\n                    `${alias}.offset_in_minutes`,\n                    `${alias}.text`,\n                ],\n            },\n            abbr: {\n                joinTable: (alias: string) =>\n                    `JOIN timezone ${alias} ON ${alias}.id_timezone = ptlb.id_timezone`,\n                alias: () => `tz${0}`,\n                selectFields: (alias: string) => [`${alias}.abbr`],\n            },\n            code: {\n                joinTable: (alias: string) =>\n                    `JOIN currencies ${alias} ON ${alias}.id_currency = ptlb.id_currency`, // Reusing join logic for code\n                alias: () => `c${0}`, // Reusing the same alias logic for symbol and code\n                selectFields: (alias: string) => [`${alias}.code`],\n            },\n            // Add more field configurations as needed\n        };\n\n        const { selectQuery, countQuery } = this.utilsService.buildDynamicQuery(\n            paginationQuery,\n            fieldConfigs,\n            baseQuery,\n            fromQuery\n        );\n\n        // const select = selectFields.join(', ');\n        return this.paginationService.paginate(selectQuery, countQuery, paginationQuery);\n\n        // const { joinTables, selectFields, filterQuery, sortByQuery } =\n        //     this.utilsService.buildDynamicQuery(paginationQuery, fieldConfigs);\n\n        // console.log(\n        //     'HELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL selectFields',\n        //     selectFields\n        // );\n\n        // // const selectQuery = `SELECT ${baseQuery.join(', ')} ${selectFields.join(', ')} ${fromQuery} ${joinTables.join(' ')} ${filterQuery} ${sortByQuery}`;\n        // const selectQuery = `SELECT ${baseQuery.join(', ')} ${selectFields} ${fromQuery} ${joinTables.join(' ')} ${filterQuery} ${sortByQuery}`;\n        // const countQuery = `SELECT count(*) ${fromQuery} ${joinTables.join(' ')} ${filterQuery}`;\n\n        // // const select = selectFields.join(', ');\n        // return this.paginationService.paginate(selectQuery, countQuery, paginationQuery);\n    }\n}\n\n// start\n// import { Injectable } from '@nestjs/common';\n\n// import { PaginationService } from '@services/pagination.service';\n// import { UtilsService } from '@services/util.service';\n// import { PaginationResponseDto } from '@utils/dto/pagination-response.dto';\n// import { PaginationQueryDto } from '@utils/dto/pagination.dto';\n// import { IFieldConfig } from '@utils/types/pagination-options';\n// // import { PaginationMetaDto } from '@utils/dto/pagination.meta.dto';\n\n// import { Country } from './dto/country';\n\n// @Injectable()\n// export class CountriesService {\n//     constructor(\n//         private readonly paginationService: PaginationService,\n//         private readonly utilsService: UtilsService\n//     ) {}\n\n//     async findAll(\n//         paginationQuery: PaginationQueryDto\n//     ): Promise> {\n//         const baseQuery = [\n//             'ptlb.id_country',\n//             'ptlb.name',\n//             'ptlb.iso',\n//             'ptlb.nice_name',\n//             'ptlb.iso3',\n//             'ptlb.num_code',\n//             'ptlb.dial_code',\n//             'ptlb.continent',\n//             'ptlb.capital',\n//         ];\n//         const fromQuery = ` FROM countries ptlb`;\n\n//         // const joinTables = [];\n//         // const whereClauses = [];\n\n//         //     const baseQuery = `\n//         //   SELECT\n//         //     s.id,\n//         //     s.name,\n//         //     s.population,\n//         //     s.area\n//         // `;\n\n//         //     const fromQuery = `\n//         //   FROM\n//         //     states s\n//         // `;\n//         //  let sortByQuery = '';\n\n//         // const fieldConfigs: Record = {\n//         //     symbol: {\n//         //         joinTable: (index: number) =>\n//         //             `JOIN currencies c${0} ON c${0}.id_currency = ptlb.id_currency`,\n//         //         alias: (index: number) => `c${0}`, // Reusing the same alias logic for symbol and code\n//         //         selectFields: (alias: string) => [\n//         //             `${alias}.symbol`,\n//         //             `${alias}.name AS currency_name`,\n//         //         ],\n//         //     },\n//         //     offset: {\n//         //         joinTable: (index: number) =>\n//         //             `JOIN timezone tz${index} ON tz${index}.id_timezone = ptlb.id_timezone`,\n//         //         alias: (index: number) => `tz${index}`,\n//         //         selectFields: (alias: string) => [\n//         //             `${alias}.value`,\n//         //             `${alias}.offset`,\n//         //             `${alias}.offset_in_minutes`,\n//         //             `${alias}.text`,\n//         //         ],\n//         //     },\n//         //     code: {\n//         //         joinTable: (index: number) =>\n//         //             `JOIN currencies c${0} ON c${0}.id_currency = ptlb.id_currency`, // Reusing join logic for code\n//         //         alias: (index: number) => `c${0}`, // Reusing the same alias logic for symbol and code\n//         //         selectFields: (alias: string) => [`${alias}.code`],\n//         //     },\n//         //     // Add more field configurations as needed\n//         // };\n\n//         const fieldConfigs: Record = {\n//             symbol: {\n//                 joinTable: (alias: string) =>\n//                     `JOIN currencies ${alias} ON ${alias}.id_currency = ptlb.id_currency`,\n//                 alias: () => `c${0}`, // Reusing the same alias logic for symbol and code\n//                 selectFields: (alias: string) => [\n//                     `${alias}.symbol`,\n//                     `${alias}.name AS currency_name`,\n//                 ],\n//             },\n//             offset: {\n//                 joinTable: (alias: string) =>\n//                     `JOIN timezone ${alias} ON ${alias}.id_timezone = ptlb.id_timezone`,\n//                 alias: () => `tz${0}`,\n//                 selectFields: (alias: string) => [\n//                     `${alias}.value`,\n//                     `${alias}.offset`,\n//                     `${alias}.offset_in_minutes`,\n//                     `${alias}.text`,\n//                 ],\n//             },\n//             abbr: {\n//                 joinTable: (alias: string) =>\n//                     `JOIN timezone ${alias} ON ${alias}.id_timezone = ptlb.id_timezone`,\n//                 alias: () => `tz${0}`,\n//                 selectFields: (alias: string) => [`${alias}.abbr`],\n//             },\n//             code: {\n//                 joinTable: (alias: string) =>\n//                     `JOIN currencies ${alias} ON ${alias}.id_currency = ptlb.id_currency`, // Reusing join logic for code\n//                 alias: () => `c${0}`, // Reusing the same alias logic for symbol and code\n//                 selectFields: (alias: string) => [`${alias}.code`],\n//             },\n//             // Add more field configurations as needed\n//         };\n\n//         // const fieldConfigs: Record = {\n//         //     symbol: {\n//         //         joinTable: (index: number) =>\n//         //             `JOIN currencies c${index} ON c${index}.id_currency = s.currency_id`,\n//         //         alias: (index: number) => `c${index}`,\n//         //         selectFields: (alias: string) => [\n//         //             `${alias}.symbol`,\n//         //             `${alias}.name AS currency_name`,\n//         //         ],\n//         //     },\n//         //     offset: {\n//         //         joinTable: (index: number) =>\n//         //             `JOIN timezone tz${index} ON tz${index}.id_timezone = s.timezone_id`,\n//         //         alias: (index: number) => `tz${index}`,\n//         //         selectFields: (alias: string) => [\n//         //             `${alias}.value`,\n//         //             `${alias}.offset`,\n//         //             `${alias}.offset_in_minutes`,\n//         //             `${alias}.text`,\n//         //         ],\n//         //     },\n//         //     code: {\n//         //         joinTable: (index: number) =>\n//         //             `JOIN currencies c${index} ON c${index}.id_currency = s.currency_id`,\n//         //         alias: (index: number) => `c${index}`,\n//         //         selectFields: (alias: string) => [`${alias}.code`],\n//         //     },\n//         //     // Add more field configurations as needed\n//         // };\n\n//         // const { joinTables, selectFields, filterQuery, filterValues, sortByQuery } =\n//         //     this.buildDynamicQuery(paginationQuery.filters, paginationQuery.sort, fieldConfigs);\n\n//         // const finalSelectQuery = `SELECT ${baseQuery.join(', ')}, ${selectFields.join(', ')} ${fromQuery} ${joinTables.join(\n//         //     ' '\n//         // )} ${filterQuery} ${sortByQuery}`;\n\n//         // const { joinTables, selectFields, filterQuery, sortByQuery } = this.buildDynamicQuery(\n//         //     paginationQuery,\n//         //     // paginationQuery.filters,\n//         //     // paginationQuery.sort,\n//         //     fieldConfigs\n//         // );\n\n//         const { joinTables, selectFields, filterQuery, sortByQuery } =\n//             this.utilsService.buildDynamicQuery(\n//                 paginationQuery,\n//                 // paginationQuery.filters,\n//                 // paginationQuery.sort,\n//                 fieldConfigs\n//             );\n\n//         const finalSelectQuery = `SELECT ${baseQuery.join(', ')}, ${selectFields.join(', ')} ${fromQuery} ${joinTables.join(\n//             ' '\n//         )} ${filterQuery} ${sortByQuery}`;\n\n//         console.log('BENCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC', finalSelectQuery);\n\n//         // let filterQuery = '';\n//         // if (paginationQuery.filters && paginationQuery.filters.length > 0) {\n//         //     const filterConditions = paginationQuery.filters\n//         //         .map((filter, index) => {\n//         //             const field = filter.field.toLowerCase();\n//         //             let alias = ``;\n//         //             if (field === 'symbol') {\n//         //                 joinTables.push(\n//         //                     ` JOIN currencies c${index} ON c.id_currency = c${index}.id_currency`\n//         //                 );\n//         //                 selectFields.push(`c${index}.symbol`, `c${index}.name AS currency_name`);\n//         //                 alias = `c${index}`;\n//         //             } else if (field === 'offset') {\n//         //                 joinTables.push(\n//         //                     ` JOIN timezone tz${index} ON c.id_timezone = tz${index}.id_timezone`\n//         //                 );\n//         //                 selectFields.push(\n//         //                     `tz${index}.value`,\n//         //                     `tz${index}.offset`,\n//         //                     `tz${index}.offset_in_minutes`,\n//         //                     `tz${index}.text`\n//         //                 );\n//         //                 alias = `tz${index}`;\n//         //             } else {\n//         //                 alias = `c${index}`;\n//         //             }\n//         //             const operator = filter.operator.toUpperCase();\n//         //             if (operator === 'IN') {\n//         //                 const values = filter.value\n//         //                     .split(',')\n//         //                     .map((val) => `'${val.trim()}'`)\n//         //                     .join(', ');\n//         //                 return ` ${alias}.${filter.field} IN (${values})`;\n//         //             }\n//         //             return ` ${alias}.${filter.field} ${filter.operator} '${filter.value}'`;\n//         //         })\n//         //         .join(' AND ');\n//         //     filterQuery = `WHERE ${filterConditions}`;\n//         // }\n\n//         // console.log('____________________________________', joinTables);\n\n//         // Add sort by clauses based on filters\n//         // if (paginationQuery.sort) {\n//         //     sortByQuery = ` order by `;\n//         //     sortByQuery += paginationQuery.sort\n//         //         .map((filter) => {\n//         //             return `${filter.field} ${filter.direction}`;\n//         //         })\n//         //         .join(', ');\n//         // }\n\n//         // const select = selectFields.join(', ');\n//         return this.paginationService.paginate(\n//             selectFields,\n//             `${fromQuery}`,\n//             joinTables,\n//             `${filterQuery}`,\n//             sortByQuery,\n//             paginationQuery\n//         );\n//     }\n\n//     private buildDynamicQuery(\n//         paginationQuery: any,\n//         // filters: any | undefined,\n//         // sort: any | undefined,\n//         fieldConfigs: Record\n//     ) {\n//         let filterQuery = '';\n//         let sortByQuery = '';\n//         const filterValues: any[] = [];\n//         const joinTables: string[] = [];\n//         const selectFields: string[] = [];\n\n//         const filters = paginationQuery.filters;\n//         const sort = paginationQuery.sort;\n\n//         const mySet = new Set();\n\n//         if (filters && filters.length > 0) {\n//             const filterConditions = filters\n//                 .map(\n//                     (filter: { field: string; operator: string; value: string }, index: number) => {\n//                         const field = filter.field.toLowerCase();\n//                         let alias = `ptlb`; // default alias for the main table\n//                         if (fieldConfigs[field]) {\n//                             const config = fieldConfigs[field];\n//                             alias = config.alias(index);\n\n//                             if (!mySet.has(alias)) {\n//                                 mySet.add(alias);\n//                                 // joinTables.push(config.joinTable(index));\n//                                 joinTables.push(config.joinTable(alias));\n//                             }\n//                             selectFields.push(...config.selectFields(alias));\n//                         }\n//                         const operator = filter.operator.toUpperCase();\n//                         if (operator === 'IN') {\n//                             const values = filter.value.split(',').map((val) => `'${val.trim()}'`);\n//                             return `${alias}.${filter.field} IN (${values.join(', ')})`;\n//                         }\n//                         // Add the value to the filterValues array for parameterized query\n//                         filterValues.push(filter.value);\n//                         // return `${alias}.${filter.field} ${filter.operator} ?`;\n//                         return `${alias}.${filter.field} ${filter.operator} '${filter.value}'`;\n//                     }\n//                 )\n//                 .join(' AND ');\n\n//             filterQuery = `WHERE ${filterConditions}`;\n//         }\n\n//         if (sort && sort.length > 0) {\n//             sortByQuery = `ORDER BY `;\n//             sortByQuery += sort\n//                 .map((sortItem: { field: string; direction: any }) => {\n//                     const field = sortItem.field.toLowerCase();\n//                     let alias = `ptlb`; // default alias for the main table\n\n//                     if (fieldConfigs[field]) {\n//                         const config = fieldConfigs[field];\n//                         alias = config.alias(0); // Use index 0 since sorting doesn't require multiple aliases\n//                     }\n\n//                     return `${alias}.${sortItem.field} ${sortItem.direction}`;\n//                 })\n//                 .join(', ');\n//         }\n\n//         return { filterQuery, filterValues, joinTables, selectFields, sortByQuery };\n//     }\n\n//     // private buildDynamicQuery(\n//     //     filters: any | undefined,\n//     //     sort: any | undefined,\n//     //     fieldConfigs: Record\n//     // ) {\n//     //     let filterQuery = '';\n//     //     let sortByQuery = '';\n//     //     const filterValues: any[] = [];\n//     //     const joinTables: string[] = [];\n//     //     const selectFields: string[] = [];\n\n//     //     if (filters && filters.length > 0) {\n//     //         const filterConditions = filters\n//     //             .map(\n//     //                 (filter: { field: string; operator: string; value: string }, index: number) => {\n//     //                     const field = filter.field.toLowerCase();\n//     //                     let alias = `s`; // default alias for the main table\n\n//     //                     if (fieldConfigs[field]) {\n//     //                         const config = fieldConfigs[field];\n//     //                         alias = config.alias(index);\n//     //                         joinTables.push(config.joinTable(index));\n//     //                         selectFields.push(...config.selectFields(alias));\n//     //                     }\n\n//     //                     const operator = filter.operator.toUpperCase();\n//     //                     if (operator === 'IN') {\n//     //                         const values = filter.value.split(',').map((val) => `'${val.trim()}'`);\n//     //                         return `${alias}.${filter.field} IN (${values.join(', ')})`;\n//     //                     }\n\n//     //                     // Add the value to the filterValues array for parameterized query\n//     //                     filterValues.push(filter.value);\n//     //                     // return `${alias}.${filter.field} ${filter.operator} ?`;\n//     //                     return `${alias}.${filter.field} ${filter.operator} '${filter.value}'`;\n//     //                 }\n//     //             )\n//     //             .join(' AND ');\n\n//     //         filterQuery = `WHERE ${filterConditions}`;\n//     //     }\n\n//     //     if (sort && sort.length > 0) {\n//     //         sortByQuery = `ORDER BY `;\n//     //         sortByQuery += sort\n//     //             .map((sortItem) => {\n//     //                 const field = sortItem.field.toLowerCase();\n//     //                 let alias = `s`; // default alias for the main table\n\n//     //                 if (fieldConfigs[field]) {\n//     //                     const config = fieldConfigs[field];\n//     //                     alias = config.alias(0); // Use index 0 since sorting doesn't require multiple aliases\n//     //                 }\n\n//     //                 return `${alias}.${sortItem.field} ${sortItem.direction}`;\n//     //             })\n//     //             .join(', ');\n//     //     }\n\n//     //     return { filterQuery, filterValues, joinTables, selectFields, sortByQuery };\n//     // }\n// }\n// end\n// import { Injectable } from '@nestjs/common';\n\n// import { IPaginationOptions } from '@utils/types/pagination-options';\n\n// import { Country } from './domain/country';\n// import { FilterCountryDto, SortCountryDto } from './dto/query-country.dto';\n\n// @Injectable()\n// export class CountriesService {\n//     findManyWithPagination({\n//         filterOptions,\n//         sortOptions,\n//         paginationOptions,\n//     }: {\n//         filterOptions?: FilterCountryDto | null;\n//         sortOptions?: SortCountryDto[] | null;\n//         paginationOptions: IPaginationOptions;\n//     }): Promise {\n//         console.log('filterOptions', filterOptions);\n//         console.log('sortOptions', sortOptions);\n//         console.log('paginationOptions', paginationOptions);\n\n//         return 'hi' as any;\n//         // return this.usersRepository.findManyWithPagination({\n//         //     filterOptions,\n//         //     sortOptions,\n//         //     paginationOptions,\n//         // });\n//     }\n// }\n\n// import { Injectable } from '@nestjs/common';\n\n// import { PaginationService } from '@services/pagination.service';\n// import { PaginationResponseDto } from '@utils/dto/pagination-response.dto';\n// import { PaginationQueryDto } from '@utils/dto/pagination.dto';\n// // import { PaginationMetaDto } from '@utils/dto/pagination.meta.dto';\n\n// import { Country } from './dto/country';\n\n// @Injectable()\n// export class CountriesService {\n//     constructor(private readonly paginationService: PaginationService) {}\n\n//     async findAll(\n//         paginationQuery: PaginationQueryDto\n//     ): Promise> {\n//         const selectFields = [\n//             'c.id_country',\n//             'c.name',\n//             'c.iso',\n//             'c.nice_name',\n//             'c.iso3',\n//             'c.num_code',\n//             'c.dial_code',\n//             'c.continent',\n//             'c.capital',\n//         ];\n//         const fromQuery = ` FROM countries c`;\n\n//         const joinTables = [];\n//         // const whereClauses = [];\n//         let sortByQuery = '';\n\n//         let filterQuery = '';\n//         if (paginationQuery.filters && paginationQuery.filters.length > 0) {\n//             const filterConditions = paginationQuery.filters\n//                 .map((filter, index) => {\n//                     const field = filter.field.toLowerCase();\n//                     let alias = ``;\n//                     if (field === 'symbol') {\n//                         joinTables.push(\n//                             ` JOIN currencies c${index} ON c.id_currency = c${index}.id_currency`\n//                         );\n//                         selectFields.push(`c${index}.symbol`, `c${index}.name AS currency_name`);\n//                         alias = `c${index}`;\n//                     } else if (field === 'offset') {\n//                         joinTables.push(\n//                             ` JOIN timezone tz${index} ON c.id_timezone = tz${index}.id_timezone`\n//                         );\n//                         selectFields.push(\n//                             `tz${index}.value`,\n//                             `tz${index}.offset`,\n//                             `tz${index}.offset_in_minutes`,\n//                             `tz${index}.text`\n//                         );\n//                         alias = `tz${index}`;\n//                     } else {\n//                         alias = `c${index}`;\n//                     }\n//                     const operator = filter.operator.toUpperCase();\n//                     if (operator === 'IN') {\n//                         const values = filter.value\n//                             .split(',')\n//                             .map((val) => `'${val.trim()}'`)\n//                             .join(', ');\n//                         return ` ${alias}.${filter.field} IN (${values})`;\n//                     }\n//                     return ` ${alias}.${filter.field} ${filter.operator} '${filter.value}'`;\n//                 })\n//                 .join(' AND ');\n//             filterQuery = `WHERE ${filterConditions}`;\n//         }\n\n//         // // Add join if filter by country_name\n//         // paginationQuery.filters?.forEach((filter, index) => {\n//         //     let alias = ``;\n//         //     switch (filter.field) {\n//         //         case 'symbol':\n//         //             joinTables.push(\n//         //                 ` JOIN currencies c${index} ON c.id_currency = c${index}.id_currency`\n//         //             );\n//         //             selectFields.push(`c${index}.symbol`, `c${index}.name AS currency_name`);\n//         //             alias = `c${index}`;\n//         //             // selectFields.push(`c${index}.name AS currency_name`);\n//         //             break;\n//         //         case 'offset':\n//         //             joinTables.push(\n//         //                 ` JOIN timezone tz${index} ON c.id_timezone = tz${index}.id_timezone`\n//         //             );\n//         //             selectFields.push(\n//         //                 `tz${index}.value`,\n//         //                 `tz${index}.offset`,\n//         //                 `tz${index}.offset_in_minutes`,\n//         //                 `tz${index}.text`\n//         //             );\n//         //             alias = `tz${index}`;\n//         //             // selectFields.push(`tz${index}.offset`);\n//         //             // selectFields.push(`tz${index}.offset_in_minutes`);\n//         //             // selectFields.push(`tz${index}.text`);\n//         //             break;\n//         //         // Add more cases as needed for other filter fields\n//         //         default:\n//         //             alias = `c`;\n//         //             // Handle other filter fields if needed\n//         //             break;\n//         //     }\n\n//         //     if (filter.operator.toUpperCase() === 'IN') {\n//         //         const values = filter.value\n//         //             .split(',')\n//         //             .map((val) => `'${val.trim()}'`)\n//         //             .join(', ');\n//         //         return ` ${alias}.${filter.field} IN (${values})`;\n//         //     } else {\n//         //         filterQuery += ` ${alias}.${filter.field} ${filter.operator} '${filter.value}'`;\n//         //     }\n//         // });\n\n//         // Add where clauses based on filters\n//         // if (paginationQuery.filters) {\n//         //     paginationQuery.filters.forEach((filter) => {\n//         //         switch (filter.operator) {\n//         //             case 'LIKE':\n//         //                 whereClauses.push(`${filter.field} LIKE '%${filter.value}%'`);\n//         //                 break;\n//         //             case '>':\n//         //                 whereClauses.push(`${filter.field} > ${filter.value}`);\n//         //                 break;\n//         //             case ' 0) {\n//         //     const filterConditions = paginationQuery.filters\n//         //         .map((filter) => {\n//         //             console.log('hi');\n//         //             if (filter.operator.toUpperCase() === 'IN') {\n//         //                 const values = filter.value\n//         //                     .split(',')\n//         //                     .map((val) => `'${val.trim()}'`)\n//         //                     .join(', ');\n//         //                 return `${filter.field} IN (${values})`;\n//         //             }\n//         //             return `${filter.field} ${filter.operator} '${filter.value}'`;\n//         //         })\n//         //         .join(' AND ');\n//         //     filterQuery = `WHERE ${filterConditions}`;\n//         // }\n//         // let filterQuery = '';\n//         // if (paginationQuery.filters && paginationQuery.filters.length > 0) {\n//         //     const filterConditions = paginationQuery.filters\n//         //         .map((filter) => {\n//         //             const operator = filter.operator.toUpperCase();\n//         //             if (operator === 'IN') {\n//         //                 const values = filter.value\n//         //                     .split(',')\n//         //                     .map((val) => `'${val.trim()}'`)\n//         //                     .join(', ');\n//         //                 return `${filter.field} IN (${values})`;\n//         //             }\n//         //             return `${filter.field} ${filter.operator} '${filter.value}'`;\n//         //         })\n//         //         .join(' AND ');\n//         //     filterQuery = `WHERE ${filterConditions}`;\n//         // }\n\n//         console.log('____________________________________', joinTables);\n\n//         // Add sort by clauses based on filters\n//         if (paginationQuery.sort) {\n//             sortByQuery = ` order by `;\n//             sortByQuery += paginationQuery.sort\n//                 .map((filter) => {\n//                     return `${filter.field} ${filter.direction}`;\n//                 })\n//                 .join(', ');\n//         }\n\n//         // const select = selectFields.join(', ');\n//         return this.paginationService.paginate(\n//             selectFields,\n//             `${fromQuery}`,\n//             joinTables,\n//             `${filterQuery}`,\n//             sortByQuery,\n//             paginationQuery\n//         );\n\n//         // const data = [\n//         //     { id_country: '1', name: 'Country 1' },\n//         //     { id_country: '2', name: 'Country 2' },\n//         // ];\n\n//         // const meta = new PaginationMetaDto({\n//         //     paginationQueryDto: paginationQuery,\n//         //     totalItems: 77,\n//         // });\n\n//         // return { data, meta, hasNextPage: true };\n//         // const baseQuery = `SELECT `;\n//         // const selectFields = ['s.id', 's.name', 's.population', 's.area'];\n//         // const fromQuery = ` FROM states s`;\n//         // const countQuery = `SELECT COUNT(*)`;\n\n//         // const joinTables = [];\n//         // // if (paginationQuery.filters?.some((filter) => filter.field === 'country_name')) {\n//         // //     joinTables.push('JOIN countries c ON s.country_id = c.id');\n//         // //     selectFields.push('c.name as country_name');\n//         // // }\n//         // // Iterate over each filter in paginationQuery.filters\n//         // // Iterate over each filter in paginationQuery.filters\n//         // paginationQuery.filters?.forEach((filter, index) => {\n//         //     switch (filter.field) {\n//         //         case 'country_name':\n//         //             joinTables.push(`JOIN countries c${index} ON s.country_id = c${index}.id`);\n//         //             selectFields.push(`c${index}.name AS country_name`);\n//         //             break;\n//         //         case 'name':\n//         //             joinTables.push(`JOIN state c${index} ON s.state_id = c${index}.id`);\n//         //             selectFields.push(`c${index}.name AS state_name`);\n//         //             break;\n//         //         // Add more cases as needed for other filter fields\n//         //         default:\n//         //             // Handle other filter fields if needed\n//         //             break;\n//         //     }\n//         // });\n\n//         // // const select = selectFields.join(', ');\n//         // return this.paginationService.paginate(\n//         //     `${baseQuery} ${selectFields} ${fromQuery}`,\n//         //     `${countQuery} ${fromQuery}`,\n//         //     paginationQuery,\n//         //     joinTables\n//         // );\n//     }\n// }\n\n// // import { Injectable } from '@nestjs/common';\n\n// // import { IPaginationOptions } from '@utils/types/pagination-options';\n\n// // import { Country } from './domain/country';\n// // import { FilterCountryDto, SortCountryDto } from './dto/query-country.dto';\n\n// // @Injectable()\n// // export class CountriesService {\n// //     findManyWithPagination({\n// //         filterOptions,\n// //         sortOptions,\n// //         paginationOptions,\n// //     }: {\n// //         filterOptions?: FilterCountryDto | null;\n// //         sortOptions?: SortCountryDto[] | null;\n// //         paginationOptions: IPaginationOptions;\n// //     }): Promise {\n// //         console.log('filterOptions', filterOptions);\n// //         console.log('sortOptions', sortOptions);\n// //         console.log('paginationOptions', paginationOptions);\n\n// //         return 'hi' as any;\n// //         // return this.usersRepository.findManyWithPagination({\n// //         //     filterOptions,\n// //         //     sortOptions,\n// //         //     paginationOptions,\n// //         // });\n// //     }\n// // }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Country.html":{"url":"classes/Country.html","title":"class - Country","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Country\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/countries/dto/country.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the Country class, which represents the data structure of a country\nentity used in the application. The Country class is used to describe various details\nabout a country, including its identification, name, ISO codes, and other related attributes.\nThe Country class serves as a Data Transfer Object (DTO) for representing country data.\nIt includes properties such as the country's ID, name, ISO codes, dial code, capital city,\ncontinent, currency details, and timezone information. Each property is annotated with @ApiResponseProperty\nto define its type and provide example values for API documentation purposes.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                abbr\n                            \n                            \n                                    \n                                capital\n                            \n                            \n                                    \n                                continent\n                            \n                            \n                                    \n                                currency_name\n                            \n                            \n                                    \n                                dial_code\n                            \n                            \n                                    \n                                id_country\n                            \n                            \n                                    \n                                iso\n                            \n                            \n                                    \n                                iso3\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                offset\n                            \n                            \n                                    \n                                offset_in_minutes\n                            \n                            \n                                    \n                                symbol\n                            \n                            \n                                    \n                                text\n                            \n                            \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        abbr\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'IST'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:185\n                        \n                    \n\n            \n                \n                    The abbreviation for the timezone.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        capital\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'New Delhi'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:94\n                        \n                    \n\n            \n                \n                    The capital city of the country.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        continent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'Asia'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:107\n                        \n                    \n\n            \n                \n                    The continent where the country is located.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        currency_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'Indian Rupee, US Dollar etc'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:133\n                        \n                    \n\n            \n                \n                    The name of the currency used in the country.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        dial_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: '91'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:81\n                        \n                    \n\n            \n                \n                    The international dialing code for the country.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id_country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: '123e4567-e89b-12d3-a456-426614174000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:29\n                        \n                    \n\n            \n                \n                    The unique identifier for the country.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        iso\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'IN'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:55\n                        \n                    \n\n            \n                \n                    The ISO 3166-1 alpha-2 code of the country.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        iso3\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'IND'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:68\n                        \n                    \n\n            \n                \n                    The ISO 3166-1 alpha-3 code of the country.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'India'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:42\n                        \n                    \n\n            \n                \n                    The name of the country.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        offset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: '+5:30'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:159\n                        \n                    \n\n            \n                \n                    The timezone offset from UTC.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        offset_in_minutes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: '270'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:172\n                        \n                    \n\n            \n                \n                    The timezone offset in minutes from UTC.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        symbol\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'currency symbol ₹, $ etc'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:120\n                        \n                    \n\n            \n                \n                    The symbol used for the country's currency.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'Indian Time'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:198\n                        \n                    \n\n            \n                \n                    The descriptive name of the timezone.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'Asia/Mumbai'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:146\n                        \n                    \n\n            \n                \n                    The timezone value of the country.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiResponseProperty } from '@nestjs/swagger';\n\n/**\n * @fileoverview\n * This file defines the `Country` class, which represents the data structure of a country\n * entity used in the application. The `Country` class is used to describe various details\n * about a country, including its identification, name, ISO codes, and other related attributes.\n *\n * @module\n * @description\n * The `Country` class serves as a Data Transfer Object (DTO) for representing country data.\n * It includes properties such as the country's ID, name, ISO codes, dial code, capital city,\n * continent, currency details, and timezone information. Each property is annotated with `@ApiResponseProperty`\n * to define its type and provide example values for API documentation purposes.\n */\n\nexport class Country {\n    /**\n     * The unique identifier for the country.\n     *\n     * @type {string}\n     * @example '123e4567-e89b-12d3-a456-426614174000'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: '123e4567-e89b-12d3-a456-426614174000',\n    })\n    id_country: string;\n\n    /**\n     * The name of the country.\n     *\n     * @type {string}\n     * @example 'India'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: 'India',\n    })\n    name: string;\n\n    /**\n     * The ISO 3166-1 alpha-2 code of the country.\n     *\n     * @type {string}\n     * @example 'IN'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: 'IN',\n    })\n    iso: string;\n\n    /**\n     * The ISO 3166-1 alpha-3 code of the country.\n     *\n     * @type {string}\n     * @example 'IND'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: 'IND',\n    })\n    iso3: string;\n\n    /**\n     * The international dialing code for the country.\n     *\n     * @type {string}\n     * @example '91'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: '91',\n    })\n    dial_code: string;\n\n    /**\n     * The capital city of the country.\n     *\n     * @type {string}\n     * @example 'New Delhi'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: 'New Delhi',\n    })\n    capital: string;\n\n    /**\n     * The continent where the country is located.\n     *\n     * @type {string}\n     * @example 'Asia'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: 'Asia',\n    })\n    continent: string;\n\n    /**\n     * The symbol used for the country's currency.\n     *\n     * @type {string}\n     * @example '₹'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: 'currency symbol ₹, $ etc',\n    })\n    symbol: string;\n\n    /**\n     * The name of the currency used in the country.\n     *\n     * @type {string}\n     * @example 'Indian Rupee'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: 'Indian Rupee, US Dollar etc',\n    })\n    currency_name: string;\n\n    /**\n     * The timezone value of the country.\n     *\n     * @type {string}\n     * @example 'Asia/Mumbai'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: 'Asia/Mumbai',\n    })\n    value: string;\n\n    /**\n     * The timezone offset from UTC.\n     *\n     * @type {string}\n     * @example '+5:30'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: '+5:30',\n    })\n    offset: string;\n\n    /**\n     * The timezone offset in minutes from UTC.\n     *\n     * @type {number}\n     * @example 330\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: '270',\n    })\n    offset_in_minutes: number;\n\n    /**\n     * The abbreviation for the timezone.\n     *\n     * @type {string}\n     * @example 'IST'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: 'IST',\n    })\n    abbr: string;\n\n    /**\n     * The descriptive name of the timezone.\n     *\n     * @type {string}\n     * @example 'Indian Time'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: 'Indian Time',\n    })\n    text: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateDto.html":{"url":"classes/CreateDto.html","title":"class - CreateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/currencies/dto/create.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the CreateDto class, which represents the data transfer object (DTO)\nused for creating a new currency record. It includes validation rules and transformation logic\nfor the properties of the currency.\nThe CreateDto class ensures that the data provided for creating a currency adheres to\nspecified validation rules and formats. It uses decorators from class-validator for validation\nand class-transformer for transforming input data.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                code\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                decimal_digits\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name_plural\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                rounding\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                symbol\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                symbol_native\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Readonly\n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Transform(upperCaseTransformer)@IsDefined()@IsNotEmpty()@IsString()@MaxLength(3)@ApiProperty({type: String, description: 'Currency Code', example: 'INR', maxLength: 3})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/create.dto.ts:38\n                        \n                    \n\n            \n                \n                    Currency code, which must be uppercase and 3 characters long.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Readonly\n                        decimal_digits\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@Type(undefined)@IsNumber()@Min(0)@ApiProperty({type: Number, description: 'Decimal digits', example: '2'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/create.dto.ts:122\n                        \n                    \n\n            \n                \n                    Number of decimal digits used for the currency.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@MaxLength(80)@ApiProperty({type: String, description: 'name of currency', example: 'Indian Rupee', maxLength: 80})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/create.dto.ts:55\n                        \n                    \n\n            \n                \n                    Name of the currency.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name_plural\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@MaxLength(80)@ApiProperty({type: String, description: 'plural name of currency', example: 'Indian rupees', maxLength: 80})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/create.dto.ts:72\n                        \n                    \n\n            \n                \n                    Plural name of the currency.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Readonly\n                        rounding\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@Type(undefined)@IsNumber()@Min(0)@ApiProperty({type: Number, description: 'Rounding', example: '0'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/create.dto.ts:138\n                        \n                    \n\n            \n                \n                    Rounding precision used for the currency.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        symbol\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@MaxLength(6)@ApiProperty({type: String, description: 'Symbol of currency', example: '₹', maxLength: 6})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/create.dto.ts:89\n                        \n                    \n\n            \n                \n                    Symbol of the currency, which can be up to 6 characters long.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        symbol_native\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@MaxLength(10)@ApiProperty({type: String, description: 'native symbol of currency', example: '₹', maxLength: 10})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/create.dto.ts:106\n                        \n                    \n\n            \n                \n                    Native symbol of the currency, which can be up to 10 characters long.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nimport { Transform, Type } from 'class-transformer';\nimport { IsDefined, IsNotEmpty, IsNumber, IsString, Min, MaxLength } from 'class-validator';\n\nimport { upperCaseTransformer } from '@utils/transformers/upper-case.transformer';\n\n/**\n * @fileoverview\n * This file defines the `CreateDto` class, which represents the data transfer object (DTO)\n * used for creating a new currency record. It includes validation rules and transformation logic\n * for the properties of the currency.\n *\n * @module\n * @description\n * The `CreateDto` class ensures that the data provided for creating a currency adheres to\n * specified validation rules and formats. It uses decorators from `class-validator` for validation\n * and `class-transformer` for transforming input data.\n */\n\nexport class CreateDto {\n    /**\n     * Currency code, which must be uppercase and 3 characters long.\n     * @example 'INR'\n     */\n\n    @Transform(upperCaseTransformer)\n    @IsDefined()\n    @IsNotEmpty()\n    @IsString()\n    @MaxLength(3)\n    @ApiProperty({\n        type: String,\n        description: 'Currency Code',\n        example: 'INR',\n        maxLength: 3,\n    })\n    readonly code: string;\n\n    /**\n     * Name of the currency.\n     * @example 'Indian Rupee'\n     */\n\n    @IsDefined()\n    @IsNotEmpty()\n    @IsString()\n    @MaxLength(80)\n    @ApiProperty({\n        type: String,\n        description: 'name of currency',\n        example: 'Indian Rupee',\n        maxLength: 80,\n    })\n    name: string;\n\n    /**\n     * Plural name of the currency.\n     * @example 'Indian rupees'\n     */\n\n    @IsDefined()\n    @IsNotEmpty()\n    @IsString()\n    @MaxLength(80)\n    @ApiProperty({\n        type: String,\n        description: 'plural name of currency',\n        example: 'Indian rupees',\n        maxLength: 80,\n    })\n    name_plural: string;\n\n    /**\n     * Symbol of the currency, which can be up to 6 characters long.\n     * @example '₹'\n     */\n\n    @IsDefined()\n    @IsNotEmpty()\n    @IsString()\n    @MaxLength(6)\n    @ApiProperty({\n        type: String,\n        description: 'Symbol of currency',\n        example: '₹',\n        maxLength: 6,\n    })\n    symbol: string;\n\n    /**\n     * Native symbol of the currency, which can be up to 10 characters long.\n     * @example '₹'\n     */\n\n    @IsDefined()\n    @IsNotEmpty()\n    @IsString()\n    @MaxLength(10)\n    @ApiProperty({\n        type: String,\n        description: 'native symbol of currency',\n        example: '₹',\n        maxLength: 10,\n    })\n    symbol_native: string;\n\n    /**\n     * Number of decimal digits used for the currency.\n     * @example 2\n     */\n\n    @IsDefined()\n    @Type(() => Number)\n    @IsNumber()\n    @Min(0)\n    @ApiProperty({\n        type: Number,\n        description: 'Decimal digits',\n        example: '2',\n    })\n    readonly decimal_digits: number;\n\n    /**\n     * Rounding precision used for the currency.\n     * @example 0\n     */\n\n    @IsDefined()\n    @Type(() => Number)\n    @IsNumber()\n    @Min(0)\n    @ApiProperty({\n        type: Number,\n        description: 'Rounding',\n        example: '0',\n    })\n    readonly rounding: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CurrenciesController.html":{"url":"controllers/CurrenciesController.html","title":"controller - CurrenciesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CurrenciesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/currencies/currencies.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                This file defines the CurrenciesController, which handles HTTP requests related to currencies.\nIt provides endpoints to create, update, retrieve, and delete currencies.\nThe CurrenciesController is responsible for exposing endpoints that interact with the CurrenciesService.\nIt uses various HTTP methods to manage currency data and handles responses with appropriate HTTP status codes.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createDto: CreateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(undefined)@HttpCode(HttpStatus.OK)@ApiCreatedResponse({type: Currency, description: 'Create currency'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/currencies/currencies.controller.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createDto\n                                            \n                                                            CreateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data required to create a new currency.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The created currency object.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(undefined)@HttpCode(HttpStatus.OK)@ApiParam({name: 'id_currency', type: String})@ApiOkResponse({status: undefined, description: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/currencies/currencies.controller.ts:113\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the currency to be deleted.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                An object indicating the deletion result.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(query: PaginationQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(undefined)@HttpCode(HttpStatus.OK)@ApiOkResponse({type: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/currencies/currencies.controller.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe pagination and filtering parameters.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                A paginated list of currencies.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateDto: UpdateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(undefined)@HttpCode(HttpStatus.OK)@ApiParam({name: 'id_currency', type: String})@ApiOkResponse({type: Currency, description: 'Update Currency'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/currencies/currencies.controller.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the currency to be updated.\n\n\n                                            \n                                        \n                                        \n                                                updateDto\n                                            \n                                                            UpdateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data to update the currency with.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The updated currency object or null if not found.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    HttpCode,\n    HttpStatus,\n    Param,\n    Patch,\n    Post,\n    Query,\n} from '@nestjs/common';\nimport { ApiTags, ApiOkResponse, ApiCreatedResponse, ApiParam } from '@nestjs/swagger';\n\nimport { PaginationResponse, PaginationResponseDto } from '@utils/dto/pagination-response.dto';\nimport { PaginationQueryDto } from '@utils/dto/pagination.dto';\n\nimport { CurrenciesService } from './currencies.service';\nimport { CreateDto } from './dto/create.dto';\nimport { Currency } from './dto/currency';\nimport { UpdateDto } from './dto/update.dto';\n\nconst modules = 'currencies';\n\n/**\n * @fileoverview\n * This file defines the `CurrenciesController`, which handles HTTP requests related to currencies.\n * It provides endpoints to create, update, retrieve, and delete currencies.\n *\n * @module\n * @description\n * The `CurrenciesController` is responsible for exposing endpoints that interact with the `CurrenciesService`.\n * It uses various HTTP methods to manage currency data and handles responses with appropriate HTTP status codes.\n */\n\n@ApiTags('Currencies')\n@Controller()\nexport class CurrenciesController {\n    constructor(private readonly currenciesService: CurrenciesService) {}\n\n    /**\n     * @route POST /v1/currencies\n     * @description Create a new currency.\n     * @param {CreateDto} createDto - The data required to create a new currency.\n     * @returns {Promise} The created currency object.\n     */\n\n    @Post(`v1/${modules}`)\n    @HttpCode(HttpStatus.OK)\n    @ApiCreatedResponse({\n        type: Currency,\n        description: 'Create currency',\n    })\n    async create(@Body() createDto: CreateDto): Promise {\n        const created = await this.currenciesService.create(createDto);\n        return created;\n    }\n\n    /**\n     * @route PATCH /v1/currencies/:id_currency\n     * @description Update an existing currency by its ID.\n     * @param {string} id - The ID of the currency to be updated.\n     * @param {UpdateDto} updateDto - The data to update the currency with.\n     * @returns {Promise} The updated currency object or null if not found.\n     */\n\n    @Patch(`v1/${modules}/:id_currency`)\n    @HttpCode(HttpStatus.OK)\n    @ApiParam({ name: 'id_currency', type: String })\n    @ApiOkResponse({\n        type: Currency,\n        description: 'Update Currency',\n    })\n    async update(\n        @Param('id_currency') id: string,\n        @Body() updateDto: UpdateDto\n    ): Promise {\n        console.log('UPDATE', id, updateDto);\n        const updated = await this.currenciesService.update(id, updateDto);\n        return updated;\n    }\n\n    /**\n     * @route GET /v1/currencies\n     * @description Retrieve a list of currencies with pagination.\n     * @param {PaginationQueryDto} query - The pagination and filtering parameters.\n     * @returns {Promise>} A paginated list of currencies.\n     */\n\n    @Get(`v1/${modules}`)\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ type: PaginationResponse(Currency) })\n    async findAll(@Query() query: PaginationQueryDto): Promise> {\n        const get_all = await this.currenciesService.findAll(query);\n\n        return get_all;\n    }\n\n    /**\n     * @route DELETE /v1/currencies/:id_currency\n     * @description Delete a currency by its ID.\n     * @param {string} id - The ID of the currency to be deleted.\n     * @returns {Promise} An object indicating the deletion result.\n     */\n\n    @Delete(`v1/${modules}/:id_currency`)\n    @HttpCode(HttpStatus.OK)\n    @ApiParam({ name: 'id_currency', type: String })\n    @ApiOkResponse({\n        status: HttpStatus.OK,\n        description: `${modules} has been successfully deleted.`,\n    })\n    async delete(@Param('id_currency') id: string): Promise {\n        const deleted = await this.currenciesService.delete(id);\n\n        return deleted;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CurrenciesModule.html":{"url":"modules/CurrenciesModule.html","title":"module - CurrenciesModule","body":"\n                   \n\n\n\n\n    Modules\n    CurrenciesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CurrenciesModule\n\n\n\ncluster_CurrenciesModule_providers\n\n\n\n\nCurrenciesService\n\nCurrenciesService\n\n\n\nCurrenciesModule\n\nCurrenciesModule\n\nCurrenciesModule -->\n\nCurrenciesService->CurrenciesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/currencies/currencies.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            This file defines the CurrenciesModule, which is responsible for managing currency-related functionalities.\nThe CurrenciesModule bundles together the controller and service related to currencies,\nalong with any other necessary providers.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CurrenciesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CurrenciesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { CurrenciesController } from './currencies.controller';\nimport { CurrenciesService } from './currencies.service';\nimport { Query } from './query';\n\n/**\n * @fileoverview\n * This file defines the `CurrenciesModule`, which is responsible for managing currency-related functionalities.\n *\n * @module\n * @description\n * The `CurrenciesModule` bundles together the controller and service related to currencies,\n * along with any other necessary providers.\n */\n@Module({\n    controllers: [CurrenciesController],\n    providers: [CurrenciesService, Query],\n})\nexport class CurrenciesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CurrenciesService.html":{"url":"injectables/CurrenciesService.html","title":"injectable - CurrenciesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CurrenciesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/currencies/currencies.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the CurrenciesService class, which provides methods to manage currency data.\nIt includes operations for creating, updating, retrieving, and deleting currencies.\nThe CurrenciesService class is responsible for handling business logic related to currencies.\nIt interacts with the database through the PrismaService and performs various operations using raw SQL queries.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                MODULE\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(paginationService: PaginationService, prisma: PrismaService, query: Query, utilsService: UtilsService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/currencies/currencies.service.ts:27\n                            \n                        \n\n                \n                    \n                            Creates an instance of CurrenciesService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        paginationService\n                                                  \n                                                        \n                                                                        PaginationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to handle pagination logic.\n\n\n                                                        \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to interact with the database.\n\n\n                                                        \n                                                \n                                                \n                                                        query\n                                                  \n                                                        \n                                                                        Query\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for SQL query generation.\n\n\n                                                        \n                                                \n                                                \n                                                        utilsService\n                                                  \n                                                        \n                                                                        UtilsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for utility functions, including dynamic query building.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createDto: CreateDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/currencies/currencies.service.ts:53\n                        \n                    \n\n\n            \n                \n                        Creates a new currency.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createDto\n                                            \n                                                            CreateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nData required to create a new currency.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The created currency object.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/currencies/currencies.service.ts:175\n                        \n                    \n\n\n            \n                \n                        Deletes a currency by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the currency to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                An object indicating the result of the deletion.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(paginationQuery: PaginationQueryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/currencies/currencies.service.ts:136\n                        \n                    \n\n\n            \n                \n                        Retrieves a paginated list of currencies.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                paginationQuery\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nPagination and filtering parameters.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                A paginated list of currencies.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/currencies/currencies.service.ts:201\n                        \n                    \n\n\n            \n                \n                        Retrieves a currency by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, payload: DeepPartial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/currencies/currencies.service.ts:86\n                        \n                    \n\n\n            \n                \n                        Updates an existing currency by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the currency to update.\n\n\n                                            \n                                        \n                                        \n                                                payload\n                                            \n                                                            DeepPartial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nData to update the currency with.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The updated currency object or null if not found.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        MODULE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/currencies.service.ts:27\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, HttpException, HttpStatus } from '@nestjs/common';\n\nimport { PaginationService } from '@services/pagination.service';\nimport { PrismaService } from '@services/prisma.service';\nimport { UtilsService } from '@services/util.service';\nimport { PaginationResponseDto } from '@utils/dto/pagination-response.dto';\nimport { PaginationQueryDto } from '@utils/dto/pagination.dto';\nimport { DeepPartial } from '@utils/types/deep-partial.type';\nimport { IPaginationFieldConfig } from '@utils/types/pagination-options';\n\nimport { CreateDto } from './dto/create.dto';\nimport { Currency } from './dto/currency';\nimport { Query } from './query';\n\n/**\n * @fileoverview\n * This file defines the `CurrenciesService` class, which provides methods to manage currency data.\n * It includes operations for creating, updating, retrieving, and deleting currencies.\n *\n * @module\n * @description\n * The `CurrenciesService` class is responsible for handling business logic related to currencies.\n * It interacts with the database through the `PrismaService` and performs various operations using raw SQL queries.\n */\n@Injectable()\nexport class CurrenciesService {\n    private readonly MODULE: string;\n\n    /**\n     * Creates an instance of `CurrenciesService`.\n     * @param {PaginationService} paginationService - Service to handle pagination logic.\n     * @param {PrismaService} prisma - Service to interact with the database.\n     * @param {Query} query - Service for SQL query generation.\n     * @param {UtilsService} utilsService - Service for utility functions, including dynamic query building.\n     */\n\n    constructor(\n        private readonly paginationService: PaginationService,\n        private readonly prisma: PrismaService,\n        private readonly query: Query,\n        private readonly utilsService: UtilsService\n    ) {\n        this.MODULE = 'currency';\n    }\n\n    /**\n     * Creates a new currency.\n     * @param {CreateDto} createDto - Data required to create a new currency.\n     * @returns {Promise} The created currency object.\n     * @throws {HttpException} If the currency code already exists or if an error occurs during creation.\n     */\n\n    async create(createDto: CreateDto): Promise {\n        // Check Code for prevent duplicate\n        const find = await this.prisma.executeRawQuery(this.query.findByCode(), createDto);\n\n        if (find) {\n            throw new HttpException({ message: 'CODE ALREADY EXIST' }, HttpStatus.CONFLICT);\n        }\n\n        // Create\n        const inserted = await this.prisma.executeRawQuery(this.query.insert(), createDto, [\n            'name',\n        ]);\n\n        if (inserted && inserted.insertid) {\n            const get = await this.findOne(inserted.insertid);\n\n            return get as any;\n        } else {\n            throw new HttpException(\n                { message: 'Something went wrong' },\n                HttpStatus.INTERNAL_SERVER_ERROR\n            );\n        }\n    }\n\n    /**\n     * Updates an existing currency by its ID.\n     * @param {string} id - The ID of the currency to update.\n     * @param {DeepPartial} payload - Data to update the currency with.\n     * @returns {Promise} The updated currency object or null if not found.\n     * @throws {HttpException} If nothing to update is provided, if the code already exists, or if an error occurs during the update.\n     */\n\n    async update(id: string, payload: DeepPartial): Promise {\n        if (Object.keys(payload).length === 0) {\n            throw new HttpException(\n                {\n                    message: 'Nothing to be update!',\n                },\n                HttpStatus.BAD_REQUEST\n            );\n        }\n        if (payload.code) {\n            // Check Code\n\n            const find = await this.prisma.executeRawQuery(this.query.findByCode(id), payload);\n\n            if (find) {\n                throw new HttpException(\n                    {\n                        message: 'Code already exists!',\n                    },\n                    HttpStatus.CONFLICT\n                );\n            }\n        }\n\n        payload.id = id;\n\n        // Update\n        const updated = await this.prisma.executeRawQuery(this.query.update(), payload, ['name']);\n\n        if (!updated) {\n            throw new HttpException(\n                { message: 'Something went wrong' },\n                HttpStatus.INTERNAL_SERVER_ERROR\n            );\n        }\n\n        if (updated[0]?.updatedid) {\n            const get = await this.findOne(id);\n            return get;\n        } else {\n            throw new HttpException({ message: `${this.MODULE} not found` }, HttpStatus.NOT_FOUND);\n        }\n    }\n\n    /**\n     * Retrieves a paginated list of currencies.\n     * @param {PaginationQueryDto} paginationQuery - Pagination and filtering parameters.\n     * @returns {Promise>} A paginated list of currencies.\n     */\n\n    async findAll(paginationQuery: PaginationQueryDto): Promise> {\n        const baseFields = this.query.pgBaseSelectField();\n        const fromQuery = this.query.pgBaseQuery();\n\n        const fieldConfigs: Record = null;\n\n        const { selectQuery, countQuery } = this.utilsService.buildDynamicQuery(\n            paginationQuery,\n            fieldConfigs,\n            baseFields,\n            fromQuery,\n            'ptbl.id_currency'\n        );\n\n        return this.paginationService.paginate(selectQuery, countQuery, paginationQuery);\n\n        // const { joinTables, selectFields, filterQuery, sortByQuery } =\n        //     this.utilsService.buildDynamicQuery(paginationQuery, fieldConfigs);\n\n        // const selectQuery = `SELECT ${baseFields.join(', ')} ${selectFields} ${fromQuery} ${joinTables.join(' ')} ${filterQuery} ${sortByQuery}`;\n        // const countQuery = `SELECT count(*) ${fromQuery} ${joinTables.join(' ')} ${filterQuery}`;\n\n        // const { selectQuery, countQuery } = this.utilsService.queryStatements(\n        //     baseFields,\n        //     selectFields,\n        //     fromQuery,\n        //     joinTables,\n        //     filterQuery,\n        //     sortByQuery\n        // );\n    }\n\n    /**\n     * Deletes a currency by its ID.\n     * @param {string} id - The ID of the currency to delete.\n     * @returns {Promise} An object indicating the result of the deletion.\n     * @throws {HttpException} If an error occurs during deletion or if the currency is not found.\n     */\n\n    async delete(id: string): Promise {\n        // Delete\n        const deleted = await this.prisma.executeRawQuery(this.query.delete(), id);\n\n        if (!deleted) {\n            throw new HttpException(\n                { message: 'Something went wrong' },\n                HttpStatus.INTERNAL_SERVER_ERROR\n            );\n        }\n\n        if (deleted[0]?.deletedid) {\n            return { status: 'success' };\n        } else {\n            throw new HttpException({ message: `${this.MODULE} not found` }, HttpStatus.NOT_FOUND);\n        }\n    }\n\n    /*** HELPER METHODS */\n\n    /**\n     * Retrieves a currency by its ID.\n     * @param {string} id - The ID of the currency to retrieve.\n     * @returns {Promise} The currency object.\n     */\n\n    async findOne(id: string): Promise {\n        // Get\n        const data = await this.prisma.executeRawQuery(this.query.findById(), { id });\n\n        return data;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Currency.html":{"url":"classes/Currency.html","title":"class - Currency","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Currency\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/currencies/dto/currency.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the Currency class, which represents the data structure of a currency entity.\nIt includes properties that describe the currency and uses decorators for Swagger documentation\nand data transformation.\nThe Currency class is used to define the structure of a currency object, including its code, name,\nplural name, symbol, native symbol, decimal digits, and rounding. The class also uses decorators\nto configure how the properties should be documented and transformed.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                code\n                            \n                            \n                                    \n                                decimal_digits\n                            \n                            \n                                    \n                                    Optional\n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                name_plural\n                            \n                            \n                                    \n                                rounding\n                            \n                            \n                                    \n                                symbol\n                            \n                            \n                                    \n                                symbol_native\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'Currency Code', example: 'INR'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/currency.ts:28\n                        \n                    \n\n            \n                \n                    The code of the currency (e.g., 'INR').\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        decimal_digits\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: 'Decimal digits', example: '2'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/currency.ts:88\n                        \n                    \n\n            \n                \n                    The number of decimal digits used for the currency.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude({toPlainOnly: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/currency.ts:108\n                        \n                    \n\n            \n                \n                    The unique identifier for the currency.\nThis property is excluded from the plain representation of the object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'name of currency', example: 'Indian Rupee'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/currency.ts:40\n                        \n                    \n\n            \n                \n                    The name of the currency (e.g., 'Indian Rupee').\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name_plural\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'plural name of currency', example: 'Indian rupees'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/currency.ts:52\n                        \n                    \n\n            \n                \n                    The plural name of the currency (e.g., 'Indian rupees').\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        rounding\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: 'Rounding', example: '0'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/currency.ts:100\n                        \n                    \n\n            \n                \n                    The rounding precision used for the currency.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        symbol\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'Symbol of currency', example: '₹'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/currency.ts:64\n                        \n                    \n\n            \n                \n                    The symbol  of the currency (e.g., '₹').\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        symbol_native\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'native symbol of currency', example: '₹'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/currency.ts:76\n                        \n                    \n\n            \n                \n                    The native symbol of the currency (e.g., '₹').\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nimport { Exclude } from 'class-transformer';\n\n/**\n * @fileoverview\n * This file defines the `Currency` class, which represents the data structure of a currency entity.\n * It includes properties that describe the currency and uses decorators for Swagger documentation\n * and data transformation.\n *\n * @module\n * @description\n * The `Currency` class is used to define the structure of a currency object, including its code, name,\n * plural name, symbol, native symbol, decimal digits, and rounding. The class also uses decorators\n * to configure how the properties should be documented and transformed.\n */\nexport class Currency {\n    /**\n     * The code of the currency (e.g., 'INR').\n     * @example 'INR'\n     */\n\n    @ApiProperty({\n        type: String,\n        description: 'Currency Code',\n        example: 'INR',\n    })\n    code: string;\n\n    /**\n     * The name of the currency (e.g., 'Indian Rupee').\n     * @example 'Indian Rupee'\n     */\n\n    @ApiProperty({\n        type: String,\n        description: 'name of currency',\n        example: 'Indian Rupee',\n    })\n    name: string;\n\n    /**\n     * The plural name of the currency (e.g., 'Indian rupees').\n     * @example 'Indian rupees'\n     */\n\n    @ApiProperty({\n        type: String,\n        description: 'plural name of currency',\n        example: 'Indian rupees',\n    })\n    name_plural: string;\n\n    /**\n     * The symbol  of the currency (e.g., '₹').\n     * @example '₹'\n     */\n\n    @ApiProperty({\n        type: String,\n        description: 'Symbol of currency',\n        example: '₹',\n    })\n    symbol: string;\n\n    /**\n     * The native symbol of the currency (e.g., '₹').\n     * @example '₹'\n     */\n\n    @ApiProperty({\n        type: String,\n        description: 'native symbol of currency',\n        example: '₹',\n    })\n    symbol_native: string;\n\n    /**\n     * The number of decimal digits used for the currency.\n     * @example 2\n     */\n\n    @ApiProperty({\n        type: Number,\n        description: 'Decimal digits',\n        example: '2',\n    })\n    decimal_digits: number;\n\n    /**\n     * The rounding precision used for the currency.\n     * @example 0\n     */\n\n    @ApiProperty({\n        type: Number,\n        description: 'Rounding',\n        example: '0',\n    })\n    rounding: number;\n\n    /**\n     * The unique identifier for the currency.\n     * This property is excluded from the plain representation of the object.\n     */\n\n    @Exclude({ toPlainOnly: true })\n    id?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DynamicQueryBuilder.html":{"url":"classes/DynamicQueryBuilder.html","title":"class - DynamicQueryBuilder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DynamicQueryBuilder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/providers/dynamic-query.service-to-be-remove.ts\n        \n\n\n            \n                Description\n            \n            \n                Class to build dynamic SQL queries.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                buildDeleteQuery\n                            \n                            \n                                buildInsertQuery\n                            \n                            \n                                buildSelectQuery\n                            \n                            \n                                buildUpdateQuery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        buildDeleteQuery\n                        \n                    \n                \n            \n            \n                \nbuildDeleteQuery(options: QueryOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/providers/dynamic-query.service-to-be-remove.ts:235\n                        \n                    \n\n\n            \n                \n                        Builds a DELETE SQL query.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                            QueryOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nOptions for the DELETE query.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         object\n\n                        \n                            \n                                \nAn object containing the query name, type, and the SQL syntax.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildInsertQuery\n                        \n                    \n                \n            \n            \n                \nbuildInsertQuery(options: QueryOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/providers/dynamic-query.service-to-be-remove.ts:116\n                        \n                    \n\n\n            \n                \n                        Builds an INSERT SQL query.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                            QueryOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nOptions for the INSERT query.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         object\n\n                        \n                            \n                                \nAn object containing the query name, type, and the SQL syntax.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildSelectQuery\n                        \n                    \n                \n            \n            \n                \nbuildSelectQuery(options: QueryOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/providers/dynamic-query.service-to-be-remove.ts:145\n                        \n                    \n\n\n            \n                \n                        Builds a SELECT SQL query.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                            QueryOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nOptions for the SELECT query.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         object\n\n                        \n                            \n                                \nAn object containing the query name, type, and the SQL syntax.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildUpdateQuery\n                        \n                    \n                \n            \n            \n                \nbuildUpdateQuery(options: QueryOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/providers/dynamic-query.service-to-be-remove.ts:195\n                        \n                    \n\n\n            \n                \n                        Builds an UPDATE SQL query.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                            QueryOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nOptions for the UPDATE query.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         object\n\n                        \n                            \n                                \nAn object containing the query name, type, SQL syntax, and values to be used.\n\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as _ from 'lodash';\n\n/**\n * Options for building queries.\n *\n * @export\n * @interface QueryOptions\n */\n\nexport interface QueryOptions {\n    /**\n     * Name of the query.\n     *\n     * @type {string}\n     * @memberof QueryOptions\n     */\n\n    queryName?: string;\n\n    /**\n     * Type of the query (e.g., INSERT, SELECT, UPDATE, DELETE).\n     *\n     * @type {string}\n     * @memberof QueryOptions\n     */\n\n    queryType?: string;\n\n    /**\n     * Name of the table to perform the query on.\n     *\n     * @type {string}\n     * @memberof QueryOptions\n     */\n\n    table: string;\n\n    /**\n     * List of fields to include in the query (e.g., columns for SELECT, INSERT, or UPDATE).\n     *\n     * @type {string[]}\n     * @memberof QueryOptions\n     */\n\n    fields?: string[];\n\n    /**\n     * Values to be used in the query (e.g., for INSERT or UPDATE operations).\n     *\n     * @type {Record}\n     * @memberof QueryOptions\n     */\n\n    values?: Record;\n\n    /**\n     * Conditions for the query (e.g., WHERE clauses).\n     *\n     * @type {Record}\n     * @memberof QueryOptions\n     */\n\n    conditions?: Record;\n\n    /**\n     * Optional conditions for the query.\n     *\n     * @type {Record}\n     * @memberof QueryOptions\n     */\n\n    optionalConditions?: Record;\n\n    /**\n     * Join clauses to include in the query.\n     *\n     * @type {string[]}\n     * @memberof QueryOptions\n     */\n\n    joins?: string[];\n\n    /**\n     * Fields to return from the query.\n     *\n     * @type {string[]}\n     * @memberof QueryOptions\n     */\n\n    returningFields?: string[];\n\n    /**\n     * Type of delete operation ('soft' or 'hard').\n     *\n     * @type {string}\n     * @memberof QueryOptions\n     */\n    deleteType?: string;\n}\n\n/**\n * Class to build dynamic SQL queries.\n *\n * @export\n * @class DynamicQueryBuilder\n */\nexport class DynamicQueryBuilder {\n    /**\n     * Builds an INSERT SQL query.\n     *\n     * @param {QueryOptions} options - Options for the INSERT query.\n     * @returns {object} - An object containing the query name, type, and the SQL syntax.\n     * @memberof DynamicQueryBuilder\n     */\n\n    buildInsertQuery(options: QueryOptions): object {\n        const { queryName, queryType, fields, table, values = {}, returningFields = [] } = options;\n        const conds = _.pick(values, fields);\n        const keys = _.keys(conds);\n        const vals = _.values(conds);\n\n        const returningClause = returningFields.length\n            ? `RETURNING ${returningFields.join(', ')}`\n            : '';\n\n        const sql = `INSERT INTO ${table} (${keys.join()}) VALUES ('${vals.join(\"','\")}') ${returningClause};`;\n\n        return {\n            name: queryName ? queryName : 'add',\n            type: queryType ? queryType : 'INSERT',\n            syntax: () => {\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Builds a SELECT SQL query.\n     *\n     * @param {QueryOptions} options - Options for the SELECT query.\n     * @returns {object} - An object containing the query name, type, and the SQL syntax.\n     * @memberof DynamicQueryBuilder\n     */\n\n    buildSelectQuery(options: QueryOptions): object {\n        const {\n            queryName,\n            queryType,\n            table,\n            fields = ['*'],\n            conditions = {},\n            joins = [],\n            optionalConditions = null,\n        } = options;\n\n        const whereClauses = Object.keys(conditions).map((key) => {\n            const value = conditions[key];\n            return typeof value === 'string' ? `${key} = '${value}'` : `${key} = ${value}`;\n        });\n\n        if (optionalConditions) {\n            // Adding optional conditions dynamically\n            Object.keys(optionalConditions).forEach((key) => {\n                const value = optionalConditions[key];\n                if (value) {\n                    whereClauses.push(\n                        typeof value === 'string' ? `${key} != '${value}'` : `${key} != ${value}`\n                    );\n                }\n            });\n        }\n\n        const whereClause = whereClauses.length ? `WHERE ${whereClauses.join(' AND ')}` : '';\n        const joinClause = joins.length ? joins.join(' ') : '';\n\n        const sql = `SELECT ${fields.join(', ')} FROM ${table} ${joinClause} ${whereClause}`;\n\n        return {\n            name: queryName ? queryName : 'find',\n            type: queryType ? queryType : 'SELECT_ONE',\n            syntax: () => {\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Builds an UPDATE SQL query.\n     *\n     * @param {QueryOptions} options - Options for the UPDATE query.\n     * @returns {object} - An object containing the query name, type, SQL syntax, and values to be used.\n     * @memberof DynamicQueryBuilder\n     */\n\n    buildUpdateQuery(options: QueryOptions): object {\n        const { table, values = {}, conditions = {}, returningFields = [] } = options;\n\n        const setClauses = Object.keys(values).map((key, index) => `${key} = $${index + 1}`);\n        const whereClauses = Object.keys(conditions).map(\n            (key, index) => `${key} = $${index + Object.keys(values).length + 1}`\n        );\n\n        const returningClause = returningFields.length\n            ? `RETURNING ${returningFields.join(', ')}`\n            : '';\n\n        const sql = `UPDATE ${table} SET ${setClauses.join(', ')} WHERE ${whereClauses.join(' AND ')} ${returningClause};`;\n\n        return {\n            name: 'update',\n            type: 'UPDATE',\n            sql,\n            values: [...Object.values(values), ...Object.values(conditions)],\n        };\n    }\n\n    //     return {\n    //   name: `delete`,\n    //   type: `UPDATE`,\n    //   syntax: (idArea: number) => {\n    //     const sql = `UPDATE Area SET Status = 127 WHERE Status = 1 AND idArea = ${idArea}`;\n\n    //     return sql;\n    //   },\n    // };\n\n    /**\n     * Builds a DELETE SQL query.\n     *\n     * @param {QueryOptions} options - Options for the DELETE query.\n     * @returns {object} - An object containing the query name, type, and the SQL syntax.\n     * @memberof DynamicQueryBuilder\n     */\n\n    buildDeleteQuery(options: QueryOptions): object {\n        const {\n            queryName,\n            queryType,\n            table,\n            conditions = {},\n            optionalConditions = null,\n            joins = [],\n            returningFields = [],\n            deleteType = 'soft',\n        } = options;\n\n        const whereClauses = Object.keys(conditions).map((key) => {\n            const value = conditions[key];\n            return typeof value === 'string' ? `${key} = '${value}'` : `${key} = ${value}`;\n        });\n\n        if (optionalConditions) {\n            // Adding optional conditions dynamically\n            Object.keys(optionalConditions).forEach((key) => {\n                const value = optionalConditions[key];\n                if (value) {\n                    whereClauses.push(\n                        typeof value === 'string' ? `${key} != '${value}'` : `${key} != ${value}`\n                    );\n                }\n            });\n        }\n\n        const whereClause = whereClauses.length ? `WHERE ${whereClauses.join(' AND ')}` : '';\n        const joinClause = joins.length ? joins.join(' ') : '';\n\n        // const whereClauses = Object.keys(conditions).map((key, index) => `${key} = $${index + 1}`);\n        // const whereClause = whereClauses.length ? `WHERE ${whereClauses.join(' AND ')}` : '';\n\n        const returningClause = returningFields.length\n            ? `RETURNING ${returningFields.join(', ')}`\n            : '';\n\n        let sql: string;\n        if (deleteType === 'soft') {\n            sql = `UPDATE ${table} SET status = 127 ${whereClause} ${returningClause};`;\n        } else {\n            sql = `DELETE FROM ${table} ${joinClause} ${whereClause} ${returningClause};`;\n        }\n\n        console.log('QQQQQQQQQQQQQQQQQQQQ', sql);\n\n        return {\n            name: queryName ? queryName : 'delete',\n            type: queryType ? queryType : 'DELETE',\n            syntax: () => {\n                return sql;\n            },\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EnvVarAppConfigValidator.html":{"url":"classes/EnvVarAppConfigValidator.html","title":"class - EnvVarAppConfigValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EnvVarAppConfigValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/helper/services/config.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Config service\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                API_PREFIX\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                APP_PORT\n                            \n                            \n                                    \n                                    \n                                BACKEND_DOMAIN\n                            \n                            \n                                    \n                                    \n                                FRONTEND_DOMAIN\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        API_PREFIX\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/helper/services/config.service.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        APP_PORT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@Min(0)@Max(65535)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/helper/services/config.service.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        BACKEND_DOMAIN\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUrl({require_tld: false})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/helper/services/config.service.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        FRONTEND_DOMAIN\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUrl({require_tld: false})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/helper/services/config.service.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsInt, IsOptional, IsString, ValidateIf, IsUrl, Max, Min } from 'class-validator';\nimport * as dotenv from 'dotenv';\n\n// import { FileDriver } from '../../../core/enum/file.type';\nimport { IAppConfig } from '../../../core/interfaces/app.interfaces';\nimport { IAwsConfig } from '../../../core/interfaces/aws.interfaces';\nimport { IFileConfig } from '../../../core/interfaces/file.interfaces';\nimport { IJWTConfig } from '../../../core/interfaces/jwt.interfaces';\nimport { INodeEmailerConfig } from '../../../core/interfaces/node-emailer.interfaces';\n// import { IPostgreSQLConfig } from '../../../core/interfaces/postgres.interfaces';\nimport { ISendGridConfig } from '../../../core/interfaces/sendgrid.interfaces';\nimport { ISMSConfig } from '../../../core/interfaces/sms.interfaces';\nimport { IUploadFileConfig } from '../../../core/interfaces/upload-file.interfaces';\nimport validateConfig from '../../../utils/validate-config';\n\n/**\n * Config service\n * @export\n * @class ConfigService\n */\n\nclass EnvVarAppConfigValidator {\n    @IsInt()\n    @Min(0)\n    @Max(65535)\n    @IsOptional()\n    APP_PORT: number;\n\n    @IsUrl({ require_tld: false })\n    @IsOptional()\n    FRONTEND_DOMAIN: string;\n\n    @IsUrl({ require_tld: false })\n    @IsOptional()\n    BACKEND_DOMAIN: string;\n\n    @IsString()\n    @IsOptional()\n    API_PREFIX: string;\n}\n\n// class EnvVarFileConfigValidator {\n//     // @IsEnum(FileDriver)\n//     // FILE_DRIVER: FileDriver;\n\n//     // @ValidateIf((envValues) =>\n//     //     [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n//     // )\n//     // @IsString()\n//     // AWS_ACCESS_KEY_ID: string;\n\n//     // @ValidateIf((envValues) =>\n//     //     [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n//     // )\n//     // @IsString()\n//     // AWS_SECRET_ACCESS_KEY: string;\n\n//     // @ValidateIf((envValues) =>\n//     //     [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n//     // )\n//     // @IsString()\n//     // AWS_DEFAULT_S3_BUCKET: string;\n\n//     // @ValidateIf((envValues) =>\n//     //     [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n//     // )\n//     @IsString()\n//     AWS_S3_REGION: string;\n// }\n\nexport class ConfigService {\n    constructor() {\n        const nodeEnv = this.nodeEnv;\n        // dotenv.config({\n        //   path: nodeEnv === \"production\" ? \".env\" : `.env.${nodeEnv}`,\n        // });\n        dotenv.config({\n            path:\n                nodeEnv === 'production'\n                    ? '.env.staging'\n                    : nodeEnv === 'staging'\n                      ? '.env.staging'\n                      : '.env.development',\n        });\n\n        // // Replace \\\\n with \\n to support multiline strings in AWS\n        // for (const envName of Object.keys(process.env)) {\n        //   process.env[envName] = process.env[envName].replace(/\\\\n/g, \"\\n\");\n        // }\n    }\n\n    public get(key: string): string {\n        return process.env[key] || 'undefined';\n    }\n\n    public getNumber(key: string): number {\n        return Number(this.get(key));\n    }\n\n    public getBoolean(key: string): boolean {\n        return Boolean(this.get(key));\n    }\n\n    get nodeEnv(): string {\n        return this.get('NODE_ENV') || 'development';\n    }\n\n    // get typeOrmConfig(): TypeOrmModuleOptions {\n    //   const dbConfig = {\n    //     // eslint-disable-next-line @typescript-eslint/prefer-as-const\n    //     type: \"mysql\" as \"mysql\",\n    //     host: this.get(\"DATABASE_HOST\"),\n    //     port: this.getNumber(\"DATABASE_PORT\"),\n    //     username: this.get(\"DATABASE_USER\"),\n    //     password: this.get(\"DATABASE_PASS\"),\n    //     database: this.get(\"DATABASE_SCHEMA\"),\n    //     authSource: \"admin\",\n    //     synchronize: true,\n    //     multipleStatements: true,\n    //     entities: [\"src/**/**.entity{.ts,.js}\"],\n    //     bigNumberStrings: false,\n    //   };\n    //   return dbConfig;\n    // }\n\n    // get appConfig(): IAppConfig {\n    //     validateConfig(process.env, EnvVarAppConfigValidator);\n    //     return {\n    //         name: this.get('APP_NAME') || '',\n    //         workingDirectory: process.env.PWD || process.cwd(),\n    //         frontendDomain: this.get('FRONTEND_DOMAIN') || '',\n    //         backendDomain: this.get('BACKEND_DOMAIN') || '',\n    //         port: this.getNumber('PORT'),\n    //         apiPrefix: this.get('API_PREFIX') || '',\n    //     };\n    // }\n\n    get prismaConfig(): string {\n        return `postgresql://${this.get('POSTGRES_USER')}:${this.get('POSTGRES_PASSWORD')}@${this.get('POSTGRES_HOST')}:${this.get('POSTGRES_PORT')}/${this.get('POSTGRES_NAME')}?connection_limit=${this.get('POSTGRES_CONNECTION_LIMIT')}&pool_timeout=${this.get('POSTGRES_POOL_TIMEOUT')}&schema=${this.get('POSTGRES_SCHEMA')}`;\n    }\n\n    // get awsS3Config(): IAwsConfig {\n    //     return {\n    //         AWS_S3_ACCESS_KEY_ID: this.get('AWS_S3_ACCESS_KEY_ID'),\n    //         AWS_S3_SECRET_ACCESS_KEY: this.get('AWS_S3_SECRET_ACCESS_KEY'),\n    //         AWS_S3_BUCKET_NAME: this.get('AWS_S3_BUCKET_NAME'),\n    //         AWS_S3_DEFAULT_REGION: this.get('AWS_S3_DEFAULT_REGION'),\n    //         AWS_S3_TEMP_DIRECTORY: this.get('AWS_S3_TEMP_DIRECTORY'),\n    //         AWS_S3_ENDPOINT: this.get('AWS_S3_ENDPOINT'),\n    //         AWS_S3_SERVER_HOST: this.get('AWS_S3_SERVER_HOST'),\n    //         AWS_S3_COMPANION_SECRET: this.get('AWS_S3_COMPANION_SECRET'),\n    //         TUS_STORAGE_DRIVER: this.get('TUS_STORAGE_DRIVER'),\n    //     };\n    // }\n\n    // get qrConfig() {\n    //     return {\n    //         QR_IMAGE: this.get('QR_IMAGE') || '',\n    //         QR_IMAGE_PATH: this.get('QR_IMAGE_PATH') || '',\n    //         QR_IMAGE_PATH_SALT: this.get('QR_IMAGE_PATH_SALT') || '',\n    //     };\n    // }\n\n    // get jwtConfig(): IJWTConfig {\n    //     return {\n    //         secret: this.get('JWT_SECRET_KEY'),\n    //         algorithm: this.get('JWT_ALGORITHM'),\n    //         issuer: this.get('JWT_ISSUER'),\n    //         audience: this.get('JWT_AUDIENCE'),\n    //         expiresInSeconds: this.getNumber('JWT_EXPIRES_IN_SECONDS'),\n    //         expirationTime: this.getNumber('JWT_EXPIRATION_TIME'),\n    //     };\n    // }\n\n    // get sendgridConfig(): ISendGridConfig {\n    //     return {\n    //         SENDGRID_API_KEY: this.get('SENDGRID_API_KEY'),\n    //         FROM_EMAIL: this.get('FROM_EMAIL'),\n    //         TO_EMAIL: this.get('TO_EMAIL'),\n    //         WELCOME_EMAIL: this.get('WELCOME_EMAIL'),\n    //     };\n    // }\n\n    // get nodeemailerConfig(): INodeEmailerConfig {\n    //     return {\n    //         NODE_EMAILER_HOST: this.get('NODE_EMAILER_HOST'),\n    //         NODE_EMAILER_PORT: this.getNumber('NODE_EMAILER_PORT'),\n    //         NODE_EMAILER_USER: this.get('NODE_EMAILER_USER'),\n    //         NODE_EMAILER_PASSWORD: this.get('NODE_EMAILER_PASSWORD'),\n    //         NODE_EMAILER_FROM_EMAIL: this.get('NODE_EMAILER_FROM_EMAIL'),\n    //         NODE_EMAILER_TO_EMAIL: this.get('NODE_EMAILER_TO_EMAIL'),\n    //     };\n    // }\n\n    // get smsConfig(): ISMSConfig {\n    //     return {\n    //         SMS_PROVIDER_NAME: this.get('SMS_PROVIDER_NAME'),\n    //         API_KEY: this.get('API_KEY'),\n    //         SENDER_ID: this.get('SENDER_ID'),\n    //     };\n    // }\n\n    // get uploadFileConfig(): IUploadFileConfig {\n    //     return {\n    //         TEMP_FILE_UPLOAD_URL: this.get('TEMP_FILE_UPLOAD_URL'),\n    //         FILE_UPLOAD_DESTINATION: this.get('FILE_UPLOAD_DESTINATION'),\n    //         MAX_UPLOAD_FILE_SIZE: this.getNumber('MAX_UPLOAD_FILE_SIZE'),\n    //         PROFILE_PIC_FILE_PATH: this.get('PROFILE_PIC_FILE_PATH'),\n    //         MULTIPLE_FILE_PATH: this.get('MULTIPLE_FILE_PATH'),\n    //     };\n    // }\n\n    // get fileConfig(): IFileConfig {\n    //     // validateConfig(process.env, EnvVarFileConfigValidator);\n    //     return {\n    //         driver: (this.get('FILE_DRIVER') as any | undefined) ?? undefined,\n    //         accessKeyId: this.get('AWS_ACCESS_KEY_ID'),\n    //         secretAccessKey: this.get('AWS_SECRET_ACCESS_KEY'),\n    //         awsDefaultS3Bucket: this.get('AWS_DEFAULT_S3_BUCKET'),\n    //         awsS3Region: this.get('AWS_S3_REGION'),\n    //         maxFileSize: 5242880, // 5mb\n    //     };\n    // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EnvironmentVariablesValidator.html":{"url":"classes/EnvironmentVariablesValidator.html","title":"class - EnvironmentVariablesValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EnvironmentVariablesValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/app.config.ts\n        \n\n\n            \n                Description\n            \n            \n                Class to validate environment variables using class-validator decorators.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                API_PREFIX\n                            \n                            \n                                    \n                                    \n                                APP_DESCRIPTION\n                            \n                            \n                                    \n                                    \n                                APP_NAME\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                APP_PORT\n                            \n                            \n                                    \n                                    \n                                APP_PREFIX\n                            \n                            \n                                    \n                                    \n                                APP_VERSION\n                            \n                            \n                                    \n                                    \n                                BACKEND_DOMAIN\n                            \n                            \n                                    \n                                    \n                                FRONTEND_DOMAIN\n                            \n                            \n                                    \n                                    \n                                NODE_ENV\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        API_PREFIX\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/app.config.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        APP_DESCRIPTION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/app.config.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        APP_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/app.config.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        APP_PORT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@Min(0)@Max(65535)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/app.config.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        APP_PREFIX\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/app.config.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        APP_VERSION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/app.config.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        BACKEND_DOMAIN\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUrl({require_tld: false})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/app.config.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        FRONTEND_DOMAIN\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUrl({require_tld: false})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/app.config.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        NODE_ENV\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Environment\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(Environment)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/app.config.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { registerAs } from '@nestjs/config';\n\nimport { IsEnum, IsInt, IsOptional, IsString, IsUrl, Max, Min } from 'class-validator';\n\nimport { AppConfig } from '@config/type/app-config.type';\nimport validateConfig from '@utils/validate-config';\n\nenum Environment {\n    Development = 'development',\n    Production = 'production',\n    Staging = 'staging',\n    Test = 'testing',\n}\n\n/**\n * Class to validate environment variables using class-validator decorators.\n *\n * @export\n * @class EnvironmentVariablesValidator\n */\n\nclass EnvironmentVariablesValidator {\n    @IsEnum(Environment)\n    @IsOptional()\n    NODE_ENV: Environment;\n\n    @IsString()\n    @IsOptional()\n    APP_NAME: string;\n\n    @IsString()\n    @IsOptional()\n    APP_DESCRIPTION: string;\n\n    @IsString()\n    @IsOptional()\n    APP_VERSION: string;\n\n    @IsString()\n    @IsOptional()\n    APP_PREFIX: string;\n\n    @IsInt()\n    @Min(0)\n    @Max(65535)\n    @IsOptional()\n    APP_PORT: number;\n\n    @IsUrl({ require_tld: false })\n    @IsOptional()\n    FRONTEND_DOMAIN: string;\n\n    @IsUrl({ require_tld: false })\n    @IsOptional()\n    BACKEND_DOMAIN: string;\n\n    @IsString()\n    @IsOptional()\n    API_PREFIX: string;\n}\n\n/**\n * Configuration registration and validation.\n *\n * Registers the configuration with NestJS and validates the environment variables\n * using `EnvironmentVariablesValidator`. Returns an `AppConfig` object with default values\n * for the application configuration.\n *\n * @export\n * @function\n * @returns {AppConfig} The application configuration.\n */\n\nexport default registerAs('app', (): AppConfig => {\n    validateConfig(process.env, EnvironmentVariablesValidator);\n\n    return {\n        nodeEnv: process.env.NODE_ENV || 'development',\n        name: process.env.APP_NAME || 'app',\n        description: process.env.APP_DESCRIPTION || 'description',\n        version: process.env.APP_VERSION || '1',\n        appPrefix: process.env.APP_PREFIX || 'docs',\n        workingDirectory: process.env.PWD || process.cwd(),\n        frontendDomain: process.env.FRONTEND_DOMAIN,\n        backendDomain: process.env.BACKEND_DOMAIN ?? 'http://localhost',\n        port: process.env.APP_PORT\n            ? parseInt(process.env.APP_PORT, 10)\n            : process.env.PORT\n              ? parseInt(process.env.PORT, 10)\n              : 3000,\n        apiPrefix: process.env.API_PREFIX || 'api',\n    };\n});\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EnvironmentVariablesValidator-1.html":{"url":"classes/EnvironmentVariablesValidator-1.html","title":"class - EnvironmentVariablesValidator-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EnvironmentVariablesValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/database.config.ts\n        \n\n\n            \n                Description\n            \n            \n                Class to validate environment variables using class-validator decorators.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                DATABASE_CA\n                            \n                            \n                                    \n                                    \n                                DATABASE_CERT\n                            \n                            \n                                    \n                                    \n                                DATABASE_KEY\n                            \n                            \n                                    \n                                    \n                                DATABASE_REJECT_UNAUTHORIZED\n                            \n                            \n                                    \n                                    \n                                DATABASE_SSL_ENABLED\n                            \n                            \n                                    \n                                    \n                                DATABASE_SYNCHRONIZE\n                            \n                            \n                                    \n                                    \n                                DATABASE_URL\n                            \n                            \n                                    \n                                    \n                                POSTGRES_HOST\n                            \n                            \n                                    \n                                    \n                                POSTGRES_MAX_CONNECTIONS\n                            \n                            \n                                    \n                                    \n                                POSTGRES_NAME\n                            \n                            \n                                    \n                                    \n                                POSTGRES_PASSWORD\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                POSTGRES_PORT\n                            \n                            \n                                    \n                                    \n                                POSTGRES_USER\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        DATABASE_CA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:139\n                        \n                    \n\n            \n                \n                    Path to the SSL CA certificate.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        DATABASE_CERT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:161\n                        \n                    \n\n            \n                \n                    Path to the SSL certificate file.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        DATABASE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:150\n                        \n                    \n\n            \n                \n                    Path to the SSL key file.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        DATABASE_REJECT_UNAUTHORIZED\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:128\n                        \n                    \n\n            \n                \n                    Whether to reject unauthorized SSL certificates.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        DATABASE_SSL_ENABLED\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:117\n                        \n                    \n\n            \n                \n                    Whether to enable SSL for the database connection.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        DATABASE_SYNCHRONIZE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:95\n                        \n                    \n\n            \n                \n                    Whether to synchronize the database schema on every application start.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        DATABASE_URL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateIf(envValues => envValues.DATABASE_URL)@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:26\n                        \n                    \n\n            \n                \n                    URL for the database connection. Overrides individual PostgreSQL settings if provided.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        POSTGRES_HOST\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateIf(envValues => )@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:37\n                        \n                    \n\n            \n                \n                    PostgreSQL host if DATABASE_URL is not provided.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        POSTGRES_MAX_CONNECTIONS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:106\n                        \n                    \n\n            \n                \n                    Maximum number of PostgreSQL connections.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        POSTGRES_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateIf(envValues => )@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:73\n                        \n                    \n\n            \n                \n                    PostgreSQL database name if DATABASE_URL is not provided.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        POSTGRES_PASSWORD\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateIf(envValues => )@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:62\n                        \n                    \n\n            \n                \n                    PostgreSQL password if DATABASE_URL is not provided.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        POSTGRES_PORT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateIf(envValues => )@IsInt()@Min(0)@Max(65535)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:51\n                        \n                    \n\n            \n                \n                    PostgreSQL port if DATABASE_URL is not provided.\nMust be between 0 and 65535.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        POSTGRES_USER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateIf(envValues => )@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:84\n                        \n                    \n\n            \n                \n                    PostgreSQL user if DATABASE_URL is not provided.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { registerAs } from '@nestjs/config';\n\nimport { IsOptional, IsInt, Min, Max, IsString, ValidateIf, IsBoolean } from 'class-validator';\n\nimport validateConfig from '@utils/validate-config';\n\nimport { DatabaseConfig } from './type/database-config.type';\n\n/**\n * Class to validate environment variables using class-validator decorators.\n *\n * @export\n * @class EnvironmentVariablesValidator\n */\n\nclass EnvironmentVariablesValidator {\n    /**\n     * URL for the database connection. Overrides individual PostgreSQL settings if provided.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @ValidateIf((envValues) => envValues.DATABASE_URL)\n    @IsString()\n    DATABASE_URL: string;\n\n    /**\n     * PostgreSQL host if `DATABASE_URL` is not provided.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @ValidateIf((envValues) => !envValues.DATABASE_URL)\n    @IsString()\n    POSTGRES_HOST: string;\n\n    /**\n     * PostgreSQL port if `DATABASE_URL` is not provided.\n     * Must be between 0 and 65535.\n     *\n     * @type {number}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @ValidateIf((envValues) => !envValues.DATABASE_URL)\n    @IsInt()\n    @Min(0)\n    @Max(65535)\n    POSTGRES_PORT: number;\n\n    /**\n     * PostgreSQL password if `DATABASE_URL` is not provided.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @ValidateIf((envValues) => !envValues.DATABASE_URL)\n    @IsString()\n    POSTGRES_PASSWORD: string;\n\n    /**\n     * PostgreSQL database name if `DATABASE_URL` is not provided.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @ValidateIf((envValues) => !envValues.DATABASE_URL)\n    @IsString()\n    POSTGRES_NAME: string;\n\n    /**\n     * PostgreSQL user if `DATABASE_URL` is not provided.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @ValidateIf((envValues) => !envValues.DATABASE_URL)\n    @IsString()\n    POSTGRES_USER: string;\n\n    /**\n     * Whether to synchronize the database schema on every application start.\n     *\n     * @type {boolean}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @IsBoolean()\n    @IsOptional()\n    DATABASE_SYNCHRONIZE: boolean;\n\n    /**\n     * Maximum number of PostgreSQL connections.\n     *\n     * @type {number}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @IsInt()\n    @IsOptional()\n    POSTGRES_MAX_CONNECTIONS: number;\n\n    /**\n     * Whether to enable SSL for the database connection.\n     *\n     * @type {boolean}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @IsBoolean()\n    @IsOptional()\n    DATABASE_SSL_ENABLED: boolean;\n\n    /**\n     * Whether to reject unauthorized SSL certificates.\n     *\n     * @type {boolean}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @IsBoolean()\n    @IsOptional()\n    DATABASE_REJECT_UNAUTHORIZED: boolean;\n\n    /**\n     * Path to the SSL CA certificate.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @IsString()\n    @IsOptional()\n    DATABASE_CA: string;\n\n    /**\n     * Path to the SSL key file.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @IsString()\n    @IsOptional()\n    DATABASE_KEY: string;\n\n    /**\n     * Path to the SSL certificate file.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @IsString()\n    @IsOptional()\n    DATABASE_CERT: string;\n}\n\n/**\n * Configuration registration and validation for database settings.\n *\n * Registers the database configuration with NestJS and validates the environment variables\n * using `EnvironmentVariablesValidator`. Returns a `DatabaseConfig` object with default values\n * and environment variable values for the database configuration.\n *\n * @export\n * @function\n * @returns {DatabaseConfig} The database configuration.\n */\n\nexport default registerAs('database', (): DatabaseConfig => {\n    validateConfig(process.env, EnvironmentVariablesValidator);\n\n    return {\n        url: `postgresql://${process.env.POSTGRES_USER}:${process.env.POSTGRES_PASSWORD}@${process.env.POSTGRES_HOST}:${process.env.POSTGRES_PORT}/${process.env.POSTGRES_NAME}?connection_limit=${process.env.POSTGRES_MAX_CONNECTIONS}&pool_timeout=${process.env.POSTGRES_POOL_TIMEOUT}&schema=${process.env.POSTGRES_SCHEMA}`,\n        host: process.env.POSTGRES_HOST,\n        port: process.env.POSTGRES_PORT ? parseInt(process.env.POSTGRES_PORT, 10) : 5432,\n        password: process.env.POSTGRES_PASSWORD,\n        name: process.env.POSTGRES_NAME,\n        username: process.env.POSTGRES_USER,\n        synchronize: process.env.DATABASE_SYNCHRONIZE === 'true',\n        maxConnections: process.env.POSTGRES_MAX_CONNECTIONS\n            ? parseInt(process.env.POSTGRES_MAX_CONNECTIONS, 10)\n            : 100,\n        poolTimeout: process.env.POSTGRES_POOL_TIMEOUT\n            ? parseInt(process.env.POSTGRES_POOL_TIMEOUT, 10)\n            : 100,\n        schema: process.env.POSTGRES_SCHEMA ? process.env.POSTGRES_SCHEMA : 'public',\n        sslEnabled: process.env.DATABASE_SSL_ENABLED === 'true',\n        rejectUnauthorized: process.env.DATABASE_REJECT_UNAUTHORIZED === 'true',\n        ca: process.env.DATABASE_CA,\n        key: process.env.DATABASE_KEY,\n        cert: process.env.DATABASE_CERT,\n    };\n});\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EnvironmentVariablesValidator-2.html":{"url":"classes/EnvironmentVariablesValidator-2.html","title":"class - EnvironmentVariablesValidator-2","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EnvironmentVariablesValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/file.config.ts\n        \n\n\n            \n                Description\n            \n            \n                Class to validate environment variables related to file storage configuration.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                AWS_ACCESS_KEY_ID\n                            \n                            \n                                    \n                                    \n                                AWS_DEFAULT_S3_BUCKET\n                            \n                            \n                                    \n                                    \n                                AWS_S3_REGION\n                            \n                            \n                                    \n                                    \n                                AWS_SECRET_ACCESS_KEY\n                            \n                            \n                                    \n                                    \n                                FILE_DRIVER\n                            \n                            \n                                    \n                                    \n                                MAX_FILE_SIZE\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        AWS_ACCESS_KEY_ID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateIf(envValues => )@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/file.config.ts:38\n                        \n                    \n\n            \n                \n                    AWS access key ID, required if using S3 or presigned S3 driver.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        AWS_DEFAULT_S3_BUCKET\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateIf(envValues => )@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/file.config.ts:64\n                        \n                    \n\n            \n                \n                    Default S3 bucket name, required if using S3 or presigned S3 driver.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        AWS_S3_REGION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateIf(envValues => )@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/file.config.ts:77\n                        \n                    \n\n            \n                \n                    AWS S3 region, required if using S3 or presigned S3 driver.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        AWS_SECRET_ACCESS_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateIf(envValues => )@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/file.config.ts:51\n                        \n                    \n\n            \n                \n                    AWS secret access key, required if using S3 or presigned S3 driver.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        FILE_DRIVER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FileDriver\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(FileDriver)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/file.config.ts:25\n                        \n                    \n\n            \n                \n                    Driver for file storage. Specifies the method of file storage, e.g., local file system or S3.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        MAX_FILE_SIZE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/file.config.ts:88\n                        \n                    \n\n            \n                \n                    Maximum file size allowed for uploads, in bytes.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { registerAs } from '@nestjs/config';\n\nimport { IsEnum, IsString, ValidateIf, IsOptional } from 'class-validator';\n\nimport { FileDriver, FileConfig } from '@config/type/file-config.type';\nimport validateConfig from '@utils/validate-config';\n\n/**\n * Class to validate environment variables related to file storage configuration.\n *\n * @export\n * @class EnvironmentVariablesValidator\n */\n\nclass EnvironmentVariablesValidator {\n    /**\n     * Driver for file storage. Specifies the method of file storage, e.g., local file system or S3.\n     *\n     * @type {FileDriver}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @IsEnum(FileDriver)\n    @IsOptional()\n    FILE_DRIVER: FileDriver;\n\n    /**\n     * AWS access key ID, required if using S3 or presigned S3 driver.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @ValidateIf((envValues) =>\n        [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n    )\n    @IsString()\n    AWS_ACCESS_KEY_ID: string;\n\n    /**\n     * AWS secret access key, required if using S3 or presigned S3 driver.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @ValidateIf((envValues) =>\n        [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n    )\n    @IsString()\n    AWS_SECRET_ACCESS_KEY: string;\n\n    /**\n     * Default S3 bucket name, required if using S3 or presigned S3 driver.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @ValidateIf((envValues) =>\n        [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n    )\n    @IsString()\n    AWS_DEFAULT_S3_BUCKET: string;\n\n    /**\n     * AWS S3 region, required if using S3 or presigned S3 driver.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @ValidateIf((envValues) =>\n        [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n    )\n    @IsString()\n    AWS_S3_REGION: string;\n\n    /**\n     * Maximum file size allowed for uploads, in bytes.\n     *\n     * @type {number}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @IsString()\n    @IsOptional()\n    MAX_FILE_SIZE: number;\n}\n\n/**\n * Configuration registration and validation for file storage settings.\n *\n * Registers the file storage configuration with NestJS and validates the environment variables\n * using `EnvironmentVariablesValidator`. Returns a `FileConfig` object with default values\n * and environment variable values for file storage configuration.\n *\n * @export\n * @function\n * @returns {FileConfig} The file storage configuration.\n */\n\nexport default registerAs('file', (): FileConfig => {\n    validateConfig(process.env, EnvironmentVariablesValidator);\n\n    // console.log(\n    //     'registerAS fileconfig',\n    //     (process.env.FILE_DRIVER as FileDriver | undefined) ?? FileDriver.LOCAL,\n    //     process.env.FILE_DRIVER,\n    //     process.env\n    // );\n\n    return {\n        driver: (process.env.FILE_DRIVER as FileDriver | undefined) ?? FileDriver.LOCAL,\n        accessKeyId: process.env.AWS_ACCESS_KEY_ID,\n        secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,\n        awsDefaultS3Bucket: process.env.AWS_DEFAULT_S3_BUCKET,\n        awsS3Region: process.env.AWS_S3_REGION,\n        maxFileSize: process.env.MAX_FILE_SIZE\n            ? parseInt(process.env.MAX_FILE_SIZE, 10)\n            : process.env.MAX_FILE_SIZE\n              ? parseInt(process.env.MAX_FILE_SIZE, 10)\n              : 5242880,\n        // maxFileSize: 5242880, // 5mb\n    };\n});\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EnvironmentVariablesValidator-3.html":{"url":"classes/EnvironmentVariablesValidator-3.html","title":"class - EnvironmentVariablesValidator-3","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EnvironmentVariablesValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/logger.config.ts\n        \n\n\n            \n                Description\n            \n            \n                Class to validate environment variables using class-validator decorators.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                LOGGER_APP\n                            \n                            \n                                    \n                                    \n                                LOGGER_CONSOLE_PRINT\n                            \n                            \n                                    \n                                    \n                                LOGGER_CONTEXT\n                            \n                            \n                                    \n                                    \n                                LOGGER_DATABASE_STORAGE\n                            \n                            \n                                    \n                                    \n                                LOGGER_DURATION\n                            \n                            \n                                    \n                                    \n                                LOGGER_DURATION_LOG_LEVEL\n                            \n                            \n                                    \n                                    \n                                LOGGER_LOG_IN_FILE\n                            \n                            \n                                    \n                                    \n                                LOGGER_LOG_LEVEL\n                            \n                            \n                                    \n                                    \n                                LOGGER_ORGANIZATION\n                            \n                            \n                                    \n                                    \n                                LOGGER_SLACK_INC_WEBHOOK_URL\n                            \n                            \n                                    \n                                    \n                                NODE_ENV\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        LOGGER_APP\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/logger.config.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        LOGGER_CONSOLE_PRINT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/logger.config.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        LOGGER_CONTEXT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/logger.config.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        LOGGER_DATABASE_STORAGE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/logger.config.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        LOGGER_DURATION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/logger.config.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        LOGGER_DURATION_LOG_LEVEL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/logger.config.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        LOGGER_LOG_IN_FILE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/logger.config.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        LOGGER_LOG_LEVEL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/logger.config.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        LOGGER_ORGANIZATION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/logger.config.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        LOGGER_SLACK_INC_WEBHOOK_URL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/logger.config.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        NODE_ENV\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Environment\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(Environment)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/logger.config.ts:30\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { registerAs } from '@nestjs/config';\n\nimport { IsEnum, IsString, IsOptional, IsBoolean } from 'class-validator';\n\nimport { LoggerConfig } from '@config/type/logger-config.type';\nimport validateConfig from '@utils/validate-config';\n\nconst getBooleanEnvVar = (key: string, defaultValue: boolean = false): boolean => {\n    const value = process.env[key];\n    return value ? value.toLowerCase() === 'true' : defaultValue;\n};\n\nenum Environment {\n    Development = 'development',\n    Production = 'production',\n    Staging = 'staging',\n    Test = 'testing',\n}\n\n/**\n * Class to validate environment variables using class-validator decorators.\n *\n * @export\n * @class EnvironmentVariablesValidator\n */\n\nclass EnvironmentVariablesValidator {\n    @IsEnum(Environment)\n    @IsOptional()\n    NODE_ENV: Environment;\n\n    @IsOptional()\n    @IsString()\n    LOGGER_ORGANIZATION: string;\n\n    @IsOptional()\n    @IsString()\n    LOGGER_CONTEXT: string;\n\n    @IsOptional()\n    @IsString()\n    LOGGER_APP: string;\n\n    @IsOptional()\n    @IsBoolean()\n    LOGGER_DATABASE_STORAGE: boolean;\n\n    @IsOptional()\n    @IsString()\n    LOGGER_LOG_LEVEL: string;\n\n    @IsOptional()\n    @IsBoolean()\n    LOGGER_DURATION: boolean;\n\n    @IsOptional()\n    @IsString()\n    LOGGER_DURATION_LOG_LEVEL: string;\n\n    @IsOptional()\n    @IsBoolean()\n    LOGGER_CONSOLE_PRINT: boolean;\n\n    @IsOptional()\n    @IsBoolean()\n    LOGGER_LOG_IN_FILE: boolean;\n\n    @IsOptional()\n    @IsString()\n    LOGGER_SLACK_INC_WEBHOOK_URL: string;\n}\n\n/**\n * Configuration registration and validation.\n *\n * Registers the configuration with NestJS and validates the environment variables\n * using `EnvironmentVariablesValidator`. Returns an `LoggerConfig` object with default values\n * for the application configuration.\n *\n * @export\n * @function\n * @returns {LoggerConfig} The logger configuration.\n */\n\nexport default registerAs('logger', (): LoggerConfig => {\n    validateConfig(process.env, EnvironmentVariablesValidator);\n\n    return {\n        nodeEnv: process.env.NODE_ENV || 'development',\n        organization: process.env.LOGGER_ORGANIZATION || 'org',\n        context: process.env.LOGGER_CONTEXT || 'mycontext',\n        app: process.env.LOGGER_APP || 'api',\n        database_storage: getBooleanEnvVar('LOGGER_DATABASE_STORAGE', false),\n        database_log_level: process.env.LOGGER_LOG_LEVEL || 'error',\n        duration: getBooleanEnvVar('LOGGER_DURATION', false),\n        duration_log_level: process.env.LOGGER_DURATION_LOG_LEVEL || 'info',\n        console_print: getBooleanEnvVar('LOGGER_CONSOLE_PRINT', false),\n        log_in_file: getBooleanEnvVar('LOGGER_LOG_IN_FILE', false),\n        slack_webhook:\n            process.env.LOGGER_SLACK_INC_WEBHOOK_URL ||\n            'https://hooks.slack.com/services/XXXXXXXXX/XXXXXXXXX/XXXXXXXXXXXXXXXXXXXXXXXX',\n    };\n});\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileNotImageException.html":{"url":"classes/FileNotImageException.html","title":"class - FileNotImageException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileNotImageException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/exceptions/file-not-image.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Exception class for handling non-image file uploads.\nExample :```typescript\nimport { FileNotImageException } from './path/to/exception';throw new FileNotImageException('Custom error message');\nExample :\n            \n\n            \n                Extends\n            \n            \n                        BadRequestException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message?: string | any, error?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/exceptions/file-not-image.exception.ts:20\n                            \n                        \n\n                \n                    \n                            Creates an instance of FileNotImageException.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                    string | any\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                \nOptional custom error message.\n\n\n                                                        \n                                                \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                \nOptional custom error code.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        'use strict';\n\nimport { BadRequestException } from '@nestjs/common';\n\n/**\n * Exception class for handling non-image file uploads.\n *\n * @description This exception is thrown when a file that is not an image is uploaded, extending the `BadRequestException` from NestJS.\n *\n * @example\n * ```typescript\n * import { FileNotImageException } from './path/to/exception';\n *\n * throw new FileNotImageException('Custom error message');\n * ```\n *\n * @extends {BadRequestException}\n */\n\nexport class FileNotImageException extends BadRequestException {\n    /**\n     * Creates an instance of FileNotImageException.\n     *\n     * @param {string | any} [message] - Optional custom error message.\n     * @param {string} [error] - Optional custom error code.\n     */\n\n    constructor(message?: string | any, error?: string) {\n        if (message) {\n            super(message, error);\n        } else {\n            super('error.file.not_image');\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileResponseDto.html":{"url":"classes/FileResponseDto.html","title":"class - FileResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/s3-presigned/dto/file-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                The FileResponseDto class represents the response structure for file operations, including the file metadata and upload signed URL. This DTO is used to standardize the response format for file upload operations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                file\n                            \n                            \n                                    \n                                uploadSignedUrl\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        file\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FileType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: () => FileType})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/infrastructure/uploader/s3-presigned/dto/file-response.dto.ts:27\n                        \n                    \n\n            \n                \n                    The metadata of the file, including its path and other relevant information.\nExample :{\n  id: 'abc123',\n  path: '/files/example.jpg'\n}\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        uploadSignedUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/infrastructure/uploader/s3-presigned/dto/file-response.dto.ts:41\n                        \n                    \n\n            \n                \n                    The presigned URL for uploading the file to the server or cloud storage.\nThis URL is used to securely upload the file to the specified location.\nExample :'https://example-bucket.s3.amazonaws.com/unique-file-key?AWSAccessKeyId=ACCESS_KEY&Expires=EXPIRATION_TIME&Signature=SIGNATURE'\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiResponseProperty } from '@nestjs/swagger';\n\nimport { FileType } from '../../../../domain/file';\n\n/**\n * @class FileResponseDto\n *\n * @description\n * The `FileResponseDto` class represents the response structure for file operations, including the file metadata and upload signed URL. This DTO is used to standardize the response format for file upload operations.\n */\n\nexport class FileResponseDto {\n    /**\n     * The metadata of the file, including its path and other relevant information.\n     *\n     * @type {FileType}\n     * @example\n     * {\n     *   id: 'abc123',\n     *   path: '/files/example.jpg'\n     * }\n     */\n\n    @ApiResponseProperty({\n        type: () => FileType,\n    })\n    file: FileType;\n\n    /**\n     * The presigned URL for uploading the file to the server or cloud storage.\n     * This URL is used to securely upload the file to the specified location.\n     *\n     * @type {string}\n     * @example\n     * 'https://example-bucket.s3.amazonaws.com/unique-file-key?AWSAccessKeyId=ACCESS_KEY&Expires=EXPIRATION_TIME&Signature=SIGNATURE'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n    })\n    uploadSignedUrl: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileResponseDto-1.html":{"url":"classes/FileResponseDto-1.html","title":"class - FileResponseDto-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/local/dto/file-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                The FileResponseDto represents the response object returned when a file is successfully uploaded or processed.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                file\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        file\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FileType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: () => FileType})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/infrastructure/uploader/local/dto/file-response.dto.ts:27\n                        \n                    \n\n            \n                \n                    The file details.\nExample :{\n  id: 'cbcfa8b8-3a25-4adb-a9c6-e325f0d0f3ae',\n  path: '/api/v1/uploads/example-file.jpg'\n}\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiResponseProperty } from '@nestjs/swagger';\n\nimport { FileType } from '../../../../domain/file';\n\n/**\n * @dto FileResponseDto\n *\n * @description\n * The `FileResponseDto` represents the response object returned when a file is successfully uploaded or processed.\n */\nexport class FileResponseDto {\n    /**\n     * The file details.\n     *\n     * @type {FileType}\n     *\n     * @example\n     * {\n     *   id: 'cbcfa8b8-3a25-4adb-a9c6-e325f0d0f3ae',\n     *   path: '/api/v1/uploads/example-file.jpg'\n     * }\n     */\n\n    @ApiResponseProperty({\n        type: () => FileType,\n    })\n    file: FileType;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileResponseDto-2.html":{"url":"classes/FileResponseDto-2.html","title":"class - FileResponseDto-2","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/s3/dto/file-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data transfer object (DTO) for representing the response format when returning file metadata. This DTO is used to encapsulate the file's information in API responses.\n\n@ApiResponseProperty(): Marks the property for inclusion in Swagger API documentation.\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                file\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        file\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FileType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: () => FileType})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/infrastructure/uploader/s3/dto/file-response.dto.ts:34\n                        \n                    \n\n            \n                \n                    Represents the metadata of the uploaded file.\nExample :{\n    \"id\": \"cbcfa8b8-3a25-4adb-a9c6-e325f0d0f3ae\",\n    \"path\": \"https://example.com/path/to/file.jpg\"\n}\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiResponseProperty } from '@nestjs/swagger';\n\nimport { FileType } from '../../../../domain/file';\n\n/**\n * @dto FileResponseDto\n *\n * @description\n * Data transfer object (DTO) for representing the response format when returning file metadata. This DTO is used to encapsulate the file's information in API responses.\n *\n * @properties\n *\n * @property {FileType} file - Represents the metadata of the uploaded file, including its path and any other relevant information.\n *\n * @decorators\n * - `@ApiResponseProperty()`: Marks the property for inclusion in Swagger API documentation.\n */\nexport class FileResponseDto {\n    /**\n     * Represents the metadata of the uploaded file.\n     *\n     * @type {FileType}\n     * @description Contains details about the file, such as its path and identifier.\n     * @example\n     * {\n     *     \"id\": \"cbcfa8b8-3a25-4adb-a9c6-e325f0d0f3ae\",\n     *     \"path\": \"https://example.com/path/to/file.jpg\"\n     * }\n     */\n\n    @ApiResponseProperty({\n        type: () => FileType,\n    })\n    file: FileType;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileType.html":{"url":"classes/FileType.html","title":"class - FileType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/domain/file.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the FileType class used for representing file metadata and handling file paths.\nThe FileType class represents the metadata associated with a file, including its unique identifier and file path.\nIt uses decorators from @nestjs/swagger for API documentation and class-transformer for transforming file paths based on the file configuration.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                path\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'cbcfa8b8-3a25-4adb-a9c6-e325f0d0f3ae'})@Allow()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/domain/file.ts:35\n                        \n                    \n\n            \n                \n                    The unique identifier for the file.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'https://example.com/path/to/file.jpg'})@Transform( => , {toPlainOnly: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/domain/file.ts:81\n                        \n                    \n\n            \n                \n                    The URL or path of the file. Transforms the file path based on the file driver configuration.\nIf the driver is LOCAL, the URL is constructed using the backend domain.\nIf the driver is S3 or S3_PRESIGNED, a presigned URL is generated for accessing the file.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiResponseProperty } from '@nestjs/swagger';\n\nimport { GetObjectCommand, S3Client } from '@aws-sdk/client-s3';\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner';\nimport { Transform } from 'class-transformer';\nimport { Allow } from 'class-validator';\n\nimport appConfig from '@config/app.config';\nimport fileConfig from '@config/file.config';\nimport { AppConfig } from '@config/type/app-config.type';\nimport { FileConfig, FileDriver } from '@config/type/file-config.type';\n\n/**\n * @fileoverview\n * Defines the `FileType` class used for representing file metadata and handling file paths.\n *\n * @module\n * @description\n * The `FileType` class represents the metadata associated with a file, including its unique identifier and file path.\n * It uses decorators from `@nestjs/swagger` for API documentation and `class-transformer` for transforming file paths based on the file configuration.\n */\nexport class FileType {\n    /**\n     * The unique identifier for the file.\n     *\n     * @example 'cbcfa8b8-3a25-4adb-a9c6-e325f0d0f3ae'\n     * @type {string}\n     */\n\n    @ApiProperty({\n        type: String,\n        example: 'cbcfa8b8-3a25-4adb-a9c6-e325f0d0f3ae',\n    })\n    @Allow()\n    id: string;\n\n    /**\n     * The URL or path of the file. Transforms the file path based on the file driver configuration.\n     * If the driver is LOCAL, the URL is constructed using the backend domain.\n     * If the driver is S3 or S3_PRESIGNED, a presigned URL is generated for accessing the file.\n     *\n     * @example 'https://example.com/path/to/file.jpg'\n     * @type {string}\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: 'https://example.com/path/to/file.jpg',\n    })\n    @Transform(\n        ({ value }) => {\n            if ((fileConfig() as FileConfig).driver === FileDriver.LOCAL) {\n                return (appConfig() as AppConfig).backendDomain + value;\n            } else if (\n                [FileDriver.S3_PRESIGNED, FileDriver.S3].includes(\n                    (fileConfig() as FileConfig).driver\n                )\n            ) {\n                const s3 = new S3Client({\n                    region: (fileConfig() as FileConfig).awsS3Region ?? '',\n                    credentials: {\n                        accessKeyId: (fileConfig() as FileConfig).accessKeyId ?? '',\n                        secretAccessKey: (fileConfig() as FileConfig).secretAccessKey ?? '',\n                    },\n                });\n\n                const command = new GetObjectCommand({\n                    Bucket: (fileConfig() as FileConfig).awsDefaultS3Bucket ?? '',\n                    Key: value,\n                });\n\n                return getSignedUrl(s3, command, { expiresIn: 3600 });\n            }\n\n            return value;\n        },\n        {\n            toPlainOnly: true,\n        }\n    )\n    path: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileUploadDto.html":{"url":"classes/FileUploadDto.html","title":"class - FileUploadDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileUploadDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/s3-presigned/dto/file.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                The FileUploadDto class defines the data transfer object for uploading files. It includes properties to specify the file's name and size. This DTO is used to validate and document the data required for file upload operations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                fileName\n                            \n                            \n                                    \n                                    \n                                fileSize\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        fileName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'image.jpg'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/infrastructure/uploader/s3-presigned/dto/file.dto.ts:23\n                        \n                    \n\n            \n                \n                    The name of the file to be uploaded.\nExample :'image.jpg'\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        fileSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 138723})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/infrastructure/uploader/s3-presigned/dto/file.dto.ts:35\n                        \n                    \n\n            \n                \n                    The size of the file in bytes.\nExample :138723\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nimport { IsNumber, IsString } from 'class-validator';\n\n/**\n * @class FileUploadDto\n *\n * @description\n * The `FileUploadDto` class defines the data transfer object for uploading files. It includes properties to specify the file's name and size. This DTO is used to validate and document the data required for file upload operations.\n */\n\nexport class FileUploadDto {\n    /**\n     * The name of the file to be uploaded.\n     *\n     * @type {string}\n     * @example\n     * 'image.jpg'\n     */\n\n    @ApiProperty({ example: 'image.jpg' })\n    @IsString()\n    fileName: string;\n\n    /**\n     * The size of the file in bytes.\n     *\n     * @type {number}\n     * @example\n     * 138723\n     */\n\n    @ApiProperty({ example: 138723 })\n    @IsNumber()\n    fileSize: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FilesLocalController.html":{"url":"controllers/FilesLocalController.html","title":"controller - FilesLocalController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FilesLocalController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/local/files.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                The FilesLocalController is responsible for handling file operations related to local storage.\nIt provides endpoints for uploading and downloading files.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                download\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        download\n                        \n                    \n                \n            \n            \n                \n                        \n                    download(path, response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':path')@ApiExcludeEndpoint()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/files/infrastructure/uploader/local/files.controller.ts:96\n                        \n                    \n\n\n            \n                \n                        Downloads a file from local storage.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                path\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The path to the file to be downloaded.\n\n                                            \n                                        \n                                        \n                                                response\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A file response stream.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiCreatedResponse({type: FileResponseDto})@Post('v1/upload')@ApiConsumes('multipart/form-data')@ApiBody({schema: undefined})@ApiFile()@UseInterceptors(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/files/infrastructure/uploader/local/files.controller.ts:79\n                        \n                    \n\n\n            \n                \n                        Uploads a file to local storage.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The file to be uploaded.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                FileResponseDto The response containing file details after upload.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Get,\n    Param,\n    Post,\n    Response,\n    UploadedFile,\n    UseInterceptors,\n} from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport {\n    ApiBody,\n    ApiConsumes,\n    ApiCreatedResponse,\n    ApiExcludeEndpoint,\n    ApiTags,\n} from '@nestjs/swagger';\n\nimport { diskStorage } from 'multer';\n\n// import { ApiFile } from '@decorators/swagger.schema';\nimport { ApiFile } from '@decorators/swagger.schema';\nimport { filesRoot, editFileName, imageFileFilter } from '@providers/file-upload.service';\n\nimport { FileResponseDto } from './dto/file-response.dto';\nimport { FilesLocalService } from './files.service';\n\n/**\n * @controller FilesLocalController\n *\n * @description\n * The `FilesLocalController` is responsible for handling file operations related to local storage.\n * It provides endpoints for uploading and downloading files.\n */\n\n@ApiTags('Files')\n@Controller()\nexport class FilesLocalController {\n    constructor(private readonly filesService: FilesLocalService) {}\n\n    /**\n     * Uploads a file to local storage.\n     *\n     * @endpoint POST /v1/upload\n     * @consumes multipart/form-data\n     *\n     * @param file The file to be uploaded.\n     * @returns FileResponseDto The response containing file details after upload.\n     *\n     * @throws { HttpException } If there is an error during file upload.\n     */\n\n    @ApiCreatedResponse({\n        type: FileResponseDto,\n    })\n    @Post('v1/upload')\n    @ApiConsumes('multipart/form-data')\n    @ApiBody({\n        schema: {\n            type: 'object',\n            properties: {\n                file: {\n                    type: 'string',\n                    format: 'binary',\n                },\n            },\n        },\n    })\n    @ApiFile()\n    @UseInterceptors(\n        FileInterceptor('file', {\n            storage: diskStorage({\n                destination: filesRoot() + '/local',\n                filename: editFileName,\n            }),\n            fileFilter: imageFileFilter,\n        })\n    )\n    async uploadFile(@UploadedFile() file: Express.Multer.File): Promise {\n        return this.filesService.create(file);\n    }\n\n    /**\n     * Downloads a file from local storage.\n     *\n     * @endpoint GET /:path\n     *\n     * @param path The path to the file to be downloaded.\n     * @returns A file response stream.\n     *\n     * @throws { HttpException } If the file cannot be found or there is an error during download.\n     */\n\n    @Get(':path')\n    @ApiExcludeEndpoint()\n    download(@Param('path') path, @Response() response) {\n        return response.sendFile(path, { root: filesRoot() + '/local' });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FilesLocalModule.html":{"url":"modules/FilesLocalModule.html","title":"module - FilesLocalModule","body":"\n                   \n\n\n\n\n    Modules\n    FilesLocalModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FilesLocalModule\n\n\n\ncluster_FilesLocalModule_exports\n\n\n\ncluster_FilesLocalModule_providers\n\n\n\n\nFilesLocalService \n\nFilesLocalService \n\n\n\nFilesLocalModule\n\nFilesLocalModule\n\nFilesLocalService  -->\n\nFilesLocalModule->FilesLocalService \n\n\n\n\n\nFilesLocalService\n\nFilesLocalService\n\nFilesLocalModule -->\n\nFilesLocalService->FilesLocalModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/local/files.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            The FilesLocalModule is responsible for managing file operations using local storage.\nIt provides the necessary components to handle file uploads, retrievals, and other file-related operations specific to local storage.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FilesLocalService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            FilesLocalController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FilesLocalService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { FilesLocalController } from './files.controller';\nimport { FilesLocalService } from './files.service';\n\n/**\n * @module FilesLocalModule\n *\n * @description\n * The `FilesLocalModule` is responsible for managing file operations using local storage.\n * It provides the necessary components to handle file uploads, retrievals, and other file-related operations specific to local storage.\n */\n@Module({\n    /**\n     * The list of controllers that handle incoming requests and provide endpoints related to local file operations.\n     */\n\n    controllers: [FilesLocalController],\n\n    /**\n     * The list of providers that contain the business logic for file operations.\n     * These providers are used to handle file-related tasks such as uploading, retrieving, and managing files.\n     */\n\n    providers: [FilesLocalService],\n\n    /**\n     * The list of providers that are made available for other modules to use.\n     * `FilesLocalService` is exported so that other modules can utilize the service for local file operations.\n     */\n    exports: [FilesLocalService],\n})\nexport class FilesLocalModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FilesLocalService.html":{"url":"injectables/FilesLocalService.html","title":"injectable - FilesLocalService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FilesLocalService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/local/files.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The FilesLocalService provides functionality for handling file operations related to local storage.\nIt manages file creation and provides necessary file details.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/files/infrastructure/uploader/local/files.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(file: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/files/infrastructure/uploader/local/files.service.ts:37\n                        \n                    \n\n\n            \n                \n                        Handles file creation and returns file details.\nExample :// Example response:\n{\n  file: {\n    id: 'asas',\n    path: '/api/v1/uploads/example-file.jpg'\n  }\n}\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The file to be processed.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves to an object containing file details.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpStatus, Injectable, UnprocessableEntityException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\nimport { AllConfigType } from '@config/type/config.type';\n\nimport { FileType } from '../../../domain/file';\n\n/**\n * @service FilesLocalService\n *\n * @description\n * The `FilesLocalService` provides functionality for handling file operations related to local storage.\n * It manages file creation and provides necessary file details.\n */\n@Injectable()\nexport class FilesLocalService {\n    constructor(private readonly configService: ConfigService) {}\n\n    /**\n     * Handles file creation and returns file details.\n     *\n     * @param file The file to be processed.\n     * @returns A promise that resolves to an object containing file details.\n     *\n     * @throws { UnprocessableEntityException } If the file is not provided.\n     *\n     * @example\n     * // Example response:\n     * {\n     *   file: {\n     *     id: 'asas',\n     *     path: '/api/v1/uploads/example-file.jpg'\n     *   }\n     * }\n     */\n\n    async create(file: Express.Multer.File): Promise {\n        if (!file) {\n            throw new UnprocessableEntityException({\n                status: HttpStatus.UNPROCESSABLE_ENTITY,\n                errors: {\n                    file: 'selectFile',\n                },\n            });\n        }\n\n        return {\n            file: {\n                id: 'asas',\n                path: `/${this.configService.get('app.apiPrefix', {\n                    infer: true,\n                })}/v1/${file.path}`,\n            },\n        } as any;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FilesModule.html":{"url":"modules/FilesModule.html","title":"module - FilesModule","body":"\n                   \n\n\n\n\n    Modules\n    FilesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_providers\n\n\n\ncluster_FilesModule_imports\n\n\n\ncluster_FilesModule_exports\n\n\n\n\nFilesS3Module\n\nFilesS3Module\n\n\n\nFilesModule\n\nFilesModule\n\nFilesModule -->\n\nFilesS3Module->FilesModule\n\n\n\n\n\nFilesS3PresignedModule\n\nFilesS3PresignedModule\n\nFilesModule -->\n\nFilesS3PresignedModule->FilesModule\n\n\n\n\n\nFilesService \n\nFilesService \n\nFilesService  -->\n\nFilesModule->FilesService \n\n\n\n\n\nFilesService\n\nFilesService\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/files/files.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            This file defines the FilesModule, which is responsible for managing file uploads\nthrough different infrastructure modules. It conditionally imports the appropriate\nfile uploader module based on configuration settings.\nThe FilesModule class integrates various file uploader modules and provides\nthe FilesService for handling file operations. The module configuration allows\nswitching between different file storage solutions such as local storage, S3, and\nS3 presigned uploads.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FilesService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            FilesS3Module\n                        \n                        \n                            FilesS3PresignedModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FilesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { FilesService } from './files.service';\nimport { FilesLocalModule } from './infrastructure/uploader/local/files.module';\nimport { FilesS3Module } from './infrastructure/uploader/s3/files.module';\nimport { FilesS3PresignedModule } from './infrastructure/uploader/s3-presigned/files.module';\n\n// import { InfrastructureUploaderModule } from './infrastructureUploaderModule';\n\n// const infrastructureUploaderModule =\n//     (fileConfig() as FileConfig).driver === FileDriver.LOCAL\n//         ? FilesLocalModule\n//         : (fileConfig() as FileConfig).driver === FileDriver.S3\n//           ? FilesS3Module\n//           : FilesS3PresignedModule;\n\n// console.log(\n//     '********************************************************************===============================',\n//     fileConfig() as FileConfig\n// );\n\nconst infrastructureUploaderModule = FilesLocalModule;\n\n/**\n * @fileoverview\n * This file defines the `FilesModule`, which is responsible for managing file uploads\n * through different infrastructure modules. It conditionally imports the appropriate\n * file uploader module based on configuration settings.\n *\n * @module\n * @description\n * The `FilesModule` class integrates various file uploader modules and provides\n * the `FilesService` for handling file operations. The module configuration allows\n * switching between different file storage solutions such as local storage, S3, and\n * S3 presigned uploads.\n */\n\n@Module({\n    /**\n     * The `imports` array specifies the modules that are imported into this module.\n     * The choice of uploader module is determined based on the configuration settings.\n     */\n\n    imports: [infrastructureUploaderModule, FilesS3Module, FilesS3PresignedModule],\n\n    /**\n     * The `providers` array defines the providers that are instantiated by this module.\n     * The `FilesService` is included here to be used within this module.\n     */\n\n    providers: [FilesService],\n\n    /**\n     * The `exports` array specifies the providers that are exported from this module.\n     * The `FilesService` is exported so it can be used by other modules.\n     */\n\n    exports: [FilesService],\n})\nexport class FilesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FilesS3Controller.html":{"url":"controllers/FilesS3Controller.html","title":"controller - FilesS3Controller","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FilesS3Controller\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/s3/files.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                The FilesS3Controller handles HTTP requests related to file uploads using AWS S3. It provides an endpoint for uploading files to S3 and returning the file metadata.\n\nFiles: Grouped under the 'Files' tag for API documentation purposes.\n\nfiles: Base path for file-related operations.\n\nv1/upload/s3: Endpoint for file uploads to S3.\n\n\nHandles file upload requests. Files are processed and uploaded to S3. The response includes metadata about the uploaded file.\n\n@ApiTags('Files'): Tags the controller with 'Files' for API documentation.\n@ApiCreatedResponse({ type: FileResponseDto }): Specifies the response type for successful file uploads.\n@Post('v1/upload/s3'): Defines the HTTP POST endpoint for file uploads.\n@ApiConsumes('multipart/form-data'): Indicates that the endpoint consumes 'multipart/form-data' for file uploads.\n@ApiBody({ schema: { type: 'object', properties: { file: { type: 'string', format: 'binary' } } } }): Documents the expected request body schema for file uploads.\n@ApiFile(): Custom decorator for file upload handling.\n@UseInterceptors(FileInterceptor('file')): Applies the FileInterceptor to handle file uploads.\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(file: Express.MulterS3.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiCreatedResponse({type: FileResponseDto})@Post('v1/upload/s3')@ApiConsumes('multipart/form-data')@ApiBody({schema: undefined})@ApiFile()@UseInterceptors(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/files/infrastructure/uploader/s3/files.controller.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.MulterS3.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, UploadedFile, UseInterceptors } from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { ApiBody, ApiConsumes, ApiCreatedResponse, ApiTags } from '@nestjs/swagger';\n\n// import { ApiFile } from '../../../../../decorators/swagger.schema';\nimport { ApiFile } from '@decorators/swagger.schema';\n\nimport { FileResponseDto } from './dto/file-response.dto';\nimport { FilesS3Service } from './files.service';\n\n/**\n * @controller FilesS3Controller\n *\n * @description\n * The `FilesS3Controller` handles HTTP requests related to file uploads using AWS S3. It provides an endpoint for uploading files to S3 and returning the file metadata.\n *\n * @tags\n * - Files: Grouped under the 'Files' tag for API documentation purposes.\n *\n * @path\n * - `files`: Base path for file-related operations.\n * - `v1/upload/s3`: Endpoint for file uploads to S3.\n *\n * @controller\n *\n * @constructor\n * @param {FilesS3Service} filesService - Service responsible for handling file operations with S3.\n *\n * @methods\n *\n * @method uploadFile\n * @description\n * Handles file upload requests. Files are processed and uploaded to S3. The response includes metadata about the uploaded file.\n *\n * @param {Express.MulterS3.File} file - The uploaded file from the request.\n * @returns {Promise} - A promise that resolves to the file metadata.\n *\n * @decorators\n * - `@ApiTags('Files')`: Tags the controller with 'Files' for API documentation.\n * - `@ApiCreatedResponse({ type: FileResponseDto })`: Specifies the response type for successful file uploads.\n * - `@Post('v1/upload/s3')`: Defines the HTTP POST endpoint for file uploads.\n * - `@ApiConsumes('multipart/form-data')`: Indicates that the endpoint consumes 'multipart/form-data' for file uploads.\n * - `@ApiBody({ schema: { type: 'object', properties: { file: { type: 'string', format: 'binary' } } } })`: Documents the expected request body schema for file uploads.\n * - `@ApiFile()`: Custom decorator for file upload handling.\n * - `@UseInterceptors(FileInterceptor('file'))`: Applies the `FileInterceptor` to handle file uploads.\n */\n\n@ApiTags('Files')\n@Controller({\n    path: 'files',\n    version: '1',\n})\nexport class FilesS3Controller {\n    constructor(private readonly filesService: FilesS3Service) {}\n\n    @ApiCreatedResponse({\n        type: FileResponseDto,\n    })\n    @Post('v1/upload/s3')\n    @ApiConsumes('multipart/form-data')\n    @ApiBody({\n        schema: {\n            type: 'object',\n            properties: {\n                file: {\n                    type: 'string',\n                    format: 'binary',\n                },\n            },\n        },\n    })\n    @ApiFile()\n    @UseInterceptors(FileInterceptor('file'))\n    async uploadFile(@UploadedFile() file: Express.MulterS3.File): Promise {\n        return this.filesService.create(file);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FilesS3Module.html":{"url":"modules/FilesS3Module.html","title":"module - FilesS3Module","body":"\n                   \n\n\n\n\n    Modules\n    FilesS3Module\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FilesS3Module\n\n\n\ncluster_FilesS3Module_exports\n\n\n\ncluster_FilesS3Module_providers\n\n\n\n\nFilesS3Service \n\nFilesS3Service \n\n\n\nFilesS3Module\n\nFilesS3Module\n\nFilesS3Service  -->\n\nFilesS3Module->FilesS3Service \n\n\n\n\n\nFilesS3Service\n\nFilesS3Service\n\nFilesS3Module -->\n\nFilesS3Service->FilesS3Module\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/s3/files.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            The FilesS3Module configures the integration with AWS S3 for file upload functionality. It sets up the Multer middleware to handle file uploads, configures the S3 client, and defines the file storage and filtering logic.\n\nMulterModule: Configures Multer for file handling and integrates it with S3.\n\nConfigModule: Provides access to application configuration settings.\n\nFilesS3Service: Handles file upload and processing logic using S3.\n\nFilesS3Controller: Manages HTTP requests related to file uploads and downloads.\n\nFilesS3Service: Exposes the service for file operations to other modules.\n\n\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FilesS3Service\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            FilesS3Controller\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FilesS3Service\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { randomStringGenerator } from '@nestjs/common/utils/random-string-generator.util';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { MulterModule } from '@nestjs/platform-express';\n\nimport { S3Client } from '@aws-sdk/client-s3';\nimport multerS3 from 'multer-s3';\n\n// import { HelperModule } from '../../../../../common/helper/helper.module';\n// import { ConfigService } from '../../../../../common/helper/services/config.service';\nimport { AllConfigType } from '@config/type/config.type';\nimport { imageFileFilter } from '@providers/file-upload.service';\n\nimport { FilesS3Controller } from './files.controller';\nimport { FilesS3Service } from './files.service';\n\n/**\n * @module FilesS3Module\n *\n * @description\n * The `FilesS3Module` configures the integration with AWS S3 for file upload functionality. It sets up the Multer middleware to handle file uploads, configures the S3 client, and defines the file storage and filtering logic.\n *\n * @imports\n * - `MulterModule`: Configures Multer for file handling and integrates it with S3.\n * - `ConfigModule`: Provides access to application configuration settings.\n *\n * @providers\n * - `FilesS3Service`: Handles file upload and processing logic using S3.\n *\n * @controllers\n * - `FilesS3Controller`: Manages HTTP requests related to file uploads and downloads.\n *\n * @exports\n * - `FilesS3Service`: Exposes the service for file operations to other modules.\n */\n\n@Module({\n    imports: [\n        MulterModule.registerAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: (configService: ConfigService) => {\n                const s3 = new S3Client({\n                    region: configService.get('file.awsS3Region', { infer: true }),\n                    credentials: {\n                        accessKeyId: configService.getOrThrow('file.accessKeyId', {\n                            infer: true,\n                        }),\n                        secretAccessKey: configService.getOrThrow('file.secretAccessKey', {\n                            infer: true,\n                        }),\n                    },\n                });\n\n                return {\n                    fileFilter: imageFileFilter,\n                    storage: multerS3({\n                        s3: s3,\n                        bucket: configService.getOrThrow('file.awsDefaultS3Bucket', {\n                            infer: true,\n                        }),\n                        contentType: multerS3.AUTO_CONTENT_TYPE,\n                        key: (request, file, callback) => {\n                            callback(\n                                null,\n                                `${randomStringGenerator()}.${file.originalname\n                                    .split('.')\n                                    .pop()\n                                    ?.toLowerCase()}`\n                            );\n                        },\n                    }),\n                    limits: {\n                        fileSize: configService.get('file.maxFileSize', { infer: true }),\n                    },\n                };\n            },\n        }),\n    ],\n    controllers: [FilesS3Controller],\n    providers: [FilesS3Service],\n    exports: [FilesS3Service],\n})\nexport class FilesS3Module {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FilesS3PresignedController.html":{"url":"controllers/FilesS3PresignedController.html","title":"controller - FilesS3PresignedController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FilesS3PresignedController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/s3-presigned/files.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                The FilesS3PresignedController manages HTTP requests for file operations involving Amazon S3 presigned URLs. It provides endpoints for uploading files and generating presigned URLs for downloading files from S3.\n\nFilesS3PresignedController: Handles file upload and presigned URL generation requests.\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                getDownloadUrl\n                            \n                            \n                                    \n                                    \n                                    Async\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getDownloadUrl\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDownloadUrl(key: string, expiresIn: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('v1/download/:key')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/files/infrastructure/uploader/s3-presigned/files.controller.ts:69\n                        \n                    \n\n\n            \n                \n                        Generates a presigned URL for downloading a file from Amazon S3.\nExample :GET /files/v1/download/{key}?expiresIn=3600\nResponse:\n{\n  \"url\": \"https://s3.amazonaws.com/bucket/path/to/file?signature\"\n}\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe key (path) of the file in the S3 bucket.\n\n\n                                            \n                                        \n                                        \n                                                expiresIn\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe expiration time for the presigned URL in seconds.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An object containing the presigned URL for file download.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(file: FileUploadDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiCreatedResponse({type: FileResponseDto})@Post('v1/upload')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/files/infrastructure/uploader/s3-presigned/files.controller.ts:49\n                        \n                    \n\n\n            \n                \n                        Uploads a file to Amazon S3.\nExample :POST /files/v1/upload\nRequest body:\n{\n  \"file\": \"base64-encoded-file-data\"\n}\nResponse:\n{\n  \"file\": {\n    \"path\": \"s3://bucket/path/to/file\"\n  }\n}\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                            FileUploadDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe file data to upload.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                A FileResponseDto object containing information about the uploaded file.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Post, Query } from '@nestjs/common';\nimport { ApiCreatedResponse, ApiTags } from '@nestjs/swagger';\n\nimport { FileResponseDto } from './dto/file-response.dto';\nimport { FileUploadDto } from './dto/file.dto';\nimport { FilesS3PresignedService } from './files.service';\n\n/**\n * @module FilesS3PresignedController\n *\n * @description\n * The `FilesS3PresignedController` manages HTTP requests for file operations involving Amazon S3 presigned URLs. It provides endpoints for uploading files and generating presigned URLs for downloading files from S3.\n *\n * @controllers\n * - `FilesS3PresignedController`: Handles file upload and presigned URL generation requests.\n */\n@ApiTags('Files')\n@Controller({\n    path: 'files',\n    version: '1',\n})\nexport class FilesS3PresignedController {\n    constructor(private readonly filesService: FilesS3PresignedService) {}\n\n    /**\n     * Uploads a file to Amazon S3.\n     *\n     * @param file - The file data to upload.\n     * @returns A `FileResponseDto` object containing information about the uploaded file.\n     *\n     * @example\n     * POST /files/v1/upload\n     * Request body:\n     * {\n     *   \"file\": \"base64-encoded-file-data\"\n     * }\n     * Response:\n     * {\n     *   \"file\": {\n     *     \"path\": \"s3://bucket/path/to/file\"\n     *   }\n     * }\n     */\n\n    @ApiCreatedResponse({\n        type: FileResponseDto,\n    })\n    @Post('v1/upload')\n    async uploadFile(@Body() file: FileUploadDto) {\n        return this.filesService.create(file);\n    }\n\n    /**\n     * Generates a presigned URL for downloading a file from Amazon S3.\n     *\n     * @param key - The key (path) of the file in the S3 bucket.\n     * @param expiresIn - The expiration time for the presigned URL in seconds.\n     * @returns An object containing the presigned URL for file download.\n     *\n     * @example\n     * GET /files/v1/download/{key}?expiresIn=3600\n     * Response:\n     * {\n     *   \"url\": \"https://s3.amazonaws.com/bucket/path/to/file?signature\"\n     * }\n     */\n\n    @Get('v1/download/:key')\n    async getDownloadUrl(@Param('key') key: string, @Query('expiresIn') expiresIn: number) {\n        const url = await this.filesService.generatePresignedUrl(key, expiresIn);\n        return { url };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FilesS3PresignedModule.html":{"url":"modules/FilesS3PresignedModule.html","title":"module - FilesS3PresignedModule","body":"\n                   \n\n\n\n\n    Modules\n    FilesS3PresignedModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FilesS3PresignedModule\n\n\n\ncluster_FilesS3PresignedModule_exports\n\n\n\ncluster_FilesS3PresignedModule_providers\n\n\n\n\nFilesS3PresignedService \n\nFilesS3PresignedService \n\n\n\nFilesS3PresignedModule\n\nFilesS3PresignedModule\n\nFilesS3PresignedService  -->\n\nFilesS3PresignedModule->FilesS3PresignedService \n\n\n\n\n\nFilesS3PresignedService\n\nFilesS3PresignedService\n\nFilesS3PresignedModule -->\n\nFilesS3PresignedService->FilesS3PresignedModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/s3-presigned/files.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            The FilesS3PresignedModule configures and sets up the module for handling file uploads to an Amazon S3 bucket using presigned URLs. It integrates the necessary dependencies and configurations for Multer to manage file uploads and provides the service and controller for handling S3 interactions.\n\nMulterModule: Configured asynchronously to use multer-s3 for file storage on S3.\n\nConfigModule: Provides configuration services for retrieving AWS S3 settings.\n\nFilesS3PresignedService: Service that handles the logic for interacting with S3 and generating presigned URLs.\n\nFilesS3PresignedController: Controller for handling HTTP requests related to file uploads and presigned URLs.\n\n\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FilesS3PresignedService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            FilesS3PresignedController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FilesS3PresignedService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { randomStringGenerator } from '@nestjs/common/utils/random-string-generator.util';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { MulterModule } from '@nestjs/platform-express';\n\nimport { S3Client } from '@aws-sdk/client-s3';\nimport multerS3 from 'multer-s3';\n\n// import { HelperModule } from '../../../../../common/helper/helper.module';\n// import { ConfigService } from '../../../../../common/helper/services/config.service';\nimport { AllConfigType } from '@config/type/config.type';\n\nimport { imageFileFilter } from '../../../../../providers/file-upload.service';\n\nimport { FilesS3PresignedController } from './files.controller';\nimport { FilesS3PresignedService } from './files.service';\n\n/**\n * @module FilesS3PresignedModule\n *\n * @description\n * The `FilesS3PresignedModule` configures and sets up the module for handling file uploads to an Amazon S3 bucket using presigned URLs. It integrates the necessary dependencies and configurations for Multer to manage file uploads and provides the service and controller for handling S3 interactions.\n *\n * @imports\n * - `MulterModule`: Configured asynchronously to use `multer-s3` for file storage on S3.\n * - `ConfigModule`: Provides configuration services for retrieving AWS S3 settings.\n *\n * @providers\n * - `FilesS3PresignedService`: Service that handles the logic for interacting with S3 and generating presigned URLs.\n *\n * @controllers\n * - `FilesS3PresignedController`: Controller for handling HTTP requests related to file uploads and presigned URLs.\n */\n@Module({\n    imports: [\n        MulterModule.registerAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: (configService: ConfigService) => {\n                const s3 = new S3Client({\n                    region: configService.get('file.awsS3Region', { infer: true }),\n                    credentials: {\n                        accessKeyId: configService.getOrThrow('file.accessKeyId', {\n                            infer: true,\n                        }),\n                        secretAccessKey: configService.getOrThrow('file.secretAccessKey', {\n                            infer: true,\n                        }),\n                    },\n                });\n\n                return {\n                    fileFilter: imageFileFilter,\n                    storage: multerS3({\n                        s3: s3,\n                        bucket: '',\n                        acl: 'public-read',\n                        contentType: multerS3.AUTO_CONTENT_TYPE,\n                        key: (request, file, callback) => {\n                            callback(\n                                null,\n                                `${randomStringGenerator()}.${file.originalname\n                                    .split('.')\n                                    .pop()\n                                    ?.toLowerCase()}`\n                            );\n                        },\n                    }),\n                };\n            },\n        }),\n    ],\n    controllers: [FilesS3PresignedController],\n    providers: [FilesS3PresignedService],\n    exports: [FilesS3PresignedService],\n})\nexport class FilesS3PresignedModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FilesS3PresignedService.html":{"url":"injectables/FilesS3PresignedService.html","title":"injectable - FilesS3PresignedService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FilesS3PresignedService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/s3-presigned/files.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The FilesS3PresignedService handles operations related to file uploads and downloads using Amazon S3 with presigned URLs. It provides methods for creating upload presigned URLs and generating download presigned URLs.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                s3\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                generatePresignedUrl\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/files/infrastructure/uploader/s3-presigned/files.service.ts:26\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(file: FileUploadDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/files/infrastructure/uploader/s3-presigned/files.service.ts:59\n                        \n                    \n\n\n            \n                \n                        Creates a presigned URL for uploading a file to Amazon S3.\nExample :const response = await this.create({\n  fileName: 'image.jpg',\n  fileSize: 123456\n});\n// response will include file metadata and uploadSignedUrl\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                            FileUploadDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe file upload data containing file information.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                An object containing the file metadata and the presigned URL for uploading.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generatePresignedUrl\n                        \n                    \n                \n            \n            \n                \n                        \n                    generatePresignedUrl(key: string, expiresIn: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/files/infrastructure/uploader/s3-presigned/files.service.ts:128\n                        \n                    \n\n\n            \n                \n                        Generates a presigned URL for downloading a file from Amazon S3.\nExample :const url = await this.generatePresignedUrl('path/to/file', 3600);\n// url will be a presigned URL for downloading the file\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe key (path) of the file in the S3 bucket.\n\n\n                                            \n                                        \n                                        \n                                                expiresIn\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe expiration time for the presigned URL in seconds.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                The presigned URL for downloading the file.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        s3\n                        \n                    \n                \n            \n                \n                    \n                        Type :     S3Client\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/files/infrastructure/uploader/s3-presigned/files.service.ts:26\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n    HttpStatus,\n    Injectable,\n    PayloadTooLargeException,\n    UnprocessableEntityException,\n} from '@nestjs/common';\nimport { randomStringGenerator } from '@nestjs/common/utils/random-string-generator.util';\nimport { ConfigService } from '@nestjs/config';\n\nimport { GetObjectCommand, PutObjectCommand, S3Client } from '@aws-sdk/client-s3';\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner';\n\n// import { ConfigService } from '../../../../../common/helper/services/config.service';\nimport { FileType } from '../../../domain/file';\n\nimport { FileUploadDto } from './dto/file.dto';\n\n/**\n * @module FilesS3PresignedService\n *\n * @description\n * The `FilesS3PresignedService` handles operations related to file uploads and downloads using Amazon S3 with presigned URLs. It provides methods for creating upload presigned URLs and generating download presigned URLs.\n */\n@Injectable()\nexport class FilesS3PresignedService {\n    private s3: S3Client;\n\n    constructor(private readonly configService: ConfigService) {\n        this.s3 = new S3Client({\n            region: configService.get('file.awsS3Region', { infer: true }),\n            credentials: {\n                accessKeyId: configService.getOrThrow('file.accessKeyId', {\n                    infer: true,\n                }),\n                secretAccessKey: configService.getOrThrow('file.secretAccessKey', {\n                    infer: true,\n                }),\n            },\n        });\n    }\n\n    /**\n     * Creates a presigned URL for uploading a file to Amazon S3.\n     *\n     * @param file - The file upload data containing file information.\n     * @returns An object containing the file metadata and the presigned URL for uploading.\n     *\n     * @throws {UnprocessableEntityException} If the file is not provided or has an unsupported type.\n     * @throws {PayloadTooLargeException} If the file size exceeds the maximum allowed size.\n     *\n     * @example\n     * const response = await this.create({\n     *   fileName: 'image.jpg',\n     *   fileSize: 123456\n     * });\n     * // response will include file metadata and uploadSignedUrl\n     */\n\n    async create(file: FileUploadDto): Promise {\n        if (!file) {\n            throw new UnprocessableEntityException({\n                status: HttpStatus.UNPROCESSABLE_ENTITY,\n                errors: {\n                    file: 'selectFile',\n                },\n            });\n        }\n\n        if (!file.fileName.match(/\\.(jpg|jpeg|png|gif)$/i)) {\n            throw new UnprocessableEntityException({\n                status: HttpStatus.UNPROCESSABLE_ENTITY,\n                errors: {\n                    file: `cantUploadFileType`,\n                },\n            });\n        }\n\n        if (\n            file.fileSize >\n            (this.configService.get('file.maxFileSize', {\n                infer: true,\n            }) || 0)\n        ) {\n            throw new PayloadTooLargeException({\n                statusCode: HttpStatus.PAYLOAD_TOO_LARGE,\n                error: 'Payload Too Large',\n                message: 'File too large',\n            });\n        }\n\n        const key = `${randomStringGenerator()}.${file.fileName.split('.').pop()?.toLowerCase()}`;\n\n        const command = new PutObjectCommand({\n            Bucket: this.configService.getOrThrow('file.awsDefaultS3Bucket', {\n                infer: true,\n            }),\n            Key: key,\n            ContentLength: file.fileSize,\n        });\n        const signedUrl = await getSignedUrl(this.s3, command, { expiresIn: 3600 });\n\n        // const data = await this.fileRepository.create({\n        //     path: key,\n        // });\n\n        const data = {\n            path: key,\n        } as any;\n\n        return {\n            file: data,\n            uploadSignedUrl: signedUrl,\n        };\n    }\n\n    /**\n     * Generates a presigned URL for downloading a file from Amazon S3.\n     *\n     * @param key - The key (path) of the file in the S3 bucket.\n     * @param expiresIn - The expiration time for the presigned URL in seconds.\n     * @returns The presigned URL for downloading the file.\n     *\n     * @example\n     * const url = await this.generatePresignedUrl('path/to/file', 3600);\n     * // url will be a presigned URL for downloading the file\n     */\n\n    async generatePresignedUrl(key: string, expiresIn: number): Promise {\n        const command = new GetObjectCommand({\n            Bucket: this.configService.getOrThrow('file.awsDefaultS3Bucket', {\n                infer: true,\n            }),\n            Key: key,\n        });\n\n        return await getSignedUrl(this.s3, command, { expiresIn });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FilesS3Service.html":{"url":"injectables/FilesS3Service.html","title":"injectable - FilesS3Service","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FilesS3Service\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/s3/files.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The FilesS3Service provides methods for handling file operations with AWS S3. It includes functionality to process uploaded files and return their metadata.\nHandles the creation and metadata retrieval for uploaded files. It validates the presence of the file and returns its metadata.\n\n@Injectable(): Marks the class as a provider that can be injected into other components.\n\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/modules/files/infrastructure/uploader/s3/files.service.ts:29\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(file: Express.MulterS3.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/files/infrastructure/uploader/s3/files.service.ts:40\n                        \n                    \n\n\n            \n                \n                        Handles the creation and metadata retrieval for uploaded files.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.MulterS3.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe uploaded file from the request.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nA promise that resolves to an object containing the file metadata.\n\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpStatus, Injectable, UnprocessableEntityException } from '@nestjs/common';\n\nimport { FileType } from '../../../domain/file';\n\n/**\n * @service FilesS3Service\n *\n * @description\n * The `FilesS3Service` provides methods for handling file operations with AWS S3. It includes functionality to process uploaded files and return their metadata.\n *\n * @constructor\n * @param {void} - No parameters are injected into the constructor.\n *\n * @methods\n *\n * @method create\n * @description\n * Handles the creation and metadata retrieval for uploaded files. It validates the presence of the file and returns its metadata.\n *\n * @param {Express.MulterS3.File} file - The uploaded file from the request. It should include information such as the file's S3 key.\n * @returns {Promise} - A promise that resolves to an object containing the file metadata.\n *\n * @throws {UnprocessableEntityException} - Throws an exception if the file is not provided in the request.\n *\n * @decorators\n * - `@Injectable()`: Marks the class as a provider that can be injected into other components.\n */\n@Injectable()\nexport class FilesS3Service {\n    constructor() {}\n\n    /**\n     * Handles the creation and metadata retrieval for uploaded files.\n     *\n     * @param {Express.MulterS3.File} file - The uploaded file from the request.\n     * @returns {Promise} - A promise that resolves to an object containing the file metadata.\n     * @throws {UnprocessableEntityException} - Throws an exception if the file is not provided.\n     */\n\n    async create(file: Express.MulterS3.File): Promise {\n        if (!file) {\n            throw new UnprocessableEntityException({\n                status: HttpStatus.UNPROCESSABLE_ENTITY,\n                errors: {\n                    file: 'selectFile',\n                },\n            });\n        }\n\n        return {\n            file: {\n                path: file.key,\n            } as any,\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FilesService.html":{"url":"injectables/FilesService.html","title":"injectable - FilesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FilesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/files.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the FilesService, a service responsible for handling file operations.\nThe FilesService class is an injectable service in the NestJS framework. It is designed\nto manage and process file-related tasks, such as uploading, retrieving, and managing files.\nThe service's methods and functionalities should be implemented based on the specific file\nhandling requirements of the application.\n\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n/**\n * @fileoverview\n * This file defines the `FilesService`, a service responsible for handling file operations.\n *\n * @module\n * @description\n * The `FilesService` class is an injectable service in the NestJS framework. It is designed\n * to manage and process file-related tasks, such as uploading, retrieving, and managing files.\n * The service's methods and functionalities should be implemented based on the specific file\n * handling requirements of the application.\n */\n@Injectable()\nexport class FilesService {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilterCountryDto.html":{"url":"classes/FilterCountryDto.html","title":"class - FilterCountryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilterCountryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/countries/dto/query-country.dto-remove.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nimport { Transform, Type, plainToInstance } from 'class-transformer';\nimport { IsNumber, IsOptional, IsString, ValidateNested } from 'class-validator';\n\nimport { Country } from './country';\n\nexport class FilterCountryDto {}\n\nexport class SortCountryDto {\n    @ApiProperty()\n    @Type(() => String)\n    @IsString()\n    orderBy: keyof Country;\n\n    @ApiProperty()\n    @IsString()\n    order: string;\n}\n\nexport class QueryCountryDto {\n    @ApiPropertyOptional()\n    @Transform(({ value }) => (value ? Number(value) : 1))\n    @IsNumber()\n    @IsOptional()\n    page?: number;\n\n    @ApiPropertyOptional()\n    @Transform(({ value }) => (value ? Number(value) : 10))\n    @IsNumber()\n    @IsOptional()\n    limit?: number;\n\n    @ApiPropertyOptional({ type: String })\n    @IsOptional()\n    @Transform(({ value }) =>\n        value ? plainToInstance(FilterCountryDto, JSON.parse(value)) : undefined\n    )\n    @ValidateNested()\n    @Type(() => FilterCountryDto)\n    filters?: FilterCountryDto | null;\n\n    @ApiPropertyOptional({ type: String })\n    @IsOptional()\n    @Transform(({ value }) => {\n        return value ? plainToInstance(SortCountryDto, JSON.parse(value)) : undefined;\n    })\n    @ValidateNested({ each: true })\n    @Type(() => SortCountryDto)\n    sort?: SortCountryDto[] | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilterQueryDto.html":{"url":"classes/FilterQueryDto.html","title":"class - FilterQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilterQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/dto/pagination.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO class for filter query parameters.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                field\n                            \n                            \n                                    \n                                    \n                                    \n                                operator\n                            \n                            \n                                    \n                                    \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        field\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'iso', required: true})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.dto.ts:160\n                        \n                    \n\n            \n                \n                    The field to filter on.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        operator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '='})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.dto.ts:172\n                        \n                    \n\n            \n                \n                    The operator to use for filtering.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'IN'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.dto.ts:184\n                        \n                    \n\n            \n                \n                    The value to filter by.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nimport { Type, Transform, plainToInstance } from 'class-transformer';\nimport {\n    IsOptional,\n    Min,\n    Max,\n    IsNotEmpty,\n    IsString,\n    ValidateNested,\n    Matches,\n    IsEnum,\n    // Validate,\n    // IsIn,\n} from 'class-validator';\n\n// import { IsValidField } from '@core/validators/field.validator'; // Import the custom validator\nimport { IsNumberStringOrNumber } from '@decorators/number.string.validator';\nimport { ToNumber } from '@decorators/transforms.decorator';\n// import { IsNumberStringOrNumber } from '@decorators/number.string.validator';\n// import { ToNumber } from '@decorators/transforms.decorator';\n// import { Country } from '@modules/countries/dto/country';\n\n/**\n * Enum representing different pagination types.\n *\n * @export\n * @enum {string}\n */\n\nexport enum PaginationType {\n    NONE = 'no',\n    INFINITY = 'infinity',\n    PAGINATE = 'paginate',\n    ALL = 'all',\n}\n\n/**\n * DTO class for pagination query parameters.\n *\n * @export\n */\nexport class PaginationQueryDto {\n    /**\n     * The type of pagination to apply.\n     *\n     * @type {PaginationType}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        description:\n            'Pagination must all (Page and has_next_page), infinity (only has_next_page), paginate(only page)',\n        enum: PaginationType,\n        default: PaginationType.ALL,\n    })\n    @IsEnum(PaginationType)\n    @IsOptional()\n    readonly pagination: PaginationType;\n\n    /**\n     * The page number for pagination.\n     *\n     * @type {number}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        description: 'Page number',\n        minimum: 1,\n        default: 1,\n    })\n    @IsOptional()\n    @IsNumberStringOrNumber()\n    @ToNumber()\n    @Min(1)\n    readonly page?: number;\n\n    /**\n     * The number of records per page.\n     *\n     * @type {number}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        description: 'Record limit',\n        minimum: 1,\n        maximum: 500,\n        default: 10,\n    })\n    @IsOptional()\n    @IsNumberStringOrNumber()\n    @ToNumber()\n    @Min(10)\n    @Max(500)\n    readonly limit?: number = 10;\n\n    /**\n     * Filters to apply to the query.\n     *\n     * @type {FilterQueryDto[] | null}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        name: 'filters',\n        required: false,\n        type: String,\n        description: 'Array of filter objects as a JSON string',\n        example: '[{\"field\":\"name\",\"operator\":\"=\",\"value\":\"IN\"}]',\n    })\n    @IsOptional()\n    @Transform(({ value }) => {\n        return value ? plainToInstance(FilterQueryDto, JSON.parse(value)) : undefined;\n    })\n    @ValidateNested({ each: true })\n    @Type(() => FilterQueryDto)\n    filters?: FilterQueryDto[] | null;\n\n    /**\n     * Sorting options for the query.\n     *\n     * @type {SortByDto[] | null}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        name: 'sort',\n        required: false,\n        type: String,\n        description: 'Array of sort objects as a JSON string',\n        example: '[{\"field\":\"name\",\"direction\":\"ASC\"}]',\n    })\n    @IsOptional()\n    @Transform(({ value }) => {\n        return value ? plainToInstance(SortByDto, JSON.parse(value)) : undefined;\n    })\n    @ValidateNested({ each: true })\n    @Type(() => SortByDto)\n    sort?: SortByDto[] | null;\n}\n\n/**\n * DTO class for filter query parameters.\n *\n * @export\n */\nexport class FilterQueryDto {\n    /**\n     * The field to filter on.\n     *\n     * @type {string}\n     * @memberof FilterQueryDto\n     */\n\n    @ApiProperty({ example: 'iso', required: true })\n    @IsNotEmpty()\n    @IsString()\n    field: string;\n\n    /**\n     * The operator to use for filtering.\n     *\n     * @type {string}\n     * @memberof FilterQueryDto\n     */\n\n    @ApiProperty({ example: '=' })\n    @IsNotEmpty()\n    @IsString()\n    operator: string;\n\n    /**\n     * The value to filter by.\n     *\n     * @type {string}\n     * @memberof FilterQueryDto\n     */\n\n    @ApiProperty({ example: 'IN' })\n    @IsNotEmpty()\n    @IsString()\n    value: string;\n}\n\n/**\n * DTO class for sorting options.\n *\n * @export\n */\nexport class SortByDto {\n    // @ApiProperty({ example: 'name' })\n    // @IsString()\n    // @Validate(IsValidField, [Country], {\n    //     message: 'Field must be a valid key of Country',\n    // })\n    // field: keyof Country;\n    /**\n     * The field to sort by.\n     *\n     * @type {string}\n     * @memberof SortByDto\n     */\n\n    @ApiProperty()\n    @IsString()\n    // @IsIn(abc(x : keyof TExposedAccountInfo), {\n    //     message: 'Field must be one of \"name\", \"age\", or \"status\"',\n    // })\n    // @Validate(IsValidField, [{ entity: () => T }], {\n    //     message: 'Field must be a valid key of the specified entity',\n    // })\n    field: string;\n\n    /**\n     * The direction of the sort (ascending or descending).\n     *\n     * @type {string}\n     * @memberof SortByDto\n     */\n\n    @ApiProperty({ example: 'ASC' })\n    @IsString()\n    @Matches(/^(ASC|DESC|asc|desc)$/, {\n        message: 'operator must be one of ASC, DESC, asc, or desc',\n    })\n    direction: string;\n}\n\n// export class PaginatedResultDto {\n//     @ApiProperty()\n//     data: T[];\n\n//     @ApiProperty()\n//     total: number;\n\n//     @ApiProperty()\n//     page: number;\n\n//     @ApiProperty()\n//     limit: number;\n// }\n\n//DX\n// import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\n// import { Type, Transform, plainToInstance } from 'class-transformer';\n// import {\n//     IsOptional,\n//     Min,\n//     Max,\n//     IsNotEmpty,\n//     IsString,\n//     IsArray,\n//     ValidateNested,\n//     Validate,\n//     Matches,\n// } from 'class-validator';\n\n// import { IsNumberStringOrNumber } from '@decorators/number.string.validator';\n// import { ToNumber } from '@decorators/transforms.decorator';\n// import { SortBy } from '@validators/filter.validator';\n\n// export class FilterQueryDto {\n//     @ApiProperty({ example: 'name', required: true })\n//     @IsNotEmpty()\n//     @IsString()\n//     field: string;\n\n//     @ApiProperty({ example: 'LIKE' })\n//     @IsNotEmpty()\n//     @IsString()\n//     operator: string;\n\n//     @ApiProperty({ example: '%John%' })\n//     @IsNotEmpty()\n//     @IsString()\n//     value: string;\n// }\n\n// export class SortByDto {\n//     @ApiProperty({ example: 'name' })\n//     @IsString()\n//     field: string;\n\n//     @ApiProperty({ example: 'ASC' })\n//     @IsString()\n//     @Matches(/^(ASC|DESC|asc|desc)$/, {\n//         message: 'operator must be one of ASC, DESC, asc, or desc',\n//     })\n//     direction: string;\n// }\n\n// export class PaginationQueryDto {\n//     @ApiPropertyOptional({\n//         description: 'Page number',\n//         minimum: 1,\n//         default: 1,\n//     })\n//     @IsOptional()\n//     @IsNumberStringOrNumber()\n//     @ToNumber()\n//     @Min(1)\n//     // @Transform(({ value }) => {\n//     //     const strippedValue = String(value).replace(/['\"]+/g, '');\n//     //     const numberValue = Number(strippedValue);\n//     //     return isNaN(numberValue) ? 'undefined' : numberValue;\n//     // })\n//     readonly page?: number;\n\n//     @ApiPropertyOptional({\n//         description: 'Record limit',\n//         minimum: 1,\n//         maximum: 500,\n//         default: 10,\n//     })\n//     @IsOptional()\n//     @IsNumberStringOrNumber()\n//     @ToNumber()\n//     @Min(10)\n//     @Max(500)\n//     readonly limit?: number = 10;\n\n//     // @IsOptional()\n//     // @IsArray()\n//     // @ValidateNested({ each: true })\n//     // @Type(() => FilterQueryDto)\n//     // filters?: FilterQueryDto[];\n//     // // filters?: any;\n//     @ApiPropertyOptional({\n//         name: 'filters',\n//         required: false,\n//         type: String,\n//         description: 'Array of filter objects as a JSON string',\n//         example:\n//             '[{\"field\":\"name\",\"operator\":\"LIKE\",\"value\":\"John\"},{\"field\":\"age\",\"operator\":\">\",\"value\":\"30\"}]',\n//     })\n//     @IsOptional()\n//     @Transform(({ value }) => {\n//         return value ? plainToInstance(FilterQueryDto, JSON.parse(value)) : undefined;\n//     })\n//     @ValidateNested({ each: true })\n//     @Type(() => FilterQueryDto)\n//     filters?: FilterQueryDto[] | null;\n\n//     // @ApiPropertyOptional({\n//     //     description: ' Name or City:  ASC or DESC',\n//     //     example: 'name ASC',\n//     // })\n//     // @IsOptional()\n//     // @IsString()\n//     // @Validate(SortBy)\n//     // readonly sort?: string;\n//     // @ApiPropertyOptional({ type: [SortByDto], isArray: true })\n//     // @IsOptional()\n//     // @Transform(({ value }) => {\n//     //     return value ? plainToInstance(SortUserDto, JSON.parse(value)) : undefined;\n//     // })\n//     // @ValidateNested({ each: true })\n//     // @Type(() => SortUserDto)\n//     // sort?: SortUserDto[] | null;\n\n//     @ApiPropertyOptional({\n//         name: 'sort',\n//         required: false,\n//         type: String,\n//         description: 'Array of sort objects as a JSON string',\n//         example: '[{\"field\":\"name\",\"direction\":\"ASC\"},{\"field\":\"age\",\"direction\":\"DESC\"}]',\n//     })\n//     @IsOptional()\n//     @Transform(({ value }) => {\n//         return value ? plainToInstance(SortByDto, JSON.parse(value)) : undefined;\n//     })\n//     @ValidateNested({ each: true })\n//     @Type(() => SortByDto)\n//     sort?: SortByDto[] | null;\n// }\n\n// export class PaginatedResultDto {\n//     @ApiProperty()\n//     data: T[];\n\n//     @ApiProperty()\n//     total: number;\n\n//     @ApiProperty()\n//     page: number;\n\n//     @ApiProperty()\n//     limit: number;\n// }\n\n// // import { ApiProperty, ApiExtraModels } from '@nestjs/swagger';\n\n// // import { Type } from 'class-transformer';\n// // import { IsOptional, IsString, IsArray, ValidateNested, IsNumber } from 'class-validator';\n\n// // // export class FilterQueryDto {\n// // //     @ApiProperty({ example: 'name' })\n// // //     field: string;\n\n// // //     @ApiProperty({ example: 'LIKE' })\n// // //     operator: string;\n\n// // //     @ApiProperty({ example: '%John%' })\n// // //     value: string;\n// // // }\n// // export class FilterQueryDto {\n// //     @ApiProperty({ example: 'country_name' })\n// //     @IsString()\n// //     field: string;\n\n// //     @ApiProperty({ example: 'LIKE' })\n// //     @IsString()\n// //     operator: string;\n\n// //     @ApiProperty({ example: '%United%' })\n// //     @IsString()\n// //     value: string;\n// // }\n// // @ApiExtraModels(FilterQueryDto)\n// // export class PaginationQueryDto {\n// //     @ApiProperty({ example: 1, required: false })\n// //     @IsOptional()\n// //     @IsNumber()\n// //     @Type(() => Number)\n// //     page?: number = 1;\n\n// //     @ApiProperty({ example: 10, required: false })\n// //     @IsOptional()\n// //     @IsNumber()\n// //     @Type(() => Number)\n// //     limit?: number = 10;\n\n// //     // @ApiProperty({\n// //     //     type: [FilterQueryDto],\n// //     //     required: false,\n// //     //     isArray: true,\n// //     // })\n// //     // @Type(() => FilterQueryDto)\n// //     // filters?: FilterQueryDto[];\n// //     @ApiProperty({\n// //         type: FilterQueryDto,\n// //         required: false,\n// //         isArray: true,\n// //     })\n// //     // @IsOptional()\n// //     @IsArray()\n// //     @ValidateNested({ each: true })\n// //     @Type(() => FilterQueryDto)\n// //     filters?: FilterQueryDto[];\n\n// //     // @ApiProperty({\n// //     //     type: [Object],\n// //     //     // items: {\n// //     //     //     type: 'object',\n// //     //     //     items: {\n// //     //     //         type: 'object',\n// //     //     //     },\n// //     //     // },\n// //     // })\n// //     // coords: FilterQueryDto[];\n\n// //     // @ApiProperty({ type: String, required: false })\n// //     // @IsOptional()\n// //     // @IsArray()\n// //     // @ValidateNested({ each: true })\n// //     // @Type(() => FilterQueryDto)\n// //     // filters?: FilterQueryDto[];\n\n// //     @ApiProperty({ example: 'name ASC1', required: false })\n// //     sort?: string;\n// // }\n\n// // // export class PaginationQueryDto {\n// // //     @ApiProperty({ example: 1, required: false })\n// // //     page?: number = 1;\n\n// // //     @ApiProperty({ example: 10, required: false })\n// // //     limit?: number = 10;\n\n// // //     // @ApiProperty({ type: [FilterQueryDto], required: false, isArray: true })\n// // //     // filters?: FilterQueryDto[];\n\n// // //     // @ApiProperty({ type: String, required: false, isArray: true })\n// // //     // filters?: FilterQueryDto[];\n\n// // //     // @ApiProperty({ type: [FilterQueryDto], required: false, isArray: true })\n// // //     // @Type(() => FilterQueryDto)\n// // //     // filters?: FilterQueryDto[];\n\n// // //     @ApiProperty({ type: [FilterQueryDto], required: false })\n// // //     @IsOptional()\n// // //     @IsArray()\n// // //     @ValidateNested({ each: true })\n// // //     @Type(() => FilterQueryDto)\n// // //     filters?: FilterQueryDto[];\n\n// // //     @ApiProperty({ example: 'name ASC1', required: false })\n// // //     sort?: string;\n// // // }\n\n// // export class PaginatedResultDto {\n// //     @ApiProperty()\n// //     data: T[];\n\n// //     @ApiProperty()\n// //     total: number;\n\n// //     @ApiProperty()\n// //     page: number;\n\n// //     @ApiProperty()\n// //     limit: number;\n// // }\n\n// // export class abc {\n// //     @ApiProperty()\n// //     page: number;\n\n// //     @ApiProperty()\n// //     limit: number;\n// // }\n\n// // import { applyDecorators } from '@nestjs/common';\n// // import { ApiProperty, ApiExtraModels, ApiQuery, getSchemaPath } from '@nestjs/swagger';\n\n// // /**\n// //  * Combines Swagger Decorators to create a description for `filters[name]=something`\n// //  *  - has support for swagger\n// //  *  - automatic transformation with nestjs\n// //  */\n// // // // eslint-disable-next-line @typescript-eslint/ban-types,@typescript-eslint/explicit-module-boundary-types\n// // // export function ApiFilterQuery(fieldName: string, filterDto: Function) {\n// // //     return applyDecorators(\n// // //         ApiExtraModels(filterDto),\n// // //         ApiQuery({\n// // //             required: false,\n// // //             name: fieldName,\n// // //             style: 'deepObject',\n// // //             explode: true,\n// // //             type: 'object',\n// // //             schema: {\n// // //                 $ref: getSchemaPath(filterDto),\n// // //             },\n// // //         })\n// // //     );\n// // // }\n// // // eslint-disable-next-line @typescript-eslint/ban-types,@typescript-eslint/explicit-module-boundary-types\n// // export function ApiFilterQuery(fieldName: string, filterDto: Function, index: number) {\n// //     return applyDecorators(\n// //         ApiExtraModels(filterDto),\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}]`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //             schema: {\n// //                 $ref: getSchemaPath(filterDto),\n// //             },\n// //         })\n// //     );\n// // }\n\n// // export function ApiFilterQuery(fieldName: string, index: number) {\n// //     return applyDecorators(\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}].field`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //         }),\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}].operator`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //         }),\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}].value`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //         })\n// //     );\n// // }\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HelperModule.html":{"url":"modules/HelperModule.html","title":"module - HelperModule","body":"\n                   \n\n\n\n\n    Modules\n    HelperModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_HelperModule\n\n\n\ncluster_HelperModule_providers\n\n\n\ncluster_HelperModule_exports\n\n\n\n\nPaginationService \n\nPaginationService \n\n\n\nPrismaService \n\nPrismaService \n\n\n\nUtilsService \n\nUtilsService \n\n\n\nHelperModule\n\nHelperModule\n\nPaginationService  -->\n\nHelperModule->PaginationService \n\n\n\nPrismaService  -->\n\nHelperModule->PrismaService \n\n\n\nUtilsService  -->\n\nHelperModule->UtilsService \n\n\n\n\n\nPaginationService\n\nPaginationService\n\nHelperModule -->\n\nPaginationService->HelperModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nHelperModule -->\n\nPrismaService->HelperModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/helper/helper.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            The HelperModule is a global module that provides common utility services across the application.\nIt is marked as global, meaning its providers are available throughout the application without needing to import the module in other modules.\n\nThe HttpModule is imported to allow services within this module to make HTTP requests.\nThe module exports its services and HttpModule, making them available for use in other modules.\n\nExample :```typescript\n@Module({\n    imports: [HttpModule],\n    providers: [PaginationService, PrismaService, UtilsService],\n    exports: [PaginationService, PrismaService, UtilsService, HttpModule],\n})\nexport class HelperModule {}Example :\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PaginationService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PaginationService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            UtilsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from '@nestjs/axios';\nimport { Global, Module } from '@nestjs/common';\n\n// import { ConfigService } from './services/config.service';\nimport { PaginationService } from './services/pagination.service';\nimport { PrismaService } from './services/prisma.service';\nimport { UtilsService } from './services/util.service';\n\nconst providers = [PaginationService, PrismaService, UtilsService]; // ConfigService,\n\n/**\n * @module HelperModule\n *\n * @description\n * The `HelperModule` is a global module that provides common utility services across the application.\n * It is marked as global, meaning its providers are available throughout the application without needing to import the module in other modules.\n *\n * @remarks\n * - The `HttpModule` is imported to allow services within this module to make HTTP requests.\n * - The module exports its services and `HttpModule`, making them available for use in other modules.\n *\n * @example\n * ```typescript\n * @Module({\n *     imports: [HttpModule],\n *     providers: [PaginationService, PrismaService, UtilsService],\n *     exports: [PaginationService, PrismaService, UtilsService, HttpModule],\n * })\n * export class HelperModule {}\n * ```\n */\n\n@Global()\n@Module({\n    // imports: [],\n    // providers: [ConfigService, PrismaService],\n    // controllers: [],\n    // exports: [ConfigService, PrismaService],\n    providers,\n    imports: [HttpModule],\n    exports: [...providers, HttpModule],\n})\nexport class HelperModule {}\n\n// import { Module } from '@nestjs/common';\n// import { JwtService } from '@nestjs/jwt';\n\n// import { EncryptionService } from './services/encryption.service';\n// import { PrismaService } from './services/prisma.service';\n// import { TaskService } from './services/task.service';\n\n// @Module({\n//   imports: [],\n//   providers: [JwtService, EncryptionService, PrismaService, TaskService],\n//   controllers: [],\n//   exports: [EncryptionService, PrismaService, TaskService],\n// })\n// export class HelperModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HomeController.html":{"url":"controllers/HomeController.html","title":"controller - HomeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HomeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/home/home.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                This file defines the HomeController class, which handles HTTP requests related to the home feature of the application.\nThe HomeController class is responsible for handling incoming HTTP requests and returning responses for the home-related endpoints.\nThis controller uses the HomeService to perform the necessary business logic.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                appInfo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        appInfo\n                        \n                    \n                \n            \n            \n                \n                        \n                    appInfo()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/home/home.controller.ts:30\n                        \n                    \n\n\n            \n                \n                        Handles GET requests to the root endpoint and returns application information.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The application information.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\n\nimport { HomeService } from './home.service';\n\n/**\n * @fileoverview\n * This file defines the `HomeController` class, which handles HTTP requests related to the home feature of the application.\n *\n * @module\n * @description\n * The `HomeController` class is responsible for handling incoming HTTP requests and returning responses for the home-related endpoints.\n * This controller uses the `HomeService` to perform the necessary business logic.\n */\n\n@ApiTags('Home')\n@Controller()\nexport class HomeController {\n    /**\n     * Constructs a new `HomeController`.\n     * @param {HomeService} service - The service used to handle business logic for home-related endpoints.\n     */\n    constructor(private service: HomeService) {}\n\n    /**\n     * Handles GET requests to the root endpoint and returns application information.\n     * @returns {object} The application information.\n     */\n    @Get()\n    appInfo(): object {\n        return this.service.appInfo();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HomeModule.html":{"url":"modules/HomeModule.html","title":"module - HomeModule","body":"\n                   \n\n\n\n\n    Modules\n    HomeModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_HomeModule\n\n\n\ncluster_HomeModule_providers\n\n\n\n\nHomeService\n\nHomeService\n\n\n\nHomeModule\n\nHomeModule\n\nHomeModule -->\n\nHomeService->HomeModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/home/home.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            This file defines the HomeModule class, which is responsible for the home-related functionalities of the application.\nThe HomeModule class configures the home feature of the application by declaring its controller and service.\nThis module handles the business logic and request handling for home-related endpoints.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HomeService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            HomeController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { HomeController } from './home.controller';\nimport { HomeService } from './home.service';\n\n/**\n * @fileoverview\n * This file defines the `HomeModule` class, which is responsible for the home-related functionalities of the application.\n *\n * @module\n * @description\n * The `HomeModule` class configures the home feature of the application by declaring its controller and service.\n * This module handles the business logic and request handling for home-related endpoints.\n */\n\n@Module({\n    imports: [],\n    controllers: [\n        /**\n         * Controller responsible for handling incoming requests and returning responses related to the home feature.\n         */\n        HomeController,\n    ],\n    providers: [\n        /**\n         * Service responsible for handling the business logic related to the home feature.\n         */\n        HomeService,\n    ],\n})\nexport class HomeModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HomeService.html":{"url":"injectables/HomeService.html","title":"injectable - HomeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HomeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/home/home.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the HomeService class, which provides methods for retrieving application information from the configuration.\nThe HomeService class is responsible for retrieving application information from the configuration using the ConfigService.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                appInfo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/home/home.service.ts:15\n                            \n                        \n\n                \n                    \n                            Constructs a new HomeService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe configuration service used to access application configuration values.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        appInfo\n                        \n                    \n                \n            \n            \n                \nappInfo()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/home/home.service.ts:26\n                        \n                    \n\n\n            \n                \n                        Retrieves and returns application information from the configuration.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                An object containing the application's name, description, app prefix, and API prefix.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\nimport { AllConfigType } from '@config/type/config.type';\n\n/**\n * @fileoverview\n * This file defines the `HomeService` class, which provides methods for retrieving application information from the configuration.\n *\n * @module\n * @description\n * The `HomeService` class is responsible for retrieving application information from the configuration using the `ConfigService`.\n */\n@Injectable()\nexport class HomeService {\n    /**\n     * Constructs a new `HomeService`.\n     * @param {ConfigService} configService - The configuration service used to access application configuration values.\n     */\n    constructor(private configService: ConfigService) {}\n\n    /**\n     * Retrieves and returns application information from the configuration.\n     * @returns {object} An object containing the application's name, description, app prefix, and API prefix.\n     */\n    appInfo(): object {\n        return {\n            name: this.configService.get('app.name', { infer: true }),\n            description: this.configService.get('app.description', { infer: true }),\n            appPrefix: this.configService.get('app.appPrefix', { infer: true }),\n            apiPrefix: this.configService.get('app.apiPrefix', { infer: true }),\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpErrorFilter.html":{"url":"classes/HttpErrorFilter.html","title":"class - HttpErrorFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpErrorFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/exceptions/http-error.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                Global HTTP error filter.\nadditional error information such as the HTTP status, timestamp, request URL, method, and message.\nIt logs the error details, particularly for internal server errors.\nExample :```typescript\nimport { HttpErrorFilter } from './path/to/filter';@Module({\n  providers: [\n    {\n      provide: APP_FILTER,\n      useClass: HttpErrorFilter,\n    },\n  ],\n})\nexport class AppModule {}\nExample :\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/exceptions/http-error.filter.ts:50\n                        \n                    \n\n\n            \n                \n                        Method that handles the exception.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                        HttpException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe exception that was thrown.\n\n\n                                            \n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe host object containing the details of the current request.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n    ExceptionFilter,\n    Catch,\n    ArgumentsHost,\n    Logger,\n    HttpException,\n    HttpStatus,\n} from '@nestjs/common';\n\n// import * as _ from 'lodash';\n\n//   import { SQLService } from \"../shared/services/sql.service\";\n\n//   import { Query } from \"./query\";\n\n/**\n * Global HTTP error filter.\n *\n * @description This filter catches all HTTP exceptions and formats the response to include\n * additional error information such as the HTTP status, timestamp, request URL, method, and message.\n * It logs the error details, particularly for internal server errors.\n *\n * @example\n * ```typescript\n * import { HttpErrorFilter } from './path/to/filter';\n *\n * @Module({\n *   providers: [\n *     {\n *       provide: APP_FILTER,\n *       useClass: HttpErrorFilter,\n *     },\n *   ],\n * })\n * export class AppModule {}\n * ```\n *\n * @implements {ExceptionFilter}\n */\n\n@Catch()\nexport class HttpErrorFilter implements ExceptionFilter {\n    /**\n     * Method that handles the exception.\n     *\n     * @param {HttpException} exception - The exception that was thrown.\n     * @param {ArgumentsHost} host - The host object containing the details of the current request.\n     */\n\n    catch(exception: HttpException, host: ArgumentsHost) {\n        const ctx = host.switchToHttp();\n        const response = ctx.getResponse();\n        const request = ctx.getRequest();\n        const status = exception.getStatus\n            ? exception.getStatus()\n            : HttpStatus.INTERNAL_SERVER_ERROR;\n        const errorResponse = {\n            code: status,\n            timestamp: new Date().toLocaleTimeString,\n            path: request.url,\n            method: request.method,\n            message:\n                status !== HttpStatus.INTERNAL_SERVER_ERROR\n                    ? exception.message || null\n                    : 'Internal server error',\n        };\n\n        if (status === HttpStatus.INTERNAL_SERVER_ERROR) {\n            Logger.error(`${request.method} ${request.url}`, exception.stack, 'ExceptionFilter');\n        } else {\n            Logger.error(\n                `${request.method} ${request.url}`,\n                JSON.stringify(errorResponse),\n                'ExceptionFilter'\n            );\n        }\n\n        response.status(status).json(errorResponse);\n\n        //   try {\n        //     const sqlService = new SQLService();\n        //     const query = new Query();\n        //     const reqstrobj = { body: _.clone(request.body), header: _.clone(request.header) };\n        //     const reqstr = JSON.stringify(reqstrobj);\n\n        //     const resstrobj = { res: _.clone(errorResponse), exception: exception.stack };\n        //     const resstr = JSON.stringify(resstrobj);\n        //     sqlService.run(\n        //       query.addHttpQueryError(\"HTTPERROR\", request.method, request.url, reqstr, resstr)\n        //     );\n        //   } catch (error) {}\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/http-exception.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                Exception filter for handling HTTP exceptions in a NestJS application.\nThis filter catches all HttpException instances and formats the response\nwith the status code, timestamp, and request path.\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/filters/http-exception.filter.ts:27\n                        \n                    \n\n\n            \n                \n                        Handles the HTTP exception and formats the error response.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                        HttpException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The HTTP exception to handle.\n\n                                            \n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The arguments host for accessing request and response objects.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ExceptionFilter, Catch, ArgumentsHost, HttpException } from '@nestjs/common';\n\nimport { Request, Response } from 'express';\n\n/**\n * Exception filter for handling HTTP exceptions in a NestJS application.\n *\n * This filter catches all `HttpException` instances and formats the response\n * with the status code, timestamp, and request path.\n *\n * @export\n * @class HttpExceptionFilter\n * @implements {ExceptionFilter}\n */\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n    /**\n     * Handles the HTTP exception and formats the error response.\n     *\n     * @param {HttpException} exception The HTTP exception to handle.\n     * @param {ArgumentsHost} host The arguments host for accessing request and response objects.\n     *\n     * @memberof HttpExceptionFilter\n     */\n\n    catch(exception: HttpException, host: ArgumentsHost) {\n        console.log('HTTP EXEPTION from filter');\n        const ctx = host.switchToHttp();\n        const response = ctx.getResponse();\n        const request = ctx.getRequest();\n        const status = exception.getStatus();\n\n        response.status(status).json({\n            statusCode: status,\n            timestamp: new Date().toISOString(),\n            path: request.url,\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAppConfig.html":{"url":"interfaces/IAppConfig.html","title":"interface - IAppConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IAppConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interfaces/app.interfaces.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration interface for application settings.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            apiPrefix\n                                        \n                                \n                                \n                                        \n                                            backendDomain\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            frontendDomain\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            port\n                                        \n                                \n                                \n                                        \n                                            workingDirectory\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        apiPrefix\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        apiPrefix:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The API prefix used in the application.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        backendDomain\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        backendDomain:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The domain for the backend application.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        frontendDomain\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        frontendDomain:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The domain for the frontend application.\nThis property is optional.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The name of the application.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        port\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        port:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The port on which the application is running.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        workingDirectory\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        workingDirectory:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The working directory of the application.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        'use strict';\n\n'use strict';\n\n/**\n * Configuration interface for application settings.\n *\n * @export\n * @interface IAppConfig\n */\nexport interface IAppConfig {\n    /**\n     * The name of the application.\n     *\n     * @type {string}\n     * @memberof IAppConfig\n     */\n\n    name: string;\n\n    /**\n     * The working directory of the application.\n     *\n     * @type {string}\n     * @memberof IAppConfig\n     */\n\n    workingDirectory: string;\n\n    /**\n     * The domain for the frontend application.\n     * This property is optional.\n     *\n     * @type {string}\n     * @memberof IAppConfig\n     */\n\n    frontendDomain?: string;\n\n    /**\n     * The domain for the backend application.\n     *\n     * @type {string}\n     * @memberof IAppConfig\n     */\n\n    backendDomain: string;\n\n    /**\n     * The port on which the application is running.\n     *\n     * @type {number}\n     * @memberof IAppConfig\n     */\n\n    port: number;\n\n    /**\n     * The API prefix used in the application.\n     *\n     * @type {string}\n     * @memberof IAppConfig\n     */\n\n    apiPrefix: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAwsConfig.html":{"url":"interfaces/IAwsConfig.html","title":"interface - IAwsConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IAwsConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interfaces/aws.interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            AWS_S3_ACCESS_KEY_ID\n                                        \n                                \n                                \n                                        \n                                            AWS_S3_BUCKET_NAME\n                                        \n                                \n                                \n                                        \n                                            AWS_S3_COMPANION_SECRET\n                                        \n                                \n                                \n                                        \n                                            AWS_S3_DEFAULT_REGION\n                                        \n                                \n                                \n                                        \n                                            AWS_S3_ENDPOINT\n                                        \n                                \n                                \n                                        \n                                            AWS_S3_SECRET_ACCESS_KEY\n                                        \n                                \n                                \n                                        \n                                            AWS_S3_SERVER_HOST\n                                        \n                                \n                                \n                                        \n                                            AWS_S3_TEMP_DIRECTORY\n                                        \n                                \n                                \n                                        \n                                            TUS_STORAGE_DRIVER\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        AWS_S3_ACCESS_KEY_ID\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        AWS_S3_ACCESS_KEY_ID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        AWS_S3_BUCKET_NAME\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        AWS_S3_BUCKET_NAME:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        AWS_S3_COMPANION_SECRET\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        AWS_S3_COMPANION_SECRET:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        AWS_S3_DEFAULT_REGION\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        AWS_S3_DEFAULT_REGION:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        AWS_S3_ENDPOINT\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        AWS_S3_ENDPOINT:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        AWS_S3_SECRET_ACCESS_KEY\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        AWS_S3_SECRET_ACCESS_KEY:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        AWS_S3_SERVER_HOST\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        AWS_S3_SERVER_HOST:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        AWS_S3_TEMP_DIRECTORY\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        AWS_S3_TEMP_DIRECTORY:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        TUS_STORAGE_DRIVER\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        TUS_STORAGE_DRIVER:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        'use strict';\n\nexport interface IAwsConfig {\n    AWS_S3_ACCESS_KEY_ID: string;\n    AWS_S3_SECRET_ACCESS_KEY: string;\n    AWS_S3_BUCKET_NAME: string;\n    AWS_S3_DEFAULT_REGION: string;\n    AWS_S3_TEMP_DIRECTORY: string;\n    AWS_S3_ENDPOINT: string;\n\n    AWS_S3_SERVER_HOST: string;\n    AWS_S3_COMPANION_SECRET: string;\n    TUS_STORAGE_DRIVER: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IFileConfig.html":{"url":"interfaces/IFileConfig.html","title":"interface - IFileConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IFileConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interfaces/file.interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            accessKeyId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            awsDefaultS3Bucket\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            awsS3Region\n                                        \n                                \n                                \n                                        \n                                            driver\n                                        \n                                \n                                \n                                        \n                                            maxFileSize\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            secretAccessKey\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accessKeyId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accessKeyId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        awsDefaultS3Bucket\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        awsDefaultS3Bucket:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        awsS3Region\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        awsS3Region:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        driver\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        driver:         FileDriver\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         FileDriver\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxFileSize\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxFileSize:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        secretAccessKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        secretAccessKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        'use strict';\n\nimport { FileDriver } from '@config/type/file-config.type';\nexport interface IFileConfig {\n    driver: FileDriver;\n    accessKeyId?: string;\n    secretAccessKey?: string;\n    awsDefaultS3Bucket?: string;\n    awsS3Region?: string;\n    maxFileSize: number;\n    // encoding: string;\n    // buffer: Buffer;\n    // fieldname: string;\n    // mimetype: string;\n    // originalname: string;\n    // size: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IJWTConfig.html":{"url":"interfaces/IJWTConfig.html","title":"interface - IJWTConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IJWTConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interfaces/jwt.interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            algorithm\n                                        \n                                \n                                \n                                        \n                                            audience\n                                        \n                                \n                                \n                                        \n                                            expirationTime\n                                        \n                                \n                                \n                                        \n                                            expiresInSeconds\n                                        \n                                \n                                \n                                        \n                                            issuer\n                                        \n                                \n                                \n                                        \n                                            secret\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        algorithm\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        algorithm:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        audience\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        audience:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expirationTime\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expirationTime:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expiresInSeconds\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expiresInSeconds:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        issuer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        issuer:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        secret\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        secret:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        'use strict';\n\nexport interface IJWTConfig {\n    secret: string;\n    algorithm: string;\n    expiresInSeconds: number;\n    expirationTime: number;\n    issuer: string;\n    audience: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/INodeEmailerConfig.html":{"url":"interfaces/INodeEmailerConfig.html","title":"interface - INodeEmailerConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  INodeEmailerConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interfaces/node-emailer.interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            NODE_EMAILER_FROM_EMAIL\n                                        \n                                \n                                \n                                        \n                                            NODE_EMAILER_HOST\n                                        \n                                \n                                \n                                        \n                                            NODE_EMAILER_PASSWORD\n                                        \n                                \n                                \n                                        \n                                            NODE_EMAILER_PORT\n                                        \n                                \n                                \n                                        \n                                            NODE_EMAILER_TO_EMAIL\n                                        \n                                \n                                \n                                        \n                                            NODE_EMAILER_USER\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        NODE_EMAILER_FROM_EMAIL\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        NODE_EMAILER_FROM_EMAIL:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        NODE_EMAILER_HOST\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        NODE_EMAILER_HOST:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        NODE_EMAILER_PASSWORD\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        NODE_EMAILER_PASSWORD:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        NODE_EMAILER_PORT\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        NODE_EMAILER_PORT:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        NODE_EMAILER_TO_EMAIL\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        NODE_EMAILER_TO_EMAIL:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        NODE_EMAILER_USER\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        NODE_EMAILER_USER:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        'use strict';\n\nexport interface INodeEmailerConfig {\n    NODE_EMAILER_HOST: string;\n    NODE_EMAILER_PORT: number;\n    NODE_EMAILER_USER: string;\n    NODE_EMAILER_PASSWORD: string;\n    NODE_EMAILER_FROM_EMAIL: string;\n    NODE_EMAILER_TO_EMAIL: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPageMetaDtoParameters.html":{"url":"interfaces/IPageMetaDtoParameters.html","title":"interface - IPageMetaDtoParameters","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPageMetaDtoParameters\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/dto/pagination.meta.dto.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            maxPages\n                                        \n                                \n                                \n                                        \n                                            paginationQueryDto\n                                        \n                                \n                                \n                                        \n                                            totalItems\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        maxPages\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxPages:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        paginationQueryDto\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        paginationQueryDto:         PaginationQueryDto\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PaginationQueryDto\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        totalItems\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        totalItems:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\n\nimport { PaginationQueryDto } from '@utils/dto/pagination.dto';\n\nexport interface IPageMetaDtoParameters {\n    paginationQueryDto: PaginationQueryDto;\n    totalItems: number;\n    maxPages?: number;\n}\n\n/**\n * PaginationMetaDto provides metadata for paginated responses.\n * This class helps in constructing the pagination information that can be used\n * to navigate through large sets of data.\n *\n * @example\n * {\n *   totalItems: 77,\n *   currentPage: 7,\n *   pageSize: 10,\n *   totalPages: 8,\n *   startPage: 1,\n *   endPage: 7,\n *   startIndex: 60,\n *   endIndex: 76,\n *   pages: [1, 2, 3, 4, 5, 6, 7]\n * }\n */\n\nexport class PaginationMetaDto {\n    /**\n     * The total number of items available.\n     *\n     * @example 77\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 77, //  'Total records'\n    })\n    readonly totalItems: number;\n\n    /**\n     * The current page number.\n     *\n     * @example 7\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 7, //  'Current page number',\n    })\n    readonly currentPage: number;\n\n    /**\n     * The number of items per page (page size).\n     *\n     * @example 10\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 10, //  'limit / page record number',\n    })\n    readonly pageSize: number;\n\n    /**\n     * The total number of pages based on total items and page size.\n     *\n     * @example 8\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 8, //  'Total pages',\n    })\n    readonly totalPages: number;\n\n    /**\n     * The start page in the pagination controls.\n     *\n     * @example 1\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 1, //  'Start page',\n    })\n    readonly startPage: number;\n\n    /**\n     * The end page in the pagination controls.\n     *\n     * @example 7\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 7, //  'End page',\n    })\n    readonly endPage: number;\n\n    /**\n     * The index of the first item on the current page.\n     *\n     * @example 60\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 0, //  'Record start index',\n    })\n    readonly startIndex: number;\n\n    /**\n     * The index of the last item on the current page.\n     *\n     * @example 76\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 76, //  'Record end index',\n    })\n    readonly endIndex: number;\n\n    /**\n     * An array of page numbers to display in pagination controls.\n     *\n     * @example [1, 2, 3, 4, 5, 6, 7]\n     */\n\n    @ApiPropertyOptional({\n        type: Array,\n        example: [1, 2, 3, 4, 5, 6, 7], //  'Array of page number',\n    })\n    readonly pages: any;\n\n    /**\n     * Creates an instance of PaginationMetaDto.\n     *\n     * @param {IPageMetaDtoParameters} params - Parameters required for creating pagination metadata.\n     */\n\n    constructor({ paginationQueryDto, totalItems, maxPages = 10 }: IPageMetaDtoParameters) {\n        const pageSize = paginationQueryDto.limit || 10;\n        let currentPage = paginationQueryDto.page || 1;\n\n        // calculate total pages\n\n        const totalPages = Math.ceil(totalItems / pageSize);\n\n        // ensure current page isn't out of range\n        if (currentPage  totalPages) {\n            currentPage = totalPages;\n        }\n\n        let startPage: number, endPage: number;\n\n        if (totalPages = totalPages) {\n                // current page near the end\n                startPage = totalPages - maxPages + 1;\n                endPage = totalPages;\n            } else {\n                // current page somewhere in the middle\n                startPage = currentPage - maxPagesBeforeCurrentPage;\n                endPage = currentPage + maxPagesAfterCurrentPage;\n            }\n        }\n\n        // calculate start and end item indexes\n        const startIndex = (currentPage - 1) * pageSize;\n        const endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\n\n        // create an array of pages to ng-repeat in the pager control\n        const pages = Array.from(Array(endPage + 1 - startPage).keys()).map((i) => startPage + i);\n\n        this.totalItems = totalItems;\n        this.currentPage = currentPage;\n        this.pageSize = pageSize;\n        this.totalPages = totalPages;\n        this.startPage = startPage;\n        this.endPage = endPage;\n        this.startIndex = startIndex > 0 ? startIndex : 0;\n        this.endIndex = endIndex > 0 ? endIndex : 0;\n        this.pages = pages;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPaginationFieldConfig.html":{"url":"interfaces/IPaginationFieldConfig.html","title":"interface - IPaginationFieldConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPaginationFieldConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/types/pagination-options.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for configuring pagination fields in a query.\nThis interface provides a contract for configuring how fields should be handled when constructing\npagination queries, including specifying the table to join, generating an alias, and selecting fields.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            alias\n                                        \n                                \n                                \n                                        \n                                            joinTable\n                                        \n                                \n                                \n                                        \n                                            selectFields\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        alias\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        alias:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A function that returns an alias for the table.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        joinTable\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        joinTable:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The table to join for pagination queries.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectFields\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectFields:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A function that returns an array of field names to select based on the provided alias.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface IPaginationFieldConfig {\n    /**\n     * The table to join for pagination queries.\n     *\n     * @type {any}\n     */\n\n    joinTable: any;\n\n    /**\n     * A function that returns an alias for the table.\n     *\n     * @returns {string} - The alias for the table.\n     */\n\n    alias: () => string;\n\n    /**\n     * A function that returns an array of field names to select based on the provided alias.\n     *\n     * @param {string} alias - The alias for the table.\n     * @returns {string[]} - An array of field names to select.\n     */\n\n    selectFields: (alias: string) => string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPostgreSQLConfig.html":{"url":"interfaces/IPostgreSQLConfig.html","title":"interface - IPostgreSQLConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPostgreSQLConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interfaces/postgres.interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            POSTGRES_CONNECTION_LIMIT\n                                        \n                                \n                                \n                                        \n                                            POSTGRES_HOST\n                                        \n                                \n                                \n                                        \n                                            POSTGRES_NAME\n                                        \n                                \n                                \n                                        \n                                            POSTGRES_PASSWORD\n                                        \n                                \n                                \n                                        \n                                            POSTGRES_POOL_TIMEOUT\n                                        \n                                \n                                \n                                        \n                                            POSTGRES_PORT\n                                        \n                                \n                                \n                                        \n                                            POSTGRES_SCHEMA\n                                        \n                                \n                                \n                                        \n                                            POSTGRES_USER\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        POSTGRES_CONNECTION_LIMIT\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        POSTGRES_CONNECTION_LIMIT:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        POSTGRES_HOST\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        POSTGRES_HOST:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        POSTGRES_NAME\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        POSTGRES_NAME:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        POSTGRES_PASSWORD\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        POSTGRES_PASSWORD:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        POSTGRES_POOL_TIMEOUT\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        POSTGRES_POOL_TIMEOUT:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        POSTGRES_PORT\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        POSTGRES_PORT:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        POSTGRES_SCHEMA\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        POSTGRES_SCHEMA:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        POSTGRES_USER\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        POSTGRES_USER:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        'use strict';\n\nexport interface IPostgreSQLConfig {\n    POSTGRES_HOST: string;\n    POSTGRES_PORT: string;\n    POSTGRES_USER: string;\n    POSTGRES_PASSWORD: string;\n    POSTGRES_NAME: string;\n    POSTGRES_CONNECTION_LIMIT: string;\n    POSTGRES_POOL_TIMEOUT: string;\n    POSTGRES_SCHEMA: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISMSConfig.html":{"url":"interfaces/ISMSConfig.html","title":"interface - ISMSConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ISMSConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interfaces/sms.interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            API_KEY\n                                        \n                                \n                                \n                                        \n                                            SENDER_ID\n                                        \n                                \n                                \n                                        \n                                            SMS_PROVIDER_NAME\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        API_KEY\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        API_KEY:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        SENDER_ID\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        SENDER_ID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        SMS_PROVIDER_NAME\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        SMS_PROVIDER_NAME:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        'use strict';\n\nexport interface ISMSConfig {\n    SMS_PROVIDER_NAME: string;\n    API_KEY: string;\n    SENDER_ID: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISendGridConfig.html":{"url":"interfaces/ISendGridConfig.html","title":"interface - ISendGridConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ISendGridConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interfaces/sendgrid.interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            FROM_EMAIL\n                                        \n                                \n                                \n                                        \n                                            SENDGRID_API_KEY\n                                        \n                                \n                                \n                                        \n                                            TO_EMAIL\n                                        \n                                \n                                \n                                        \n                                            WELCOME_EMAIL\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        FROM_EMAIL\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        FROM_EMAIL:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        SENDGRID_API_KEY\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        SENDGRID_API_KEY:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        TO_EMAIL\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        TO_EMAIL:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        WELCOME_EMAIL\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        WELCOME_EMAIL:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        'use strict';\n\nexport interface ISendGridConfig {\n    SENDGRID_API_KEY: string;\n    FROM_EMAIL: string;\n    TO_EMAIL: string;\n    WELCOME_EMAIL: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUploadFileConfig.html":{"url":"interfaces/IUploadFileConfig.html","title":"interface - IUploadFileConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUploadFileConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interfaces/upload-file.interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            FILE_UPLOAD_DESTINATION\n                                        \n                                \n                                \n                                        \n                                            MAX_UPLOAD_FILE_SIZE\n                                        \n                                \n                                \n                                        \n                                            MULTIPLE_FILE_PATH\n                                        \n                                \n                                \n                                        \n                                            PROFILE_PIC_FILE_PATH\n                                        \n                                \n                                \n                                        \n                                            TEMP_FILE_UPLOAD_URL\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        FILE_UPLOAD_DESTINATION\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        FILE_UPLOAD_DESTINATION:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        MAX_UPLOAD_FILE_SIZE\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        MAX_UPLOAD_FILE_SIZE:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        MULTIPLE_FILE_PATH\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        MULTIPLE_FILE_PATH:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        PROFILE_PIC_FILE_PATH\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        PROFILE_PIC_FILE_PATH:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        TEMP_FILE_UPLOAD_URL\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        TEMP_FILE_UPLOAD_URL:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        'use strict';\n\nexport interface IUploadFileConfig {\n    TEMP_FILE_UPLOAD_URL: string;\n    FILE_UPLOAD_DESTINATION: string;\n    MAX_UPLOAD_FILE_SIZE: number;\n    PROFILE_PIC_FILE_PATH: string;\n    MULTIPLE_FILE_PATH: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationMetaDto.html":{"url":"classes/PaginationMetaDto.html","title":"class - PaginationMetaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationMetaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/dto/pagination.meta.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                PaginationMetaDto provides metadata for paginated responses.\nThis class helps in constructing the pagination information that can be used\nto navigate through large sets of data.\nExample :{\n  totalItems: 77,\n  currentPage: 7,\n  pageSize: 10,\n  totalPages: 8,\n  startPage: 1,\n  endPage: 7,\n  startIndex: 60,\n  endIndex: 76,\n  pages: [1, 2, 3, 4, 5, 6, 7]\n}\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Readonly\n                                currentPage\n                            \n                            \n                                    \n                                    Readonly\n                                endIndex\n                            \n                            \n                                    \n                                    Readonly\n                                endPage\n                            \n                            \n                                    \n                                    Readonly\n                                pages\n                            \n                            \n                                    \n                                    Readonly\n                                pageSize\n                            \n                            \n                                    \n                                    Readonly\n                                startIndex\n                            \n                            \n                                    \n                                    Readonly\n                                startPage\n                            \n                            \n                                    \n                                    Readonly\n                                totalItems\n                            \n                            \n                                    \n                                    Readonly\n                                totalPages\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: IPageMetaDtoParameters)\n                    \n                \n                        \n                            \n                                Defined in src/utils/dto/pagination.meta.dto.ts:137\n                            \n                        \n\n                \n                    \n                            Creates an instance of PaginationMetaDto.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                        IPageMetaDtoParameters\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        currentPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: Number, example: 7})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.meta.dto.ts:53\n                        \n                    \n\n            \n                \n                    The current page number.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        endIndex\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: Number, example: 76})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.meta.dto.ts:125\n                        \n                    \n\n            \n                \n                    The index of the last item on the current page.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        endPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: Number, example: 7})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.meta.dto.ts:101\n                        \n                    \n\n            \n                \n                    The end page in the pagination controls.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        pages\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: Array, example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.meta.dto.ts:137\n                        \n                    \n\n            \n                \n                    An array of page numbers to display in pagination controls.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        pageSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: Number, example: 10})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.meta.dto.ts:65\n                        \n                    \n\n            \n                \n                    The number of items per page (page size).\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        startIndex\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: Number, example: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.meta.dto.ts:113\n                        \n                    \n\n            \n                \n                    The index of the first item on the current page.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        startPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: Number, example: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.meta.dto.ts:89\n                        \n                    \n\n            \n                \n                    The start page in the pagination controls.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        totalItems\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: Number, example: 77})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.meta.dto.ts:41\n                        \n                    \n\n            \n                \n                    The total number of items available.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        totalPages\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: Number, example: 8})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.meta.dto.ts:77\n                        \n                    \n\n            \n                \n                    The total number of pages based on total items and page size.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\n\nimport { PaginationQueryDto } from '@utils/dto/pagination.dto';\n\nexport interface IPageMetaDtoParameters {\n    paginationQueryDto: PaginationQueryDto;\n    totalItems: number;\n    maxPages?: number;\n}\n\n/**\n * PaginationMetaDto provides metadata for paginated responses.\n * This class helps in constructing the pagination information that can be used\n * to navigate through large sets of data.\n *\n * @example\n * {\n *   totalItems: 77,\n *   currentPage: 7,\n *   pageSize: 10,\n *   totalPages: 8,\n *   startPage: 1,\n *   endPage: 7,\n *   startIndex: 60,\n *   endIndex: 76,\n *   pages: [1, 2, 3, 4, 5, 6, 7]\n * }\n */\n\nexport class PaginationMetaDto {\n    /**\n     * The total number of items available.\n     *\n     * @example 77\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 77, //  'Total records'\n    })\n    readonly totalItems: number;\n\n    /**\n     * The current page number.\n     *\n     * @example 7\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 7, //  'Current page number',\n    })\n    readonly currentPage: number;\n\n    /**\n     * The number of items per page (page size).\n     *\n     * @example 10\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 10, //  'limit / page record number',\n    })\n    readonly pageSize: number;\n\n    /**\n     * The total number of pages based on total items and page size.\n     *\n     * @example 8\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 8, //  'Total pages',\n    })\n    readonly totalPages: number;\n\n    /**\n     * The start page in the pagination controls.\n     *\n     * @example 1\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 1, //  'Start page',\n    })\n    readonly startPage: number;\n\n    /**\n     * The end page in the pagination controls.\n     *\n     * @example 7\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 7, //  'End page',\n    })\n    readonly endPage: number;\n\n    /**\n     * The index of the first item on the current page.\n     *\n     * @example 60\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 0, //  'Record start index',\n    })\n    readonly startIndex: number;\n\n    /**\n     * The index of the last item on the current page.\n     *\n     * @example 76\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 76, //  'Record end index',\n    })\n    readonly endIndex: number;\n\n    /**\n     * An array of page numbers to display in pagination controls.\n     *\n     * @example [1, 2, 3, 4, 5, 6, 7]\n     */\n\n    @ApiPropertyOptional({\n        type: Array,\n        example: [1, 2, 3, 4, 5, 6, 7], //  'Array of page number',\n    })\n    readonly pages: any;\n\n    /**\n     * Creates an instance of PaginationMetaDto.\n     *\n     * @param {IPageMetaDtoParameters} params - Parameters required for creating pagination metadata.\n     */\n\n    constructor({ paginationQueryDto, totalItems, maxPages = 10 }: IPageMetaDtoParameters) {\n        const pageSize = paginationQueryDto.limit || 10;\n        let currentPage = paginationQueryDto.page || 1;\n\n        // calculate total pages\n\n        const totalPages = Math.ceil(totalItems / pageSize);\n\n        // ensure current page isn't out of range\n        if (currentPage  totalPages) {\n            currentPage = totalPages;\n        }\n\n        let startPage: number, endPage: number;\n\n        if (totalPages = totalPages) {\n                // current page near the end\n                startPage = totalPages - maxPages + 1;\n                endPage = totalPages;\n            } else {\n                // current page somewhere in the middle\n                startPage = currentPage - maxPagesBeforeCurrentPage;\n                endPage = currentPage + maxPagesAfterCurrentPage;\n            }\n        }\n\n        // calculate start and end item indexes\n        const startIndex = (currentPage - 1) * pageSize;\n        const endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\n\n        // create an array of pages to ng-repeat in the pager control\n        const pages = Array.from(Array(endPage + 1 - startPage).keys()).map((i) => startPage + i);\n\n        this.totalItems = totalItems;\n        this.currentPage = currentPage;\n        this.pageSize = pageSize;\n        this.totalPages = totalPages;\n        this.startPage = startPage;\n        this.endPage = endPage;\n        this.startIndex = startIndex > 0 ? startIndex : 0;\n        this.endIndex = endIndex > 0 ? endIndex : 0;\n        this.pages = pages;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationQueryDto.html":{"url":"classes/PaginationQueryDto.html","title":"class - PaginationQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/dto/pagination.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO class for pagination query parameters.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                filters\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                pagination\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                sort\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        filters\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FilterQueryDto[] | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({name: 'filters', required: false, type: String, description: 'Array of filter objects as a JSON string', example: '[{\"field\":\"name\",\"operator\":\"=\",\"value\":\"IN\"}]'})@IsOptional()@Transform( => )@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.dto.ts:119\n                        \n                    \n\n            \n                \n                    Filters to apply to the query.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Record limit', minimum: 1, maximum: 500, default: 10})@IsOptional()@IsNumberStringOrNumber()@ToNumber()@Min(10)@Max(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.dto.ts:97\n                        \n                    \n\n            \n                \n                    The number of records per page.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Page number', minimum: 1, default: 1})@IsOptional()@IsNumberStringOrNumber()@ToNumber()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.dto.ts:77\n                        \n                    \n\n            \n                \n                    The page number for pagination.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        pagination\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PaginationType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Pagination must all (Page and has_next_page), infinity (only has_next_page), paginate(only page)', enum: PaginationType, default: undefined})@IsEnum(PaginationType)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.dto.ts:59\n                        \n                    \n\n            \n                \n                    The type of pagination to apply.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        sort\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SortByDto[] | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({name: 'sort', required: false, type: String, description: 'Array of sort objects as a JSON string', example: '[{\"field\":\"name\",\"direction\":\"ASC\"}]'})@IsOptional()@Transform( => )@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.dto.ts:141\n                        \n                    \n\n            \n                \n                    Sorting options for the query.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nimport { Type, Transform, plainToInstance } from 'class-transformer';\nimport {\n    IsOptional,\n    Min,\n    Max,\n    IsNotEmpty,\n    IsString,\n    ValidateNested,\n    Matches,\n    IsEnum,\n    // Validate,\n    // IsIn,\n} from 'class-validator';\n\n// import { IsValidField } from '@core/validators/field.validator'; // Import the custom validator\nimport { IsNumberStringOrNumber } from '@decorators/number.string.validator';\nimport { ToNumber } from '@decorators/transforms.decorator';\n// import { IsNumberStringOrNumber } from '@decorators/number.string.validator';\n// import { ToNumber } from '@decorators/transforms.decorator';\n// import { Country } from '@modules/countries/dto/country';\n\n/**\n * Enum representing different pagination types.\n *\n * @export\n * @enum {string}\n */\n\nexport enum PaginationType {\n    NONE = 'no',\n    INFINITY = 'infinity',\n    PAGINATE = 'paginate',\n    ALL = 'all',\n}\n\n/**\n * DTO class for pagination query parameters.\n *\n * @export\n */\nexport class PaginationQueryDto {\n    /**\n     * The type of pagination to apply.\n     *\n     * @type {PaginationType}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        description:\n            'Pagination must all (Page and has_next_page), infinity (only has_next_page), paginate(only page)',\n        enum: PaginationType,\n        default: PaginationType.ALL,\n    })\n    @IsEnum(PaginationType)\n    @IsOptional()\n    readonly pagination: PaginationType;\n\n    /**\n     * The page number for pagination.\n     *\n     * @type {number}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        description: 'Page number',\n        minimum: 1,\n        default: 1,\n    })\n    @IsOptional()\n    @IsNumberStringOrNumber()\n    @ToNumber()\n    @Min(1)\n    readonly page?: number;\n\n    /**\n     * The number of records per page.\n     *\n     * @type {number}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        description: 'Record limit',\n        minimum: 1,\n        maximum: 500,\n        default: 10,\n    })\n    @IsOptional()\n    @IsNumberStringOrNumber()\n    @ToNumber()\n    @Min(10)\n    @Max(500)\n    readonly limit?: number = 10;\n\n    /**\n     * Filters to apply to the query.\n     *\n     * @type {FilterQueryDto[] | null}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        name: 'filters',\n        required: false,\n        type: String,\n        description: 'Array of filter objects as a JSON string',\n        example: '[{\"field\":\"name\",\"operator\":\"=\",\"value\":\"IN\"}]',\n    })\n    @IsOptional()\n    @Transform(({ value }) => {\n        return value ? plainToInstance(FilterQueryDto, JSON.parse(value)) : undefined;\n    })\n    @ValidateNested({ each: true })\n    @Type(() => FilterQueryDto)\n    filters?: FilterQueryDto[] | null;\n\n    /**\n     * Sorting options for the query.\n     *\n     * @type {SortByDto[] | null}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        name: 'sort',\n        required: false,\n        type: String,\n        description: 'Array of sort objects as a JSON string',\n        example: '[{\"field\":\"name\",\"direction\":\"ASC\"}]',\n    })\n    @IsOptional()\n    @Transform(({ value }) => {\n        return value ? plainToInstance(SortByDto, JSON.parse(value)) : undefined;\n    })\n    @ValidateNested({ each: true })\n    @Type(() => SortByDto)\n    sort?: SortByDto[] | null;\n}\n\n/**\n * DTO class for filter query parameters.\n *\n * @export\n */\nexport class FilterQueryDto {\n    /**\n     * The field to filter on.\n     *\n     * @type {string}\n     * @memberof FilterQueryDto\n     */\n\n    @ApiProperty({ example: 'iso', required: true })\n    @IsNotEmpty()\n    @IsString()\n    field: string;\n\n    /**\n     * The operator to use for filtering.\n     *\n     * @type {string}\n     * @memberof FilterQueryDto\n     */\n\n    @ApiProperty({ example: '=' })\n    @IsNotEmpty()\n    @IsString()\n    operator: string;\n\n    /**\n     * The value to filter by.\n     *\n     * @type {string}\n     * @memberof FilterQueryDto\n     */\n\n    @ApiProperty({ example: 'IN' })\n    @IsNotEmpty()\n    @IsString()\n    value: string;\n}\n\n/**\n * DTO class for sorting options.\n *\n * @export\n */\nexport class SortByDto {\n    // @ApiProperty({ example: 'name' })\n    // @IsString()\n    // @Validate(IsValidField, [Country], {\n    //     message: 'Field must be a valid key of Country',\n    // })\n    // field: keyof Country;\n    /**\n     * The field to sort by.\n     *\n     * @type {string}\n     * @memberof SortByDto\n     */\n\n    @ApiProperty()\n    @IsString()\n    // @IsIn(abc(x : keyof TExposedAccountInfo), {\n    //     message: 'Field must be one of \"name\", \"age\", or \"status\"',\n    // })\n    // @Validate(IsValidField, [{ entity: () => T }], {\n    //     message: 'Field must be a valid key of the specified entity',\n    // })\n    field: string;\n\n    /**\n     * The direction of the sort (ascending or descending).\n     *\n     * @type {string}\n     * @memberof SortByDto\n     */\n\n    @ApiProperty({ example: 'ASC' })\n    @IsString()\n    @Matches(/^(ASC|DESC|asc|desc)$/, {\n        message: 'operator must be one of ASC, DESC, asc, or desc',\n    })\n    direction: string;\n}\n\n// export class PaginatedResultDto {\n//     @ApiProperty()\n//     data: T[];\n\n//     @ApiProperty()\n//     total: number;\n\n//     @ApiProperty()\n//     page: number;\n\n//     @ApiProperty()\n//     limit: number;\n// }\n\n//DX\n// import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\n// import { Type, Transform, plainToInstance } from 'class-transformer';\n// import {\n//     IsOptional,\n//     Min,\n//     Max,\n//     IsNotEmpty,\n//     IsString,\n//     IsArray,\n//     ValidateNested,\n//     Validate,\n//     Matches,\n// } from 'class-validator';\n\n// import { IsNumberStringOrNumber } from '@decorators/number.string.validator';\n// import { ToNumber } from '@decorators/transforms.decorator';\n// import { SortBy } from '@validators/filter.validator';\n\n// export class FilterQueryDto {\n//     @ApiProperty({ example: 'name', required: true })\n//     @IsNotEmpty()\n//     @IsString()\n//     field: string;\n\n//     @ApiProperty({ example: 'LIKE' })\n//     @IsNotEmpty()\n//     @IsString()\n//     operator: string;\n\n//     @ApiProperty({ example: '%John%' })\n//     @IsNotEmpty()\n//     @IsString()\n//     value: string;\n// }\n\n// export class SortByDto {\n//     @ApiProperty({ example: 'name' })\n//     @IsString()\n//     field: string;\n\n//     @ApiProperty({ example: 'ASC' })\n//     @IsString()\n//     @Matches(/^(ASC|DESC|asc|desc)$/, {\n//         message: 'operator must be one of ASC, DESC, asc, or desc',\n//     })\n//     direction: string;\n// }\n\n// export class PaginationQueryDto {\n//     @ApiPropertyOptional({\n//         description: 'Page number',\n//         minimum: 1,\n//         default: 1,\n//     })\n//     @IsOptional()\n//     @IsNumberStringOrNumber()\n//     @ToNumber()\n//     @Min(1)\n//     // @Transform(({ value }) => {\n//     //     const strippedValue = String(value).replace(/['\"]+/g, '');\n//     //     const numberValue = Number(strippedValue);\n//     //     return isNaN(numberValue) ? 'undefined' : numberValue;\n//     // })\n//     readonly page?: number;\n\n//     @ApiPropertyOptional({\n//         description: 'Record limit',\n//         minimum: 1,\n//         maximum: 500,\n//         default: 10,\n//     })\n//     @IsOptional()\n//     @IsNumberStringOrNumber()\n//     @ToNumber()\n//     @Min(10)\n//     @Max(500)\n//     readonly limit?: number = 10;\n\n//     // @IsOptional()\n//     // @IsArray()\n//     // @ValidateNested({ each: true })\n//     // @Type(() => FilterQueryDto)\n//     // filters?: FilterQueryDto[];\n//     // // filters?: any;\n//     @ApiPropertyOptional({\n//         name: 'filters',\n//         required: false,\n//         type: String,\n//         description: 'Array of filter objects as a JSON string',\n//         example:\n//             '[{\"field\":\"name\",\"operator\":\"LIKE\",\"value\":\"John\"},{\"field\":\"age\",\"operator\":\">\",\"value\":\"30\"}]',\n//     })\n//     @IsOptional()\n//     @Transform(({ value }) => {\n//         return value ? plainToInstance(FilterQueryDto, JSON.parse(value)) : undefined;\n//     })\n//     @ValidateNested({ each: true })\n//     @Type(() => FilterQueryDto)\n//     filters?: FilterQueryDto[] | null;\n\n//     // @ApiPropertyOptional({\n//     //     description: ' Name or City:  ASC or DESC',\n//     //     example: 'name ASC',\n//     // })\n//     // @IsOptional()\n//     // @IsString()\n//     // @Validate(SortBy)\n//     // readonly sort?: string;\n//     // @ApiPropertyOptional({ type: [SortByDto], isArray: true })\n//     // @IsOptional()\n//     // @Transform(({ value }) => {\n//     //     return value ? plainToInstance(SortUserDto, JSON.parse(value)) : undefined;\n//     // })\n//     // @ValidateNested({ each: true })\n//     // @Type(() => SortUserDto)\n//     // sort?: SortUserDto[] | null;\n\n//     @ApiPropertyOptional({\n//         name: 'sort',\n//         required: false,\n//         type: String,\n//         description: 'Array of sort objects as a JSON string',\n//         example: '[{\"field\":\"name\",\"direction\":\"ASC\"},{\"field\":\"age\",\"direction\":\"DESC\"}]',\n//     })\n//     @IsOptional()\n//     @Transform(({ value }) => {\n//         return value ? plainToInstance(SortByDto, JSON.parse(value)) : undefined;\n//     })\n//     @ValidateNested({ each: true })\n//     @Type(() => SortByDto)\n//     sort?: SortByDto[] | null;\n// }\n\n// export class PaginatedResultDto {\n//     @ApiProperty()\n//     data: T[];\n\n//     @ApiProperty()\n//     total: number;\n\n//     @ApiProperty()\n//     page: number;\n\n//     @ApiProperty()\n//     limit: number;\n// }\n\n// // import { ApiProperty, ApiExtraModels } from '@nestjs/swagger';\n\n// // import { Type } from 'class-transformer';\n// // import { IsOptional, IsString, IsArray, ValidateNested, IsNumber } from 'class-validator';\n\n// // // export class FilterQueryDto {\n// // //     @ApiProperty({ example: 'name' })\n// // //     field: string;\n\n// // //     @ApiProperty({ example: 'LIKE' })\n// // //     operator: string;\n\n// // //     @ApiProperty({ example: '%John%' })\n// // //     value: string;\n// // // }\n// // export class FilterQueryDto {\n// //     @ApiProperty({ example: 'country_name' })\n// //     @IsString()\n// //     field: string;\n\n// //     @ApiProperty({ example: 'LIKE' })\n// //     @IsString()\n// //     operator: string;\n\n// //     @ApiProperty({ example: '%United%' })\n// //     @IsString()\n// //     value: string;\n// // }\n// // @ApiExtraModels(FilterQueryDto)\n// // export class PaginationQueryDto {\n// //     @ApiProperty({ example: 1, required: false })\n// //     @IsOptional()\n// //     @IsNumber()\n// //     @Type(() => Number)\n// //     page?: number = 1;\n\n// //     @ApiProperty({ example: 10, required: false })\n// //     @IsOptional()\n// //     @IsNumber()\n// //     @Type(() => Number)\n// //     limit?: number = 10;\n\n// //     // @ApiProperty({\n// //     //     type: [FilterQueryDto],\n// //     //     required: false,\n// //     //     isArray: true,\n// //     // })\n// //     // @Type(() => FilterQueryDto)\n// //     // filters?: FilterQueryDto[];\n// //     @ApiProperty({\n// //         type: FilterQueryDto,\n// //         required: false,\n// //         isArray: true,\n// //     })\n// //     // @IsOptional()\n// //     @IsArray()\n// //     @ValidateNested({ each: true })\n// //     @Type(() => FilterQueryDto)\n// //     filters?: FilterQueryDto[];\n\n// //     // @ApiProperty({\n// //     //     type: [Object],\n// //     //     // items: {\n// //     //     //     type: 'object',\n// //     //     //     items: {\n// //     //     //         type: 'object',\n// //     //     //     },\n// //     //     // },\n// //     // })\n// //     // coords: FilterQueryDto[];\n\n// //     // @ApiProperty({ type: String, required: false })\n// //     // @IsOptional()\n// //     // @IsArray()\n// //     // @ValidateNested({ each: true })\n// //     // @Type(() => FilterQueryDto)\n// //     // filters?: FilterQueryDto[];\n\n// //     @ApiProperty({ example: 'name ASC1', required: false })\n// //     sort?: string;\n// // }\n\n// // // export class PaginationQueryDto {\n// // //     @ApiProperty({ example: 1, required: false })\n// // //     page?: number = 1;\n\n// // //     @ApiProperty({ example: 10, required: false })\n// // //     limit?: number = 10;\n\n// // //     // @ApiProperty({ type: [FilterQueryDto], required: false, isArray: true })\n// // //     // filters?: FilterQueryDto[];\n\n// // //     // @ApiProperty({ type: String, required: false, isArray: true })\n// // //     // filters?: FilterQueryDto[];\n\n// // //     // @ApiProperty({ type: [FilterQueryDto], required: false, isArray: true })\n// // //     // @Type(() => FilterQueryDto)\n// // //     // filters?: FilterQueryDto[];\n\n// // //     @ApiProperty({ type: [FilterQueryDto], required: false })\n// // //     @IsOptional()\n// // //     @IsArray()\n// // //     @ValidateNested({ each: true })\n// // //     @Type(() => FilterQueryDto)\n// // //     filters?: FilterQueryDto[];\n\n// // //     @ApiProperty({ example: 'name ASC1', required: false })\n// // //     sort?: string;\n// // // }\n\n// // export class PaginatedResultDto {\n// //     @ApiProperty()\n// //     data: T[];\n\n// //     @ApiProperty()\n// //     total: number;\n\n// //     @ApiProperty()\n// //     page: number;\n\n// //     @ApiProperty()\n// //     limit: number;\n// // }\n\n// // export class abc {\n// //     @ApiProperty()\n// //     page: number;\n\n// //     @ApiProperty()\n// //     limit: number;\n// // }\n\n// // import { applyDecorators } from '@nestjs/common';\n// // import { ApiProperty, ApiExtraModels, ApiQuery, getSchemaPath } from '@nestjs/swagger';\n\n// // /**\n// //  * Combines Swagger Decorators to create a description for `filters[name]=something`\n// //  *  - has support for swagger\n// //  *  - automatic transformation with nestjs\n// //  */\n// // // // eslint-disable-next-line @typescript-eslint/ban-types,@typescript-eslint/explicit-module-boundary-types\n// // // export function ApiFilterQuery(fieldName: string, filterDto: Function) {\n// // //     return applyDecorators(\n// // //         ApiExtraModels(filterDto),\n// // //         ApiQuery({\n// // //             required: false,\n// // //             name: fieldName,\n// // //             style: 'deepObject',\n// // //             explode: true,\n// // //             type: 'object',\n// // //             schema: {\n// // //                 $ref: getSchemaPath(filterDto),\n// // //             },\n// // //         })\n// // //     );\n// // // }\n// // // eslint-disable-next-line @typescript-eslint/ban-types,@typescript-eslint/explicit-module-boundary-types\n// // export function ApiFilterQuery(fieldName: string, filterDto: Function, index: number) {\n// //     return applyDecorators(\n// //         ApiExtraModels(filterDto),\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}]`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //             schema: {\n// //                 $ref: getSchemaPath(filterDto),\n// //             },\n// //         })\n// //     );\n// // }\n\n// // export function ApiFilterQuery(fieldName: string, index: number) {\n// //     return applyDecorators(\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}].field`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //         }),\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}].operator`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //         }),\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}].value`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //         })\n// //     );\n// // }\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationResponseDto.html":{"url":"classes/PaginationResponseDto.html","title":"class - PaginationResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/dto/pagination-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO class for paginated responses.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                    Optional\n                                has_next_page\n                            \n                            \n                                    Optional\n                                meta\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T[]\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination-response.dto.ts:21\n                        \n                    \n\n            \n                \n                    The array of paginated data.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        has_next_page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination-response.dto.ts:39\n                        \n                    \n\n            \n                \n                    Indicates if there is a next page available.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        meta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PaginationMetaDto\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination-response.dto.ts:30\n                        \n                    \n\n            \n                \n                    Metadata about the pagination.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from '@nestjs/common';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nimport { PaginationMetaDto } from '@utils/dto/pagination.meta.dto';\n\n/**\n * DTO class for paginated responses.\n *\n * @export\n * @template T - Type of the data contained in the response.\n */\n\nexport class PaginationResponseDto {\n    /**\n     * The array of paginated data.\n     *\n     * @type {T[]}\n     * @memberof PaginationResponseDto\n     */\n\n    data: T[];\n\n    /**\n     * Metadata about the pagination.\n     *\n     * @type {PaginationMetaDto}\n     * @memberof PaginationResponseDto\n     */\n\n    meta?: PaginationMetaDto;\n\n    /**\n     * Indicates if there is a next page available.\n     *\n     * @type {boolean}\n     * @memberof PaginationResponseDto\n     */\n\n    has_next_page?: boolean;\n}\n\n/**\n * Creates a pagination response DTO class with specified data type.\n *\n * @export\n * @template T - Type of the data contained in the response.\n * @param {Type} classReference - The class reference for the data type.\n * @returns {Type} The class type of the pagination response DTO.\n */\n\nexport function PaginationResponse(classReference: Type) {\n    abstract class Pagination {\n        /**\n         * The array of paginated data.\n         *\n         * @type {T[]}\n         * @memberof Pagination\n         */\n\n        @ApiProperty({ type: [classReference] })\n        readonly data!: T[];\n\n        /**\n         * Metadata about the pagination.\n         *\n         * @type {PaginationMetaDto}\n         * @memberof Pagination\n         */\n\n        @ApiPropertyOptional({\n            type: PaginationMetaDto,\n            example: {\n                totalItems: 77,\n                currentPage: 1,\n                pageSize: 10,\n                totalPages: 8,\n                startPage: 1,\n                endPage: 8,\n                startIndex: 0,\n                endIndex: 76,\n                pages: [1, 2, 3, 4, 5, 6, 7],\n            },\n            description:\n                'When you pass `all` or `pagination` in the pagination query field, you will receive the meta field in the response.',\n        })\n        meta?: PaginationMetaDto;\n\n        /**\n         * Indicates if there is a next page available.\n         *\n         * @type {boolean}\n         * @memberof Pagination\n         */\n\n        @ApiPropertyOptional({\n            type: Boolean,\n            example: true,\n            description:\n                'When you pass `all` or `infinity` in the pagination query field, you will receive the has_next_page field in the response.',\n        })\n        readonly has_next_page?: boolean;\n    }\n\n    Object.defineProperty(Pagination, 'name', {\n        writable: false,\n        value: `Pagination${classReference.name}ResponseDto`,\n    });\n\n    return Pagination;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaginationService.html":{"url":"injectables/PaginationService.html","title":"injectable - PaginationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaginationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/helper/services/pagination.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The PaginationService provides functionality to handle pagination for database queries. It utilizes Prisma's query capabilities\nto perform paginated data retrieval based on the provided query parameters.\n\nThe paginate method constructs SQL queries to fetch paginated data and its corresponding metadata.\nThe method supports different pagination strategies such as 'all' and 'infinity'.\n\nExample :```typescript\nconst paginationQuery = new PaginationQueryDto({\n    page: 1,\n    limit: 10,\n    pagination: 'paginate',\n});const result = await paginationService.paginate(\n    'SELECT * FROM my_table',\n    'SELECT COUNT(*) as count FROM my_table',\n    paginationQuery\n);\nExample :\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                paginate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/common/helper/services/pagination.service.ts:36\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        paginate\n                        \n                    \n                \n            \n            \n                \n                        \n                    paginate(selectQuery: string, countQuery: string, paginationQuery: PaginationQueryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/helper/services/pagination.service.ts:39\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                selectQuery\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                countQuery\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                paginationQuery\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\nimport { PrismaService } from '@services/prisma.service';\nimport { PaginationResponseDto } from '@utils/dto/pagination-response.dto';\nimport { PaginationQueryDto } from '@utils/dto/pagination.dto';\nimport { PaginationMetaDto } from '@utils/dto/pagination.meta.dto';\n\n/**\n * @service PaginationService\n *\n * @description\n * The `PaginationService` provides functionality to handle pagination for database queries. It utilizes Prisma's query capabilities\n * to perform paginated data retrieval based on the provided query parameters.\n *\n * @remarks\n * - The `paginate` method constructs SQL queries to fetch paginated data and its corresponding metadata.\n * - The method supports different pagination strategies such as 'all' and 'infinity'.\n *\n * @example\n * ```typescript\n * const paginationQuery = new PaginationQueryDto({\n *     page: 1,\n *     limit: 10,\n *     pagination: 'paginate',\n * });\n *\n * const result = await paginationService.paginate(\n *     'SELECT * FROM my_table',\n *     'SELECT COUNT(*) as count FROM my_table',\n *     paginationQuery\n * );\n * ```\n */\n\n@Injectable()\nexport class PaginationService {\n    constructor(private readonly prisma: PrismaService) {}\n\n    async paginate(\n        selectQuery: string,\n        countQuery: string,\n        paginationQuery: PaginationQueryDto\n    ): Promise> {\n        const { page, limit, pagination } = paginationQuery;\n\n        const offset = (page - 1) * limit;\n\n        const dataQuery = `${selectQuery} LIMIT ${limit} OFFSET ${offset}`;\n\n        const metaPage = pagination === 'all' || pagination === 'paginate';\n\n        // const [data, total] = await this.prisma.$transaction([\n        //     this.prisma.$queryRawUnsafe(dataQuery),\n        //     this.prisma.$queryRawUnsafe(countQuery),\n        // ]);\n\n        // console.log('DATTTTTTTTTTTTTTTTTTTTTTTTT', dataQuery);\n\n        const [data, total] = await Promise.all([\n            this.prisma.$queryRawUnsafe(dataQuery),\n            metaPage\n                ? this.prisma.$queryRawUnsafe(countQuery)\n                : [{ count: 0 }],\n        ]);\n\n        // console.log('DATTTTTTTTTTTTTTTTTTTTTTTTT', total, total[0]);\n\n        const meta = metaPage\n            ? new PaginationMetaDto({\n                  paginationQueryDto: paginationQuery,\n                  totalItems: Number(total[0].count),\n              })\n            : undefined;\n\n        const has_next_page =\n            pagination === 'all' || pagination === 'infinity' ? data.length === limit : undefined;\n\n        return {\n            data,\n            meta,\n            has_next_page,\n        };\n    }\n}\n\n// start\n// import { Injectable } from '@nestjs/common';\n\n// import { PrismaService } from '@services/prisma.service';\n// import { PaginationResponseDto } from '@utils/dto/pagination-response.dto';\n// import { PaginationQueryDto } from '@utils/dto/pagination.dto';\n// import { PaginationMetaDto } from '@utils/dto/pagination.meta.dto';\n// import { IFieldConfig } from '@utils/types/pagination-options';\n\n// @Injectable()\n// export class PaginationService {\n//     constructor(private readonly prisma: PrismaService) {}\n\n//     async paginate(\n//         selectFields: string[],\n//         fromQuery: string,\n//         joinTables: string[] = [],\n//         filterQuery: string,\n//         sortByQuery: string,\n//         paginationQuery: PaginationQueryDto\n//     ): Promise> {\n//         const { page, limit, filters, pagination } = paginationQuery;\n\n//         // console.log('Hiii pagination service', page);\n\n//         // console.log('Hiii selectFields', selectFields);\n//         // console.log('Hiii fromQuery', fromQuery);\n//         // console.log('Hiii joinTables', joinTables);\n//         // console.log('Hiii whereClauses', filterQuery);\n\n//         // console.log('Hiii paginationQuery', paginationQuery);\n\n//         // console.log('Hiii paginationQuery---------------------------------', pagination === 'all');\n\n//         const offset = (page - 1) * limit;\n//         const select = selectFields.join(', ');\n\n//         const joinQuery = joinTables.join(' ');\n\n//         // const filterQuery = '';\n//         // if (filters && filters.length > 0) {\n//         //     const filterConditions = filters\n//         //         .map((filter) => {\n//         //             if (filter.operator.toUpperCase() === 'IN') {\n//         //                 const values = filter.value\n//         //                     .split(',')\n//         //                     .map((val) => `'${val.trim()}'`)\n//         //                     .join(', ');\n//         //                 return `${filter.field} IN (${values})`;\n//         //             }\n//         //             return `${filter.field} ${filter.operator} '${filter.value}'`;\n//         //         })\n//         //         .join(' AND ');\n//         //     filterQuery = `WHERE ${filterConditions}`;\n//         // }\n\n//         // console.log('____________________________________', filterQuery);\n\n//         const dataQuery = `SELECT ${select} ${fromQuery} ${joinQuery} ${filterQuery} ${sortByQuery} LIMIT ${limit} OFFSET ${offset}`;\n//         const countQuery = `SELECT count(*) ${fromQuery} ${joinQuery} ${filterQuery}`;\n\n//         // console.log('____________________________________', dataQuery);\n//         // console.log('____________________________________', countQuery);\n\n//         const metaPage = pagination === 'all' || pagination === 'paginate';\n\n//         // const [data, total] = await this.prisma.$transaction([\n//         //     this.prisma.$queryRawUnsafe(dataQuery),\n//         //     this.prisma.$queryRawUnsafe(countQuery),\n//         // ]);\n\n//         const [data, total] = await Promise.all([\n//             this.prisma.$queryRawUnsafe(dataQuery),\n//             metaPage\n//                 ? this.prisma.$queryRawUnsafe(countQuery)\n//                 : [{ count: 0 }],\n//         ]);\n\n//         // console.log('DATTTTTTTTTTTTTTTTTTTTTTTTT', total, total[0]);\n\n//         const meta = metaPage\n//             ? new PaginationMetaDto({\n//                   paginationQueryDto: paginationQuery,\n//                   totalItems: Number(total[0].count),\n//               })\n//             : undefined;\n\n//         const has_next_page =\n//             pagination === 'all' || pagination === 'infinity' ? data.length === limit : undefined;\n\n//         return {\n//             data,\n//             meta,\n//             has_next_page,\n//         };\n\n//         // const dataQuery = `SELECT ${select} ${joinQuery} ${filterQuery} ${sortQuery} LIMIT ${limit} OFFSET ${offset}`;\n\n//         return 'hi' as any;\n//         // const offset = (page - 1) * limit;\n//         // // const select = selectFields.join(', ');\n\n//         // let filterQuery = '';\n//         // if (filters && filters.length > 0) {\n//         //     const filterConditions = filters\n//         //         .map((filter) => {\n//         //             if (filter.operator.toUpperCase() === 'IN') {\n//         //                 const values = filter.value\n//         //                     .split(',')\n//         //                     .map((val) => `'${val.trim()}'`)\n//         //                     .join(', ');\n//         //                 return `${filter.field} IN (${values})`;\n//         //             }\n//         //             return `${filter.field} ${filter.operator} '${filter.value}'`;\n//         //         })\n//         //         .join(' AND ');\n//         //     filterQuery = `WHERE ${filterConditions}`;\n//         // }\n\n//         // let sortQuery = '';\n//         // // if (sort) {\n//         // //     const sortConditions = sort\n//         // //         .split(',')\n//         // //         .map((s) => s.trim())\n//         // //         .join(', ');\n//         // //     sortQuery = `ORDER BY ${sortConditions}`;\n//         // // }\n\n//         // const joinQuery = joinTables.join(' ');\n\n//         // const dataQuery = `${baseQuery} ${joinQuery} ${filterQuery} ${sortQuery} LIMIT ${limit} OFFSET ${offset}`;\n//         // const countFilterQuery = filterQuery ? filterQuery : '';\n//         // const finalCountQuery = `${countQuery} ${joinQuery} ${countFilterQuery}`;\n//         // console.log('DATA QUERY', dataQuery);\n//         // console.log('finalCountQuery QUERY', finalCountQuery);\n//         // console.log(offset, select, filters, sort, filterQuery, sortQuery, joinQuery);\n//         return 'x' as any;\n//         // const [data, total] = await this.prisma.$transaction([\n//         //     this.prisma.$queryRawUnsafe(dataQuery),\n//         //     this.prisma.$queryRawUnsafe(finalCountQuery),\n//         // ]);\n//         // return {\n//         //     data,\n//         //     total: total[0].count,\n//         //     page,\n//         //     limit,\n//         // };\n//     }\n// }\n// end\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PrismaClientExceptionFilter.html":{"url":"classes/PrismaClientExceptionFilter.html","title":"class - PrismaClientExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PrismaClientExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/prisma-exception.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                Exception filter for handling Prisma Client known request errors.\nThis filter catches PrismaClientKnownRequestError exceptions and formats the\nresponse based on the specific Prisma error codes.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: Prisma.PrismaClientKnownRequestError, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/filters/prisma-exception.filter.ts:30\n                        \n                    \n\n\n            \n                \n                        Handles the Prisma Client exception and formats the error response\nbased on the error code.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                        Prisma.PrismaClientKnownRequestError\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The Prisma Client error to handle.\n\n                                            \n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The arguments host for accessing request and response objects.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ArgumentsHost, Catch, HttpStatus } from '@nestjs/common';\nimport { BaseExceptionFilter } from '@nestjs/core';\n\nimport { Prisma } from '@prisma/client';\nimport { Response } from 'express';\n\n/**\n * Exception filter for handling Prisma Client known request errors.\n *\n * This filter catches `PrismaClientKnownRequestError` exceptions and formats the\n * response based on the specific Prisma error codes.\n *\n * @export\n * @class PrismaClientExceptionFilter\n * @extends {BaseExceptionFilter}\n */\n\n@Catch(Prisma.PrismaClientKnownRequestError)\nexport class PrismaClientExceptionFilter extends BaseExceptionFilter {\n    /**\n     * Handles the Prisma Client exception and formats the error response\n     * based on the error code.\n     *\n     * @param {Prisma.PrismaClientKnownRequestError} exception The Prisma Client error to handle.\n     * @param {ArgumentsHost} host The arguments host for accessing request and response objects.\n     *\n     * @memberof PrismaClientExceptionFilter\n     */\n\n    catch(exception: Prisma.PrismaClientKnownRequestError, host: ArgumentsHost) {\n        console.log('PRISMA CLIENT EXCEPTION', exception.message);\n        const ctx = host.switchToHttp();\n        const response = ctx.getResponse();\n        const message = exception.message.replace(/\\n/g, '');\n        switch (exception.code) {\n            case 'P2002': {\n                // Unique constraint failed on the {constraint}\n                const status = HttpStatus.CONFLICT;\n                response.status(status).json({\n                    statusCode: status,\n                    message: message,\n                });\n                break;\n            }\n            case 'P2000': {\n                // The provided value for the column is too long for the column’s type. Column: {column_name}\n                const status = HttpStatus.BAD_REQUEST;\n                response.status(status).json({\n                    statusCode: status,\n                    message: message,\n                });\n                break;\n            }\n            case 'P2025': {\n                // An operation failed because it depends on one or more records that were required but not found. {cause}\n                const status = HttpStatus.NOT_FOUND;\n                response.status(status).json({\n                    statusCode: status,\n                    message: message,\n                });\n                break;\n            }\n            case 'P2010': {\n                // An operation failed because it depends on one or more records that were required but not found. {cause}\n                const status = HttpStatus.BAD_REQUEST;\n                response.status(status).json({\n                    statusCode: status,\n                    message: message,\n                });\n                break;\n            }\n            default:\n                // default 500 error code\n                super.catch(exception, host);\n                break;\n        }\n    }\n\n    //   catch(exception: PrismaClientKnownRequestError, host: ArgumentsHost) {\n    //     const ctx = host.switchToHttp();\n    //     const response = ctx.getResponse();\n    //     const status = HttpStatus.BAD_REQUEST;\n\n    //     const errorResponse = {\n    //       statusCode: status,\n    //       timestamp: new Date().toISOString(),\n    //       message: exception.message,\n    //     };\n\n    //     response.status(status).json(errorResponse);\n    //   }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/helper/services/prisma.service.ts\n        \n\n\n            \n                Description\n            \n            \n                PrismaService\nPrismaService is a service that extends the PrismaClient class to manage database operations with Prisma ORM. It handles\ninitialization and teardown of database connections, executes raw queries with parameter escaping, supports transactions,\nand provides a health check for the database connection.\n\n            \n\n            \n                Extends\n            \n            \n                        PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                executeRawQuery\n                            \n                            \n                                    Async\n                                executeTransaction\n                            \n                            \n                                    Async\n                                isHealthy\n                            \n                            \n                                    Async\n                                onModuleDestroy\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/common/helper/services/prisma.service.ts:28\n                            \n                        \n\n                \n                    \n                            Creates an instance of PrismaService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe configuration service for retrieving database connection details.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        executeRawQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    executeRawQuery(queryObj: any, data: any, fields: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/helper/services/prisma.service.ts:79\n                        \n                    \n\n\n            \n                \n                        Executes a raw query with optional data and field sanitization.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                queryObj\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    null\n                                            \n\n                                            \n                                                    \nThe query object with a syntax method to generate the query string.\n\n\n                                            \n                                        \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    null\n                                            \n\n                                            \n                                                    \nOptional data to be used in the query.\n\n\n                                            \n                                        \n                                        \n                                                fields\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    []\n                                            \n\n                                            \n                                                    \nOptional fields to be sanitized in the data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe result of the query.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        executeTransaction\n                        \n                    \n                \n            \n            \n                \n                        \n                    executeTransaction(actions: (prisma: Prisma.TransactionClient) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/helper/services/prisma.service.ts:129\n                        \n                    \n\n\n            \n                \n                        Executes a transaction with Prisma.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                actions\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nA function containing the transactional operations.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe result of the transaction.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        isHealthy\n                        \n                    \n                \n            \n            \n                \n                        \n                    isHealthy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/helper/services/prisma.service.ts:141\n                        \n                    \n\n\n            \n                \n                        Checks the health of the Prisma connection by executing a simple query.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe result of the health check.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/helper/services/prisma.service.ts:61\n                        \n                    \n\n\n            \n                \n                        Called when the module is destroyed. Disconnects from the database.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/helper/services/prisma.service.ts:51\n                        \n                    \n\n\n            \n                \n                        Called when the module is initialized. Connects to the database.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit, OnModuleDestroy } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { HealthIndicatorResult } from '@nestjs/terminus';\n\nimport { Prisma, PrismaClient } from '@prisma/client';\nimport * as _ from 'lodash';\n\nimport { AllConfigType } from '@config/type/config.type';\n\n// import { ConfigService } from '../services/config.service';\n\n/**\n * PrismaService\n *\n * @description\n * `PrismaService` is a service that extends the PrismaClient class to manage database operations with Prisma ORM. It handles\n * initialization and teardown of database connections, executes raw queries with parameter escaping, supports transactions,\n * and provides a health check for the database connection.\n *\n * @export\n * @class PrismaService\n * @extends PrismaClient\n * @implements {OnModuleInit}\n * @implements {OnModuleDestroy}\n */\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit, OnModuleDestroy {\n    /**\n     * Creates an instance of PrismaService.\n     *\n     * @param {ConfigService} configService - The configuration service for retrieving database connection details.\n     */\n\n    constructor(private readonly configService: ConfigService) {\n        super({\n            datasources: {\n                db: {\n                    url: configService.get('database.url', { infer: true }), // configService.prismaConfig,\n                },\n            },\n        });\n    }\n\n    /**\n     * Called when the module is initialized. Connects to the database.\n     *\n     * @returns {Promise}\n     */\n\n    async onModuleInit(): Promise {\n        await this.$connect();\n    }\n\n    /**\n     * Called when the module is destroyed. Disconnects from the database.\n     *\n     * @returns {Promise}\n     */\n\n    async onModuleDestroy(): Promise {\n        await this.$disconnect();\n    }\n\n    // async executeRawQuery(query: string, params?: any[]): Promise {\n    //     return this.$queryRawUnsafe(query, ...params);\n    // }\n\n    /**\n     * Executes a raw query with optional data and field sanitization.\n     *\n     * @param {any} queryObj - The query object with a `syntax` method to generate the query string.\n     * @param {any} [data=null] - Optional data to be used in the query.\n     * @param {string[]} [fields=[]] - Optional fields to be sanitized in the data.\n     *\n     * @returns {Promise} - The result of the query.\n     */\n\n    async executeRawQuery(\n        queryObj: any = null,\n        data: any = null,\n        fields: string[] = []\n    ): Promise {\n        const newObj = Object.assign({}, data);\n\n        if (typeof data == 'object' && data instanceof Object && !(data instanceof Array)) {\n            for (const [key, value] of Object.entries(newObj)) {\n                const found = fields.includes(key);\n                if (found) {\n                    const escValue = value as any;\n                    // newObj[key] = escValue.replace(/'/g, \"\\\\'\");\n                    newObj[key] = escValue.replace(/'/g, \"''\");\n                }\n            }\n        }\n\n        let query: string;\n        if (data) {\n            query = queryObj.syntax(\n                typeof data == 'object' && data instanceof Object && !(data instanceof Array)\n                    ? newObj\n                    : data\n            );\n        } else {\n            query = queryObj.syntax();\n        }\n\n        // return this.$queryRawUnsafe(query, ...params);\n        const rows = await this.$queryRawUnsafe(query);\n\n        let result: any;\n        if (queryObj.type == 'SELECT_ONE' || queryObj.type == 'INSERT') {\n            result = !_.isEmpty(rows) ? rows[0] : null; //do not change null to blank object\n        } else {\n            result = rows;\n        }\n\n        return result;\n    }\n\n    /**\n     * Executes a transaction with Prisma.\n     *\n     * @param {(prisma: Prisma.TransactionClient) => Promise} actions - A function containing the transactional operations.\n     *\n     * @returns {Promise} - The result of the transaction.\n     */\n\n    async executeTransaction(\n        actions: (prisma: Prisma.TransactionClient) => Promise\n    ): Promise {\n        return this.$transaction(actions);\n    }\n\n    /**\n     * Checks the health of the Prisma connection by executing a simple query.\n     *\n     * @returns {Promise} - The result of the health check.\n     */\n\n    async isHealthy(): Promise {\n        try {\n            await this.$queryRaw`SELECT 1`;\n            // console.log('RESULTTTTTTTTTTTTTTTTTTTT', x);\n            return Promise.resolve({\n                prisma: {\n                    status: 'up',\n                },\n            });\n        } catch (e) {\n            return Promise.resolve({\n                prisma: {\n                    status: 'down',\n                },\n            });\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Query.html":{"url":"classes/Query.html","title":"class - Query","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Query\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/exceptions/query.ts\n        \n\n\n            \n                Description\n            \n            \n                Class representing SQL query builder for error logging.\ninto an Error table. The query escapes single quotes in request and response data\nto prevent SQL injection.\nExample :```typescript\nconst query = new Query();\nconst sqlQuery = query.addHttpQueryError(\n  'UserModule',\n  'GET',\n  '/users',\n  JSON.stringify(requestData),\n  JSON.stringify(responseData)\n).syntax();\nconsole.log(sqlQuery); // Outputs the SQL query stringExample :\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addHttpQueryError\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addHttpQueryError\n                        \n                    \n                \n            \n            \n                \naddHttpQueryError(module: any, method: any, url: any, reqdata: string, resdata: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/exceptions/query.ts:36\n                        \n                    \n\n\n            \n                \n                        Constructs an SQL query to insert HTTP error details into the Error table.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                module\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the module where the error occurred.\n\n\n                                            \n                                        \n                                        \n                                                method\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe HTTP method used in the request.\n\n\n                                            \n                                        \n                                        \n                                                url\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe URL of the request that caused the error.\n\n\n                                            \n                                        \n                                        \n                                                reqdata\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe request data, serialized as a JSON string.\n\n\n                                            \n                                        \n                                        \n                                                resdata\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe response data, serialized as a JSON string.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                An object representing the SQL query with a name, type, and syntax function.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class Query {\n    /**\n     * Constructs an SQL query to insert HTTP error details into the `Error` table.\n     *\n     * @param {string} module - The name of the module where the error occurred.\n     * @param {string} method - The HTTP method used in the request.\n     * @param {string} url - The URL of the request that caused the error.\n     * @param {string} reqdata - The request data, serialized as a JSON string.\n     * @param {string} resdata - The response data, serialized as a JSON string.\n     * @returns {Object} An object representing the SQL query with a `name`, `type`, and `syntax` function.\n     */\n\n    addHttpQueryError(module: any, method: any, url: any, reqdata: string, resdata: string): any {\n        return {\n            name: `addQueryError`,\n            type: `INSERT`,\n            /**\n             * Generates the SQL query string for inserting the error details.\n             *\n             * @returns {string} The SQL query string.\n             */\n\n            syntax: (): string => {\n                //data: any[]\n                try {\n                    let reqescValue = reqdata;\n                    let resescValue = resdata;\n                    reqescValue = reqescValue.replace(/'/g, \"\\\\'\");\n                    resescValue = resescValue.replace(/'/g, \"\\\\'\");\n                    const sql = `INSERT INTO Error (Module,Method,Url,Req,Response) VALUES\n                ('${module}','${method}','${url}','${reqescValue}','${resescValue}');`;\n                    return sql;\n                } catch (error) {\n                    return `Select ${module} ,${method},${url},${reqdata},${resdata}`;\n                }\n            },\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Query-1.html":{"url":"classes/Query-1.html","title":"class - Query-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Query\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/query.ts\n        \n\n\n            \n                Description\n            \n            \n                A utility class for generating SQL queries related to error logging.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addQueryError\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addQueryError\n                        \n                    \n                \n            \n            \n                \naddQueryError(module: any, method: any, url: any, reqdata: string, resdata: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/filters/query.ts:24\n                        \n                    \n\n\n            \n                \n                        Generates an SQL query for logging query errors.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                module\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The module where the error occurred.\n\n                                            \n                                        \n                                        \n                                                method\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The method that caused the error.\n\n                                            \n                                        \n                                        \n                                                url\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The URL where the error occurred.\n\n                                            \n                                        \n                                        \n                                                reqdata\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The request data associated with the error.\n\n                                            \n                                        \n                                        \n                                                resdata\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The response data associated with the error.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { name: string; type: string; syntax: () => string; }\n\n                        \n                            \n                                An object containing the SQL query details.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class Query {\n    /**\n     * Generates an SQL query for logging query errors.\n     *\n     * @param {any} module The module where the error occurred.\n     * @param {any} method The method that caused the error.\n     * @param {any} url The URL where the error occurred.\n     * @param {string} reqdata The request data associated with the error.\n     * @param {string} resdata The response data associated with the error.\n     * @returns {{ name: string, type: string, syntax: () => string }} An object containing the SQL query details.\n     *\n     * @memberof Query\n     */\n\n    addQueryError(module: any, method: any, url: any, reqdata: string, resdata: string) {\n        return {\n            name: `addQueryError`,\n            type: `INSERT`,\n            syntax: () => {\n                // data: any[]\n                try {\n                    let reqescValue = reqdata;\n                    let resescValue = resdata;\n                    reqescValue = reqescValue.replace(/'/g, \"\\\\'\");\n                    resescValue = resescValue.replace(/'/g, \"\\\\'\");\n                    const sql = `INSERT INTO Error (Module,Method,Url,Req,Response) VALUES\n                ('${module}','${method}','${url}','${reqescValue}','${resescValue}');`;\n                    return sql;\n                } catch (error) {\n                    return `Select ${module} ,${method},${url},${reqdata},${resdata}`;\n                }\n            },\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Query-2.html":{"url":"classes/Query-2.html","title":"class - Query-2","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Query\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/currencies/query.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the Query class, which provides methods for generating SQL queries\nrelated to currency data management.\nThe Query class includes methods to generate SQL queries for operations such as\nretrieving, inserting, updating, and deleting currency records from the database.\nIt uses the lodash library for object manipulation and query construction.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                findByCode\n                            \n                            \n                                findById\n                            \n                            \n                                insert\n                            \n                            \n                                pgBaseQuery\n                            \n                            \n                                pgBaseSelectField\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/currencies/query.ts:139\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to delete a currency by its ID.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, and syntax properties.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByCode\n                        \n                    \n                \n            \n            \n                \nfindByCode(id?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/currencies/query.ts:49\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to find a currency by its code.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional ID to exclude from the search if provided.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, and syntax properties.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findById\n                        \n                    \n                \n            \n            \n                \nfindById()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/currencies/query.ts:21\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to find a currency by its ID.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, and syntax properties.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        insert\n                        \n                    \n                \n            \n            \n                \ninsert()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/currencies/query.ts:71\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to insert a new currency.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, and syntax properties.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pgBaseQuery\n                        \n                    \n                \n            \n            \n                \npgBaseQuery()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/currencies/query.ts:172\n                        \n                    \n\n\n            \n                \n                        Provides the base query for selecting currencies.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                The base query string for selecting currencies.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pgBaseSelectField\n                        \n                    \n                \n            \n            \n                \npgBaseSelectField()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/currencies/query.ts:156\n                        \n                    \n\n\n            \n                \n                        Provides the base fields for selecting currencies in pagination queries.\n\n\n                        \n                            Returns :     string[]\n\n                        \n                            \n                                An array of column names to be selected in pagination queries.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/currencies/query.ts:100\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to update an existing currency.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, and syntax properties.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as _ from 'lodash';\n\n/**\n * @fileoverview\n * This file defines the `Query` class, which provides methods for generating SQL queries\n * related to currency data management.\n *\n * @module\n * @description\n * The `Query` class includes methods to generate SQL queries for operations such as\n * retrieving, inserting, updating, and deleting currency records from the database.\n * It uses the lodash library for object manipulation and query construction.\n */\n\nexport class Query {\n    /**\n     * Generates a SQL query to find a currency by its ID.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n\n    findById(): object {\n        return {\n            name: `findById`,\n            type: `SELECT_ONE`,\n            syntax: (where: any) => {\n                const allowedKeys = [\n                    'c.id_currency',\n                    'c.code',\n                    'c.name',\n                    'c.name_plural',\n                    'c.symbol',\n                    'c.symbol_native',\n                    'c.decimal_digits',\n                    'c.rounding',\n                ];\n                const id = _.get(where, 'id');\n                const sql = `select ${allowedKeys.join()} from currencies c WHERE c.status = 1 AND c.id_currency = '${id}';`;\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to find a currency by its code.\n     * @param {string} [id] - Optional ID to exclude from the search if provided.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n\n    findByCode(id?: string): object {\n        return {\n            name: `findByCode`,\n            type: `SELECT_ONE`,\n            syntax: (where: any) => {\n                const allowedKeys = ['c.id_currency', 'c.code'];\n                const code = _.get(where, 'code');\n\n                let sql = `SELECT ${allowedKeys.join()} FROM currencies c WHERE c.status = 1 AND c.code = '${code}'`;\n                if (id) {\n                    sql += ` AND c.id_currency != '${id}';`;\n                }\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to insert a new currency.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n\n    insert(): object {\n        return {\n            name: `add`,\n            type: `INSERT`,\n            syntax: (where: any) => {\n                const allowedKeys = [\n                    'code',\n                    'name',\n                    'name_plural',\n                    'symbol',\n                    'symbol_native',\n                    'decimal_digits',\n                    'rounding',\n                ];\n                const conds = _.pick(where, allowedKeys);\n                const keys = _.keys(conds);\n                const values = _.values(conds);\n                const sql = `insert into currencies (${keys.join()}) values ('${values.join(\"','\")}') RETURNING id_currency as insertid, code;`;\n                console.log('QUERY', sql);\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to update an existing currency.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n\n    update(): object {\n        return {\n            name: `update`,\n            type: `UPDATE`,\n            syntax: (where: any) => {\n                let sql = `UPDATE currencies SET `;\n                const id = _.get(where, 'id');\n                _.unset(where, 'id');\n                const allowedKeys = [\n                    'code',\n                    'name',\n                    'name_plural',\n                    'symbol',\n                    'symbol_native',\n                    'decimal_digits',\n                    'rounding',\n                ];\n                where = _.pick(where, allowedKeys);\n\n                const lastKey = Object.keys(where)[Object.keys(where).length - 1];\n                _.mapKeys(where, (value, key) => {\n                    sql += `${key} = '${value}'`;\n                    sql += lastKey == key ? `` : `, `;\n                });\n                sql += ` WHERE status = 1 AND id_currency = '${id}' RETURNING id_currency as updatedid, code;`;\n\n                console.log('QQQQQQQQQQQQQQ', sql);\n\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to delete a currency by its ID.\n     * @param {string} id - The ID of the currency to delete.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n\n    delete(): object {\n        return {\n            name: `delete`,\n            type: `UPDATE`,\n            syntax: (id: string) => {\n                const sql = `UPDATE currencies SET status = 127 WHERE status = 1 AND id_currency = '${id}' RETURNING id_currency as deletedid, code;`;\n\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Provides the base fields for selecting currencies in pagination queries.\n     * @returns {string[]} An array of column names to be selected in pagination queries.\n     */\n\n    pgBaseSelectField(): string[] {\n        return [\n            'ptbl.id_currency',\n            'ptbl.code',\n            'ptbl.name',\n            'ptbl.symbol',\n            'ptbl.decimal_digits',\n            'ptbl.rounding',\n        ];\n    }\n\n    /**\n     * Provides the base query for selecting currencies.\n     * @returns {string} The base query string for selecting currencies.\n     */\n\n    pgBaseQuery(): string {\n        return ` FROM currencies ptbl`;\n    }\n}\n\n// import * as _ from 'lodash';\n\n// import { DynamicQueryBuilder, QueryOptions } from '@providers/dynamic-query.service';\n\n// export class Query {\n//     private queryBuilder = new DynamicQueryBuilder();\n\n//     findBy(key: string, value: string, id?: string) {\n//         const selectOptions: QueryOptions = {\n//             table: 'currencies',\n//             fields: ['id_currency', 'code'],\n//             conditions: { status: 1, ...(key && { [key]: value }) },\n//             ...(id && {\n//                 optionalConditions: {\n//                     id_currency: id,\n//                 },\n//             }),\n//         };\n\n//         return this.queryBuilder.buildSelectQuery(selectOptions);\n//     }\n\n//     insert(values: any) {\n//         const insertOptions: QueryOptions = {\n//             table: 'currencies',\n//             fields: [\n//                 'code',\n//                 'name',\n//                 'name_plural',\n//                 'symbol',\n//                 'symbol_native',\n//                 'decimal_digits',\n//                 'rounding',\n//             ],\n//             values: values,\n//             returningFields: ['id_currency as insertid', 'code'],\n//         };\n\n//         return this.queryBuilder.buildInsertQuery(insertOptions);\n//     }\n\n//     delete(key: string, value: string) {\n//         const deleteOptions: QueryOptions = {\n//             table: 'currencies',\n//             conditions: { status: 1, ...(key && { [key]: value }) },\n//             returningFields: ['id_currency as deleteid'],\n//         };\n\n//         return this.queryBuilder.buildDeleteQuery(deleteOptions);\n//     }\n\n//     pgBaseSelectField(): string[] {\n//         return [\n//             'ptbl.id_currency',\n//             'ptbl.code',\n//             'ptbl.name',\n//             'ptbl.symbol',\n//             'ptbl.decimal_digits',\n//             'ptbl.rounding',\n//         ];\n//     }\n\n//     pgBaseQuery() {\n//         return ` FROM currencies ptbl`;\n//     }\n// }\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QueryCountryDto.html":{"url":"classes/QueryCountryDto.html","title":"class - QueryCountryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QueryCountryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/countries/dto/query-country.dto-remove.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                filters\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                sort\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        filters\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FilterCountryDto | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: String})@IsOptional()@Transform( => )@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/query-country.dto-remove.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@Transform( => )@IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/query-country.dto-remove.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@Transform( => )@IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/query-country.dto-remove.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        sort\n                        \n                    \n                \n            \n                \n                    \n                        Type :     SortCountryDto[] | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: String})@IsOptional()@Transform( => )@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/query-country.dto-remove.ts:50\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nimport { Transform, Type, plainToInstance } from 'class-transformer';\nimport { IsNumber, IsOptional, IsString, ValidateNested } from 'class-validator';\n\nimport { Country } from './country';\n\nexport class FilterCountryDto {}\n\nexport class SortCountryDto {\n    @ApiProperty()\n    @Type(() => String)\n    @IsString()\n    orderBy: keyof Country;\n\n    @ApiProperty()\n    @IsString()\n    order: string;\n}\n\nexport class QueryCountryDto {\n    @ApiPropertyOptional()\n    @Transform(({ value }) => (value ? Number(value) : 1))\n    @IsNumber()\n    @IsOptional()\n    page?: number;\n\n    @ApiPropertyOptional()\n    @Transform(({ value }) => (value ? Number(value) : 10))\n    @IsNumber()\n    @IsOptional()\n    limit?: number;\n\n    @ApiPropertyOptional({ type: String })\n    @IsOptional()\n    @Transform(({ value }) =>\n        value ? plainToInstance(FilterCountryDto, JSON.parse(value)) : undefined\n    )\n    @ValidateNested()\n    @Type(() => FilterCountryDto)\n    filters?: FilterCountryDto | null;\n\n    @ApiPropertyOptional({ type: String })\n    @IsOptional()\n    @Transform(({ value }) => {\n        return value ? plainToInstance(SortCountryDto, JSON.parse(value)) : undefined;\n    })\n    @ValidateNested({ each: true })\n    @Type(() => SortCountryDto)\n    sort?: SortCountryDto[] | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QueryFailedFilter.html":{"url":"classes/QueryFailedFilter.html","title":"class - QueryFailedFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QueryFailedFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/query-failed.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                Exception filter for handling database query failures.\nThis filter catches exceptions related to failed database queries and formats\nthe response based on the type of database constraint error.\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                reflector\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/query-failed.filter.ts:26\n                            \n                        \n\n                \n                    \n                            Creates an instance of QueryFailedFilter.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The reflector instance used for metadata reflection.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        reflector\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Reflector\n\n                    \n                \n                    \n                        \n                                Defined in src/core/filters/query-failed.filter.ts:34\n                        \n                    \n\n            \n                \n                    The reflector instance used for metadata reflection.\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: any, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/filters/query-failed.filter.ts:45\n                        \n                    \n\n\n            \n                \n                        Handles the database query failure exception and formats the error response.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The exception thrown by a failed database query.\n\n                                            \n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The arguments host for accessing request and response objects.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { STATUS_CODES } from 'http';\n\nimport { ArgumentsHost, ExceptionFilter, HttpStatus, Logger } from '@nestjs/common'; // Catch\nimport { Reflector } from '@nestjs/core';\n\nimport { Response } from 'express';\n// import { QueryFailedError } from \"typeorm\";\n// import * as _ from 'lodash';\n\n// import { PgSQLService } from \"../common/shared/services/pgsql.service\";\nimport { constraintErrors } from './constraint-errors';\n// import { Query } from './query';\n\n/**\n * Exception filter for handling database query failures.\n *\n * This filter catches exceptions related to failed database queries and formats\n * the response based on the type of database constraint error.\n *\n * @export\n * @class QueryFailedFilter\n * @implements {ExceptionFilter}\n */\n\n// @Catch(QueryFailedError)\nexport class QueryFailedFilter implements ExceptionFilter {\n    /**\n     * Creates an instance of QueryFailedFilter.\n     * @param {Reflector} reflector The reflector instance used for metadata reflection.\n     *\n     * @memberof QueryFailedFilter\n     */\n\n    constructor(public reflector: Reflector) {}\n\n    /**\n     * Handles the database query failure exception and formats the error response.\n     *\n     * @param {any} exception The exception thrown by a failed database query.\n     * @param {ArgumentsHost} host The arguments host for accessing request and response objects.\n     *\n     * @memberof QueryFailedFilter\n     */\n\n    catch(exception: any, host: ArgumentsHost) {\n        console.log('QUERY FAIL from filter');\n        const ctx = host.switchToHttp();\n        const response = ctx.getResponse();\n        const request = ctx.getRequest();\n\n        const errorMessage = constraintErrors[exception.constraint];\n\n        const status =\n            exception.constraint && exception.constraint.startsWith('UQ')\n                ? HttpStatus.CONFLICT\n                : HttpStatus.INTERNAL_SERVER_ERROR;\n\n        const errorResponse = {\n            message: exception.sqlMessage,\n            query: exception.query,\n        };\n\n        try {\n            Logger.error(\n                `${request.method} ${request.url}`,\n                JSON.stringify(errorResponse),\n                'ExceptionFilter'\n            );\n\n            // const sqlService = new PgSQLService();\n            // const query = new Query();\n            // const reqstr = JSON.stringify(_.clone(request.body));\n            // const resstr = JSON.stringify(_.clone(errorResponse));\n            // sqlService.run(query.addQueryError(\"DBQuery\", request.method, request.url, reqstr, resstr));\n        } catch (error) {\n            Logger.error(\n                `${request.method} ${request.url}`,\n                JSON.stringify(errorResponse),\n                'ExceptionFilter'\n            );\n        }\n        response.status(status).json({\n            statusCode: status,\n            error: STATUS_CODES[status],\n            message: errorMessage,\n        });\n    }\n}\n\n// import { ArgumentsHost, Catch, ExceptionFilter, HttpException, HttpStatus } from '@nestjs/common';\n// import { Response } from 'express';\n// import { Prisma } from '@prisma/client';\n\n// @Catch(Prisma.PrismaClientKnownRequestError)\n// export class PrismaClientExceptionFilter implements ExceptionFilter {\n//   catch(exception: Prisma.PrismaClientKnownRequestError, host: ArgumentsHost) {\n//     const ctx = host.switchToHttp();\n//     const response = ctx.getResponse();\n//     const status = HttpStatus.INTERNAL_SERVER_ERROR;\n\n//     let message = exception.message;\n\n//     // Handle specific Prisma errors\n//     if (exception.code === 'P2002') {\n//       message = 'Unique constraint failed';\n//     }\n\n//     response.status(status).json({\n//       statusCode: status,\n//       message,\n//     });\n//   }\n// }\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/QueryOptions.html":{"url":"interfaces/QueryOptions.html","title":"interface - QueryOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  QueryOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/providers/dynamic-query.service-to-be-remove.ts\n        \n\n\n            \n                Description\n            \n            \n                Options for building queries.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            conditions\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            deleteType\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            fields\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            joins\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            optionalConditions\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            queryName\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            queryType\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            returningFields\n                                        \n                                \n                                \n                                        \n                                            table\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            values\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        conditions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        conditions:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Conditions for the query (e.g., WHERE clauses).\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        deleteType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        deleteType:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Type of delete operation ('soft' or 'hard').\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fields\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fields:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    List of fields to include in the query (e.g., columns for SELECT, INSERT, or UPDATE).\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        joins\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        joins:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Join clauses to include in the query.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        optionalConditions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        optionalConditions:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional conditions for the query.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        queryName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        queryName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Name of the query.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        queryType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        queryType:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Type of the query (e.g., INSERT, SELECT, UPDATE, DELETE).\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        returningFields\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        returningFields:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Fields to return from the query.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        table\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        table:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Name of the table to perform the query on.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        values\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        values:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Values to be used in the query (e.g., for INSERT or UPDATE operations).\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import * as _ from 'lodash';\n\n/**\n * Options for building queries.\n *\n * @export\n * @interface QueryOptions\n */\n\nexport interface QueryOptions {\n    /**\n     * Name of the query.\n     *\n     * @type {string}\n     * @memberof QueryOptions\n     */\n\n    queryName?: string;\n\n    /**\n     * Type of the query (e.g., INSERT, SELECT, UPDATE, DELETE).\n     *\n     * @type {string}\n     * @memberof QueryOptions\n     */\n\n    queryType?: string;\n\n    /**\n     * Name of the table to perform the query on.\n     *\n     * @type {string}\n     * @memberof QueryOptions\n     */\n\n    table: string;\n\n    /**\n     * List of fields to include in the query (e.g., columns for SELECT, INSERT, or UPDATE).\n     *\n     * @type {string[]}\n     * @memberof QueryOptions\n     */\n\n    fields?: string[];\n\n    /**\n     * Values to be used in the query (e.g., for INSERT or UPDATE operations).\n     *\n     * @type {Record}\n     * @memberof QueryOptions\n     */\n\n    values?: Record;\n\n    /**\n     * Conditions for the query (e.g., WHERE clauses).\n     *\n     * @type {Record}\n     * @memberof QueryOptions\n     */\n\n    conditions?: Record;\n\n    /**\n     * Optional conditions for the query.\n     *\n     * @type {Record}\n     * @memberof QueryOptions\n     */\n\n    optionalConditions?: Record;\n\n    /**\n     * Join clauses to include in the query.\n     *\n     * @type {string[]}\n     * @memberof QueryOptions\n     */\n\n    joins?: string[];\n\n    /**\n     * Fields to return from the query.\n     *\n     * @type {string[]}\n     * @memberof QueryOptions\n     */\n\n    returningFields?: string[];\n\n    /**\n     * Type of delete operation ('soft' or 'hard').\n     *\n     * @type {string}\n     * @memberof QueryOptions\n     */\n    deleteType?: string;\n}\n\n/**\n * Class to build dynamic SQL queries.\n *\n * @export\n * @class DynamicQueryBuilder\n */\nexport class DynamicQueryBuilder {\n    /**\n     * Builds an INSERT SQL query.\n     *\n     * @param {QueryOptions} options - Options for the INSERT query.\n     * @returns {object} - An object containing the query name, type, and the SQL syntax.\n     * @memberof DynamicQueryBuilder\n     */\n\n    buildInsertQuery(options: QueryOptions): object {\n        const { queryName, queryType, fields, table, values = {}, returningFields = [] } = options;\n        const conds = _.pick(values, fields);\n        const keys = _.keys(conds);\n        const vals = _.values(conds);\n\n        const returningClause = returningFields.length\n            ? `RETURNING ${returningFields.join(', ')}`\n            : '';\n\n        const sql = `INSERT INTO ${table} (${keys.join()}) VALUES ('${vals.join(\"','\")}') ${returningClause};`;\n\n        return {\n            name: queryName ? queryName : 'add',\n            type: queryType ? queryType : 'INSERT',\n            syntax: () => {\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Builds a SELECT SQL query.\n     *\n     * @param {QueryOptions} options - Options for the SELECT query.\n     * @returns {object} - An object containing the query name, type, and the SQL syntax.\n     * @memberof DynamicQueryBuilder\n     */\n\n    buildSelectQuery(options: QueryOptions): object {\n        const {\n            queryName,\n            queryType,\n            table,\n            fields = ['*'],\n            conditions = {},\n            joins = [],\n            optionalConditions = null,\n        } = options;\n\n        const whereClauses = Object.keys(conditions).map((key) => {\n            const value = conditions[key];\n            return typeof value === 'string' ? `${key} = '${value}'` : `${key} = ${value}`;\n        });\n\n        if (optionalConditions) {\n            // Adding optional conditions dynamically\n            Object.keys(optionalConditions).forEach((key) => {\n                const value = optionalConditions[key];\n                if (value) {\n                    whereClauses.push(\n                        typeof value === 'string' ? `${key} != '${value}'` : `${key} != ${value}`\n                    );\n                }\n            });\n        }\n\n        const whereClause = whereClauses.length ? `WHERE ${whereClauses.join(' AND ')}` : '';\n        const joinClause = joins.length ? joins.join(' ') : '';\n\n        const sql = `SELECT ${fields.join(', ')} FROM ${table} ${joinClause} ${whereClause}`;\n\n        return {\n            name: queryName ? queryName : 'find',\n            type: queryType ? queryType : 'SELECT_ONE',\n            syntax: () => {\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Builds an UPDATE SQL query.\n     *\n     * @param {QueryOptions} options - Options for the UPDATE query.\n     * @returns {object} - An object containing the query name, type, SQL syntax, and values to be used.\n     * @memberof DynamicQueryBuilder\n     */\n\n    buildUpdateQuery(options: QueryOptions): object {\n        const { table, values = {}, conditions = {}, returningFields = [] } = options;\n\n        const setClauses = Object.keys(values).map((key, index) => `${key} = $${index + 1}`);\n        const whereClauses = Object.keys(conditions).map(\n            (key, index) => `${key} = $${index + Object.keys(values).length + 1}`\n        );\n\n        const returningClause = returningFields.length\n            ? `RETURNING ${returningFields.join(', ')}`\n            : '';\n\n        const sql = `UPDATE ${table} SET ${setClauses.join(', ')} WHERE ${whereClauses.join(' AND ')} ${returningClause};`;\n\n        return {\n            name: 'update',\n            type: 'UPDATE',\n            sql,\n            values: [...Object.values(values), ...Object.values(conditions)],\n        };\n    }\n\n    //     return {\n    //   name: `delete`,\n    //   type: `UPDATE`,\n    //   syntax: (idArea: number) => {\n    //     const sql = `UPDATE Area SET Status = 127 WHERE Status = 1 AND idArea = ${idArea}`;\n\n    //     return sql;\n    //   },\n    // };\n\n    /**\n     * Builds a DELETE SQL query.\n     *\n     * @param {QueryOptions} options - Options for the DELETE query.\n     * @returns {object} - An object containing the query name, type, and the SQL syntax.\n     * @memberof DynamicQueryBuilder\n     */\n\n    buildDeleteQuery(options: QueryOptions): object {\n        const {\n            queryName,\n            queryType,\n            table,\n            conditions = {},\n            optionalConditions = null,\n            joins = [],\n            returningFields = [],\n            deleteType = 'soft',\n        } = options;\n\n        const whereClauses = Object.keys(conditions).map((key) => {\n            const value = conditions[key];\n            return typeof value === 'string' ? `${key} = '${value}'` : `${key} = ${value}`;\n        });\n\n        if (optionalConditions) {\n            // Adding optional conditions dynamically\n            Object.keys(optionalConditions).forEach((key) => {\n                const value = optionalConditions[key];\n                if (value) {\n                    whereClauses.push(\n                        typeof value === 'string' ? `${key} != '${value}'` : `${key} != ${value}`\n                    );\n                }\n            });\n        }\n\n        const whereClause = whereClauses.length ? `WHERE ${whereClauses.join(' AND ')}` : '';\n        const joinClause = joins.length ? joins.join(' ') : '';\n\n        // const whereClauses = Object.keys(conditions).map((key, index) => `${key} = $${index + 1}`);\n        // const whereClause = whereClauses.length ? `WHERE ${whereClauses.join(' AND ')}` : '';\n\n        const returningClause = returningFields.length\n            ? `RETURNING ${returningFields.join(', ')}`\n            : '';\n\n        let sql: string;\n        if (deleteType === 'soft') {\n            sql = `UPDATE ${table} SET status = 127 ${whereClause} ${returningClause};`;\n        } else {\n            sql = `DELETE FROM ${table} ${joinClause} ${whereClause} ${returningClause};`;\n        }\n\n        console.log('QQQQQQQQQQQQQQQQQQQQ', sql);\n\n        return {\n            name: queryName ? queryName : 'delete',\n            type: queryType ? queryType : 'DELETE',\n            syntax: () => {\n                return sql;\n            },\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ResolvePromisesInterceptor.html":{"url":"injectables/ResolvePromisesInterceptor.html","title":"injectable - ResolvePromisesInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ResolvePromisesInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/serializer.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                Interceptor that resolves all nested promises in the response data.\nThis interceptor is designed to be used within a NestJS application to ensure that any promises\nwithin the response data are fully resolved before the response is sent to the client.\nIt uses the deepResolvePromises function to recursively handle promises in nested structures.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/serializer.interceptor.ts:30\n                        \n                    \n\n\n            \n                \n                        Intercepts the request and resolves nested promises in the response data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe execution context of the request.\n\n\n                                            \n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe handler for the request.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable<>\n\n                        \n                            \n                                \nAn observable that emits the resolved data.\n\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestInterceptor, ExecutionContext, CallHandler } from '@nestjs/common';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport deepResolvePromises from './deep-resolver';\n\n/**\n * Interceptor that resolves all nested promises in the response data.\n *\n * This interceptor is designed to be used within a NestJS application to ensure that any promises\n * within the response data are fully resolved before the response is sent to the client.\n * It uses the `deepResolvePromises` function to recursively handle promises in nested structures.\n *\n * @export\n * @class ResolvePromisesInterceptor\n * @implements {NestInterceptor}\n */\n\n@Injectable()\nexport class ResolvePromisesInterceptor implements NestInterceptor {\n    /**\n     * Intercepts the request and resolves nested promises in the response data.\n     *\n     * @param {ExecutionContext} context - The execution context of the request.\n     * @param {CallHandler} next - The handler for the request.\n     * @returns {Observable} - An observable that emits the resolved data.\n     */\n\n    intercept(context: ExecutionContext, next: CallHandler): Observable {\n        return next.handle().pipe(map((data) => deepResolvePromises(data)));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SortBy.html":{"url":"injectables/SortBy.html","title":"injectable - SortBy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SortBy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/filter.validator.ts\n        \n\n\n            \n                Description\n            \n            \n                Custom validator for checking if a string is in the correct \"field direction\" format.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/validators/filter.validator.ts:101\n                        \n                    \n\n\n            \n                \n                        Default error message when validation fails.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe validation arguments.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \nThe error message.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(value: string, args: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/validators/filter.validator.ts:71\n                        \n                    \n\n\n            \n                \n                        Validates if the given value is in the format of \"field direction\" where direction is \"ASC\" or \"DESC\".\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe value to be validated.\n\n\n                                            \n                                        \n                                        \n                                                args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe validation arguments.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \nReturns true if valid; otherwise, false.\n\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\nimport {\n    ValidatorConstraint,\n    ValidatorConstraintInterface,\n    ValidationArguments,\n} from 'class-validator';\n\n/**\n * Custom validator for checking if a string is a valid comma-separated list of numbers.\n *\n * @export\n * @class CommaSeparated\n * @implements {ValidatorConstraintInterface}\n */\n@Injectable()\n@ValidatorConstraint({ name: 'CommaSeparated', async: false })\nexport class CommaSeparated implements ValidatorConstraintInterface {\n    /**\n     * Validates if the given value is a comma-separated list of numbers.\n     *\n     * @param {string} propertyValue - The value to be validated.\n     * @param {ValidationArguments} args - The validation arguments.\n     * @returns {boolean} - Returns true if valid; otherwise, false.\n     */\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    validate(propertyValue: string, args: ValidationArguments): boolean {\n        //\n        //\n        const isValid = /^[0-9]+(,[0-9]+)*$/.test(propertyValue);\n\n        if (isValid) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Default error message when validation fails.\n     *\n     * @param {ValidationArguments} args - The validation arguments.\n     * @returns {string} - The error message.\n     */\n\n    defaultMessage(args: ValidationArguments): string {\n        return `Invalid ${args.property}`;\n    }\n}\n\n/**\n * Custom validator for checking if a string is in the correct \"field direction\" format.\n *\n * @export\n * @class SortBy\n * @implements {ValidatorConstraintInterface}\n */\n@Injectable()\n@ValidatorConstraint({ name: 'SortBy', async: false })\nexport class SortBy implements ValidatorConstraintInterface {\n    /**\n     * Validates if the given value is in the format of \"field direction\" where direction is \"ASC\" or \"DESC\".\n     *\n     * @param {string} value - The value to be validated.\n     * @param {ValidationArguments} args - The validation arguments.\n     * @returns {boolean} - Returns true if valid; otherwise, false.\n     */\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    validate(value: string, args: ValidationArguments): boolean {\n        // Split the input by spaces and validate each pair\n        const parts = value.split(' ');\n\n        // Ensure pairs of field direction (e.g., field direction, field direction, ...)\n        if (parts.length % 2 !== 0) {\n            return false;\n        }\n\n        // Regular expression to match valid field direction\n        const fieldRegex = /^[\\w]+$/;\n        const directionRegex = /^(ASC|DESC|asc|desc|Asc|Desc)$/;\n\n        // Iterate through pairs and validate\n        for (let i = 0; i \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SortByDto.html":{"url":"classes/SortByDto.html","title":"class - SortByDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SortByDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/dto/pagination.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO class for sorting options.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                direction\n                            \n                            \n                                    \n                                    \n                                field\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        direction\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'ASC'})@IsString()@Matches(/^(ASC|DESC|asc|desc)$/, {message: 'operator must be one of ASC, DESC, asc, or desc'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.dto.ts:228\n                        \n                    \n\n            \n                \n                    The direction of the sort (ascending or descending).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        field\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.dto.ts:214\n                        \n                    \n\n            \n                \n                    The field to sort by.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nimport { Type, Transform, plainToInstance } from 'class-transformer';\nimport {\n    IsOptional,\n    Min,\n    Max,\n    IsNotEmpty,\n    IsString,\n    ValidateNested,\n    Matches,\n    IsEnum,\n    // Validate,\n    // IsIn,\n} from 'class-validator';\n\n// import { IsValidField } from '@core/validators/field.validator'; // Import the custom validator\nimport { IsNumberStringOrNumber } from '@decorators/number.string.validator';\nimport { ToNumber } from '@decorators/transforms.decorator';\n// import { IsNumberStringOrNumber } from '@decorators/number.string.validator';\n// import { ToNumber } from '@decorators/transforms.decorator';\n// import { Country } from '@modules/countries/dto/country';\n\n/**\n * Enum representing different pagination types.\n *\n * @export\n * @enum {string}\n */\n\nexport enum PaginationType {\n    NONE = 'no',\n    INFINITY = 'infinity',\n    PAGINATE = 'paginate',\n    ALL = 'all',\n}\n\n/**\n * DTO class for pagination query parameters.\n *\n * @export\n */\nexport class PaginationQueryDto {\n    /**\n     * The type of pagination to apply.\n     *\n     * @type {PaginationType}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        description:\n            'Pagination must all (Page and has_next_page), infinity (only has_next_page), paginate(only page)',\n        enum: PaginationType,\n        default: PaginationType.ALL,\n    })\n    @IsEnum(PaginationType)\n    @IsOptional()\n    readonly pagination: PaginationType;\n\n    /**\n     * The page number for pagination.\n     *\n     * @type {number}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        description: 'Page number',\n        minimum: 1,\n        default: 1,\n    })\n    @IsOptional()\n    @IsNumberStringOrNumber()\n    @ToNumber()\n    @Min(1)\n    readonly page?: number;\n\n    /**\n     * The number of records per page.\n     *\n     * @type {number}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        description: 'Record limit',\n        minimum: 1,\n        maximum: 500,\n        default: 10,\n    })\n    @IsOptional()\n    @IsNumberStringOrNumber()\n    @ToNumber()\n    @Min(10)\n    @Max(500)\n    readonly limit?: number = 10;\n\n    /**\n     * Filters to apply to the query.\n     *\n     * @type {FilterQueryDto[] | null}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        name: 'filters',\n        required: false,\n        type: String,\n        description: 'Array of filter objects as a JSON string',\n        example: '[{\"field\":\"name\",\"operator\":\"=\",\"value\":\"IN\"}]',\n    })\n    @IsOptional()\n    @Transform(({ value }) => {\n        return value ? plainToInstance(FilterQueryDto, JSON.parse(value)) : undefined;\n    })\n    @ValidateNested({ each: true })\n    @Type(() => FilterQueryDto)\n    filters?: FilterQueryDto[] | null;\n\n    /**\n     * Sorting options for the query.\n     *\n     * @type {SortByDto[] | null}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        name: 'sort',\n        required: false,\n        type: String,\n        description: 'Array of sort objects as a JSON string',\n        example: '[{\"field\":\"name\",\"direction\":\"ASC\"}]',\n    })\n    @IsOptional()\n    @Transform(({ value }) => {\n        return value ? plainToInstance(SortByDto, JSON.parse(value)) : undefined;\n    })\n    @ValidateNested({ each: true })\n    @Type(() => SortByDto)\n    sort?: SortByDto[] | null;\n}\n\n/**\n * DTO class for filter query parameters.\n *\n * @export\n */\nexport class FilterQueryDto {\n    /**\n     * The field to filter on.\n     *\n     * @type {string}\n     * @memberof FilterQueryDto\n     */\n\n    @ApiProperty({ example: 'iso', required: true })\n    @IsNotEmpty()\n    @IsString()\n    field: string;\n\n    /**\n     * The operator to use for filtering.\n     *\n     * @type {string}\n     * @memberof FilterQueryDto\n     */\n\n    @ApiProperty({ example: '=' })\n    @IsNotEmpty()\n    @IsString()\n    operator: string;\n\n    /**\n     * The value to filter by.\n     *\n     * @type {string}\n     * @memberof FilterQueryDto\n     */\n\n    @ApiProperty({ example: 'IN' })\n    @IsNotEmpty()\n    @IsString()\n    value: string;\n}\n\n/**\n * DTO class for sorting options.\n *\n * @export\n */\nexport class SortByDto {\n    // @ApiProperty({ example: 'name' })\n    // @IsString()\n    // @Validate(IsValidField, [Country], {\n    //     message: 'Field must be a valid key of Country',\n    // })\n    // field: keyof Country;\n    /**\n     * The field to sort by.\n     *\n     * @type {string}\n     * @memberof SortByDto\n     */\n\n    @ApiProperty()\n    @IsString()\n    // @IsIn(abc(x : keyof TExposedAccountInfo), {\n    //     message: 'Field must be one of \"name\", \"age\", or \"status\"',\n    // })\n    // @Validate(IsValidField, [{ entity: () => T }], {\n    //     message: 'Field must be a valid key of the specified entity',\n    // })\n    field: string;\n\n    /**\n     * The direction of the sort (ascending or descending).\n     *\n     * @type {string}\n     * @memberof SortByDto\n     */\n\n    @ApiProperty({ example: 'ASC' })\n    @IsString()\n    @Matches(/^(ASC|DESC|asc|desc)$/, {\n        message: 'operator must be one of ASC, DESC, asc, or desc',\n    })\n    direction: string;\n}\n\n// export class PaginatedResultDto {\n//     @ApiProperty()\n//     data: T[];\n\n//     @ApiProperty()\n//     total: number;\n\n//     @ApiProperty()\n//     page: number;\n\n//     @ApiProperty()\n//     limit: number;\n// }\n\n//DX\n// import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\n// import { Type, Transform, plainToInstance } from 'class-transformer';\n// import {\n//     IsOptional,\n//     Min,\n//     Max,\n//     IsNotEmpty,\n//     IsString,\n//     IsArray,\n//     ValidateNested,\n//     Validate,\n//     Matches,\n// } from 'class-validator';\n\n// import { IsNumberStringOrNumber } from '@decorators/number.string.validator';\n// import { ToNumber } from '@decorators/transforms.decorator';\n// import { SortBy } from '@validators/filter.validator';\n\n// export class FilterQueryDto {\n//     @ApiProperty({ example: 'name', required: true })\n//     @IsNotEmpty()\n//     @IsString()\n//     field: string;\n\n//     @ApiProperty({ example: 'LIKE' })\n//     @IsNotEmpty()\n//     @IsString()\n//     operator: string;\n\n//     @ApiProperty({ example: '%John%' })\n//     @IsNotEmpty()\n//     @IsString()\n//     value: string;\n// }\n\n// export class SortByDto {\n//     @ApiProperty({ example: 'name' })\n//     @IsString()\n//     field: string;\n\n//     @ApiProperty({ example: 'ASC' })\n//     @IsString()\n//     @Matches(/^(ASC|DESC|asc|desc)$/, {\n//         message: 'operator must be one of ASC, DESC, asc, or desc',\n//     })\n//     direction: string;\n// }\n\n// export class PaginationQueryDto {\n//     @ApiPropertyOptional({\n//         description: 'Page number',\n//         minimum: 1,\n//         default: 1,\n//     })\n//     @IsOptional()\n//     @IsNumberStringOrNumber()\n//     @ToNumber()\n//     @Min(1)\n//     // @Transform(({ value }) => {\n//     //     const strippedValue = String(value).replace(/['\"]+/g, '');\n//     //     const numberValue = Number(strippedValue);\n//     //     return isNaN(numberValue) ? 'undefined' : numberValue;\n//     // })\n//     readonly page?: number;\n\n//     @ApiPropertyOptional({\n//         description: 'Record limit',\n//         minimum: 1,\n//         maximum: 500,\n//         default: 10,\n//     })\n//     @IsOptional()\n//     @IsNumberStringOrNumber()\n//     @ToNumber()\n//     @Min(10)\n//     @Max(500)\n//     readonly limit?: number = 10;\n\n//     // @IsOptional()\n//     // @IsArray()\n//     // @ValidateNested({ each: true })\n//     // @Type(() => FilterQueryDto)\n//     // filters?: FilterQueryDto[];\n//     // // filters?: any;\n//     @ApiPropertyOptional({\n//         name: 'filters',\n//         required: false,\n//         type: String,\n//         description: 'Array of filter objects as a JSON string',\n//         example:\n//             '[{\"field\":\"name\",\"operator\":\"LIKE\",\"value\":\"John\"},{\"field\":\"age\",\"operator\":\">\",\"value\":\"30\"}]',\n//     })\n//     @IsOptional()\n//     @Transform(({ value }) => {\n//         return value ? plainToInstance(FilterQueryDto, JSON.parse(value)) : undefined;\n//     })\n//     @ValidateNested({ each: true })\n//     @Type(() => FilterQueryDto)\n//     filters?: FilterQueryDto[] | null;\n\n//     // @ApiPropertyOptional({\n//     //     description: ' Name or City:  ASC or DESC',\n//     //     example: 'name ASC',\n//     // })\n//     // @IsOptional()\n//     // @IsString()\n//     // @Validate(SortBy)\n//     // readonly sort?: string;\n//     // @ApiPropertyOptional({ type: [SortByDto], isArray: true })\n//     // @IsOptional()\n//     // @Transform(({ value }) => {\n//     //     return value ? plainToInstance(SortUserDto, JSON.parse(value)) : undefined;\n//     // })\n//     // @ValidateNested({ each: true })\n//     // @Type(() => SortUserDto)\n//     // sort?: SortUserDto[] | null;\n\n//     @ApiPropertyOptional({\n//         name: 'sort',\n//         required: false,\n//         type: String,\n//         description: 'Array of sort objects as a JSON string',\n//         example: '[{\"field\":\"name\",\"direction\":\"ASC\"},{\"field\":\"age\",\"direction\":\"DESC\"}]',\n//     })\n//     @IsOptional()\n//     @Transform(({ value }) => {\n//         return value ? plainToInstance(SortByDto, JSON.parse(value)) : undefined;\n//     })\n//     @ValidateNested({ each: true })\n//     @Type(() => SortByDto)\n//     sort?: SortByDto[] | null;\n// }\n\n// export class PaginatedResultDto {\n//     @ApiProperty()\n//     data: T[];\n\n//     @ApiProperty()\n//     total: number;\n\n//     @ApiProperty()\n//     page: number;\n\n//     @ApiProperty()\n//     limit: number;\n// }\n\n// // import { ApiProperty, ApiExtraModels } from '@nestjs/swagger';\n\n// // import { Type } from 'class-transformer';\n// // import { IsOptional, IsString, IsArray, ValidateNested, IsNumber } from 'class-validator';\n\n// // // export class FilterQueryDto {\n// // //     @ApiProperty({ example: 'name' })\n// // //     field: string;\n\n// // //     @ApiProperty({ example: 'LIKE' })\n// // //     operator: string;\n\n// // //     @ApiProperty({ example: '%John%' })\n// // //     value: string;\n// // // }\n// // export class FilterQueryDto {\n// //     @ApiProperty({ example: 'country_name' })\n// //     @IsString()\n// //     field: string;\n\n// //     @ApiProperty({ example: 'LIKE' })\n// //     @IsString()\n// //     operator: string;\n\n// //     @ApiProperty({ example: '%United%' })\n// //     @IsString()\n// //     value: string;\n// // }\n// // @ApiExtraModels(FilterQueryDto)\n// // export class PaginationQueryDto {\n// //     @ApiProperty({ example: 1, required: false })\n// //     @IsOptional()\n// //     @IsNumber()\n// //     @Type(() => Number)\n// //     page?: number = 1;\n\n// //     @ApiProperty({ example: 10, required: false })\n// //     @IsOptional()\n// //     @IsNumber()\n// //     @Type(() => Number)\n// //     limit?: number = 10;\n\n// //     // @ApiProperty({\n// //     //     type: [FilterQueryDto],\n// //     //     required: false,\n// //     //     isArray: true,\n// //     // })\n// //     // @Type(() => FilterQueryDto)\n// //     // filters?: FilterQueryDto[];\n// //     @ApiProperty({\n// //         type: FilterQueryDto,\n// //         required: false,\n// //         isArray: true,\n// //     })\n// //     // @IsOptional()\n// //     @IsArray()\n// //     @ValidateNested({ each: true })\n// //     @Type(() => FilterQueryDto)\n// //     filters?: FilterQueryDto[];\n\n// //     // @ApiProperty({\n// //     //     type: [Object],\n// //     //     // items: {\n// //     //     //     type: 'object',\n// //     //     //     items: {\n// //     //     //         type: 'object',\n// //     //     //     },\n// //     //     // },\n// //     // })\n// //     // coords: FilterQueryDto[];\n\n// //     // @ApiProperty({ type: String, required: false })\n// //     // @IsOptional()\n// //     // @IsArray()\n// //     // @ValidateNested({ each: true })\n// //     // @Type(() => FilterQueryDto)\n// //     // filters?: FilterQueryDto[];\n\n// //     @ApiProperty({ example: 'name ASC1', required: false })\n// //     sort?: string;\n// // }\n\n// // // export class PaginationQueryDto {\n// // //     @ApiProperty({ example: 1, required: false })\n// // //     page?: number = 1;\n\n// // //     @ApiProperty({ example: 10, required: false })\n// // //     limit?: number = 10;\n\n// // //     // @ApiProperty({ type: [FilterQueryDto], required: false, isArray: true })\n// // //     // filters?: FilterQueryDto[];\n\n// // //     // @ApiProperty({ type: String, required: false, isArray: true })\n// // //     // filters?: FilterQueryDto[];\n\n// // //     // @ApiProperty({ type: [FilterQueryDto], required: false, isArray: true })\n// // //     // @Type(() => FilterQueryDto)\n// // //     // filters?: FilterQueryDto[];\n\n// // //     @ApiProperty({ type: [FilterQueryDto], required: false })\n// // //     @IsOptional()\n// // //     @IsArray()\n// // //     @ValidateNested({ each: true })\n// // //     @Type(() => FilterQueryDto)\n// // //     filters?: FilterQueryDto[];\n\n// // //     @ApiProperty({ example: 'name ASC1', required: false })\n// // //     sort?: string;\n// // // }\n\n// // export class PaginatedResultDto {\n// //     @ApiProperty()\n// //     data: T[];\n\n// //     @ApiProperty()\n// //     total: number;\n\n// //     @ApiProperty()\n// //     page: number;\n\n// //     @ApiProperty()\n// //     limit: number;\n// // }\n\n// // export class abc {\n// //     @ApiProperty()\n// //     page: number;\n\n// //     @ApiProperty()\n// //     limit: number;\n// // }\n\n// // import { applyDecorators } from '@nestjs/common';\n// // import { ApiProperty, ApiExtraModels, ApiQuery, getSchemaPath } from '@nestjs/swagger';\n\n// // /**\n// //  * Combines Swagger Decorators to create a description for `filters[name]=something`\n// //  *  - has support for swagger\n// //  *  - automatic transformation with nestjs\n// //  */\n// // // // eslint-disable-next-line @typescript-eslint/ban-types,@typescript-eslint/explicit-module-boundary-types\n// // // export function ApiFilterQuery(fieldName: string, filterDto: Function) {\n// // //     return applyDecorators(\n// // //         ApiExtraModels(filterDto),\n// // //         ApiQuery({\n// // //             required: false,\n// // //             name: fieldName,\n// // //             style: 'deepObject',\n// // //             explode: true,\n// // //             type: 'object',\n// // //             schema: {\n// // //                 $ref: getSchemaPath(filterDto),\n// // //             },\n// // //         })\n// // //     );\n// // // }\n// // // eslint-disable-next-line @typescript-eslint/ban-types,@typescript-eslint/explicit-module-boundary-types\n// // export function ApiFilterQuery(fieldName: string, filterDto: Function, index: number) {\n// //     return applyDecorators(\n// //         ApiExtraModels(filterDto),\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}]`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //             schema: {\n// //                 $ref: getSchemaPath(filterDto),\n// //             },\n// //         })\n// //     );\n// // }\n\n// // export function ApiFilterQuery(fieldName: string, index: number) {\n// //     return applyDecorators(\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}].field`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //         }),\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}].operator`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //         }),\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}].value`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //         })\n// //     );\n// // }\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SortCountryDto.html":{"url":"classes/SortCountryDto.html","title":"class - SortCountryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SortCountryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/countries/dto/query-country.dto-remove.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                order\n                            \n                            \n                                    \n                                    \n                                    \n                                orderBy\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/query-country.dto-remove.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Type(undefined)@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/query-country.dto-remove.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nimport { Transform, Type, plainToInstance } from 'class-transformer';\nimport { IsNumber, IsOptional, IsString, ValidateNested } from 'class-validator';\n\nimport { Country } from './country';\n\nexport class FilterCountryDto {}\n\nexport class SortCountryDto {\n    @ApiProperty()\n    @Type(() => String)\n    @IsString()\n    orderBy: keyof Country;\n\n    @ApiProperty()\n    @IsString()\n    order: string;\n}\n\nexport class QueryCountryDto {\n    @ApiPropertyOptional()\n    @Transform(({ value }) => (value ? Number(value) : 1))\n    @IsNumber()\n    @IsOptional()\n    page?: number;\n\n    @ApiPropertyOptional()\n    @Transform(({ value }) => (value ? Number(value) : 10))\n    @IsNumber()\n    @IsOptional()\n    limit?: number;\n\n    @ApiPropertyOptional({ type: String })\n    @IsOptional()\n    @Transform(({ value }) =>\n        value ? plainToInstance(FilterCountryDto, JSON.parse(value)) : undefined\n    )\n    @ValidateNested()\n    @Type(() => FilterCountryDto)\n    filters?: FilterCountryDto | null;\n\n    @ApiPropertyOptional({ type: String })\n    @IsOptional()\n    @Transform(({ value }) => {\n        return value ? plainToInstance(SortCountryDto, JSON.parse(value)) : undefined;\n    })\n    @ValidateNested({ each: true })\n    @Type(() => SortCountryDto)\n    sort?: SortCountryDto[] | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateDto.html":{"url":"classes/UpdateDto.html","title":"class - UpdateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/currencies/dto/update.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the UpdateDto class, which represents the Data Transfer Object (DTO)\nused for updating an existing currency entity. It extends from the CreateDto class,\nmaking all fields optional for the update operation.\nThe UpdateDto class is used to define the structure of the data required to update\nan existing currency entity. It inherits all properties from the CreateDto class but\nmakes them optional, allowing partial updates.\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreateDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\n\nimport { CreateDto } from './create.dto';\n\n/**\n * @fileoverview\n * This file defines the `UpdateDto` class, which represents the Data Transfer Object (DTO)\n * used for updating an existing currency entity. It extends from the `CreateDto` class,\n * making all fields optional for the update operation.\n *\n * @module\n * @description\n * The `UpdateDto` class is used to define the structure of the data required to update\n * an existing currency entity. It inherits all properties from the `CreateDto` class but\n * makes them optional, allowing partial updates.\n */\n\nexport class UpdateDto extends PartialType(CreateDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserNotFoundException.html":{"url":"classes/UserNotFoundException.html","title":"class - UserNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/exceptions/user-not-found.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Custom exception for user not found errors.\nIt extends the NotFoundException provided by NestJS.\nExample :```typescript\nthrow new UserNotFoundException();\nthrow new UserNotFoundException('Specific error message');Example :\n            \n\n            \n                Extends\n            \n            \n                        NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(error?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/exceptions/user-not-found.exception.ts:20\n                            \n                        \n\n                \n                    \n                            Creates an instance of UserNotFoundException.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                \nOptional error message.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        'use strict';\n\nimport { NotFoundException } from '@nestjs/common';\n\n/**\n * Custom exception for user not found errors.\n *\n * @extends {NotFoundException}\n *\n * @description This exception is thrown when a requested user is not found in the system.\n * It extends the `NotFoundException` provided by NestJS.\n *\n * @example\n * ```typescript\n * throw new UserNotFoundException();\n * throw new UserNotFoundException('Specific error message');\n * ```\n */\n\nexport class UserNotFoundException extends NotFoundException {\n    /**\n     * Creates an instance of UserNotFoundException.\n     *\n     * @param {string} [error] - Optional error message.\n     */\n\n    constructor(error?: string) {\n        super('error.user_not_found', error);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UtilsService.html":{"url":"classes/UtilsService.html","title":"class - UtilsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UtilsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/helper/services/util.service.ts\n        \n\n\n            \n                Description\n            \n            \n                UtilsService\nUtilsService provides utility methods for building dynamic SQL queries, including pagination, filtering, sorting, and query construction.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                buildDynamicQuery\n                            \n                            \n                                    Public\n                                queryStatements\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        buildDynamicQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    buildDynamicQuery(paginationQuery: PaginationQueryDto, fieldConfigs: Record, baseFields: string[], fromQuery: string, countByField: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/helper/services/util.service.ts:29\n                        \n                    \n\n\n            \n                \n                        Builds dynamic SQL queries based on pagination, filtering, sorting, and field configuration.\nExample :selectQuery: string;\ncountQuery: string;}} - An object containing the dynamically built SELECT and COUNT queries.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                paginationQuery\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe pagination query parameters including filters and sorting options.\n\n\n                                            \n                                        \n                                        \n                                                fieldConfigs\n                                            \n                                                            Record\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nConfiguration for each field including alias, join table, and select fields.\n\n\n                                            \n                                        \n                                        \n                                                baseFields\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe base fields to include in the SELECT clause.\n\n\n                                            \n                                        \n                                        \n                                                fromQuery\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe base FROM clause for the query.\n\n\n                                            \n                                        \n                                        \n                                                countByField\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    '*'\n                                            \n\n                                            \n                                                    \nThe field to use for counting records in the count query.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                \nAn object containing the dynamically built SELECT and COUNT queries.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        queryStatements\n                        \n                    \n                \n            \n            \n                \n                        \n                    queryStatements(baseFields: string[], selectFields: string | string[], fromQuery: string, joinTables: string[], filterQuery: string, sortByQuery: string, countByField: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/helper/services/util.service.ts:136\n                        \n                    \n\n\n            \n                \n                        Constructs SELECT and COUNT SQL queries based on the provided parameters.\nExample :selectQuery: string;\ncountQuery: string;}} - An object containing the constructed SELECT and COUNT queries.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                baseFields\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe base fields to include in the SELECT clause.\n\n\n                                            \n                                        \n                                        \n                                                selectFields\n                                            \n                                                        string | string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAdditional fields to include in the SELECT clause.\n\n\n                                            \n                                        \n                                        \n                                                fromQuery\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe base FROM clause for the query.\n\n\n                                            \n                                        \n                                        \n                                                joinTables\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nJOIN clauses to include in the query.\n\n\n                                            \n                                        \n                                        \n                                                filterQuery\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe WHERE clause for filtering.\n\n\n                                            \n                                        \n                                        \n                                                sortByQuery\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe ORDER BY clause for sorting.\n\n\n                                            \n                                        \n                                        \n                                                countByField\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    '*'\n                                            \n\n                                            \n                                                    \nThe field to use for counting records in the count query.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                \nAn object containing the constructed SELECT and COUNT queries.\n\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PaginationQueryDto } from '@utils/dto/pagination.dto';\nimport { IPaginationFieldConfig } from '@utils/types/pagination-options';\n\n/**\n * UtilsService\n *\n * @description\n * `UtilsService` provides utility methods for building dynamic SQL queries, including pagination, filtering, sorting, and query construction.\n *\n * @export\n * @class UtilsService\n */\nexport class UtilsService {\n    /**\n     * Builds dynamic SQL queries based on pagination, filtering, sorting, and field configuration.\n     *\n     * @param {PaginationQueryDto} paginationQuery - The pagination query parameters including filters and sorting options.\n     * @param {Record} fieldConfigs - Configuration for each field including alias, join table, and select fields.\n     * @param {string[]} baseFields - The base fields to include in the SELECT clause.\n     * @param {string} fromQuery - The base FROM clause for the query.\n     * @param {string} [countByField='*'] - The field to use for counting records in the count query.\n     *\n     * @returns {{\n     *     selectQuery: string;\n     *     countQuery: string;\n     * }} - An object containing the dynamically built SELECT and COUNT queries.\n     */\n\n    public buildDynamicQuery(\n        paginationQuery: PaginationQueryDto,\n        fieldConfigs: Record,\n        baseFields: string[],\n        fromQuery: string,\n        countByField: string = '*'\n    ): {\n        selectQuery: string;\n        countQuery: string;\n    } {\n        let filterQuery = '';\n        let sortByQuery = '';\n        const filterValues: any[] = [];\n        const joinTables: string[] = [];\n        const selectFields: string[] = [];\n\n        const filters = paginationQuery.filters;\n        const sort = paginationQuery.sort;\n\n        const mySet = new Set();\n\n        if (filters && filters.length > 0) {\n            const filterConditions = filters\n                .map(\n                    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                    (filter: { field: string; operator: string; value: string }, index: number) => {\n                        const field = filter.field.toLowerCase();\n                        let alias = `ptbl`; // default alias for the main table\n                        if (fieldConfigs && fieldConfigs[field]) {\n                            const config = fieldConfigs[field];\n                            alias = config.alias();\n\n                            if (!mySet.has(alias)) {\n                                mySet.add(alias);\n                                // joinTables.push(config.joinTable(index));\n                                joinTables.push(config.joinTable(alias));\n                            }\n                            selectFields.push(...config.selectFields(alias));\n                        }\n                        const operator = filter.operator.toUpperCase();\n                        if (operator === 'IN') {\n                            const values = filter.value.split(',').map((val) => `'${val.trim()}'`);\n                            return `${alias}.${filter.field} IN (${values.join(', ')})`;\n                        }\n                        // Add the value to the filterValues array for parameterized query\n                        filterValues.push(filter.value);\n\n                        // return `${alias}.${filter.field} ${filter.operator} ?`;\n                        return `${alias}.${filter.field} ${filter.operator} '${filter.value}'`;\n                    }\n                )\n                .join(' AND ');\n\n            filterQuery = `WHERE ${filterConditions}`;\n        }\n\n        if (sort && sort.length > 0) {\n            sortByQuery = `ORDER BY `;\n            sortByQuery += sort\n                .map((sortItem: { field: string; direction: any }) => {\n                    const field = sortItem.field.toLowerCase();\n                    let alias = `ptbl`; // default alias for the main table\n\n                    if (fieldConfigs && fieldConfigs[field]) {\n                        const config = fieldConfigs[field];\n                        alias = config.alias(); // Use index 0 since sorting doesn't require multiple aliases\n                    }\n\n                    return `${alias}.${sortItem.field} ${sortItem.direction}`;\n                })\n                .join(', ');\n        }\n\n        const selectedFields = selectFields.length > 0 ? `${', '}${selectFields.join(', ')}` : [];\n\n        // return { filterQuery, filterValues, joinTables, selectFields: selectedFields, sortByQuery };\n\n        const { selectQuery, countQuery } = this.queryStatements(\n            baseFields,\n            selectedFields,\n            fromQuery,\n            joinTables,\n            filterQuery,\n            sortByQuery,\n            countByField\n        );\n\n        return { selectQuery, countQuery };\n    }\n\n    /**\n     * Constructs SELECT and COUNT SQL queries based on the provided parameters.\n     *\n     * @param {string[]} baseFields - The base fields to include in the SELECT clause.\n     * @param {string | string[]} selectFields - Additional fields to include in the SELECT clause.\n     * @param {string} fromQuery - The base FROM clause for the query.\n     * @param {string[]} joinTables - JOIN clauses to include in the query.\n     * @param {string} filterQuery - The WHERE clause for filtering.\n     * @param {string} sortByQuery - The ORDER BY clause for sorting.\n     * @param {string} [countByField='*'] - The field to use for counting records in the count query.\n     *\n     * @returns {{\n     *     selectQuery: string;\n     *     countQuery: string;\n     * }} - An object containing the constructed SELECT and COUNT queries.\n     */\n\n    public queryStatements(\n        baseFields: string[],\n        selectFields: string | string[],\n        fromQuery: string,\n        joinTables: string[],\n        filterQuery: string,\n        sortByQuery: string,\n        countByField: string = '*'\n    ): {\n        selectQuery: string;\n        countQuery: string;\n    } {\n        const selectQuery = `SELECT ${baseFields.join(', ')} ${selectFields} ${fromQuery} ${joinTables.join(' ')} ${filterQuery} ${sortByQuery}`;\n        const countQuery = `SELECT count(${countByField}) ${fromQuery} ${joinTables.join(' ')} ${filterQuery}`;\n\n        return { selectQuery, countQuery };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChangelog\n[1.0.1] - 2024-07-01\nBug Fixes\n\nconfig: Fixed issue with configuration\ndeps: Updated dependencies\n\n[1.0.0] - 2024-06-25\nFeatures\n\nstart: Initial release\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"contributing.html":{"url":"contributing.html","title":"getting-started - contributing","body":"\n                   \n\n2. CONTRIBUTING.md\nGuidelines for contributing to your project.\nExample:\nExample :# Contributing to Project Name\n\nWe welcome contributions from the community. Please follow these guidelines to ensure a smooth process for everyone.\n\n## How to Contribute\n\n### Reporting Bugs\nIf you find a bug, please open an issue on GitHub and include as much information as possible.\n\n### Suggesting Features\nWe welcome feature requests! Please open an issue on GitHub and describe the feature in detail.\n\n### Code Contributions\n1. Fork the repository.\n2. Create a new branch (`git checkout -b feature-name`).\n3. Make your changes.\n4. Commit your changes (`git commit -m 'Add feature'`).\n5. Push to the branch (`git push origin feature-name`).\n6. Open a pull request on GitHub.\n\n## Code Style\nPlease adhere to the code style used in the project. We use [tool/linter] for code formatting and linting.\n\n## Running Tests\nEnsure that all tests pass before submitting a pull request. Run tests with:\n```sh\nyarn test\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                prisma/data/countries-currencies-timezones.ts\n            \n            variable\n            countries\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/data/countries-dummy.ts\n            \n            variable\n            countries\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/data/countries-dummy.ts\n            \n            variable\n            countriesjson\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/data/countries-dummy.ts\n            \n            variable\n            countriesjson1\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/data/countries-dummy.ts\n            \n            variable\n            countriesList\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/data/countries-dummy.ts\n            \n            variable\n            currencies\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/seed.ts\n            \n            variable\n            prisma\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/seed.ts\n            \n            variable\n            seed\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/app.module.ts\n            \n            variable\n            ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/helper/helper.module.ts\n            \n            variable\n            providers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/helper/services/config.service.ts\n            \n            class\n            ConfigService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/helper/services/config.service.ts\n            \n            class\n            EnvVarAppConfigValidator\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/common/helper/services/pagination.service.ts\n            \n            injectable\n            PaginationService\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/common/helper/services/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/common/helper/services/util.service.ts\n            \n            class\n            UtilsService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/config/app.config.ts\n            \n            class\n            EnvironmentVariablesValidator\n            \n                10 %\n                (1/10)\n            \n        \n        \n            \n                \n                src/config/database.config.ts\n            \n            class\n            EnvironmentVariablesValidator\n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                src/config/file.config.ts\n            \n            class\n            EnvironmentVariablesValidator\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/config/logger.config.ts\n            \n            class\n            EnvironmentVariablesValidator\n            \n                8 %\n                (1/12)\n            \n        \n        \n            \n                \n                src/config/logger.config.ts\n            \n            variable\n            getBooleanEnvVar\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/core.constant.ts\n            \n            variable\n            HTTP_STATUS_MESSAGES\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/constants/core.constant.ts\n            \n            variable\n            PUBLIC_ROUTE_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/constants/core.constant.ts\n            \n            variable\n            RESPONSE_SERIALIZATION_META_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/decorators/number.string.validator.ts\n            \n            function\n            IsNumberStringOrNumber\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/decorators/public.request.decorator.ts\n            \n            variable\n            PublicRoute\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/decorators/swagger.schema.ts\n            \n            variable\n            ApiFile\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/decorators/swagger.schema.ts\n            \n            variable\n            ApiMultiFile\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/decorators/transforms.decorator.ts\n            \n            function\n            ToNumber\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/exceptions/file-not-image.exception.ts\n            \n            class\n            FileNotImageException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/core/exceptions/http-error.filter.ts\n            \n            class\n            HttpErrorFilter\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/core/exceptions/query.ts\n            \n            class\n            Query\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/core/exceptions/user-not-found.exception.ts\n            \n            class\n            UserNotFoundException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/core/filters/all-exceptions.filter.ts\n            \n            class\n            AllExceptionsFilter\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/core/filters/bad-request.filter.ts\n            \n            class\n            BadRequestExceptionFilter\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/core/filters/constraint-errors.ts\n            \n            variable\n            constraintErrors\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/filters/http-exception.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/core/filters/prisma-exception.filter.ts\n            \n            class\n            PrismaClientExceptionFilter\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/core/filters/query-failed.filter.ts\n            \n            class\n            QueryFailedFilter\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/core/filters/query.ts\n            \n            class\n            Query\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/core/interfaces/app.interfaces.ts\n            \n            interface\n            IAppConfig\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/core/interfaces/aws.interfaces.ts\n            \n            interface\n            IAwsConfig\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/core/interfaces/file.interfaces.ts\n            \n            interface\n            IFileConfig\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/core/interfaces/jwt.interfaces.ts\n            \n            interface\n            IJWTConfig\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/core/interfaces/node-emailer.interfaces.ts\n            \n            interface\n            INodeEmailerConfig\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/core/interfaces/postgres.interfaces.ts\n            \n            interface\n            IPostgreSQLConfig\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/core/interfaces/sendgrid.interfaces.ts\n            \n            interface\n            ISendGridConfig\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/interfaces/sms.interfaces.ts\n            \n            interface\n            ISMSConfig\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/interfaces/upload-file.interfaces.ts\n            \n            interface\n            IUploadFileConfig\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/core/validators/field.validator.ts\n            \n            function\n            IsValidField\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/validators/filter.validator.ts\n            \n            injectable\n            CommaSeparated\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/core/validators/filter.validator.ts\n            \n            injectable\n            SortBy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/countries/countries.controller.ts\n            \n            controller\n            CountriesController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/modules/countries/countries.service.ts\n            \n            injectable\n            CountriesService\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/modules/countries/dto/country.ts\n            \n            class\n            Country\n            \n                100 %\n                (15/15)\n            \n        \n        \n            \n                \n                src/modules/countries/dto/query-country.dto-remove.ts\n            \n            class\n            FilterCountryDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/countries/dto/query-country.dto-remove.ts\n            \n            class\n            QueryCountryDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/countries/dto/query-country.dto-remove.ts\n            \n            class\n            SortCountryDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/currencies/currencies.controller.ts\n            \n            controller\n            CurrenciesController\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/modules/currencies/currencies.controller.ts\n            \n            variable\n            modules\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/currencies/currencies.service.ts\n            \n            injectable\n            CurrenciesService\n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                src/modules/currencies/dto/create.dto.ts\n            \n            class\n            CreateDto\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/modules/currencies/dto/currency.ts\n            \n            class\n            Currency\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/modules/currencies/dto/update.dto.ts\n            \n            class\n            UpdateDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/currencies/query.ts\n            \n            class\n            Query\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/modules/files/domain/file.ts\n            \n            class\n            FileType\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/files/files.module.ts\n            \n            variable\n            infrastructureUploaderModule\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/files/files.service.ts\n            \n            injectable\n            FilesService\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/files/infrastructure/uploader/local/dto/file-response.dto.ts\n            \n            class\n            FileResponseDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/modules/files/infrastructure/uploader/local/files.controller.ts\n            \n            controller\n            FilesLocalController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/files/infrastructure/uploader/local/files.service.ts\n            \n            injectable\n            FilesLocalService\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/modules/files/infrastructure/uploader/s3-presigned/dto/file-response.dto.ts\n            \n            class\n            FileResponseDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/files/infrastructure/uploader/s3-presigned/dto/file.dto.ts\n            \n            class\n            FileUploadDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/files/infrastructure/uploader/s3-presigned/files.controller.ts\n            \n            controller\n            FilesS3PresignedController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/files/infrastructure/uploader/s3-presigned/files.service.ts\n            \n            injectable\n            FilesS3PresignedService\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/modules/files/infrastructure/uploader/s3/dto/file-response.dto.ts\n            \n            class\n            FileResponseDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/modules/files/infrastructure/uploader/s3/files.controller.ts\n            \n            controller\n            FilesS3Controller\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/modules/files/infrastructure/uploader/s3/files.service.ts\n            \n            injectable\n            FilesS3Service\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/modules/home/home.controller.ts\n            \n            controller\n            HomeController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/modules/home/home.service.ts\n            \n            injectable\n            HomeService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/providers/dynamic-query.service-to-be-remove.ts\n            \n            class\n            DynamicQueryBuilder\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/providers/dynamic-query.service-to-be-remove.ts\n            \n            interface\n            QueryOptions\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/providers/file-upload.service.ts\n            \n            variable\n            copyFile\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/providers/file-upload.service.ts\n            \n            variable\n            editFileName\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/providers/file-upload.service.ts\n            \n            variable\n            fileName\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/providers/file-upload.service.ts\n            \n            variable\n            filesRoot\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/providers/file-upload.service.ts\n            \n            variable\n            fsRoot\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/providers/file-upload.service.ts\n            \n            variable\n            imageFileFilter\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/providers/file-upload.service.ts\n            \n            variable\n            multiFileDestDir\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/providers/file-upload.service.ts\n            \n            variable\n            profileDestDir\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/providers/file-upload.service.ts\n            \n            variable\n            removeFile\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/swagger.ts\n            \n            function\n            Unnamed function\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/deep-resolver.ts\n            \n            function\n            deepResolvePromises\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/dto/pagination-response.dto.ts\n            \n            class\n            PaginationResponseDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/utils/dto/pagination-response.dto.ts\n            \n            function\n            PaginationResponse\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/dto/pagination.dto.ts\n            \n            class\n            FilterQueryDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/utils/dto/pagination.dto.ts\n            \n            class\n            PaginationQueryDto\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/utils/dto/pagination.dto.ts\n            \n            class\n            SortByDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/utils/dto/pagination.meta.dto.ts\n            \n            class\n            PaginationMetaDto\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/utils/dto/pagination.meta.dto.ts\n            \n            interface\n            IPageMetaDtoParameters\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/utils/serializer.interceptor.ts\n            \n            injectable\n            ResolvePromisesInterceptor\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/utils/transformers/lower-case.transformer.ts\n            \n            variable\n            lowerCaseTransformer\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/transformers/upper-case.transformer.ts\n            \n            variable\n            upperCaseTransformer\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/types/pagination-options.ts\n            \n            interface\n            IPaginationFieldConfig\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/utils/validate-config.ts\n            \n            function\n            validateConfig\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @aws-sdk/client-s3 : ^3.609.0\n        \n            @aws-sdk/s3-request-presigner : ^3.613.0\n        \n            @express-rate-limit/tsconfig : ^1.0.2\n        \n            @infineit/winston-logger : ^1.0.23\n        \n            @nestjs/axios : ^3.0.2\n        \n            @nestjs/common : ^10.3.9\n        \n            @nestjs/config : ^3.2.2\n        \n            @nestjs/core : ^10.3.9\n        \n            @nestjs/platform-express : ^10.3.9\n        \n            @nestjs/swagger : ^7.3.1\n        \n            @nestjs/terminus : ^10.2.3\n        \n            @prisma/client : ^5.17.0\n        \n            axios : ^1.7.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            compression : ^1.7.4\n        \n            express : ^4.19.2\n        \n            express-rate-limit : ^7.4.0\n        \n            helmet : ^7.1.0\n        \n            install : ^0.13.0\n        \n            multer : ^1.4.5-lts.1\n        \n            multer-s3 : ^3.0.1\n        \n            npm : ^10.8.3\n        \n            pg : ^8.12.0\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Environment   (src/.../app.config.ts)\n                        \n                        \n                            Environment   (src/.../logger.config.ts)\n                        \n                        \n                            FileDriver   (src/.../file-config.type.ts)\n                        \n                        \n                            PaginationType   (src/.../pagination.dto.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/app.config.ts\n    \n        \n            \n                \n                    \n                        \n                        Environment\n                    \n                \n                        \n                            \n                                 Development\n                            \n                        \n                        \n                            \n                                Value : development\n                            \n                        \n                        \n                            \n                                 Production\n                            \n                        \n                        \n                            \n                                Value : production\n                            \n                        \n                        \n                            \n                                 Staging\n                            \n                        \n                        \n                            \n                                Value : staging\n                            \n                        \n                        \n                            \n                                 Test\n                            \n                        \n                        \n                            \n                                Value : testing\n                            \n                        \n            \n        \n\n    src/config/logger.config.ts\n    \n        \n            \n                \n                    \n                        \n                        Environment\n                    \n                \n                        \n                            \n                                 Development\n                            \n                        \n                        \n                            \n                                Value : development\n                            \n                        \n                        \n                            \n                                 Production\n                            \n                        \n                        \n                            \n                                Value : production\n                            \n                        \n                        \n                            \n                                 Staging\n                            \n                        \n                        \n                            \n                                Value : staging\n                            \n                        \n                        \n                            \n                                 Test\n                            \n                        \n                        \n                            \n                                Value : testing\n                            \n                        \n            \n        \n\n    src/config/type/file-config.type.ts\n    \n        \n            \n                \n                    \n                        \n                        FileDriver\n                    \n                \n                    \n                        \n                            Enum representing the available file storage drivers.\n\n                        \n                    \n                        \n                            \n                                 LOCAL\n                            \n                        \n                        \n                            \n                                Value : local\n                            \n                        \n                        \n                            \n                                 S3\n                            \n                        \n                        \n                            \n                                Value : s3\n                            \n                        \n                        \n                            \n                                 S3_PRESIGNED\n                            \n                        \n                        \n                            \n                                Value : s3-presigned\n                            \n                        \n            \n        \n\n    src/utils/dto/pagination.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        PaginationType\n                    \n                \n                    \n                        \n                            Enum representing different pagination types.\n\n                        \n                    \n                        \n                            \n                                 NONE\n                            \n                        \n                        \n                            \n                                Value : no\n                            \n                        \n                        \n                            \n                                 INFINITY\n                            \n                        \n                        \n                            \n                                Value : infinity\n                            \n                        \n                        \n                            \n                                 PAGINATE\n                            \n                        \n                        \n                            \n                                Value : paginate\n                            \n                        \n                        \n                            \n                                 ALL\n                            \n                        \n                        \n                            \n                                Value : all\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            deepResolvePromises   (src/.../deep-resolver.ts)\n                        \n                        \n                            IsNumberStringOrNumber   (src/.../number.string.validator.ts)\n                        \n                        \n                            IsValidField   (src/.../field.validator.ts)\n                        \n                        \n                            PaginationResponse   (src/.../pagination-response.dto.ts)\n                        \n                        \n                            ToNumber   (src/.../transforms.decorator.ts)\n                        \n                        \n                            Unnamed function   (src/.../swagger.ts)\n                        \n                        \n                            validateConfig   (src/.../validate-config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                        Initializes and starts the NestJS application.\nConfigures global settings, middleware, and exception handling.\nSets up Swagger documentation if in development, staging, or testing environments.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves when the server starts.\n\n                            \n                \n            \n        \n    \n    src/utils/deep-resolver.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        deepResolvePromises\n                        \n                    \n                \n            \n            \n                \ndeepResolvePromises(input)\n                \n            \n\n\n\n\n            \n                \n                        Recursively resolves all nested promises in an object or array.\nThis function takes an input that can be a promise, an array, an object, or a primitive value,\nand recursively resolves any promises contained within. It supports nested structures and\npreserves the original structure of the input while resolving promises.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                input\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe input to process, which may include promises.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/core/decorators/number.string.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsNumberStringOrNumber\n                        \n                    \n                \n            \n            \n                \nIsNumberStringOrNumber(validationOptions?: ValidationOptions)\n                \n            \n\n\n\n\n            \n                \n                        Custom decorator that checks if a value is a number or a numeric string,\nand if it is greater than or equal to 1.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                validationOptions\n                                            \n                                                        ValidationOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptions used to pass to validation decorators.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/core/validators/field.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsValidField\n                        \n                    \n                \n            \n            \n                \nIsValidField(entity: any, validationOptions?: ValidationOptions)\n                \n            \n\n\n\n\n            \n                \n                        Custom decorator to validate if a field is a valid key of the provided entity class.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                entity\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe class constructor of the entity to check against.\n\n\n                                            \n                                        \n                                        \n                                                validationOptions\n                                            \n                                                        ValidationOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional validation options.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/utils/dto/pagination-response.dto.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PaginationResponse\n                        \n                    \n                \n            \n            \n                \nPaginationResponse(classReference: Type)\n                \n            \n\n\n\n\n            \n                \n                        Creates a pagination response DTO class with specified data type.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                classReference\n                                            \n                                                        Type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe class reference for the data type.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/core/decorators/transforms.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ToNumber\n                        \n                    \n                \n            \n            \n                \nToNumber()\n                \n            \n\n\n\n\n            \n                \n                        Decorator that converts a string number or number to an integer.\n\n\n                        \n                            Returns :         void\n\n                        \n                            \n                                \nA property decorator function.\n\n\n                            \n                \n            \n        \n    \n    src/swagger.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Unnamed function\n                        \n                    \n                \n            \n            \n                \nUnnamed function(app: INestApplication)\n                \n            \n\n\n\n\n            \n                \n                        Configures and sets up Swagger documentation for the NestJS application.\nThis function creates and configures Swagger documentation based on application configuration.\nIt sets up two separate Swagger documents: one for the main application modules and another\nfor common modules. It also configures various Swagger UI options.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                app\n                                            \n                                                        INestApplication\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe NestJS application instance.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/utils/validate-config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        validateConfig\n                        \n                    \n                \n            \n            \n                \nvalidateConfig(config: Record, envVariablesClass: ClassConstructor)\n                \n            \n\n\n\n\n            \n                \n                        Validates and transforms a configuration object based on a class schema.\nThis function uses class-transformer to transform a plain object into an instance of a class\nand class-validator to validate the instance. If validation fails, it throws an error with\ndetailed information about the validation errors.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                        Record\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe configuration object to be validated.\n\n\n                                            \n                                        \n                                        \n                                                envVariablesClass\n                                            \n                                                        ClassConstructor\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe class constructor used for transforming and validating the configuration.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nNestJS Starter Boilerplate\nIntroduction\nIntroducing the NestJS boilerplate - a great way to get started on your next Node.js project! It's built using the latest version of NestJS, which is a powerful and flexible framework for creating efficient and scalable server-side applications. The boilerplate includes TypeScript, PostgreSQL, and JWT authentication right out of the box, so you don't have to worry about setting those up yourself.\nOther awesome features include configuration support with Dotenv, Prisma for interacting with databases, Swagger for API documentation, and Docker Compose for container orchestration. Plus, the boilerplate also comes with pre-configured linting tools and secure HTTP headers with Helmet.\nGetting started is easy - just clone the repository, install the dependencies, and you're ready to start building your next great idea!\n🚀 Features\n\n📱 NestJS — latest version\n🎉 TypeScript - Type checking\n⚙️ Dotenv - Supports environment variables\n🗝 Authentication - JWT, RSA256\n🏬 Authorization - RBAC, CBAC\n🏪 Prisma - Database ORM\n🏪 PostgreSQL - Open-Source Relational Database\n🧠 Configuration - Single config for all\n📃 Swagger - API Documentation\n🐳 Docker Compose - Container Orchestration\n🔐 Helmet - secure HTTP headers\n📏 ESLint — Pluggable JavaScript linter\n💖 Prettier - Opinionated Code Formatter\n✨ Commitlint - Lint your conventional commits\n🕵️‍♂️ Code Scanning - Code scanning with CodeQL\n\nGetting Started\nPrerequisites\nEnsure you have the following installed:\n\nNode.js (20+)\nYarn or npm (yarn recomandation)\nDocker (if applicable)\n\nInstallation\n\nClone the repository:Example :git clone https://github.com/dharmesh--patel/nestjs-starter.git\ncd yourproject\n\nVisual Studio Code Extensions\nExample :- ESLint - `dbaeumer.vscode-eslint` - Dirk Baeumer\n\n- Prettier - Code formatter by `esbenp.prettier-vscode` - Esben Petersen\n \n- Prisma - `Prisma.prisma` - prisma.io\n\n- Dockfile - `foxundermoon.shell-format` - foxundermoon\n\n- markdown - `yzhang.markdown-all-in-one` - Yu Zhang\n\n- To open the command pallette, \n  you can use Command + Shift + P on Mac or Control + Shift + P on Windows. \n  In the command pallette search format, then choose Format Document.Installation\nExample :$ yarnRunning Server\nDevelopment / Staging / Production\nExample :# development\n$ yarn start\n\n# staging\n$ yarn staging\n\n# production\n$ yarn productionBuild\nExample :yarn buildTests\nExample :# unit tests\n$ yarn test\n\n# e2e tests\n$ yarn test:e2e\n\n# test coverage\n$ yarn test:covDatabase Migration Development\nExample :   # Change in database file (it will create migration file in prisma/migration)\n   $ yarn migrationDocker Container and Database Migration for Staging/Production\nExample :   # To run docker file run script (it will create docker container run update database)\n   $ bash ./start.sh staging/productionDocker Container down\nExample :   # To run docker file run script (it will create docker container run update database)\n   $ bash ./stop.sh staging/productionRunning all services on Docker\nExample :docker-compose up --buildRun only database and redis services on Docker\nExample :docker-compose up postgres redisSwagger Documentation\n\nSwagger documentation endpoint will be running at  /docs .\n\nK8s Deployment Local\nExample :# first start minikube\nminikube start\n\n# deployment\nkubectl apply -f k8s/\n\n# get endpoint of k8s cluster\nminikube service nestjs-starter-serviceCommit Message Guidelines\n[optional scope]: \n[optional body]\n[optional footer(s)]\nType: The type of change (e.g., feat, fix, docs, style, refactor, test, chore).\nScope: The scope of the change (e.g., core, api, config), which is optional.\nDescription: A short, imperative summary of the change.\nBody: Detailed explanation of the change, which is optional.\nFooter: Any footer notes, such as breaking changes or issues closed, which is optional.\ngit commit -m \"feat(api): add new endpoint for user registration\"\ngit commit -m \"fix(core): handle edge case in data processing\"\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nLicense\nNest is MIT licensed.\nAuthor\n🇮🇳 Dharmesh Patel \nGithub\nLinkedin\nInstagram\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2024 Dharmesh Patel\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ApiModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CountriesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CurrenciesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FilesLocalModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FilesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FilesS3Module\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FilesS3PresignedModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HelperModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HomeModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ApiModule\n\n\n\ncluster_ApiModule_imports\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_CountriesModule\n\n\n\ncluster_CountriesModule_exports\n\n\n\ncluster_CountriesModule_providers\n\n\n\ncluster_CurrenciesModule\n\n\n\ncluster_CurrenciesModule_providers\n\n\n\ncluster_FilesLocalModule\n\n\n\ncluster_FilesLocalModule_exports\n\n\n\ncluster_FilesLocalModule_providers\n\n\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_imports\n\n\n\ncluster_FilesModule_exports\n\n\n\ncluster_FilesModule_providers\n\n\n\ncluster_FilesS3Module\n\n\n\ncluster_FilesS3Module_exports\n\n\n\ncluster_FilesS3Module_providers\n\n\n\ncluster_FilesS3PresignedModule\n\n\n\ncluster_FilesS3PresignedModule_exports\n\n\n\ncluster_FilesS3PresignedModule_providers\n\n\n\ncluster_HelperModule\n\n\n\ncluster_HelperModule_exports\n\n\n\ncluster_HelperModule_providers\n\n\n\ncluster_HomeModule\n\n\n\ncluster_HomeModule_providers\n\n\n\n\nCountriesModule\n\nCountriesModule\n\n\n\nApiModule\n\nApiModule\n\nApiModule -->\n\nCountriesModule->ApiModule\n\n\n\n\n\nCountriesService \n\nCountriesService \n\nCountriesService  -->\n\nCountriesModule->CountriesService \n\n\n\n\n\nCurrenciesModule\n\nCurrenciesModule\n\nApiModule -->\n\nCurrenciesModule->ApiModule\n\n\n\n\n\nFilesModule\n\nFilesModule\n\nApiModule -->\n\nFilesModule->ApiModule\n\n\n\n\n\nFilesService \n\nFilesService \n\nFilesService  -->\n\nFilesModule->FilesService \n\n\n\n\n\nHomeModule\n\nHomeModule\n\nApiModule -->\n\nHomeModule->ApiModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nApiModule->AppModule\n\n\n\n\n\nHelperModule\n\nHelperModule\n\nAppModule -->\n\nHelperModule->AppModule\n\n\n\n\n\nPaginationService \n\nPaginationService \n\nPaginationService  -->\n\nHelperModule->PaginationService \n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nHelperModule->PrismaService \n\n\n\n\n\nUtilsService \n\nUtilsService \n\nUtilsService  -->\n\nHelperModule->UtilsService \n\n\n\n\n\nCountriesService\n\nCountriesService\n\nCountriesModule -->\n\nCountriesService->CountriesModule\n\n\n\n\n\nCurrenciesService\n\nCurrenciesService\n\nCurrenciesModule -->\n\nCurrenciesService->CurrenciesModule\n\n\n\n\n\nFilesLocalService \n\nFilesLocalService \n\n\n\nFilesLocalModule\n\nFilesLocalModule\n\nFilesLocalService  -->\n\nFilesLocalModule->FilesLocalService \n\n\n\n\n\nFilesLocalService\n\nFilesLocalService\n\nFilesLocalModule -->\n\nFilesLocalService->FilesLocalModule\n\n\n\n\n\nFilesS3Module\n\nFilesS3Module\n\nFilesModule -->\n\nFilesS3Module->FilesModule\n\n\n\n\n\nFilesS3Service \n\nFilesS3Service \n\nFilesS3Service  -->\n\nFilesS3Module->FilesS3Service \n\n\n\n\n\nFilesS3PresignedModule\n\nFilesS3PresignedModule\n\nFilesModule -->\n\nFilesS3PresignedModule->FilesModule\n\n\n\n\n\nFilesS3PresignedService \n\nFilesS3PresignedService \n\nFilesS3PresignedService  -->\n\nFilesS3PresignedModule->FilesS3PresignedService \n\n\n\n\n\nFilesService\n\nFilesService\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\nFilesS3Service\n\nFilesS3Service\n\nFilesS3Module -->\n\nFilesS3Service->FilesS3Module\n\n\n\n\n\nFilesS3PresignedService\n\nFilesS3PresignedService\n\nFilesS3PresignedModule -->\n\nFilesS3PresignedService->FilesS3PresignedModule\n\n\n\n\n\nPaginationService\n\nPaginationService\n\nHelperModule -->\n\nPaginationService->HelperModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nHelperModule -->\n\nPrismaService->HelperModule\n\n\n\n\n\nHomeService\n\nHomeService\n\nHomeModule -->\n\nHomeService->HomeModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        10 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    7 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    12 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    36 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    12 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.0.0\n        \n            Description : Nest TypeScript starter repository\n        \n            Homepage : https://github.com/dharmesh-r-patel/nestjs-starter.git#readme\n        \n            Bugs : https://github.com/dharmesh-r-patel/nestjs-starter.git/issues\n        \n            License : MIT\n        \n            Repository : git+https://github.com/dharmesh-r-patel/nestjs-starter.git\n        \n            Author : Dharmesh Patel\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AllConfigType   (src/.../config.type.ts)\n                        \n                        \n                            AppConfig   (src/.../app-config.type.ts)\n                        \n                        \n                            DatabaseConfig   (src/.../database-config.type.ts)\n                        \n                        \n                            DeepPartial   (src/.../deep-partial.type.ts)\n                        \n                        \n                            FileConfig   (src/.../file-config.type.ts)\n                        \n                        \n                            LoggerConfig   (src/.../logger-config.type.ts)\n                        \n                        \n                            MaybeType   (src/.../maybe.type.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/type/config.type.ts\n    \n    \n        \n            \n                \n                    \n                    AllConfigType\n                \n            \n            \n                \n                    Aggregated configuration type for the entire application.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/config/type/app-config.type.ts\n    \n    \n        \n            \n                \n                    \n                    AppConfig\n                \n            \n            \n                \n                    Configuration settings for the application.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/config/type/database-config.type.ts\n    \n    \n        \n            \n                \n                    \n                    DatabaseConfig\n                \n            \n            \n                \n                    Configuration settings for database connectivity.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/utils/types/deep-partial.type.ts\n    \n    \n        \n            \n                \n                    \n                    DeepPartial\n                \n            \n            \n                \n                    A utility type that recursively makes all properties of a given type T optional.\nThis allows for partial objects to be deeply nested within the original type T.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/config/type/file-config.type.ts\n    \n    \n        \n            \n                \n                    \n                    FileConfig\n                \n            \n            \n                \n                    Configuration settings for file storage.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/config/type/logger-config.type.ts\n    \n    \n        \n            \n                \n                    \n                    LoggerConfig\n                \n            \n            \n                \n                    Configuration settings for the application.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/utils/types/maybe.type.ts\n    \n    \n        \n            \n                \n                    \n                    MaybeType\n                \n            \n            \n                \n                    A utility type that represents a type T that may be either of type T or undefined.\nThis is useful for cases where a value may or may not be present.\n\n                \n            \n            \n                \n                        T | undefined\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
