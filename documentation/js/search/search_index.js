var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AddresTypeDto.html",[0,0.239,1,3.403]],["body/classes/AddresTypeDto.html",[0,0.462,1,6.153,2,0.782,3,0.101,4,0.093,5,0.101,6,4.474,7,0.387,8,1.172,9,2.274,10,1.385,11,2.788,12,1.062,13,2.18,14,1.561,15,3.185,16,2.845,17,7.642,18,2.323,19,1.97,20,3.967,21,4.782,22,3.473,23,2.722,24,0.928,25,3.99,26,2.537,27,3.99,28,3.01,29,2.596,30,2.092,31,2.003,32,2.668,33,3.296,34,3.709,35,3.587,36,0.347,37,5.389,38,1.126,39,6.137,40,1.968,41,3.786,42,0.586,43,0.008,44,0.917,45,4.474,46,6.379,47,2.285,48,7.431,49,4.485,50,5.09,51,0.826,52,5.039,53,2.788,54,3.99,55,2.725,56,5.039,57,2.859,58,2.859,59,5.46,60,4.162,61,4.978,62,4.782,63,4.445,64,1.981,65,3.417,66,2.006,67,3.342,68,5.039,69,3.843,70,5.039,71,6.707,72,5.09,73,1.857,74,0.297,75,3.213,76,1.173,77,4.031,78,3.99,79,3.587,80,3.368,81,3.01,82,2.722,83,0.88,84,0.446,85,0.101,86,4.474,87,3.843,88,0.005,89,0.005]],["title/classes/AddressType.html",[0,0.239,90,3.613]],["body/classes/AddressType.html",[0,0.313,2,0.967,3,0.125,4,0.115,5,0.084,24,0.887,31,1.94,36,0.429,37,6.39,39,6.786,40,2.003,42,0.57,43,0.008,44,0.958,47,2.444,48,7.937,51,0.857,53,3.785,57,3.277,58,3.277,64,2.145,66,2.041,69,4.405,74,0.246,76,1.451,85,0.125,88,0.006,89,0.006,90,7.071,91,5.535,92,4.458,93,6.234,94,7.401,95,6.786,96,6.786,97,6.786,98,6.786,99,6.234,100,6.826,101,6.234,102,4.654]],["title/controllers/AddressTypeController.html",[103,1.548,104,3.875]],["body/controllers/AddressTypeController.html",[0,0.368,3,0.147,4,0.135,5,0.098,37,5.236,42,0.459,43,0.007,74,0.333,76,1.705,85,0.147,88,0.007,89,0.007,103,2.381,104,6.891,105,2.537,106,6.503,107,4.536,108,1.356,109,3.678,110,7.324,111,7.324]],["title/injectables/AddressTypeService.html",[112,1.398,113,3.875]],["body/injectables/AddressTypeService.html",[0,0.362,1,2.432,3,0.068,4,0.093,5,0.082,7,0.353,8,0.887,10,1.251,12,0.995,15,2.013,16,1.798,17,4.51,18,2.106,19,1.492,23,2.061,24,0.586,36,0.234,37,2.432,38,0.934,42,0.601,43,0.008,44,0.905,46,6.63,51,0.807,59,2.769,73,2.232,74,0.336,83,0.594,84,0.597,85,0.068,88,0.005,89,0.004,90,4.614,108,0.63,112,1.492,113,6.162,114,1.487,115,3.02,116,1.16,117,1.427,118,2.013,119,1.98,120,2.165,121,2.279,122,8.243,123,1.618,124,5.08,125,2.911,126,1.228,127,3.286,128,1.722,129,2.716,130,3.587,131,3.146,132,2.341,133,1.966,134,3.146,135,1.879,136,1.507,137,3.824,138,2.55,139,3.141,140,2.335,141,2.734,142,2.881,143,2.631,144,1.722,145,3.02,146,4.062,147,3.939,148,5.08,149,1.538,150,0.931,151,2.477,152,2.477,153,3.513,154,3.401,155,2.013,156,1.678,157,1.618,158,1.554,159,3.282,160,2.407,161,2.407,162,3.401,163,5.08,164,2.305,165,2.407,166,2.407,167,3.155,168,2.107,169,2.73,170,3.401,171,4.504,172,2.61,173,2.679,174,3.991,175,2.165,176,2.591,177,2.631,178,3.401,179,2.631,180,2.407,181,2.618,182,3.401,183,1.553,184,5.08,185,3.489,186,1.65,187,3.147,188,4.467,189,1.317,190,2.581,191,3.401,192,2.432,193,1.45,194,3.401,195,1.45,196,3.401,197,1.819,198,2.307,199,1.612,200,3.401,201,1.612,202,1.658,203,2.107,204,1.485,205,3.386,206,3.445,207,3.765,208,2.107,209,2.249,210,3.765,211,2.809,212,1.743,213,1.966,214,3.824,215,2.2,216,4.062,217,3.183,218,3.855,219,1.949,220,1.45,221,3.146,222,2.107,223,2.107,224,3.765,225,3.765,226,3.765,227,3.362,228,1.285,229,2.107,230,3.02,231,2.2,232,1.38,233,2.107,234,2.024,235,4.135,236,2.107,237,3.401,238,2.2,239,1.949,240,3.401,241,1.762,242,2.107,243,2.307,244,2.307,245,3.022,246,1.526,247,2.107,248,1.45,249,1.762,250,3.146,251,5.08,252,3.401,253,2.2,254,2.911,255,2.024,256,3.022,257,2.432,258,1.881,259,1.762,260,2.911,261,2.911,262,2.107,263,2.769,264,1.38,265,2.769,266,2.107,267,2.024,268,2.881,269,2.107,270,2.307]],["title/classes/AllExceptionsFilter.html",[0,0.239,271,3.875]],["body/classes/AllExceptionsFilter.html",[0,0.362,2,0.874,3,0.113,4,0.104,5,0.076,7,0.358,14,1.852,24,0.832,36,0.387,38,0.89,40,1.616,42,0.498,43,0.008,51,0.818,74,0.313,85,0.113,88,0.006,89,0.006,108,1.042,117,1.526,144,1.909,149,1.414,150,0.832,155,2.857,156,1.083,158,1.042,188,3.734,189,2.179,204,1.56,209,2.082,212,1.801,217,2.285,227,3.114,239,3.226,271,6.829,272,7.448,273,4.999,274,5.155,275,5.287,276,4.254,277,5.278,278,3.236,279,5.997,280,4.733,281,5.997,282,4.29,283,7.731,284,4.583,285,5.63,286,4.637,287,3.995,288,6.476,289,5.63,290,4.891,291,4.991,292,5.882,293,5.63,294,4.891,295,2.857,296,5.69,297,2.998,298,5.473,299,5.155,300,4.891,301,3.667,302,3.488,303,3.734,304,3.114,305,3.818,306,3.114,307,4.583,308,6.403,309,5.63,310,4.999,311,3.818,312,3.818,313,3.818,314,4.025,315,4.583,316,4.273,317,4.273,318,3.818,319,4.273,320,2.526,321,4.025,322,5.63,323,4.999,324,4.025,325,4.583]],["title/modules/ApiModule.html",[84,0.422,326,3.403]],["body/modules/ApiModule.html",[0,0.415,3,0.097,4,0.089,5,0.106,7,0.294,43,0.008,74,0.365,83,0.847,84,0.838,85,0.097,88,0.005,89,0.005,108,0.898,123,2.932,126,2.227,209,2.928,274,5.658,276,4.233,297,2.718,300,4.434,305,3.29,320,2.934,326,6.905,327,3.274,328,2.017,329,2.236,330,2.236,331,2.067,332,2.858,333,2.236,334,4.307,335,4.307,336,6.086,337,6.086,338,6.22,339,6.086,340,6.22,341,6.086,342,6.086,343,6.086,344,6.086,345,6.086,346,3.014,347,2.236,348,2.017,349,4.851,350,6.538,351,6.538,352,6.007,353,4.434,354,4.05,355,3.291,356,5.805,357,4.05,358,5.323,359,5.323,360,6.538,361,3.283,362,6.988,363,4.229,364,5.805,365,4.851,366,4.962,367,4.851,368,4.851,369,4.851,370,4.851,371,4.851,372,4.851,373,4.851,374,4.851,375,4.851,376,4.851,377,4.851,378,4.851,379,6.145,380,2.314,381,2.594,382,3.949,383,6.538,384,6.538,385,2.365,386,2.436,387,3.29,388,3.138,389,2.236,390,3.29,391,4.307]],["title/controllers/AppController.html",[103,1.548,392,3.613]],["body/controllers/AppController.html",[0,0.356,3,0.158,4,0.07,5,0.087,7,0.319,12,0.678,30,1.713,31,1.278,36,0.26,40,1.954,43,0.008,46,2.703,47,2.129,51,0.565,64,0.932,74,0.31,76,0.88,83,0.661,84,0.335,85,0.076,88,0.004,89,0.004,103,2.45,105,1.31,108,0.7,109,1.899,116,1.254,117,1.162,123,1.749,126,1.328,128,2.406,130,3.844,131,4.395,137,3.153,138,1.785,139,2.289,144,1.282,150,0.437,151,3.153,155,1.498,156,1.45,158,1.314,159,3.074,164,0.95,167,3.633,204,1.077,205,2.758,209,3.134,211,5.174,212,0.785,217,3.292,228,0.978,241,2.844,264,2.228,278,1.697,282,3.848,286,2.022,297,2.283,299,4.623,300,3.725,302,3.455,320,1.697,331,2.756,354,3.402,355,2.283,361,1.899,392,6.157,393,3.358,394,7.54,395,2.937,396,1.823,397,2.981,398,4.876,399,4.908,400,4.908,401,5.386,402,7.096,403,7.537,404,3.781,405,3.781,406,5.913,407,5.492,408,6.301,409,7.537,410,4.59,411,5.492,412,3.781,413,7.522,414,5.621,415,3.078,416,5.492,417,5.492,418,7.537,419,3.781,420,3.078,421,3.781,422,2.091,423,4.876,424,3.781,425,2.565,426,3.781,427,3.358,428,1.958,429,1.792,430,3.781,431,1.743,432,3.781,433,3.078,434,3.078,435,3.781,436,3.848,437,4.471,438,4.168,439,3.781,440,3.078,441,3.781,442,3.781,443,3.781,444,2.87,445,3.781,446,2.87,447,3.781,448,5.492,449,3.781,450,3.781,451,3.078,452,3.781,453,3.781,454,3.781,455,3.781,456,3.781,457,3.781,458,3.781,459,3.781,460,5.492,461,4.876,462,3.781,463,5.492,464,3.781,465,8.472,466,3.781,467,8.311,468,8.311,469,8.311,470,7.096,471,3.781,472,6.467,473,6.467,474,6.467,475,6.467,476,6.467,477,6.467,478,6.467,479,4.386,480,8.112,481,5.492,482,1.792,483,3.781,484,3.781,485,5.492,486,3.781,487,5.492,488,3.781,489,2.446,490,7.096,491,7.096,492,3.781,493,5.492,494,3.781,495,5.492,496,3.781]],["title/modules/AppModule.html",[84,0.422,479,3.229]],["body/modules/AppModule.html",[0,0.438,3,0.115,4,0.105,5,0.108,7,0.328,19,2.143,43,0.008,55,1.944,74,0.375,83,1.002,84,0.79,85,0.115,88,0.006,89,0.006,105,2.527,108,1.062,123,2.323,128,2.474,130,3.802,212,1.191,297,3.512,300,4.948,326,6.373,327,3.18,328,2.384,329,2.643,330,2.643,331,2.444,332,3.19,333,2.643,346,3.363,347,2.643,348,2.384,356,6.478,358,5.94,363,4.719,390,3.889,392,6.09,394,5.94,399,4.352,400,5.537,420,5.94,422,3.171,431,3.363,479,6.401,497,5.092,498,5.092,499,5.766,500,5.092,501,5.94,502,6.478,503,2.527,504,4.719,505,4.948,506,5.94,507,4.668,508,3.067,509,7.296,510,5.537,511,7.296,512,5.734,513,5.734,514,5.734,515,4.668,516,4.948,517,5.092,518,5.94,519,5.734,520,4.719,521,5.092,522,5.94,523,5.734,524,5.734,525,5.734,526,6.09,527,4.668,528,5.734,529,5.734,530,5.734,531,5.734,532,5.734,533,5.734,534,5.734,535,5.734]],["title/classes/BadRequestExceptionFilter.html",[0,0.239,536,3.875]],["body/classes/BadRequestExceptionFilter.html",[0,0.359,2,0.704,3,0.091,4,0.083,5,0.061,7,0.346,12,0.56,14,1.664,20,3.846,23,1.842,24,0.721,29,2.419,32,1.606,36,0.312,38,0.882,42,0.482,43,0.008,51,0.792,74,0.343,85,0.091,88,0.005,89,0.005,108,0.84,117,1.323,136,1.458,137,3.484,144,1.539,149,1.402,150,0.825,155,2.476,156,1.481,158,1.323,187,1.887,189,1.757,204,1.51,209,2.311,212,1.876,232,2.536,275,4.627,276,3.342,277,4.804,278,2.804,280,4.252,281,5.504,282,3.718,283,7.513,284,3.695,286,4.318,287,3.589,288,5.818,290,4.238,291,4.581,292,5.476,294,4.238,295,2.476,296,5.222,297,2.598,298,4.742,299,4.467,300,4.238,301,3.124,302,3.201,303,3.236,304,2.51,305,3.078,306,2.51,307,3.695,311,3.078,312,3.078,313,3.078,314,3.245,315,3.695,316,3.445,318,4.238,321,4.467,355,1.887,361,2.279,437,7.354,536,6.268,537,7.169,538,4.03,539,3.581,540,6.249,541,6.249,542,4.539,543,4.539,544,6.249,545,8.55,546,4.539,547,3.581,548,4.782,549,7.699,550,2.88,551,3.456,552,4.539,553,4.03,554,2.037,555,2.037,556,6.345,557,4.03,558,4.539,559,4.539,560,4.539,561,4.539,562,4.03,563,4.539,564,4.539,565,4.539,566,6.249,567,4.539,568,4.539,569,4.539,570,3.695,571,4.03,572,4.03,573,4.539,574,2.213,575,4.539,576,4.539,577,4.539,578,4.238,579,8.71,580,5.087,581,6.268,582,4.03,583,6.268,584,4.539,585,5.548,586,6.249,587,5.087,588,4.03,589,2.35,590,4.03,591,4.03,592,4.03,593,4.03,594,4.03,595,4.03,596,4.539,597,4.03,598,4.03,599,4.539,600,4.539,601,4.539,602,4.539]],["title/controllers/BankController.html",[103,1.548,603,3.613]],["body/controllers/BankController.html",[0,0.201,3,0.08,4,0.074,5,0.09,7,0.419,8,1,10,1.31,12,1.041,30,1.786,31,1.794,36,0.276,38,0.951,40,1.497,42,0.571,43,0.008,44,0.937,51,0.793,73,2.413,74,0.332,76,0.932,83,0.7,84,0.355,85,0.08,88,0.004,89,0.004,103,1.302,105,1.387,107,2.481,108,0.742,109,2.011,116,1.307,117,1.543,118,2.268,123,1.823,126,1.384,132,2.638,136,1.273,138,1.302,139,3.225,140,2.976,141,2.913,142,2.712,143,2.964,149,1.619,150,0.974,152,1.953,153,2.847,156,1.285,157,1.823,158,1.614,159,3.371,160,2.712,161,1.898,164,2.343,165,2.712,166,2.712,167,2.502,169,2.916,172,2.586,173,2.364,175,2.44,176,2.44,177,2.074,179,2.074,180,1.898,181,2.719,183,1.225,185,3.359,186,1.554,187,2.38,189,1.55,193,1.707,195,1.707,201,1.898,202,1.953,204,1.619,228,1.373,268,2.712,295,2.888,355,3.333,387,6.095,395,3.897,397,2.638,436,4.586,589,2.964,603,6.085,604,3.556,605,6.211,606,3.909,607,2.216,608,3.882,609,3.545,610,5.228,611,3.061,612,3.703,613,3.545,614,5.228,615,2.863,616,4.005,617,4.005,618,6.085,619,2.481,620,1.823,621,3.28,622,4.005,623,2.481,624,2.863,625,4.005,626,4.005,627,3.545,628,4.005,629,4.005,630,4.005,631,2.481,632,4.714,633,3.545,634,3.694,635,4.775,636,3.28,637,4.514,638,2.295,639,1.898,640,1.751,641,3.556,642,3.556,643,4.005,644,4.005,645,1.797,646,2.863,647,2.481,648,4.005,649,6.679,650,4.005,651,4.514,652,4.005,653,4.005,654,4.005,655,2.591,656,4.005,657,4.005,658,4.005,659,4.005,660,4.005,661,2.481,662,4.005,663,4.005]],["title/classes/BankDto.html",[0,0.239,614,3.229]],["body/classes/BankDto.html",[0,0.444,2,0.629,3,0.081,4,0.075,5,0.09,7,0.408,8,1.008,9,1.956,10,1.249,11,2.399,12,0.904,13,1.876,14,1.343,15,2.903,16,2.593,18,1.999,19,1.695,20,3.71,21,4.358,22,2.989,23,2.342,24,0.846,25,3.433,26,2.183,27,3.433,28,2.59,29,2.234,30,1.8,31,2.034,32,2.379,33,2.939,34,3.192,35,3.086,36,0.279,38,1.175,40,1.856,41,3.376,42,0.568,43,0.008,44,0.971,45,3.597,47,2.419,49,4.607,50,4.38,51,0.87,53,3.046,54,3.433,55,2.484,57,2.46,58,2.46,60,2.989,61,3.574,62,3.433,63,3.192,64,1.806,65,2.748,66,1.891,67,3.046,69,3.307,74,0.265,75,3.53,76,0.943,77,3.595,78,3.999,79,3.595,80,2.898,81,3.474,82,2.728,83,0.708,84,0.359,85,0.081,86,3.597,87,3.307,88,0.004,89,0.004,95,5.472,96,5.472,97,5.472,98,5.472,150,1.021,157,2.563,164,2.244,380,2.593,385,3.572,386,4.326,605,6.191,614,5.459,618,5.101,664,3.597,665,4.163,666,2.939,667,3.717,668,5.472,669,4.051,670,5.771,671,6.722,672,4.304,673,4.051,674,6.108,675,4.051,676,6.722,677,6.722,678,6.722,679,6.722,680,6.722,681,4.051,682,6.722,683,6.722,684,6.722,685,6.722,686,6.722,687,4.051,688,5.251,689,4.051,690,4.051,691,5.963,692,6.875,693,3.574,694,4.051,695,4.051,696,4.051,697,7.325,698,3.597]],["title/modules/BankModule.html",[84,0.422,336,3.403]],["body/modules/BankModule.html",[0,0.322,3,0.129,4,0.118,5,0.113,7,0.351,8,1.365,10,1.213,43,0.008,74,0.346,83,1.119,84,0.778,85,0.129,88,0.006,89,0.006,105,3.042,108,1.186,116,1.785,118,3.097,119,2.295,123,2.489,126,1.89,136,1.474,327,2.537,328,2.662,329,2.951,330,2.951,331,2.729,332,3.688,333,3.888,336,6.817,346,3.602,347,2.951,348,2.662,396,2.594,603,6.836,605,5.682,610,6.536,641,5.685,699,5.685,700,5.685,701,5.685,702,6.403,703,4.841,704,4.841,705,4.179,706,4.478,707,6.403]],["title/injectables/BankService.html",[112,1.398,610,3.229]],["body/injectables/BankService.html",[0,0.379,3,0.068,4,0.093,5,0.081,7,0.352,8,0.883,10,1.214,12,0.993,13,1.968,15,2.399,16,2.143,18,1.75,19,1.484,23,2.051,24,0.583,36,0.233,38,0.931,42,0.49,43,0.008,44,0.904,51,0.805,73,2.09,74,0.335,83,0.59,84,0.595,85,0.068,88,0.005,89,0.004,108,0.625,112,1.484,114,1.477,116,1.154,117,1.422,118,2.002,119,1.974,120,2.154,121,2.268,123,1.609,125,2.896,126,1.222,127,3.269,128,1.713,129,2.702,130,3.577,131,3.13,132,2.329,133,1.956,134,3.13,135,2.239,136,1.486,137,3.816,138,2.544,139,3.137,140,2.328,141,2.278,142,2.395,143,2.617,144,1.713,146,3.91,147,3.93,149,1.614,150,0.95,151,2.952,152,2.464,153,2.864,155,2.002,156,1.675,157,1.609,158,1.551,159,3.278,160,2.869,161,2.395,164,2.303,165,2.395,166,2.869,167,3.145,168,3.13,169,2.722,171,3.998,172,2.601,173,2.672,174,3.717,175,2.154,176,2.581,177,2.617,179,2.617,180,2.395,181,2.614,183,1.545,185,3.607,186,1.644,187,3.139,188,4.461,189,1.308,190,2.564,192,2.415,193,1.44,195,1.44,197,1.807,198,2.291,199,1.601,201,1.601,202,1.647,203,2.092,204,1.481,205,3.375,206,3.428,207,3.75,208,4.162,209,2.239,210,3.75,211,2.795,212,1.789,213,1.956,214,3.923,215,2.185,216,4.053,217,3.176,219,1.936,220,1.44,221,3.13,222,2.092,223,2.092,224,3.75,225,3.75,226,3.75,227,3.349,228,1.394,229,2.092,231,2.185,232,1.371,233,2.092,234,2.01,235,4.114,236,2.092,238,2.185,239,1.936,241,1.749,242,2.092,243,2.291,244,2.291,245,3.007,246,1.516,247,2.092,248,1.44,249,1.749,250,3.13,253,2.185,254,2.896,255,2.01,256,3.007,257,2.415,258,1.868,259,1.749,260,1.936,261,2.896,262,2.092,263,2.75,264,1.371,266,2.092,267,2.01,268,2.869,269,2.092,270,2.291,387,5.58,396,1.678,422,1.868,605,6.188,606,3.276,610,5.121,614,4.88,639,1.601,640,1.477,642,3,708,3,709,2.291,710,2.185,711,5.054,712,3.378,713,3.378,714,3.269,715,3.378,716,3.378,717,3.378,718,2.464,719,1.697,720,3,721,3.378,722,5.054,723,2.185,724,3.378,725,3,726,2.75,727,2.564,728,3,729,2.415]],["title/classes/Banks.html",[0,0.239,387,3.229]],["body/classes/Banks.html",[0,0.428,2,0.695,3,0.09,4,0.082,5,0.095,7,0.278,8,1.081,9,2.099,10,0.961,12,0.764,14,1.441,19,1.818,24,0.959,30,2.388,31,2.098,36,0.308,38,0.944,40,1.909,42,0.577,43,0.008,44,0.98,47,2.459,51,0.876,53,3.609,57,2.638,58,2.638,64,1.887,66,1.835,69,3.547,74,0.176,76,1.042,83,0.782,84,0.397,85,0.09,88,0.005,89,0.005,92,4.555,94,6.3,95,5.776,96,5.776,97,5.776,98,5.776,100,5.496,102,4.642,150,1.04,164,2.088,186,2.078,246,2.778,361,3.109,380,2.709,385,3.732,386,4.426,387,5.636,428,3.964,429,3.627,605,6.201,618,5.385,665,4.394,666,3.102,667,3.924,668,5.776,674,6.306,688,5.449,691,6.231,692,7.134,730,3.975,731,3.435,732,2.638,733,3.683,734,2.933,735,6.19,736,5.496,737,4.198,738,4.198,739,4.477,740,5.385,741,5.385,742,5.385,743,5.385,744,5.385,745,4.477,746,5.776,747,5.776,748,5.776,749,5.776,750,5.776,751,4.477,752,5.072,753,5.072,754,5.072,755,5.072,756,5.072,757,4.477,758,4.477,759,4.477,760,4.477]],["title/classes/Cities.html",[0,0.239,761,3.403]],["body/classes/Cities.html",[0,0.442,2,0.788,3,0.102,4,0.093,5,0.102,7,0.303,8,1.178,9,2.286,10,1.046,12,0.832,14,1.57,19,1.981,24,0.996,30,2.516,31,2.106,36,0.35,40,1.881,42,0.572,43,0.008,44,0.972,47,2.449,51,0.863,53,3.587,57,2.874,58,2.874,64,1.988,66,1.917,69,3.864,74,0.2,76,1.183,83,0.887,84,0.45,85,0.102,88,0.005,89,0.005,92,4.488,102,4.613,150,1.016,164,2.168,246,3.026,380,2.387,385,4.608,386,4.049,428,3.492,429,3.195,665,4.688,666,3.309,667,4.186,731,3.618,732,2.874,733,4.012,734,3.195,737,4.574,738,4.574,740,5.118,741,5.118,742,5.118,743,5.118,744,5.118,746,6.162,747,6.162,748,6.162,749,6.162,750,6.162,752,5.411,753,5.411,754,5.411,755,5.411,756,5.411,761,6.167,762,4.511,763,6.743,764,4.821,765,5.08,766,7.57,767,5.08,768,5.469,769,5.08,770,7.451,771,5.08,772,5.08]],["title/controllers/CityController.html",[103,1.548,773,3.613]],["body/controllers/CityController.html",[0,0.216,3,0.086,4,0.079,5,0.058,7,0.42,10,1.168,12,1.061,31,1.844,36,0.296,38,0.977,40,0.965,42,0.577,43,0.008,44,0.947,51,0.814,73,2.38,74,0.339,76,1.002,85,0.086,88,0.005,89,0.005,103,1.4,105,1.491,107,2.667,108,0.797,109,2.162,117,1.275,136,1.315,138,1.4,139,3.26,140,2.919,141,2.857,142,2.854,143,3.12,149,1.653,150,0.993,152,2.099,153,2.962,156,1.337,157,1.918,158,1.639,159,3.407,160,2.854,161,2.04,164,2.362,165,2.854,166,2.854,167,2.634,169,2.997,172,2.69,173,2.459,175,2.568,176,2.568,177,2.23,179,2.23,180,2.04,181,2.761,183,1.316,185,3.469,186,1.635,187,2.505,189,1.667,193,1.835,195,1.835,201,2.04,202,2.099,204,1.653,228,1.411,268,2.854,385,4.667,436,4.713,589,3.12,606,3.669,615,3.078,619,2.667,620,1.918,621,3.452,623,2.667,624,3.078,627,3.731,631,2.667,632,4.868,633,3.731,634,3.843,635,4.906,636,3.452,637,4.662,638,2.467,639,2.04,640,1.882,645,1.932,646,3.078,647,2.667,651,4.662,655,2.785,661,2.667,665,5.084,761,6.503,773,4.572,774,3.823,775,5.105,776,4.305,777,4.305,778,4.305,779,4.305,780,4.305,781,4.305,782,4.305,783,4.305,784,4.713,785,3.823,786,3.823,787,4.305,788,4.305,789,4.305,790,4.305,791,6.949,792,4.305,793,4.305,794,4.305,795,4.305,796,4.305,797,4.305,798,4.305,799,4.305,800,4.305,801,4.305,802,4.305]],["title/classes/CityDto.html",[0,0.239,775,3.229]],["body/classes/CityDto.html",[0,0.456,2,0.722,3,0.093,4,0.086,5,0.097,7,0.404,8,1.11,9,2.154,10,1.305,11,2.641,12,0.96,13,2.065,14,1.479,15,3.082,18,2.2,19,1.866,20,3.875,21,4.628,22,3.29,23,2.578,24,0.898,25,3.78,26,2.404,27,3.78,28,2.851,29,2.459,30,1.982,31,2.039,32,2.561,33,3.164,34,3.514,35,3.397,36,0.32,38,1.037,40,1.928,41,3.634,42,0.563,43,0.008,44,0.961,47,2.395,49,4.306,51,0.864,53,3.234,54,3.78,55,2.637,57,2.708,58,2.708,60,3.29,61,3.935,62,3.78,63,3.514,64,1.917,65,3.154,66,1.965,67,2.641,69,3.64,74,0.285,75,3.471,76,1.082,77,3.87,78,4.628,79,4.159,80,3.191,81,2.851,82,3.156,83,0.812,84,0.412,85,0.093,87,3.64,88,0.005,89,0.005,150,0.993,156,1.222,164,2.201,380,2.753,385,4.621,386,3.906,665,4.482,666,3.164,667,4.002,740,5.492,741,5.492,742,5.492,743,5.492,744,5.492,752,5.174,753,5.174,754,5.174,755,5.174,756,5.174,768,5.275,770,7.23,775,5.702,803,4.129,804,4.65,805,4.542,806,4.65,807,4.65,808,4.65,809,5.172,810,4.65,811,4.65,812,4.65,813,4.65]],["title/modules/CityModule.html",[84,0.422,337,3.403]],["body/modules/CityModule.html",[0,0.322,3,0.129,4,0.118,5,0.114,7,0.352,8,1.367,43,0.008,74,0.346,83,1.122,84,0.779,85,0.129,88,0.006,89,0.006,105,3.045,108,1.189,116,1.788,118,3.102,119,2.299,123,2.493,126,1.893,136,1.475,327,2.544,328,2.669,329,2.959,330,2.959,331,2.736,332,3.692,333,3.893,337,6.82,346,3.608,347,2.959,348,2.669,385,4.286,396,2.598,703,4.848,704,4.848,705,4.186,706,4.485,773,6.841,784,6.538,785,5.7,814,5.7,815,5.7,816,5.7,817,6.42,818,6.42]],["title/injectables/CityService.html",[112,1.398,784,3.229]],["body/injectables/CityService.html",[0,0.282,3,0.06,4,0.055,5,0.04,7,0.324,10,1.117,12,0.955,18,1.034,24,0.531,36,0.206,38,0.888,40,1.613,42,0.497,43,0.008,44,0.922,47,0.765,51,0.796,53,1.242,64,0.736,73,1.886,74,0.33,84,0.497,85,0.06,88,0.004,89,0.004,108,0.553,112,1.352,114,1.306,117,0.974,128,1.56,130,2.989,133,1.781,135,2.774,136,1.514,137,3.776,138,2.438,139,3.093,140,2.185,141,2.139,142,2.181,143,2.383,144,1.56,146,3.728,147,3.767,149,1.519,150,0.991,151,2.737,152,2.244,153,2.689,155,1.823,156,1.667,157,1.465,158,1.502,159,3.232,160,2.181,161,2.181,164,2.275,165,2.181,166,2.66,167,2.979,168,2.85,169,2.578,171,3.753,172,2.442,173,2.233,174,3.489,175,1.961,176,1.961,177,2.383,179,2.383,180,2.181,181,2.479,183,1.407,185,3.318,186,1.524,187,2.993,188,4.34,189,1.156,193,1.273,195,1.273,197,1.597,198,2.025,199,1.415,201,1.415,202,1.456,203,1.85,204,1.412,205,3.168,206,2.025,207,2.85,208,2.85,209,2.077,210,3.477,211,1.652,212,1.841,213,1.781,214,3.874,215,1.932,216,4.01,217,3.044,218,2.266,219,1.711,221,2.85,222,1.85,223,1.85,224,3.477,225,3.477,226,3.477,227,3.105,228,1.336,229,1.85,231,1.932,232,1.212,233,1.85,234,1.777,236,1.85,238,1.932,239,1.711,242,1.85,243,2.025,244,2.025,245,2.738,248,2.689,249,3.267,250,2.85,253,1.932,254,2.637,255,1.777,256,2.738,260,1.711,261,2.637,262,1.85,263,2.431,264,1.867,266,1.85,267,1.777,268,2.66,269,1.85,270,2.025,298,3.492,379,3.121,385,4.543,413,4.086,422,1.652,606,2.244,620,0.951,639,1.415,640,1.306,665,2.85,666,1.306,667,1.652,710,1.932,714,2.977,718,2.244,723,1.932,725,4.086,726,3.746,727,3.492,729,2.135,761,4.871,775,4.621,784,3.121,786,2.651,819,2.651,820,4.788,821,3.907,822,4.602,823,2.986,824,2.986,825,2.986,826,2.986,827,2.986,828,2.986,829,2.135,830,2.135,831,2.986,832,4.602,833,2.431,834,3.492,835,2.986,836,3.121,837,2.986,838,4.57,839,5.877,840,4.602,841,5.536,842,3.301,843,4.125,844,2.623,845,3.492,846,3.492,847,4.602,848,4.014,849,4.602,850,3.492,851,4.602,852,4.602,853,6.05,854,4.602,855,2.266,856,1.652,857,2.986,858,1.456,859,1.415,860,2.065,861,2.986,862,2.986,863,1.34,864,1.597,865,1.546,866,5.614,867,2.986,868,4.086,869,2.986,870,2.651,871,3.492,872,4.797,873,2.651,874,3.746,875,3.746,876,2.135,877,2.986,878,2.986,879,2.986,880,2.986,881,2.986,882,1.034,883,2.266,884,2.986,885,2.986,886,1.376,887,2.651,888,2.986,889,2.986,890,1.777,891,4.086,892,2.986,893,2.986,894,2.986,895,2.431]],["title/injectables/CommaSeparated.html",[112,1.398,896,3.613]],["body/injectables/CommaSeparated.html",[0,0.417,3,0.099,4,0.091,5,0.066,7,0.335,20,4.025,32,2.818,35,2.633,36,0.339,38,0.815,42,0.413,43,0.008,44,0.949,51,0.679,53,2.047,55,2.7,67,2.746,74,0.26,85,0.16,88,0.005,89,0.005,108,0.912,112,2.189,114,2.152,117,1.398,129,2.633,139,2.337,149,1.295,150,0.919,158,1.643,172,3.082,204,1.629,209,2.945,212,1.654,217,3.231,228,1.418,232,3.024,280,4.738,438,5.012,539,4.27,672,4.67,858,2.4,896,6.043,897,4.008,898,6.066,899,5.799,900,7.07,901,7.07,902,3.773,903,5.863,904,4.404,905,5.863,906,8.136,907,4.923,908,7.881,909,5.937,910,5.863,911,4.923,912,4.615,913,6.066,914,2.839,915,5.863,916,6.066,917,5.372,918,6.066,919,6.616,920,7.374,921,3.929,922,4.09,923,3.652,924,4.09,925,3.129,926,5.376,927,5.376,928,5.376,929,5.863,930,4.371,931,4.371,932,4.371,933,4.371,934,4.371,935,4.427,936,5.923,937,3.044,938,4.82,939,3.52,940,3.52,941,4.371,942,3.049,943,4.371,944,2.472,945,4.371,946,4.371,947,4.371,948,2.821,949,5.863,950,4.371,951,4.371,952,4.371,953,4.371,954,4.371,955,4.371,956,4.371,957,4.371,958,4.371]],["title/classes/CommonQuery1.html",[0,0.239,959,3.403]],["body/classes/CommonQuery1.html",[0,0.345,2,0.303,3,0.039,4,0.036,5,0.026,7,0.297,12,1.096,13,1.785,14,0.762,15,1.672,16,2.102,18,2.682,24,0.378,28,2.214,29,1.633,36,0.502,38,0.609,40,0.945,42,0.556,43,0.008,44,0.906,51,0.73,53,1.754,63,2.333,64,1.464,66,1.796,67,2.051,73,1.964,74,0.077,85,0.066,88,0.003,89,0.003,116,1.127,117,1.257,121,2.665,128,1.109,133,1.91,135,3.046,136,1.546,137,3.933,140,1.709,141,2.014,144,1.673,149,0.968,150,0.967,155,1.672,156,0.949,158,1.494,164,2.105,172,1.267,183,1,186,1.339,204,1.463,212,1.932,213,1.267,220,3.025,228,1.607,247,1.211,248,3.646,249,4.01,258,3.285,278,2.214,303,2.185,304,1.081,357,3.056,482,1.55,503,2.682,550,3.271,551,2.333,554,0.877,555,0.877,607,2.441,620,1.042,709,2.822,820,5.216,821,1.211,836,4.028,839,6.251,841,4.508,842,3.891,843,3.403,844,3.164,845,3.744,846,4.507,850,3.744,859,1.55,860,2.464,863,3.415,864,1.045,865,1.012,872,4.713,886,3.36,902,1.55,914,2.724,935,2.555,937,1.945,942,3.906,944,2.119,948,1.12,959,2.339,960,1.484,961,4.016,962,2.935,963,4.016,964,5.595,965,3.176,966,4.016,967,3.989,968,5.595,969,2.905,970,2.638,971,4.016,972,1.809,973,3.435,974,3.272,975,3.435,976,3.435,977,2.983,978,3.016,979,1.955,980,4.016,981,5.777,982,4.016,983,1.955,984,3.435,985,2.405,986,3.933,987,1.955,988,1.955,989,1.736,990,1.955,991,3.435,992,6.077,993,3.435,994,3.016,995,2.219,996,2.483,997,3.435,998,2.663,999,3.202,1000,2.256,1001,1.955,1002,3.435,1003,3.435,1004,1.955,1005,1.955,1006,2.663,1007,2.935,1008,3.534,1009,5.935,1010,4.835,1011,2.663,1012,4.47,1013,4.813,1014,2.663,1015,4.016,1016,4.507,1017,1.591,1018,0.982,1019,2.663,1020,1.591,1021,1.238,1022,1.081,1023,1.264,1024,0.982,1025,1.211,1026,1.893,1027,1.591,1028,1.591,1029,1.591,1030,1.591,1031,1.264,1032,1.947,1033,1.591,1034,1.591,1035,0.677,1036,1.326,1037,0.982,1038,2.663,1039,5.777,1040,5.595,1041,5.777,1042,4.016,1043,4.016,1044,3.744,1045,5.777,1046,5.777,1047,4.016,1048,4.835,1049,4.835,1050,4.47,1051,4.47,1052,1.591,1053,1.591,1054,1.591,1055,3.435,1056,1.75,1057,2.638,1058,1.75,1059,1.75,1060,1.75,1061,1.296,1062,2.663,1063,2.663,1064,1.591,1065,2.663,1066,2.663,1067,2.663,1068,1.591,1069,2.663,1070,2.663,1071,5.384,1072,5.384,1073,3.435,1074,4.016,1075,4.016,1076,4.016,1077,4.016,1078,4.016,1079,2.663,1080,4.016,1081,4.016,1082,4.016,1083,2.663,1084,1.591,1085,3.016,1086,3.191,1087,3.435,1088,1.591,1089,1.484,1090,1.947,1091,1.947,1092,3.744,1093,4.835,1094,4.835,1095,1.591,1096,2.663,1097,2.663,1098,1.591,1099,2.663,1100,1.591,1101,3.435,1102,1.12,1103,1.326,1104,2.663,1105,2.663,1106,1.591,1107,1.591,1108,1.591,1109,2.663,1110,0.649]],["title/classes/CommonQuery5.html",[0,0.239,821,2.948]],["body/classes/CommonQuery5.html",[0,0.346,2,0.306,3,0.04,4,0.036,5,0.027,7,0.299,12,1.057,13,1.794,14,0.767,15,1.683,16,1.954,18,2.193,24,0.381,28,2.227,29,1.644,36,0.503,38,0.781,40,0.952,42,0.562,43,0.008,44,0.926,51,0.709,53,1.766,63,2.349,64,1.471,66,1.8,67,2.063,73,1.652,74,0.078,85,0.066,88,0.003,89,0.003,116,1.133,117,1.263,121,2.477,128,1.118,133,1.921,135,2.915,136,1.488,137,3.942,140,1.719,141,1.118,144,1.682,149,1.242,150,0.989,155,1.683,156,0.817,158,1.479,164,2.054,172,1.276,183,0.603,186,1.347,204,1.467,212,1.933,213,0.764,220,2.543,228,1.609,247,1.222,248,3.629,249,4.02,258,3.3,278,2.227,303,2.199,304,1.091,357,3.073,482,1.562,503,2.466,550,3.682,551,2.349,554,0.885,555,0.885,607,2.452,620,1.05,709,2.83,820,5.235,821,2.042,836,4.678,839,6.264,841,4.527,842,3.895,843,3.419,844,3.11,845,3.766,846,5.403,850,3.766,859,1.562,860,2.477,863,3.424,864,1.055,865,1.022,872,4.726,886,2.919,902,1.562,914,2.729,935,2.57,937,1.958,942,3.923,944,2.133,948,1.13,959,1.41,960,1.497,961,4.04,962,2.952,963,4.04,964,5.404,965,2.952,966,4.04,967,4.001,968,5.615,969,2.927,970,1.055,971,4.04,972,1.823,973,3.457,975,3.457,976,3.457,977,2.996,978,3.036,980,4.04,981,5.796,982,4.04,984,3.457,985,2.419,986,3.72,989,1.752,991,3.457,992,6.195,993,3.457,994,3.036,995,1.338,996,1.497,997,2.684,998,1.606,999,3.223,1000,2.271,1002,3.457,1003,3.457,1006,2.684,1007,2.952,1008,3.55,1009,5.953,1010,4.857,1011,2.684,1012,4.493,1013,4.829,1014,2.684,1015,4.04,1016,4.528,1017,1.606,1018,0.991,1019,2.684,1020,1.606,1021,1.247,1022,1.091,1023,1.276,1024,0.991,1025,1.222,1026,1.906,1027,1.606,1028,1.606,1029,1.606,1030,1.606,1031,1.276,1032,1.962,1033,1.606,1034,1.606,1035,0.683,1036,1.338,1037,0.991,1038,2.684,1039,5.796,1040,5.615,1041,5.796,1042,4.04,1043,4.04,1044,3.766,1045,5.796,1046,5.796,1047,4.04,1048,4.857,1049,4.857,1050,4.493,1051,4.493,1052,1.606,1053,1.606,1054,1.606,1055,3.457,1056,1.763,1057,2.654,1058,1.763,1059,1.763,1060,1.763,1061,1.306,1062,2.684,1063,2.684,1064,1.606,1065,2.684,1066,2.684,1067,2.684,1068,1.606,1069,2.684,1070,2.684,1071,5.404,1072,5.404,1073,3.457,1074,4.04,1075,4.04,1076,4.04,1077,4.04,1078,4.04,1079,2.684,1080,4.04,1081,4.04,1082,4.04,1083,2.684,1084,3.457,1085,3.036,1086,3.21,1087,3.457,1088,1.606,1089,1.497,1090,1.962,1091,1.962,1092,3.766,1093,4.857,1094,4.857,1095,3.457,1096,2.684,1097,2.684,1098,1.606,1099,2.684,1100,3.457,1101,4.493,1102,1.13,1103,1.338,1104,2.684,1105,2.684,1106,1.606,1107,1.606,1108,1.606,1109,2.684,1110,0.655,1111,3.297,1112,1.973,1113,1.973,1114,1.973,1115,1.973,1116,1.973,1117,3.036,1118,1.973,1119,1.973,1120,1.973,1121,1.973,1122,1.973]],["title/classes/ConfigService.html",[0,0.239,1123,2.633]],["body/classes/ConfigService.html",[0,0.373,2,0.567,3,0.073,4,0.067,5,0.049,32,1.294,36,0.252,38,0.782,42,0.437,43,0.008,44,0.948,51,0.799,55,1.816,64,1.563,74,0.348,81,3.336,82,3.153,85,0.108,88,0.004,89,0.004,117,1.134,128,1.239,144,2.15,149,1.244,150,0.806,158,1.174,212,1.45,228,1.6,264,1.483,282,4.998,291,2.175,320,2.404,510,4.066,516,2.479,520,2.365,526,2.774,620,2.02,672,3.392,856,2.963,895,2.976,917,3.466,921,2.175,922,2.264,923,2.022,924,2.264,925,1.732,1035,2.197,1123,3.508,1124,2.976,1125,5.358,1126,5.358,1127,5.358,1128,6.093,1129,5.631,1130,3.656,1131,4.757,1132,3.656,1133,4.757,1134,3.656,1135,4.757,1136,3.656,1137,3.656,1138,3.656,1139,3.656,1140,3.656,1141,2.264,1142,4.066,1143,2.774,1144,5.163,1145,2.365,1146,2.264,1147,3.634,1148,3.246,1149,3.83,1150,3.246,1151,3.83,1152,3.246,1153,3.83,1154,3.246,1155,3.83,1156,3.246,1157,3.83,1158,3.246,1159,3.246,1160,2.613,1161,3.246,1162,3.83,1163,3.246,1164,3.83,1165,3.246,1166,3.83,1167,3.246,1168,3.246,1169,2.264,1170,2.479,1171,4.066,1172,2.613,1173,2.774,1174,2.976,1175,4.362,1176,2.976,1177,2.976,1178,2.976,1179,4.757,1180,2.976,1181,2.976,1182,5.3,1183,5.3,1184,5.685,1185,2.976,1186,2.976,1187,2.976,1188,2.976,1189,3.246,1190,4.757,1191,3.634,1192,3.246,1193,4.757,1194,2.365,1195,3.246,1196,5.631,1197,2.365,1198,3.246,1199,3.246,1200,2.095,1201,3.246,1202,3.246,1203,3.246,1204,3.246,1205,2.976,1206,3.246,1207,3.246,1208,3.246,1209,2.365,1210,3.246,1211,3.246,1212,4.757,1213,3.246,1214,4.757,1215,3.246,1216,3.83,1217,3.246,1218,2.976,1219,3.246,1220,2.976,1221,3.246,1222,3.246,1223,3.246,1224,3.246,1225,2.976,1226,3.246,1227,2.976,1228,3.246,1229,3.246,1230,3.634,1231,3.246,1232,2.774,1233,2.976,1234,2.976,1235,2.774,1236,3.246,1237,2.774,1238,3.246,1239,3.246,1240,2.613,1241,3.246,1242,3.246,1243,3.246,1244,2.976,1245,3.246,1246,2.976,1247,3.246,1248,2.976,1249,3.246,1250,2.976,1251,3.246,1252,2.976,1253,3.246,1254,2.976,1255,3.246,1256,2.976,1257,3.246,1258,2.976,1259,3.246,1260,2.976,1261,3.246,1262,3.246,1263,3.246,1264,3.246,1265,3.246,1266,3.246,1267,3.246,1268,3.246,1269,3.246,1270,2.774,1271,3.246,1272,2.976,1273,3.246,1274,2.976,1275,3.246,1276,2.976,1277,3.246,1278,2.976,1279,3.246,1280,2.976,1281,3.246,1282,3.246,1283,2.976,1284,3.246,1285,2.976,1286,3.246,1287,2.976,1288,3.246,1289,2.976,1290,3.246,1291,3.246,1292,2.976,1293,3.246,1294,2.976,1295,3.246,1296,2.976,1297,3.246,1298,2.976,1299,3.246,1300,2.976,1301,3.246,1302,2.976,1303,3.246,1304,3.246,1305,2.976,1306,3.246,1307,2.976,1308,3.246,1309,2.976,1310,3.246,1311,3.246,1312,2.976,1313,3.246,1314,2.976,1315,3.246,1316,2.976,1317,3.246,1318,2.976,1319,3.246,1320,2.976,1321,3.246,1322,2.613,1323,3.246,1324,2.264,1325,3.246,1326,2.264,1327,3.246,1328,2.774,1329,3.246,1330,2.774,1331,3.246,1332,2.774,1333,2.976,1334,2.976]],["title/controllers/CountriesController.html",[103,1.548,1335,3.613]],["body/controllers/CountriesController.html",[0,0.308,3,0.057,4,0.052,5,0.073,7,0.395,8,0.77,10,0.95,12,0.868,31,1.426,36,0.194,38,0.756,40,0.633,42,0.542,43,0.008,44,0.872,47,1.569,50,4.648,51,0.63,66,1.238,73,2.105,74,0.367,76,1.426,83,0.494,84,0.25,85,0.123,88,0.003,89,0.003,103,2.472,105,0.979,108,1.134,109,3.076,117,0.933,123,1.404,126,1.066,136,1.497,138,1.991,139,3.033,140,2.546,141,2.252,142,3.147,149,1.38,150,0.878,152,1.378,153,3.133,156,1.043,157,1.95,158,1.408,159,3.225,160,2.089,161,1.339,164,2.078,165,2.089,166,2.089,167,1.927,169,2.956,172,1.707,173,2.691,174,1.563,176,2.61,180,1.339,181,2.493,183,0.864,185,3.244,186,1.197,187,1.833,189,2.371,193,2.311,195,2.61,201,2.089,202,1.378,204,1.38,212,1.379,213,2.845,214,3.431,228,1.309,232,1.147,268,3.335,276,2.358,295,1.747,302,1.833,303,2.283,355,1.833,380,3.294,396,1.464,397,2.823,406,2.99,410,2.852,436,3.226,547,1.619,550,2.032,589,2.283,606,2.986,619,1.75,620,1.404,621,2.526,623,1.75,627,1.75,631,3.793,632,3.507,633,2.731,634,2.438,635,5.042,637,3.358,638,1.619,639,1.339,640,1.927,645,2.748,647,1.75,651,4.553,655,1.828,661,1.75,666,2.678,672,2.358,995,2.99,1335,5.93,1336,2.509,1337,5.266,1338,2.214,1339,2.826,1340,2.826,1341,2.826,1342,2.826,1343,2.826,1344,2.826,1345,2.826,1346,3.346,1347,7.037,1348,2.826,1349,2.826,1350,5.122,1351,5.438,1352,2.826,1353,3.152,1354,6.125,1355,2.826,1356,2.826,1357,2.826,1358,3.589,1359,2.509,1360,2.826,1361,1.75,1362,2.826,1363,2.509,1364,2.826,1365,2.826,1366,2.509,1367,2.509,1368,2.826,1369,2.826,1370,2.509,1371,2.509,1372,2.826,1373,5.421,1374,5.421,1375,5.421,1376,6.641,1377,5.421,1378,5.421,1379,4.505,1380,5.421,1381,3.876,1382,5.421,1383,4.409,1384,4.409,1385,3.892,1386,4.409,1387,4.419,1388,4.409,1389,2.032,1390,4.409,1391,4.409,1392,4.409,1393,4.409,1394,4.409,1395,4.409,1396,4.114,1397,4.409,1398,2.826,1399,3.346,1400,3.677,1401,2.826,1402,2.826,1403,3.152,1404,2.145,1405,2.623,1406,2.145,1407,4.409,1408,2.826]],["title/modules/CountriesModule.html",[84,0.422,338,3.403]],["body/modules/CountriesModule.html",[0,0.322,3,0.129,4,0.118,5,0.114,7,0.352,8,1.367,43,0.008,74,0.346,83,1.122,84,0.779,85,0.129,88,0.006,89,0.006,105,3.045,108,1.189,116,1.788,118,3.102,119,2.299,123,2.493,126,1.893,136,1.475,327,2.544,328,2.669,329,2.959,330,2.959,331,2.736,332,3.692,333,3.893,338,6.82,346,3.608,347,2.959,348,2.669,380,2.77,396,2.598,703,4.848,704,4.848,705,4.186,706,4.485,1335,6.841,1337,5.063,1350,5.971,1351,5.7,1409,5.7,1410,5.7,1411,5.7,1412,6.42,1413,6.42]],["title/injectables/CountriesService-1.html",[66,0.913,112,1.173,1350,2.475]],["body/injectables/CountriesService-1.html",[0,0.36,3,0.067,4,0.062,5,0.081,7,0.351,8,0.877,10,1.245,12,0.962,15,1.988,16,1.776,18,1.159,19,1.474,23,2.714,24,0.579,26,1.266,36,0.23,38,0.928,40,0.75,42,0.488,43,0.008,44,0.902,51,0.802,73,2.314,74,0.334,83,0.585,84,0.592,85,0.067,88,0.004,89,0.004,108,0.62,112,1.474,114,1.463,116,1.146,117,1.517,118,1.988,119,1.964,120,2.139,121,2.252,123,1.598,125,2.875,126,1.213,127,3.246,128,2.268,129,2.683,130,3.697,131,3.108,132,2.313,133,1.942,134,3.108,135,2.474,136,1.533,137,3.804,138,2.536,139,3.132,140,2.482,141,2.268,142,2.378,143,2.599,144,1.701,146,4.155,147,4.121,149,1.574,150,0.868,151,3.261,155,2.65,156,1.672,157,1.598,158,1.547,159,3.273,160,2.378,161,2.378,164,2.291,165,2.378,166,2.853,167,2.194,168,3.108,169,2.711,171,3.979,172,2.589,173,2.367,174,3.699,175,2.139,176,2.851,177,2.599,180,2.378,181,2.608,183,1.534,185,3.083,186,1.634,187,3.128,188,4.452,189,1.295,193,1.426,195,1.426,197,1.789,199,1.586,201,1.586,202,1.631,203,4.143,204,1.639,205,3.023,207,3.729,208,3.729,209,2.227,210,3.729,211,2.775,212,1.785,213,1.942,214,3.912,215,2.164,216,4.155,217,3.256,218,2.54,219,1.917,221,3.108,222,2.073,223,2.073,224,3.729,225,3.729,226,3.729,227,3.329,228,1.276,229,2.073,231,2.164,232,1.358,233,3.108,234,1.991,236,3.108,238,2.164,239,1.917,242,2.073,245,3.582,250,3.108,253,2.164,254,2.875,255,1.991,256,2.985,258,2.775,260,2.875,261,2.875,262,2.073,264,3.256,265,2.724,266,2.073,267,3.582,268,2.853,269,2.073,278,2.252,286,2.683,380,3.334,396,1.666,422,1.851,606,1.631,609,3.108,621,1.917,639,1.586,640,1.463,709,1.898,710,2.164,714,3.246,718,2.446,723,2.164,727,3.808,734,2.378,829,2.392,830,2.392,834,3.808,848,3.587,1091,2.985,1337,5.19,1350,4.97,1361,5.083,1414,2.971,1415,5.018,1416,4.085,1417,3.403,1418,3.808,1419,5.018,1420,3.346,1421,3.346,1422,3.346,1423,3.346,1424,3.346,1425,2.54,1426,2.392,1427,2.971,1428,2.54,1429,3.346,1430,2.971,1431,3.346,1432,2.971,1433,2.971]],["title/classes/Country.html",[0,0.239,380,1.685]],["body/classes/Country.html",[0,0.398,2,0.545,3,0.071,4,0.065,5,0.083,7,0.234,8,0.909,9,1.764,10,1.189,11,2.163,12,0.642,13,1.691,14,1.895,19,1.528,24,0.791,31,2.061,36,0.242,42,0.602,43,0.008,44,1.003,47,2.489,51,0.91,57,2.217,58,2.217,60,2.694,64,1.527,66,1.565,72,4.703,74,0.138,76,0.818,83,0.614,84,0.311,85,0.071,88,0.004,89,0.004,92,4.735,102,4.834,126,1.258,132,2.398,150,1.013,156,1.192,164,1.307,241,3.548,246,2.335,297,2.163,359,4.235,361,2.613,380,3.354,381,4.353,385,3.34,390,3.529,429,2.465,574,3.969,613,4.243,666,2.709,674,3.948,688,4.203,731,2.335,732,2.217,733,3.095,734,2.465,858,2.537,914,2.378,944,2.613,1021,1.968,1044,5.199,1338,2.613,1434,3.119,1435,4.619,1436,5.819,1437,4.619,1438,3.095,1439,2.335,1440,6.851,1441,4.235,1442,6.453,1443,6.453,1444,7.07,1445,4.619,1446,4.235,1447,6.196,1448,5.502,1449,4.203,1450,5.044,1451,7.038,1452,6.196,1453,6.016,1454,6.196,1455,6.196,1456,3.513,1457,5.203,1458,5.502,1459,3.513,1460,5.502,1461,3.513,1462,6.235,1463,5.044,1464,5.203,1465,3.513,1466,4.43,1467,3.513,1468,4.619,1469,4.619,1470,5.044,1471,5.044,1472,5.044,1473,5.044,1474,5.044,1475,3.513,1476,3.513,1477,6.083,1478,6.083,1479,5.502,1480,3.513,1481,2.981,1482,3.513,1483,6.196,1484,3.513,1485,6.851,1486,5.203,1487,3.513,1488,5.203,1489,3.513,1490,3.513,1491,5.203,1492,6.196,1493,3.513,1494,3.513]],["title/controllers/CountryController.html",[103,1.548,1495,3.613]],["body/controllers/CountryController.html",[0,0.212,3,0.085,4,0.078,5,0.092,7,0.415,8,1.038,10,1.266,12,1.006,30,1.853,31,1.737,36,0.29,38,0.92,40,1.54,42,0.558,43,0.008,44,0.906,51,0.767,73,2.44,74,0.337,76,0.983,83,0.737,84,0.374,85,0.085,88,0.005,89,0.005,103,1.931,105,1.462,108,0.781,109,2.12,116,1.357,117,1.579,118,2.354,123,1.892,126,1.437,132,2.738,136,1.303,138,1.372,139,3.184,140,3.012,141,2.841,142,2.815,149,1.6,150,0.942,152,2.058,153,2.93,156,1.323,157,1.892,158,1.584,159,3.327,160,3.535,161,2,164,2.26,165,2.815,166,2.815,167,2.597,169,2.975,172,2.661,173,2.433,175,2.532,176,2.532,180,2,181,2.75,183,1.29,185,3.76,186,1.613,187,2.47,189,1.634,193,1.799,195,1.799,201,2,202,2.058,204,1.6,212,1.633,214,3.638,228,1.329,268,3.726,295,2.956,327,2.354,355,3.391,380,3.348,395,3.99,397,2.738,436,4.439,589,3.077,606,3.352,607,2.3,608,4.029,609,3.68,611,3.177,612,3.843,613,3.68,619,2.614,620,2.189,621,2.419,623,2.614,627,2.614,631,2.614,632,4.447,633,3.68,634,3.286,635,4.621,636,3.404,637,4.258,638,2.419,639,2,640,1.845,645,1.894,647,2.614,651,4.621,655,2.73,661,2.614,666,3.262,848,3.017,1337,5.42,1350,4.87,1358,4.836,1359,3.748,1361,4.87,1363,3.748,1366,3.748,1367,3.748,1370,3.748,1371,3.748,1426,5.621,1427,3.748,1495,6.19,1496,3.748,1497,3.748,1498,4.221,1499,3.748,1500,4.221,1501,3.748,1502,4.221,1503,3.748,1504,4.221,1505,3.748,1506,4.221,1507,3.748,1508,5.941,1509,4.221,1510,3.748,1511,4.221,1512,4.221]],["title/classes/CountryDto.html",[0,0.239,1361,2.948]],["body/classes/CountryDto.html",[0,0.465,2,0.81,3,0.105,4,0.096,5,0.103,7,0.391,8,1.199,9,2.328,10,1.349,11,2.854,12,1.005,13,2.232,14,1.598,15,3.229,18,2.378,19,2.016,20,4.006,21,4.849,22,3.555,23,2.786,24,0.941,25,4.085,26,2.597,27,4.085,28,3.081,29,2.658,30,2.142,31,2.023,32,2.715,33,3.354,34,3.797,35,3.671,36,0.359,38,1.005,41,3.853,42,0.544,43,0.008,44,0.957,47,2.303,49,5.038,51,0.838,54,4.085,55,2.763,57,2.926,58,2.926,60,3.555,61,4.252,62,4.085,63,3.797,74,0.302,75,3.27,76,1.215,77,4.102,78,4.564,79,4.102,82,3.113,83,0.912,84,0.462,85,0.105,87,3.934,88,0.005,89,0.005,150,1.023,156,1.321,380,3.355,574,3.974,666,3.354,688,5.203,693,5.048,698,4.634,1361,5.384,1441,6.635,1449,5.203,1466,5.484,1513,4.634,1514,5.22,1515,5.22,1516,6.096,1517,6.096,1518,5.589,1519,5.22,1520,4.634,1521,5.589,1522,5.22,1523,5.22,1524,4.634]],["title/classes/CountryMas.html",[0,0.239,1426,3.403]],["body/classes/CountryMas.html",[0,0.45,2,0.847,3,0.11,4,0.1,5,0.105,7,0.318,8,1.235,9,2.396,10,1.097,12,0.872,14,1.645,19,2.075,24,1.016,30,2.586,31,2.113,36,0.375,40,1.924,42,0.574,43,0.008,44,0.969,47,2.44,51,0.852,57,3.012,58,3.012,64,2.043,66,1.79,74,0.215,76,1.27,83,0.953,84,0.483,85,0.11,88,0.005,89,0.005,92,4.433,102,4.592,150,1.034,246,3.171,380,3.391,428,3.66,429,3.348,574,4.042,666,3.427,688,5.316,731,3.72,732,3.012,733,4.204,734,3.348,737,4.793,738,4.793,764,5.052,1426,5.052,1441,6.749,1449,5.316,1466,5.603,1470,6.38,1471,6.38,1472,6.38,1473,6.38,1474,6.38,1525,4.844,1526,5.456,1527,5.456,1528,5.456,1529,5.456]],["title/modules/CountryMasModule.html",[84,0.422,339,3.403]],["body/modules/CountryMasModule.html",[0,0.322,3,0.129,4,0.118,5,0.114,7,0.352,8,1.367,43,0.008,74,0.346,83,1.122,84,0.779,85,0.129,88,0.006,89,0.006,105,3.045,108,1.189,116,1.788,118,3.102,119,2.299,123,2.493,126,1.893,136,1.475,327,2.544,328,2.669,329,2.959,330,2.959,331,2.736,332,3.692,333,3.893,339,6.82,346,3.608,347,2.959,348,2.669,380,2.77,396,2.598,703,4.848,704,4.848,705,4.186,706,4.485,1337,5.063,1350,5.971,1495,6.841,1505,5.7,1530,6.42,1531,6.42,1532,6.42,1533,6.42,1534,6.42]],["title/classes/CreateCountryDto.html",[0,0.239,1353,3.403]],["body/classes/CreateCountryDto.html",[0,0.441,2,0.606,3,0.078,4,0.072,5,0.089,7,0.253,8,0.982,9,1.905,10,1.234,11,2.336,12,0.693,13,1.827,14,1.308,15,2.854,18,1.946,19,1.651,20,3.664,21,4.285,22,2.91,23,2.28,24,0.831,25,3.344,26,2.126,27,3.344,28,2.522,29,2.175,30,1.753,31,2.083,32,2.33,33,2.879,34,3.108,35,3.005,36,0.269,38,0.693,42,0.598,43,0.008,44,1.001,47,2.471,49,2.323,51,0.902,54,2.323,55,1.905,57,3.07,58,3.07,66,1.645,74,0.284,75,3.74,76,0.909,77,3.005,78,4.285,79,4.693,82,3.561,83,0.682,84,0.346,85,0.078,87,2.237,88,0.004,89,0.004,150,0.946,156,1.469,380,3.312,381,3.005,385,2.74,574,4.087,666,2.879,674,4.265,688,5.391,805,4.018,858,2.74,1353,4.018,1361,4.461,1436,5.556,1442,6.213,1443,6.213,1444,4.575,1449,4.466,1450,5.36,1458,5.846,1460,5.846,1466,5.683,1468,6.395,1469,4.99,1470,5.36,1471,5.36,1472,5.36,1473,5.36,1474,5.36,1477,6.395,1478,6.395,1479,5.846,1481,3.22,1535,3.466,1536,4.997,1537,5.846,1538,5.846,1539,5.846,1540,7.949,1541,3.904,1542,3.904,1543,3.904,1544,3.904,1545,3.904,1546,6.584,1547,6.584,1548,6.584,1549,6.584,1550,6.584,1551,3.904,1552,3.904,1553,3.904,1554,3.904,1555,3.904,1556,3.904,1557,3.904,1558,5.62,1559,3.904,1560,2.237,1561,3.178,1562,3.904,1563,3.466,1564,4.99,1565,3.904,1566,3.466]],["title/classes/CreateDto.html",[0,0.239,153,2.029]],["body/classes/CreateDto.html",[0,0.447,2,0.654,3,0.085,4,0.078,5,0.092,7,0.415,8,1.037,9,2.012,10,1.265,11,2.467,12,0.732,13,1.929,14,1.898,15,2.954,18,2.055,19,1.743,20,3.758,21,4.436,22,3.073,23,2.408,24,0.861,25,3.53,26,2.245,27,3.53,28,2.663,29,2.297,30,1.851,31,2.024,32,2.431,33,3.003,34,3.282,35,3.173,36,0.29,42,0.581,43,0.008,44,0.964,47,2.448,49,5.301,51,0.861,64,2.217,74,0.294,75,3.645,76,0.981,78,5.088,79,4.359,80,3.449,82,3.308,83,0.736,84,0.373,85,0.085,88,0.005,89,0.005,138,2.826,150,1.028,153,3.474,156,1.142,232,2.787,354,4.618,381,5.126,574,4.084,858,3.349,1146,2.61,1172,4.242,1389,3.436,1453,6.761,1462,6.636,1463,5.591,1481,4.272,1516,5.268,1517,7.238,1518,6.636,1520,5.268,1521,6.069,1524,5.268,1560,2.414,1561,3.43,1563,3.741,1564,3.741,1566,3.741,1567,3.741,1568,5.591,1569,5.591,1570,6.818,1571,5.591,1572,4.214,1573,6.098,1574,4.214,1575,5.934,1576,6.62,1577,6.62,1578,4.214,1579,4.214,1580,6.62,1581,6.098,1582,4.214,1583,4.214,1584,5.268,1585,4.214,1586,4.822,1587,4.214,1588,4.214,1589,6.62,1590,4.214,1591,4.214,1592,4.214,1593,4.214]],["title/controllers/CurrenciesController.html",[103,1.548,1594,3.613]],["body/controllers/CurrenciesController.html",[0,0.212,3,0.085,4,0.078,5,0.093,7,0.415,8,1.039,10,1.266,12,1.007,30,1.856,31,1.738,36,0.291,38,0.921,40,1.542,42,0.558,43,0.008,44,0.907,51,0.768,73,2.441,74,0.337,76,0.984,83,0.739,84,0.375,85,0.085,88,0.005,89,0.005,103,1.934,105,1.464,108,0.783,109,2.123,116,1.358,117,1.58,118,2.357,123,1.894,126,1.438,132,2.742,136,1.304,138,1.375,139,3.185,140,3.013,141,2.842,142,2.818,149,1.601,150,0.942,152,2.061,153,3.648,156,1.324,157,1.894,158,1.585,159,3.328,160,3.538,161,2.003,164,2.279,165,2.818,166,2.818,167,2.6,169,2.977,172,2.664,173,2.435,175,2.535,176,2.535,180,2.003,181,2.781,183,1.293,185,3.762,186,1.615,187,2.473,189,1.637,193,1.802,195,1.802,201,2.003,202,2.061,204,1.601,212,1.634,214,3.64,228,1.33,268,3.728,295,2.959,327,2.357,355,3.393,381,5.093,395,3.993,397,2.742,436,4.442,589,3.08,606,3.355,608,4.034,609,3.684,611,3.181,612,3.847,613,3.684,619,2.619,620,2.191,621,2.423,623,2.619,627,2.619,631,2.619,633,3.684,634,3.29,635,4.625,636,3.408,637,4.262,638,2.423,639,2.003,640,1.848,645,1.897,647,2.619,651,4.625,655,2.735,661,2.619,1358,4.842,1497,3.754,1499,3.754,1501,3.754,1503,3.754,1507,3.754,1510,3.754,1536,5.667,1594,6.194,1595,3.754,1596,5.98,1597,5.337,1598,4.228,1599,4.228,1600,4.228,1601,4.228,1602,3.754,1603,3.754,1604,4.228,1605,4.228,1606,4.228,1607,4.228,1608,4.228,1609,2.516,1610,4.228,1611,4.228,1612,4.228,1613,4.228,1614,4.228,1615,4.228,1616,4.228]],["title/modules/CurrenciesModule.html",[84,0.422,340,3.403]],["body/modules/CurrenciesModule.html",[0,0.327,3,0.131,4,0.12,5,0.114,7,0.355,8,1.381,43,0.008,74,0.348,83,1.139,84,0.783,85,0.131,88,0.006,89,0.006,103,2.569,105,2.737,108,1.207,123,2.517,126,2.137,136,1.485,264,3.207,327,2.584,328,2.711,329,3.006,330,3.006,331,2.78,332,3.958,333,3.006,340,6.802,346,3.643,347,3.006,348,2.711,362,5.998,379,5.36,381,4.226,703,4.895,704,4.895,705,4.226,736,7.017,1594,6.453,1596,5.36,1597,6.241,1602,5.791,1617,5.791,1618,5.791,1619,6.522,1620,6.522]],["title/injectables/CurrenciesService.html",[112,1.398,1597,3.229]],["body/injectables/CurrenciesService.html",[0,0.354,3,0.065,4,0.059,5,0.079,7,0.346,8,0.851,10,1.23,12,0.95,15,1.93,16,1.724,18,1.114,19,1.431,23,2.661,24,0.562,26,1.217,36,0.221,38,0.914,40,0.721,42,0.482,43,0.008,44,0.896,51,0.792,73,2.291,74,0.331,83,0.562,84,0.581,85,0.065,88,0.004,89,0.004,108,0.596,112,1.431,114,1.407,116,1.113,117,1.491,118,1.93,119,1.926,120,2.076,121,2.186,123,1.551,125,2.792,126,1.178,127,3.151,128,2.223,129,2.605,130,3.648,131,3.018,132,2.246,133,1.886,134,3.018,135,2.425,136,1.522,137,3.754,138,2.503,139,3.11,140,2.44,141,2.388,142,2.308,143,2.523,144,1.652,146,4.106,147,4.077,149,1.555,150,0.915,151,3.197,152,2.375,153,3.46,155,2.598,156,1.64,157,1.551,158,1.532,159,3.25,160,2.308,161,2.308,164,2.278,165,2.308,166,2.786,167,2.13,168,3.018,169,2.665,171,3.901,172,2.538,173,2.321,174,3.627,175,2.076,176,2.795,177,2.523,180,2.308,183,1.489,185,3.022,186,1.596,187,2.929,188,4.414,189,1.246,193,1.371,195,1.371,197,1.721,199,1.525,201,1.525,203,3.642,204,1.623,205,2.953,207,4.062,208,3.642,209,2.175,210,3.642,211,2.694,212,1.839,213,2.538,214,3.866,216,4.106,217,3.217,219,2.792,221,3.018,222,1.993,223,1.993,224,3.642,225,3.642,226,3.642,227,3.252,228,1.255,229,1.993,232,1.306,233,3.018,234,1.914,236,1.993,242,1.993,245,2.899,254,4.037,256,3.498,258,2.694,260,3.369,261,3.757,262,1.993,264,3.217,266,1.993,267,3.498,268,2.308,269,1.993,278,2.186,286,2.605,381,4.985,396,1.617,422,1.78,574,3.614,606,1.569,609,3.018,639,1.525,640,1.407,709,1.843,710,2.081,714,3.151,718,2.375,729,2.3,734,2.308,829,2.3,830,2.3,833,6.034,843,3.369,844,2.026,1091,2.899,1416,3.966,1417,3.304,1418,3.697,1425,2.442,1428,2.442,1430,2.857,1432,2.857,1433,2.857,1596,5.378,1597,5.378,1603,2.857,1621,2.857,1622,4.872,1623,3.218,1624,3.218,1625,3.218,1626,3.218,1627,6.255,1628,3.218,1629,3.218,1630,3.218,1631,2.857,1632,3.218,1633,3.218,1634,3.218,1635,3.218,1636,3.218,1637,3.218,1638,3.218,1639,5.22,1640,3.218,1641,3.218,1642,2.857,1643,3.966,1644,5.338,1645,4.786,1646,3.218,1647,2.857,1648,3.966,1649,2.619,1650,3.218,1651,3.218]],["title/classes/Currency.html",[0,0.239,381,2.546]],["body/classes/Currency.html",[0,0.433,2,0.676,3,0.087,4,0.08,5,0.094,7,0.417,8,1.061,9,2.06,10,1.174,12,0.933,14,1.918,19,1.784,22,3.147,24,0.951,30,2.361,31,2.106,33,1.906,36,0.3,38,0.75,42,0.578,43,0.008,44,0.973,47,2.454,51,0.887,53,3.689,54,2.593,55,2.06,57,2.59,58,2.59,60,3.147,61,3.763,62,3.615,63,3.36,64,2.187,74,0.239,75,3.676,76,1.015,77,3.249,83,0.761,84,0.386,85,0.087,87,2.498,88,0.005,89,0.005,150,1.065,164,1.757,232,2.838,246,2.726,381,5.184,428,3.147,429,2.879,574,4.271,731,3.395,732,2.59,733,3.615,734,2.879,737,4.121,738,4.121,764,4.344,858,3.41,1453,7.002,1462,7.223,1463,6.478,1568,5.694,1569,5.694,1570,7.132,1571,5.694,1573,7.065,1576,7.317,1577,7.317,1580,7.317,1581,7.065,1584,5.395,1589,7.317,1652,3.87,1653,6.883,1654,4.359,1655,4.359,1656,4.359,1657,4.359,1658,4.359,1659,4.359,1660,4.359,1661,4.359]],["title/classes/Document.html",[0,0.239,389,2.194]],["body/classes/Document.html",[0,0.445,2,0.814,3,0.105,4,0.097,5,0.103,7,0.31,8,1.204,9,2.336,10,1.069,12,0.85,14,1.604,19,2.023,24,1.005,30,2.548,31,2.095,36,0.361,40,1.988,42,0.564,43,0.008,44,0.958,47,2.43,51,0.84,53,3.619,57,2.936,58,2.936,64,2.013,66,1.937,69,3.948,74,0.207,76,1.221,83,0.917,84,0.465,85,0.105,88,0.005,89,0.005,92,4.367,102,4.536,150,1.024,164,2.052,246,3.091,389,4.452,428,3.568,429,3.264,451,6.905,731,3.665,732,2.936,733,4.099,734,3.264,737,4.673,738,4.673,740,5.837,741,5.837,742,5.837,743,5.837,744,5.837,764,4.925,768,4.673,1662,4.659,1663,5.228,1664,5.058,1665,6.261,1666,4.975,1667,6.905,1668,6.905,1669,6.905,1670,6.905,1671,6.905,1672,5.247,1673,5.247,1674,5.247,1675,5.247]],["title/controllers/DocumentController.html",[103,1.548,1676,3.613]],["body/controllers/DocumentController.html",[0,0.201,3,0.081,4,0.074,5,0.09,7,0.419,8,1.001,10,1.245,12,1.042,30,1.788,31,1.796,36,0.276,38,0.952,40,1.498,42,0.571,43,0.008,44,0.937,51,0.793,73,2.414,74,0.333,76,0.934,83,0.701,84,0.355,85,0.081,88,0.004,89,0.004,103,1.304,105,1.389,107,2.485,108,0.743,109,2.015,116,1.309,117,1.544,118,2.271,123,1.825,126,1.386,132,2.641,136,1.274,138,1.304,139,3.226,140,2.977,141,2.914,142,2.715,143,2.968,149,1.62,150,0.975,152,1.956,153,2.849,156,1.286,157,1.825,158,1.614,159,3.372,160,2.715,161,1.901,164,2.382,165,2.715,166,2.715,167,2.505,169,2.918,172,2.588,173,2.366,175,2.442,176,2.442,177,2.078,179,2.078,180,1.901,181,2.72,183,1.227,185,3.362,186,1.556,187,2.383,189,1.553,193,1.71,195,1.71,201,1.901,202,1.956,204,1.62,228,1.374,268,2.715,295,2.89,355,3.335,389,4.45,395,3.9,397,2.641,436,4.589,589,2.968,606,3.911,607,2.218,608,3.887,609,3.549,611,3.064,612,3.707,613,3.549,615,2.868,619,2.485,620,1.825,621,3.284,623,2.485,624,2.868,627,3.549,631,2.485,632,4.717,633,3.549,634,3.697,635,4.778,636,3.284,637,4.517,638,2.299,639,1.901,640,1.754,645,1.8,646,2.868,647,2.485,651,4.517,655,2.595,661,2.485,1676,6.088,1677,3.562,1678,5.23,1679,5.232,1680,5.232,1681,4.012,1682,3.562,1683,4.012,1684,4.012,1685,3.562,1686,4.012,1687,3.562,1688,4.012,1689,3.562,1690,3.562,1691,4.012,1692,4.012,1693,4.012,1694,6.685,1695,3.562,1696,3.562,1697,4.012,1698,4.012,1699,4.012,1700,3.562,1701,3.562,1702,4.012,1703,3.562,1704,3.562,1705,4.012]],["title/classes/DocumentDto.html",[0,0.239,1680,3.229]],["body/classes/DocumentDto.html",[0,0.46,2,0.762,3,0.099,4,0.09,5,0.1,7,0.399,8,1.151,9,2.234,10,1.326,11,2.74,12,0.981,13,2.143,14,1.534,15,3.151,18,2.283,19,1.936,20,3.937,21,4.732,22,3.413,23,2.674,24,0.918,25,3.921,26,2.493,27,3.921,28,2.957,29,2.551,30,2.056,31,2.031,32,2.633,33,3.253,34,3.645,35,3.524,36,0.338,38,1.054,40,1.956,41,3.737,42,0.555,43,0.008,44,0.949,47,2.363,49,3.921,51,0.853,53,3.307,54,3.921,55,2.696,57,2.809,58,2.809,60,3.413,61,4.082,62,3.921,63,3.645,64,1.96,65,3.329,66,1.993,67,2.74,69,3.776,74,0.293,75,3.39,76,1.143,77,3.979,78,4.427,79,3.979,80,3.31,81,2.957,82,3.019,83,0.858,84,0.435,85,0.099,87,3.776,88,0.005,89,0.005,150,1.007,156,1.268,164,1.998,389,4.412,451,6.754,768,4.47,805,4.712,1664,4.926,1665,6.057,1666,4.813,1667,6.057,1668,6.057,1669,6.057,1670,6.057,1671,6.057,1680,5.794,1706,4.358,1707,4.908,1708,4.908,1709,5.365,1710,4.908,1711,4.908,1712,4.908]],["title/classes/DocumentGroup.html",[0,0.239,388,3.079]],["body/classes/DocumentGroup.html",[0,0.45,2,0.85,3,0.11,4,0.101,5,0.106,7,0.319,8,1.238,9,2.403,10,1.1,12,0.874,14,1.65,19,2.081,24,1.017,30,2.591,31,2.087,36,0.377,40,2.009,42,0.552,43,0.008,44,0.934,47,2.402,51,0.808,53,3.662,57,3.02,58,3.02,64,2.047,66,1.964,69,4.061,74,0.216,76,1.276,83,0.957,84,0.485,85,0.11,88,0.005,89,0.005,92,4.2,102,4.441,150,1.035,246,3.18,388,5.698,389,4.323,428,3.67,429,3.358,731,3.726,732,3.02,733,4.216,734,3.358,737,4.807,738,4.807,764,5.066,1664,5.809,1666,5.081,1667,7.001,1668,7.001,1669,7.001,1670,7.001,1671,7.001,1678,5.326,1713,4.866,1714,7.087,1715,5.48,1716,7.636,1717,5.48,1718,5.48]],["title/controllers/DocumentGroupController.html",[103,1.548,1719,3.613]],["body/controllers/DocumentGroupController.html",[0,0.194,3,0.078,4,0.071,5,0.088,7,0.418,8,0.975,10,1.23,12,1.032,30,1.741,31,1.77,36,0.266,38,0.938,40,1.468,42,0.568,43,0.008,44,0.932,51,0.782,73,2.394,74,0.329,76,0.9,83,0.676,84,0.343,85,0.078,88,0.004,89,0.004,103,1.257,105,1.339,107,2.395,108,0.716,109,1.942,116,1.275,117,1.518,118,2.212,123,1.777,126,1.35,132,2.573,136,1.328,138,1.257,139,3.208,140,2.951,141,2.888,142,3.103,143,2.891,149,1.602,150,0.965,152,1.886,153,2.791,156,1.26,157,1.777,158,1.601,159,3.353,160,2.645,161,1.833,164,2.374,165,2.645,166,2.645,167,2.44,169,2.877,172,2.535,173,2.318,175,2.379,176,2.379,177,2.003,179,2.003,180,1.833,181,2.698,183,1.182,185,3.305,186,1.515,187,2.321,189,1.497,193,1.648,195,1.648,201,1.833,202,1.886,204,1.602,228,1.355,268,2.645,295,2.842,355,3.294,388,5.283,389,4.456,395,3.835,397,2.573,436,4.524,589,2.891,606,3.863,607,2.161,608,3.786,609,3.457,611,2.985,612,3.611,613,3.457,615,2.765,619,2.395,620,1.777,621,3.198,623,2.395,624,2.765,627,3.457,631,2.395,632,4.639,633,3.457,634,3.622,635,4.71,636,3.198,637,4.442,638,2.216,639,1.833,640,1.691,645,1.735,646,2.765,647,2.395,651,4.442,661,2.395,1664,5.916,1682,3.434,1685,3.434,1687,3.434,1695,3.434,1696,3.434,1700,3.434,1701,3.434,1703,3.434,1704,3.434,1719,6.013,1720,3.434,1721,6.935,1722,5.158,1723,5.158,1724,3.867,1725,3.867,1726,3.867,1727,3.867,1728,3.867,1729,3.434,1730,3.434,1731,3.867,1732,3.867,1733,3.867,1734,6.549,1735,3.867,1736,3.867,1737,3.867,1738,3.867,1739,3.867]],["title/classes/DocumentGroupDto.html",[0,0.239,1723,3.229]],["body/classes/DocumentGroupDto.html",[0,0.463,2,0.794,3,0.103,4,0.094,5,0.102,7,0.389,8,1.184,9,2.297,10,1.341,11,2.817,12,0.998,13,2.203,14,1.577,15,3.204,18,2.347,19,1.99,20,3.984,21,4.811,22,3.509,23,2.75,24,0.933,25,4.031,26,2.563,27,4.031,28,3.041,29,2.623,30,2.114,31,2.012,32,2.689,33,3.321,34,3.747,35,3.623,36,0.352,38,1.066,40,1.976,41,3.815,42,0.541,43,0.008,44,0.921,47,2.293,49,4.031,51,0.831,53,3.362,54,4.031,55,2.742,57,2.888,58,2.888,60,3.509,61,4.197,62,4.031,63,3.747,64,1.993,65,3.47,66,2.014,67,2.817,69,3.883,74,0.299,75,3.238,76,1.191,77,4.062,78,4.031,79,3.623,80,3.403,81,3.041,82,2.75,83,0.894,84,0.453,85,0.103,87,3.883,88,0.005,89,0.005,150,1.018,156,1.304,389,4.36,805,3.658,1664,5.859,1666,4.914,1678,5.21,1709,5.516,1716,7.469,1723,5.863,1740,4.543,1741,5.117,1742,5.117,1743,5.117,1744,5.117]],["title/modules/DocumentGroupModule.html",[84,0.422,341,3.403]],["body/modules/DocumentGroupModule.html",[0,0.321,3,0.128,4,0.117,5,0.113,7,0.351,8,1.363,43,0.008,74,0.346,83,1.116,84,0.777,85,0.128,88,0.006,89,0.006,105,3.04,108,1.183,116,1.782,118,3.092,119,2.292,123,2.485,126,1.887,136,1.472,327,2.531,328,2.655,329,2.944,330,2.944,331,2.722,332,3.684,333,3.884,341,6.815,346,3.597,347,2.944,348,2.655,389,4.045,396,2.59,703,4.833,704,4.833,705,4.173,706,4.471,1664,4.833,1719,6.831,1721,6.352,1722,6.534,1729,5.671,1745,5.671,1746,5.671,1747,5.671,1748,6.387,1749,6.387]],["title/injectables/DocumentGroupService.html",[112,1.398,1722,3.229]],["body/injectables/DocumentGroupService.html",[0,0.36,3,0.067,4,0.062,5,0.081,7,0.351,8,0.879,10,1.169,12,0.991,15,1.993,16,1.78,18,1.163,19,1.477,23,2.041,24,0.581,36,0.231,38,0.929,42,0.489,43,0.008,44,0.903,51,0.803,73,2.085,74,0.335,83,0.587,84,0.593,85,0.067,88,0.004,89,0.004,108,0.622,112,1.477,114,1.468,116,1.149,117,1.418,118,1.993,119,1.968,120,2.144,121,2.257,123,1.602,125,2.883,126,1.217,127,3.254,128,1.706,129,2.69,130,3.569,131,3.116,132,2.319,133,1.947,134,3.116,135,1.861,136,1.435,137,3.808,138,2.539,139,3.134,140,2.32,141,2.271,142,2.858,143,2.605,144,1.706,146,3.901,147,3.922,149,1.575,150,0.948,151,2.941,152,2.453,153,2.855,155,1.993,156,1.673,157,1.602,158,1.549,159,3.275,160,2.858,161,2.384,164,2.302,165,2.384,166,2.858,167,3.137,168,2.08,169,2.715,171,3.986,172,2.593,173,2.54,174,3.969,175,2.144,176,2.144,177,2.605,179,2.605,180,2.384,181,2.61,183,1.538,185,3.6,186,1.638,187,3.132,188,4.455,189,1.3,190,2.548,192,2.4,193,1.431,195,1.431,197,1.795,198,2.277,199,1.591,201,1.591,202,1.637,203,2.08,204,1.477,205,3.364,206,3.412,207,3.736,208,4.15,209,2.231,210,3.736,211,2.782,212,1.787,213,1.947,214,3.916,215,2.172,216,4.045,217,3.169,219,1.924,220,1.431,221,3.116,222,2.08,223,2.08,224,3.736,225,3.736,226,3.736,227,3.336,228,1.391,229,2.08,231,2.172,232,1.362,233,2.08,234,1.998,236,2.08,238,2.172,239,1.924,242,2.08,243,2.277,244,2.277,245,2.993,250,3.116,253,2.172,254,2.883,255,1.998,256,2.993,257,2.4,258,1.857,260,2.883,261,2.883,262,2.08,265,2.733,266,2.08,267,1.998,268,2.858,269,2.08,270,2.277,388,2.172,389,4.43,396,1.67,422,1.857,606,3.266,639,1.591,640,1.468,709,1.903,710,2.172,714,3.254,718,2.453,720,2.981,723,2.172,834,3.818,1664,5.902,1721,6.539,1722,5.109,1723,4.867,1730,2.981,1750,2.981,1751,5.03,1752,3.358,1753,3.358,1754,3.358,1755,3.358,1756,3.358,1757,3.358,1758,4.467,1759,2.733]],["title/modules/DocumentModule.html",[84,0.422,342,3.403]],["body/modules/DocumentModule.html",[0,0.322,3,0.129,4,0.118,5,0.114,7,0.352,8,1.367,43,0.008,74,0.346,83,1.122,84,0.779,85,0.129,88,0.006,89,0.006,105,3.045,108,1.189,116,1.788,118,3.102,119,2.299,123,2.493,126,1.893,136,1.475,327,2.544,328,2.669,329,2.959,330,2.959,331,2.736,332,3.692,333,3.893,342,6.82,346,3.608,347,2.959,348,2.669,389,3.608,396,2.598,703,4.848,704,4.848,705,4.186,706,4.485,1676,6.841,1678,4.848,1679,6.538,1689,5.7,1760,5.7,1761,5.7,1762,5.7,1763,6.42,1764,6.42]],["title/injectables/DocumentService.html",[112,1.398,1679,3.229]],["body/injectables/DocumentService.html",[0,0.365,3,0.07,4,0.064,5,0.083,7,0.355,8,0.9,10,1.183,12,1,15,2.041,16,1.823,18,1.2,19,1.513,23,2.09,24,0.595,36,0.239,38,0.94,42,0.494,43,0.008,44,0.922,51,0.811,73,2.11,74,0.337,83,0.605,84,0.603,85,0.07,88,0.004,89,0.004,108,0.642,112,1.513,114,1.515,116,1.176,117,1.441,118,2.041,119,1.999,120,2.195,121,2.311,123,1.64,125,2.952,126,1.246,127,3.332,128,1.746,129,2.755,130,3.612,131,3.191,132,2.374,133,1.994,134,3.191,135,1.905,136,1.416,137,3.848,138,2.566,139,3.151,140,2.357,141,2.307,142,2.441,143,2.668,144,1.746,146,3.947,147,3.963,149,1.59,150,0.936,151,2.997,152,2.511,153,2.901,155,2.041,156,1.666,157,1.64,158,1.561,159,3.293,160,2.441,161,2.441,164,2.311,165,2.441,166,2.913,167,3.18,168,3.191,169,2.752,171,4.049,172,2.634,173,2.409,174,3.764,175,2.195,176,2.195,177,2.668,179,2.668,180,2.441,181,2.63,183,1.575,185,3.513,186,1.398,187,3.169,188,4.485,189,1.342,193,1.477,195,1.477,197,1.853,198,2.351,199,1.642,201,1.642,202,1.69,203,2.147,204,1.495,205,3.418,206,2.351,207,3.191,208,3.808,209,2.274,210,3.808,211,1.917,212,1.799,213,1.994,214,3.953,215,2.242,216,4.087,217,3.203,219,1.986,221,3.191,222,2.147,223,2.147,224,3.808,225,3.808,226,3.808,227,3.4,228,1.296,229,2.147,231,2.242,232,1.406,233,2.147,234,2.062,235,4.193,236,2.147,238,2.242,239,1.986,242,2.147,243,2.351,244,2.351,245,3.065,250,3.191,253,2.242,254,2.952,255,2.062,256,3.065,260,1.986,261,2.952,262,2.147,266,2.147,267,2.062,268,2.913,269,2.147,270,2.351,389,4.407,396,1.71,422,1.917,606,2.511,607,1.994,639,1.642,640,1.515,709,1.949,710,2.242,714,3.332,718,2.511,723,2.242,729,2.478,829,2.478,830,2.478,842,1.477,843,1.986,871,2.63,872,4.215,874,2.821,875,2.821,1227,4.193,1666,2.242,1678,4.505,1679,5.169,1680,4.933,1690,3.077,1758,4.574,1759,2.821,1765,3.077,1766,5.151,1767,3.466,1768,3.466,1769,3.466,1770,3.466,1771,3.466,1772,3.466,1773,5.151,1774,3.466,1775,3.466]],["title/classes/DynamicQueryBuilder.html",[0,0.239,1776,3.403]],["body/classes/DynamicQueryBuilder.html",[0,0.32,2,0.472,3,0.061,4,0.056,5,0.041,7,0.309,12,1.109,14,1.321,18,2.511,36,0.519,38,0.931,40,1.272,42,0.582,43,0.008,44,0.92,51,0.655,53,2.647,64,0.749,66,1.454,73,2.358,74,0.12,85,0.128,88,0.004,89,0.004,117,0.987,119,0.893,135,3.453,136,1.638,141,2.764,149,1.249,150,1.032,158,1.442,172,1.177,186,1.266,199,4.282,204,1.249,212,1.924,213,1.177,220,3.404,228,1.499,248,3.09,249,4.295,257,3.335,258,2.58,482,2.69,554,1.364,555,1.364,709,2.148,842,1.295,844,3.138,859,3.017,863,3.776,914,2.89,977,1.526,985,1.482,986,3.797,992,4.058,1018,1.526,1021,2.947,1024,1.526,1026,2.547,1032,1.808,1035,2.914,1037,2.343,1086,5.038,1091,1.808,1102,1.742,1110,1.549,1776,5.396,1777,5.592,1778,5.213,1779,2.062,1780,4.665,1781,4.665,1782,4.665,1783,4.665,1784,4.142,1785,6.624,1786,3.039,1787,6.34,1788,4.142,1789,3.039,1790,4.142,1791,3.039,1792,4.142,1793,3.039,1794,4.46,1795,7.239,1796,7.239,1797,2.307,1798,2.775,1799,2.699,1800,3.798,1801,5.592,1802,5.183,1803,1.681,1804,5.04,1805,2.699,1806,5.04,1807,2.699,1808,1.681,1809,2.699,1810,1.966,1811,6.702,1812,5.04,1813,5.04,1814,2.699,1815,5.183,1816,5.04,1817,4.142,1818,4.142,1819,3.798,1820,4.142,1821,4.142,1822,4.142,1823,6.437,1824,5.04,1825,5.654,1826,5.654,1827,4.142,1828,4.142,1829,2.699,1830,2.699,1831,2.699,1832,2.699,1833,2.062,1834,2.699,1835,2.699,1836,5.04,1837,2.699,1838,2.699]],["title/classes/EnvVarAppConfigValidator.html",[0,0.239,1171,3.613]],["body/classes/EnvVarAppConfigValidator.html",[0,0.376,2,0.577,3,0.075,4,0.068,5,0.05,7,0.167,24,0.626,31,1.639,32,1.316,36,0.256,42,0.469,43,0.008,44,0.932,51,0.724,55,1.839,64,1.579,74,0.349,81,3.36,82,3.172,85,0.109,88,0.004,89,0.004,128,1.261,144,1.261,150,0.429,212,1.462,228,1.605,264,2.202,282,3.811,291,2.213,320,2.435,510,4.118,516,2.522,520,2.406,526,2.822,620,2.04,672,3.425,856,3.542,895,3.027,917,2.406,921,2.213,922,2.303,923,2.057,924,2.303,925,1.762,1123,3.001,1124,3.027,1128,5.682,1129,3.302,1131,3.302,1133,3.302,1135,3.302,1141,2.303,1142,4.118,1143,2.822,1144,5.214,1145,2.406,1146,2.303,1147,3.68,1148,3.302,1149,3.879,1150,3.302,1151,3.879,1152,3.302,1153,3.879,1154,3.302,1155,3.879,1156,3.302,1157,3.879,1158,3.302,1159,3.302,1160,2.659,1161,3.302,1162,3.879,1163,3.302,1164,3.879,1165,3.302,1166,3.879,1167,3.302,1168,3.302,1169,2.303,1170,2.522,1171,4.861,1172,2.659,1173,2.822,1174,5.214,1175,4.417,1176,5.214,1177,5.214,1178,5.214,1179,4.817,1180,3.027,1181,3.027,1182,5.344,1183,5.344,1184,5.732,1185,3.027,1186,3.027,1187,3.027,1188,3.027,1189,3.302,1190,4.817,1191,3.68,1192,3.302,1193,4.817,1194,2.406,1195,3.302,1196,5.687,1197,2.406,1198,3.302,1199,3.302,1200,2.131,1201,3.302,1202,3.302,1203,3.302,1204,3.302,1205,3.027,1206,3.302,1207,3.302,1208,3.302,1209,2.406,1210,3.302,1211,3.302,1212,4.817,1213,3.302,1214,4.817,1215,3.302,1216,3.879,1217,3.302,1218,3.027,1219,3.302,1220,3.027,1221,3.302,1222,3.302,1223,3.302,1224,3.302,1225,3.027,1226,3.302,1227,3.027,1228,3.302,1229,3.302,1230,3.68,1231,3.302,1232,2.822,1233,3.027,1234,3.027,1235,2.822,1236,3.302,1237,2.822,1238,3.302,1239,3.302,1240,2.659,1241,3.302,1242,3.302,1243,3.302,1244,3.027,1245,3.302,1246,3.027,1247,3.302,1248,3.027,1249,3.302,1250,3.027,1251,3.302,1252,3.027,1253,3.302,1254,3.027,1255,3.302,1256,3.027,1257,3.302,1258,3.027,1259,3.302,1260,3.027,1261,3.302,1262,3.302,1263,3.302,1264,3.302,1265,3.302,1266,3.302,1267,3.302,1268,3.302,1269,3.302,1270,2.822,1271,3.302,1272,3.027,1273,3.302,1274,3.027,1275,3.302,1276,3.027,1277,3.302,1278,3.027,1279,3.302,1280,3.027,1281,3.302,1282,3.302,1283,3.027,1284,3.302,1285,3.027,1286,3.302,1287,3.027,1288,3.302,1289,3.027,1290,3.302,1291,3.302,1292,3.027,1293,3.302,1294,3.027,1295,3.302,1296,3.027,1297,3.302,1298,3.027,1299,3.302,1300,3.027,1301,3.302,1302,3.027,1303,3.302,1304,3.302,1305,3.027,1306,3.302,1307,3.027,1308,3.302,1309,3.027,1310,3.302,1311,3.302,1312,3.027,1313,3.302,1314,3.027,1315,3.302,1316,3.027,1317,3.302,1318,3.027,1319,3.302,1320,3.027,1321,3.302,1322,2.659,1323,3.302,1324,2.303,1325,3.302,1326,2.303,1327,3.302,1328,2.822,1329,3.302,1330,2.822,1331,3.302,1332,2.822,1333,3.027,1334,3.027,1839,2.822,1840,3.719,1841,3.302,1842,3.719,1843,4.817,1844,4.817,1845,3.719,1846,3.719]],["title/classes/EnvironmentVariablesValidator.html",[0,0.239,1847,2.832]],["body/classes/EnvironmentVariablesValidator.html",[0,0.444,2,0.8,3,0.103,4,0.095,5,0.069,7,0.343,12,0.636,20,2.376,24,0.786,31,2.149,32,2.698,36,0.355,42,0.568,43,0.008,44,0.966,51,0.933,64,1.678,66,1.177,67,2.831,74,0.319,81,4.111,82,3.515,85,0.153,88,0.005,89,0.005,133,2.951,150,0.595,158,1.261,228,0.918,297,2.831,361,2.588,425,3.496,431,2.376,503,2.809,504,5.603,505,5.171,508,2.756,516,5.5,527,4.196,672,3.641,856,2.851,860,2.313,904,3.765,912,3.192,1021,1.95,1128,3.912,1141,3.192,1142,5.167,1144,6.207,1145,3.334,1146,3.192,1169,3.192,1170,3.496,1172,3.685,1173,3.912,1174,6.207,1175,5.543,1176,6.207,1177,6.207,1178,6.207,1191,4.618,1194,4.404,1209,4.932,1216,3.685,1230,3.496,1232,3.912,1233,4.196,1234,4.196,1235,3.912,1237,3.912,1240,3.685,1389,3.138,1839,6.399,1841,4.576,1843,6.045,1844,6.045,1847,5.017,1848,4.196,1849,7.624,1850,7.624,1851,7.624,1852,7.624,1853,6.769,1854,5.154,1855,5.154,1856,5.154,1857,5.154,1858,5.154,1859,5.154,1860,5.154,1861,5.154,1862,4.576,1863,5.154,1864,3.912,1865,4.576,1866,3.496,1867,3.496,1868,3.685,1869,3.912,1870,4.576,1871,3.685,1872,3.912,1873,5.154,1874,5.154,1875,3.912,1876,5.154,1877,5.154,1878,4.576,1879,5.154,1880,4.576,1881,5.154,1882,5.154,1883,5.154,1884,5.154,1885,5.154,1886,5.154,1887,5.154,1888,5.154,1889,5.154]],["title/classes/EnvironmentVariablesValidator-1.html",[0,0.201,66,0.913,1847,2.377]],["body/classes/EnvironmentVariablesValidator-1.html",[0,0.409,2,0.595,3,0.077,4,0.071,5,0.102,7,0.172,12,0.473,20,1.767,24,0.64,26,3.343,31,2.107,32,2.307,36,0.264,42,0.591,43,0.008,44,0.966,51,0.917,55,2.21,64,2.056,67,2.306,74,0.281,81,3.744,82,3.619,85,0.131,88,0.004,89,0.004,128,2.996,133,2.523,150,0.752,158,1.027,228,0.683,232,2.251,282,2.281,291,3.878,297,2.306,320,3.545,401,5.421,431,1.767,444,4.21,503,2.474,504,4.62,505,4.421,506,4.516,508,2.05,518,5.815,856,2.121,860,1.721,904,3.068,912,2.375,917,5.499,1021,2.099,1035,2.257,1090,3.3,1142,4.947,1143,2.91,1145,2.48,1146,2.375,1169,2.375,1170,2.601,1172,2.741,1173,2.91,1182,5.996,1216,4.66,1218,3.121,1220,5.306,1225,5.306,1230,2.601,1389,3.004,1794,4.619,1839,4.947,1847,5.474,1864,2.91,1866,2.601,1871,2.741,1872,2.91,1890,3.405,1891,6.518,1892,6.518,1893,6.518,1894,6.518,1895,6.518,1896,6.518,1897,8.918,1898,5.787,1899,6.518,1900,5.787,1901,5.787,1902,5.787,1903,5.787,1904,3.834,1905,8.632,1906,6.518,1907,7.143,1908,3.834,1909,3.834,1910,6.518,1911,3.834,1912,7.015,1913,5.547,1914,5.547,1915,5.547,1916,3.834,1917,5.547,1918,3.834,1919,4.216,1920,7.015,1921,3.834,1922,3.834,1923,3.878,1924,5.547,1925,5.547,1926,7.982,1927,4.037,1928,3.834,1929,3.834,1930,3.834,1931,3.762,1932,3.834,1933,3.834,1934,3.834,1935,3.834,1936,4.925,1937,5.547,1938,3.834,1939,6.342,1940,3.834,1941,7.9,1942,3.121,1943,3.834,1944,3.834,1945,3.834,1946,3.834,1947,3.834,1948,3.834,1949,3.834,1950,3.834,1951,3.834,1952,3.834,1953,3.834,1954,3.834,1955,3.834,1956,4.516,1957,3.834,1958,3.834,1959,3.834,1960,5.547,1961,3.834,1962,3.834,1963,3.834,1964,3.834,1965,3.834,1966,3.834,1967,3.834,1968,3.834]],["title/classes/EnvironmentVariablesValidator-2.html",[0,0.201,858,1.948,1847,2.377]],["body/classes/EnvironmentVariablesValidator-2.html",[0,0.404,2,0.697,3,0.09,4,0.083,5,0.125,7,0.202,12,0.554,20,2.069,24,0.716,31,1.936,32,1.589,36,0.309,42,0.569,43,0.008,44,0.935,51,0.855,53,2.578,64,1.751,67,3.186,74,0.302,81,3.188,82,3.622,85,0.143,88,0.005,89,0.005,126,1.5,133,3.413,150,0.716,157,2.766,158,1.148,164,1.558,228,0.8,431,2.069,503,2.88,504,4.957,505,4.819,508,2.401,520,5.202,620,1.975,856,2.483,860,2.014,864,3.316,883,5.816,904,3.43,912,2.781,978,4.434,1021,2.346,1035,2.654,1141,2.781,1143,3.407,1147,5.641,1169,2.781,1170,3.045,1180,3.655,1181,5.784,1182,5.816,1183,5.816,1184,6.239,1185,5.784,1186,5.784,1187,5.784,1188,5.784,1200,4.766,1230,3.045,1270,4.707,1322,6.445,1324,2.781,1326,2.781,1328,3.407,1330,3.407,1332,4.707,1333,5.049,1334,3.655,1389,2.859,1794,4.307,1839,3.407,1847,5.364,1864,4.707,1866,3.045,1871,3.209,1872,3.407,1920,6.804,1927,2.781,1931,4.206,1942,3.655,1969,3.986,1970,5.114,1971,7.105,1972,4.489,1973,5.251,1974,5.381,1975,4.489,1976,4.206,1977,4.489,1978,4.434,1979,4.489,1980,4.489,1981,4.489,1982,5.049,1983,3.841,1984,5.507,1985,4.489,1986,4.206,1987,3.554,1988,5.507,1989,3.655,1990,4.489,1991,3.986,1992,7.105,1993,5.049,1994,4.489,1995,4.489,1996,4.489,1997,4.489,1998,4.489,1999,6.202,2000,6.202]],["title/classes/EnvironmentVariablesValidator-3.html",[0,0.201,1481,2.289,1847,2.377]],["body/classes/EnvironmentVariablesValidator-3.html",[0,0.44,2,0.772,3,0.134,4,0.092,5,0.067,7,0.224,12,0.614,20,2.294,24,0.768,31,2.165,32,2.652,36,0.343,42,0.575,43,0.008,44,0.956,51,0.944,55,1.688,67,2.766,74,0.315,81,4.149,82,3.554,85,0.15,88,0.005,89,0.005,133,2.901,158,1.232,209,1.841,212,1.382,228,1.185,297,2.07,299,3.559,361,2.5,414,3.559,431,2.294,503,2.77,504,5.548,505,5.082,508,2.662,522,6.511,527,4.052,672,4.457,856,2.753,860,2.234,904,3.679,912,3.083,914,2.163,917,5.888,1021,1.883,1035,1.724,1128,3.778,1141,3.083,1169,3.083,1170,3.376,1191,4.512,1194,4.303,1205,4.052,1209,4.847,1230,3.376,1847,4.959,1853,6.653,1862,4.42,1864,3.778,1866,3.376,1867,3.376,1868,3.559,1869,3.778,1870,4.42,1871,3.559,1872,3.778,1875,3.778,1939,7.401,2001,4.052,2002,7.493,2003,7.493,2004,7.493,2005,7.493,2006,7.493,2007,7.493,2008,7.493,2009,7.493,2010,7.493,2011,7.493,2012,8.576,2013,4.978,2014,7.998,2015,4.978,2016,4.978,2017,4.978,2018,4.978,2019,4.978,2020,4.978,2021,4.978,2022,4.978,2023,4.978,2024,4.978,2025,4.978,2026,4.42,2027,6.653,2028,4.978,2029,4.978,2030,4.978,2031,4.978,2032,4.978,2033,4.978,2034,4.978,2035,4.978,2036,4.978,2037,4.978,2038,4.978,2039,4.978,2040,4.978,2041,4.978,2042,4.978,2043,4.978,2044,4.978,2045,4.978,2046,4.978,2047,4.978,2048,4.978,2049,4.978,2050,4.978]],["title/classes/FileNotImageException.html",[0,0.239,2051,3.875]],["body/classes/FileNotImageException.html",[0,0.415,2,0.949,3,0.123,4,0.113,5,0.116,7,0.372,38,1.097,42,0.383,43,0.008,44,0.955,47,2.117,51,0.629,74,0.326,85,0.123,88,0.006,89,0.006,108,1.133,144,2.074,149,1.2,150,0.706,155,3.011,156,1.462,204,1.49,209,3.505,216,3.168,217,3.728,275,4.737,286,4.064,296,4.149,396,2.523,431,2.82,437,7.237,539,4.954,574,3.705,882,2.119,925,3.601,1117,5.433,1987,4.354,2051,7.377,2052,6.747,2053,5.432,2054,7.599,2055,8.266,2056,6.118,2057,7.599,2058,4.281,2059,7.599,2060,6.118,2061,3.384,2062,3.789,2063,6.118,2064,6.118,2065,6.118,2066,6.118]],["title/classes/FileResponseDto.html",[0,0.239,2067,2.728]],["body/classes/FileResponseDto.html",[0,0.325,2,1.005,3,0.13,4,0.119,5,0.126,7,0.354,9,2.669,12,0.971,13,2.106,24,0.909,31,1.508,36,0.446,42,0.531,43,0.008,47,2.016,51,0.666,74,0.31,76,1.508,85,0.13,88,0.006,89,0.006,92,3.465,102,4.209,164,1.978,241,4.076,302,3.273,320,3.532,408,6.989,621,4.51,2062,4.875,2067,5.178,2068,6.989,2069,4.394,2070,6.408,2071,5.467,2072,5.753,2073,6.408,2074,6.408,2075,6.408,2076,6.408,2077,6.408,2078,6.989,2079,6.989,2080,4.394]],["title/classes/FileResponseDto-1.html",[0,0.201,66,0.913,2067,2.289]],["body/classes/FileResponseDto-1.html",[0,0.302,2,0.933,3,0.121,4,0.111,5,0.127,7,0.369,9,2.781,10,1.167,11,3.126,12,0.927,13,2.876,14,1.75,24,0.947,31,1.75,36,0.414,42,0.514,43,0.008,47,1.926,51,0.618,58,2.563,60,4.248,74,0.296,76,1.4,85,0.121,88,0.006,89,0.006,92,3.216,102,4.595,164,1.889,241,3.114,287,4.442,300,4.079,302,3.126,320,3.856,361,4.315,428,3.893,429,3.562,611,4.02,734,2.849,937,3.465,1026,3.374,1338,4.119,1438,4.473,1439,2.699,2062,5.08,2067,4.7,2069,4.079,2071,5.446,2073,6.12,2074,6.12,2075,6.12,2076,6.12,2077,6.12,2080,4.079,2081,6.675,2082,7.518,2083,6.12,2084,6.675,2085,7.518,2086,6.014,2087,6.675,2088,5.34]],["title/classes/FileResponseDto-2.html",[0,0.201,858,1.948,2067,2.289]],["body/classes/FileResponseDto-2.html",[0,0.426,2,0.899,3,0.116,4,0.107,5,0.13,7,0.33,9,2.49,13,2.388,14,1.974,24,0.848,28,3.296,31,1.71,36,0.399,42,0.56,43,0.008,44,0.9,47,2.172,51,0.755,74,0.289,76,1.349,85,0.116,88,0.006,89,0.006,92,3.928,102,4.312,119,2.49,164,1.846,287,4.258,302,3.525,320,3.805,324,5.251,731,3.296,734,4.017,937,3.385,1338,3.689,1923,5.318,1970,4.209,1974,4.549,2067,5.013,2069,3.93,2071,5.318,2072,5.145,2080,3.93,2088,6.522,2089,5.469,2090,7.16,2091,5.782,2092,7.345,2093,7.345,2094,7.16,2095,7.345,2096,7.345,2097,5.795,2098,4.549,2099,7.345,2100,7.345,2101,7.345,2102,7.345,2103,7.345,2104,7.345]],["title/classes/FileType.html",[0,0.239,2071,2.832]],["body/classes/FileType.html",[0,0.451,2,0.756,3,0.098,4,0.09,5,0.129,7,0.295,8,1.146,9,2.224,14,1.527,24,0.757,30,2.047,31,1.846,32,1.725,33,3.241,34,3.628,36,0.335,42,0.534,43,0.008,44,0.932,47,2.268,51,0.675,55,2.224,57,3.38,58,3.38,74,0.353,75,2.796,76,1.726,83,0.852,84,0.432,85,0.098,87,3.759,88,0.005,89,0.005,92,2.607,102,3.508,133,2.539,156,1.262,164,1.863,212,1.362,228,1.321,259,4.107,287,3.983,301,2.131,320,4.026,361,3.294,396,2.178,429,3.108,503,2.747,516,5.029,517,4.328,520,5.729,521,4.328,734,3.108,868,5.825,914,2.578,1035,1.688,1147,3.306,1200,3.759,1322,6.094,1324,3.019,1326,3.019,1438,3.903,1560,3.759,1653,3.968,1663,4.978,1865,4.328,1866,4.449,1923,5.072,1973,4.386,1974,4.063,1976,3.306,1978,3.485,1983,4.063,1989,3.968,1993,3.968,2071,5.072,2073,6.036,2074,6.036,2075,6.036,2076,6.036,2077,5.34,2087,5.825,2105,4.328,2106,7.931,2107,4.875,2108,4.875,2109,4.875,2110,4.875,2111,5.825,2112,5.825,2113,5.825,2114,5.825,2115,5.825,2116,4.978,2117,5.825,2118,4.978,2119,3.485,2120,4.328,2121,3.968,2122,3.968,2123,5.825,2124,5.825,2125,4.875,2126,4.875,2127,4.875,2128,4.875,2129,3.699,2130,4.875,2131,4.875,2132,5.34,2133,4.875,2134,4.875,2135,3.968,2136,4.328]],["title/classes/FileUploadDto.html",[0,0.239,2137,3.403]],["body/classes/FileUploadDto.html",[0,0.447,2,0.952,3,0.123,4,0.113,5,0.124,7,0.342,8,1.33,10,1.343,11,3.164,12,0.939,13,2.474,14,1.772,19,2.235,24,0.999,31,1.772,32,2.171,36,0.422,42,0.542,43,0.008,44,0.851,47,2.322,51,0.783,64,2.04,74,0.3,75,3.527,76,1.428,80,3.822,82,3.088,85,0.123,88,0.006,89,0.006,119,2.235,150,0.999,157,2.424,389,3.508,841,5.441,904,4.209,1986,5.869,1988,6.758,2062,4.714,2083,6.196,2089,5.613,2091,4.923,2098,4.714,2137,6.36,2138,5.446,2139,4.714,2140,6.28,2141,6.737,2142,6.196,2143,6.133,2144,6.133,2145,7.348,2146,6.133,2147,6.133,2148,8.275]],["title/controllers/FilesLocalController.html",[103,1.548,2149,3.613]],["body/controllers/FilesLocalController.html",[0,0.255,3,0.102,4,0.093,5,0.129,7,0.362,10,1.045,12,0.625,24,0.585,31,1.568,36,0.349,38,0.831,42,0.525,43,0.008,44,0.828,51,0.692,74,0.356,76,1.18,85,0.102,88,0.005,89,0.005,103,2.458,105,1.756,108,0.939,109,2.546,116,1.538,117,1.425,119,1.978,123,2.144,126,1.629,138,1.648,139,2.676,149,1.321,150,0.777,158,1.492,159,2.491,187,2.108,188,3.487,195,2.161,204,1.483,205,3.382,209,2.491,228,1.2,241,3.487,267,4.007,302,3.76,306,2.804,320,3.869,395,3.601,396,2.235,406,4.567,501,4.127,634,3.724,636,3.859,645,2.275,937,2.337,986,3.283,1919,3.279,1970,5.041,1983,5.534,1987,3.859,2062,4.171,2067,4.617,2091,4.891,2098,4.171,2139,4.171,2140,3.847,2149,6.365,2150,4.501,2151,5.482,2152,6.156,2153,5.482,2154,5.07,2155,6.734,2156,5.07,2157,5.482,2158,6.734,2159,6.734,2160,4.127,2161,6.714,2162,4.127,2163,5.07,2164,4.501,2165,4.501,2166,5.07,2167,4.501,2168,5.979,2169,4.501,2170,3.624,2171,5.979,2172,4.501,2173,6.734,2174,6.734,2175,3.847,2176,6.156,2177,5.979,2178,6.714,2179,5.979,2180,5.111,2181,4.127,2182,4.127,2183,4.127,2184,4.567,2185,3.279,2186,4.127,2187,3.14,2188,5.07,2189,4.501,2190,4.501,2191,5.07,2192,4.501,2193,4.501,2194,5.07,2195,5.07,2196,4.127,2197,4.501,2198,4.127,2199,5.07,2200,5.07]],["title/modules/FilesLocalModule.html",[84,0.422,2201,3.403]],["body/modules/FilesLocalModule.html",[0,0.302,3,0.121,4,0.111,5,0.127,7,0.338,14,1.402,23,2.443,43,0.008,74,0.323,84,0.762,85,0.121,88,0.006,89,0.006,105,2.842,108,1.115,116,1.718,119,2.689,120,2.566,123,2.396,125,3.45,126,2.079,133,2.912,172,3.177,264,2.443,278,3.858,327,3.252,328,2.503,329,2.775,330,2.775,331,2.566,332,3.946,333,3.783,346,3.468,347,2.775,348,2.503,357,4.66,379,5.566,390,4.084,395,3.22,397,2.775,705,4.023,882,2.085,1439,2.702,1970,4.926,1983,5.59,1987,4.311,2098,3.729,2139,3.729,2149,6.228,2184,6.469,2185,3.895,2201,6.721,2202,5.346,2203,5.346,2204,5.346,2205,6.021,2206,6.68,2207,7.524,2208,4.901,2209,4.901,2210,6.021,2211,5.346,2212,6.021,2213,4.084,2214,5.346,2215,6.021]],["title/injectables/FilesLocalService.html",[112,1.398,2184,3.229]],["body/injectables/FilesLocalService.html",[0,0.282,3,0.113,4,0.103,5,0.13,7,0.358,12,0.889,26,2.127,36,0.387,38,0.889,40,1.26,42,0.451,43,0.008,47,2.148,51,0.741,55,1.907,74,0.33,85,0.113,88,0.006,89,0.006,108,1.041,112,2.116,114,2.459,116,1.915,117,1.525,119,2.116,126,1.743,138,1.828,139,2.814,140,2.496,144,1.907,149,1.413,150,0.832,156,1.082,158,1.553,159,3.101,164,1.998,189,2.177,204,1.103,205,2.824,216,2.912,228,1.002,241,4.593,264,2.282,295,2.855,302,2.996,320,3.568,396,2.392,410,4.661,508,3.007,548,3.222,645,2.523,705,3.853,986,3.513,1123,4.905,1428,6.364,1970,4.129,1983,4.463,2070,5.866,2071,3.346,2078,6.398,2079,6.398,2080,3.814,2161,7.06,2184,5.88,2216,4.993,2217,5.469,2218,5.866,2219,4.268,2220,5.623,2221,5.866,2222,5.623,2223,7.951,2224,6.473,2225,3.814,2226,4.02,2227,4.578,2228,4.578,2229,4.993,2230,3.814,2231,5.623]],["title/modules/FilesModule.html",[84,0.422,343,3.403]],["body/modules/FilesModule.html",[0,0.386,3,0.105,4,0.096,5,0.126,7,0.309,8,1.342,14,1.601,43,0.008,74,0.343,83,0.915,84,0.83,85,0.105,88,0.005,89,0.005,108,0.969,116,1.571,119,2.021,123,2.191,129,3.679,132,3.171,212,1.429,259,3.979,327,3.514,328,2.177,329,2.413,330,2.413,331,2.232,332,3.803,333,3.761,343,6.756,346,3.171,347,2.413,348,2.177,363,5.482,379,4.666,396,2.284,503,2.936,520,5.278,550,3.541,570,4.263,612,4.45,962,4.855,995,4.666,1183,3.974,1439,3.087,1927,4.759,1936,6.108,1970,4.676,1973,4.513,1974,4.261,1982,5.6,1983,4.261,1987,4.676,1991,4.649,1993,4.263,2124,6.108,2185,3.387,2187,5.874,2201,5.493,2214,6.108,2232,4.649,2233,4.649,2234,4.649,2235,4.649,2236,6.339,2237,6.339,2238,4.649,2239,6.879,2240,6.879,2241,8.476,2242,5.6,2243,6.879,2244,6.879,2245,5.236,2246,5.236,2247,5.236,2248,5.236,2249,7.526,2250,4.649,2251,5.236,2252,5.236,2253,5.236,2254,4.649,2255,3.743]],["title/controllers/FilesS3Controller.html",[103,1.548,2256,3.613]],["body/controllers/FilesS3Controller.html",[0,0.229,3,0.092,4,0.084,5,0.13,7,0.322,8,1.097,10,1.256,12,0.885,19,1.843,24,0.828,31,1.461,36,0.314,38,0.564,42,0.571,43,0.008,44,0.737,51,0.47,66,1.043,74,0.337,76,1.063,85,0.092,88,0.005,89,0.005,103,2.718,105,1.582,108,0.846,109,2.294,116,1.434,117,1.518,119,2.106,123,1.455,126,1.867,133,2.43,138,1.485,139,2.538,144,1.549,149,0.896,150,0.527,158,1.162,159,2.856,195,1.947,204,1.231,228,0.814,247,3.888,264,1.854,278,2.817,287,4.064,295,3.059,301,3.135,302,3.21,306,2.526,320,3.464,355,3.21,361,3.877,396,2.38,397,3.558,406,5.917,410,2.955,425,3.098,427,6.367,429,3.658,440,5.11,539,3.597,589,3.25,634,3.966,636,4.424,645,2.05,864,2.443,937,3.305,1026,2.817,1200,3.597,1446,5.11,1678,3.888,1919,5.235,1973,4.895,1982,5.11,1987,5.293,2062,5.012,2067,4.424,2070,5.11,2091,4.994,2098,3.888,2139,5.687,2153,5.837,2160,3.719,2162,3.719,2164,4.056,2165,4.056,2167,4.056,2168,4.056,2169,6.367,2170,3.266,2171,6.855,2172,4.056,2176,6.588,2177,5.573,2183,3.719,2185,2.955,2186,5.837,2187,3.888,2189,5.573,2190,5.573,2192,6.367,2193,6.367,2197,4.056,2198,3.719,2256,6.142,2257,4.056,2258,6.277,2259,6.277,2260,6.277,2261,6.277,2262,6.277,2263,7.17,2264,5.573,2265,6.277,2266,7.17,2267,6.277,2268,6.855,2269,4.568,2270,4.568,2271,4.863]],["title/modules/FilesS3Module.html",[84,0.422,2236,3.403]],["body/modules/FilesS3Module.html",[0,0.25,3,0.1,4,0.092,5,0.127,7,0.299,8,1.162,23,3.246,43,0.008,44,0.512,55,2.826,74,0.364,84,0.709,85,0.1,88,0.005,89,0.005,105,2.595,108,0.922,116,1.519,119,1.954,126,1.609,133,2.575,156,0.958,175,2.835,186,1.351,212,1.034,228,0.887,264,2.7,278,2.985,295,2.636,297,2.766,301,2.176,306,2.753,327,2.969,328,2.07,329,2.294,330,2.294,331,2.122,332,3.497,333,3.687,346,3.066,347,2.294,348,2.07,353,4.512,354,4.121,355,2.766,363,4.847,396,2.208,397,3.066,415,4.052,499,3.22,503,2.304,507,6.511,508,2.662,515,4.052,883,5.049,942,3.083,1035,1.724,1123,4.61,1200,4.294,1324,3.083,1326,3.083,1346,5.049,1927,4.121,1970,4.294,1973,5.144,1976,3.376,1978,3.559,1987,4.583,2091,5.174,2118,5.049,2119,3.559,2129,3.778,2141,4.052,2157,5.416,2170,3.559,2175,6.326,2180,5.049,2181,4.052,2182,4.052,2185,3.22,2196,4.052,2208,4.052,2217,5.049,2218,5.416,2225,3.376,2226,3.559,2230,5.653,2236,6.508,2242,5.416,2256,6.326,2271,6.395,2272,4.42,2273,4.42,2274,4.42,2275,4.978,2276,6.509,2277,6.653,2278,5.907,2279,6.653,2280,5.907,2281,6.653,2282,4.052,2283,4.052,2284,4.052,2285,5.907,2286,4.052,2287,4.42,2288,4.42,2289,4.052,2290,4.052,2291,4.052,2292,4.978,2293,4.42,2294,4.42,2295,5.907,2296,4.42,2297,4.42,2298,4.42,2299,4.978,2300,4.978]],["title/controllers/FilesS3PresignedController.html",[103,1.548,2301,3.613]],["body/controllers/FilesS3PresignedController.html",[0,0.241,3,0.097,4,0.088,5,0.129,7,0.355,10,1.224,12,0.973,31,1.513,36,0.331,38,0.802,42,0.461,43,0.008,44,0.757,47,2.02,51,0.668,64,1.815,66,1.098,72,4.933,74,0.325,76,1.119,84,0.426,85,0.097,88,0.005,89,0.005,103,2.113,105,2.251,108,0.89,109,2.415,116,1.484,117,1.376,119,1.909,136,0.84,138,1.563,139,3.005,149,1.275,150,0.75,158,1.46,195,2.049,204,1.547,212,0.999,214,2.344,228,1.158,295,2.575,301,2.841,302,3.279,308,5.771,320,3.697,355,2.702,395,3.476,397,3.635,425,3.261,589,3.813,634,4.072,636,3.724,645,2.158,719,3.264,886,2.996,986,3.845,1035,2.853,1338,3.264,1416,5.291,1923,5.471,1973,5.002,1974,5.695,1976,4.408,1987,3.724,2062,4.026,2067,4.519,2089,4.994,2091,5.101,2098,4.026,2135,6.707,2137,5.638,2139,5.103,2151,6.42,2152,5.291,2153,5.291,2160,3.914,2162,3.914,2183,3.914,2185,3.11,2186,3.914,2187,2.978,2198,3.914,2218,5.291,2301,6.588,2302,4.269,2303,6.499,2304,6.912,2305,6.42,2306,6.499,2307,4.808,2308,6.499,2309,4.808,2310,6.499,2311,6.499,2312,5.771,2313,5.771,2314,4.808,2315,4.808,2316,6.499,2317,6.499,2318,6.499,2319,6.499,2320,4.269,2321,4.408,2322,4.808,2323,4.808,2324,4.808,2325,4.808,2326,4.808]],["title/modules/FilesS3PresignedModule.html",[84,0.422,2237,3.403]],["body/modules/FilesS3PresignedModule.html",[0,0.25,3,0.1,4,0.092,5,0.122,7,0.299,23,2.701,43,0.008,44,0.512,55,2.542,74,0.364,84,0.76,85,0.1,88,0.005,89,0.005,103,2.601,105,2.597,108,0.923,116,1.827,118,2.638,120,2.837,126,1.61,133,2.577,156,0.959,186,1.353,212,1.035,228,0.888,264,3.247,282,2.965,295,2.638,301,2.178,306,2.756,327,1.974,328,3.117,329,2.297,330,2.297,331,2.124,332,3.498,333,3.456,346,3.068,347,2.297,348,2.072,353,4.515,354,4.123,355,2.768,363,4.849,396,2.848,397,3.068,415,4.056,433,5.419,499,3.223,503,2.306,507,6.514,508,2.665,515,4.056,705,3.56,706,3.815,719,3.343,882,2.306,942,3.086,1035,1.726,1123,4.612,1200,4.296,1324,3.086,1326,3.086,1927,4.123,1970,4.296,1973,5.233,1974,5.314,1976,5.085,1978,3.562,1987,4.916,2089,3.379,2118,5.052,2119,3.562,2129,3.782,2170,3.562,2175,6.328,2180,5.052,2181,4.056,2182,4.056,2185,3.223,2196,4.056,2208,4.056,2225,3.379,2226,3.562,2230,5.085,2237,6.509,2242,5.419,2276,5.052,2279,6.656,2282,4.056,2283,4.056,2284,4.056,2285,5.911,2286,4.056,2287,4.424,2288,4.424,2289,4.056,2290,4.056,2291,4.056,2293,4.424,2294,4.424,2295,5.911,2296,4.424,2297,4.424,2298,4.424,2301,6.328,2304,5.419,2305,6.984,2321,6.342,2327,4.424,2328,4.424,2329,4.424,2330,4.983,2331,6.657,2332,6.657,2333,5.911,2334,6.657,2335,4.983,2336,4.424]],["title/injectables/FilesS3PresignedService.html",[112,1.398,2321,3.229]],["body/injectables/FilesS3PresignedService.html",[0,0.205,3,0.082,4,0.075,5,0.129,7,0.331,10,1.206,12,0.717,15,2.303,24,0.671,26,1.548,36,0.282,38,0.834,40,1.302,42,0.487,43,0.008,44,0.757,47,1.885,51,0.757,55,2.737,64,1.666,72,4.411,74,0.334,84,0.362,85,0.082,88,0.004,89,0.004,108,0.758,112,1.707,114,1.789,116,1.327,117,1.557,119,1.707,126,1.405,133,2.25,137,3.295,138,1.33,139,2.858,140,2.013,144,1.387,149,1.326,150,0.78,155,2.303,156,1.554,158,1.362,159,2.722,189,1.584,204,1.326,205,2.918,209,1.513,212,1.818,214,4.049,216,3.5,217,1.66,228,1.035,232,1.66,287,3.695,295,2.303,301,1.789,302,3.059,318,2.775,320,3.302,508,2.188,548,3.33,645,1.836,719,2.918,833,3.331,886,2.679,978,2.925,986,3.587,1035,3.068,1123,4.593,1200,3.33,1324,2.534,1326,2.534,1338,2.918,1798,3.458,1923,5.47,1931,2.775,1973,4.947,1974,5.747,1976,4.991,1978,2.925,1986,3.942,1987,3.33,2071,2.434,2080,2.775,2089,5.271,2091,4.76,2094,6.001,2098,4.557,2117,5.16,2118,5.584,2119,2.925,2120,3.633,2121,3.331,2122,3.331,2129,3.105,2132,5.99,2135,6.573,2136,6.001,2137,5.26,2140,4.411,2141,4.731,2145,5.16,2151,6.573,2152,4.731,2157,4.731,2219,3.105,2221,4.731,2224,5.99,2227,4.731,2228,3.331,2230,5.476,2282,3.331,2283,3.331,2284,3.331,2286,3.331,2289,3.331,2290,3.331,2291,3.331,2304,6.573,2305,6.573,2312,5.16,2313,5.16,2320,3.633,2321,5.271,2337,3.633,2338,5.811,2339,5.811,2340,4.091,2341,5.811,2342,5.811,2343,5.811,2344,4.091,2345,5.811,2346,6.758,2347,5.811,2348,4.091,2349,4.091,2350,4.091,2351,4.091,2352,4.091,2353,5.811,2354,4.091,2355,4.091,2356,4.731,2357,4.091,2358,5.811,2359,4.091,2360,5.811,2361,5.811,2362,4.091]],["title/injectables/FilesS3Service.html",[112,1.398,2271,3.229]],["body/injectables/FilesS3Service.html",[0,0.394,3,0.11,4,0.101,5,0.129,7,0.373,12,0.968,19,2.078,26,2.677,31,1.273,36,0.376,38,0.675,40,1.225,42,0.342,43,0.008,51,0.728,74,0.279,85,0.11,88,0.005,89,0.005,108,1.012,112,2.437,114,2.39,116,1.616,117,1.819,119,2.078,139,2.777,140,2.717,144,2.913,149,1.388,150,0.631,156,1.052,158,1.591,159,3.314,189,2.117,204,1.539,205,4.167,216,2.832,228,1.398,264,2.219,275,4.055,287,4.68,295,3.288,301,3.627,304,3.024,320,2.454,396,2.349,410,5.075,548,3.133,864,2.924,912,4.383,986,3.825,1035,1.894,1200,4.055,1338,2.746,1428,6.297,1439,2.454,1798,3.253,1973,4.339,2062,5.684,2071,3.253,2080,3.709,2083,4.451,2084,6.283,2139,5.453,2206,6.283,2217,5.371,2221,5.761,2224,6.754,2227,4.451,2228,4.451,2268,7.63,2271,5.828,2363,4.855,2364,5.371,2365,7.367,2366,7.077,2367,7.077,2368,7.846,2369,5.468,2370,5.468,2371,5.468]],["title/injectables/FilesService.html",[112,1.398,2187,2.948]],["body/injectables/FilesService.html",[0,0.429,3,0.133,4,0.122,5,0.127,7,0.358,8,1.392,43,0.007,74,0.26,83,1.155,84,0.585,85,0.133,88,0.006,89,0.006,108,1.224,112,2.608,114,2.889,117,1.686,118,3.157,119,2.34,120,3.395,123,2.537,126,1.927,259,4.126,264,3.603,297,3.312,357,4.934,362,6.046,379,5.403,396,2.947,431,3.672,1439,3.575,2098,4.934,2139,4.934,2187,5.717,2211,7.074,2364,6.046,2372,5.868,2373,7.074,2374,7.074,2375,7.966,2376,7.966,2377,7.966]],["title/classes/FilterCountryDto.html",[0,0.239,2378,3.403]],["body/classes/FilterCountryDto.html",[0,0.449,2,0.971,3,0.126,4,0.115,5,0.084,32,2.215,33,2.736,42,0.571,43,0.008,44,0.896,55,2.121,64,1.899,66,1.429,74,0.343,75,3.559,76,1.457,80,4.193,81,4.015,82,3.388,85,0.168,88,0.006,89,0.006,186,2.092,228,1.115,380,2.955,547,3.586,620,2.454,914,3.031,944,3.142,1007,3.723,1379,4.244,1381,4.473,1385,3.461,1387,3.461,1389,2.884,1405,3.723,1560,5.128,1779,4.244,2378,6.23,2379,4.749,2380,5.324,2381,4.244,2382,5.663,2383,5.969,2384,5.094,2385,4.473,2386,6.273,2387,5.094,2388,5.226,2389,5.094]],["title/classes/FilterQueryDto.html",[0,0.239,1400,3.229]],["body/classes/FilterQueryDto.html",[0,0.427,2,0.294,3,0.038,4,0.035,5,0.025,7,0.332,10,0.64,12,0.805,13,1.573,18,1.104,22,0.982,24,0.368,28,0.851,31,1.126,32,1.712,33,1.804,36,0.284,40,0.425,42,0.578,43,0.008,44,0.933,47,2.216,51,0.424,55,2.845,64,2.153,66,1.603,67,2.244,74,0.328,75,3.929,76,1.126,79,3.49,80,2.072,81,3.705,82,3.286,84,0.282,85,0.168,88,0.002,89,0.002,108,0.351,136,0.943,138,1.901,140,0.657,149,0.809,150,0.935,157,2.725,169,2.569,173,2.069,175,1.359,186,1.688,199,1.511,212,0.662,217,2.19,228,1.21,276,3.49,303,2.506,380,1.712,385,0.924,428,1.651,431,0.874,446,2.42,489,2.669,539,1.086,547,4.398,550,2.23,607,0.734,620,1.862,672,4.487,732,1.359,860,2.422,876,1.355,882,1.104,899,2.163,904,1.763,914,2.659,921,1.897,922,1.975,923,1.763,924,1.975,925,1.511,935,4.038,936,2.799,938,1.226,939,4.666,940,3.858,944,3.41,962,1.128,1007,1.897,1008,2.879,1035,1.104,1061,1.635,1141,1.174,1145,2.062,1146,1.975,1197,1.226,1385,4.245,1387,3.881,1389,3.008,1396,4.437,1399,3.132,1400,6.018,1403,3.459,1404,1.439,1405,4.395,1406,1.439,1436,2.163,1438,1.128,1560,3.74,1794,3.634,1867,3.282,1919,2.062,1931,2.163,2142,3.359,2380,4.485,2381,2.163,2382,5.01,2388,3.66,2390,1.355,2391,5.325,2392,1.896,2393,1.896,2394,1.896,2395,1.896,2396,1.896,2397,1.896,2398,2.596,2399,1.543,2400,1.355,2401,1.543,2402,4.444,2403,3.359,2404,4.444,2405,3.359,2406,1.543,2407,3.672,2408,1.439,2409,2.799,2410,2.279,2411,2.42,2412,2.279,2413,1.543,2414,1.543,2415,1.543,2416,3.939,2417,2.596,2418,1.355,2419,2.42,2420,2.596,2421,2.596,2422,1.543,2423,2.596,2424,2.42,2425,5.016,2426,1.543,2427,2.596,2428,2.596,2429,1.543,2430,1.543,2431,1.543,2432,1.543,2433,1.543,2434,2.596,2435,2.799,2436,1.543,2437,6.013,2438,1.543,2439,1.543,2440,1.543,2441,2.596,2442,1.543,2443,1.543,2444,1.543,2445,1.543,2446,2.596,2447,2.596,2448,1.543,2449,1.543,2450,2.279,2451,1.543,2452,2.596,2453,1.543,2454,3.939,2455,1.543,2456,1.543,2457,1.543,2458,1.543,2459,2.596,2460,2.596,2461,2.596,2462,2.596,2463,3.359,2464,2.596,2465,2.596,2466,1.439,2467,3.858,2468,4.393,2469,4.393,2470,2.596,2471,2.596,2472,1.543,2473,1.543,2474,1.543,2475,1.543]],["title/modules/HelperModule.html",[84,0.422,499,3.079]],["body/modules/HelperModule.html",[0,0.403,3,0.101,4,0.093,5,0.068,7,0.301,43,0.008,47,1.93,74,0.369,84,0.836,85,0.161,88,0.005,89,0.005,105,2.321,108,1.241,116,1.531,130,4.526,146,4.87,147,4.619,212,1.045,274,6.151,297,3.34,327,3.315,328,2.093,329,2.32,330,2.32,331,2.145,332,4.021,333,4.163,346,3.089,347,2.32,348,2.093,355,2.787,363,5.412,397,3.089,422,3.707,499,6.147,706,4.93,821,5.439,829,3.598,830,3.598,882,2.321,925,3.176,1123,4.443,1417,4.546,2123,5.951,2213,5.449,2250,5.951,2255,4.791,2476,4.469,2477,4.469,2478,4.469,2479,4.469,2480,5.951,2481,6.702,2482,6.702,2483,6.702,2484,5.951,2485,6.702,2486,9.197,2487,5.951,2488,3.988,2489,4.469,2490,4.469,2491,5.033,2492,4.469,2493,6.702,2494,5.033,2495,7.535,2496,5.033,2497,7.535,2498,5.033]],["title/controllers/HomeController.html",[103,1.548,2499,3.613]],["body/controllers/HomeController.html",[0,0.446,3,0.122,4,0.112,5,0.111,7,0.34,8,1.322,12,1.017,14,1.415,23,3.345,30,2.362,31,1.415,36,0.418,43,0.008,51,0.625,74,0.325,76,1.415,83,1.062,84,0.539,85,0.122,88,0.006,89,0.006,103,2.804,105,2.106,108,1.126,109,3.053,117,1.602,123,2.411,125,4.723,126,2.146,156,1.17,158,1.597,204,1.192,228,1.083,264,3.345,278,2.728,295,3.418,297,3.762,352,5.745,355,3.587,382,7.224,395,4.408,396,2.513,397,4.17,406,5.134,501,6.162,611,4.048,645,2.728,705,4.048,1026,3.397,1338,4.332,1797,5.745,2209,6.162,2499,6.964,2500,5.399,2501,6.019,2502,7.66,2503,6.08,2504,5.399,2505,6.08,2506,4.347,2507,6.08]],["title/modules/HomeModule.html",[84,0.422,344,3.403]],["body/modules/HomeModule.html",[0,0.448,3,0.124,4,0.114,5,0.112,7,0.344,8,1.336,23,3.369,43,0.008,74,0.327,83,1.079,84,0.805,85,0.124,88,0.006,89,0.006,103,2.699,105,2.648,108,1.144,123,2.763,125,4.758,126,2.197,264,3.369,295,3.03,297,3.607,301,3.343,327,2.448,328,2.569,329,2.848,330,2.848,331,2.634,332,3.63,333,2.848,344,6.748,346,3.524,347,2.848,348,2.569,352,6.584,362,5.803,363,3.997,382,7.573,395,4.089,396,2.88,397,2.848,611,3.304,1026,2.773,2209,5.03,2276,5.803,2499,6.301,2501,6.161,2504,5.486,2508,5.486,2509,5.486,2510,6.179,2511,7.646,2512,6.179]],["title/injectables/HomeService.html",[112,1.398,2501,3.229]],["body/injectables/HomeService.html",[0,0.441,3,0.118,4,0.108,5,0.109,7,0.403,8,1.292,12,1.083,14,1.721,36,0.403,38,0.723,42,0.367,43,0.008,51,0.76,55,2.886,74,0.319,83,1.023,84,0.519,85,0.118,88,0.006,89,0.006,107,5.272,108,1.084,112,2.172,114,2.56,116,1.689,117,1.802,120,3.628,123,2.355,133,2.862,144,1.986,149,1.149,150,0.983,156,1.423,158,1.576,171,4.399,204,1.149,228,1.043,264,3,297,3.828,361,3.713,398,6.565,503,3.242,508,3.132,645,2.628,883,5.612,986,3.605,1021,2.797,1123,5.177,1240,4.187,1338,4.501,1875,5.612,1878,5.2,2219,4.445,2225,3.972,2226,4.187,2229,5.2,2230,5.773,2501,6.245,2502,7.557,2506,5.286,2513,5.2,2514,5.857,2515,5.857,2516,5.857,2517,5.857,2518,5.857]],["title/classes/HttpErrorFilter.html",[0,0.239,366,3.613]],["body/classes/HttpErrorFilter.html",[0,0.374,2,0.763,3,0.099,4,0.09,5,0.066,7,0.335,12,0.814,29,1.904,36,0.338,38,0.607,40,1.915,42,0.308,43,0.008,47,1.908,51,0.506,74,0.337,84,0.436,85,0.149,88,0.005,89,0.005,108,0.911,117,1.397,136,1.391,149,0.965,150,0.568,156,1.433,158,0.911,186,1.335,188,4.299,189,1.904,204,1.294,209,3.282,212,1.903,217,3.022,227,4.119,241,4.122,274,4.718,275,5.003,276,3.983,277,4.939,279,3.516,280,4.431,281,6.11,290,4.476,291,5.085,292,5.631,294,3.336,295,2.615,296,4.476,301,3.629,302,2.744,304,2.72,311,3.336,312,3.336,313,3.336,314,3.516,316,5.008,317,3.733,319,5.652,320,2.207,321,5.69,323,6.613,324,5.324,325,4.004,332,2.885,355,3.452,364,5.86,366,6.486,390,4.476,391,5.86,414,3.516,479,4.476,548,3.782,554,2.207,555,2.207,574,2.398,578,3.336,580,6.063,581,5.372,583,5.372,585,4.367,587,6.063,588,4.367,589,2.547,590,4.367,591,4.367,592,4.367,593,4.367,594,4.367,595,4.367,597,5.86,598,4.367,864,4.439,925,3.127,986,3.218,1085,4.718,1103,4.476,1338,3.314,1439,2.961,1798,2.926,1923,3.926,2519,5.86,2520,4.367,2521,6.599,2522,6.599,2523,4.918,2524,4.918,2525,4.918,2526,4.918,2527,4.918,2528,4.004,2529,4.918,2530,4.367,2531,4.367,2532,4.918,2533,4.918]],["title/classes/HttpExceptionFilter.html",[0,0.239,2534,3.875]],["body/classes/HttpExceptionFilter.html",[0,0.374,2,0.919,3,0.119,4,0.109,5,0.08,7,0.335,29,3.308,36,0.407,38,0.73,40,1.915,42,0.371,43,0.008,51,0.609,74,0.293,85,0.149,88,0.006,89,0.006,108,1.096,117,1.576,149,1.161,150,0.683,156,1.139,158,1.096,188,4.724,204,1.46,209,2.754,212,1.774,239,3.392,275,5.287,276,4.708,277,4.845,278,3.341,279,5.322,280,4.845,281,6.109,290,5.049,291,5.347,292,5.972,294,5.049,295,2.95,297,3.095,301,3.929,302,3.836,303,3.855,304,3.274,306,3.274,310,5.256,311,4.015,312,4.015,313,4.015,314,4.232,316,4.493,318,4.015,319,6.18,320,3.654,321,4.232,355,3.737,396,2.471,431,3.431,574,3.63,909,5.322,1794,3.066,2116,5.65,2534,6.956,2535,6.61,2536,4.819,2537,7.444,2538,5.92,2539,5.92,2540,5.92,2541,4.819]],["title/interfaces/IAppConfig.html",[1110,1.58,1149,3.403]],["body/interfaces/IAppConfig.html",[3,0.118,4,0.108,5,0.079,7,0.265,14,1.726,24,0.856,36,0.405,38,1.052,42,0.593,43,0.008,44,0.996,60,3.841,64,2.102,85,0.149,88,0.006,89,0.006,107,4.594,150,1.036,297,3.969,361,3.724,503,2.569,882,2.569,1110,2.83,1149,6.648,1216,6.415,1232,6.471,1235,6.471,1237,6.471,1240,6.095,1794,4.647,1927,4.594,2061,4.102,2113,6.585,2114,7.57,2542,2.955,2543,5.225,2544,7.416,2545,6.038,2546,7.416,2547,7.416]],["title/interfaces/IAwsConfig.html",[1110,1.58,1151,3.403]],["body/interfaces/IAwsConfig.html",[3,0.133,4,0.122,5,0.089,24,0.923,36,0.457,42,0.594,43,0.007,44,1.012,85,0.133,88,0.006,89,0.006,882,2.301,1110,2.206,1151,5.714,1244,7.241,1246,7.241,1248,7.241,1250,7.241,1252,7.241,1254,7.241,1256,7.241,1258,7.241,1260,7.241,2061,3.675,2542,3.337,2548,5.9]],["title/interfaces/IFileConfig.html",[1110,1.58,1153,3.403]],["body/interfaces/IFileConfig.html",[3,0.132,4,0.121,5,0.089,24,0.919,36,0.454,38,1.162,42,0.578,43,0.007,44,0.999,64,2.188,74,0.26,85,0.132,88,0.006,89,0.006,882,2.286,1110,2.191,1147,6.019,1153,5.691,1322,6.344,1324,5.497,1326,5.497,1328,6.735,1330,6.735,1332,6.735,1866,4.476,1986,4.476,1989,5.373,2061,3.65,2466,5.009,2542,3.314,2549,5.86,2550,6.6,2551,7.96,2552,6.6,2553,6.6]],["title/interfaces/IJWTConfig.html",[1110,1.58,1155,3.403]],["body/interfaces/IJWTConfig.html",[3,0.138,4,0.127,5,0.093,24,0.943,36,0.475,42,0.584,43,0.007,44,0.993,64,2.298,85,0.138,88,0.006,89,0.006,882,2.388,1110,2.289,1155,5.841,1270,6.833,1272,7.33,1274,7.33,1276,7.33,1278,7.33,1280,7.33,2061,3.813,2542,3.462,2554,6.122]],["title/interfaces/INodeEmailerConfig.html",[1110,1.58,1157,3.403]],["body/interfaces/INodeEmailerConfig.html",[3,0.138,4,0.127,5,0.093,24,0.942,36,0.474,42,0.583,43,0.007,44,1.001,64,2.145,85,0.138,88,0.006,89,0.006,882,2.385,1110,2.286,1157,5.836,1292,7.327,1294,7.327,1296,7.327,1298,7.327,1300,7.327,1302,7.327,2061,3.808,2542,3.458,2555,6.113,2556,6.113]],["title/interfaces/IPageMetaDtoParameters.html",[1110,1.58,2557,3.613]],["body/interfaces/IPageMetaDtoParameters.html",[0,0.297,3,0.084,4,0.077,5,0.056,10,0.65,14,0.975,15,1.66,18,2.371,24,0.682,36,0.54,38,0.729,42,0.562,43,0.008,47,2.393,64,2.365,66,2.052,74,0.233,76,0.975,85,0.119,88,0.005,89,0.005,116,0.957,129,2.24,138,2.822,140,1.451,144,1.42,149,0.821,155,1.66,157,1.334,169,3.285,173,2.775,176,1.785,204,0.821,212,1.628,232,3.182,259,2.169,286,2.24,287,2.967,348,1.741,353,2.841,550,3.427,607,1.621,611,2.24,640,1.831,693,4.24,858,3.338,902,1.985,948,2.4,1090,4.424,1103,5.671,1110,1.39,1338,2.103,1385,5.125,1387,2.317,1389,3.614,1481,3.923,1586,4.428,1986,4.008,2213,2.841,2356,3.41,2380,5.236,2418,2.994,2435,5.518,2450,4.894,2542,2.103,2557,5.643,2558,3.41,2559,7.224,2560,6.589,2561,4.643,2562,3.719,2563,3.41,2564,3.719,2565,5.573,2566,7.068,2567,6.207,2568,6.807,2569,7.164,2570,4.643,2571,6.807,2572,6.624,2573,6.383,2574,4.81,2575,6.383,2576,5.573,2577,6.951,2578,4.643,2579,6.079,2580,6.383,2581,3.41,2582,6.079,2583,3.719,2584,3.719,2585,2.994,2586,3.719,2587,3.719,2588,5.246,2589,3.719,2590,3.719,2591,3.719,2592,3.719,2593,3.719,2594,3.719,2595,3.719,2596,3.719,2597,3.719,2598,3.719,2599,3.719,2600,3.719,2601,3.719,2602,3.41,2603,3.719,2604,3.719,2605,3.719,2606,3.719,2607,3.719,2608,3.719,2609,3.719,2610,3.719,2611,3.719,2612,3.719,2613,3.719]],["title/interfaces/IPaginationFieldConfig.html",[197,2.546,1110,1.58]],["body/interfaces/IPaginationFieldConfig.html",[3,0.127,4,0.117,5,0.085,7,0.285,24,0.897,26,2.938,36,0.436,42,0.548,43,0.008,44,0.94,85,0.127,88,0.006,89,0.006,116,1.447,136,1.107,158,1.692,173,3.098,197,4.153,204,1.243,248,3.579,249,4.794,259,4.022,358,6.322,550,3.87,709,3.177,719,3.183,734,3.003,842,3.579,843,5.015,844,3.491,860,4.194,871,6.643,872,5.944,935,4.349,996,4.81,1110,2.787,2542,3.183,2563,5.159,2614,5.627,2615,5.627,2616,5.627,2617,6.338,2618,5.627,2619,7.456]],["title/interfaces/IPostgreSQLConfig.html",[1110,1.58,1160,3.403]],["body/interfaces/IPostgreSQLConfig.html",[3,0.135,4,0.124,5,0.09,24,0.929,36,0.463,42,0.591,43,0.007,44,1.01,85,0.135,88,0.006,89,0.006,882,2.329,1110,2.233,1160,5.756,1898,7.93,1900,7.93,1901,7.93,1902,7.93,1903,7.93,2061,3.72,2542,3.378,2620,5.972,2621,8.931,2622,8.931,2623,8.931]],["title/interfaces/ISMSConfig.html",[1110,1.58,1164,3.403]],["body/interfaces/ISMSConfig.html",[3,0.144,4,0.132,5,0.096,24,0.965,36,0.493,42,0.554,43,0.007,44,0.987,85,0.144,88,0.006,89,0.006,882,2.481,1110,2.378,1164,5.975,1305,7.421,1307,7.421,1309,7.421,2061,3.962,2542,3.598,2624,6.361]],["title/interfaces/ISendGridConfig.html",[1110,1.58,1162,3.403]],["body/interfaces/ISendGridConfig.html",[3,0.142,4,0.13,5,0.095,24,0.957,36,0.487,42,0.568,43,0.007,44,0.996,85,0.142,88,0.006,89,0.006,882,2.449,1110,2.348,1162,5.929,1283,7.39,1285,7.39,1287,7.39,1289,7.39,2061,3.911,2542,3.552,2625,6.28]],["title/interfaces/IUploadFileConfig.html",[1110,1.58,1166,3.403]],["body/interfaces/IUploadFileConfig.html",[3,0.14,4,0.128,5,0.094,24,0.949,36,0.48,42,0.577,43,0.007,44,0.995,64,2.157,85,0.14,88,0.006,89,0.006,882,2.415,1110,2.315,1166,5.88,1312,7.357,1314,7.357,1316,7.357,1318,7.357,1320,7.357,2061,3.856,2542,3.502,2626,6.191,2627,6.191]],["title/classes/PaginationMetaDto.html",[0,0.239,2561,3.229]],["body/classes/PaginationMetaDto.html",[0,0.31,2,0.543,3,0.07,4,0.064,5,0.047,7,0.157,10,0.805,14,1.208,15,1.387,18,2.142,24,0.599,31,1.933,36,0.545,38,0.432,42,0.572,43,0.008,47,2.448,51,0.869,64,2.377,66,2.037,74,0.204,76,0.815,85,0.104,88,0.004,89,0.004,116,1.185,129,2.775,138,3.049,140,1.212,144,1.759,149,1.018,150,0.404,155,2.056,157,1.115,169,2.587,173,2.94,176,2.212,204,0.686,212,1.517,232,3.104,259,2.687,286,2.775,287,3.105,348,1.455,353,3.519,550,3.526,607,1.355,611,2.775,620,1.115,640,1.53,693,4.236,858,3.334,902,2.459,948,2.006,1090,4.345,1103,5.732,1110,1.162,1338,2.606,1385,5.174,1387,1.936,1389,3.649,1481,3.919,1586,4.424,1986,4.638,2213,3.519,2356,4.224,2380,5.028,2418,3.71,2435,5.633,2450,5.469,2557,5.543,2558,2.849,2559,5.49,2560,6.303,2561,5.188,2562,4.607,2563,4.224,2564,4.607,2565,5.945,2566,7.065,2567,6.325,2568,6.88,2569,7.138,2570,4.953,2571,6.88,2572,6.761,2573,6.619,2574,5.034,2575,6.619,2576,5.945,2577,7.065,2578,4.638,2579,6.792,2580,6.227,2581,4.224,2582,6.484,2583,4.607,2584,4.607,2585,2.502,2586,3.108,2587,3.108,2588,4.607,2589,3.108,2590,3.108,2591,3.108,2592,3.108,2593,3.108,2594,3.108,2595,3.108,2596,3.108,2597,3.108,2598,3.108,2599,3.108,2600,3.108,2601,3.108,2602,2.849,2603,3.108,2604,3.108,2605,3.108,2606,3.108,2607,3.108,2608,3.108,2609,3.108,2610,3.108,2611,3.108,2612,3.108,2613,3.108,2628,3.5,2629,5.189,2630,7.375,2631,3.5,2632,3.5,2633,3.5,2634,3.5,2635,3.5,2636,3.5,2637,3.5,2638,3.5]],["title/classes/PaginationQueryDto.html",[0,0.239,169,1.801]],["body/classes/PaginationQueryDto.html",[0,0.424,2,0.283,3,0.037,4,0.034,5,0.025,7,0.341,10,0.623,12,0.792,13,1.534,18,1.389,22,0.944,24,0.356,28,0.818,31,1.334,32,1.67,33,1.754,36,0.276,38,0.792,40,0.409,42,0.58,43,0.008,44,0.931,47,2.223,51,0.543,55,2.822,64,2.183,66,1.666,67,2.779,74,0.325,75,3.914,76,1.099,79,3.432,80,2.015,81,3.673,82,3.255,84,0.273,85,0.167,88,0.002,89,0.002,108,0.338,136,1.066,138,2.371,140,0.632,149,0.787,150,0.926,157,2.722,169,2.616,173,2.581,175,0.777,186,1.815,199,1.901,212,0.641,217,2.142,228,1.191,276,3.064,303,2.968,380,1.67,385,0.889,428,1.598,431,0.841,446,2.342,489,2.595,539,1.045,547,4.597,550,2.641,607,1.195,620,1.825,672,4.515,732,1.315,860,2.368,876,1.304,882,0.632,899,2.093,904,1.707,914,2.578,921,1.836,922,1.911,923,1.707,924,1.911,925,1.462,935,3.777,936,2.721,938,1.18,939,4.588,940,3.773,944,3.357,962,1.085,1007,1.836,1008,2.808,1035,1.069,1061,1.59,1141,1.129,1145,1.996,1146,1.911,1197,1.18,1385,4.567,1387,4.12,1389,3.081,1396,4.349,1399,3.044,1400,5.985,1403,4.097,1404,1.384,1405,4.656,1406,1.384,1436,1.237,1438,1.085,1560,3.677,1794,3.581,1867,3.58,1919,1.996,1931,2.721,2380,4.432,2381,2.093,2382,4.946,2388,3.58,2390,1.304,2391,4.632,2398,2.512,2399,1.485,2400,1.304,2401,1.485,2402,4.364,2403,3.266,2404,4.364,2405,3.266,2406,1.485,2407,4.349,2408,1.384,2409,3.201,2410,2.206,2411,3.582,2412,3.374,2413,2.512,2414,1.485,2415,1.485,2416,4.665,2417,2.512,2418,2.206,2419,3.044,2420,2.512,2421,2.512,2422,1.485,2423,2.512,2424,3.044,2425,5.087,2426,1.485,2427,2.512,2428,2.512,2429,1.485,2430,1.485,2431,1.485,2432,1.485,2433,1.485,2434,2.512,2435,2.721,2436,1.485,2437,5.937,2438,1.485,2439,1.485,2440,1.485,2441,2.512,2442,1.485,2443,1.485,2444,1.485,2445,1.485,2446,2.512,2447,2.512,2448,1.485,2449,1.485,2450,2.206,2451,1.485,2452,2.512,2453,1.485,2454,3.842,2455,1.485,2456,1.485,2457,1.485,2458,1.485,2459,2.512,2460,2.512,2461,2.512,2462,2.512,2463,3.266,2464,2.512,2465,2.512,2466,1.384,2467,3.773,2468,4.297,2469,4.297,2470,2.512,2471,2.512,2472,1.485,2473,1.485,2474,1.485,2475,1.485,2639,3.086,2640,1.824,2641,2.74,2642,2.74,2643,1.824,2644,4.011,2645,1.824,2646,1.824,2647,1.824,2648,1.824,2649,1.824,2650,1.824,2651,1.824,2652,1.824]],["title/classes/PaginationResponseDto.html",[0,0.239,193,2.029]],["body/classes/PaginationResponseDto.html",[0,0.445,2,0.809,3,0.105,4,0.096,5,0.07,7,0.345,10,1.435,13,2.648,24,0.792,28,2.34,36,0.359,38,1.005,42,0.601,43,0.008,47,1.757,51,0.788,55,1.768,66,1.751,74,0.302,75,2.924,76,1.214,85,0.164,88,0.005,89,0.005,108,0.965,136,1.199,138,2.23,150,0.602,155,2.066,158,0.965,173,3.313,176,3.607,193,3.607,204,1.023,228,0.929,232,2.116,287,3.851,302,3.613,550,3.534,611,3.669,672,2.788,693,3.229,858,2.542,860,2.34,914,1.695,917,5.621,923,4.241,935,4.219,1008,5.271,1385,4.241,1389,2.403,1481,2.988,1586,3.373,1794,4.5,2069,3.536,2213,5.2,2264,6.808,2380,4.562,2409,3.536,2412,6.051,2560,3.957,2561,6.008,2565,4.245,2566,4.245,2567,3.728,2568,4.245,2569,4.245,2570,4.653,2571,4.245,2572,4.245,2573,4.245,2575,4.245,2576,4.245,2577,4.245,2578,3.536,2653,6.632,2654,7.515,2655,5.214,2656,5.214,2657,5.214,2658,4.63,2659,6.86,2660,6.091,2661,6.091,2662,4.63,2663,4.63,2664,5.214,2665,5.585,2666,6.86,2667,5.214,2668,5.214,2669,5.214]],["title/injectables/PaginationService.html",[112,1.398,146,2.465]],["body/injectables/PaginationService.html",[0,0.234,3,0.061,4,0.056,5,0.041,7,0.209,10,1.305,26,1.762,36,0.209,38,0.575,42,0.355,43,0.008,44,0.852,47,1.452,51,0.479,66,1.567,74,0.327,85,0.093,88,0.004,89,0.004,108,0.862,112,1.868,114,1.326,116,1.064,117,0.986,128,1.579,130,3.432,135,1.723,136,1.265,138,1.514,139,2.251,144,1.029,145,2.694,146,3.751,149,1.346,150,0.538,151,2.765,156,1.224,158,0.562,159,2.097,167,2.037,169,3.083,173,3.146,174,4.807,176,2.711,193,1.985,195,1.985,199,1.438,212,1.96,214,3.678,228,1.422,232,2.581,250,1.879,254,3.933,259,2.412,260,3.249,261,4.151,264,1.89,278,2.09,287,2.339,422,2.576,547,4.151,571,4.136,620,2.026,639,2.207,640,2.037,645,2.09,709,2.407,842,2.925,843,3.249,844,3.497,864,3.402,925,2.207,942,3.512,962,2.772,1008,1.805,1021,2.407,1090,1.805,1385,4.415,1387,4.916,1389,2.147,1405,3.374,1425,2.303,1439,2.09,1451,7.36,1643,4.616,1644,7.008,1645,3.792,1648,3.792,1649,6.14,1797,3.535,1815,2.47,2217,3.535,2365,4.136,2385,2.169,2409,4.314,2410,5.825,2412,4.548,2435,5.279,2492,2.694,2506,3.33,2560,3.535,2561,4.314,2580,2.47,2654,5.648,2658,4.136,2670,2.694,2671,4.658,2672,4.658,2673,4.658,2674,4.658,2675,3.535,2676,4.658,2677,4.658,2678,6.361,2679,3.034,2680,3.034,2681,3.034,2682,7.543,2683,7.244,2684,5.67,2685,6.863,2686,6.361,2687,5.67,2688,4.658,2689,4.658,2690,4.658,2691,4.658,2692,3.034,2693,7.543,2694,4.136,2695,7.784,2696,4.136,2697,5.648,2698,4.658,2699,4.136,2700,5.648,2701,4.658,2702,4.136,2703,6.361,2704,4.136,2705,5.67,2706,6.863,2707,3.034,2708,4.658,2709,3.034,2710,3.034,2711,4.658,2712,4.658,2713,3.034,2714,3.034,2715,3.034,2716,2.694,2717,3.034,2718,3.034]],["title/classes/PrismaClientExceptionFilter.html",[0,0.239,2719,3.613]],["body/classes/PrismaClientExceptionFilter.html",[0,0.334,2,0.773,3,0.1,4,0.092,5,0.067,7,0.299,26,1.885,29,3.097,36,0.343,38,0.615,40,2.04,42,0.417,43,0.008,51,0.512,57,2.124,67,2.768,74,0.315,85,0.134,88,0.005,89,0.005,108,0.923,117,1.409,149,0.977,150,0.575,151,4.394,156,0.959,157,2.12,158,0.923,187,2.768,189,1.929,204,1.306,209,3.334,212,1.907,217,3.695,219,2.855,234,4.46,239,2.855,245,2.965,259,4.144,275,5.019,276,4.279,277,4.46,278,2.987,279,4.759,290,5.085,291,5.295,292,5.819,294,4.515,295,2.638,301,3.498,302,3.747,303,3.448,304,2.756,305,3.379,306,2.756,311,4.515,312,4.515,313,4.515,317,3.782,318,5.655,319,3.782,325,4.056,357,4.123,396,2.21,489,4.306,548,3.815,574,3.655,607,2.577,613,4.123,909,4.759,914,1.62,1346,6.648,1518,4.056,1794,2.58,1803,3.682,2058,3.448,2116,5.052,2419,3.782,2528,5.419,2536,4.056,2541,6.514,2719,6.073,2720,5.911,2721,6.657,2722,7.497,2723,7.105,2724,4.983,2725,7.497,2726,3.782,2727,4.424,2728,4.983,2729,4.983,2730,4.983,2731,4.424,2732,7.105,2733,4.424,2734,5.911,2735,6.656,2736,8.338,2737,4.983,2738,5.911,2739,4.983,2740,4.983,2741,4.983,2742,6.657,2743,5.911,2744,6.657,2745,4.983,2746,4.983]],["title/injectables/PrismaService.html",[112,1.398,130,2.256]],["body/injectables/PrismaService.html",[0,0.358,3,0.077,4,0.07,5,0.051,7,0.341,10,1.427,12,1.004,14,1.289,36,0.263,38,1.048,40,1.241,42,0.408,43,0.008,44,0.857,51,0.812,55,1.297,66,0.874,67,1.59,74,0.321,84,0.632,85,0.111,88,0.004,89,0.004,108,0.708,112,1.626,114,1.672,116,1.265,117,1.172,118,2.194,119,2.096,120,2.36,128,2.995,130,4.026,134,4.419,136,1.581,138,1.244,139,3.222,144,1.297,149,1.277,150,0.751,151,4.307,155,2.194,158,1.597,159,3.402,167,3.772,186,2.143,187,2.302,204,1.485,211,3.946,212,1.572,214,3.479,220,1.63,228,1.406,241,2.868,248,3.364,264,2.895,277,2.276,280,3.873,286,2.961,295,2.194,304,2.116,315,5.808,354,2.369,394,6.426,399,2.903,400,4.203,401,5.991,434,4.508,461,6.335,503,1.918,506,4.508,508,2.046,550,2.553,554,1.717,555,1.717,572,3.397,578,2.595,645,1.717,709,2.095,859,2.624,860,2.921,863,2.485,864,2.961,865,2.868,914,2.116,935,2.868,985,1.865,986,2.7,1035,1.325,1089,4.203,1123,4.699,1923,2.276,2058,3.921,2219,2.903,2225,2.595,2226,2.735,2230,2.595,2490,3.397,2585,4.653,2675,4.203,2716,3.397,2726,2.903,2747,3.397,2748,7.894,2749,5.538,2750,5.538,2751,7.894,2752,5.538,2753,5.538,2754,6.509,2755,6.509,2756,7.135,2757,8.141,2758,8.141,2759,3.825,2760,3.825,2761,3.825,2762,5.538,2763,6.509,2764,5.538,2765,3.825,2766,6.509,2767,3.825,2768,7.135,2769,6.509,2770,5.538,2771,3.825,2772,5.538,2773,5.538,2774,3.825,2775,5.538,2776,5.538,2777,3.825,2778,5.538,2779,5.538,2780,3.825,2781,3.825,2782,3.825,2783,3.825,2784,3.825,2785,3.825,2786,3.825,2787,3.825,2788,6.509,2789,3.825,2790,5.538,2791,3.825,2792,3.825,2793,3.825,2794,3.825,2795,5.538,2796,5.538,2797,5.538,2798,5.538,2799,5.538,2800,3.825,2801,3.825,2802,3.397,2803,3.825,2804,3.825,2805,3.825,2806,3.825,2807,5.538,2808,3.825,2809,3.397,2810,3.825]],["title/classes/Query.html",[0,0.239,136,0.832]],["body/classes/Query.html",[0,0.368,2,0.895,3,0.116,4,0.106,5,0.078,7,0.329,10,1.356,12,0.903,36,0.397,38,0.712,42,0.53,43,0.008,44,0.979,51,0.593,84,0.774,85,0.116,88,0.006,89,0.006,117,1.55,126,1.395,135,3.355,136,1.619,149,1.131,150,0.977,158,1.356,204,1.713,209,3.509,212,1.198,220,3.121,228,1.433,241,3.792,277,3.432,301,3.202,302,3.045,548,4.196,578,3.912,709,2.182,719,2.897,844,2.398,863,3.611,864,4.774,886,3.375,986,3.57,1021,2.182,1417,3.912,1663,6.424,1794,2.987,1923,5.312,2811,5.121,2812,7.144,2813,7.144,2814,7.323,2815,7.757,2816,7.757,2817,5.768,2818,7.515,2819,6.502,2820,6.502,2821,6.502,2822,5.121,2823,5.121,2824,5.121,2825,5.121,2826,5.121]],["title/classes/Query-1.html",[0,0.201,66,0.913,136,0.698]],["body/classes/Query-1.html",[0,0.354,2,0.843,3,0.109,4,0.1,5,0.073,7,0.317,10,1.364,12,0.965,14,1.64,36,0.374,38,0.67,42,0.518,43,0.008,44,0.987,47,1.391,51,0.559,84,0.76,85,0.109,88,0.005,89,0.005,117,1.491,135,3.444,136,1.645,149,1.065,150,1.014,156,1.045,158,1.448,179,2.813,204,1.682,209,3.482,212,1.624,220,3.527,228,1.393,241,4.05,249,4.05,277,3.232,301,3.911,302,3.252,355,3.441,578,3.684,844,2.258,853,4.823,860,3.162,863,3.714,864,4.699,886,2.504,887,4.823,925,2.574,965,2.905,1021,2.055,1403,5.917,1438,4.653,1631,4.823,1923,5.228,2506,5.037,2812,4.823,2813,4.823,2815,7.614,2816,7.614,2818,6.256,2819,6.256,2820,6.256,2821,6.256,2822,4.823,2823,4.823,2824,4.823,2825,4.823,2826,4.823,2827,4.823,2828,5.432,2829,5.432,2830,5.432,2831,5.432,2832,5.432,2833,5.432,2834,5.432,2835,5.432,2836,5.432,2837,5.432,2838,5.432,2839,7.046,2840,7.046,2841,5.432,2842,8.276]],["title/classes/Query-10.html",[0,0.201,136,0.698,1389,1.842]],["body/classes/Query-10.html",[0,0.377,2,0.582,3,0.075,4,0.069,5,0.087,7,0.29,8,0.954,10,0.848,12,1.165,16,1.933,19,1.604,24,0.992,26,1.42,29,2.114,30,1.704,36,0.258,38,0.674,40,1.895,41,1.885,42,0.568,43,0.008,44,0.853,51,0.806,66,1.716,73,2.409,74,0.148,77,2.007,83,0.656,84,0.332,85,0.075,88,0.004,89,0.004,116,1.247,117,1.66,119,1.604,120,2.328,121,2.451,126,1.321,128,1.852,135,3.519,136,1.665,141,2.812,149,0.736,150,1.094,156,1.051,158,1.629,164,2.267,183,1.67,186,1.483,204,1.263,212,1.885,213,2.737,220,3.604,228,1.595,386,4.53,482,2.588,503,2.975,551,3.02,554,1.684,555,2.889,607,2.114,620,1.195,666,2.815,667,4.751,709,2.675,719,2.743,838,6.117,842,1.599,844,2.271,859,1.778,863,4.048,865,2.828,882,1.892,886,3.96,890,3.249,902,1.778,914,2.888,937,2.517,965,2.921,967,4.193,970,4.018,972,3.02,977,1.885,985,2.663,1000,2.921,1018,1.885,1021,2.066,1022,2.076,1024,1.885,1026,2.889,1035,2.23,1036,2.545,1037,1.885,1056,2.007,1057,2.921,1058,2.007,1059,2.007,1060,2.007,1061,1.487,1439,2.451,1609,2.233,1808,2.076,1810,2.427,2843,3.332,2844,3.383,2845,3.383,2846,3.249,2847,4.654,2848,3.753,2849,3.753,2850,3.753,2851,3.753,2852,3.753,2853,3.753,2854,3.831,2855,3.249,2856,2.848,2857,3.249,2858,2.848,2859,2.324,2860,2.427,2861,2.233,2862,3.904,2863,2.683,2864,2.683,2865,2.233,2866,2.233]],["title/classes/Query-2.html",[0,0.201,136,0.698,858,1.948]],["body/classes/Query-2.html",[0,0.184,2,0.57,3,0.074,4,0.068,5,0.049,10,0.834,12,1.138,24,0.952,36,0.253,38,0.784,40,1.669,42,0.563,43,0.008,44,0.93,51,0.827,66,1.777,73,2.488,74,0.212,85,0.074,88,0.004,89,0.004,117,1.138,128,2.373,133,2.081,135,3.399,136,1.653,138,1.194,139,1.3,141,2.795,144,1.245,147,3.908,149,1.247,150,1.09,156,1.034,158,1.604,159,1.358,164,2.177,186,1.459,192,2.625,204,1.247,212,1.9,213,2.709,220,3.692,228,1.612,380,3.158,482,3.013,503,2.855,554,1.648,555,1.648,620,1.712,645,1.648,666,3.868,842,2.983,844,2.91,855,4.079,859,1.74,863,3.932,886,3.94,902,1.74,914,2.613,967,4.299,970,2.874,972,2.973,977,3.515,985,1.79,1000,2.874,1016,2.787,1018,1.844,1021,2.648,1022,2.973,1024,2.699,1025,2.274,1026,3.342,1035,2.424,1037,1.844,1056,1.964,1057,2.874,1058,1.964,1059,1.964,1060,1.964,1061,1.455,1102,2.104,1337,5.2,1436,3.646,1442,4.376,1443,4.376,1444,2.989,1448,3.26,1449,3.646,1450,5.176,1536,4.079,1537,4.773,1538,4.773,1539,4.773,1596,2.49,1609,2.185,1808,2.031,1810,2.375,2847,4.613,2854,3.198,2855,2.185,2857,3.198,2858,4.079,2861,2.185,2862,3.843,2863,2.625,2864,2.625,2865,2.185,2866,2.185,2867,3.26,2868,3.672,2869,3.672,2870,3.672,2871,5.375,2872,3.672,2873,3.672,2874,3.672,2875,3.672,2876,3.672,2877,3.672,2878,5.375,2879,3.672,2880,3.672,2881,3.672,2882,5.375,2883,3.672,2884,3.672,2885,3.672,2886,5.375,2887,3.672,2888,3.672,2889,3.672,2890,3.672,2891,3.26,2892,3.672,2893,3.672,2894,3.672,2895,3.672,2896,3.672,2897,3.672,2898,3.672,2899,3.672,2900,3.672,2901,3.672,2902,3.672,2903,3.672,2904,3.672,2905,3.672,2906,2.989,2907,3.672,2908,3.672,2909,3.672,2910,3.672,2911,3.26,2912,3.672,2913,2.625,2914,3.672]],["title/classes/Query-3.html",[0,0.201,136,0.698,1481,2.289]],["body/classes/Query-3.html",[0,0.371,2,0.494,3,0.064,4,0.059,5,0.079,7,0.263,8,0.844,10,0.75,12,1.146,16,1.711,19,1.42,24,0.953,26,1.829,30,1.508,36,0.219,38,0.721,40,1.571,42,0.553,43,0.008,44,0.931,51,0.789,66,1.752,73,2.322,74,0.23,77,2.585,83,0.556,84,0.282,85,0.097,88,0.004,89,0.004,116,1.686,117,1.563,119,1.42,120,2.06,121,2.169,126,1.169,128,1.639,135,3.461,136,1.645,137,1.553,141,2.68,149,0.625,150,1.04,156,1.124,158,1.609,164,2.312,173,2.309,183,1.478,204,0.948,212,1.849,213,2.525,220,3.369,228,1.586,247,4.573,248,2.78,249,3.026,255,2.876,381,4.69,482,2.29,503,2.858,550,2.228,554,2.169,555,2.927,574,4.195,607,1.871,709,2.99,719,2.427,723,3.127,844,2.01,855,2.417,863,3.935,865,2.503,886,3.804,890,2.876,914,2.4,965,2.585,967,3.948,970,3.75,977,1.599,985,2.357,999,3.668,1018,1.599,1021,2.468,1024,1.599,1025,1.972,1026,2.622,1035,2.657,1037,1.599,1086,3.127,1102,1.825,1117,2.277,1439,2.169,1453,4.434,1536,6.143,1568,4.756,1569,4.756,1570,4.756,1571,4.756,1596,5.995,1642,4.292,1776,3.456,1778,2.417,1785,4.663,1801,2.592,1802,3.935,1808,1.761,1810,2.06,2618,6.555,2619,4.292,2738,4.292,2844,2.994,2845,2.994,2846,2.876,2854,3.476,2855,2.876,2856,3.668,2857,2.876,2859,2.994,2861,1.895,2862,3.456,2863,2.277,2864,2.277,2865,1.895,2866,1.895,2891,2.827,2906,3.935,2911,4.292,2915,2.827,2916,5.842,2917,7.013,2918,7.013,2919,3.184,2920,4.834,2921,3.184,2922,3.184,2923,3.184,2924,3.184,2925,3.184,2926,3.184,2927,6.523,2928,5.842,2929,3.184,2930,3.184,2931,3.184,2932,3.184,2933,3.184,2934,3.184,2935,4.834,2936,4.834,2937,4.834,2938,4.834,2939,3.184,2940,3.184,2941,3.184,2942,3.184,2943,3.184,2944,3.184,2945,3.184,2946,3.184,2947,3.184,2948,3.184,2949,3.184,2950,3.184]],["title/classes/Query-4.html",[0,0.201,136,0.698,2578,2.71]],["body/classes/Query-4.html",[0,0.38,2,0.594,3,0.077,4,0.07,5,0.088,7,0.293,8,0.967,10,0.859,12,1.167,16,1.96,19,1.626,24,0.996,29,2.144,30,1.728,36,0.263,37,6.424,38,0.472,39,6.916,40,1.697,41,1.921,42,0.581,43,0.008,44,0.837,46,5.101,51,0.812,59,7.024,73,2.388,74,0.151,83,0.668,84,0.339,85,0.077,88,0.004,89,0.004,116,1.265,117,1.671,119,1.626,120,2.36,121,2.485,126,1.339,128,1.878,135,3.524,136,1.674,141,2.88,149,0.75,150,1.057,156,1.066,158,1.635,164,2.219,183,1.693,186,1.503,204,1.086,212,1.91,213,2.762,220,3.621,228,1.601,230,4.917,482,2.624,503,2.988,551,3.063,554,1.717,555,2.921,607,2.144,620,1.218,709,2.699,719,2.781,842,1.63,844,2.302,859,1.813,863,4.06,865,2.868,882,1.918,886,3.977,890,3.295,902,1.813,914,2.872,937,2.553,965,2.961,967,4.221,970,4.049,972,3.063,977,1.921,985,2.7,1000,2.961,1018,1.921,1021,1.447,1022,2.116,1023,2.474,1024,1.921,1026,2.921,1031,2.474,1032,2.276,1035,1.325,1037,1.921,1056,2.046,1057,2.961,1058,2.046,1059,2.046,1060,2.046,1061,1.516,1439,2.485,1609,2.276,1808,2.116,1833,2.595,2585,5.101,2844,3.43,2845,3.43,2846,3.295,2847,4.69,2854,3.873,2855,3.295,2857,3.295,2859,2.369,2860,2.474,2861,2.276,2865,2.276,2866,2.276,2913,2.735,2951,3.397,2952,3.825,2953,3.825,2954,3.825,2955,3.825,2956,3.825,2957,3.825,2958,2.735,2959,3.825,2960,3.825,2961,3.825,2962,2.903,2963,3.825,2964,3.825]],["title/classes/Query-5.html",[0,0.201,136,0.698,693,2.475]],["body/classes/Query-5.html",[0,0.377,2,0.582,3,0.075,4,0.069,5,0.087,7,0.29,8,0.954,10,0.848,12,1.165,16,1.933,19,1.604,24,0.992,29,2.114,30,1.704,36,0.258,38,0.463,40,1.814,41,1.885,42,0.568,43,0.008,44,0.832,51,0.806,66,1.471,73,2.409,74,0.148,83,0.656,84,0.332,85,0.075,88,0.004,89,0.004,116,1.247,117,1.66,119,1.604,120,2.328,121,2.451,126,1.321,128,1.852,135,3.519,136,1.672,141,2.812,149,0.736,150,1.094,156,1.051,158,1.629,164,2.232,183,1.67,186,1.483,204,1.071,212,1.905,213,2.737,220,3.604,228,1.595,482,2.588,503,2.975,551,3.02,554,1.684,555,2.889,605,5.835,607,2.114,618,6.519,620,1.195,665,3.988,666,2.815,667,3.561,668,5.756,709,2.675,719,2.743,728,6.672,842,1.599,844,2.271,859,1.778,863,4.048,865,2.828,882,1.892,886,3.96,890,3.249,902,1.778,914,2.861,937,2.517,965,2.921,967,4.193,970,4.018,972,3.02,977,1.885,985,2.663,1000,2.921,1018,1.885,1021,2.066,1022,2.076,1023,2.427,1024,1.885,1025,2.324,1026,2.889,1031,2.427,1032,2.233,1035,1.892,1037,1.885,1056,2.007,1057,2.921,1058,2.007,1059,2.007,1060,2.007,1061,1.487,1439,2.451,1609,2.233,1808,2.076,1833,2.545,2844,3.383,2845,3.383,2846,3.249,2847,4.654,2854,3.831,2855,3.249,2857,3.249,2859,2.324,2860,2.427,2861,2.233,2865,2.233,2866,2.233,2913,2.683,2958,2.683,2962,2.848,2965,3.332,2966,3.753,2967,3.753,2968,3.753,2969,3.753,2970,3.753,2971,3.753,2972,3.055,2973,3.055]],["title/classes/Query-6.html",[0,0.201,136,0.698,1586,2.584]],["body/classes/Query-6.html",[0,0.377,2,0.581,3,0.075,4,0.069,5,0.086,7,0.289,8,0.953,10,0.846,12,1.165,16,1.93,19,1.601,24,0.991,26,1.417,29,2.111,30,1.701,36,0.258,38,0.673,40,1.857,41,1.88,42,0.568,43,0.008,44,0.852,51,0.806,66,1.715,73,2.408,74,0.147,77,2.002,83,0.654,84,0.332,85,0.075,88,0.004,89,0.004,116,1.245,117,1.658,119,1.601,120,2.324,121,2.447,126,1.319,128,1.849,135,3.524,136,1.667,141,2.81,149,0.734,150,1.094,156,1.049,158,1.629,164,2.28,183,1.667,186,1.48,204,1.261,212,1.873,213,2.734,220,3.602,228,1.595,385,4.397,482,2.584,503,2.974,551,3.015,554,1.68,555,2.885,607,2.111,620,1.192,665,5.318,666,2.384,667,3.556,709,2.672,719,2.738,842,1.596,844,2.267,859,1.774,863,4.047,865,2.824,870,6.666,882,1.888,886,3.957,890,3.244,902,1.774,914,2.887,937,2.513,965,2.916,967,4.19,970,4.015,972,3.015,977,1.88,985,2.658,1000,2.916,1018,1.88,1021,1.417,1022,2.071,1024,1.88,1026,2.885,1035,2.227,1036,2.54,1037,1.88,1056,2.002,1057,2.916,1058,2.002,1059,2.002,1060,2.002,1061,1.484,1439,2.447,1609,2.228,1808,2.071,2844,3.377,2845,3.377,2846,3.244,2847,4.65,2854,3.826,2855,3.244,2856,2.842,2857,3.244,2858,2.842,2859,2.319,2860,2.422,2861,2.228,2862,3.898,2863,2.677,2864,2.677,2865,2.228,2866,2.228,2974,3.325,2975,3.744,2976,3.744,2977,3.744,2978,3.744,2979,3.744,2980,3.744,2981,3.744]],["title/classes/Query-7.html",[0,0.201,136,0.698,2567,2.856]],["body/classes/Query-7.html",[0,0.377,2,0.581,3,0.075,4,0.069,5,0.086,7,0.289,8,0.952,10,0.846,12,1.164,16,1.929,19,1.6,24,0.991,29,2.109,30,1.7,36,0.257,38,0.462,40,1.812,41,1.879,42,0.568,43,0.008,44,0.831,51,0.805,66,1.714,73,2.408,74,0.147,83,0.654,84,0.331,85,0.075,88,0.004,89,0.004,116,1.245,117,1.658,119,1.6,120,2.323,121,2.445,126,1.318,128,1.848,135,3.529,136,1.667,141,2.809,149,0.734,150,1.094,156,1.048,158,1.628,164,2.266,183,1.666,186,1.479,204,1.069,212,1.884,213,2.733,220,3.601,228,1.595,380,3.191,482,2.582,503,2.973,551,3.014,554,1.679,555,2.884,607,2.109,620,1.191,666,3.753,709,2.671,719,2.737,842,1.595,844,2.266,848,5.365,859,1.773,863,4.046,865,2.822,882,1.887,886,3.957,890,3.242,902,1.773,914,2.91,937,2.512,965,2.914,967,4.189,970,4.013,972,3.014,977,1.879,985,2.657,1000,2.914,1018,1.879,1021,2.062,1022,2.069,1024,1.879,1026,2.884,1035,2.446,1036,2.538,1037,1.879,1056,2.001,1057,2.914,1058,2.001,1059,2.001,1060,2.001,1061,1.483,1439,2.445,1449,4.789,1609,2.226,1808,2.069,1810,2.42,2844,3.375,2845,3.375,2846,3.242,2847,4.648,2854,3.824,2855,3.242,2857,3.242,2858,2.839,2859,2.317,2860,2.42,2861,2.226,2862,3.896,2863,2.675,2864,2.675,2865,2.226,2866,2.226,2958,2.675,2982,3.322,2983,3.741,2984,3.741,2985,3.741,2986,3.741,2987,3.741,2988,3.741,2989,3.741]],["title/classes/Query-8.html",[0,0.201,136,0.698,2570,2.71]],["body/classes/Query-8.html",[0,0.378,2,0.585,3,0.076,4,0.069,5,0.087,7,0.29,8,0.957,10,0.85,12,1.165,16,1.938,19,1.608,24,0.992,29,2.12,30,1.709,36,0.259,38,0.465,40,1.686,41,1.892,42,0.569,43,0.008,44,0.833,51,0.807,66,0.86,73,2.411,74,0.148,83,0.658,84,0.334,85,0.076,88,0.004,89,0.004,116,1.251,117,1.662,119,1.608,120,2.334,121,2.458,126,1.324,128,1.857,135,3.52,136,1.672,141,2.815,149,0.739,150,1.095,156,1.054,158,1.631,164,2.234,183,1.674,186,1.487,204,1.074,212,1.915,213,2.742,220,3.607,228,1.596,389,4.161,482,2.595,503,2.978,551,3.029,554,1.69,555,2.896,607,2.12,620,1.2,709,2.68,719,2.75,842,1.606,844,2.277,859,1.785,863,4.05,865,2.836,882,1.897,886,3.963,890,3.258,902,1.785,914,2.863,937,2.524,965,2.929,967,4.199,970,4.024,972,3.029,977,1.892,985,2.67,1000,2.929,1018,1.892,1021,2.68,1022,2.083,1023,2.437,1024,1.892,1026,2.896,1031,2.437,1032,2.241,1035,1.897,1037,1.892,1056,2.014,1057,2.929,1058,2.014,1059,2.014,1060,2.014,1061,1.493,1439,2.458,1609,2.241,1665,6.999,1666,4.582,1678,4.661,1808,2.083,1810,2.437,1833,2.555,2585,6.147,2844,3.392,2845,3.392,2846,3.258,2847,4.661,2854,3.839,2855,3.258,2857,3.258,2859,2.333,2860,2.437,2861,2.241,2865,2.241,2866,2.241,2913,2.693,2958,2.693,2962,2.859,2972,3.067,2973,3.067,2990,3.345,2991,3.767,2992,3.767,2993,3.767,2994,3.767,2995,3.767,2996,3.767,2997,3.767]],["title/classes/Query-9.html",[0,0.201,136,0.698,2998,3.995]],["body/classes/Query-9.html",[0,0.378,2,0.584,3,0.076,4,0.069,5,0.087,7,0.29,8,0.956,10,0.849,12,1.165,16,1.937,19,1.608,24,0.992,29,2.119,30,1.708,36,0.259,38,0.464,40,1.815,41,1.89,42,0.569,43,0.008,44,0.833,51,0.807,66,1.473,73,2.411,74,0.148,83,0.658,84,0.333,85,0.076,88,0.004,89,0.004,116,1.25,117,1.662,119,1.608,120,2.333,121,2.456,126,1.324,128,1.856,135,3.52,136,1.672,141,2.814,149,0.738,150,1.095,156,1.053,158,1.63,164,2.233,183,1.673,186,1.486,204,1.073,212,1.906,213,2.741,220,3.607,228,1.596,389,4.16,482,2.594,503,2.977,551,3.027,554,1.689,555,2.894,607,2.119,620,1.199,709,2.679,719,2.749,842,1.604,844,2.276,859,1.784,863,4.05,865,2.835,882,1.896,886,3.962,890,3.257,902,1.784,914,2.863,937,2.523,965,2.927,967,4.198,970,4.023,972,3.027,977,1.89,985,2.669,1000,2.927,1018,1.89,1021,2.071,1022,2.082,1023,2.435,1024,1.89,1025,2.332,1026,2.894,1031,2.435,1032,2.24,1035,1.896,1037,1.89,1056,2.013,1057,2.927,1058,2.013,1059,2.013,1060,2.013,1061,1.492,1439,2.456,1609,2.24,1664,5.59,1666,5.56,1759,6.124,1808,2.082,1833,2.553,2844,3.39,2845,3.39,2846,3.257,2847,4.66,2854,3.837,2855,3.257,2857,3.257,2859,2.332,2860,2.435,2861,2.24,2865,2.24,2866,2.24,2913,2.691,2958,2.691,2962,2.857,2972,3.064,2973,3.064,2999,3.342,3000,3.764,3001,3.764,3002,3.764,3003,3.764,3004,3.764,3005,3.764]],["title/interfaces/QueryConfig.html",[836,3.229,1110,1.58]],["body/interfaces/QueryConfig.html",[0,0.332,3,0.044,4,0.04,5,0.029,7,0.204,12,1.039,13,1.71,14,0.83,15,1.412,16,1.861,18,2.288,24,0.411,28,2.36,29,1.38,36,0.519,40,1.017,42,0.556,43,0.008,44,0.909,53,1.482,63,1.971,64,1.541,66,1.844,67,2.187,73,1.73,74,0.085,85,0.072,88,0.003,89,0.003,116,1.037,117,0.961,121,2.36,128,1.208,133,1.757,135,2.848,136,1.458,137,3.485,140,1.822,141,1.208,144,1.208,150,0.963,155,1.412,156,0.873,158,1.362,164,2.097,172,1.38,183,0.663,186,1.428,204,1.51,212,1.949,213,0.839,220,2.477,228,1.627,247,1.343,248,3.669,249,3.988,258,3.214,278,2.037,303,1.846,357,2.812,482,1.689,503,2.39,550,3.044,551,1.971,554,0.973,555,0.973,607,2.25,620,1.135,709,2.704,820,5.013,821,1.343,836,4.48,839,6.334,841,4.722,842,3.918,843,3.581,844,3.201,845,3.991,846,4.743,850,3.991,859,1.689,860,2.608,863,3.574,864,1.159,865,1.122,872,4.856,886,2.881,902,1.689,914,2.687,935,2.724,937,1.643,942,4.091,944,1.79,948,1.242,959,1.55,960,1.645,961,3.696,962,2.701,963,3.696,964,5.088,965,2.812,966,3.696,967,3.69,968,5.088,970,1.159,971,2.902,973,2.902,975,2.902,976,2.902,977,2.919,978,2.548,980,3.696,981,5.617,982,3.696,984,2.902,985,2.213,986,3.588,991,2.902,992,6.068,993,2.902,994,2.548,995,1.47,996,1.645,997,2.902,998,1.765,999,2.705,1000,1.906,1002,2.902,1003,2.902,1006,2.902,1007,3.129,1008,3.718,1009,6.139,1010,5.088,1011,2.902,1012,4.731,1013,4.991,1014,2.902,1015,4.281,1016,4.743,1017,1.765,1018,1.089,1019,2.902,1020,1.765,1021,1.349,1022,1.199,1023,1.402,1024,1.089,1025,1.343,1026,2.037,1027,1.765,1028,1.765,1029,1.765,1030,1.765,1031,1.402,1032,2.121,1033,1.765,1034,1.765,1035,0.751,1036,1.47,1037,1.089,1038,2.902,1039,5.99,1040,5.818,1041,5.99,1042,4.281,1043,4.281,1044,3.991,1045,5.99,1046,5.99,1047,4.281,1048,5.088,1049,5.088,1050,4.731,1051,4.731,1052,1.765,1053,1.765,1054,1.765,1055,3.696,1056,1.906,1057,2.812,1058,1.906,1059,1.906,1060,1.906,1061,1.412,1062,2.902,1063,2.902,1064,1.765,1065,2.902,1066,2.902,1067,2.902,1068,1.765,1069,2.902,1070,2.902,1071,5.617,1072,5.617,1073,3.696,1074,4.281,1075,4.281,1076,4.281,1077,4.281,1078,4.281,1079,2.902,1080,4.281,1081,4.281,1082,4.281,1083,2.902,1084,1.765,1085,3.245,1086,3.402,1087,3.696,1088,1.765,1089,1.645,1090,2.121,1091,2.121,1092,3.991,1093,5.088,1094,5.088,1095,1.765,1096,2.902,1097,2.902,1098,1.765,1099,2.902,1100,1.765,1101,3.696,1102,1.242,1103,1.47,1104,2.902,1105,2.902,1106,1.765,1107,1.765,1108,1.765,1109,2.902,1110,0.72,2542,1.089]],["title/classes/QueryCountryDto.html",[0,0.239,1379,3.229]],["body/classes/QueryCountryDto.html",[0,0.438,2,0.888,3,0.115,4,0.105,5,0.077,24,0.841,31,1.964,32,2.025,33,2.501,36,0.394,38,1.131,42,0.584,43,0.008,44,0.868,51,0.868,55,1.94,64,2.08,66,1.307,74,0.332,75,3.416,76,1.332,80,4.025,81,3.911,82,3.253,85,0.161,88,0.006,89,0.006,186,2.291,228,1.019,380,2.837,547,4.593,620,2.32,914,2.979,944,2.873,1007,3.404,1379,4.941,1381,6.23,1385,4.433,1387,4.433,1389,2.637,1405,4.769,1560,4.994,1779,3.88,2378,6.033,2379,6.614,2380,5.185,2381,3.88,2382,5.437,2383,6.033,2384,4.657,2385,4.09,2386,5.931,2387,4.657,2388,4.941,2389,4.657,2630,6.469,2641,5.08,2642,5.08,3006,7.285,3007,5.721,3008,5.721,3009,7.285,3010,7.285,3011,5.721,3012,5.721,3013,5.721]],["title/classes/QueryFailedFilter.html",[0,0.239,3014,3.875]],["body/classes/QueryFailedFilter.html",[0,0.357,2,0.698,3,0.09,4,0.083,5,0.06,7,0.32,14,1.656,24,0.717,29,2.969,36,0.31,38,0.766,40,1.719,42,0.504,43,0.008,51,0.731,57,1.917,74,0.358,85,0.143,88,0.005,89,0.005,108,1.15,117,1.314,126,1.502,128,3.027,136,1.576,144,1.525,149,1.218,150,0.717,151,3.028,155,2.46,156,1.195,158,0.833,188,2.329,189,2.404,204,1.395,209,3.078,212,1.902,217,3.266,219,2.577,227,3.434,259,3.216,275,4.98,276,4.304,277,4.788,278,2.018,279,4.439,280,4.563,281,6.213,282,3.695,283,7.503,284,3.661,286,4.304,287,3.572,288,5.79,290,4.824,291,5.074,292,5.784,294,4.212,295,2.46,296,4.212,301,3.109,302,3.712,303,3.216,304,2.487,305,3.05,306,3.434,307,3.661,311,4.212,312,4.212,313,4.212,314,3.215,317,3.413,318,4.212,321,5.084,355,1.87,357,2.786,396,2.061,414,3.215,548,3.558,553,3.993,554,2.018,555,2.018,556,5.513,557,3.993,578,3.05,580,3.661,581,5.055,582,3.993,583,5.055,587,5.79,709,2.349,855,3.413,891,3.993,909,4.439,1794,3.216,2116,4.713,2528,3.661,2530,5.513,2531,5.513,2541,5.055,2719,3.413,2723,3.993,2726,3.413,2727,3.993,2731,3.993,2733,3.993,2734,6.81,2735,7.146,3014,6.943,3015,6.81,3016,3.993,3017,6.209,3018,4.497,3019,4.497,3020,4.497,3021,6.209,3022,4.497,3023,3.993,3024,4.497,3025,4.497,3026,6.209,3027,4.497,3028,4.497,3029,4.497,3030,4.497,3031,4.497,3032,4.497,3033,4.497,3034,4.497]],["title/interfaces/QueryOptions.html",[1110,1.58,1785,3.403]],["body/interfaces/QueryOptions.html",[0,0.285,3,0.061,4,0.056,5,0.041,7,0.137,12,1.038,14,1.321,18,2.914,24,0.538,36,0.519,38,1.12,40,1.272,42,0.587,43,0.008,44,0.964,53,3.238,64,0.749,66,1.454,73,2.384,74,0.12,85,0.128,88,0.004,89,0.004,119,1.37,135,3.358,136,1.627,141,2.764,150,0.984,158,1.179,172,1.806,186,1.266,199,4.081,204,1.249,212,1.924,213,1.177,220,3.475,228,1.518,248,3.535,249,4.502,257,2.173,258,1.681,482,2.69,554,1.364,555,1.364,709,2.148,842,1.988,844,3.138,859,3.017,863,3.495,914,2.89,977,1.526,985,1.482,986,3.104,992,5.182,1018,1.526,1021,3.138,1024,1.526,1026,2.547,1032,1.808,1035,2.914,1037,2.343,1086,5.511,1091,2.775,1102,1.742,1110,1.549,1776,5.182,1777,2.474,1778,2.307,1779,2.062,1784,2.699,1785,6.461,1787,5.183,1788,2.699,1790,2.699,1792,2.699,1794,4.46,1795,7.565,1796,7.565,1797,3.54,1798,3.788,1799,4.142,1800,5.183,1801,6.34,1802,6.144,1803,2.58,1804,5.654,1805,4.142,1806,6.437,1807,2.699,1808,1.681,1809,2.699,1810,1.966,1811,6.702,1812,5.04,1813,5.04,1814,2.699,1815,5.183,1816,5.04,1817,4.142,1818,4.142,1819,3.798,1820,4.142,1821,4.142,1822,4.142,1823,6.437,1824,5.04,1825,5.654,1826,5.654,1827,4.142,1828,4.142,1829,2.699,1830,2.699,1831,2.699,1832,2.699,1833,2.062,1834,2.699,1835,2.699,1836,5.04,1837,2.699,1838,2.699,2542,1.526]],["title/injectables/ResolvePromisesInterceptor.html",[112,1.398,3035,3.875]],["body/injectables/ResolvePromisesInterceptor.html",[0,0.371,3,0.118,4,0.108,5,0.079,7,0.333,10,1.429,14,1.721,30,2.307,36,0.403,38,0.723,42,0.367,43,0.008,51,0.602,74,0.335,85,0.148,88,0.006,89,0.006,108,1.084,112,2.172,114,2.56,117,1.565,149,1.149,150,0.676,158,1.369,204,1.45,228,1.043,278,3.318,280,4.399,297,3.074,298,5.612,299,6.085,301,3.918,302,3.828,410,5.506,431,3.408,860,3.318,923,4.707,948,4.237,1346,5.612,2255,6.085,2374,6.565,3035,6.597,3036,5.2,3037,8.511,3038,7.296,3039,8.175,3040,7.394,3041,8.511,3042,6.565,3043,7.394,3044,6.597,3045,6.02,3046,6.565,3047,7.394,3048,7.394,3049,8.777,3050,8.777,3051,5.857,3052,7.394,3053,7.394,3054,8.963,3055,7.394,3056,8.103,3057,5.2,3058,5.2,3059,5.857,3060,5.857,3061,5.857,3062,5.857,3063,5.857]],["title/injectables/SortBy.html",[112,1.398,938,3.079]],["body/injectables/SortBy.html",[0,0.417,3,0.099,4,0.09,5,0.066,7,0.335,20,4.024,32,2.817,35,2.63,36,0.338,38,0.814,42,0.413,43,0.008,44,0.949,51,0.679,53,2.045,55,2.699,67,2.744,74,0.26,85,0.16,88,0.005,89,0.005,108,0.911,112,2.187,114,2.15,117,1.397,129,2.63,139,2.336,149,1.294,150,0.919,158,1.643,172,2.555,204,1.628,209,2.944,212,1.653,217,3.23,228,1.418,232,3.022,280,4.736,438,5.008,539,4.268,672,4.669,858,2.398,896,5.652,897,4.004,898,6.063,899,5.631,900,5.86,901,5.86,902,3.127,903,5.86,904,4.402,905,5.86,906,8.134,908,7.879,909,5.935,910,4.367,912,4.613,913,6.063,914,2.885,915,4.367,916,6.063,917,5.37,918,6.063,919,6.613,920,7.371,921,3.926,922,4.087,923,3.65,924,4.087,925,3.127,926,5.372,927,5.372,928,5.372,929,5.86,930,4.367,931,4.367,932,4.367,933,4.367,934,5.86,935,4.596,936,6.16,937,3.669,938,5.149,939,4.718,940,4.718,941,5.86,942,3.046,943,4.367,944,2.47,945,4.367,946,4.367,947,4.367,948,2.818,949,5.86,950,4.367,951,4.367,952,4.367,953,4.367,954,4.367,955,4.367,956,4.367,957,4.367,958,4.367,3064,4.918,3065,4.918]],["title/classes/SortByDto.html",[0,0.239,2425,3.403]],["body/classes/SortByDto.html",[0,0.427,2,0.295,3,0.038,4,0.035,5,0.026,7,0.333,10,0.642,12,0.806,13,1.576,18,1.108,22,0.985,24,0.369,28,0.854,31,0.963,32,1.716,33,1.809,36,0.285,40,0.426,42,0.577,43,0.008,44,0.931,47,2.217,51,0.329,55,2.847,64,2.154,66,1.605,67,2.248,74,0.328,75,3.931,76,1.129,79,3.496,80,2.077,81,3.707,82,3.288,84,0.283,85,0.169,88,0.002,89,0.002,108,0.352,136,0.847,138,1.904,140,0.659,149,0.627,150,0.935,157,2.711,169,2.572,173,2.073,175,0.811,186,1.69,199,1.96,212,0.664,217,2.377,228,1.211,276,2.892,303,2.511,380,1.716,385,0.927,428,1.656,431,0.877,446,2.427,489,3.136,539,1.09,547,4.402,550,2.235,607,0.736,620,1.865,672,4.49,732,1.363,860,2.426,876,1.36,882,0.659,899,2.169,904,1.768,914,2.573,921,1.903,922,1.981,923,1.768,924,1.981,925,1.515,935,4.042,936,3.973,938,1.23,939,5.023,940,4.452,944,3.415,962,1.132,1007,1.903,1008,2.885,1035,1.108,1061,1.639,1141,1.178,1145,2.068,1146,1.981,1197,1.23,1385,4.249,1387,3.886,1389,3.013,1396,4.445,1399,3.14,1400,6,1403,3.466,1404,1.444,1405,4.571,1406,1.444,1436,1.29,1438,1.132,1560,3.746,1794,3.638,1867,3.289,1919,2.068,1931,2.169,2142,1.549,2380,4.49,2381,2.169,2382,5.015,2388,3.668,2390,1.36,2391,4.961,2398,2.603,2399,1.549,2400,1.36,2401,1.549,2402,4.452,2403,3.368,2404,4.452,2405,3.368,2406,1.549,2407,3.68,2408,1.444,2409,2.806,2410,2.286,2411,2.427,2412,2.286,2413,1.549,2414,1.549,2415,1.549,2416,3.947,2417,2.603,2418,1.36,2419,2.427,2420,2.603,2421,2.603,2422,1.549,2423,2.603,2424,3.14,2425,5.163,2426,1.549,2427,2.603,2428,2.603,2429,1.549,2430,1.549,2431,1.549,2432,2.603,2433,2.603,2434,2.603,2435,2.806,2436,1.549,2437,6.02,2438,1.549,2439,1.549,2440,1.549,2441,2.603,2442,1.549,2443,1.549,2444,1.549,2445,1.549,2446,2.603,2447,2.603,2448,1.549,2449,1.549,2450,2.286,2451,1.549,2452,2.603,2453,1.549,2454,3.947,2455,1.549,2456,1.549,2457,1.549,2458,1.549,2459,2.603,2460,2.603,2461,2.603,2462,2.603,2463,3.368,2464,2.603,2465,2.603,2466,1.444,2467,3.866,2468,4.402,2469,4.402,2470,2.603,2471,2.603,2472,1.549,2473,1.549,2474,1.549,2475,1.549,3066,1.902,3067,1.902,3068,1.689,3069,1.902]],["title/classes/SortCountryDto.html",[0,0.239,2383,3.403]],["body/classes/SortCountryDto.html",[0,0.445,2,0.942,3,0.122,4,0.112,5,0.082,24,0.873,31,1.761,32,2.149,33,2.655,36,0.418,42,0.574,43,0.008,44,0.912,51,0.778,55,2.059,64,1.865,66,1.387,74,0.34,75,3.511,76,1.414,80,4.137,81,3.981,82,3.343,85,0.165,88,0.006,89,0.006,186,2.053,228,1.082,380,2.916,547,3.48,620,2.409,914,3.014,944,3.05,1007,3.613,1379,4.119,1381,5.89,1385,3.359,1387,3.359,1389,2.799,1405,3.613,1560,5.083,1779,4.119,2378,5.89,2379,6.252,2380,5.278,2381,4.119,2382,5.588,2383,6.164,2384,6.707,2385,5.89,2386,6.158,2387,4.944,2388,5.13,2389,4.944,3068,5.392,3070,6.073,3071,6.073,3072,6.073]],["title/classes/State.html",[0,0.239,386,2.39]],["body/classes/State.html",[0,0.443,2,0.793,3,0.103,4,0.094,5,0.102,7,0.403,8,1.183,9,2.296,10,1.341,11,2.815,12,0.835,13,2.201,14,1.882,19,1.989,24,0.933,31,1.882,36,0.352,40,2.03,42,0.573,43,0.008,44,0.954,47,2.438,51,0.831,57,2.886,58,2.886,60,3.507,64,1.993,66,1.734,74,0.201,75,3.445,76,1.19,83,0.893,84,0.453,85,0.103,88,0.005,89,0.005,92,2.733,102,4.323,126,1.637,132,3.121,150,1.064,164,2.171,241,3.507,246,3.038,297,2.815,359,5.512,361,3.4,380,3.058,386,4.841,390,4.592,429,3.208,666,3.319,667,4.199,731,3.038,732,2.886,733,4.029,734,3.208,746,6.181,747,6.181,748,6.181,749,6.181,750,6.181,752,5.428,753,5.428,754,5.428,755,5.428,756,5.428,768,4.592,944,3.4,1021,2.562,1435,6.012,1437,6.012,1438,4.029,1439,3.038,1445,6.012,1446,5.512,1653,6.181,3073,4.539,3074,6.771,3075,5.112,3076,5.112,3077,6.742,3078,5.112,3079,5.112]],["title/controllers/StateController.html",[103,1.548,3080,3.613]],["body/controllers/StateController.html",[0,0.201,3,0.081,4,0.074,5,0.09,7,0.419,8,1.001,10,1.245,12,1.042,30,1.788,31,1.796,36,0.276,38,0.952,40,1.498,42,0.571,43,0.008,44,0.937,51,0.793,73,2.414,74,0.333,76,0.934,83,0.701,84,0.355,85,0.081,88,0.004,89,0.004,103,1.304,105,1.389,107,2.485,108,0.743,109,2.015,116,1.309,117,1.544,118,2.271,123,1.825,126,1.386,132,2.641,136,1.274,138,1.304,139,3.226,140,2.977,141,2.914,142,2.715,143,2.968,149,1.62,150,0.975,152,1.956,153,2.849,156,1.286,157,1.825,158,1.614,159,3.372,160,2.715,161,1.901,164,2.344,165,2.715,166,2.715,167,2.505,169,2.918,172,2.588,173,2.366,175,2.442,176,2.442,177,2.078,179,2.078,180,1.901,181,2.72,183,1.227,185,3.362,186,1.556,187,2.383,189,1.553,193,1.71,195,1.71,201,1.901,202,1.956,204,1.62,228,1.374,268,2.715,295,2.89,355,3.335,386,4.858,395,3.9,397,2.641,436,4.589,589,2.968,606,3.911,607,2.218,608,3.887,609,3.549,611,3.064,612,3.707,613,3.549,615,2.868,619,2.485,620,1.825,621,3.284,623,2.485,624,2.868,627,3.549,631,2.485,632,4.717,633,3.549,634,3.697,635,4.778,636,3.284,637,4.517,638,2.299,639,1.901,640,1.754,645,1.8,646,2.868,647,2.485,651,4.517,655,2.595,661,2.485,667,4.437,3080,6.088,3081,3.562,3082,7.123,3083,5.232,3084,5.232,3085,4.012,3086,4.012,3087,4.012,3088,4.012,3089,4.012,3090,4.012,3091,4.012,3092,4.012,3093,3.562,3094,3.562,3095,4.012,3096,4.012,3097,4.012,3098,6.685,3099,4.012,3100,4.012,3101,4.012,3102,4.012,3103,4.012,3104,4.012,3105,4.012,3106,4.012,3107,4.012,3108,4.012,3109,4.012]],["title/classes/StateDto.html",[0,0.239,3084,3.229]],["body/classes/StateDto.html",[0,0.461,2,0.771,3,0.1,4,0.091,5,0.101,7,0.4,8,1.161,9,2.252,10,1.33,11,2.762,12,0.986,13,2.16,14,1.547,15,3.167,18,2.301,19,1.951,20,3.951,21,4.755,22,3.441,23,2.696,24,0.923,25,3.953,26,2.513,27,3.953,28,2.981,29,2.572,30,2.073,31,2.038,32,2.649,33,3.273,34,3.674,35,3.553,36,0.342,38,1.057,40,1.961,41,3.759,42,0.557,43,0.008,44,0.95,47,2.367,49,4.454,51,0.856,54,3.953,55,2.709,57,2.832,58,2.832,60,3.441,61,4.115,62,3.953,63,3.674,64,1.97,65,3.369,66,1.902,67,2.762,74,0.295,75,3.406,76,1.156,77,4.003,78,4.454,79,4.003,80,3.336,81,2.981,82,3.037,83,0.868,84,0.44,85,0.1,87,3.807,88,0.005,89,0.005,150,1.01,156,1.278,164,2.008,380,2.828,386,4.766,666,3.273,667,4.14,752,5.351,753,5.351,754,5.351,755,5.351,756,5.351,768,4.506,805,3.551,1956,5.408,3077,6.646,3084,5.814,3110,4.411,3111,4.968,3112,4.968,3113,4.968,3114,4.968,3115,4.968,3116,4.968,3117,4.968]],["title/modules/StateModule.html",[84,0.422,345,3.403]],["body/modules/StateModule.html",[0,0.322,3,0.129,4,0.118,5,0.114,7,0.352,8,1.367,43,0.008,74,0.346,83,1.122,84,0.779,85,0.129,88,0.006,89,0.006,105,3.045,108,1.189,116,1.788,118,3.102,119,2.299,123,2.493,126,1.893,136,1.475,327,2.544,328,2.669,329,2.959,330,2.959,331,2.736,332,3.692,333,3.893,345,6.82,346,3.608,347,2.959,348,2.669,386,4.415,396,2.598,703,4.848,704,4.848,705,4.186,706,4.485,3080,6.841,3083,6.538,3094,5.7,3118,5.7,3119,5.7,3120,5.7,3121,6.42,3122,6.42]],["title/injectables/StateService.html",[112,1.398,3083,3.229]],["body/injectables/StateService.html",[0,0.366,3,0.07,4,0.064,5,0.083,7,0.344,8,0.905,10,1.186,12,1.003,15,2.053,16,1.834,18,1.794,19,1.522,23,2.102,24,0.598,36,0.24,38,0.943,42,0.495,43,0.008,44,0.923,51,0.814,73,2.116,74,0.338,83,0.61,84,0.605,85,0.07,88,0.004,89,0.004,108,0.647,112,1.522,114,1.527,116,1.183,117,1.446,118,2.053,119,2.006,120,2.208,121,2.325,123,1.65,125,2.969,126,1.253,127,3.351,128,1.756,129,2.77,130,3.622,131,3.209,132,2.388,133,2.005,134,3.209,135,1.916,136,1.45,137,3.858,138,2.572,139,3.155,140,2.366,141,2.316,142,2.455,143,2.683,144,1.756,146,3.958,147,3.973,149,1.552,150,0.938,151,3.011,152,2.526,153,2.912,155,2.053,156,1.669,157,1.65,158,1.564,159,3.297,160,2.455,161,2.455,164,2.313,165,2.455,166,2.926,167,3.19,168,3.209,169,2.76,171,4.065,172,2.645,173,2.186,174,3.415,175,1.489,176,2.208,177,2.683,179,2.683,180,2.455,181,2.635,183,1.584,185,3.523,186,1.406,187,3.034,188,4.492,189,1.352,190,2.651,192,2.497,193,1.489,195,1.489,197,1.868,198,2.369,199,1.655,201,1.655,202,1.703,203,2.163,204,1.499,205,3.431,206,2.369,207,3.209,208,3.209,209,2.284,210,3.825,211,1.932,212,1.801,213,2.005,214,3.962,215,2.259,216,4.097,217,3.211,218,3.932,219,2.001,221,3.209,222,2.163,223,2.163,224,3.825,225,3.825,226,3.825,227,3.415,228,1.3,229,2.163,231,2.259,232,1.417,233,2.163,234,2.078,236,2.163,238,2.259,239,2.001,242,2.163,243,2.369,244,2.369,245,3.082,250,3.209,253,2.259,254,2.969,255,2.078,256,3.082,260,2.001,261,2.969,262,2.163,266,2.163,267,2.078,268,2.926,269,2.163,270,2.369,380,1.236,386,4.786,396,1.72,422,1.932,606,2.526,639,1.655,640,1.527,666,1.527,709,1.96,710,2.259,714,3.351,718,2.526,723,2.259,726,4.218,727,3.932,729,2.497,834,3.932,838,2.843,842,1.489,843,2.001,848,2.497,871,2.651,872,4.231,873,3.101,874,2.843,875,2.843,876,2.497,3082,6.066,3083,5.184,3084,4.949,3093,3.101,3123,3.101,3124,5.181,3125,3.493,3126,3.493,3127,3.493,3128,3.493,3129,3.493,3130,3.493]],["title/classes/UpdateDto.html",[0,0.239,181,1.485]],["body/classes/UpdateDto.html",[0,0.37,2,1.143,3,0.148,4,0.136,5,0.099,43,0.007,74,0.335,76,1.715,85,0.148,88,0.007,89,0.007,181,2.65,1353,5.267,2058,4.399,3131,6.542,3132,8.494,3133,4.384,3134,4.384]],["title/classes/UpdateDto-1.html",[0,0.201,66,0.913,181,1.247]],["body/classes/UpdateDto-1.html",[0,0.474,2,0.994,3,0.129,4,0.118,5,0.113,7,0.351,8,1.365,9,2.65,10,1.363,11,3.249,12,0.964,13,2.541,14,2.045,16,2.766,24,0.902,38,1.084,43,0.007,73,2.431,74,0.308,83,1.119,84,0.567,85,0.129,88,0.006,89,0.006,153,3.839,157,2.489,181,2.859,183,2.685,246,3.507,248,3.331,381,4.697,718,3.81,731,3.507,732,3.744,1061,2.537,1803,4.322,2058,4.549,2488,4.65,3133,3.81,3134,3.81,3135,5.685,3136,4.841,3137,4.65,3138,4.841,3139,4.65,3140,7.815,3141,4.142]],["title/classes/UpdateDto-2.html",[0,0.201,181,1.247,858,1.948]],["body/classes/UpdateDto-2.html",[0,0.473,1,6.432,2,0.99,3,0.128,4,0.117,5,0.113,7,0.351,8,1.362,9,2.643,10,1.361,11,3.242,12,0.962,13,2.535,14,2.042,16,2.759,24,0.9,38,1.082,42,0.549,43,0.007,46,6.271,73,2.428,74,0.307,76,1.485,83,1.114,84,0.565,85,0.128,88,0.006,89,0.006,157,2.483,181,2.856,183,2.682,246,3.499,248,3.323,718,3.801,731,3.499,732,3.739,1803,4.312,2058,4.543,2488,4.639,3133,3.795,3134,3.795,3136,4.829,3137,4.639,3138,4.829,3139,4.639,3142,5.663,3143,7.797]],["title/classes/UpdateDto-3.html",[0,0.201,181,1.247,1481,2.289]],["body/classes/UpdateDto-3.html",[0,0.474,2,0.994,3,0.129,4,0.118,5,0.113,7,0.351,8,1.365,9,2.65,10,1.363,11,3.249,12,0.964,13,2.541,14,2.045,16,2.766,24,0.902,38,1.084,43,0.007,73,2.431,74,0.308,83,1.119,84,0.567,85,0.129,88,0.006,89,0.006,157,2.489,181,2.859,183,2.685,246,3.507,248,3.331,605,5.682,614,6.109,718,3.81,731,3.507,732,3.744,1061,2.537,1803,4.322,2058,4.549,2488,4.65,3133,3.81,3134,3.81,3136,4.841,3137,4.65,3138,4.841,3139,4.65,3141,4.142,3144,5.685,3145,7.815]],["title/classes/UpdateDto-4.html",[0,0.201,181,1.247,2578,2.71]],["body/classes/UpdateDto-4.html",[0,0.474,2,0.994,3,0.129,4,0.118,5,0.113,7,0.351,8,1.365,9,2.65,10,1.363,11,3.249,12,0.964,13,2.541,14,2.045,16,2.766,24,0.902,38,1.084,43,0.007,73,2.431,74,0.308,83,1.119,84,0.567,85,0.129,88,0.006,89,0.006,157,2.489,181,2.859,183,2.685,246,3.507,248,3.331,385,4.283,718,3.81,731,3.507,732,3.744,775,6.109,1061,2.537,1803,4.322,2058,4.549,2488,4.65,3133,3.81,3134,3.81,3136,4.841,3137,4.65,3138,4.841,3139,4.65,3141,4.142,3146,5.685,3147,7.815]],["title/classes/UpdateDto-5.html",[0,0.201,181,1.247,693,2.475]],["body/classes/UpdateDto-5.html",[0,0.474,2,0.994,3,0.129,4,0.118,5,0.113,7,0.351,8,1.365,9,2.65,10,1.363,11,3.249,12,0.964,13,2.541,14,2.045,16,2.766,24,0.902,38,1.084,43,0.007,73,2.431,74,0.308,83,1.119,84,0.567,85,0.129,88,0.006,89,0.006,153,3.744,157,2.489,181,2.859,183,2.685,246,3.507,248,3.331,380,3.109,718,3.81,731,3.507,732,3.744,1061,2.537,1361,3.966,1803,4.322,2058,4.549,2488,4.65,3133,3.81,3134,3.81,3136,4.841,3137,4.65,3138,4.841,3139,4.65,3141,4.142,3148,5.685,3149,7.815]],["title/classes/UpdateDto-6.html",[0,0.201,181,1.247,1586,2.584]],["body/classes/UpdateDto-6.html",[0,0.474,2,0.994,3,0.129,4,0.118,5,0.113,7,0.351,8,1.365,9,2.65,10,1.363,11,3.249,12,0.964,13,2.541,14,2.045,16,2.766,24,0.902,38,1.084,43,0.007,73,2.431,74,0.308,83,1.119,84,0.567,85,0.129,88,0.006,89,0.006,157,2.489,181,2.859,183,2.685,246,3.507,248,3.331,389,4.049,718,3.81,731,3.507,732,3.744,1061,2.537,1680,6.109,1803,4.322,2058,4.549,2488,4.65,3133,3.81,3134,3.81,3136,4.841,3137,4.65,3138,4.841,3139,4.65,3141,4.142,3150,5.685,3151,7.815]],["title/classes/UpdateDto-7.html",[0,0.201,181,1.247,2567,2.856]],["body/classes/UpdateDto-7.html",[0,0.474,2,0.994,3,0.129,4,0.118,5,0.113,7,0.351,8,1.365,9,2.65,10,1.363,11,3.249,12,0.964,13,2.541,14,2.045,16,2.766,24,0.902,38,1.084,43,0.007,73,2.431,74,0.308,83,1.119,84,0.567,85,0.129,88,0.006,89,0.006,157,2.489,181,2.859,183,2.685,246,3.507,248,3.331,388,5.682,718,3.81,731,3.507,732,3.744,1061,2.537,1723,6.109,1803,4.322,2058,4.549,2488,4.65,3133,3.81,3134,3.81,3136,4.841,3137,4.65,3138,4.841,3139,4.65,3141,4.142,3152,5.685,3153,7.815]],["title/classes/UpdateDto-8.html",[0,0.201,181,1.247,2570,2.71]],["body/classes/UpdateDto-8.html",[0,0.474,2,0.994,3,0.129,4,0.118,5,0.113,7,0.351,8,1.365,9,2.65,10,1.363,11,3.249,12,0.964,13,2.541,14,2.045,16,2.766,24,0.902,38,1.084,43,0.007,73,2.431,74,0.308,83,1.119,84,0.567,85,0.129,88,0.006,89,0.006,157,2.489,181,2.859,183,2.685,246,3.507,248,3.331,386,4.411,718,3.81,731,3.507,732,3.744,1061,2.537,1803,4.322,2058,4.549,2488,4.65,3084,6.109,3133,3.81,3134,3.81,3136,4.841,3137,4.65,3138,4.841,3139,4.65,3141,4.142,3154,5.685,3155,7.815]],["title/classes/UserNotFoundException.html",[0,0.239,3156,3.875]],["body/classes/UserNotFoundException.html",[0,0.32,2,0.99,3,0.128,4,0.117,5,0.086,7,0.379,26,2.95,38,1.039,42,0.399,43,0.008,44,0.902,47,1.997,51,0.656,74,0.251,85,0.128,88,0.006,89,0.006,108,1.181,144,2.163,149,1.251,150,0.736,155,3.089,156,1.688,187,3.501,204,1.251,209,3.428,216,4.543,217,3.417,275,4.825,286,4.169,296,4.326,431,3.594,444,6.391,539,4.468,548,4.468,882,2.209,925,3.694,1117,4.56,1984,5.663,2058,4.659,2061,3.528,3156,7.452,3157,6.923,3158,5.663,3159,9.154,3160,7.797,3161,6.378,3162,7.797,3163,6.378,3164,6.378,3165,6.378]],["title/classes/UtilsService.html",[0,0.239,147,2.39]],["body/classes/UtilsService.html",[0,0.252,2,0.518,3,0.067,4,0.061,5,0.045,7,0.3,12,0.927,18,2.314,26,1.895,36,0.414,38,0.742,42,0.448,43,0.008,44,1,47,1.283,51,0.618,64,0.823,67,2.778,74,0.197,85,0.101,88,0.004,89,0.004,116,1.144,117,1.414,135,2.781,136,1.545,147,3.915,149,1.529,150,0.694,156,0.643,158,1.326,169,2.708,173,2.661,174,3.325,175,3.204,186,1.36,197,1.786,199,2.849,204,1.685,212,1.874,228,1.531,232,2.711,247,4.967,248,3.418,249,3.46,254,4.86,255,2.981,256,4.473,258,3.695,259,3.46,260,4.787,261,4.787,276,1.786,282,4.88,482,1.582,503,2.314,547,4.102,550,1.539,607,2.586,620,1.063,640,1.46,709,3.251,734,3.562,842,3.323,843,4.467,844,3.751,856,2.771,859,1.582,872,4.967,882,2.48,902,1.582,914,2.666,921,1.987,922,2.068,923,1.847,924,2.068,925,1.582,926,2.719,927,2.719,928,2.719,935,4.45,936,2.265,944,2.516,972,2.771,986,3.665,994,2.387,1000,2.679,1013,3.398,1021,1.263,1025,2.068,1056,1.786,1057,2.679,1058,1.786,1059,1.786,1060,1.786,1061,1.323,1085,3.582,1091,2.981,1092,6.657,1102,1.914,1405,3.578,1417,3.398,1425,2.534,1639,7.12,1643,6.347,1644,6.8,1645,6.8,1647,2.965,1648,4.079,1649,6.995,1787,4.079,1798,4.771,1800,4.079,1819,4.895,2112,5.339,2385,4.299,2391,5.071,2424,6.224,2506,3.582,2694,2.965,2696,2.965,2697,4.449,2699,2.965,2700,4.449,2702,2.965,2704,5.339,2846,2.981,3058,2.965,3166,2.965,3167,6.013,3168,6.013,3169,3.339,3170,8.201,3171,3.339,3172,5.339,3173,6.681,3174,4.449,3175,3.339,3176,3.339,3177,3.339,3178,6.013,3179,3.339,3180,3.339,3181,3.339,3182,3.339,3183,6.681,3184,5.01,3185,3.339,3186,3.339,3187,3.339,3188,3.339,3189,3.339,3190,3.339,3191,6.681,3192,3.339,3193,3.339,3194,3.339,3195,3.339,3196,3.339,3197,3.339,3198,3.339,3199,3.339,3200,3.339,3201,3.339,3202,6.013,3203,3.339,3204,3.339,3205,3.339]],["title/changelog.html",[3206,2.856,3207,2.856,3208,3.548]],["body/changelog.html",[43,0.007,88,0.007,89,0.007,185,3.406,328,3.072,503,2.559,856,4.087,1090,4.397,1709,6.016,3208,6.561,3209,7.39,3210,7.555,3211,7.39,3212,7.39,3213,6.561,3214,7.39,3215,7.39,3216,6.561,3217,7.39,3218,6.561,3219,7.39,3220,6.016,3221,7.39,3222,7.39]],["title/contributing.html",[3206,2.856,3207,2.856,3223,3.548]],["body/contributing.html",[14,1.506,43,0.007,47,2.015,66,1.478,88,0.006,89,0.006,140,2.241,150,0.978,156,1.245,213,2.505,301,3.438,352,6.856,397,2.982,574,4.298,693,4.008,733,3.85,858,3.835,882,2.241,948,4.507,1102,3.708,1338,3.249,1481,3.708,1586,4.185,1798,3.85,1868,4.626,2364,4.911,2467,5.623,2487,5.745,2545,5.267,2578,4.388,2665,5.267,3042,5.745,3213,5.745,3216,6.983,3220,5.267,3223,6.983,3224,6.47,3225,6.983,3226,7.524,3227,7.865,3228,7.865,3229,6.47,3230,7.827,3231,6.47,3232,6.47,3233,6.47,3234,6.47,3235,6.47,3236,5.745,3237,7.524,3238,7.524,3239,6.47,3240,6.47,3241,6.47,3242,6.47,3243,6.47,3244,5.267,3245,7.865,3246,7.524,3247,6.47,3248,6.47,3249,6.983,3250,6.983,3251,5.745,3252,7.865,3253,6.47,3254,7.865,3255,6.47,3256,6.47,3257,6.47,3258,5.745,3259,7.524,3260,6.47,3261,5.745,3262,6.47,3263,5.745]],["title/coverage.html",[3264,5.255]],["body/coverage.html",[0,0.487,1,2.141,5,0.04,6,2.66,42,0.188,43,0.008,50,3.501,58,1.277,88,0.004,89,0.004,90,2.273,91,2.66,103,2.791,104,2.438,106,2.66,112,2.621,113,2.438,115,2.66,130,1.419,136,1.444,146,1.551,147,1.504,151,2.249,153,1.277,156,0.576,169,1.133,181,2.481,193,1.277,197,1.602,232,3.798,249,1.551,271,2.438,272,2.66,273,2.66,327,1.828,331,1.277,332,1.309,366,2.273,380,1.06,381,1.602,386,1.504,387,2.032,388,1.937,389,1.381,392,2.273,393,2.66,423,2.66,429,1.419,500,2.66,526,2.273,536,2.438,537,2.66,538,2.66,603,2.273,604,2.66,610,2.032,614,2.032,638,1.716,664,2.66,708,2.66,730,2.66,761,2.141,762,2.66,773,2.273,774,2.66,775,2.032,784,2.032,803,2.66,809,4.579,819,2.66,821,1.855,836,2.032,860,3.644,896,2.273,897,3.755,938,1.937,959,2.141,960,4.269,1013,2.032,1110,2.819,1123,1.657,1124,3.755,1149,2.141,1151,2.141,1153,2.141,1155,2.141,1157,2.141,1160,2.141,1162,2.141,1164,2.141,1166,2.141,1169,1.855,1171,2.273,1335,2.273,1336,2.66,1337,2.984,1350,2.857,1353,2.141,1361,1.855,1379,2.032,1381,4.021,1389,1.381,1400,2.032,1414,2.66,1426,2.141,1434,2.66,1466,2.141,1495,2.273,1496,4.096,1513,2.66,1521,3.755,1525,2.66,1535,2.66,1561,2.438,1567,2.66,1594,2.273,1595,4.096,1596,3.128,1597,2.032,1621,2.66,1652,2.66,1662,2.66,1676,2.273,1677,2.66,1679,2.032,1680,2.032,1706,2.66,1713,2.66,1719,2.273,1720,2.66,1722,2.032,1723,2.032,1740,2.66,1750,2.66,1765,2.66,1776,2.141,1777,3.755,1778,3.501,1779,4.628,1785,2.141,1847,3.759,1848,2.438,1890,2.66,1942,7.62,1956,7.95,1969,2.66,2001,3.755,2026,2.66,2051,2.438,2052,2.66,2053,2.66,2067,3.223,2068,2.66,2069,4.628,2071,1.782,2081,2.66,2089,4.285,2090,2.66,2105,2.66,2137,2.141,2138,2.66,2140,2.273,2149,2.273,2150,2.66,2176,2.438,2178,2.66,2179,2.66,2180,2.273,2184,2.032,2187,1.855,2216,2.66,2238,2.66,2249,2.66,2256,2.273,2257,2.66,2271,2.032,2301,2.273,2302,2.66,2321,2.032,2337,2.66,2363,2.66,2372,2.66,2378,2.141,2379,4.269,2383,2.141,2390,4.021,2400,2.141,2402,2.141,2404,2.141,2425,2.141,2479,2.66,2499,2.273,2500,2.66,2501,2.032,2513,2.66,2519,2.66,2520,2.66,2534,2.438,2535,2.66,2536,3.755,2543,2.66,2548,2.66,2549,2.66,2554,2.66,2555,2.66,2556,2.66,2557,2.273,2558,3.755,2561,2.032,2570,2.032,2574,2.438,2614,2.66,2615,2.66,2620,2.66,2624,2.66,2625,2.66,2626,2.66,2627,2.66,2653,3.755,2670,2.66,2719,2.273,2720,2.66,2747,2.66,2811,2.66,2827,2.66,2843,2.66,2867,2.66,2915,2.66,2951,2.66,2965,2.66,2974,2.66,2982,2.66,2990,2.66,2999,2.66,3014,2.438,3015,2.66,3016,2.66,3023,2.66,3035,2.438,3036,2.66,3044,2.438,3073,2.66,3080,2.273,3081,2.66,3083,2.032,3084,2.032,3110,2.66,3123,2.66,3131,2.66,3135,2.66,3142,2.66,3144,2.66,3146,2.66,3148,2.66,3150,2.66,3152,2.66,3154,2.66,3156,2.438,3157,2.66,3158,2.66,3166,2.66,3264,2.438,3265,2.995,3266,7.207,3267,2.995,3268,8.924,3269,6.823,3270,2.995,3271,2.995,3272,2.995,3273,4.613,3274,2.995,3275,4.096,3276,8.12,3277,2.995,3278,2.995,3279,2.995,3280,5.625,3281,5.625,3282,5.625,3283,2.995,3284,2.995,3285,8.12,3286,7.752,3287,4.613,3288,2.995,3289,2.995,3290,2.995,3291,5.625,3292,2.995,3293,9.396,3294,2.995,3295,2.995,3296,2.66,3297,2.995,3298,4.613,3299,2.995,3300,2.66,3301,8.263,3302,7.207,3303,7.207,3304,2.995,3305,2.995,3306,2.995,3307,5.625,3308,2.995,3309,4.613,3310,2.66,3311,2.66,3312,2.995,3313,2.995,3314,2.995,3315,4.613,3316,4.613,3317,2.995,3318,2.995,3319,2.995,3320,4.613,3321,4.613,3322,5.625,3323,2.995,3324,4.613,3325,4.613,3326,2.995,3327,2.995,3328,7.207,3329,5.61,3330,6.318,3331,2.995,3332,2.995,3333,4.613,3334,2.995,3335,2.995,3336,4.613,3337,4.613,3338,4.613,3339,4.613,3340,7.952,3341,7.952,3342,2.995,3343,2.995,3344,2.995,3345,2.995,3346,2.995,3347,2.66,3348,2.66,3349,2.66,3350,2.66,3351,2.995,3352,4.613,3353,2.995,3354,2.995,3355,2.66,3356,2.66,3357,2.995]],["title/dependencies.html",[328,2.376,3358,3.548]],["body/dependencies.html",[0,0.398,32,2.323,33,2.87,43,0.008,76,1.528,88,0.006,89,0.006,108,1.215,287,3.297,301,2.87,305,4.453,306,4.899,328,2.729,399,4.982,414,4.693,420,5.344,431,3.026,508,3.511,1200,4.547,1387,3.631,1973,4.388,2119,4.693,2121,5.344,2122,5.344,2170,4.693,2175,6.022,2489,5.829,2726,4.982,3057,5.829,3359,6.565,3360,6.565,3361,7.934,3362,6.565,3363,6.565,3364,6.565,3365,6.565,3366,8.527,3367,6.565,3368,6.565,3369,6.565,3370,6.565,3371,6.565,3372,6.565,3373,6.565,3374,6.565,3375,6.565,3376,6.565,3377,6.565,3378,6.565,3379,6.565,3380,6.565,3381,5.829,3382,6.565,3383,5.829,3384,6.565,3385,6.565,3386,6.565,3387,6.565,3388,7.934,3389,6.565,3390,5.829,3391,6.565,3392,6.565,3393,6.565,3394,6.565,3395,6.565,3396,6.565,3397,6.565,3398,6.565]],["title/miscellaneous/enumerations.html",[3399,2.71,3400,5.073]],["body/miscellaneous/enumerations.html",[5,0.09,36,0.462,43,0.007,88,0.006,89,0.006,173,2.374,504,5.772,914,3.155,962,3.991,1061,2.658,1147,5.452,1191,6.052,1194,5.772,1209,5.772,1438,4.782,1848,5.46,1867,5.452,1868,5.746,1869,6.1,1970,3.843,1973,4.76,1974,4.154,1983,4.978,2001,5.46,2115,5.956,2213,4.549,2390,4.795,2407,6.1,2408,5.091,2409,5.452,2410,5.746,3399,4.549,3400,5.956,3401,6.707,3402,6.707,3403,5.956,3404,7.137,3405,6.707,3406,5.956,3407,6.707]],["title/miscellaneous/functions.html",[1418,4.336,3399,2.71]],["body/miscellaneous/functions.html",[0,0.457,7,0.391,10,1.064,12,1.044,13,1.693,14,1.596,18,2.374,20,3.753,26,1.971,28,2.337,30,1.625,31,1.212,32,1.843,33,2.277,34,2.881,35,4.355,36,0.358,38,1.093,42,0.569,43,0.007,44,0.705,60,2.697,62,3.099,64,1.889,66,1.19,88,0.005,89,0.005,132,2.401,144,2.324,149,1.704,150,1.003,155,2.717,158,1.269,159,2.835,173,1.843,199,3.631,205,2.616,209,1.927,211,2.881,259,3.55,274,3.724,275,2.985,286,4.098,297,3.518,302,2.166,304,2.881,324,3.724,327,2.717,331,3.266,353,5.198,354,4.747,396,1.729,400,3.953,410,4.957,428,4.382,429,3.631,431,3.532,438,3.953,440,6.629,489,3.369,503,2.82,539,3.928,548,2.985,550,3.16,638,3.928,731,2.337,732,3.266,856,2.881,860,3.898,899,3.533,904,3.792,912,3.226,914,2.229,916,4.24,935,2.697,1013,5.523,1035,1.804,1117,4.901,1169,4.246,1194,3.369,1209,3.369,1338,2.616,1418,3.953,1560,2.985,1678,3.226,1798,3.099,1869,3.953,1875,3.953,1919,3.369,1927,3.226,2069,4.65,2111,4.625,2255,3.724,2276,6.18,2278,4.625,2364,3.953,2400,4.901,2402,4.901,2404,5.479,2480,4.625,2653,4.24,2660,4.625,2661,4.625,2662,4.625,2663,4.625,2665,4.24,2675,3.953,3038,5.581,3039,7.23,3044,5.581,3045,5.581,3046,4.625,3275,4.625,3296,4.625,3300,4.625,3310,4.625,3311,4.625,3347,4.625,3348,6.804,3349,4.625,3350,6.087,3355,4.625,3356,6.087,3399,3.533,3408,5.209,3409,4.625,3410,5.209,3411,5.209,3412,5.209,3413,5.209,3414,5.209,3415,5.209,3416,5.209,3417,5.209,3418,6.856,3419,5.209,3420,5.209,3421,5.209,3422,5.209,3423,5.209,3424,4.625,3425,5.209,3426,5.209,3427,8.856,3428,5.209,3429,5.209,3430,5.209,3431,5.209,3432,5.209,3433,5.209,3434,5.209,3435,5.209,3436,6.856,3437,5.209,3438,5.209,3439,5.209,3440,5.209,3441,5.209,3442,6.856,3443,6.856,3444,4.625,3445,5.209]],["title/index.html",[36,0.275,3206,2.856,3207,2.856]],["body/index.html",[4,0.112,5,0.102,7,0.197,10,0.679,15,1.735,19,1.286,38,1.018,42,0.439,43,0.008,47,2.299,53,2.534,73,1.687,88,0.005,89,0.005,128,2.87,133,1.695,140,2.428,151,3.418,156,0.842,179,2.267,217,1.776,264,1.776,278,1.965,324,4.357,328,1.82,348,1.82,354,4.343,355,2.534,361,3.521,406,4.755,425,4.134,428,3.631,429,3.592,431,3.673,433,3.564,434,3.564,444,3.323,489,2.832,502,3.887,503,2.111,504,2.832,505,2.969,510,4.625,570,3.564,574,3.886,589,3.156,691,3.564,706,3.492,809,3.564,842,1.866,856,3.371,882,1.516,898,3.564,921,4.171,923,3.371,925,2.888,937,3.232,948,2.509,1090,4.511,1091,2.605,1102,2.509,1191,4.134,1194,4.535,1197,4.535,1209,4.535,1439,1.965,1798,2.605,1868,5.012,1871,3.13,1880,5.411,1926,5.411,1983,2.712,2132,5.708,2280,3.887,2333,3.887,2336,3.887,2373,3.887,2411,3.323,2467,3.13,2545,3.564,2581,3.564,2602,3.564,2675,3.323,2732,3.887,2743,3.887,2802,7.076,2809,3.887,2856,3.323,3172,3.887,3206,4.357,3207,5.012,3220,4.961,3225,3.887,3226,5.411,3230,3.887,3237,6.225,3238,3.887,3244,3.564,3246,6.225,3249,3.887,3250,5.411,3251,5.411,3258,3.887,3259,5.411,3261,7.327,3263,7.885,3264,3.564,3381,5.411,3383,3.887,3390,3.887,3444,3.887,3446,5.411,3447,7.581,3448,4.378,3449,4.378,3450,6.095,3451,4.378,3452,6.095,3453,4.378,3454,6.095,3455,4.378,3456,4.378,3457,4.378,3458,4.378,3459,4.378,3460,4.378,3461,6.095,3462,6.095,3463,4.378,3464,4.378,3465,4.378,3466,4.378,3467,4.378,3468,4.378,3469,4.378,3470,4.378,3471,4.378,3472,8.974,3473,7.581,3474,8.252,3475,6.095,3476,4.378,3477,4.378,3478,4.378,3479,4.378,3480,6.095,3481,6.095,3482,4.378,3483,7.011,3484,4.378,3485,4.378,3486,4.378,3487,4.378,3488,4.378,3489,4.378,3490,4.378,3491,4.378,3492,4.378,3493,4.378,3494,4.378,3495,6.095,3496,4.378,3497,6.095,3498,4.378,3499,4.378,3500,4.378,3501,4.378,3502,6.095,3503,4.378,3504,4.378,3505,3.887,3506,4.378,3507,4.378,3508,4.378,3509,4.378,3510,4.378,3511,3.887,3512,3.887,3513,3.887,3514,4.378,3515,4.378,3516,4.378,3517,4.378,3518,4.378,3519,4.378,3520,4.378,3521,4.378,3522,4.378,3523,4.378,3524,4.378,3525,4.378,3526,4.378,3527,4.378,3528,4.378,3529,4.378,3530,4.378,3531,4.378,3532,4.378,3533,4.378,3534,4.378,3535,6.095,3536,6.095,3537,6.095,3538,4.378,3539,4.378,3540,4.378,3541,4.378,3542,4.378,3543,4.378,3544,4.378,3545,4.378,3546,4.378,3547,4.378,3548,4.378,3549,7.011,3550,4.378,3551,4.378,3552,4.378,3553,6.095,3554,6.095,3555,4.378,3556,4.378,3557,4.378,3558,4.378,3559,4.378,3560,4.378,3561,4.378,3562,4.378,3563,7.011,3564,6.095,3565,7.011,3566,4.378,3567,4.378,3568,4.378,3569,4.378,3570,7.011,3571,4.378,3572,4.378,3573,4.378,3574,4.378,3575,4.378,3576,4.378,3577,4.378,3578,4.378,3579,6.095,3580,4.378,3581,4.378,3582,4.378,3583,4.378,3584,4.378,3585,4.378,3586,4.378,3587,5.411,3588,4.961,3589,6.095,3590,4.378,3591,4.378,3592,4.378,3593,4.378,3594,4.378,3595,4.378,3596,3.323,3597,3.887,3598,3.564,3599,3.564,3600,4.378,3601,4.378]],["title/license.html",[3206,2.856,3207,2.856,3596,3.032]],["body/license.html",[26,2.527,43,0.006,88,0.006,89,0.006,306,3.695,348,2.777,401,5.07,429,3.165,734,3.799,882,2.777,918,5.438,1086,4.321,1663,5.07,1912,5.931,2139,4.138,2254,5.931,2484,7.629,2616,5.931,2906,5.438,3210,5.931,3505,5.931,3588,5.438,3596,5.07,3598,5.438,3599,5.438,3602,8.592,3603,8.018,3604,6.68,3605,6.68,3606,6.68,3607,6.68,3608,6.68,3609,6.68,3610,8.018,3611,9.498,3612,6.68,3613,6.68,3614,6.68,3615,6.68,3616,6.68,3617,6.68,3618,6.68,3619,6.68,3620,6.68,3621,6.68,3622,6.68,3623,8.018,3624,6.68,3625,6.68,3626,6.68,3627,6.68,3628,6.68,3629,8.018,3630,8.018,3631,6.68,3632,6.68,3633,6.68,3634,6.68,3635,6.68,3636,6.68,3637,6.68,3638,6.68,3639,6.68,3640,6.68,3641,6.68,3642,6.68,3643,6.68,3644,6.68,3645,6.68,3646,6.68,3647,6.68,3648,6.68,3649,6.68,3650,6.68,3651,6.68,3652,6.68,3653,6.68]],["title/modules.html",[327,2.558]],["body/modules.html",[43,0.006,88,0.006,89,0.006,326,4.854,327,2.691,336,4.854,337,4.854,338,4.854,339,4.854,340,4.854,341,4.854,342,4.854,343,4.854,344,4.854,345,4.854,479,4.606,499,4.392,1197,6.298,2201,4.854,2236,4.854,2237,4.854,3654,9.736,3655,9.736,3656,9.736]],["title/overview.html",[3657,5.732]],["body/overview.html",[2,0.787,43,0.008,84,0.449,88,0.005,89,0.005,105,1.756,114,2.216,130,4.169,146,4.556,147,4.046,326,6.876,327,2.009,328,2.108,329,2.337,330,2.337,331,2.161,332,2.216,333,2.337,334,4.501,335,4.501,336,6.163,337,6.163,338,6.163,339,6.163,340,5.995,341,6.163,342,6.163,343,6.529,344,5.995,345,6.163,346,3.104,347,2.337,348,2.108,479,5.847,497,4.501,498,4.501,499,5.956,610,5.967,699,4.501,700,4.501,701,4.501,784,5.967,814,4.501,815,4.501,816,4.501,821,4.99,1350,5.657,1409,4.501,1410,4.501,1411,4.501,1597,5.129,1617,4.501,1618,4.501,1679,5.967,1722,5.967,1745,4.501,1746,4.501,1747,4.501,1760,4.501,1761,4.501,1762,4.501,2184,5.967,2187,5.449,2201,5.995,2202,4.501,2203,4.501,2204,4.501,2232,4.501,2233,4.501,2234,4.501,2235,4.501,2236,6.163,2237,6.163,2271,5.967,2272,4.501,2273,4.501,2274,4.501,2321,5.967,2327,4.501,2328,4.501,2329,4.501,2476,4.501,2477,4.501,2478,4.501,2501,5.129,2508,4.501,2509,4.501,2542,2.546,3083,5.967,3118,4.501,3119,4.501,3120,4.501,3329,4.501,3657,4.501,3658,5.07,3659,5.07,3660,5.07,3661,5.07]],["title/properties.html",[24,0.66,3358,3.548]],["body/properties.html",[7,0.326,24,0.837,43,0.007,88,0.006,89,0.006,425,4.916,562,7.894,925,3.435,3218,6.436,3236,6.436,3244,6.85,3446,6.436,3511,7.471,3512,7.894,3513,6.436,3587,6.436,3588,5.901,3596,5.501,3597,6.436,3598,5.901,3599,5.901,3662,7.249,3663,7.249,3664,7.249,3665,7.249]],["title/miscellaneous/typealiases.html",[3399,2.71,3666,5.714]],["body/miscellaneous/typealiases.html",[5,0.089,9,2.232,24,0.76,36,0.453,38,0.812,42,0.603,43,0.007,88,0.006,89,0.006,128,2.232,297,3.55,303,3.409,503,3.144,516,5.39,518,6.47,520,5.141,522,6.47,620,2.531,913,5.359,914,2.14,994,4.706,995,4.464,1008,5.4,1417,5.39,1627,7.056,1927,5.492,1970,3.772,2225,5.39,2255,4.706,3038,5.359,3045,5.359,3137,3.916,3139,3.916,3174,8.059,3399,4.464,3403,5.845,3404,8.356,3406,5.845,3409,5.845,3424,5.845,3667,6.582,3668,6.582,3669,6.582,3670,7.947,3671,6.582,3672,7.947,3673,6.582,3674,6.582,3675,6.582,3676,6.582,3677,6.582,3678,6.582,3679,6.582,3680,6.582,3681,6.582,3682,6.582,3683,6.582,3684,6.582,3685,6.582,3686,6.582]]],"invertedIndex":[["",{"_index":43,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/BankController.html":{},"classes/BankDto.html":{},"modules/BankModule.html":{},"injectables/BankService.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"controllers/CityController.html":{},"classes/CityDto.html":{},"modules/CityModule.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService-1.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"modules/CountryMasModule.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/Document.html":{},"controllers/DocumentController.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"controllers/DocumentGroupController.html":{},"classes/DocumentGroupDto.html":{},"modules/DocumentGroupModule.html":{},"injectables/DocumentGroupService.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/State.html":{},"controllers/StateController.html":{},"classes/StateDto.html":{},"modules/StateModule.html":{},"injectables/StateService.html":{},"classes/UpdateDto.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UpdateDto-7.html":{},"classes/UpdateDto-8.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"changelog.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":232,"title":{},"body":{"injectables/AddressTypeService.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"classes/CreateDto.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"injectables/FilesS3PresignedService.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"injectables/SortBy.html":{},"injectables/StateService.html":{},"classes/UtilsService.html":{},"coverage.html":{}}}],["0.13.0",{"_index":3384,"title":{},"body":{"dependencies.html":{}}}],["0.14.1",{"_index":3374,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":3397,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":3373,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":3268,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":3306,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":3319,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":3280,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":3281,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":3309,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":3307,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":3308,"title":{},"body":{"coverage.html":{}}}],["01",{"_index":3212,"title":{},"body":{"changelog.html":{}}}],["01gh",{"_index":684,"title":{},"body":{"classes/BankDto.html":{}}}],["06",{"_index":3219,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":3211,"title":{},"body":{"changelog.html":{}}}],["09407516",{"_index":740,"title":{},"body":{"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"classes/Document.html":{}}}],["1",{"_index":66,"title":{"injectables/CountriesService-1.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/FileResponseDto-1.html":{},"classes/Query-1.html":{},"classes/UpdateDto-1.html":{}},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"classes/BankDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"controllers/CountriesController.html":{},"classes/Country.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{},"classes/Document.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"classes/DocumentGroupDto.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvironmentVariablesValidator.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryCountryDto.html":{},"interfaces/QueryOptions.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/State.html":{},"classes/StateDto.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["1.0.0",{"_index":3218,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["1.0.1",{"_index":3209,"title":{},"body":{"changelog.html":{}}}],["1.0.2",{"_index":3363,"title":{},"body":{"dependencies.html":{}}}],["1.0.23",{"_index":3364,"title":{},"body":{"dependencies.html":{}}}],["1.1.0",{"_index":3378,"title":{},"body":{"dependencies.html":{}}}],["1.4.5",{"_index":3385,"title":{},"body":{"dependencies.html":{}}}],["1.7.2",{"_index":3372,"title":{},"body":{"dependencies.html":{}}}],["1.7.4",{"_index":3376,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":3293,"title":{},"body":{"coverage.html":{}}}],["1/10",{"_index":3288,"title":{},"body":{"coverage.html":{}}}],["1/12",{"_index":3290,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":3327,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":3284,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":3282,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":3330,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":1389,"title":{"classes/Query-10.html":{}},"body":{"controllers/CountriesController.html":{},"classes/CreateDto.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"coverage.html":{}}}],["10.2.3",{"_index":3369,"title":{},"body":{"dependencies.html":{}}}],["10.3.9",{"_index":3366,"title":{},"body":{"dependencies.html":{}}}],["10.8.3",{"_index":3391,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":1956,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"classes/StateDto.html":{},"coverage.html":{}}}],["10})@isoptional()@isnumberstringornumber()@tonumber()@min(10)@max(500",{"_index":2645,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["11.2.2",{"_index":3395,"title":{},"body":{"dependencies.html":{}}}],["11/11",{"_index":3339,"title":{},"body":{"coverage.html":{}}}],["11/12",{"_index":3318,"title":{},"body":{"coverage.html":{}}}],["120",{"_index":484,"title":{},"body":{"controllers/AppController.html":{}}}],["123",{"_index":448,"title":{},"body":{"controllers/AppController.html":{}}}],["1234",{"_index":97,"title":{},"body":{"classes/AddressType.html":{},"classes/BankDto.html":{},"classes/Banks.html":{}}}],["123456",{"_index":2342,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["123e4567",{"_index":1470,"title":{},"body":{"classes/Country.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{}}}],["127",{"_index":1037,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/DynamicQueryBuilder.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{}}}],["12d3",{"_index":1472,"title":{},"body":{"classes/Country.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{}}}],["12ij",{"_index":678,"title":{},"body":{"classes/BankDto.html":{}}}],["13",{"_index":3661,"title":{},"body":{"overview.html":{}}}],["138723",{"_index":2148,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["138723})@isnumber",{"_index":2146,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["14",{"_index":3658,"title":{},"body":{"overview.html":{}}}],["14/14",{"_index":3289,"title":{},"body":{"coverage.html":{}}}],["15/15",{"_index":3317,"title":{},"body":{"coverage.html":{}}}],["16",{"_index":3329,"title":{},"body":{"coverage.html":{},"overview.html":{}}}],["19",{"_index":3659,"title":{},"body":{"overview.html":{}}}],["1a2b3c",{"_index":100,"title":{},"body":{"classes/AddressType.html":{},"classes/Banks.html":{}}}],["1a2b3c4d",{"_index":94,"title":{},"body":{"classes/AddressType.html":{},"classes/Banks.html":{}}}],["1b3fd064",{"_index":473,"title":{},"body":{"controllers/AppController.html":{}}}],["1})@isoptional()@isnumberstringornumber()@tonumber()@min(1",{"_index":2647,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["1}.${field}`).join",{"_index":1054,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["2",{"_index":858,"title":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileResponseDto-2.html":{},"classes/Query-2.html":{},"classes/UpdateDto-2.html":{}},"body":{"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/Currency.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/SortBy.html":{},"contributing.html":{}}}],["2/2",{"_index":3301,"title":{},"body":{"coverage.html":{}}}],["2/3",{"_index":3325,"title":{},"body":{"coverage.html":{}}}],["2/5",{"_index":3313,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":809,"title":{},"body":{"classes/CityDto.html":{},"coverage.html":{},"index.html":{}}}],["2023",{"_index":454,"title":{},"body":{"controllers/AppController.html":{}}}],["2024",{"_index":3210,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["2027",{"_index":456,"title":{},"body":{"controllers/AppController.html":{}}}],["234",{"_index":458,"title":{},"body":{"controllers/AppController.html":{}}}],["2345",{"_index":685,"title":{},"body":{"classes/BankDto.html":{}}}],["244e44a80875",{"_index":756,"title":{},"body":{"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"classes/State.html":{},"classes/StateDto.html":{}}}],["25",{"_index":1709,"title":{},"body":{"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"changelog.html":{}}}],["270",{"_index":1486,"title":{},"body":{"classes/Country.html":{}}}],["2bed",{"_index":474,"title":{},"body":{"controllers/AppController.html":{}}}],["2e5e0c2e5870",{"_index":750,"title":{},"body":{"classes/Banks.html":{},"classes/Cities.html":{},"classes/State.html":{}}}],["3",{"_index":1481,"title":{"classes/EnvironmentVariablesValidator-3.html":{},"classes/Query-3.html":{},"classes/UpdateDto-3.html":{}},"body":{"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"contributing.html":{}}}],["3.0.1",{"_index":3387,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":3365,"title":{},"body":{"dependencies.html":{}}}],["3.2.2",{"_index":3367,"title":{},"body":{"dependencies.html":{}}}],["3.609.0",{"_index":3359,"title":{},"body":{"dependencies.html":{}}}],["3.613.0",{"_index":3360,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":3276,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":3287,"title":{},"body":{"coverage.html":{}}}],["3/5",{"_index":3326,"title":{},"body":{"coverage.html":{}}}],["3000",{"_index":1888,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["3166",{"_index":1477,"title":{},"body":{"classes/Country.html":{},"classes/CreateCountryDto.html":{}}}],["33",{"_index":3283,"title":{},"body":{"coverage.html":{}}}],["330",{"_index":1494,"title":{},"body":{"classes/Country.html":{}}}],["3456",{"_index":679,"title":{},"body":{"classes/BankDto.html":{}}}],["3600",{"_index":2136,"title":{},"body":{"classes/FileType.html":{},"injectables/FilesS3PresignedService.html":{}}}],["383e6490f5d5",{"_index":1550,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["3a10e186",{"_index":746,"title":{},"body":{"classes/Banks.html":{},"classes/Cities.html":{},"classes/State.html":{}}}],["3a25",{"_index":2074,"title":{},"body":{"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileType.html":{}}}],["4",{"_index":2578,"title":{"classes/Query-4.html":{},"classes/UpdateDto-4.html":{}},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"contributing.html":{}}}],["4.1.0",{"_index":3389,"title":{},"body":{"dependencies.html":{}}}],["4.19.2",{"_index":3379,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":3302,"title":{},"body":{"coverage.html":{}}}],["4/5",{"_index":3336,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":3312,"title":{},"body":{"coverage.html":{}}}],["421939d4",{"_index":1667,"title":{},"body":{"classes/Document.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{}}}],["424a",{"_index":1548,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["426614174000",{"_index":1474,"title":{},"body":{"classes/Country.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{}}}],["4298",{"_index":742,"title":{},"body":{"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"classes/Document.html":{}}}],["4adb",{"_index":2075,"title":{},"body":{"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileType.html":{}}}],["4aec",{"_index":748,"title":{},"body":{"classes/Banks.html":{},"classes/Cities.html":{},"classes/State.html":{}}}],["4baa",{"_index":754,"title":{},"body":{"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"classes/State.html":{},"classes/StateDto.html":{}}}],["4bb4",{"_index":475,"title":{},"body":{"controllers/AppController.html":{}}}],["4f58",{"_index":1669,"title":{},"body":{"classes/Document.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{}}}],["5",{"_index":693,"title":{"classes/Query-5.html":{},"classes/UpdateDto-5.html":{}},"body":{"classes/BankDto.html":{},"classes/CountryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"contributing.html":{}}}],["5.17.0",{"_index":3370,"title":{},"body":{"dependencies.html":{}}}],["5/10",{"_index":3279,"title":{},"body":{"coverage.html":{}}}],["5/5",{"_index":3303,"title":{},"body":{"coverage.html":{}}}],["5/6",{"_index":3338,"title":{},"body":{"coverage.html":{}}}],["5/8",{"_index":3316,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":50,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{},"controllers/CountriesController.html":{},"coverage.html":{}}}],["500",{"_index":2419,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/SortByDto.html":{}}}],["5242880",{"_index":1333,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["5432",{"_index":1948,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["544",{"_index":459,"title":{},"body":{"controllers/AppController.html":{}}}],["5678",{"_index":95,"title":{},"body":{"classes/AddressType.html":{},"classes/BankDto.html":{},"classes/Banks.html":{}}}],["56789abcdef0",{"_index":98,"title":{},"body":{"classes/AddressType.html":{},"classes/BankDto.html":{},"classes/Banks.html":{}}}],["59f48b87c094",{"_index":744,"title":{},"body":{"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"classes/Document.html":{}}}],["5:30",{"_index":1483,"title":{},"body":{"classes/Country.html":{}}}],["5mb",{"_index":1334,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["6",{"_index":1586,"title":{"classes/Query-6.html":{},"classes/UpdateDto-6.html":{}},"body":{"classes/CreateDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"contributing.html":{}}}],["6/6",{"_index":3333,"title":{},"body":{"coverage.html":{}}}],["6/7",{"_index":3335,"title":{},"body":{"coverage.html":{}}}],["6/8",{"_index":3328,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":2574,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"coverage.html":{}}}],["62",{"_index":3315,"title":{},"body":{"coverage.html":{}}}],["65535",{"_index":1937,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["66",{"_index":3324,"title":{},"body":{"coverage.html":{}}}],["6789",{"_index":683,"title":{},"body":{"classes/BankDto.html":{}}}],["67890abcdef1",{"_index":686,"title":{},"body":{"classes/BankDto.html":{}}}],["69",{"_index":3660,"title":{},"body":{"overview.html":{}}}],["6b64",{"_index":1547,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["7",{"_index":2567,"title":{"classes/Query-7.html":{},"classes/UpdateDto-7.html":{}},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{}}}],["7.1.0",{"_index":3382,"title":{},"body":{"dependencies.html":{}}}],["7.3.1",{"_index":3368,"title":{},"body":{"dependencies.html":{}}}],["7.4.0",{"_index":3380,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":3398,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":3285,"title":{},"body":{"coverage.html":{}}}],["7/8",{"_index":3321,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":3286,"title":{},"body":{"coverage.html":{}}}],["76",{"_index":2576,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{}}}],["77",{"_index":2565,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{}}}],["7890",{"_index":677,"title":{},"body":{"classes/BankDto.html":{}}}],["78901abcdef2",{"_index":680,"title":{},"body":{"classes/BankDto.html":{}}}],["8",{"_index":2570,"title":{"classes/Query-8.html":{},"classes/UpdateDto-8.html":{}},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"coverage.html":{}}}],["8.12.0",{"_index":3393,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":3322,"title":{},"body":{"coverage.html":{}}}],["8/9",{"_index":3332,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":1521,"title":{},"body":{"classes/CountryDto.html":{},"classes/CreateDto.html":{},"coverage.html":{}}}],["80d3aa38",{"_index":1546,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["81",{"_index":3277,"title":{},"body":{"coverage.html":{}}}],["83",{"_index":3337,"title":{},"body":{"coverage.html":{}}}],["85",{"_index":3334,"title":{},"body":{"coverage.html":{}}}],["87",{"_index":3320,"title":{},"body":{"coverage.html":{}}}],["88",{"_index":3331,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":2998,"title":{"classes/Query-9.html":{}},"body":{}}],["9/11",{"_index":3278,"title":{},"body":{"coverage.html":{}}}],["9/9",{"_index":3323,"title":{},"body":{"coverage.html":{}}}],["90ef",{"_index":96,"title":{},"body":{"classes/AddressType.html":{},"classes/BankDto.html":{},"classes/Banks.html":{}}}],["91",{"_index":1466,"title":{},"body":{"classes/Country.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{},"coverage.html":{}}}],["9]+(,[0",{"_index":930,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["9]+)*$/.test(propertyvalue",{"_index":931,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["9a86",{"_index":749,"title":{},"body":{"classes/Banks.html":{},"classes/Cities.html":{},"classes/State.html":{}}}],["_",{"_index":554,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/DynamicQueryBuilder.html":{},"classes/HttpErrorFilter.html":{},"injectables/PrismaService.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{}}}],["_.clone(errorresponse",{"_index":2532,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["_.clone(r",{"_index":596,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["_.clone(request.body",{"_index":590,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{}}}],["_.clone(request.header",{"_index":592,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{}}}],["_.get(dto",{"_index":1028,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["_.get(where",{"_index":2854,"title":{},"body":{"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{}}}],["_.isarray(r.message",{"_index":564,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["_.isempty(rows",{"_index":2800,"title":{},"body":{"injectables/PrismaService.html":{}}}],["_.keys(conds",{"_index":1808,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryOptions.html":{}}}],["_.mapkeys(where",{"_index":2864,"title":{},"body":{"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{}}}],["_.pick(dto",{"_index":1019,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["_.pick(values",{"_index":1807,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["_.pick(where",{"_index":2857,"title":{},"body":{"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{}}}],["_.unset(dto",{"_index":1029,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["_.unset(where",{"_index":2861,"title":{},"body":{"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{}}}],["_.values(conds",{"_index":1810,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"interfaces/QueryOptions.html":{}}}],["_validationfilter",{"_index":541,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["_validationfilter(validationerrors",{"_index":544,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["a09a",{"_index":753,"title":{},"body":{"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"classes/State.html":{},"classes/StateDto.html":{}}}],["a12b34cd",{"_index":671,"title":{},"body":{"classes/BankDto.html":{}}}],["a456",{"_index":1473,"title":{},"body":{"classes/Country.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{}}}],["a5f3686b1b53",{"_index":477,"title":{},"body":{"controllers/AppController.html":{}}}],["a6a7",{"_index":743,"title":{},"body":{"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"classes/Document.html":{}}}],["a95b",{"_index":1549,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["a9c6",{"_index":2076,"title":{},"body":{"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileType.html":{}}}],["a9f4",{"_index":755,"title":{},"body":{"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"classes/State.html":{},"classes/StateDto.html":{}}}],["aa03",{"_index":1670,"title":{},"body":{"classes/Document.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{}}}],["abbr",{"_index":1447,"title":{},"body":{"classes/Country.html":{}}}],["abbreviation",{"_index":1457,"title":{},"body":{"classes/Country.html":{}}}],["abc",{"_index":2453,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["abc123",{"_index":2095,"title":{},"body":{"classes/FileResponseDto-2.html":{}}}],["above",{"_index":3628,"title":{},"body":{"license.html":{}}}],["abstract",{"_index":2664,"title":{},"body":{"classes/PaginationResponseDto.html":{}}}],["accept",{"_index":1088,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["access",{"_index":883,"title":{},"body":{"injectables/CityService.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"modules/FilesS3Module.html":{},"injectables/HomeService.html":{}}}],["accessing",{"_index":2116,"title":{},"body":{"classes/FileType.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["accesskeyid",{"_index":1324,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"interfaces/IFileConfig.html":{}}}],["accessors",{"_index":1127,"title":{},"body":{"classes/ConfigService.html":{}}}],["acl",{"_index":2335,"title":{},"body":{"modules/FilesS3PresignedModule.html":{}}}],["action",{"_index":3650,"title":{},"body":{"license.html":{}}}],["actions",{"_index":2769,"title":{},"body":{"injectables/PrismaService.html":{}}}],["active",{"_index":69,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"classes/BankDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"classes/Document.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"classes/DocumentGroupDto.html":{}}}],["actual",{"_index":866,"title":{},"body":{"injectables/CityService.html":{}}}],["add",{"_index":1102,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/DynamicQueryBuilder.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{},"contributing.html":{},"index.html":{}}}],["adddress",{"_index":240,"title":{},"body":{"injectables/AddressTypeService.html":{}}}],["addhttpqueryerror",{"_index":2839,"title":{},"body":{"classes/Query-1.html":{}}}],["addhttpqueryerror(module",{"_index":2840,"title":{},"body":{"classes/Query-1.html":{}}}],["adding",{"_index":1818,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["additional",{"_index":1085,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/HttpErrorFilter.html":{},"interfaces/QueryConfig.html":{},"classes/UtilsService.html":{}}}],["additionalconditions",{"_index":846,"title":{},"body":{"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["addqueryerror",{"_index":2813,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["addqueryerror(module",{"_index":2814,"title":{},"body":{"classes/Query.html":{}}}],["addres",{"_index":122,"title":{},"body":{"injectables/AddressTypeService.html":{}}}],["addres_type",{"_index":230,"title":{},"body":{"injectables/AddressTypeService.html":{},"classes/Query-4.html":{}}}],["address",{"_index":46,"title":{},"body":{"classes/AddresTypeDto.html":{},"injectables/AddressTypeService.html":{},"controllers/AppController.html":{},"classes/Query-4.html":{},"classes/UpdateDto-2.html":{}}}],["address_type",{"_index":37,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"classes/Query-4.html":{}}}],["address_type='${name",{"_index":2959,"title":{},"body":{"classes/Query-4.html":{}}}],["address_types",{"_index":59,"title":{},"body":{"classes/AddresTypeDto.html":{},"injectables/AddressTypeService.html":{},"classes/Query-4.html":{}}}],["addresss",{"_index":163,"title":{},"body":{"injectables/AddressTypeService.html":{}}}],["addresstype",{"_index":90,"title":{"classes/AddressType.html":{}},"body":{"classes/AddressType.html":{},"injectables/AddressTypeService.html":{},"coverage.html":{}}}],["addresstypecontroller",{"_index":104,"title":{"controllers/AddressTypeController.html":{}},"body":{"controllers/AddressTypeController.html":{},"coverage.html":{}}}],["addresstypeservice",{"_index":113,"title":{"injectables/AddressTypeService.html":{}},"body":{"injectables/AddressTypeService.html":{},"coverage.html":{}}}],["addrestype",{"_index":17,"title":{},"body":{"classes/AddresTypeDto.html":{},"injectables/AddressTypeService.html":{}}}],["addrestypedto",{"_index":1,"title":{"classes/AddresTypeDto.html":{}},"body":{"classes/AddresTypeDto.html":{},"injectables/AddressTypeService.html":{},"classes/UpdateDto-2.html":{},"coverage.html":{}}}],["adhere",{"_index":3255,"title":{},"body":{"contributing.html":{}}}],["adheres",{"_index":27,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"classes/CountryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/StateDto.html":{}}}],["admin",{"_index":1224,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["adrres_type",{"_index":184,"title":{},"body":{"injectables/AddressTypeService.html":{}}}],["against",{"_index":3432,"title":{},"body":{"miscellaneous/functions.html":{}}}],["age",{"_index":2431,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["aggregate",{"_index":360,"title":{},"body":{"modules/ApiModule.html":{}}}],["aggregated",{"_index":3675,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["aggregates",{"_index":350,"title":{},"body":{"modules/ApiModule.html":{}}}],["algorithm",{"_index":1272,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IJWTConfig.html":{}}}],["alias",{"_index":872,"title":{},"body":{"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"injectables/DocumentService.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/QueryConfig.html":{},"injectables/StateService.html":{},"classes/UtilsService.html":{}}}],["aliases",{"_index":994,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{},"classes/UtilsService.html":{},"miscellaneous/typealiases.html":{}}}],["alias}.${field}`).join",{"_index":1050,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["alias}.${filter.field",{"_index":3191,"title":{},"body":{"classes/UtilsService.html":{}}}],["alias}.${sortitem.field",{"_index":3200,"title":{},"body":{"classes/UtilsService.html":{}}}],["alias}.id_country",{"_index":873,"title":{},"body":{"injectables/CityService.html":{},"injectables/StateService.html":{}}}],["alias}.id_document_group",{"_index":1774,"title":{},"body":{"injectables/DocumentService.html":{}}}],["alias}.id_state",{"_index":877,"title":{},"body":{"injectables/CityService.html":{}}}],["alias}.name",{"_index":875,"title":{},"body":{"injectables/CityService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["allconfigtype",{"_index":2225,"title":{},"body":{"injectables/FilesLocalService.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/HomeService.html":{},"injectables/PrismaService.html":{},"miscellaneous/typealiases.html":{}}}],["allexceptionsfilter",{"_index":271,"title":{"classes/AllExceptionsFilter.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["allow",{"_index":2123,"title":{},"body":{"classes/FileType.html":{},"modules/HelperModule.html":{}}}],["allowed",{"_index":978,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"injectables/FilesS3PresignedService.html":{},"interfaces/QueryConfig.html":{}}}],["allowedkeys",{"_index":967,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{}}}],["allowedkeys.join",{"_index":2855,"title":{},"body":{"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{}}}],["allowing",{"_index":3138,"title":{},"body":{"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UpdateDto-7.html":{},"classes/UpdateDto-8.html":{}}}],["allows",{"_index":995,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"controllers/CountriesController.html":{},"modules/FilesModule.html":{},"interfaces/QueryConfig.html":{},"miscellaneous/typealiases.html":{}}}],["along",{"_index":736,"title":{},"body":{"classes/Banks.html":{},"modules/CurrenciesModule.html":{}}}],["alpha",{"_index":1478,"title":{},"body":{"classes/Country.html":{},"classes/CreateCountryDto.html":{}}}],["already",{"_index":207,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["amazing",{"_index":3593,"title":{},"body":{"index.html":{}}}],["amazon",{"_index":2304,"title":{},"body":{"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["and/or",{"_index":3621,"title":{},"body":{"license.html":{}}}],["annotated",{"_index":1445,"title":{},"body":{"classes/Country.html":{},"classes/State.html":{}}}],["another",{"_index":3439,"title":{},"body":{"miscellaneous/functions.html":{}}}],["another_table",{"_index":845,"title":{},"body":{"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["another_table.foreign_key",{"_index":1064,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["any).message",{"_index":322,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["api",{"_index":361,"title":{},"body":{"modules/ApiModule.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/Banks.html":{},"classes/Country.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileResponseDto-1.html":{},"classes/FileType.html":{},"controllers/FilesS3Controller.html":{},"injectables/HomeService.html":{},"interfaces/IAppConfig.html":{},"classes/State.html":{},"index.html":{}}}],["api/v1/uploads/example",{"_index":2078,"title":{},"body":{"classes/FileResponseDto.html":{},"injectables/FilesLocalService.html":{}}}],["api_key",{"_index":1307,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/ISMSConfig.html":{}}}],["api_prefix",{"_index":1178,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{}}}],["apibody",{"_index":2171,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["apiconsumes",{"_index":2172,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["apiconsumes('multipart/form",{"_index":2192,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["apicreatedresponse",{"_index":636,"title":{},"body":{"controllers/BankController.html":{},"controllers/CityController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"controllers/StateController.html":{}}}],["apicreatedresponse({type",{"_index":2162,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{}}}],["apiexcludeendpoint",{"_index":2173,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["apiextramodels",{"_index":2447,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["apiextramodels(filterdto",{"_index":2465,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["apiextramodels(filterquerydto",{"_index":2449,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["apifile",{"_index":2176,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"coverage.html":{}}}],["apifilterquery",{"_index":1397,"title":{},"body":{"controllers/CountriesController.html":{}}}],["apifilterquery('filters",{"_index":1407,"title":{},"body":{"controllers/CountriesController.html":{}}}],["apifilterquery(fieldname",{"_index":2463,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["apimodule",{"_index":326,"title":{"modules/ApiModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["apimultifile",{"_index":3299,"title":{},"body":{"coverage.html":{}}}],["apinestedquery",{"_index":1401,"title":{},"body":{"controllers/CountriesController.html":{}}}],["apiokresponse",{"_index":635,"title":{},"body":{"controllers/BankController.html":{},"controllers/CityController.html":{},"controllers/CountriesController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"controllers/StateController.html":{}}}],["apiparam",{"_index":637,"title":{},"body":{"controllers/BankController.html":{},"controllers/CityController.html":{},"controllers/CountriesController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"controllers/StateController.html":{}}}],["apiprefix",{"_index":1240,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"injectables/HomeService.html":{},"interfaces/IAppConfig.html":{}}}],["apiproperty",{"_index":75,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"classes/CountryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/State.html":{},"classes/StateDto.html":{}}}],["apiproperty()@isstring",{"_index":3068,"title":{},"body":{"classes/SortByDto.html":{},"classes/SortCountryDto.html":{}}}],["apiproperty()@type(undefined)@isstring",{"_index":3071,"title":{},"body":{"classes/SortCountryDto.html":{}}}],["apiproperty({example",{"_index":2142,"title":{},"body":{"classes/FileUploadDto.html":{},"classes/FilterQueryDto.html":{},"classes/SortByDto.html":{}}}],["apiproperty({type",{"_index":1653,"title":{},"body":{"classes/Currency.html":{},"classes/FileType.html":{},"classes/State.html":{}}}],["apipropertyoptional",{"_index":2380,"title":{},"body":{"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{}}}],["apipropertyoptional()@transform",{"_index":3009,"title":{},"body":{"classes/QueryCountryDto.html":{}}}],["apipropertyoptional({description",{"_index":2644,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["apipropertyoptional({name",{"_index":2639,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["apipropertyoptional({type",{"_index":2630,"title":{},"body":{"classes/PaginationMetaDto.html":{},"classes/QueryCountryDto.html":{}}}],["apiquery",{"_index":1396,"title":{},"body":{"controllers/CountriesController.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["apiresponseproperty",{"_index":102,"title":{},"body":{"classes/AddressType.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"classes/Country.html":{},"classes/CountryMas.html":{},"classes/Document.html":{},"classes/DocumentGroup.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/State.html":{}}}],["apiresponseproperty({type",{"_index":92,"title":{},"body":{"classes/AddressType.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"classes/Country.html":{},"classes/CountryMas.html":{},"classes/Document.html":{},"classes/DocumentGroup.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/State.html":{}}}],["apitags",{"_index":109,"title":{},"body":{"controllers/AddressTypeController.html":{},"controllers/AppController.html":{},"controllers/BankController.html":{},"controllers/CityController.html":{},"controllers/CountriesController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"controllers/HomeController.html":{},"controllers/StateController.html":{}}}],["apitags('address",{"_index":110,"title":{},"body":{"controllers/AddressTypeController.html":{}}}],["apitags('banks",{"_index":643,"title":{},"body":{"controllers/BankController.html":{}}}],["apitags('cities",{"_index":787,"title":{},"body":{"controllers/CityController.html":{}}}],["apitags('countries",{"_index":1354,"title":{},"body":{"controllers/CountriesController.html":{}}}],["apitags('country_mas",{"_index":1506,"title":{},"body":{"controllers/CountryController.html":{}}}],["apitags('currencies",{"_index":1604,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["apitags('documentgroups",{"_index":1731,"title":{},"body":{"controllers/DocumentGroupController.html":{}}}],["apitags('documents",{"_index":1691,"title":{},"body":{"controllers/DocumentController.html":{}}}],["apitags('files",{"_index":2186,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{}}}],["apitags('health",{"_index":426,"title":{},"body":{"controllers/AppController.html":{}}}],["apitags('home",{"_index":2505,"title":{},"body":{"controllers/HomeController.html":{}}}],["apitags('states",{"_index":3095,"title":{},"body":{"controllers/StateController.html":{}}}],["app",{"_index":1875,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"injectables/HomeService.html":{},"miscellaneous/functions.html":{}}}],["app.controller",{"_index":525,"title":{},"body":{"modules/AppModule.html":{}}}],["app/common/helper/services/comman.query",{"_index":828,"title":{},"body":{"injectables/CityService.html":{}}}],["app/common/helper/services/pagination.service",{"_index":190,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/DocumentGroupService.html":{},"injectables/StateService.html":{}}}],["app/common/helper/services/prisma.service",{"_index":191,"title":{},"body":{"injectables/AddressTypeService.html":{}}}],["app/common/helper/services/util.service",{"_index":192,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/DocumentGroupService.html":{},"classes/Query-2.html":{},"injectables/StateService.html":{}}}],["app/utils/dto/pagination",{"_index":194,"title":{},"body":{"injectables/AddressTypeService.html":{}}}],["app/utils/dto/pagination.dto",{"_index":196,"title":{},"body":{"injectables/AddressTypeService.html":{}}}],["app/utils/transformers/upper",{"_index":1562,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["app/utils/types/pagination",{"_index":198,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["app_description",{"_index":1849,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["app_filter",{"_index":364,"title":{},"body":{"modules/ApiModule.html":{},"classes/HttpErrorFilter.html":{}}}],["app_name",{"_index":1850,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["app_port",{"_index":1174,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{}}}],["app_prefix",{"_index":1851,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["app_version",{"_index":1852,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["appconfig",{"_index":516,"title":{},"body":{"modules/AppModule.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/FileType.html":{},"miscellaneous/typealiases.html":{}}}],["appconfig).backenddomain",{"_index":2125,"title":{},"body":{"classes/FileType.html":{}}}],["appcontroller",{"_index":392,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appinfo",{"_index":2502,"title":{},"body":{"controllers/HomeController.html":{},"injectables/HomeService.html":{}}}],["applicable",{"_index":3508,"title":{},"body":{"index.html":{}}}],["application",{"_index":297,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/Country.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"modules/FilesS3Module.html":{},"injectables/FilesService.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"injectables/ResolvePromisesInterceptor.html":{},"classes/State.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["application's",{"_index":398,"title":{},"body":{"controllers/AppController.html":{},"injectables/HomeService.html":{}}}],["applications",{"_index":3460,"title":{},"body":{"index.html":{}}}],["applies",{"_index":2267,"title":{},"body":{"controllers/FilesS3Controller.html":{}}}],["apply",{"_index":2411,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"index.html":{}}}],["applydecorators",{"_index":2454,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["appmodule",{"_index":479,"title":{"modules/AppModule.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/HttpErrorFilter.html":{},"modules.html":{},"overview.html":{}}}],["appprefix",{"_index":1878,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"injectables/HomeService.html":{}}}],["appropriate",{"_index":612,"title":{},"body":{"controllers/BankController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"modules/FilesModule.html":{},"controllers/StateController.html":{}}}],["area",{"_index":1837,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["arg",{"_index":982,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["args",{"_index":908,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["args.property",{"_index":933,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["arguments",{"_index":909,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"injectables/SortBy.html":{}}}],["argumentshost",{"_index":292,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["arising",{"_index":3652,"title":{},"body":{"license.html":{}}}],["array",{"_index":550,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"controllers/CountriesController.html":{},"modules/FilesModule.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PrismaService.html":{},"classes/Query-3.html":{},"interfaces/QueryConfig.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{}}}],["array.from(array(endpage",{"_index":2603,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["array.isarray(value",{"_index":1056,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/UtilsService.html":{}}}],["asas",{"_index":2223,"title":{},"body":{"injectables/FilesLocalService.html":{}}}],["asc",{"_index":939,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{}}}],["asc'})@isstring()@matches(/^(asc|desc|asc|desc",{"_index":3066,"title":{},"body":{"classes/SortByDto.html":{}}}],["asc1",{"_index":2452,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["ascending",{"_index":2432,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["asc|desc|asc|desc|asc|desc",{"_index":957,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["asia",{"_index":1460,"title":{},"body":{"classes/Country.html":{},"classes/CreateCountryDto.html":{}}}],["asia/mumbai",{"_index":1492,"title":{},"body":{"classes/Country.html":{}}}],["associated",{"_index":1663,"title":{},"body":{"classes/Document.html":{},"classes/FileType.html":{},"classes/Query.html":{},"license.html":{}}}],["async",{"_index":139,"title":{},"body":{"injectables/AddressTypeService.html":{},"controllers/AppController.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query-2.html":{},"injectables/SortBy.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{}}}],["asynchronously",{"_index":2334,"title":{},"body":{"modules/FilesS3PresignedModule.html":{}}}],["attributes",{"_index":1437,"title":{},"body":{"classes/Country.html":{},"classes/State.html":{}}}],["audience",{"_index":1276,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IJWTConfig.html":{}}}],["authentication",{"_index":3462,"title":{},"body":{"index.html":{}}}],["author",{"_index":3597,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authorization",{"_index":3488,"title":{},"body":{"index.html":{}}}],["authors",{"_index":3644,"title":{},"body":{"license.html":{}}}],["authsource",{"_index":1223,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["automatic",{"_index":2458,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["automatically",{"_index":993,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["available",{"_index":2213,"title":{},"body":{"modules/FilesLocalModule.html":{},"modules/HelperModule.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"miscellaneous/enumerations.html":{}}}],["await",{"_index":214,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"injectables/StateService.html":{}}}],["awesome",{"_index":3470,"title":{},"body":{"index.html":{}}}],["aws",{"_index":1200,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"dependencies.html":{}}}],["aws_access_key_id",{"_index":1185,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["aws_default_s3_bucket",{"_index":1187,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["aws_s3_access_key_id",{"_index":1244,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IAwsConfig.html":{}}}],["aws_s3_bucket_name",{"_index":1248,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IAwsConfig.html":{}}}],["aws_s3_companion_secret",{"_index":1258,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IAwsConfig.html":{}}}],["aws_s3_default_region",{"_index":1250,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IAwsConfig.html":{}}}],["aws_s3_endpoint",{"_index":1254,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IAwsConfig.html":{}}}],["aws_s3_region",{"_index":1188,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["aws_s3_secret_access_key",{"_index":1246,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IAwsConfig.html":{}}}],["aws_s3_server_host",{"_index":1256,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IAwsConfig.html":{}}}],["aws_s3_temp_directory",{"_index":1252,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IAwsConfig.html":{}}}],["aws_secret_access_key",{"_index":1186,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["awsdefaults3bucket",{"_index":1328,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"interfaces/IFileConfig.html":{}}}],["awss3config",{"_index":1243,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["awss3region",{"_index":1330,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"interfaces/IFileConfig.html":{}}}],["axios",{"_index":3371,"title":{},"body":{"dependencies.html":{}}}],["b",{"_index":3248,"title":{},"body":{"contributing.html":{}}}],["b23c45de",{"_index":682,"title":{},"body":{"classes/BankDto.html":{}}}],["b3af",{"_index":476,"title":{},"body":{"controllers/AppController.html":{}}}],["b484",{"_index":1668,"title":{},"body":{"classes/Document.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{}}}],["backend",{"_index":2113,"title":{},"body":{"classes/FileType.html":{},"interfaces/IAppConfig.html":{}}}],["backend_domain",{"_index":1177,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{}}}],["backenddomain",{"_index":1237,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"interfaces/IAppConfig.html":{}}}],["backers",{"_index":3594,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":437,"title":{},"body":{"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/FileNotImageException.html":{}}}],["badrequestexceptionfilter",{"_index":536,"title":{"classes/BadRequestExceptionFilter.html":{}},"body":{"classes/BadRequestExceptionFilter.html":{},"coverage.html":{}}}],["baeumer",{"_index":3521,"title":{},"body":{"index.html":{}}}],["bank",{"_index":605,"title":{},"body":{"controllers/BankController.html":{},"classes/BankDto.html":{},"modules/BankModule.html":{},"injectables/BankService.html":{},"classes/Banks.html":{},"classes/Query-5.html":{},"classes/UpdateDto-3.html":{}}}],["bank.controller",{"_index":707,"title":{},"body":{"modules/BankModule.html":{}}}],["bank.service",{"_index":641,"title":{},"body":{"controllers/BankController.html":{},"modules/BankModule.html":{}}}],["bankcontroller",{"_index":603,"title":{"controllers/BankController.html":{}},"body":{"controllers/BankController.html":{},"modules/BankModule.html":{},"coverage.html":{}}}],["bankdto",{"_index":614,"title":{"classes/BankDto.html":{}},"body":{"controllers/BankController.html":{},"classes/BankDto.html":{},"injectables/BankService.html":{},"classes/UpdateDto-3.html":{},"coverage.html":{}}}],["bankmodule",{"_index":336,"title":{"modules/BankModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/BankModule.html":{},"modules.html":{},"overview.html":{}}}],["banks",{"_index":387,"title":{"classes/Banks.html":{}},"body":{"modules/ApiModule.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"classes/Banks.html":{},"coverage.html":{}}}],["banks/:id_bank",{"_index":649,"title":{},"body":{"controllers/BankController.html":{}}}],["banks_mas",{"_index":728,"title":{},"body":{"injectables/BankService.html":{},"classes/Query-5.html":{}}}],["bankservice",{"_index":610,"title":{"injectables/BankService.html":{}},"body":{"controllers/BankController.html":{},"modules/BankModule.html":{},"injectables/BankService.html":{},"coverage.html":{},"overview.html":{}}}],["bar",{"_index":465,"title":{},"body":{"controllers/AppController.html":{}}}],["base",{"_index":247,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"controllers/FilesS3Controller.html":{},"classes/Query-3.html":{},"interfaces/QueryConfig.html":{},"classes/UtilsService.html":{}}}],["base64",{"_index":2317,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["baseadditionalconditions",{"_index":1101,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["based",{"_index":259,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"classes/FileType.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/PaginationMetaDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{}}}],["baseexceptionfilter",{"_index":2725,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["basefields",{"_index":1639,"title":{},"body":{"injectables/CurrenciesService.html":{},"classes/UtilsService.html":{}}}],["basefields.join",{"_index":1647,"title":{},"body":{"injectables/CurrenciesService.html":{},"classes/UtilsService.html":{}}}],["basequery",{"_index":250,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/PaginationService.html":{},"injectables/StateService.html":{}}}],["basewhere",{"_index":1093,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["bash",{"_index":3554,"title":{},"body":{"index.html":{}}}],["baz",{"_index":468,"title":{},"body":{"controllers/AppController.html":{}}}],["be123892",{"_index":452,"title":{},"body":{"controllers/AppController.html":{}}}],["before",{"_index":3042,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{},"contributing.html":{}}}],["belongs",{"_index":768,"title":{},"body":{"classes/Cities.html":{},"classes/CityDto.html":{},"classes/Document.html":{},"classes/DocumentDto.html":{},"classes/State.html":{},"classes/StateDto.html":{}}}],["between",{"_index":1936,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"modules/FilesModule.html":{}}}],["bignumberstrings",{"_index":1229,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["binary",{"_index":2193,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["blank",{"_index":2803,"title":{},"body":{"injectables/PrismaService.html":{}}}],["body",{"_index":589,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"controllers/BankController.html":{},"controllers/CityController.html":{},"controllers/CountriesController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"classes/HttpErrorFilter.html":{},"controllers/StateController.html":{},"index.html":{}}}],["boilerplate",{"_index":3447,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":917,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/PaginationResponseDto.html":{},"injectables/SortBy.html":{}}}],["boolean(this.get(key",{"_index":1207,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["bootstrap",{"_index":331,"title":{},"body":{"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/BankModule.html":{},"modules/CityModule.html":{},"modules/CountriesModule.html":{},"modules/CountryMasModule.html":{},"modules/CurrenciesModule.html":{},"modules/DocumentGroupModule.html":{},"modules/DocumentModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{},"modules/StateModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["boundary",{"_index":2462,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["box",{"_index":3464,"title":{},"body":{"index.html":{}}}],["branch",{"_index":3245,"title":{},"body":{"contributing.html":{}}}],["break",{"_index":2736,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["breaking",{"_index":3581,"title":{},"body":{"index.html":{}}}],["browse",{"_index":3656,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":3654,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":1976,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["bucket.s3.amazonaws.com/unique",{"_index":2103,"title":{},"body":{"classes/FileResponseDto-2.html":{}}}],["buffer",{"_index":2551,"title":{},"body":{"interfaces/IFileConfig.html":{}}}],["bug",{"_index":3213,"title":{},"body":{"changelog.html":{},"contributing.html":{}}}],["bugs",{"_index":3236,"title":{},"body":{"contributing.html":{},"properties.html":{}}}],["build",{"_index":257,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/DocumentGroupService.html":{},"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["builddeletequery",{"_index":1780,"title":{},"body":{"classes/DynamicQueryBuilder.html":{}}}],["builddeletequery(options",{"_index":1784,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["builddynamicquery",{"_index":3167,"title":{},"body":{"classes/UtilsService.html":{}}}],["builddynamicquery(paginationquery",{"_index":3169,"title":{},"body":{"classes/UtilsService.html":{}}}],["builder",{"_index":2828,"title":{},"body":{"classes/Query-1.html":{}}}],["building",{"_index":1091,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{},"index.html":{}}}],["buildinsertquery",{"_index":1781,"title":{},"body":{"classes/DynamicQueryBuilder.html":{}}}],["buildinsertquery(options",{"_index":1788,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["buildrun",{"_index":3559,"title":{},"body":{"index.html":{}}}],["builds",{"_index":1787,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{}}}],["buildselectquery",{"_index":1782,"title":{},"body":{"classes/DynamicQueryBuilder.html":{}}}],["buildselectquery(options",{"_index":1790,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["buildtests",{"_index":3544,"title":{},"body":{"index.html":{}}}],["buildupdatequery",{"_index":1783,"title":{},"body":{"classes/DynamicQueryBuilder.html":{}}}],["buildupdatequery(options",{"_index":1792,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["built",{"_index":3172,"title":{},"body":{"classes/UtilsService.html":{},"index.html":{}}}],["bundles",{"_index":703,"title":{},"body":{"modules/BankModule.html":{},"modules/CityModule.html":{},"modules/CountriesModule.html":{},"modules/CountryMasModule.html":{},"modules/CurrenciesModule.html":{},"modules/DocumentGroupModule.html":{},"modules/DocumentModule.html":{},"modules/StateModule.html":{}}}],["business",{"_index":125,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"modules/FilesLocalModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/StateService.html":{}}}],["bytes",{"_index":1988,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileUploadDto.html":{}}}],["c",{"_index":2906,"title":{},"body":{"classes/Query-2.html":{},"classes/Query-3.html":{},"license.html":{}}}],["c${0",{"_index":874,"title":{},"body":{"injectables/CityService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["c.capital",{"_index":2898,"title":{},"body":{"classes/Query-2.html":{}}}],["c.code",{"_index":2928,"title":{},"body":{"classes/Query-3.html":{}}}],["c.continent",{"_index":2897,"title":{},"body":{"classes/Query-2.html":{}}}],["c.decimal_digits",{"_index":2932,"title":{},"body":{"classes/Query-3.html":{}}}],["c.dial_code",{"_index":2896,"title":{},"body":{"classes/Query-2.html":{}}}],["c.id_country='${id",{"_index":2912,"title":{},"body":{"classes/Query-2.html":{}}}],["c.id_currency",{"_index":2927,"title":{},"body":{"classes/Query-3.html":{}}}],["c.iso",{"_index":2892,"title":{},"body":{"classes/Query-2.html":{}}}],["c.iso3",{"_index":2894,"title":{},"body":{"classes/Query-2.html":{}}}],["c.name",{"_index":2891,"title":{},"body":{"classes/Query-2.html":{},"classes/Query-3.html":{}}}],["c.name_plural",{"_index":2929,"title":{},"body":{"classes/Query-3.html":{}}}],["c.nice_name",{"_index":2893,"title":{},"body":{"classes/Query-2.html":{}}}],["c.num_code",{"_index":2895,"title":{},"body":{"classes/Query-2.html":{}}}],["c.rounding",{"_index":2933,"title":{},"body":{"classes/Query-3.html":{}}}],["c.status",{"_index":2911,"title":{},"body":{"classes/Query-2.html":{},"classes/Query-3.html":{}}}],["c.symbol",{"_index":2930,"title":{},"body":{"classes/Query-3.html":{}}}],["c.symbol_native",{"_index":2931,"title":{},"body":{"classes/Query-3.html":{}}}],["c0ac",{"_index":741,"title":{},"body":{"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"classes/Document.html":{}}}],["c34d56ef",{"_index":676,"title":{},"body":{"classes/BankDto.html":{}}}],["c759",{"_index":747,"title":{},"body":{"classes/Banks.html":{},"classes/Cities.html":{},"classes/State.html":{}}}],["ca",{"_index":1906,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["calculate",{"_index":2588,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["call",{"_index":862,"title":{},"body":{"injectables/CityService.html":{}}}],["callback",{"_index":2295,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["called",{"_index":461,"title":{},"body":{"controllers/AppController.html":{},"injectables/PrismaService.html":{}}}],["callhandler",{"_index":3050,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["cantuploadfiletype",{"_index":2352,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["capabilities",{"_index":2673,"title":{},"body":{"injectables/PaginationService.html":{}}}],["capital",{"_index":1442,"title":{},"body":{"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/Query-2.html":{}}}],["case",{"_index":2732,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"index.html":{}}}],["case.transformer",{"_index":1563,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{}}}],["case.transformer.ts",{"_index":3352,"title":{},"body":{"coverage.html":{}}}],["cases",{"_index":3685,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["catch",{"_index":277,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/QueryFailedFilter.html":{}}}],["catch(badrequestexception",{"_index":558,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["catch(exception",{"_index":290,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["catch(httpexception",{"_index":2539,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catch(prisma.prismaclientknownrequesterror",{"_index":2727,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["catch(queryfailederror",{"_index":3024,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["catches",{"_index":294,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["cause",{"_index":2744,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["caused",{"_index":2819,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["cbac",{"_index":3490,"title":{},"body":{"index.html":{}}}],["cbcfa8b8",{"_index":2073,"title":{},"body":{"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileType.html":{}}}],["cd",{"_index":3514,"title":{},"body":{"index.html":{}}}],["cert",{"_index":1967,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["certificate",{"_index":1907,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["certificates",{"_index":1915,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["change",{"_index":2802,"title":{},"body":{"injectables/PrismaService.html":{},"index.html":{}}}],["changelog",{"_index":3208,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["changes",{"_index":3249,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["characters",{"_index":1517,"title":{},"body":{"classes/CountryDto.html":{},"classes/CreateDto.html":{}}}],["charge",{"_index":3607,"title":{},"body":{"license.html":{}}}],["check",{"_index":211,"title":{},"body":{"injectables/AddressTypeService.html":{},"controllers/AppController.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/PrismaService.html":{},"injectables/StateService.html":{},"miscellaneous/functions.html":{}}}],["checking",{"_index":898,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{},"index.html":{}}}],["checkout",{"_index":3247,"title":{},"body":{"contributing.html":{}}}],["checks",{"_index":400,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/PrismaService.html":{},"miscellaneous/functions.html":{}}}],["choice",{"_index":2251,"title":{},"body":{"modules/FilesModule.html":{}}}],["choose",{"_index":3540,"title":{},"body":{"index.html":{}}}],["chore",{"_index":3575,"title":{},"body":{"index.html":{}}}],["cities",{"_index":761,"title":{"classes/Cities.html":{}},"body":{"classes/Cities.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"coverage.html":{}}}],["cities.controller",{"_index":818,"title":{},"body":{"modules/CityModule.html":{}}}],["cities.service",{"_index":785,"title":{},"body":{"controllers/CityController.html":{},"modules/CityModule.html":{}}}],["cities/:id_city",{"_index":791,"title":{},"body":{"controllers/CityController.html":{}}}],["city",{"_index":385,"title":{},"body":{"modules/ApiModule.html":{},"classes/BankDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"controllers/CityController.html":{},"classes/CityDto.html":{},"modules/CityModule.html":{},"injectables/CityService.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/Query-6.html":{},"classes/SortByDto.html":{},"classes/UpdateDto-4.html":{}}}],["city_mas",{"_index":870,"title":{},"body":{"injectables/CityService.html":{},"classes/Query-6.html":{}}}],["citycontroller",{"_index":773,"title":{"controllers/CityController.html":{}},"body":{"controllers/CityController.html":{},"modules/CityModule.html":{},"coverage.html":{}}}],["citydto",{"_index":775,"title":{"classes/CityDto.html":{}},"body":{"controllers/CityController.html":{},"classes/CityDto.html":{},"injectables/CityService.html":{},"classes/UpdateDto-4.html":{},"coverage.html":{}}}],["citymodule",{"_index":337,"title":{"modules/CityModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/CityModule.html":{},"modules.html":{},"overview.html":{}}}],["cityservice",{"_index":784,"title":{"injectables/CityService.html":{}},"body":{"controllers/CityController.html":{},"modules/CityModule.html":{},"injectables/CityService.html":{},"coverage.html":{},"overview.html":{}}}],["claim",{"_index":3647,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/BankDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ConfigService.html":{},"classes/Country.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/Document.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"classes/DocumentGroupDto.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/State.html":{},"classes/StateDto.html":{},"classes/UpdateDto.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UpdateDto-7.html":{},"classes/UpdateDto-8.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{}},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/BankController.html":{},"classes/BankDto.html":{},"modules/BankModule.html":{},"injectables/BankService.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"controllers/CityController.html":{},"classes/CityDto.html":{},"modules/CityModule.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService-1.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"modules/CountryMasModule.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/Document.html":{},"controllers/DocumentController.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"controllers/DocumentGroupController.html":{},"classes/DocumentGroupDto.html":{},"modules/DocumentGroupModule.html":{},"injectables/DocumentGroupService.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/State.html":{},"controllers/StateController.html":{},"classes/StateDto.html":{},"modules/StateModule.html":{},"injectables/StateService.html":{},"classes/UpdateDto.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UpdateDto-7.html":{},"classes/UpdateDto-8.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["classconstructor",{"_index":3443,"title":{},"body":{"miscellaneous/functions.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/BankDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ConfigService.html":{},"classes/Country.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/Document.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"classes/DocumentGroupDto.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/State.html":{},"classes/StateDto.html":{},"classes/UpdateDto.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UpdateDto-7.html":{},"classes/UpdateDto-8.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"overview.html":{}}}],["classreference",{"_index":2661,"title":{},"body":{"classes/PaginationResponseDto.html":{},"miscellaneous/functions.html":{}}}],["clause",{"_index":1092,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{},"classes/UtilsService.html":{}}}],["clauses",{"_index":1800,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{}}}],["client",{"_index":1346,"title":{},"body":{"controllers/CountriesController.html":{},"modules/FilesS3Module.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/ResolvePromisesInterceptor.html":{}}}],["clone",{"_index":3483,"title":{},"body":{"index.html":{}}}],["closed",{"_index":3583,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":2099,"title":{},"body":{"classes/FileResponseDto-2.html":{}}}],["cluster",{"_index":3568,"title":{},"body":{"index.html":{}}}],["cluster_apimodule",{"_index":334,"title":{},"body":{"modules/ApiModule.html":{},"overview.html":{}}}],["cluster_apimodule_imports",{"_index":335,"title":{},"body":{"modules/ApiModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":497,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":498,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_bankmodule",{"_index":699,"title":{},"body":{"modules/BankModule.html":{},"overview.html":{}}}],["cluster_bankmodule_exports",{"_index":701,"title":{},"body":{"modules/BankModule.html":{},"overview.html":{}}}],["cluster_bankmodule_providers",{"_index":700,"title":{},"body":{"modules/BankModule.html":{},"overview.html":{}}}],["cluster_citymodule",{"_index":814,"title":{},"body":{"modules/CityModule.html":{},"overview.html":{}}}],["cluster_citymodule_exports",{"_index":815,"title":{},"body":{"modules/CityModule.html":{},"overview.html":{}}}],["cluster_citymodule_providers",{"_index":816,"title":{},"body":{"modules/CityModule.html":{},"overview.html":{}}}],["cluster_countriesmodule",{"_index":1409,"title":{},"body":{"modules/CountriesModule.html":{},"overview.html":{}}}],["cluster_countriesmodule_exports",{"_index":1411,"title":{},"body":{"modules/CountriesModule.html":{},"overview.html":{}}}],["cluster_countriesmodule_providers",{"_index":1410,"title":{},"body":{"modules/CountriesModule.html":{},"overview.html":{}}}],["cluster_countrymasmodule",{"_index":1530,"title":{},"body":{"modules/CountryMasModule.html":{}}}],["cluster_countrymasmodule_exports",{"_index":1531,"title":{},"body":{"modules/CountryMasModule.html":{}}}],["cluster_countrymasmodule_providers",{"_index":1532,"title":{},"body":{"modules/CountryMasModule.html":{}}}],["cluster_currenciesmodule",{"_index":1617,"title":{},"body":{"modules/CurrenciesModule.html":{},"overview.html":{}}}],["cluster_currenciesmodule_providers",{"_index":1618,"title":{},"body":{"modules/CurrenciesModule.html":{},"overview.html":{}}}],["cluster_documentgroupmodule",{"_index":1745,"title":{},"body":{"modules/DocumentGroupModule.html":{},"overview.html":{}}}],["cluster_documentgroupmodule_exports",{"_index":1747,"title":{},"body":{"modules/DocumentGroupModule.html":{},"overview.html":{}}}],["cluster_documentgroupmodule_providers",{"_index":1746,"title":{},"body":{"modules/DocumentGroupModule.html":{},"overview.html":{}}}],["cluster_documentmodule",{"_index":1760,"title":{},"body":{"modules/DocumentModule.html":{},"overview.html":{}}}],["cluster_documentmodule_exports",{"_index":1762,"title":{},"body":{"modules/DocumentModule.html":{},"overview.html":{}}}],["cluster_documentmodule_providers",{"_index":1761,"title":{},"body":{"modules/DocumentModule.html":{},"overview.html":{}}}],["cluster_fileslocalmodule",{"_index":2202,"title":{},"body":{"modules/FilesLocalModule.html":{},"overview.html":{}}}],["cluster_fileslocalmodule_exports",{"_index":2204,"title":{},"body":{"modules/FilesLocalModule.html":{},"overview.html":{}}}],["cluster_fileslocalmodule_providers",{"_index":2203,"title":{},"body":{"modules/FilesLocalModule.html":{},"overview.html":{}}}],["cluster_filesmodule",{"_index":2232,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_filesmodule_exports",{"_index":2234,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_filesmodule_imports",{"_index":2235,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_filesmodule_providers",{"_index":2233,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_filess3module",{"_index":2272,"title":{},"body":{"modules/FilesS3Module.html":{},"overview.html":{}}}],["cluster_filess3module_exports",{"_index":2273,"title":{},"body":{"modules/FilesS3Module.html":{},"overview.html":{}}}],["cluster_filess3module_providers",{"_index":2274,"title":{},"body":{"modules/FilesS3Module.html":{},"overview.html":{}}}],["cluster_filess3presignedmodule",{"_index":2327,"title":{},"body":{"modules/FilesS3PresignedModule.html":{},"overview.html":{}}}],["cluster_filess3presignedmodule_exports",{"_index":2329,"title":{},"body":{"modules/FilesS3PresignedModule.html":{},"overview.html":{}}}],["cluster_filess3presignedmodule_providers",{"_index":2328,"title":{},"body":{"modules/FilesS3PresignedModule.html":{},"overview.html":{}}}],["cluster_helpermodule",{"_index":2476,"title":{},"body":{"modules/HelperModule.html":{},"overview.html":{}}}],["cluster_helpermodule_exports",{"_index":2477,"title":{},"body":{"modules/HelperModule.html":{},"overview.html":{}}}],["cluster_helpermodule_providers",{"_index":2478,"title":{},"body":{"modules/HelperModule.html":{},"overview.html":{}}}],["cluster_homemodule",{"_index":2508,"title":{},"body":{"modules/HomeModule.html":{},"overview.html":{}}}],["cluster_homemodule_providers",{"_index":2509,"title":{},"body":{"modules/HomeModule.html":{},"overview.html":{}}}],["cluster_statemodule",{"_index":3118,"title":{},"body":{"modules/StateModule.html":{},"overview.html":{}}}],["cluster_statemodule_exports",{"_index":3119,"title":{},"body":{"modules/StateModule.html":{},"overview.html":{}}}],["cluster_statemodule_providers",{"_index":3120,"title":{},"body":{"modules/StateModule.html":{},"overview.html":{}}}],["code",{"_index":574,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/Country.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/FileNotImageException.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/Query-3.html":{},"contributing.html":{},"index.html":{}}}],["codeql",{"_index":3503,"title":{},"body":{"index.html":{}}}],["codes",{"_index":613,"title":{},"body":{"controllers/BankController.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"classes/PrismaClientExceptionFilter.html":{},"controllers/StateController.html":{}}}],["column",{"_index":2738,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"classes/Query-3.html":{}}}],["column_name",{"_index":2740,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["columns",{"_index":1799,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["column’s",{"_index":2739,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["combines",{"_index":2456,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["comes",{"_index":3477,"title":{},"body":{"index.html":{}}}],["comma",{"_index":900,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["command",{"_index":2132,"title":{},"body":{"classes/FileType.html":{},"injectables/FilesS3PresignedService.html":{},"index.html":{}}}],["commaseparated",{"_index":896,"title":{"injectables/CommaSeparated.html":{}},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{},"coverage.html":{}}}],["commit",{"_index":3250,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["commitlint",{"_index":3498,"title":{},"body":{"index.html":{}}}],["commits",{"_index":3501,"title":{},"body":{"index.html":{}}}],["common",{"_index":2480,"title":{},"body":{"modules/HelperModule.html":{},"miscellaneous/functions.html":{}}}],["common/helper/helper.module",{"_index":515,"title":{},"body":{"modules/AppModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["common/helper/services/config.service",{"_index":2286,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["common/shared/services/pgsql.service",{"_index":557,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["commonquery",{"_index":820,"title":{},"body":{"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["commonquery('your_table",{"_index":1062,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["commonquery.findwithdynamicjoin",{"_index":1063,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["commonquery1",{"_index":959,"title":{"classes/CommonQuery1.html":{}},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{},"coverage.html":{}}}],["commonquery5",{"_index":821,"title":{"classes/CommonQuery5.html":{}},"body":{"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"modules/HelperModule.html":{},"interfaces/QueryConfig.html":{},"coverage.html":{},"overview.html":{}}}],["commonquery5('city_mas",{"_index":832,"title":{},"body":{"injectables/CityService.html":{}}}],["community",{"_index":3229,"title":{},"body":{"contributing.html":{}}}],["components",{"_index":2206,"title":{},"body":{"modules/FilesLocalModule.html":{},"injectables/FilesS3Service.html":{}}}],["compose",{"_index":3473,"title":{},"body":{"index.html":{}}}],["compression",{"_index":3375,"title":{},"body":{"dependencies.html":{}}}],["condition",{"_index":839,"title":{},"body":{"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["conditionally",{"_index":2240,"title":{},"body":{"modules/FilesModule.html":{}}}],["conditions",{"_index":1086,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/DynamicQueryBuilder.html":{},"classes/Query-3.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{},"license.html":{}}}],["conditions[key",{"_index":1817,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["condition}${dynamicjoinconditions",{"_index":1108,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["conds",{"_index":1018,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/DynamicQueryBuilder.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{}}}],["config",{"_index":856,"title":{},"body":{"injectables/CityService.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/UtilsService.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["config.alias",{"_index":3184,"title":{},"body":{"classes/UtilsService.html":{}}}],["config.ts",{"_index":3356,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["config.type",{"_index":1866,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileType.html":{},"interfaces/IFileConfig.html":{}}}],["config.type.ts",{"_index":3404,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["config/app.config",{"_index":517,"title":{},"body":{"modules/AppModule.html":{},"classes/FileType.html":{}}}],["config/database.config",{"_index":519,"title":{},"body":{"modules/AppModule.html":{}}}],["config/file.config",{"_index":521,"title":{},"body":{"modules/AppModule.html":{},"classes/FileType.html":{}}}],["config/logger.config",{"_index":523,"title":{},"body":{"modules/AppModule.html":{}}}],["config/type/app",{"_index":1865,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"classes/FileType.html":{}}}],["config/type/config.type",{"_index":2226,"title":{},"body":{"injectables/FilesLocalService.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/HomeService.html":{},"injectables/PrismaService.html":{}}}],["config/type/file",{"_index":1989,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"interfaces/IFileConfig.html":{}}}],["config/type/logger",{"_index":2025,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["configmodule",{"_index":507,"title":{},"body":{"modules/AppModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["configmodule.forroot",{"_index":528,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":1123,"title":{"classes/ConfigService.html":{}},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"injectables/FilesLocalService.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"modules/HelperModule.html":{},"injectables/HomeService.html":{},"injectables/PrismaService.html":{},"coverage.html":{}}}],["configservice.get('database.url",{"_index":2783,"title":{},"body":{"injectables/PrismaService.html":{}}}],["configservice.get('file.awss3region",{"_index":2289,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["configservice.get('file.maxfilesize",{"_index":2300,"title":{},"body":{"modules/FilesS3Module.html":{}}}],["configservice.getorthrow('file.accesskeyid",{"_index":2290,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["configservice.getorthrow('file.awsdefaults3bucket",{"_index":2292,"title":{},"body":{"modules/FilesS3Module.html":{}}}],["configservice.getorthrow('file.secretaccesskey",{"_index":2291,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["configservice.prismaconfig",{"_index":2784,"title":{},"body":{"injectables/PrismaService.html":{}}}],["configuration",{"_index":503,"title":{},"body":{"modules/AppModule.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileType.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/HomeService.html":{},"interfaces/IAppConfig.html":{},"injectables/PrismaService.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/UtilsService.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["configurations",{"_index":2331,"title":{},"body":{"modules/FilesS3PresignedModule.html":{}}}],["configure",{"_index":737,"title":{},"body":{"classes/Banks.html":{},"classes/Cities.html":{},"classes/CountryMas.html":{},"classes/Currency.html":{},"classes/Document.html":{},"classes/DocumentGroup.html":{}}}],["configured",{"_index":2333,"title":{},"body":{"modules/FilesS3PresignedModule.html":{},"index.html":{}}}],["configures",{"_index":2276,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HomeModule.html":{},"miscellaneous/functions.html":{}}}],["configuring",{"_index":358,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"interfaces/IPaginationFieldConfig.html":{}}}],["connection",{"_index":401,"title":{},"body":{"controllers/AppController.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"injectables/PrismaService.html":{},"license.html":{}}}],["connections",{"_index":506,"title":{},"body":{"modules/AppModule.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"injectables/PrismaService.html":{}}}],["connectivity",{"_index":3679,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["connects",{"_index":2779,"title":{},"body":{"injectables/PrismaService.html":{}}}],["console.log",{"_index":1991,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"modules/FilesModule.html":{}}}],["console.log('____________________________________",{"_index":2705,"title":{},"body":{"injectables/PaginationService.html":{}}}],["console.log('all",{"_index":309,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["console.log('bad",{"_index":559,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["console.log('county",{"_index":2989,"title":{},"body":{"classes/Query-7.html":{}}}],["console.log('data",{"_index":2713,"title":{},"body":{"injectables/PaginationService.html":{}}}],["console.log('dattttttttttttttttttttttttt",{"_index":2687,"title":{},"body":{"injectables/PaginationService.html":{}}}],["console.log('delete",{"_index":2913,"title":{},"body":{"classes/Query-2.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{}}}],["console.log('finalcountquery",{"_index":2714,"title":{},"body":{"injectables/PaginationService.html":{}}}],["console.log('find",{"_index":2981,"title":{},"body":{"classes/Query-6.html":{}}}],["console.log('findbyid",{"_index":2958,"title":{},"body":{"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{}}}],["console.log('findbyname",{"_index":2972,"title":{},"body":{"classes/Query-5.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{}}}],["console.log('findbynmae",{"_index":2960,"title":{},"body":{"classes/Query-4.html":{}}}],["console.log('formated",{"_index":2881,"title":{},"body":{"classes/Query-2.html":{}}}],["console.log('generated",{"_index":869,"title":{},"body":{"injectables/CityService.html":{}}}],["console.log('hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhha",{"_index":1384,"title":{},"body":{"controllers/CountriesController.html":{}}}],["console.log('hiii",{"_index":2693,"title":{},"body":{"injectables/PaginationService.html":{}}}],["console.log('http",{"_index":2540,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["console.log('insert",{"_index":2860,"title":{},"body":{"classes/Query-10.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{}}}],["console.log('keys",{"_index":2879,"title":{},"body":{"classes/Query-2.html":{}}}],["console.log('prisma",{"_index":2728,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["console.log('qqqqqqqqqqqqqq",{"_index":2934,"title":{},"body":{"classes/Query-3.html":{}}}],["console.log('qqqqqqqqqqqqqqqqqqqq",{"_index":1838,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["console.log('query",{"_index":855,"title":{},"body":{"injectables/CityService.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/QueryFailedFilter.html":{}}}],["console.log('resultttttttttttttttttttt",{"_index":2806,"title":{},"body":{"injectables/PrismaService.html":{}}}],["console.log('update",{"_index":1609,"title":{},"body":{"controllers/CurrenciesController.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{}}}],["console.log('values",{"_index":2880,"title":{},"body":{"classes/Query-2.html":{}}}],["console.log(e",{"_index":2810,"title":{},"body":{"injectables/PrismaService.html":{}}}],["console.log(offset",{"_index":2715,"title":{},"body":{"injectables/PaginationService.html":{}}}],["console.log(sqlquery",{"_index":887,"title":{},"body":{"injectables/CityService.html":{},"classes/Query-1.html":{}}}],["console_print",{"_index":2044,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["const",{"_index":212,"title":{},"body":{"injectables/AddressTypeService.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileType.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"injectables/StateService.html":{},"classes/UtilsService.html":{}}}],["constraint",{"_index":2734,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["constrainterrors",{"_index":3023,"title":{},"body":{"classes/QueryFailedFilter.html":{},"coverage.html":{}}}],["constrainterrors[exception.constraint",{"_index":3027,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["constructed",{"_index":2112,"title":{},"body":{"classes/FileType.html":{},"classes/UtilsService.html":{}}}],["constructing",{"_index":2563,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/PaginationMetaDto.html":{}}}],["construction",{"_index":2846,"title":{},"body":{"classes/Query-10.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"classes/UtilsService.html":{}}}],["constructor",{"_index":144,"title":{},"body":{"injectables/AddressTypeService.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ConfigService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/FileNotImageException.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/HomeService.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query-2.html":{},"interfaces/QueryConfig.html":{},"classes/QueryFailedFilter.html":{},"injectables/StateService.html":{},"classes/UserNotFoundException.html":{},"miscellaneous/functions.html":{}}}],["constructor(configservice",{"_index":2219,"title":{},"body":{"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/HomeService.html":{},"injectables/PrismaService.html":{}}}],["constructor(error",{"_index":3162,"title":{},"body":{"classes/UserNotFoundException.html":{}}}],["constructor(message",{"_index":2059,"title":{},"body":{"classes/FileNotImageException.html":{}}}],["constructor(model",{"_index":973,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["constructor(paginationservice",{"_index":710,"title":{},"body":{"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["constructor(prisma",{"_index":145,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/PaginationService.html":{}}}],["constructor(private",{"_index":645,"title":{},"body":{"controllers/BankController.html":{},"controllers/CityController.html":{},"controllers/CountriesController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"controllers/HomeController.html":{},"injectables/HomeService.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query-2.html":{},"controllers/StateController.html":{}}}],["constructor(public",{"_index":307,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["constructor(reflector",{"_index":284,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["constructor(undefined",{"_index":2628,"title":{},"body":{"classes/PaginationMetaDto.html":{}}}],["constructor(utilsservice",{"_index":2868,"title":{},"body":{"classes/Query-2.html":{}}}],["constructs",{"_index":2506,"title":{},"body":{"controllers/HomeController.html":{},"injectables/HomeService.html":{},"injectables/PaginationService.html":{},"classes/Query-1.html":{},"classes/UtilsService.html":{}}}],["consumes",{"_index":2189,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["contain",{"_index":2210,"title":{},"body":{"modules/FilesLocalModule.html":{}}}],["contained",{"_index":2660,"title":{},"body":{"classes/PaginationResponseDto.html":{},"miscellaneous/functions.html":{}}}],["container",{"_index":3474,"title":{},"body":{"index.html":{}}}],["containing",{"_index":986,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/DynamicQueryBuilder.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{}}}],["contains",{"_index":300,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/FileResponseDto-1.html":{}}}],["contentlength",{"_index":2359,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["contenttype",{"_index":2293,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["context",{"_index":299,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"injectables/ResolvePromisesInterceptor.html":{}}}],["contextmodule",{"_index":511,"title":{},"body":{"modules/AppModule.html":{}}}],["continent",{"_index":1443,"title":{},"body":{"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/Query-2.html":{}}}],["contract",{"_index":2616,"title":{},"body":{"interfaces/IPaginationFieldConfig.html":{},"license.html":{}}}],["contribute",{"_index":3234,"title":{},"body":{"contributing.html":{}}}],["contributing",{"_index":3223,"title":{"contributing.html":{}},"body":{"contributing.html":{}}}],["contributing.md",{"_index":3224,"title":{},"body":{"contributing.html":{}}}],["contributions",{"_index":3228,"title":{},"body":{"contributing.html":{}}}],["control",{"_index":2602,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"index.html":{}}}],["controller",{"_index":103,"title":{"controllers/AddressTypeController.html":{},"controllers/AppController.html":{},"controllers/BankController.html":{},"controllers/CityController.html":{},"controllers/CountriesController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"controllers/HomeController.html":{},"controllers/StateController.html":{}},"body":{"controllers/AddressTypeController.html":{},"controllers/AppController.html":{},"controllers/BankController.html":{},"controllers/CityController.html":{},"controllers/CountriesController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"controllers/StateController.html":{},"coverage.html":{}}}],["controller('address_type",{"_index":111,"title":{},"body":{"controllers/AddressTypeController.html":{}}}],["controller('banks",{"_index":644,"title":{},"body":{"controllers/BankController.html":{}}}],["controller('cities",{"_index":788,"title":{},"body":{"controllers/CityController.html":{}}}],["controller('document",{"_index":1732,"title":{},"body":{"controllers/DocumentGroupController.html":{}}}],["controller('documents",{"_index":1692,"title":{},"body":{"controllers/DocumentController.html":{}}}],["controller('states",{"_index":3096,"title":{},"body":{"controllers/StateController.html":{}}}],["controllers",{"_index":105,"title":{},"body":{"controllers/AddressTypeController.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/BankController.html":{},"modules/BankModule.html":{},"controllers/CityController.html":{},"modules/CityModule.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"controllers/CountryController.html":{},"modules/CountryMasModule.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"modules/DocumentGroupModule.html":{},"modules/DocumentModule.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"controllers/StateController.html":{},"modules/StateModule.html":{},"overview.html":{}}}],["controls",{"_index":2579,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["conventional",{"_index":3500,"title":{},"body":{"index.html":{}}}],["conversion",{"_index":1098,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["converts",{"_index":3433,"title":{},"body":{"miscellaneous/functions.html":{}}}],["coords",{"_index":2451,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["copies",{"_index":3623,"title":{},"body":{"license.html":{}}}],["copy",{"_index":3610,"title":{},"body":{"license.html":{}}}],["copyfile",{"_index":3342,"title":{},"body":{"coverage.html":{}}}],["copyright",{"_index":3602,"title":{},"body":{"license.html":{}}}],["core",{"_index":502,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["core/enum/file.type",{"_index":1148,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["core/exceptions/http",{"_index":367,"title":{},"body":{"modules/ApiModule.html":{}}}],["core/interfaces/app.interfaces",{"_index":1150,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["core/interfaces/aws.interfaces",{"_index":1152,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["core/interfaces/file.interfaces",{"_index":1154,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["core/interfaces/jwt.interfaces",{"_index":1156,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["core/interfaces/node",{"_index":1158,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["core/interfaces/postgres.interfaces",{"_index":1161,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["core/interfaces/sendgrid.interfaces",{"_index":1163,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["core/interfaces/sms.interfaces",{"_index":1165,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["core/interfaces/upload",{"_index":1167,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["core/validators/field.validator",{"_index":2401,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["correct",{"_index":934,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["correlationid",{"_index":472,"title":{},"body":{"controllers/AppController.html":{}}}],["corresponding",{"_index":2674,"title":{},"body":{"injectables/PaginationService.html":{}}}],["count",{"_index":1649,"title":{},"body":{"injectables/CurrenciesService.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["count(${countbyfield",{"_index":3205,"title":{},"body":{"classes/UtilsService.html":{}}}],["countbyfield",{"_index":3170,"title":{},"body":{"classes/UtilsService.html":{}}}],["countfilterquery",{"_index":2711,"title":{},"body":{"injectables/PaginationService.html":{}}}],["counting",{"_index":3173,"title":{},"body":{"classes/UtilsService.html":{}}}],["countquery",{"_index":261,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/PaginationService.html":{},"injectables/StateService.html":{},"classes/UtilsService.html":{}}}],["countries",{"_index":1337,"title":{},"body":{"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"modules/CountryMasModule.html":{},"classes/Query-2.html":{},"coverage.html":{}}}],["countries.controller",{"_index":1413,"title":{},"body":{"modules/CountriesModule.html":{}}}],["countries.service",{"_index":1351,"title":{},"body":{"controllers/CountriesController.html":{},"modules/CountriesModule.html":{}}}],["countries/:id_country",{"_index":1508,"title":{},"body":{"controllers/CountryController.html":{}}}],["countries/countries.module",{"_index":369,"title":{},"body":{"modules/ApiModule.html":{}}}],["countriescontroller",{"_index":1335,"title":{"controllers/CountriesController.html":{}},"body":{"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"coverage.html":{}}}],["countriesjson",{"_index":3270,"title":{},"body":{"coverage.html":{}}}],["countriesjson1",{"_index":3271,"title":{},"body":{"coverage.html":{}}}],["countrieslist",{"_index":3272,"title":{},"body":{"coverage.html":{}}}],["countriesmodule",{"_index":338,"title":{"modules/CountriesModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/CountriesModule.html":{},"modules.html":{},"overview.html":{}}}],["countriesservice",{"_index":1350,"title":{"injectables/CountriesService-1.html":{}},"body":{"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"modules/CountryMasModule.html":{},"coverage.html":{},"overview.html":{}}}],["country",{"_index":380,"title":{"classes/Country.html":{}},"body":{"modules/ApiModule.html":{},"classes/BankDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService-1.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"modules/CountryMasModule.html":{},"classes/CreateCountryDto.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/Query-2.html":{},"classes/Query-7.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/State.html":{},"classes/StateDto.html":{},"injectables/StateService.html":{},"classes/UpdateDto-5.html":{},"coverage.html":{}}}],["country's",{"_index":1440,"title":{},"body":{"classes/Country.html":{}}}],["country.dto",{"_index":1381,"title":{},"body":{"controllers/CountriesController.html":{},"classes/FilterCountryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortCountryDto.html":{},"coverage.html":{}}}],["country/create",{"_index":1360,"title":{},"body":{"controllers/CountriesController.html":{}}}],["country_mas",{"_index":848,"title":{},"body":{"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"classes/Query-7.html":{},"injectables/StateService.html":{}}}],["country_mas.controller",{"_index":1534,"title":{},"body":{"modules/CountryMasModule.html":{}}}],["country_mas.service",{"_index":1505,"title":{},"body":{"controllers/CountryController.html":{},"modules/CountryMasModule.html":{}}}],["country_mas.status=1",{"_index":851,"title":{},"body":{"injectables/CityService.html":{}}}],["country_name",{"_index":876,"title":{},"body":{"injectables/CityService.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"injectables/StateService.html":{}}}],["countrycontroller",{"_index":1495,"title":{"controllers/CountryController.html":{}},"body":{"controllers/CountryController.html":{},"modules/CountryMasModule.html":{},"coverage.html":{}}}],["countrydto",{"_index":1361,"title":{"classes/CountryDto.html":{}},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"classes/CountryDto.html":{},"classes/CreateCountryDto.html":{},"classes/UpdateDto-5.html":{},"coverage.html":{}}}],["countrymas",{"_index":1426,"title":{"classes/CountryMas.html":{}},"body":{"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"classes/CountryMas.html":{},"coverage.html":{}}}],["countrymasmodule",{"_index":339,"title":{"modules/CountryMasModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/CountryMasModule.html":{},"modules.html":{},"overview.html":{}}}],["coverage",{"_index":3264,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["cr",{"_index":2907,"title":{},"body":{"classes/Query-2.html":{}}}],["cr.id_currency=c.id_currency",{"_index":2908,"title":{},"body":{"classes/Query-2.html":{}}}],["cr.name",{"_index":2900,"title":{},"body":{"classes/Query-2.html":{}}}],["cr.symbol",{"_index":2899,"title":{},"body":{"classes/Query-2.html":{}}}],["create",{"_index":140,"title":{},"body":{"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"interfaces/QueryConfig.html":{},"classes/SortByDto.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{},"contributing.html":{},"index.html":{}}}],["create(@body",{"_index":647,"title":{},"body":{"controllers/BankController.html":{},"controllers/CityController.html":{},"controllers/CountriesController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"controllers/StateController.html":{}}}],["create(countrydto",{"_index":1419,"title":{},"body":{"injectables/CountriesService-1.html":{}}}],["create(createdto",{"_index":152,"title":{},"body":{"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"controllers/CountriesController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{}}}],["create(file",{"_index":2221,"title":{},"body":{"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{}}}],["create.dto",{"_index":3134,"title":{},"body":{"classes/UpdateDto.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UpdateDto-7.html":{},"classes/UpdateDto-8.html":{}}}],["createcitydto",{"_index":789,"title":{},"body":{"controllers/CityController.html":{}}}],["createcountrydto",{"_index":1353,"title":{"classes/CreateCountryDto.html":{}},"body":{"controllers/CountriesController.html":{},"classes/CreateCountryDto.html":{},"classes/UpdateDto.html":{},"coverage.html":{}}}],["created",{"_index":160,"title":{},"body":{"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{}}}],["createdto",{"_index":153,"title":{"classes/CreateDto.html":{}},"body":{"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"controllers/CountriesController.html":{},"controllers/CountryController.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-5.html":{},"coverage.html":{}}}],["createquery",{"_index":969,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{}}}],["createquery(type",{"_index":980,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["creates",{"_index":155,"title":{},"body":{"injectables/AddressTypeService.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/FileNotImageException.html":{},"injectables/FilesS3PresignedService.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PrismaService.html":{},"interfaces/QueryConfig.html":{},"classes/QueryFailedFilter.html":{},"injectables/StateService.html":{},"classes/UserNotFoundException.html":{},"miscellaneous/functions.html":{}}}],["creating",{"_index":15,"title":{},"body":{"classes/AddresTypeDto.html":{},"injectables/AddressTypeService.html":{},"classes/BankDto.html":{},"injectables/BankService.html":{},"classes/CityDto.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"injectables/CountriesService-1.html":{},"classes/CountryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"injectables/CurrenciesService.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/FilesS3PresignedService.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"interfaces/QueryConfig.html":{},"classes/StateDto.html":{},"injectables/StateService.html":{},"index.html":{}}}],["creation",{"_index":1428,"title":{},"body":{"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3Service.html":{}}}],["credentials",{"_index":2129,"title":{},"body":{"classes/FileType.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["ctx",{"_index":311,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["ctx.getrequest",{"_index":314,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["ctx.getresponse",{"_index":313,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["currencies",{"_index":1596,"title":{},"body":{"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"coverage.html":{}}}],["currencies.controller",{"_index":1620,"title":{},"body":{"modules/CurrenciesModule.html":{}}}],["currencies.service",{"_index":1602,"title":{},"body":{"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{}}}],["currencies/:id_currency",{"_index":1606,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["currencies/currencies.module",{"_index":370,"title":{},"body":{"modules/ApiModule.html":{}}}],["currenciescontroller",{"_index":1594,"title":{"controllers/CurrenciesController.html":{}},"body":{"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"coverage.html":{}}}],["currenciesmodule",{"_index":340,"title":{"modules/CurrenciesModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/CurrenciesModule.html":{},"modules.html":{},"overview.html":{}}}],["currenciesservice",{"_index":1597,"title":{"injectables/CurrenciesService.html":{}},"body":{"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"coverage.html":{},"overview.html":{}}}],["currency",{"_index":381,"title":{"classes/Currency.html":{}},"body":{"modules/ApiModule.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/Query-3.html":{},"classes/UpdateDto-1.html":{},"coverage.html":{}}}],["currency_name",{"_index":1448,"title":{},"body":{"classes/Country.html":{},"classes/Query-2.html":{}}}],["current",{"_index":1103,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/HttpErrorFilter.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"interfaces/QueryConfig.html":{}}}],["currentpage",{"_index":2566,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{}}}],["custom",{"_index":539,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/FileNotImageException.html":{},"controllers/FilesS3Controller.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UserNotFoundException.html":{},"miscellaneous/functions.html":{}}}],["d8e94a843431",{"_index":1671,"title":{},"body":{"classes/Document.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{}}}],["damages",{"_index":3648,"title":{},"body":{"license.html":{}}}],["data",{"_index":10,"title":{},"body":{"classes/AddresTypeDto.html":{},"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"classes/BankDto.html":{},"modules/BankModule.html":{},"injectables/BankService.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"controllers/CityController.html":{},"classes/CityDto.html":{},"injectables/CityService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/Document.html":{},"controllers/DocumentController.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"controllers/DocumentGroupController.html":{},"classes/DocumentGroupDto.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/FileResponseDto-1.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"injectables/ResolvePromisesInterceptor.html":{},"classes/SortByDto.html":{},"classes/State.html":{},"controllers/StateController.html":{},"classes/StateDto.html":{},"injectables/StateService.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UpdateDto-7.html":{},"classes/UpdateDto-8.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["data')@apibody({schema",{"_index":2164,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["data.length",{"_index":2691,"title":{},"body":{"injectables/PaginationService.html":{}}}],["data=null",{"_index":2789,"title":{},"body":{"injectables/PrismaService.html":{}}}],["data[key",{"_index":2885,"title":{},"body":{"classes/Query-2.html":{}}}],["database",{"_index":128,"title":{},"body":{"injectables/AddressTypeService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ConfigService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryFailedFilter.html":{},"injectables/StateService.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["database_ca",{"_index":1891,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["database_cert",{"_index":1892,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["database_key",{"_index":1893,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["database_log_level",{"_index":2038,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["database_reject_unauthorized",{"_index":1894,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["database_ssl_enabled",{"_index":1895,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["database_storage",{"_index":2036,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["database_synchronize",{"_index":1896,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["database_url",{"_index":1897,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["databaseconfig",{"_index":518,"title":{},"body":{"modules/AppModule.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"miscellaneous/typealiases.html":{}}}],["databases",{"_index":3471,"title":{},"body":{"index.html":{}}}],["dataquery",{"_index":2682,"title":{},"body":{"injectables/PaginationService.html":{}}}],["datasources",{"_index":2782,"title":{},"body":{"injectables/PrismaService.html":{}}}],["date",{"_index":71,"title":{},"body":{"classes/AddresTypeDto.html":{}}}],["date().toisostring",{"_index":239,"title":{},"body":{"injectables/AddressTypeService.html":{},"classes/AllExceptionsFilter.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/StateService.html":{}}}],["date().tolocaletimestring",{"_index":2527,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["db",{"_index":572,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"injectables/PrismaService.html":{}}}],["dbaeumer.vscode",{"_index":3519,"title":{},"body":{"index.html":{}}}],["dbconfig",{"_index":1212,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["deal",{"_index":3612,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":3653,"title":{},"body":{"license.html":{}}}],["debug",{"_index":470,"title":{},"body":{"controllers/AppController.html":{}}}],["debugging",{"_index":888,"title":{},"body":{"injectables/CityService.html":{}}}],["decimal",{"_index":1576,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{}}}],["decimal_digits",{"_index":1568,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/Query-3.html":{}}}],["declarations",{"_index":330,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/BankModule.html":{},"modules/CityModule.html":{},"modules/CountriesModule.html":{},"modules/CountryMasModule.html":{},"modules/CurrenciesModule.html":{},"modules/DocumentGroupModule.html":{},"modules/DocumentModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{},"modules/StateModule.html":{},"overview.html":{}}}],["declaring",{"_index":2511,"title":{},"body":{"modules/HomeModule.html":{}}}],["decorates",{"_index":430,"title":{},"body":{"controllers/AppController.html":{}}}],["decorator",{"_index":440,"title":{},"body":{"controllers/AppController.html":{},"controllers/FilesS3Controller.html":{},"miscellaneous/functions.html":{}}}],["decorators",{"_index":31,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"controllers/AppController.html":{},"controllers/BankController.html":{},"classes/BankDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"controllers/CityController.html":{},"classes/CityDto.html":{},"controllers/CountriesController.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"classes/Currency.html":{},"classes/Document.html":{},"controllers/DocumentController.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"controllers/DocumentGroupController.html":{},"classes/DocumentGroupDto.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3Service.html":{},"classes/FilterQueryDto.html":{},"controllers/HomeController.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/State.html":{},"controllers/StateController.html":{},"classes/StateDto.html":{},"miscellaneous/functions.html":{}}}],["decorators/api",{"_index":1402,"title":{},"body":{"controllers/CountriesController.html":{}}}],["decorators/api.filter.query",{"_index":1398,"title":{},"body":{"controllers/CountriesController.html":{}}}],["decorators/number.string.validator",{"_index":2403,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["decorators/swagger.schema",{"_index":2177,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["decorators/transforms.decorator",{"_index":2405,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["deep",{"_index":3060,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["deeply",{"_index":3681,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["deepobject",{"_index":2468,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["deeppartial",{"_index":1627,"title":{},"body":{"injectables/CurrenciesService.html":{},"miscellaneous/typealiases.html":{}}}],["deepresolvepromises",{"_index":3044,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["deepresolvepromises(data",{"_index":3063,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["deepresolvepromises(input",{"_index":3420,"title":{},"body":{"miscellaneous/functions.html":{}}}],["default",{"_index":67,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"interfaces/QueryConfig.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/StateDto.html":{},"classes/UtilsService.html":{}}}],["defaultmessage",{"_index":903,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["defaultmessage(args",{"_index":905,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["defaultvalue",{"_index":2027,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["define",{"_index":246,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"classes/Country.html":{},"classes/CountryMas.html":{},"classes/Currency.html":{},"classes/Document.html":{},"classes/DocumentGroup.html":{},"classes/State.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UpdateDto-7.html":{},"classes/UpdateDto-8.html":{}}}],["defined",{"_index":51,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"injectables/AddressTypeService.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/BankController.html":{},"classes/BankDto.html":{},"injectables/BankService.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"controllers/CityController.html":{},"classes/CityDto.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/Document.html":{},"controllers/DocumentController.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"controllers/DocumentGroupController.html":{},"classes/DocumentGroupDto.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/FilterQueryDto.html":{},"controllers/HomeController.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/State.html":{},"controllers/StateController.html":{},"classes/StateDto.html":{},"injectables/StateService.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{}}}],["defines",{"_index":8,"title":{},"body":{"classes/AddresTypeDto.html":{},"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"classes/BankDto.html":{},"modules/BankModule.html":{},"injectables/BankService.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"modules/CityModule.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService-1.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"modules/CountryMasModule.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/Document.html":{},"controllers/DocumentController.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"controllers/DocumentGroupController.html":{},"classes/DocumentGroupDto.html":{},"modules/DocumentGroupModule.html":{},"injectables/DocumentGroupService.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"injectables/FilesService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/Query-10.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"classes/State.html":{},"controllers/StateController.html":{},"classes/StateDto.html":{},"modules/StateModule.html":{},"injectables/StateService.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UpdateDto-7.html":{},"classes/UpdateDto-8.html":{}}}],["delete",{"_index":141,"title":{},"body":{"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{}}}],["delete(':id",{"_index":1703,"title":{},"body":{"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{}}}],["delete(':id')@httpcode(httpstatus.ok)@apiparam({name",{"_index":1682,"title":{},"body":{"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{}}}],["delete(':id_bank",{"_index":660,"title":{},"body":{"controllers/BankController.html":{}}}],["delete(':id_bank')@httpcode(httpstatus.ok)@apiparam({name",{"_index":617,"title":{},"body":{"controllers/BankController.html":{}}}],["delete(':id_city",{"_index":800,"title":{},"body":{"controllers/CityController.html":{}}}],["delete(':id_city')@httpcode(httpstatus.ok)@apiparam({name",{"_index":777,"title":{},"body":{"controllers/CityController.html":{}}}],["delete(':id_state",{"_index":3107,"title":{},"body":{"controllers/StateController.html":{}}}],["delete(':id_state')@httpcode(httpstatus.ok)@apiparam({name",{"_index":3086,"title":{},"body":{"controllers/StateController.html":{}}}],["delete(@param('id",{"_index":1704,"title":{},"body":{"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{}}}],["delete(@param('id_bank",{"_index":662,"title":{},"body":{"controllers/BankController.html":{}}}],["delete(@param('id_city",{"_index":801,"title":{},"body":{"controllers/CityController.html":{}}}],["delete(@param('id_country",{"_index":1370,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CountryController.html":{}}}],["delete(@param('id_currency",{"_index":1615,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["delete(@param('id_state",{"_index":3108,"title":{},"body":{"controllers/StateController.html":{}}}],["delete(`${modules}/:id_country",{"_index":1512,"title":{},"body":{"controllers/CountryController.html":{}}}],["delete(`${modules}/:id_currency",{"_index":1614,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["delete(`deletebyid/:id_country",{"_index":1369,"title":{},"body":{"controllers/CountriesController.html":{}}}],["delete(deletebyid/:id_country)@httpcode(httpstatus.ok)@apiparam({name",{"_index":1341,"title":{},"body":{"controllers/CountriesController.html":{}}}],["delete(id",{"_index":161,"title":{},"body":{"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{}}}],["delete(key",{"_index":2947,"title":{},"body":{"classes/Query-3.html":{}}}],["delete(undefined)@httpcode(httpstatus.ok)@apiparam({name",{"_index":1499,"title":{},"body":{"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{}}}],["deletebyid/:id_country",{"_index":1368,"title":{},"body":{"controllers/CountriesController.html":{}}}],["deleted",{"_index":268,"title":{},"body":{"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{}}}],["deleted[0].deletedid",{"_index":270,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["deleted[0]?.deletedid",{"_index":1432,"title":{},"body":{"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{}}}],["deletedid",{"_index":2866,"title":{},"body":{"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{}}}],["deleteid",{"_index":2949,"title":{},"body":{"classes/Query-3.html":{}}}],["deleteoptions",{"_index":2948,"title":{},"body":{"classes/Query-3.html":{}}}],["deletes",{"_index":714,"title":{},"body":{"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["deletetype",{"_index":1806,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["deleting",{"_index":121,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/Query-10.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"injectables/StateService.html":{}}}],["deletion",{"_index":166,"title":{},"body":{"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{}}}],["delhi",{"_index":1458,"title":{},"body":{"classes/Country.html":{},"classes/CreateCountryDto.html":{}}}],["demonstration",{"_index":894,"title":{},"body":{"injectables/CityService.html":{}}}],["dependencies",{"_index":328,"title":{"dependencies.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/BankModule.html":{},"modules/CityModule.html":{},"modules/CountriesModule.html":{},"modules/CountryMasModule.html":{},"modules/CurrenciesModule.html":{},"modules/DocumentGroupModule.html":{},"modules/DocumentModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{},"modules/StateModule.html":{},"changelog.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["depends",{"_index":2742,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["deployment",{"_index":3564,"title":{},"body":{"index.html":{}}}],["deps",{"_index":3217,"title":{},"body":{"changelog.html":{}}}],["derive",{"_index":1073,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["desc",{"_index":940,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{}}}],["descending",{"_index":2433,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["describe",{"_index":733,"title":{},"body":{"classes/Banks.html":{},"classes/Cities.html":{},"classes/Country.html":{},"classes/CountryMas.html":{},"classes/Currency.html":{},"classes/Document.html":{},"classes/DocumentGroup.html":{},"classes/State.html":{},"contributing.html":{}}}],["description",{"_index":7,"title":{},"body":{"classes/AddresTypeDto.html":{},"injectables/AddressTypeService.html":{},"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/BankController.html":{},"classes/BankDto.html":{},"modules/BankModule.html":{},"injectables/BankService.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"controllers/CityController.html":{},"classes/CityDto.html":{},"modules/CityModule.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService-1.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"modules/CountryMasModule.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/Document.html":{},"controllers/DocumentController.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"controllers/DocumentGroupController.html":{},"classes/DocumentGroupDto.html":{},"modules/DocumentGroupModule.html":{},"injectables/DocumentGroupService.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/State.html":{},"controllers/StateController.html":{},"classes/StateDto.html":{},"modules/StateModule.html":{},"injectables/StateService.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UpdateDto-7.html":{},"classes/UpdateDto-8.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["descriptive",{"_index":1491,"title":{},"body":{"classes/Country.html":{}}}],["designed",{"_index":2374,"title":{},"body":{"injectables/FilesService.html":{},"injectables/ResolvePromisesInterceptor.html":{}}}],["destination",{"_index":2195,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["destroyed",{"_index":2775,"title":{},"body":{"injectables/PrismaService.html":{}}}],["detail",{"_index":3242,"title":{},"body":{"contributing.html":{}}}],["detailed",{"_index":3444,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["details",{"_index":241,"title":{},"body":{"injectables/AddressTypeService.html":{},"controllers/AppController.html":{},"injectables/BankService.html":{},"classes/Country.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"classes/HttpErrorFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/State.html":{}}}],["determined",{"_index":2252,"title":{},"body":{"modules/FilesModule.html":{}}}],["development",{"_index":1209,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["dharmesh",{"_index":3598,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["dial",{"_index":1441,"title":{},"body":{"classes/Country.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{}}}],["dial_code",{"_index":1449,"title":{},"body":{"classes/Country.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{},"classes/Query-2.html":{},"classes/Query-7.html":{}}}],["dialing",{"_index":1469,"title":{},"body":{"classes/Country.html":{},"classes/CreateCountryDto.html":{}}}],["different",{"_index":962,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"modules/FilesModule.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"interfaces/QueryConfig.html":{},"classes/SortByDto.html":{},"miscellaneous/enumerations.html":{}}}],["digits",{"_index":1577,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{}}}],["direction",{"_index":936,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{}}}],["directionregex",{"_index":956,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["directory",{"_index":2547,"title":{},"body":{"interfaces/IAppConfig.html":{}}}],["dirk",{"_index":3520,"title":{},"body":{"index.html":{}}}],["disable",{"_index":922,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{}}}],["disconnects",{"_index":2776,"title":{},"body":{"injectables/PrismaService.html":{}}}],["diskstorage",{"_index":2174,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["display",{"_index":2584,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["distribute",{"_index":3619,"title":{},"body":{"license.html":{}}}],["docker",{"_index":3472,"title":{},"body":{"index.html":{}}}],["dockfile",{"_index":3528,"title":{},"body":{"index.html":{}}}],["docs",{"_index":1880,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"index.html":{}}}],["document",{"_index":389,"title":{"classes/Document.html":{}},"body":{"modules/ApiModule.html":{},"classes/Document.html":{},"controllers/DocumentController.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"controllers/DocumentGroupController.html":{},"classes/DocumentGroupDto.html":{},"modules/DocumentGroupModule.html":{},"injectables/DocumentGroupService.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"classes/FileUploadDto.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"classes/UpdateDto-6.html":{},"coverage.html":{}}}],["document.installation",{"_index":3541,"title":{},"body":{"index.html":{}}}],["document_groups",{"_index":1759,"title":{},"body":{"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/Query-9.html":{}}}],["document_grp.controller",{"_index":1749,"title":{},"body":{"modules/DocumentGroupModule.html":{}}}],["document_grp.service",{"_index":1729,"title":{},"body":{"controllers/DocumentGroupController.html":{},"modules/DocumentGroupModule.html":{}}}],["documentation",{"_index":429,"title":{},"body":{"controllers/AppController.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"classes/Country.html":{},"classes/CountryMas.html":{},"classes/Currency.html":{},"classes/Document.html":{},"classes/DocumentGroup.html":{},"classes/FileResponseDto-1.html":{},"classes/FileType.html":{},"controllers/FilesS3Controller.html":{},"classes/State.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{}}}],["documentcontroller",{"_index":1676,"title":{"controllers/DocumentController.html":{}},"body":{"controllers/DocumentController.html":{},"modules/DocumentModule.html":{},"coverage.html":{}}}],["documentdto",{"_index":1680,"title":{"classes/DocumentDto.html":{}},"body":{"controllers/DocumentController.html":{},"classes/DocumentDto.html":{},"injectables/DocumentService.html":{},"classes/UpdateDto-6.html":{},"coverage.html":{}}}],["documented",{"_index":738,"title":{},"body":{"classes/Banks.html":{},"classes/Cities.html":{},"classes/CountryMas.html":{},"classes/Currency.html":{},"classes/Document.html":{},"classes/DocumentGroup.html":{}}}],["documentgroup",{"_index":388,"title":{"classes/DocumentGroup.html":{}},"body":{"modules/ApiModule.html":{},"classes/DocumentGroup.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"classes/UpdateDto-7.html":{},"coverage.html":{}}}],["documentgroup_name",{"_index":1775,"title":{},"body":{"injectables/DocumentService.html":{}}}],["documentgroupcontroller",{"_index":1719,"title":{"controllers/DocumentGroupController.html":{}},"body":{"controllers/DocumentGroupController.html":{},"modules/DocumentGroupModule.html":{},"coverage.html":{}}}],["documentgroupdto",{"_index":1723,"title":{"classes/DocumentGroupDto.html":{}},"body":{"controllers/DocumentGroupController.html":{},"classes/DocumentGroupDto.html":{},"injectables/DocumentGroupService.html":{},"classes/UpdateDto-7.html":{},"coverage.html":{}}}],["documentgroupmodule",{"_index":341,"title":{"modules/DocumentGroupModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/DocumentGroupModule.html":{},"modules.html":{},"overview.html":{}}}],["documentgroupservice",{"_index":1722,"title":{"injectables/DocumentGroupService.html":{}},"body":{"controllers/DocumentGroupController.html":{},"modules/DocumentGroupModule.html":{},"injectables/DocumentGroupService.html":{},"coverage.html":{},"overview.html":{}}}],["documentmodule",{"_index":342,"title":{"modules/DocumentModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/DocumentModule.html":{},"modules.html":{},"overview.html":{}}}],["documents",{"_index":1678,"title":{},"body":{"controllers/DocumentController.html":{},"classes/DocumentGroup.html":{},"classes/DocumentGroupDto.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"controllers/FilesS3Controller.html":{},"classes/Query-8.html":{},"miscellaneous/functions.html":{}}}],["documents.controller",{"_index":1764,"title":{},"body":{"modules/DocumentModule.html":{}}}],["documents.service",{"_index":1689,"title":{},"body":{"controllers/DocumentController.html":{},"modules/DocumentModule.html":{}}}],["documents/:id",{"_index":1694,"title":{},"body":{"controllers/DocumentController.html":{}}}],["documentservice",{"_index":1679,"title":{"injectables/DocumentService.html":{}},"body":{"controllers/DocumentController.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"coverage.html":{},"overview.html":{}}}],["doe",{"_index":447,"title":{},"body":{"controllers/AppController.html":{}}}],["doesn't",{"_index":3197,"title":{},"body":{"classes/UtilsService.html":{}}}],["dollar",{"_index":1464,"title":{},"body":{"classes/Country.html":{}}}],["domain",{"_index":2114,"title":{},"body":{"classes/FileType.html":{},"interfaces/IAppConfig.html":{}}}],["domain/country",{"_index":1378,"title":{},"body":{"controllers/CountriesController.html":{}}}],["domain/file",{"_index":2080,"title":{},"body":{"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{}}}],["don't",{"_index":3465,"title":{},"body":{"index.html":{}}}],["dotenv",{"_index":510,"title":{},"body":{"modules/AppModule.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"index.html":{}}}],["dotenv.config",{"_index":1190,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["down",{"_index":2809,"title":{},"body":{"injectables/PrismaService.html":{},"index.html":{}}}],["download",{"_index":2152,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{}}}],["download(@param('path",{"_index":2199,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["download(path",{"_index":2154,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["downloaded",{"_index":2158,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["downloading",{"_index":2151,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{}}}],["downloads",{"_index":2157,"title":{},"body":{"controllers/FilesLocalController.html":{},"modules/FilesS3Module.html":{},"injectables/FilesS3PresignedService.html":{}}}],["driver",{"_index":1322,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"interfaces/IFileConfig.html":{}}}],["drivers",{"_index":3407,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["dto",{"_index":13,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{},"injectables/BankService.html":{},"classes/CityDto.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/Country.html":{},"classes/CountryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileUploadDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"interfaces/QueryConfig.html":{},"classes/SortByDto.html":{},"classes/State.html":{},"classes/StateDto.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UpdateDto-7.html":{},"classes/UpdateDto-8.html":{},"miscellaneous/functions.html":{}}}],["dto/address_type",{"_index":200,"title":{},"body":{"injectables/AddressTypeService.html":{}}}],["dto/bank.dto",{"_index":642,"title":{},"body":{"controllers/BankController.html":{},"injectables/BankService.html":{}}}],["dto/cities.dto",{"_index":786,"title":{},"body":{"controllers/CityController.html":{},"injectables/CityService.html":{}}}],["dto/country",{"_index":1352,"title":{},"body":{"controllers/CountriesController.html":{}}}],["dto/country_mas.dto",{"_index":1427,"title":{},"body":{"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{}}}],["dto/create.dto",{"_index":201,"title":{},"body":{"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{}}}],["dto/currency",{"_index":1603,"title":{},"body":{"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{}}}],["dto/document_grp.dto",{"_index":1730,"title":{},"body":{"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{}}}],["dto/documents.dto",{"_index":1690,"title":{},"body":{"controllers/DocumentController.html":{},"injectables/DocumentService.html":{}}}],["dto/file",{"_index":2183,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{}}}],["dto/file.dto",{"_index":2320,"title":{},"body":{"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{}}}],["dto/query",{"_index":1380,"title":{},"body":{"controllers/CountriesController.html":{}}}],["dto/state.dto",{"_index":3093,"title":{},"body":{"controllers/StateController.html":{},"injectables/StateService.html":{}}}],["dto/update.dto",{"_index":202,"title":{},"body":{"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{}}}],["dtos",{"_index":966,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["dummy.ts",{"_index":3269,"title":{},"body":{"coverage.html":{}}}],["duplicate",{"_index":1632,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["duration",{"_index":2040,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["duration_log_level",{"_index":2042,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["durationms",{"_index":483,"title":{},"body":{"controllers/AppController.html":{}}}],["during",{"_index":267,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"controllers/FilesLocalController.html":{},"injectables/StateService.html":{}}}],["dx",{"_index":2436,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["dynamic",{"_index":258,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"classes/DynamicQueryBuilder.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{}}}],["dynamically",{"_index":1819,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{}}}],["dynamicjoinconditions",{"_index":1104,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["dynamicquerybuilder",{"_index":1776,"title":{"classes/DynamicQueryBuilder.html":{}},"body":{"classes/DynamicQueryBuilder.html":{},"classes/Query-3.html":{},"interfaces/QueryOptions.html":{},"coverage.html":{}}}],["dynamicwhere",{"_index":1094,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["e",{"_index":2808,"title":{},"body":{"injectables/PrismaService.html":{}}}],["e.g",{"_index":53,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"classes/BankDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/Currency.html":{},"classes/Document.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"classes/DocumentGroupDto.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{},"injectables/SortBy.html":{},"index.html":{}}}],["e2e",{"_index":3546,"title":{},"body":{"index.html":{}}}],["e325f0d0f3ae",{"_index":2077,"title":{},"body":{"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileType.html":{}}}],["e325f0d0f3ae'})@allow",{"_index":2107,"title":{},"body":{"classes/FileType.html":{}}}],["e89b",{"_index":1471,"title":{},"body":{"classes/Country.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{}}}],["each",{"_index":944,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/Country.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"interfaces/QueryConfig.html":{},"classes/QueryCountryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/State.html":{},"classes/UtilsService.html":{}}}],["easy",{"_index":3482,"title":{},"body":{"index.html":{}}}],["edge",{"_index":3586,"title":{},"body":{"index.html":{}}}],["editfilename",{"_index":2179,"title":{},"body":{"controllers/FilesLocalController.html":{},"coverage.html":{}}}],["efficient",{"_index":3457,"title":{},"body":{"index.html":{}}}],["emailer.interfaces",{"_index":1159,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["emailer.interfaces.ts",{"_index":2556,"title":{},"body":{"interfaces/INodeEmailerConfig.html":{},"coverage.html":{}}}],["emergency",{"_index":495,"title":{},"body":{"controllers/AppController.html":{}}}],["emits",{"_index":3055,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["enable",{"_index":1917,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["encapsulate",{"_index":2082,"title":{},"body":{"classes/FileResponseDto-1.html":{}}}],["encoded",{"_index":2318,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["encoding",{"_index":2550,"title":{},"body":{"interfaces/IFileConfig.html":{}}}],["encryptionservice",{"_index":2495,"title":{},"body":{"modules/HelperModule.html":{}}}],["end",{"_index":2580,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"injectables/PaginationService.html":{}}}],["endindex",{"_index":2575,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{}}}],["endpage",{"_index":2572,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{}}}],["endpoint",{"_index":406,"title":{},"body":{"controllers/AppController.html":{},"controllers/CountriesController.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/HomeController.html":{},"index.html":{}}}],["endpoints",{"_index":395,"title":{},"body":{"controllers/AppController.html":{},"controllers/BankController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"controllers/FilesS3PresignedController.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"controllers/StateController.html":{}}}],["ensure",{"_index":948,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"interfaces/QueryConfig.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"contributing.html":{},"index.html":{}}}],["ensures",{"_index":25,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"classes/CountryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/StateDto.html":{}}}],["entire",{"_index":3676,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["entities",{"_index":1227,"title":{},"body":{"classes/ConfigService.html":{},"injectables/DocumentService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["entity",{"_index":732,"title":{},"body":{"classes/Banks.html":{},"classes/Cities.html":{},"classes/Country.html":{},"classes/CountryMas.html":{},"classes/Currency.html":{},"classes/Document.html":{},"classes/DocumentGroup.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"classes/State.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UpdateDto-7.html":{},"classes/UpdateDto-8.html":{},"miscellaneous/functions.html":{}}}],["enum",{"_index":1867,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"miscellaneous/enumerations.html":{}}}],["enumerations",{"_index":3400,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":526,"title":{},"body":{"modules/AppModule.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"coverage.html":{}}}],["env.${env",{"_index":532,"title":{},"body":{"modules/AppModule.html":{}}}],["env.${nodeenv",{"_index":1192,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["env.development",{"_index":1195,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["env.staging",{"_index":1193,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["envfilepath",{"_index":531,"title":{},"body":{"modules/AppModule.html":{}}}],["environment",{"_index":504,"title":{},"body":{"modules/AppModule.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["environments",{"_index":3419,"title":{},"body":{"miscellaneous/functions.html":{}}}],["environmentvariablesvalidator",{"_index":1847,"title":{"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{}},"body":{"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"coverage.html":{}}}],["envname",{"_index":1201,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["envvalues.database_url",{"_index":1941,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["envvalues.database_url)@isstring",{"_index":1921,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["envvarappconfigvalidator",{"_index":1171,"title":{"classes/EnvVarAppConfigValidator.html":{}},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"coverage.html":{}}}],["envvarfileconfigvalidator",{"_index":1179,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["envvariablesclass",{"_index":3442,"title":{},"body":{"miscellaneous/functions.html":{}}}],["equal",{"_index":3430,"title":{},"body":{"miscellaneous/functions.html":{}}}],["erro",{"_index":573,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["error",{"_index":209,"title":{},"body":{"injectables/AddressTypeService.html":{},"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesS3PresignedService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/QueryFailedFilter.html":{},"injectables/SortBy.html":{},"injectables/StateService.html":{},"classes/UserNotFoundException.html":{},"miscellaneous/functions.html":{}}}],["error('hello",{"_index":490,"title":{},"body":{"controllers/AppController.html":{}}}],["error('syntax",{"_index":861,"title":{},"body":{"injectables/CityService.html":{}}}],["error.filter",{"_index":368,"title":{},"body":{"modules/ApiModule.html":{}}}],["error.filter.ts",{"_index":2520,"title":{},"body":{"classes/HttpErrorFilter.html":{},"coverage.html":{}}}],["error.filter.ts:50",{"_index":2524,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["errormessage",{"_index":3026,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["errormessages",{"_index":599,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["errorresponse",{"_index":317,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["errors",{"_index":548,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/HttpErrorFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/Query.html":{},"classes/QueryFailedFilter.html":{},"classes/UserNotFoundException.html":{},"miscellaneous/functions.html":{}}}],["errors.ts",{"_index":3305,"title":{},"body":{"coverage.html":{}}}],["esben",{"_index":3524,"title":{},"body":{"index.html":{}}}],["esbenp.prettier",{"_index":3522,"title":{},"body":{"index.html":{}}}],["escapes",{"_index":2829,"title":{},"body":{"classes/Query-1.html":{}}}],["escaping",{"_index":2752,"title":{},"body":{"injectables/PrismaService.html":{}}}],["escvalue",{"_index":2794,"title":{},"body":{"injectables/PrismaService.html":{}}}],["escvalue.replace(/'/g",{"_index":2796,"title":{},"body":{"injectables/PrismaService.html":{}}}],["eslint",{"_index":921,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{},"index.html":{}}}],["eslint/ban",{"_index":2459,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["eslint/explicit",{"_index":2461,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["eslint/no",{"_index":926,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{},"classes/UtilsService.html":{}}}],["eslint/prefer",{"_index":1213,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["etc",{"_index":1044,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/Country.html":{},"interfaces/QueryConfig.html":{}}}],["event",{"_index":3643,"title":{},"body":{"license.html":{}}}],["everyone",{"_index":3233,"title":{},"body":{"contributing.html":{}}}],["example",{"_index":47,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"controllers/AppController.html":{},"classes/BankDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"injectables/CityService.html":{},"controllers/CountriesController.html":{},"classes/Country.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/Document.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"classes/DocumentGroupDto.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"classes/HttpErrorFilter.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/Query-1.html":{},"classes/SortByDto.html":{},"classes/State.html":{},"classes/StateDto.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"contributing.html":{},"index.html":{}}}],["exceeds",{"_index":2350,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["exception",{"_index":275,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/FileNotImageException.html":{},"injectables/FilesS3Service.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"classes/UserNotFoundException.html":{},"miscellaneous/functions.html":{}}}],["exception.code",{"_index":2731,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["exception.constraint",{"_index":3028,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["exception.constraint.startswith('uq",{"_index":3029,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["exception.filter.ts",{"_index":2536,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:27",{"_index":2538,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts:30",{"_index":2724,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["exception.getresponse",{"_index":563,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["exception.getstatus",{"_index":316,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exception.message",{"_index":2528,"title":{},"body":{"classes/HttpErrorFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["exception.message.replace(/\\n/g",{"_index":2729,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["exception.query",{"_index":3031,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["exception.sqlmessage",{"_index":3030,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["exception.stack",{"_index":597,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{}}}],["exceptionfilter",{"_index":281,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["exceptions",{"_index":279,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["exceptions.filter.ts",{"_index":273,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["exceptions.filter.ts:47",{"_index":285,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exceptions.filter.ts:54",{"_index":289,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exceptions.filter.ts:63",{"_index":293,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exclude",{"_index":77,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"classes/CountryDto.html":{},"classes/CreateCountryDto.html":{},"classes/Currency.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/Query-10.html":{},"classes/Query-3.html":{},"classes/Query-6.html":{},"classes/StateDto.html":{}}}],["exclude({toplainonly",{"_index":54,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"classes/CountryDto.html":{},"classes/CreateCountryDto.html":{},"classes/Currency.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/StateDto.html":{}}}],["excluded",{"_index":61,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"classes/CountryDto.html":{},"classes/Currency.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/StateDto.html":{}}}],["execute",{"_index":263,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{}}}],["executerawquery",{"_index":2754,"title":{},"body":{"injectables/PrismaService.html":{}}}],["executerawquery(query",{"_index":2787,"title":{},"body":{"injectables/PrismaService.html":{}}}],["executerawquery(queryobj",{"_index":2760,"title":{},"body":{"injectables/PrismaService.html":{}}}],["executes",{"_index":2751,"title":{},"body":{"injectables/PrismaService.html":{}}}],["executetransaction",{"_index":2755,"title":{},"body":{"injectables/PrismaService.html":{}}}],["executetransaction(actions",{"_index":2765,"title":{},"body":{"injectables/PrismaService.html":{}}}],["executing",{"_index":2772,"title":{},"body":{"injectables/PrismaService.html":{}}}],["execution",{"_index":298,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CityService.html":{},"injectables/ResolvePromisesInterceptor.html":{}}}],["executioncontext",{"_index":3049,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["exeption",{"_index":310,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exist",{"_index":1634,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["existing",{"_index":183,"title":{},"body":{"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/Query-10.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UpdateDto-7.html":{},"classes/UpdateDto-8.html":{}}}],["exists",{"_index":208,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["exits",{"_index":218,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/StateService.html":{}}}],["exonerate",{"_index":3377,"title":{},"body":{"dependencies.html":{}}}],["expected",{"_index":2265,"title":{},"body":{"controllers/FilesS3Controller.html":{}}}],["expiration",{"_index":2312,"title":{},"body":{"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{}}}],["expirationtime",{"_index":1280,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IJWTConfig.html":{}}}],["expires",{"_index":455,"title":{},"body":{"controllers/AppController.html":{}}}],["expiresin",{"_index":2135,"title":{},"body":{"classes/FileType.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{}}}],["expiresinseconds",{"_index":1278,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IJWTConfig.html":{}}}],["explanation",{"_index":3578,"title":{},"body":{"index.html":{}}}],["explode",{"_index":2469,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["export",{"_index":85,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/BankController.html":{},"classes/BankDto.html":{},"modules/BankModule.html":{},"injectables/BankService.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"controllers/CityController.html":{},"classes/CityDto.html":{},"modules/CityModule.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService-1.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"modules/CountryMasModule.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/Document.html":{},"controllers/DocumentController.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"controllers/DocumentGroupController.html":{},"classes/DocumentGroupDto.html":{},"modules/DocumentGroupModule.html":{},"injectables/DocumentGroupService.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/State.html":{},"controllers/StateController.html":{},"classes/StateDto.html":{},"modules/StateModule.html":{},"injectables/StateService.html":{},"classes/UpdateDto.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UpdateDto-7.html":{},"classes/UpdateDto-8.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{}}}],["exported",{"_index":2214,"title":{},"body":{"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{}}}],["exports",{"_index":333,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/BankModule.html":{},"modules/CityModule.html":{},"modules/CountriesModule.html":{},"modules/CountryMasModule.html":{},"modules/CurrenciesModule.html":{},"modules/DocumentGroupModule.html":{},"modules/DocumentModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{},"modules/StateModule.html":{},"overview.html":{}}}],["exposes",{"_index":2281,"title":{},"body":{"modules/FilesS3Module.html":{}}}],["exposing",{"_index":608,"title":{},"body":{"controllers/BankController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"controllers/StateController.html":{}}}],["express",{"_index":306,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"dependencies.html":{},"license.html":{}}}],["express.multer.file",{"_index":2161,"title":{},"body":{"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{}}}],["express.multers3.file",{"_index":2268,"title":{},"body":{"controllers/FilesS3Controller.html":{},"injectables/FilesS3Service.html":{}}}],["expression",{"_index":952,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["extending",{"_index":2063,"title":{},"body":{"classes/FileNotImageException.html":{}}}],["extends",{"_index":2058,"title":{},"body":{"classes/FileNotImageException.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/UpdateDto.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UpdateDto-7.html":{},"classes/UpdateDto-8.html":{},"classes/UserNotFoundException.html":{}}}],["extensions",{"_index":3518,"title":{},"body":{"index.html":{}}}],["f",{"_index":3567,"title":{},"body":{"index.html":{}}}],["f2d90547",{"_index":752,"title":{},"body":{"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"classes/State.html":{},"classes/StateDto.html":{}}}],["fail",{"_index":3025,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["failed",{"_index":2735,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["failed.filter.ts",{"_index":3016,"title":{},"body":{"classes/QueryFailedFilter.html":{},"coverage.html":{}}}],["failed.filter.ts:26",{"_index":3018,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["failed.filter.ts:34",{"_index":3019,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["failed.filter.ts:45",{"_index":3020,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["fails",{"_index":438,"title":{},"body":{"controllers/AppController.html":{},"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{},"miscellaneous/functions.html":{}}}],["failure",{"_index":3021,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["failures",{"_index":3017,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["false",{"_index":672,"title":{},"body":{"classes/BankDto.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{}}}],["false})@isoptional",{"_index":1844,"title":{},"body":{"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{}}}],["fatal",{"_index":493,"title":{},"body":{"controllers/AppController.html":{}}}],["feat",{"_index":3572,"title":{},"body":{"index.html":{}}}],["feat(api",{"_index":3584,"title":{},"body":{"index.html":{}}}],["feature",{"_index":352,"title":{},"body":{"modules/ApiModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"contributing.html":{}}}],["features",{"_index":3220,"title":{},"body":{"changelog.html":{},"contributing.html":{},"index.html":{}}}],["fetch",{"_index":571,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"injectables/PaginationService.html":{}}}],["field",{"_index":935,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PrismaService.html":{},"interfaces/QueryConfig.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{}}}],["field\":\"name\",\"direction\":\"asc",{"_index":2426,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["field\":\"name\",\"direction\":\"asc\"},{\"field\":\"age\",\"direction\":\"desc",{"_index":1406,"title":{},"body":{"controllers/CountriesController.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["field\":\"name\",\"direction\":\"asc\"}]'})@isoptional()@transform",{"_index":2651,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["field\":\"name\",\"operator\":\"=\",\"value\":\"in",{"_index":2422,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["field\":\"name\",\"operator\":\"=\",\"value\":\"in\"}]'})@isoptional()@transform",{"_index":2640,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["field\":\"name\",\"operator\":\"like\",\"value\":\"john\"},{\"field\":\"age\",\"operator\":\">\",\"value\":\"30",{"_index":1404,"title":{},"body":{"controllers/CountriesController.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["field1",{"_index":1066,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["field2",{"_index":1067,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["field3",{"_index":1069,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["field4",{"_index":1070,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["fieldconfigs",{"_index":256,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{},"classes/UtilsService.html":{}}}],["fieldconfigs[field",{"_index":3183,"title":{},"body":{"classes/UtilsService.html":{}}}],["fieldname",{"_index":2466,"title":{},"body":{"classes/FilterQueryDto.html":{},"interfaces/IFileConfig.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["fieldname}[${index",{"_index":2472,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["fieldname}[${index}].field",{"_index":2473,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["fieldname}[${index}].operator",{"_index":2474,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["fieldname}[${index}].value",{"_index":2475,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["fieldregex",{"_index":954,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["fields",{"_index":248,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/DynamicQueryBuilder.html":{},"interfaces/IPaginationFieldConfig.html":{},"injectables/PrismaService.html":{},"classes/Query-3.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UpdateDto-7.html":{},"classes/UpdateDto-8.html":{},"classes/UtilsService.html":{}}}],["fields.includes(key",{"_index":2793,"title":{},"body":{"injectables/PrismaService.html":{}}}],["fields.join",{"_index":1829,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["fil",{"_index":561,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/BankController.html":{},"classes/BankDto.html":{},"modules/BankModule.html":{},"injectables/BankService.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"controllers/CityController.html":{},"classes/CityDto.html":{},"modules/CityModule.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService-1.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"modules/CountryMasModule.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/Document.html":{},"controllers/DocumentController.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"controllers/DocumentGroupController.html":{},"classes/DocumentGroupDto.html":{},"modules/DocumentGroupModule.html":{},"injectables/DocumentGroupService.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/State.html":{},"controllers/StateController.html":{},"classes/StateDto.html":{},"modules/StateModule.html":{},"injectables/StateService.html":{},"classes/UpdateDto.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UpdateDto-7.html":{},"classes/UpdateDto-8.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["file's",{"_index":2083,"title":{},"body":{"classes/FileResponseDto-1.html":{},"classes/FileUploadDto.html":{},"injectables/FilesS3Service.html":{}}}],["file.filename.match(/\\.(jpg|jpeg|png|gif)$/i",{"_index":2351,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["file.filesize",{"_index":2353,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["file.interfaces",{"_index":1168,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["file.interfaces.ts",{"_index":2627,"title":{},"body":{"interfaces/IUploadFileConfig.html":{},"coverage.html":{}}}],["file.jpg",{"_index":2079,"title":{},"body":{"classes/FileResponseDto.html":{},"injectables/FilesLocalService.html":{}}}],["file.key",{"_index":2371,"title":{},"body":{"injectables/FilesS3Service.html":{}}}],["file_driver",{"_index":1181,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["file_upload_destination",{"_index":1314,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IUploadFileConfig.html":{}}}],["fileconfig",{"_index":520,"title":{},"body":{"modules/AppModule.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"modules/FilesModule.html":{},"miscellaneous/typealiases.html":{}}}],["fileconfig).accesskeyid",{"_index":2130,"title":{},"body":{"classes/FileType.html":{}}}],["fileconfig).awsdefaults3bucket",{"_index":2133,"title":{},"body":{"classes/FileType.html":{}}}],["fileconfig).awss3region",{"_index":2128,"title":{},"body":{"classes/FileType.html":{}}}],["fileconfig).driver",{"_index":2124,"title":{},"body":{"classes/FileType.html":{},"modules/FilesModule.html":{}}}],["fileconfig).secretaccesskey",{"_index":2131,"title":{},"body":{"classes/FileType.html":{}}}],["filedriver",{"_index":1147,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"interfaces/IFileConfig.html":{},"miscellaneous/enumerations.html":{}}}],["filedriver.local",{"_index":1993,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"modules/FilesModule.html":{}}}],["filedriver.s3",{"_index":1183,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"modules/FilesModule.html":{}}}],["filedriver.s3].includes",{"_index":2127,"title":{},"body":{"classes/FileType.html":{}}}],["filedriver.s3_presigned",{"_index":2126,"title":{},"body":{"classes/FileType.html":{}}}],["filedriver.s3_presigned].includes(envvalues.file_driver",{"_index":1184,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["filefilter",{"_index":2196,"title":{},"body":{"controllers/FilesLocalController.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["fileinterceptor",{"_index":2169,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["fileinterceptor('file",{"_index":2194,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["filename",{"_index":2140,"title":{},"body":{"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesS3PresignedService.html":{},"coverage.html":{}}}],["filenotimageexception",{"_index":2051,"title":{"classes/FileNotImageException.html":{}},"body":{"classes/FileNotImageException.html":{},"coverage.html":{}}}],["filenotimageexception('custom",{"_index":2057,"title":{},"body":{"classes/FileNotImageException.html":{}}}],["fileoverview",{"_index":83,"title":{},"body":{"classes/AddresTypeDto.html":{},"injectables/AddressTypeService.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/BankController.html":{},"classes/BankDto.html":{},"modules/BankModule.html":{},"injectables/BankService.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"modules/CityModule.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService-1.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"modules/CountryMasModule.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/Document.html":{},"controllers/DocumentController.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"controllers/DocumentGroupController.html":{},"classes/DocumentGroupDto.html":{},"modules/DocumentGroupModule.html":{},"injectables/DocumentGroupService.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"classes/FileType.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/Query-10.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"classes/State.html":{},"controllers/StateController.html":{},"classes/StateDto.html":{},"modules/StateModule.html":{},"injectables/StateService.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UpdateDto-7.html":{},"classes/UpdateDto-8.html":{}}}],["fileresponsedto",{"_index":2067,"title":{"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{}},"body":{"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"coverage.html":{}}}],["fileresponsedto})@post('upload')@apiconsumes('multipart/form",{"_index":2163,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["fileresponsedto})@post('v1/upload",{"_index":2314,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["fileresponsedto})@post('v1/upload/s3')@apiconsumes('multipart/form",{"_index":2269,"title":{},"body":{"controllers/FilesS3Controller.html":{}}}],["files",{"_index":2139,"title":{},"body":{"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"license.html":{}}}],["files.controller",{"_index":2208,"title":{},"body":{"modules/FilesLocalModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["files.service",{"_index":2185,"title":{},"body":{"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{}}}],["files/example.jpg",{"_index":2096,"title":{},"body":{"classes/FileResponseDto-2.html":{}}}],["files/files.module",{"_index":371,"title":{},"body":{"modules/ApiModule.html":{}}}],["files/v1/download/{key}?expiresin=3600",{"_index":2310,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["files/v1/upload",{"_index":2316,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["filesize",{"_index":2141,"title":{},"body":{"classes/FileUploadDto.html":{},"modules/FilesS3Module.html":{},"injectables/FilesS3PresignedService.html":{}}}],["fileslocalcontroller",{"_index":2149,"title":{"controllers/FilesLocalController.html":{}},"body":{"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"coverage.html":{}}}],["fileslocalmodule",{"_index":2201,"title":{"modules/FilesLocalModule.html":{}},"body":{"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules.html":{},"overview.html":{}}}],["fileslocalservice",{"_index":2184,"title":{"injectables/FilesLocalService.html":{}},"body":{"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"coverage.html":{},"overview.html":{}}}],["filesmodule",{"_index":343,"title":{"modules/FilesModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/FilesModule.html":{},"modules.html":{},"overview.html":{}}}],["filesroot",{"_index":2178,"title":{},"body":{"controllers/FilesLocalController.html":{},"coverage.html":{}}}],["filess3controller",{"_index":2256,"title":{"controllers/FilesS3Controller.html":{}},"body":{"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"coverage.html":{}}}],["filess3module",{"_index":2236,"title":{"modules/FilesS3Module.html":{}},"body":{"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules.html":{},"overview.html":{}}}],["filess3presignedcontroller",{"_index":2301,"title":{"controllers/FilesS3PresignedController.html":{}},"body":{"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"coverage.html":{}}}],["filess3presignedmodule",{"_index":2237,"title":{"modules/FilesS3PresignedModule.html":{}},"body":{"modules/FilesModule.html":{},"modules/FilesS3PresignedModule.html":{},"modules.html":{},"overview.html":{}}}],["filess3presignedservice",{"_index":2321,"title":{"injectables/FilesS3PresignedService.html":{}},"body":{"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"coverage.html":{},"overview.html":{}}}],["filess3service",{"_index":2271,"title":{"injectables/FilesS3Service.html":{}},"body":{"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"injectables/FilesS3Service.html":{},"coverage.html":{},"overview.html":{}}}],["filesservice",{"_index":2187,"title":{"injectables/FilesService.html":{}},"body":{"controllers/FilesLocalController.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesService.html":{},"coverage.html":{},"overview.html":{}}}],["filetype",{"_index":2071,"title":{"classes/FileType.html":{}},"body":{"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"coverage.html":{}}}],["fileuploaddto",{"_index":2137,"title":{"classes/FileUploadDto.html":{}},"body":{"classes/FileUploadDto.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"coverage.html":{}}}],["filter",{"_index":276,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/CountriesController.html":{},"classes/FilterQueryDto.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PaginationQueryDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{}}}],["filter((field",{"_index":1081,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["filter.field",{"_index":2703,"title":{},"body":{"injectables/PaginationService.html":{}}}],["filter.field.tolowercase",{"_index":3182,"title":{},"body":{"classes/UtilsService.html":{}}}],["filter.operator",{"_index":2704,"title":{},"body":{"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["filter.operator.touppercase",{"_index":2699,"title":{},"body":{"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["filter.value",{"_index":2700,"title":{},"body":{"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["filter.value.split(',').map((val",{"_index":3190,"title":{},"body":{"classes/UtilsService.html":{}}}],["filterconditions",{"_index":2697,"title":{},"body":{"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["filtercountrydto",{"_index":2378,"title":{"classes/FilterCountryDto.html":{}},"body":{"classes/FilterCountryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortCountryDto.html":{},"coverage.html":{}}}],["filterdto",{"_index":2464,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["filtering",{"_index":175,"title":{},"body":{"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"modules/FilesS3Module.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{},"classes/UtilsService.html":{}}}],["filteroptions",{"_index":1391,"title":{},"body":{"controllers/CountriesController.html":{}}}],["filterquery",{"_index":1644,"title":{},"body":{"injectables/CurrenciesService.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["filterquerydto",{"_index":1400,"title":{"classes/FilterQueryDto.html":{}},"body":{"controllers/CountriesController.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"coverage.html":{}}}],["filters",{"_index":547,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"controllers/CountriesController.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UtilsService.html":{}}}],["filters.length",{"_index":2696,"title":{},"body":{"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["filters[name]=something",{"_index":2457,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["filtervalues",{"_index":3178,"title":{},"body":{"classes/UtilsService.html":{}}}],["filtervalues.push(filter.value",{"_index":3193,"title":{},"body":{"classes/UtilsService.html":{}}}],["finalcountquery",{"_index":2712,"title":{},"body":{"injectables/PaginationService.html":{}}}],["find",{"_index":213,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{},"injectables/StateService.html":{},"contributing.html":{}}}],["findall",{"_index":142,"title":{},"body":{"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{}}}],["findall(@query",{"_index":655,"title":{},"body":{"controllers/BankController.html":{},"controllers/CityController.html":{},"controllers/CountriesController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/StateController.html":{}}}],["findall(paginationquery",{"_index":168,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["findall(query",{"_index":623,"title":{},"body":{"controllers/BankController.html":{},"controllers/CityController.html":{},"controllers/CountriesController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"controllers/StateController.html":{}}}],["findby(key",{"_index":2941,"title":{},"body":{"classes/Query-3.html":{}}}],["findbycode",{"_index":2916,"title":{},"body":{"classes/Query-3.html":{}}}],["findbycode(id",{"_index":2920,"title":{},"body":{"classes/Query-3.html":{}}}],["findbyid",{"_index":970,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{}}}],["findbyid(id",{"_index":2871,"title":{},"body":{"classes/Query-2.html":{}}}],["findbyname",{"_index":2847,"title":{},"body":{"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{}}}],["finde",{"_index":2877,"title":{},"body":{"classes/Query-2.html":{}}}],["finding",{"_index":964,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["findone",{"_index":143,"title":{},"body":{"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{}}}],["findone(@param('id",{"_index":1701,"title":{},"body":{"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{}}}],["findone(@param('id_bank",{"_index":658,"title":{},"body":{"controllers/BankController.html":{}}}],["findone(@param('id_city",{"_index":798,"title":{},"body":{"controllers/CityController.html":{}}}],["findone(@param('id_state",{"_index":3105,"title":{},"body":{"controllers/StateController.html":{}}}],["findone(id",{"_index":177,"title":{},"body":{"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{}}}],["finds",{"_index":991,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["findwithdynamicjoin",{"_index":971,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["findwithdynamicjoin(joins",{"_index":989,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{}}}],["findwithdynamicjoin1",{"_index":1084,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["findwithdynamicjoin1(joins",{"_index":1115,"title":{},"body":{"classes/CommonQuery5.html":{}}}],["findwithdynamicjoin2",{"_index":1095,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["findwithdynamicjoin2(joins",{"_index":1118,"title":{},"body":{"classes/CommonQuery5.html":{}}}],["findwithdynamicjoin3",{"_index":1100,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["findwithdynamicjoin3(joins",{"_index":1120,"title":{},"body":{"classes/CommonQuery5.html":{}}}],["first",{"_index":2581,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"index.html":{}}}],["fitness",{"_index":3639,"title":{},"body":{"license.html":{}}}],["fix",{"_index":3573,"title":{},"body":{"index.html":{}}}],["fix(core",{"_index":3585,"title":{},"body":{"index.html":{}}}],["fixed",{"_index":3215,"title":{},"body":{"changelog.html":{}}}],["fixes",{"_index":3214,"title":{},"body":{"changelog.html":{}}}],["flexible",{"_index":3456,"title":{},"body":{"index.html":{}}}],["follow",{"_index":3231,"title":{},"body":{"contributing.html":{}}}],["following",{"_index":3505,"title":{},"body":{"index.html":{},"license.html":{}}}],["foo",{"_index":467,"title":{},"body":{"controllers/AppController.html":{}}}],["footer",{"_index":3579,"title":{},"body":{"index.html":{}}}],["footer(s",{"_index":3571,"title":{},"body":{"index.html":{}}}],["foreign_key=id",{"_index":1109,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["foreignkey",{"_index":1074,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["fork",{"_index":3243,"title":{},"body":{"contributing.html":{}}}],["format",{"_index":937,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"classes/Query-10.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"injectables/SortBy.html":{},"index.html":{}}}],["formats",{"_index":29,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/CountryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/Query-10.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryFailedFilter.html":{},"classes/StateDto.html":{}}}],["formatted",{"_index":551,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/Query-10.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{}}}],["formattedarray",{"_index":1057,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/UtilsService.html":{}}}],["formatter",{"_index":3497,"title":{},"body":{"index.html":{}}}],["formatting",{"_index":3257,"title":{},"body":{"contributing.html":{}}}],["formatvalue",{"_index":972,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"classes/UtilsService.html":{}}}],["formatvalue(value",{"_index":1000,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/UtilsService.html":{}}}],["found",{"_index":187,"title":{},"body":{"injectables/AddressTypeService.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"controllers/FilesLocalController.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{},"classes/UserNotFoundException.html":{}}}],["found.exception.ts",{"_index":3158,"title":{},"body":{"classes/UserNotFoundException.html":{},"coverage.html":{}}}],["found.exception.ts:20",{"_index":3163,"title":{},"body":{"classes/UserNotFoundException.html":{}}}],["foxundermoon",{"_index":3530,"title":{},"body":{"index.html":{}}}],["foxundermoon.shell",{"_index":3529,"title":{},"body":{"index.html":{}}}],["framework",{"_index":2373,"title":{},"body":{"injectables/FilesService.html":{},"index.html":{}}}],["free",{"_index":3606,"title":{},"body":{"license.html":{}}}],["from_email",{"_index":1285,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/ISendGridConfig.html":{}}}],["fromquery",{"_index":254,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/PaginationService.html":{},"injectables/StateService.html":{},"classes/UtilsService.html":{}}}],["frontend",{"_index":2544,"title":{},"body":{"interfaces/IAppConfig.html":{}}}],["frontend_domain",{"_index":1176,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{}}}],["frontenddomain",{"_index":1235,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"interfaces/IAppConfig.html":{}}}],["fsroot",{"_index":3343,"title":{},"body":{"coverage.html":{}}}],["fully",{"_index":3040,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["function",{"_index":860,"title":{},"body":{"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PrismaService.html":{},"classes/Query-1.html":{},"interfaces/QueryConfig.html":{},"injectables/ResolvePromisesInterceptor.html":{},"classes/SortByDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["function(app",{"_index":3435,"title":{},"body":{"miscellaneous/functions.html":{}}}],["functionalities",{"_index":362,"title":{},"body":{"modules/ApiModule.html":{},"modules/CurrenciesModule.html":{},"injectables/FilesService.html":{},"modules/HomeModule.html":{}}}],["functionality",{"_index":2217,"title":{},"body":{"injectables/FilesLocalService.html":{},"modules/FilesS3Module.html":{},"injectables/FilesS3Service.html":{},"injectables/PaginationService.html":{}}}],["functions",{"_index":1418,"title":{"miscellaneous/functions.html":{}},"body":{"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"miscellaneous/functions.html":{}}}],["furnished",{"_index":3626,"title":{},"body":{"license.html":{}}}],["generate",{"_index":865,"title":{},"body":{"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"injectables/PrismaService.html":{},"classes/Query-10.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{}}}],["generated",{"_index":868,"title":{},"body":{"injectables/CityService.html":{},"classes/FileType.html":{}}}],["generatepresignedurl",{"_index":2338,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["generatepresignedurl(key",{"_index":2343,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["generates",{"_index":886,"title":{},"body":{"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{}}}],["generating",{"_index":719,"title":{},"body":{"injectables/BankService.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/Query.html":{},"classes/Query-10.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{}}}],["generation",{"_index":1416,"title":{},"body":{"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"controllers/FilesS3PresignedController.html":{}}}],["generator",{"_index":984,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["generator.util",{"_index":2284,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["generic",{"_index":961,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["get('/health",{"_index":439,"title":{},"body":{"controllers/AppController.html":{}}}],["get('/health')@healthcheck",{"_index":404,"title":{},"body":{"controllers/AppController.html":{}}}],["get('/log",{"_index":411,"title":{},"body":{"controllers/AppController.html":{}}}],["get(':id",{"_index":1700,"title":{},"body":{"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{}}}],["get(':id')@httpcode(httpstatus.ok)@apiparam({name",{"_index":1685,"title":{},"body":{"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{}}}],["get(':id_bank",{"_index":657,"title":{},"body":{"controllers/BankController.html":{}}}],["get(':id_bank')@httpcode(httpstatus.ok)@apiparam({name",{"_index":626,"title":{},"body":{"controllers/BankController.html":{}}}],["get(':id_city",{"_index":797,"title":{},"body":{"controllers/CityController.html":{}}}],["get(':id_city')@httpcode(httpstatus.ok)@apiparam({name",{"_index":780,"title":{},"body":{"controllers/CityController.html":{}}}],["get(':id_state",{"_index":3104,"title":{},"body":{"controllers/StateController.html":{}}}],["get(':id_state')@httpcode(httpstatus.ok)@apiparam({name",{"_index":3089,"title":{},"body":{"controllers/StateController.html":{}}}],["get('findall",{"_index":1356,"title":{},"body":{"controllers/CountriesController.html":{}}}],["get('findall')@httpcode(httpstatus.ok)@apiokresponse({type",{"_index":1343,"title":{},"body":{"controllers/CountriesController.html":{}}}],["get('local/download/:path",{"_index":2155,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["get('v1/countries",{"_index":1382,"title":{},"body":{"controllers/CountriesController.html":{}}}],["get('v1/country",{"_index":1372,"title":{},"body":{"controllers/CountriesController.html":{}}}],["get('v1/download/:key",{"_index":2308,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["get()@httpcode(httpstatus.ok)@apiokresponse({type",{"_index":624,"title":{},"body":{"controllers/BankController.html":{},"controllers/CityController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"controllers/StateController.html":{}}}],["get(`${modules",{"_index":1510,"title":{},"body":{"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{}}}],["get(key",{"_index":1131,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["get(undefined)@httpcode(httpstatus.ok)@apiokresponse({type",{"_index":1501,"title":{},"body":{"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{}}}],["get_all",{"_index":1358,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{}}}],["getboolean",{"_index":1125,"title":{},"body":{"classes/ConfigService.html":{}}}],["getboolean(key",{"_index":1133,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["getbooleanenvvar",{"_index":2026,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{},"coverage.html":{}}}],["getbooleanenvvar('logger_console_print",{"_index":2045,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["getbooleanenvvar('logger_database_storage",{"_index":2037,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["getbooleanenvvar('logger_duration",{"_index":2041,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["getbooleanenvvar('logger_log_in_file",{"_index":2047,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["getdownloadurl",{"_index":2306,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["getdownloadurl(@param('key",{"_index":2324,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["getdownloadurl(key",{"_index":2307,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["gethealth",{"_index":402,"title":{},"body":{"controllers/AppController.html":{}}}],["gethello",{"_index":403,"title":{},"body":{"controllers/AppController.html":{}}}],["getnodeenv",{"_index":1137,"title":{},"body":{"classes/ConfigService.html":{}}}],["getnumber",{"_index":1126,"title":{},"body":{"classes/ConfigService.html":{}}}],["getnumber(key",{"_index":1135,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["getobjectcommand",{"_index":2117,"title":{},"body":{"classes/FileType.html":{},"injectables/FilesS3PresignedService.html":{}}}],["getprismaconfig",{"_index":1139,"title":{},"body":{"classes/ConfigService.html":{}}}],["getrecordswithjoins(id",{"_index":879,"title":{},"body":{"injectables/CityService.html":{}}}],["getschemapath",{"_index":2455,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["getschemapath(filterdto",{"_index":2471,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["getsignedurl",{"_index":2120,"title":{},"body":{"classes/FileType.html":{},"injectables/FilesS3PresignedService.html":{}}}],["getsignedurl(s3",{"_index":2134,"title":{},"body":{"classes/FileType.html":{}}}],["getsignedurl(this.s3",{"_index":2361,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["getting",{"_index":3206,"title":{"changelog.html":{},"contributing.html":{},"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["git",{"_index":3246,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["git+https://github.com/dharmesh",{"_index":3665,"title":{},"body":{"properties.html":{}}}],["github",{"_index":3238,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["given",{"_index":913,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{},"miscellaneous/typealiases.html":{}}}],["global",{"_index":274,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"modules/HelperModule.html":{},"classes/HttpErrorFilter.html":{},"miscellaneous/functions.html":{}}}],["granted",{"_index":3605,"title":{},"body":{"license.html":{}}}],["great",{"_index":3450,"title":{},"body":{"index.html":{}}}],["greater",{"_index":3429,"title":{},"body":{"miscellaneous/functions.html":{}}}],["group",{"_index":1664,"title":{},"body":{"classes/Document.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"controllers/DocumentGroupController.html":{},"classes/DocumentGroupDto.html":{},"modules/DocumentGroupModule.html":{},"injectables/DocumentGroupService.html":{},"classes/Query-9.html":{}}}],["grouped",{"_index":2258,"title":{},"body":{"controllers/FilesS3Controller.html":{}}}],["groups",{"_index":1721,"title":{},"body":{"controllers/DocumentGroupController.html":{},"modules/DocumentGroupModule.html":{},"injectables/DocumentGroupService.html":{}}}],["groups/:id",{"_index":1734,"title":{},"body":{"controllers/DocumentGroupController.html":{}}}],["grow",{"_index":3590,"title":{},"body":{"index.html":{}}}],["guidelines",{"_index":3225,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["gujarat",{"_index":3077,"title":{},"body":{"classes/State.html":{},"classes/StateDto.html":{}}}],["handaling",{"_index":124,"title":{},"body":{"injectables/AddressTypeService.html":{}}}],["handle",{"_index":278,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"modules/FilesLocalModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/HomeController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"interfaces/QueryConfig.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResolvePromisesInterceptor.html":{},"index.html":{}}}],["handled",{"_index":2617,"title":{},"body":{"interfaces/IPaginationFieldConfig.html":{}}}],["handler",{"_index":3053,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["handles",{"_index":295,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/BankController.html":{},"controllers/CountriesController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/QueryFailedFilter.html":{},"controllers/StateController.html":{}}}],["handling",{"_index":396,"title":{},"body":{"controllers/AppController.html":{},"modules/BankModule.html":{},"injectables/BankService.html":{},"modules/CityModule.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService-1.html":{},"modules/CountryMasModule.html":{},"injectables/CurrenciesService.html":{},"modules/DocumentGroupModule.html":{},"injectables/DocumentGroupService.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"classes/FileNotImageException.html":{},"classes/FileType.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"modules/StateModule.html":{},"injectables/StateService.html":{},"miscellaneous/functions.html":{}}}],["hard",{"_index":1805,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["has_next_page",{"_index":2412,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/SortByDto.html":{}}}],["header",{"_index":591,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{}}}],["headers",{"_index":3481,"title":{},"body":{"index.html":{}}}],["health",{"_index":394,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/PrismaService.html":{}}}],["healthcheck",{"_index":417,"title":{},"body":{"controllers/AppController.html":{}}}],["healthcheckservice",{"_index":418,"title":{},"body":{"controllers/AppController.html":{}}}],["healthindicatorresult",{"_index":2780,"title":{},"body":{"injectables/PrismaService.html":{}}}],["helmet",{"_index":3381,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["helper",{"_index":1433,"title":{},"body":{"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{}}}],["helpermodule",{"_index":499,"title":{"modules/HelperModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules.html":{},"overview.html":{}}}],["helps",{"_index":2562,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["here",{"_index":570,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"modules/FilesModule.html":{},"index.html":{}}}],["hereby",{"_index":3604,"title":{},"body":{"license.html":{}}}],["hi",{"_index":2707,"title":{},"body":{"injectables/PaginationService.html":{}}}],["holders",{"_index":3645,"title":{},"body":{"license.html":{}}}],["home",{"_index":382,"title":{},"body":{"modules/ApiModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{}}}],["home.controller",{"_index":2512,"title":{},"body":{"modules/HomeModule.html":{}}}],["home.service",{"_index":2504,"title":{},"body":{"controllers/HomeController.html":{},"modules/HomeModule.html":{}}}],["home/home.module",{"_index":372,"title":{},"body":{"modules/ApiModule.html":{}}}],["homecontroller",{"_index":2499,"title":{"controllers/HomeController.html":{}},"body":{"controllers/HomeController.html":{},"modules/HomeModule.html":{},"coverage.html":{}}}],["homemodule",{"_index":344,"title":{"modules/HomeModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/HomeModule.html":{},"modules.html":{},"overview.html":{}}}],["homepage",{"_index":3662,"title":{},"body":{"properties.html":{}}}],["homeservice",{"_index":2501,"title":{"injectables/HomeService.html":{}},"body":{"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"coverage.html":{},"overview.html":{}}}],["host",{"_index":291,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["host.switchtohttp",{"_index":312,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["http",{"_index":355,"title":{},"body":{"modules/ApiModule.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/BankController.html":{},"controllers/CountriesController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/Query-1.html":{},"classes/QueryFailedFilter.html":{},"controllers/StateController.html":{},"index.html":{}}}],["http://localhost",{"_index":1883,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["http_status_messages",{"_index":3292,"title":{},"body":{"coverage.html":{}}}],["httpcode",{"_index":631,"title":{},"body":{"controllers/BankController.html":{},"controllers/CityController.html":{},"controllers/CountriesController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"controllers/StateController.html":{}}}],["httpcode(httpstatus.created",{"_index":646,"title":{},"body":{"controllers/BankController.html":{},"controllers/CityController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"controllers/StateController.html":{}}}],["httpcode(httpstatus.ok",{"_index":651,"title":{},"body":{"controllers/BankController.html":{},"controllers/CityController.html":{},"controllers/CountriesController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"controllers/StateController.html":{}}}],["httperrorfilter",{"_index":366,"title":{"classes/HttpErrorFilter.html":{}},"body":{"modules/ApiModule.html":{},"classes/HttpErrorFilter.html":{},"coverage.html":{}}}],["httpexception",{"_index":188,"title":{},"body":{"injectables/AddressTypeService.html":{},"classes/AllExceptionsFilter.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"controllers/FilesLocalController.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"injectables/StateService.html":{}}}],["httpexceptionfilter",{"_index":2534,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["httpmodule",{"_index":2486,"title":{},"body":{"modules/HelperModule.html":{}}}],["https://example",{"_index":2102,"title":{},"body":{"classes/FileResponseDto-2.html":{}}}],["https://example.com/path/to/file.jpg",{"_index":2087,"title":{},"body":{"classes/FileResponseDto-1.html":{},"classes/FileType.html":{}}}],["https://example.com/path/to/file.jpg'})@transform",{"_index":2109,"title":{},"body":{"classes/FileType.html":{}}}],["https://github.com/dharmesh",{"_index":3511,"title":{},"body":{"index.html":{},"properties.html":{}}}],["https://hooks.slack.com/services/xxxxxxxxx/xxxxxxxxx/xxxxxxxxxxxxxxxxxxxxxxxx",{"_index":2050,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["https://s3.amazonaws.com/bucket/path/to/file?signature",{"_index":2311,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["httpstatus",{"_index":189,"title":{},"body":{"injectables/AddressTypeService.html":{},"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/HttpErrorFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{}}}],["httpstatus.bad_request",{"_index":234,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/StateService.html":{}}}],["httpstatus.conflict",{"_index":219,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"injectables/StateService.html":{}}}],["httpstatus.internal_server_error",{"_index":227,"title":{},"body":{"injectables/AddressTypeService.html":{},"classes/AllExceptionsFilter.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/HttpErrorFilter.html":{},"classes/QueryFailedFilter.html":{},"injectables/StateService.html":{}}}],["httpstatus.not_found",{"_index":245,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/StateService.html":{}}}],["httpstatus.ok",{"_index":661,"title":{},"body":{"controllers/BankController.html":{},"controllers/CityController.html":{},"controllers/CountriesController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"controllers/StateController.html":{}}}],["httpstatus.payload_too_large",{"_index":2355,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["httpstatus.unprocessable_entity",{"_index":2227,"title":{},"body":{"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{}}}],["iappconfig",{"_index":1149,"title":{"interfaces/IAppConfig.html":{}},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IAppConfig.html":{},"coverage.html":{}}}],["iawsconfig",{"_index":1151,"title":{"interfaces/IAwsConfig.html":{}},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IAwsConfig.html":{},"coverage.html":{}}}],["id",{"_index":164,"title":{},"body":{"injectables/AddressTypeService.html":{},"controllers/AppController.html":{},"controllers/BankController.html":{},"classes/BankDto.html":{},"injectables/BankService.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"controllers/CityController.html":{},"classes/CityDto.html":{},"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/Document.html":{},"controllers/DocumentController.html":{},"classes/DocumentDto.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"injectables/FilesLocalService.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/State.html":{},"controllers/StateController.html":{},"classes/StateDto.html":{},"injectables/StateService.html":{}}}],["id,country",{"_index":763,"title":{},"body":{"classes/Cities.html":{}}}],["id_address_type",{"_index":39,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"classes/Query-4.html":{}}}],["id_address_type='${id",{"_index":2964,"title":{},"body":{"classes/Query-4.html":{}}}],["id_bank",{"_index":618,"title":{},"body":{"controllers/BankController.html":{},"classes/BankDto.html":{},"classes/Banks.html":{},"classes/Query-5.html":{}}}],["id_city",{"_index":665,"title":{},"body":{"classes/BankDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"controllers/CityController.html":{},"classes/CityDto.html":{},"injectables/CityService.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{}}}],["id_country",{"_index":666,"title":{},"body":{"classes/BankDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"injectables/CityService.html":{},"controllers/CountriesController.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/State.html":{},"classes/StateDto.html":{},"injectables/StateService.html":{}}}],["id_country=id_country",{"_index":849,"title":{},"body":{"injectables/CityService.html":{}}}],["id_currency",{"_index":1536,"title":{},"body":{"classes/CreateCountryDto.html":{},"controllers/CurrenciesController.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{}}}],["id_document",{"_index":1665,"title":{},"body":{"classes/Document.html":{},"classes/DocumentDto.html":{},"classes/Query-8.html":{}}}],["id_document_group",{"_index":1666,"title":{},"body":{"classes/Document.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"classes/DocumentGroupDto.html":{},"injectables/DocumentService.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{}}}],["id_state",{"_index":667,"title":{},"body":{"classes/BankDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"injectables/CityService.html":{},"classes/Query-10.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/State.html":{},"controllers/StateController.html":{},"classes/StateDto.html":{}}}],["id_state=id_state",{"_index":840,"title":{},"body":{"injectables/CityService.html":{}}}],["id_timezone",{"_index":1537,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/Query-2.html":{}}}],["id_updated_by",{"_index":2997,"title":{},"body":{"classes/Query-8.html":{}}}],["idarea",{"_index":1836,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["idea",{"_index":3486,"title":{},"body":{"index.html":{}}}],["identification",{"_index":1435,"title":{},"body":{"classes/Country.html":{},"classes/State.html":{}}}],["identifier",{"_index":58,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"classes/BankDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"classes/Country.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{},"classes/Currency.html":{},"classes/Document.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"classes/DocumentGroupDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileType.html":{},"classes/State.html":{},"classes/StateDto.html":{},"coverage.html":{}}}],["ids",{"_index":735,"title":{},"body":{"classes/Banks.html":{}}}],["ifieldconfig",{"_index":2692,"title":{},"body":{"injectables/PaginationService.html":{}}}],["ifileconfig",{"_index":1153,"title":{"interfaces/IFileConfig.html":{}},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IFileConfig.html":{},"coverage.html":{}}}],["ijwtconfig",{"_index":1155,"title":{"interfaces/IJWTConfig.html":{}},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IJWTConfig.html":{},"coverage.html":{}}}],["image",{"_index":2055,"title":{},"body":{"classes/FileNotImageException.html":{}}}],["image.exception.ts",{"_index":2053,"title":{},"body":{"classes/FileNotImageException.html":{},"coverage.html":{}}}],["image.exception.ts:20",{"_index":2060,"title":{},"body":{"classes/FileNotImageException.html":{}}}],["image.jpg",{"_index":2145,"title":{},"body":{"classes/FileUploadDto.html":{},"injectables/FilesS3PresignedService.html":{}}}],["image.jpg'})@isstring",{"_index":2143,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["imagefilefilter",{"_index":2180,"title":{},"body":{"controllers/FilesLocalController.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"coverage.html":{}}}],["imaginary",{"_index":449,"title":{},"body":{"controllers/AppController.html":{}}}],["imperative",{"_index":3576,"title":{},"body":{"index.html":{}}}],["implemented",{"_index":2376,"title":{},"body":{"injectables/FilesService.html":{}}}],["implements",{"_index":280,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{}}}],["implied",{"_index":3635,"title":{},"body":{"license.html":{}}}],["import",{"_index":74,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/BankController.html":{},"classes/BankDto.html":{},"modules/BankModule.html":{},"injectables/BankService.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"controllers/CityController.html":{},"classes/CityDto.html":{},"modules/CityModule.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService-1.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"modules/CountryMasModule.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/Document.html":{},"controllers/DocumentController.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"controllers/DocumentGroupController.html":{},"classes/DocumentGroupDto.html":{},"modules/DocumentGroupModule.html":{},"injectables/DocumentGroupService.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IFileConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/State.html":{},"controllers/StateController.html":{},"classes/StateDto.html":{},"modules/StateModule.html":{},"injectables/StateService.html":{},"classes/UpdateDto.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UpdateDto-7.html":{},"classes/UpdateDto-8.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{}}}],["imported",{"_index":2250,"title":{},"body":{"modules/FilesModule.html":{},"modules/HelperModule.html":{}}}],["importing",{"_index":356,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{}}}],["imports",{"_index":363,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{}}}],["in'})@isnotempty()@isstring",{"_index":2396,"title":{},"body":{"classes/FilterQueryDto.html":{}}}],["include",{"_index":1798,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/HttpErrorFilter.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{},"contributing.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["included",{"_index":2254,"title":{},"body":{"modules/FilesModule.html":{},"license.html":{}}}],["includes",{"_index":19,"title":{},"body":{"classes/AddresTypeDto.html":{},"injectables/AddressTypeService.html":{},"modules/AppModule.html":{},"classes/BankDto.html":{},"injectables/BankService.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"injectables/CountriesService-1.html":{},"classes/Country.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/Document.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"classes/DocumentGroupDto.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/FileUploadDto.html":{},"controllers/FilesS3Controller.html":{},"injectables/FilesS3Service.html":{},"classes/Query-10.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"classes/State.html":{},"classes/StateDto.html":{},"injectables/StateService.html":{},"index.html":{}}}],["including",{"_index":734,"title":{},"body":{"classes/Banks.html":{},"classes/Cities.html":{},"injectables/CountriesService-1.html":{},"classes/Country.html":{},"classes/CountryMas.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/Document.html":{},"classes/DocumentGroup.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/State.html":{},"classes/UtilsService.html":{},"license.html":{}}}],["inclusion",{"_index":2085,"title":{},"body":{"classes/FileResponseDto-1.html":{}}}],["incoming",{"_index":2209,"title":{},"body":{"modules/FilesLocalModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{}}}],["ind",{"_index":1479,"title":{},"body":{"classes/Country.html":{},"classes/CreateCountryDto.html":{}}}],["index",{"_index":36,"title":{"index.html":{}},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"injectables/AddressTypeService.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/BankController.html":{},"classes/BankDto.html":{},"injectables/BankService.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"controllers/CityController.html":{},"classes/CityDto.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/Document.html":{},"controllers/DocumentController.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"controllers/DocumentGroupController.html":{},"classes/DocumentGroupDto.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/FilterQueryDto.html":{},"controllers/HomeController.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/State.html":{},"controllers/StateController.html":{},"classes/StateDto.html":{},"injectables/StateService.html":{},"classes/UtilsService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["indexes",{"_index":2597,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["india",{"_index":688,"title":{},"body":{"classes/BankDto.html":{},"classes/Banks.html":{},"classes/Country.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{}}}],["indian",{"_index":1462,"title":{},"body":{"classes/Country.html":{},"classes/CreateDto.html":{},"classes/Currency.html":{}}}],["indicate",{"_index":441,"title":{},"body":{"controllers/AppController.html":{}}}],["indicates",{"_index":2264,"title":{},"body":{"controllers/FilesS3Controller.html":{},"classes/PaginationResponseDto.html":{}}}],["indicating",{"_index":165,"title":{},"body":{"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{}}}],["individual",{"_index":1925,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["inestapplication",{"_index":3436,"title":{},"body":{"miscellaneous/functions.html":{}}}],["infer",{"_index":2230,"title":{},"body":{"injectables/FilesLocalService.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/HomeService.html":{},"injectables/PrismaService.html":{}}}],["infineit/winston",{"_index":420,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"dependencies.html":{}}}],["infinity",{"_index":2409,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/SortByDto.html":{},"miscellaneous/enumerations.html":{}}}],["infinitypagination",{"_index":1376,"title":{},"body":{"controllers/CountriesController.html":{}}}],["infinitypaginationresponse",{"_index":1373,"title":{},"body":{"controllers/CountriesController.html":{}}}],["infinitypaginationresponse(country",{"_index":1383,"title":{},"body":{"controllers/CountriesController.html":{}}}],["infinitypaginationresponsedto",{"_index":1374,"title":{},"body":{"controllers/CountriesController.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/BankController.html":{},"classes/BankDto.html":{},"modules/BankModule.html":{},"injectables/BankService.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"controllers/CityController.html":{},"classes/CityDto.html":{},"modules/CityModule.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService-1.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"modules/CountryMasModule.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/Document.html":{},"controllers/DocumentController.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"controllers/DocumentGroupController.html":{},"classes/DocumentGroupDto.html":{},"modules/DocumentGroupModule.html":{},"injectables/DocumentGroupService.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/State.html":{},"controllers/StateController.html":{},"classes/StateDto.html":{},"modules/StateModule.html":{},"injectables/StateService.html":{},"classes/UpdateDto.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UpdateDto-7.html":{},"classes/UpdateDto-8.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{}}}],["information",{"_index":1338,"title":{},"body":{"controllers/CountriesController.html":{},"classes/Country.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"controllers/HomeController.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["infrastructure",{"_index":2239,"title":{},"body":{"modules/FilesModule.html":{}}}],["infrastructure/uploader/local/files.module",{"_index":2245,"title":{},"body":{"modules/FilesModule.html":{}}}],["infrastructure/uploader/s3",{"_index":2247,"title":{},"body":{"modules/FilesModule.html":{}}}],["infrastructure/uploader/s3/files.module",{"_index":2246,"title":{},"body":{"modules/FilesModule.html":{}}}],["infrastructureuploadermodule",{"_index":2249,"title":{},"body":{"modules/FilesModule.html":{},"coverage.html":{}}}],["inherits",{"_index":3136,"title":{},"body":{"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UpdateDto-7.html":{},"classes/UpdateDto-8.html":{}}}],["initial",{"_index":3221,"title":{},"body":{"changelog.html":{}}}],["initialization",{"_index":2749,"title":{},"body":{"injectables/PrismaService.html":{}}}],["initialize",{"_index":975,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["initialized",{"_index":2778,"title":{},"body":{"injectables/PrismaService.html":{}}}],["initializes",{"_index":3417,"title":{},"body":{"miscellaneous/functions.html":{}}}],["inject",{"_index":415,"title":{},"body":{"controllers/AppController.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["inject(loggerkey",{"_index":435,"title":{},"body":{"controllers/AppController.html":{}}}],["injectable",{"_index":112,"title":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"injectables/HomeService.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"injectables/StateService.html":{}},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"injectables/HomeService.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"injectables/StateService.html":{},"coverage.html":{}}}],["injectables",{"_index":114,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"injectables/HomeService.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"injectables/StateService.html":{},"overview.html":{}}}],["injected",{"_index":2368,"title":{},"body":{"injectables/FilesS3Service.html":{}}}],["injection",{"_index":2831,"title":{},"body":{"classes/Query-1.html":{}}}],["inner",{"_index":1047,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["inodeemailerconfig",{"_index":1157,"title":{"interfaces/INodeEmailerConfig.html":{}},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/INodeEmailerConfig.html":{},"coverage.html":{}}}],["input",{"_index":35,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"injectables/CommaSeparated.html":{},"classes/CountryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"injectables/SortBy.html":{},"classes/StateDto.html":{},"miscellaneous/functions.html":{}}}],["inr",{"_index":1573,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{}}}],["insert",{"_index":220,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"injectables/DocumentGroupService.html":{},"classes/DynamicQueryBuilder.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{}}}],["insert(values",{"_index":2944,"title":{},"body":{"classes/Query-3.html":{}}}],["inserted",{"_index":221,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["inserted.insertid",{"_index":223,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["insertid",{"_index":2859,"title":{},"body":{"classes/Query-10.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{}}}],["insertid,name",{"_index":2882,"title":{},"body":{"classes/Query-2.html":{}}}],["inserting",{"_index":965,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{}}}],["insertion",{"_index":1003,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["insertoptions",{"_index":2945,"title":{},"body":{"classes/Query-3.html":{}}}],["instagram",{"_index":3601,"title":{},"body":{"index.html":{}}}],["install",{"_index":3383,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["installation",{"_index":3509,"title":{},"body":{"index.html":{}}}],["installed",{"_index":3506,"title":{},"body":{"index.html":{}}}],["instance",{"_index":286,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"classes/FileNotImageException.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"injectables/PrismaService.html":{},"classes/QueryFailedFilter.html":{},"classes/UserNotFoundException.html":{},"miscellaneous/functions.html":{}}}],["instanceof",{"_index":315,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/PrismaService.html":{}}}],["instances",{"_index":2537,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["instantiated",{"_index":2253,"title":{},"body":{"modules/FilesModule.html":{}}}],["integer",{"_index":3434,"title":{},"body":{"miscellaneous/functions.html":{}}}],["integrates",{"_index":2242,"title":{},"body":{"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["integration",{"_index":2277,"title":{},"body":{"modules/FilesS3Module.html":{}}}],["interact",{"_index":609,"title":{},"body":{"controllers/BankController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"controllers/StateController.html":{}}}],["interacting",{"_index":433,"title":{},"body":{"controllers/AppController.html":{},"modules/FilesS3PresignedModule.html":{},"index.html":{}}}],["interactions",{"_index":2332,"title":{},"body":{"modules/FilesS3PresignedModule.html":{}}}],["interacts",{"_index":127,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["intercept",{"_index":3047,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["intercept(context",{"_index":3048,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["interceptor",{"_index":3037,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["intercepts",{"_index":3052,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["interface",{"_index":1110,"title":{"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{}},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/DynamicQueryBuilder.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{},"coverage.html":{}}}],["interfaces",{"_index":2542,"title":{},"body":{"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{},"overview.html":{}}}],["internal",{"_index":323,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpErrorFilter.html":{}}}],["international",{"_index":1468,"title":{},"body":{"classes/Country.html":{},"classes/CreateCountryDto.html":{}}}],["introducing",{"_index":3449,"title":{},"body":{"index.html":{}}}],["introduction",{"_index":3448,"title":{},"body":{"index.html":{}}}],["invalid",{"_index":932,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["involving",{"_index":2303,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["ipagemetadtoparameters",{"_index":2557,"title":{"interfaces/IPageMetaDtoParameters.html":{}},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"coverage.html":{}}}],["ipaginationfieldconfig",{"_index":197,"title":{"interfaces/IPaginationFieldConfig.html":{}},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"interfaces/IPaginationFieldConfig.html":{},"injectables/StateService.html":{},"classes/UtilsService.html":{},"coverage.html":{}}}],["ipostgresqlconfig",{"_index":1160,"title":{"interfaces/IPostgreSQLConfig.html":{}},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IPostgreSQLConfig.html":{},"coverage.html":{}}}],["isarray",{"_index":2437,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["isboolean",{"_index":1939,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-3.html":{}}}],["isboolean()@isoptional",{"_index":1910,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["isdefined",{"_index":78,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"classes/CountryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/StateDto.html":{}}}],["isdefined()@isnotempty()@isstring()@apiproperty({type",{"_index":805,"title":{},"body":{"classes/CityDto.html":{},"classes/CreateCountryDto.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/StateDto.html":{}}}],["isdefined()@isnotempty()@isstring()@maxlength(10)@apiproperty({type",{"_index":1588,"title":{},"body":{"classes/CreateDto.html":{}}}],["isdefined()@isnotempty()@isstring()@maxlength(100)@apiproperty({type",{"_index":3113,"title":{},"body":{"classes/StateDto.html":{}}}],["isdefined()@isnotempty()@isstring()@maxlength(20)@apiproperty({type",{"_index":808,"title":{},"body":{"classes/CityDto.html":{}}}],["isdefined()@isnotempty()@isstring()@maxlength(5)@apiproperty({type",{"_index":1514,"title":{},"body":{"classes/CountryDto.html":{}}}],["isdefined()@isnotempty()@isstring()@maxlength(50)@apiproperty({type",{"_index":45,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{}}}],["isdefined()@isnotempty()@isstring()@maxlength(6)@apiproperty({type",{"_index":1585,"title":{},"body":{"classes/CreateDto.html":{}}}],["isdefined()@isnotempty()@isstring()@maxlength(80)@apiproperty({type",{"_index":1520,"title":{},"body":{"classes/CountryDto.html":{},"classes/CreateDto.html":{}}}],["isdefined()@isnotempty()@isuuid()@apiproperty({type",{"_index":675,"title":{},"body":{"classes/BankDto.html":{}}}],["isdefined()@type(undefined)@isnumber()@min(0)@apiproperty({type",{"_index":1575,"title":{},"body":{"classes/CreateDto.html":{}}}],["isendgridconfig",{"_index":1162,"title":{"interfaces/ISendGridConfig.html":{}},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/ISendGridConfig.html":{},"coverage.html":{}}}],["isenum",{"_index":1141,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["isenum(environment",{"_index":1870,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-3.html":{}}}],["isenum(environment)@isoptional",{"_index":1862,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-3.html":{}}}],["isenum(filedriver",{"_index":1180,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["isenum(filedriver)@isoptional",{"_index":1980,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["isenum(paginationtype",{"_index":2415,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["isglobal",{"_index":529,"title":{},"body":{"modules/AppModule.html":{}}}],["ishealthy",{"_index":2756,"title":{},"body":{"injectables/PrismaService.html":{}}}],["isin",{"_index":2399,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["isin(abc(x",{"_index":2429,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["isint",{"_index":1142,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{}}}],["isint()@isoptional",{"_index":1929,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["isint()@min(0)@max(65535",{"_index":1934,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["isint()@min(0)@max(65535)@isoptional",{"_index":1841,"title":{},"body":{"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{}}}],["ismsconfig",{"_index":1164,"title":{"interfaces/ISMSConfig.html":{}},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/ISMSConfig.html":{},"coverage.html":{}}}],["isn't",{"_index":2590,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["isnan(numbervalue",{"_index":2443,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["isnotempty",{"_index":79,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"classes/CountryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"classes/StateDto.html":{}}}],["isnotempty()@isstring",{"_index":2394,"title":{},"body":{"classes/FilterQueryDto.html":{}}}],["isnotempty()@isstring()@apiproperty({type",{"_index":1540,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["isnumber",{"_index":80,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"classes/CreateDto.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/FileUploadDto.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/StateDto.html":{}}}],["isnumber()@isoptional",{"_index":3010,"title":{},"body":{"classes/QueryCountryDto.html":{}}}],["isnumberstringornumber",{"_index":2402,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["isnumberstringornumber(validationoptions",{"_index":3426,"title":{},"body":{"miscellaneous/functions.html":{}}}],["iso",{"_index":1436,"title":{},"body":{"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/Query-2.html":{},"classes/SortByDto.html":{}}}],["iso3",{"_index":1450,"title":{},"body":{"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/Query-2.html":{}}}],["isoptional",{"_index":81,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"classes/ConfigService.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/StateDto.html":{}}}],["isoptional()@isboolean",{"_index":2014,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["isoptional()@isnumber()@apiproperty({type",{"_index":65,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/StateDto.html":{}}}],["isoptional()@isstring",{"_index":2012,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["isoptional()@isstring()@maxlength(5)@apiproperty({type",{"_index":690,"title":{},"body":{"classes/BankDto.html":{}}}],["isoptional()@isuuid()@apiproperty({type",{"_index":670,"title":{},"body":{"classes/BankDto.html":{}}}],["isstring",{"_index":82,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"classes/ConfigService.html":{},"classes/CountryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileUploadDto.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/StateDto.html":{}}}],["isstring()@isoptional",{"_index":1839,"title":{},"body":{"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["issue",{"_index":3216,"title":{},"body":{"changelog.html":{},"contributing.html":{}}}],["issued",{"_index":453,"title":{},"body":{"controllers/AppController.html":{}}}],["issuer",{"_index":1274,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IJWTConfig.html":{}}}],["issues",{"_index":3582,"title":{},"body":{"index.html":{}}}],["ist",{"_index":1455,"title":{},"body":{"classes/Country.html":{}}}],["isurl",{"_index":1144,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{}}}],["isurl({require_tld",{"_index":1843,"title":{},"body":{"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{}}}],["isuuid",{"_index":697,"title":{},"body":{"classes/BankDto.html":{}}}],["isvalid",{"_index":929,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["isvalidfield",{"_index":2400,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["isvalidfield(entity",{"_index":3431,"title":{},"body":{"miscellaneous/functions.html":{}}}],["it's",{"_index":3453,"title":{},"body":{"index.html":{}}}],["item",{"_index":2582,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["items",{"_index":2450,"title":{},"body":{"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["iterate",{"_index":958,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["iuploadfileconfig",{"_index":1166,"title":{"interfaces/IUploadFileConfig.html":{}},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IUploadFileConfig.html":{},"coverage.html":{}}}],["javascript",{"_index":3493,"title":{},"body":{"index.html":{}}}],["john",{"_index":446,"title":{},"body":{"controllers/AppController.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["johndoe",{"_index":445,"title":{},"body":{"controllers/AppController.html":{}}}],["join",{"_index":842,"title":{},"body":{"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"interfaces/IPaginationFieldConfig.html":{},"injectables/PaginationService.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{},"injectables/StateService.html":{},"classes/UtilsService.html":{},"index.html":{}}}],["join.additionalconditions",{"_index":1105,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["join.condition",{"_index":1076,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["join.condition}${selectfields",{"_index":1052,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["join.selectfields",{"_index":1048,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["join.selectfields.map((field",{"_index":1049,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["join.table",{"_index":1051,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["join.table}.${foreignkey",{"_index":1079,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["join.type",{"_index":1046,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["joinalias",{"_index":1072,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["joinalias}.${cond",{"_index":1107,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["joinalias}.${foreignkey",{"_index":1099,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["joinclause",{"_index":1826,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["joinclauses",{"_index":1039,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["joined",{"_index":997,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["joinquery",{"_index":2695,"title":{},"body":{"injectables/PaginationService.html":{}}}],["joins",{"_index":992,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/DynamicQueryBuilder.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{}}}],["joins.join",{"_index":1828,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["joins.length",{"_index":1827,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["joins.map((join",{"_index":1053,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["jointable",{"_index":871,"title":{},"body":{"injectables/CityService.html":{},"injectables/DocumentService.html":{},"interfaces/IPaginationFieldConfig.html":{},"injectables/StateService.html":{}}}],["jointables",{"_index":1643,"title":{},"body":{"injectables/CurrenciesService.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["jointables.join",{"_index":1648,"title":{},"body":{"injectables/CurrenciesService.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["jointables.push(config.jointable(alias",{"_index":3188,"title":{},"body":{"classes/UtilsService.html":{}}}],["jointables.push(config.jointable(index",{"_index":3187,"title":{},"body":{"classes/UtilsService.html":{}}}],["jointype",{"_index":1045,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["json",{"_index":1403,"title":{},"body":{"controllers/CountriesController.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/Query-1.html":{},"classes/SortByDto.html":{}}}],["json.parse(value",{"_index":2388,"title":{},"body":{"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{}}}],["json.stringify(_.clone(errorresponse",{"_index":3032,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["json.stringify(_.clone(r",{"_index":584,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["json.stringify(_.clone(request.body",{"_index":582,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["json.stringify(errorresponse",{"_index":2531,"title":{},"body":{"classes/HttpErrorFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["json.stringify(queryconfig",{"_index":857,"title":{},"body":{"injectables/CityService.html":{}}}],["json.stringify(reqstrobj",{"_index":593,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{}}}],["json.stringify(requestdata",{"_index":2835,"title":{},"body":{"classes/Query-1.html":{}}}],["json.stringify(responsedata",{"_index":2836,"title":{},"body":{"classes/Query-1.html":{}}}],["json.stringify(resstrobj",{"_index":598,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{}}}],["jwt",{"_index":3461,"title":{},"body":{"index.html":{}}}],["jwtconfig",{"_index":1269,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["jwtservice",{"_index":2493,"title":{},"body":{"modules/HelperModule.html":{}}}],["k8s",{"_index":3563,"title":{},"body":{"index.html":{}}}],["key",{"_index":1035,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ConfigService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileType.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PrismaService.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{},"classes/SortByDto.html":{},"miscellaneous/functions.html":{}}}],["key?awsaccesskeyid=access_key&expires=expiration_time&signature=signature",{"_index":2104,"title":{},"body":{"classes/FileResponseDto-2.html":{}}}],["keyof",{"_index":1007,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"interfaces/QueryConfig.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{}}}],["keys",{"_index":977,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/DynamicQueryBuilder.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{}}}],["keys.join",{"_index":1024,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/DynamicQueryBuilder.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{}}}],["keys.map((key",{"_index":1022,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{}}}],["key}=${this.formatvalue(updatedata[key",{"_index":2963,"title":{},"body":{"classes/Query-4.html":{}}}],["kind",{"_index":3634,"title":{},"body":{"license.html":{}}}],["known",{"_index":2721,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["kubectl",{"_index":3566,"title":{},"body":{"index.html":{}}}],["large",{"_index":2356,"title":{},"body":{"injectables/FilesS3PresignedService.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["last",{"_index":2583,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["lastkey",{"_index":2862,"title":{},"body":{"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{}}}],["latest",{"_index":3454,"title":{},"body":{"index.html":{}}}],["layer",{"_index":884,"title":{},"body":{"injectables/CityService.html":{}}}],["left",{"_index":1065,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["legal",{"_index":1716,"title":{},"body":{"classes/DocumentGroup.html":{},"classes/DocumentGroupDto.html":{}}}],["legend",{"_index":329,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/BankModule.html":{},"modules/CityModule.html":{},"modules/CountriesModule.html":{},"modules/CountryMasModule.html":{},"modules/CurrenciesModule.html":{},"modules/DocumentGroupModule.html":{},"modules/DocumentModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{},"modules/StateModule.html":{},"overview.html":{}}}],["liability",{"_index":3649,"title":{},"body":{"license.html":{}}}],["liable",{"_index":3646,"title":{},"body":{"license.html":{}}}],["library",{"_index":890,"title":{},"body":{"injectables/CityService.html":{},"classes/Query-10.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{}}}],["license",{"_index":3596,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["licensed",{"_index":3589,"title":{},"body":{"index.html":{}}}],["limit",{"_index":1387,"title":{},"body":{"controllers/CountriesController.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"dependencies.html":{}}}],["limit/tsconfig",{"_index":3362,"title":{},"body":{"dependencies.html":{}}}],["limitation",{"_index":3614,"title":{},"body":{"license.html":{}}}],["limited",{"_index":3636,"title":{},"body":{"license.html":{}}}],["limits",{"_index":2299,"title":{},"body":{"modules/FilesS3Module.html":{}}}],["line",{"_index":924,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{}}}],["linkedin",{"_index":3600,"title":{},"body":{"index.html":{}}}],["lint",{"_index":3499,"title":{},"body":{"index.html":{}}}],["linter",{"_index":3494,"title":{},"body":{"index.html":{}}}],["linting",{"_index":3258,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["list",{"_index":172,"title":{},"body":{"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"modules/FilesLocalModule.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{},"injectables/SortBy.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{}}}],["literal",{"_index":3174,"title":{},"body":{"classes/UtilsService.html":{},"miscellaneous/typealiases.html":{}}}],["load",{"_index":530,"title":{},"body":{"modules/AppModule.html":{}}}],["local",{"_index":1983,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["located",{"_index":674,"title":{},"body":{"classes/BankDto.html":{},"classes/Banks.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{}}}],["location",{"_index":2101,"title":{},"body":{"classes/FileResponseDto-2.html":{}}}],["lodash",{"_index":555,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/DynamicQueryBuilder.html":{},"classes/HttpErrorFilter.html":{},"injectables/PrismaService.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{}}}],["log",{"_index":413,"title":{},"body":{"controllers/AppController.html":{},"injectables/CityService.html":{}}}],["log_in_file",{"_index":2046,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["logger",{"_index":414,"title":{},"body":{"controllers/AppController.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/HttpErrorFilter.html":{},"classes/QueryFailedFilter.html":{},"dependencies.html":{}}}],["logger.error",{"_index":2530,"title":{},"body":{"classes/HttpErrorFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["logger.error(`${request.method",{"_index":2529,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["logger/context/infrastructure/nestjs/contextmodule",{"_index":512,"title":{},"body":{"modules/AppModule.html":{}}}],["logger/logger/domain/logger",{"_index":421,"title":{},"body":{"controllers/AppController.html":{}}}],["logger/logger/infrastructure/nestjs/loggermodule",{"_index":514,"title":{},"body":{"modules/AppModule.html":{}}}],["logger_app",{"_index":2002,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["logger_console_print",{"_index":2003,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["logger_context",{"_index":2004,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["logger_database_storage",{"_index":2005,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["logger_duration",{"_index":2006,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["logger_duration_log_level",{"_index":2007,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["logger_log_in_file",{"_index":2008,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["logger_log_level",{"_index":2009,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["logger_organization",{"_index":2010,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["logger_slack_inc_webhook_url",{"_index":2011,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["loggerconfig",{"_index":522,"title":{},"body":{"modules/AppModule.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"miscellaneous/typealiases.html":{}}}],["loggerkey",{"_index":419,"title":{},"body":{"controllers/AppController.html":{}}}],["loggermodule",{"_index":513,"title":{},"body":{"modules/AppModule.html":{}}}],["loggermodule.forroot(prismaservice",{"_index":533,"title":{},"body":{"modules/AppModule.html":{}}}],["logging",{"_index":2812,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["logic",{"_index":23,"title":{},"body":{"classes/AddresTypeDto.html":{},"injectables/AddressTypeService.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/BankDto.html":{},"injectables/BankService.html":{},"classes/CityDto.html":{},"injectables/CountriesService-1.html":{},"classes/CountryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"injectables/CurrenciesService.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"modules/FilesLocalModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"classes/StateDto.html":{},"injectables/StateService.html":{}}}],["logs",{"_index":2521,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["long",{"_index":1518,"title":{},"body":{"classes/CountryDto.html":{},"classes/CreateDto.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["lowercasetransformer",{"_index":3353,"title":{},"body":{"coverage.html":{}}}],["lts.1",{"_index":3386,"title":{},"body":{"dependencies.html":{}}}],["m",{"_index":3251,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["mac",{"_index":3538,"title":{},"body":{"index.html":{}}}],["made",{"_index":2212,"title":{},"body":{"modules/FilesLocalModule.html":{}}}],["main",{"_index":1013,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{},"classes/UtilsService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["main.id",{"_index":1015,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["main.status",{"_index":1014,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["mainalias",{"_index":1071,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["mainalias}.${mainfield",{"_index":1080,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["mainalias}.${string(field",{"_index":1097,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["mainalias}.id",{"_index":1083,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["mainalias}.status",{"_index":1082,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["mainfield",{"_index":1075,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["make",{"_index":2487,"title":{},"body":{"modules/HelperModule.html":{},"contributing.html":{}}}],["makes",{"_index":3137,"title":{},"body":{"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UpdateDto-7.html":{},"classes/UpdateDto-8.html":{},"miscellaneous/typealiases.html":{}}}],["making",{"_index":2488,"title":{},"body":{"modules/HelperModule.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UpdateDto-7.html":{},"classes/UpdateDto-8.html":{}}}],["manage",{"_index":118,"title":{},"body":{"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"modules/BankModule.html":{},"injectables/BankService.html":{},"modules/CityModule.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"modules/CountryMasModule.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"modules/DocumentGroupModule.html":{},"injectables/DocumentGroupService.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesService.html":{},"injectables/PrismaService.html":{},"controllers/StateController.html":{},"modules/StateModule.html":{},"injectables/StateService.html":{}}}],["management",{"_index":2844,"title":{},"body":{"classes/Query-10.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{}}}],["manages",{"_index":2218,"title":{},"body":{"injectables/FilesLocalService.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{}}}],["managing",{"_index":379,"title":{},"body":{"modules/ApiModule.html":{},"injectables/CityService.html":{},"modules/CurrenciesModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{}}}],["manipulation",{"_index":2845,"title":{},"body":{"classes/Query-10.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{}}}],["map",{"_index":3058,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{},"classes/UtilsService.html":{}}}],["map(([key",{"_index":1034,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["map((cond",{"_index":1106,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["map((field",{"_index":1096,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["map((filter",{"_index":2698,"title":{},"body":{"injectables/PaginationService.html":{}}}],["map((join",{"_index":1040,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["map((key",{"_index":2887,"title":{},"body":{"classes/Query-2.html":{}}}],["map((part",{"_index":1077,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["map((s",{"_index":2709,"title":{},"body":{"injectables/PaginationService.html":{}}}],["map((sortitem",{"_index":3195,"title":{},"body":{"classes/UtilsService.html":{}}}],["map((val",{"_index":2701,"title":{},"body":{"injectables/PaginationService.html":{}}}],["markdown",{"_index":3531,"title":{},"body":{"index.html":{}}}],["marked",{"_index":2481,"title":{},"body":{"modules/HelperModule.html":{}}}],["marks",{"_index":2084,"title":{},"body":{"classes/FileResponseDto-1.html":{},"injectables/FilesS3Service.html":{}}}],["master/banks/bank.module",{"_index":373,"title":{},"body":{"modules/ApiModule.html":{}}}],["master/city_mas/cities.modules",{"_index":374,"title":{},"body":{"modules/ApiModule.html":{}}}],["master/country_mas/country_mas.module",{"_index":375,"title":{},"body":{"modules/ApiModule.html":{}}}],["master/document_groups/document_grp.module",{"_index":376,"title":{},"body":{"modules/ApiModule.html":{}}}],["master/documents/documents.module",{"_index":377,"title":{},"body":{"modules/ApiModule.html":{}}}],["master/state_mas/state.module",{"_index":378,"title":{},"body":{"modules/ApiModule.html":{}}}],["match",{"_index":953,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["matches",{"_index":2398,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["matches(/^(asc|desc|asc|desc",{"_index":2434,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["matching",{"_index":89,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/BankController.html":{},"classes/BankDto.html":{},"modules/BankModule.html":{},"injectables/BankService.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"controllers/CityController.html":{},"classes/CityDto.html":{},"modules/CityModule.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService-1.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"modules/CountryMasModule.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/Document.html":{},"controllers/DocumentController.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"controllers/DocumentGroupController.html":{},"classes/DocumentGroupDto.html":{},"modules/DocumentGroupModule.html":{},"injectables/DocumentGroupService.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/State.html":{},"controllers/StateController.html":{},"classes/StateDto.html":{},"modules/StateModule.html":{},"injectables/StateService.html":{},"classes/UpdateDto.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UpdateDto-7.html":{},"classes/UpdateDto-8.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"changelog.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["math.ceil(totalitems",{"_index":2589,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["math.min(startindex",{"_index":2598,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["max",{"_index":1145,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["max(500",{"_index":2421,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["max(65535",{"_index":1173,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{}}}],["max_file_size",{"_index":1971,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["max_upload_file_size",{"_index":1316,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IUploadFileConfig.html":{}}}],["maxconnections",{"_index":1953,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["maxfilesize",{"_index":1332,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"interfaces/IFileConfig.html":{}}}],["maximum",{"_index":1931,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"injectables/FilesS3PresignedService.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["maxlength",{"_index":49,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"classes/CountryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/StateDto.html":{}}}],["maxlength(10",{"_index":1593,"title":{},"body":{"classes/CreateDto.html":{}}}],["maxlength(100",{"_index":3117,"title":{},"body":{"classes/StateDto.html":{}}}],["maxlength(2",{"_index":1565,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["maxlength(20",{"_index":813,"title":{},"body":{"classes/CityDto.html":{}}}],["maxlength(3",{"_index":1566,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{}}}],["maxlength(5",{"_index":698,"title":{},"body":{"classes/BankDto.html":{},"classes/CountryDto.html":{}}}],["maxlength(50",{"_index":86,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{}}}],["maxlength(6",{"_index":1592,"title":{},"body":{"classes/CreateDto.html":{}}}],["maxlength(80",{"_index":1524,"title":{},"body":{"classes/CountryDto.html":{},"classes/CreateDto.html":{}}}],["maxpages",{"_index":2559,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["maxpagesaftercurrentpage",{"_index":2596,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["maxpagesbeforecurrentpage",{"_index":2595,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["maybetype",{"_index":3672,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["meaning",{"_index":2482,"title":{},"body":{"modules/HelperModule.html":{}}}],["memberof",{"_index":1794,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FilterQueryDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/Query.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"classes/SortByDto.html":{}}}],["merchantability",{"_index":3638,"title":{},"body":{"license.html":{}}}],["merge",{"_index":3617,"title":{},"body":{"license.html":{}}}],["message",{"_index":217,"title":{},"body":{"injectables/AddressTypeService.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/FileNotImageException.html":{},"injectables/FilesS3PresignedService.html":{},"classes/FilterQueryDto.html":{},"classes/HttpErrorFilter.html":{},"classes/PaginationQueryDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"injectables/StateService.html":{},"classes/UserNotFoundException.html":{},"index.html":{}}}],["message');example",{"_index":3161,"title":{},"body":{"classes/UserNotFoundException.html":{}}}],["meta",{"_index":2654,"title":{},"body":{"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{}}}],["metadata",{"_index":287,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"controllers/FilesS3Controller.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/QueryFailedFilter.html":{},"dependencies.html":{}}}],["metapage",{"_index":2683,"title":{},"body":{"injectables/PaginationService.html":{}}}],["method",{"_index":864,"title":{},"body":{"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"controllers/FilesS3Controller.html":{},"injectables/FilesS3Service.html":{},"classes/HttpErrorFilter.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"interfaces/QueryConfig.html":{}}}],["methods",{"_index":117,"title":{},"body":{"injectables/AddressTypeService.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"controllers/HomeController.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{},"classes/UtilsService.html":{}}}],["method},${url},${reqdata},${resdata",{"_index":2826,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["middle",{"_index":2594,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["middleware",{"_index":2278,"title":{},"body":{"modules/FilesS3Module.html":{},"miscellaneous/functions.html":{}}}],["migration",{"_index":3549,"title":{},"body":{"index.html":{}}}],["migrationdocker",{"_index":3551,"title":{},"body":{"index.html":{}}}],["mimetype",{"_index":2552,"title":{},"body":{"interfaces/IFileConfig.html":{}}}],["min",{"_index":1146,"title":{},"body":{"classes/ConfigService.html":{},"classes/CreateDto.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["min(0",{"_index":1172,"title":{},"body":{"classes/ConfigService.html":{},"classes/CreateDto.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{}}}],["min(1",{"_index":2417,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["min(10",{"_index":2420,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["minikube",{"_index":3565,"title":{},"body":{"index.html":{}}}],["minimum",{"_index":2416,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["minutes",{"_index":1488,"title":{},"body":{"classes/Country.html":{}}}],["miscellaneous",{"_index":3399,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["mit",{"_index":3588,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["model",{"_index":968,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["model/table",{"_index":976,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["models",{"_index":963,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["modify",{"_index":3616,"title":{},"body":{"license.html":{}}}],["module",{"_index":84,"title":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/BankModule.html":{},"modules/CityModule.html":{},"modules/CountriesModule.html":{},"modules/CountryMasModule.html":{},"modules/CurrenciesModule.html":{},"modules/DocumentGroupModule.html":{},"modules/DocumentModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{},"modules/StateModule.html":{}},"body":{"classes/AddresTypeDto.html":{},"injectables/AddressTypeService.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/BankController.html":{},"classes/BankDto.html":{},"modules/BankModule.html":{},"injectables/BankService.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"modules/CityModule.html":{},"injectables/CityService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService-1.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"modules/CountryMasModule.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/Document.html":{},"controllers/DocumentController.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"controllers/DocumentGroupController.html":{},"classes/DocumentGroupDto.html":{},"modules/DocumentGroupModule.html":{},"injectables/DocumentGroupService.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"classes/FileType.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesService.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/PaginationQueryDto.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"classes/SortByDto.html":{},"classes/State.html":{},"controllers/StateController.html":{},"classes/StateDto.html":{},"modules/StateModule.html":{},"injectables/StateService.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UpdateDto-7.html":{},"classes/UpdateDto-8.html":{},"overview.html":{}}}],["module,method,url,req,response",{"_index":2824,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["modules",{"_index":327,"title":{"modules.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/BankModule.html":{},"modules/CityModule.html":{},"modules/CountriesModule.html":{},"controllers/CountryController.html":{},"modules/CountryMasModule.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"modules/DocumentGroupModule.html":{},"modules/DocumentModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{},"modules/StateModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"modules.html":{},"overview.html":{}}}],["modules/api.module",{"_index":524,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/countries/dto/country",{"_index":2406,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["module}','${method}','${url}','${reqescvalue}','${resescvalue",{"_index":2825,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["more",{"_index":2743,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"index.html":{}}}],["much",{"_index":3239,"title":{},"body":{"contributing.html":{}}}],["multer",{"_index":2175,"title":{},"body":{"controllers/FilesLocalController.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"dependencies.html":{}}}],["multermodule",{"_index":2279,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["multermodule.registerasync",{"_index":2287,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["multers3",{"_index":2285,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["multers3.auto_content_type",{"_index":2294,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["multifiledestdir",{"_index":3344,"title":{},"body":{"coverage.html":{}}}],["multiline",{"_index":1198,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["multipart/form",{"_index":2190,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["multiple",{"_index":3199,"title":{},"body":{"classes/UtilsService.html":{}}}],["multiple_file_path",{"_index":1320,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IUploadFileConfig.html":{}}}],["multiplestatements",{"_index":1226,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["my_table",{"_index":2678,"title":{},"body":{"injectables/PaginationService.html":{}}}],["mycontext",{"_index":2034,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["myset",{"_index":3181,"title":{},"body":{"classes/UtilsService.html":{}}}],["myset.add(alias",{"_index":3186,"title":{},"body":{"classes/UtilsService.html":{}}}],["myset.has(alias",{"_index":3185,"title":{},"body":{"classes/UtilsService.html":{}}}],["mysql",{"_index":1214,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["n",{"_index":1196,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["name",{"_index":150,"title":{},"body":{"injectables/AddressTypeService.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/BankController.html":{},"classes/BankDto.html":{},"injectables/BankService.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"controllers/CityController.html":{},"classes/CityDto.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/Document.html":{},"controllers/DocumentController.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"controllers/DocumentGroupController.html":{},"classes/DocumentGroupDto.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileNotImageException.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/FilterQueryDto.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/State.html":{},"controllers/StateController.html":{},"classes/StateDto.html":{},"injectables/StateService.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["name_plural",{"_index":1569,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/Query-3.html":{}}}],["names",{"_index":2619,"title":{},"body":{"interfaces/IPaginationFieldConfig.html":{},"classes/Query-3.html":{}}}],["native",{"_index":1589,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{}}}],["navigate",{"_index":2564,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["near",{"_index":2592,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["necessary",{"_index":705,"title":{},"body":{"modules/BankModule.html":{},"modules/CityModule.html":{},"modules/CountriesModule.html":{},"modules/CountryMasModule.html":{},"modules/CurrenciesModule.html":{},"modules/DocumentGroupModule.html":{},"modules/DocumentModule.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesS3PresignedModule.html":{},"controllers/HomeController.html":{},"modules/StateModule.html":{}}}],["needing",{"_index":2485,"title":{},"body":{"modules/HelperModule.html":{}}}],["nest",{"_index":3587,"title":{},"body":{"index.html":{},"properties.html":{}}}],["nested",{"_index":3038,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["nestederrormessage",{"_index":602,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["nestinterceptor",{"_index":3056,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["nestjs",{"_index":431,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"injectables/FilesService.html":{},"classes/FilterQueryDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/PaginationQueryDto.html":{},"injectables/ResolvePromisesInterceptor.html":{},"classes/SortByDto.html":{},"classes/UserNotFoundException.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["nestjs/axios",{"_index":2489,"title":{},"body":{"modules/HelperModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":108,"title":{},"body":{"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/BankController.html":{},"modules/BankModule.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"modules/CityModule.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"modules/CountryMasModule.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"modules/DocumentGroupModule.html":{},"injectables/DocumentGroupService.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"classes/FileNotImageException.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"controllers/StateController.html":{},"modules/StateModule.html":{},"injectables/StateService.html":{},"classes/UserNotFoundException.html":{},"dependencies.html":{}}}],["nestjs/common/utils/random",{"_index":2283,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["nestjs/config",{"_index":508,"title":{},"body":{"modules/AppModule.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"injectables/FilesLocalService.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/HomeService.html":{},"injectables/PrismaService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":305,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":2494,"title":{},"body":{"modules/HelperModule.html":{}}}],["nestjs/mapped",{"_index":3141,"title":{},"body":{"classes/UpdateDto-1.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UpdateDto-7.html":{},"classes/UpdateDto-8.html":{}}}],["nestjs/platform",{"_index":2170,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":76,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"controllers/AddressTypeController.html":{},"controllers/AppController.html":{},"controllers/BankController.html":{},"classes/BankDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"controllers/CityController.html":{},"classes/CityDto.html":{},"controllers/CountriesController.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"classes/Currency.html":{},"classes/Document.html":{},"controllers/DocumentController.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"controllers/DocumentGroupController.html":{},"classes/DocumentGroupDto.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"controllers/HomeController.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/State.html":{},"controllers/StateController.html":{},"classes/StateDto.html":{},"classes/UpdateDto.html":{},"classes/UpdateDto-2.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":399,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/PrismaService.html":{},"dependencies.html":{}}}],["new",{"_index":156,"title":{},"body":{"injectables/AddressTypeService.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"classes/CityDto.html":{},"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"classes/CountryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"classes/DocumentDto.html":{},"controllers/DocumentGroupController.html":{},"classes/DocumentGroupDto.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/FileNotImageException.html":{},"classes/FileType.html":{},"injectables/FilesLocalService.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"controllers/HomeController.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryFailedFilter.html":{},"controllers/StateController.html":{},"classes/StateDto.html":{},"injectables/StateService.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"contributing.html":{},"coverage.html":{},"index.html":{}}}],["newly",{"_index":720,"title":{},"body":{"injectables/BankService.html":{},"injectables/DocumentGroupService.html":{}}}],["newobj",{"_index":2790,"title":{},"body":{"injectables/PrismaService.html":{}}}],["newobj[key",{"_index":2795,"title":{},"body":{"injectables/PrismaService.html":{}}}],["next",{"_index":923,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{},"index.html":{}}}],["next.handle().pipe(map((data",{"_index":3062,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["ng",{"_index":2599,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["nice",{"_index":1558,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["nice_name",{"_index":1538,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/Query-2.html":{}}}],["node.js",{"_index":3452,"title":{},"body":{"index.html":{}}}],["node_emailer_from_email",{"_index":1300,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/INodeEmailerConfig.html":{}}}],["node_emailer_host",{"_index":1292,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/INodeEmailerConfig.html":{}}}],["node_emailer_password",{"_index":1298,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/INodeEmailerConfig.html":{}}}],["node_emailer_port",{"_index":1294,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/INodeEmailerConfig.html":{}}}],["node_emailer_to_email",{"_index":1302,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/INodeEmailerConfig.html":{}}}],["node_emailer_user",{"_index":1296,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/INodeEmailerConfig.html":{}}}],["node_env",{"_index":1853,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-3.html":{}}}],["nodeemailerconfig",{"_index":1291,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["nodeenv",{"_index":1128,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-3.html":{}}}],["non",{"_index":2054,"title":{},"body":{"classes/FileNotImageException.html":{}}}],["none",{"_index":2408,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"miscellaneous/enumerations.html":{}}}],["noninfringement",{"_index":3642,"title":{},"body":{"license.html":{}}}],["notes",{"_index":3580,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":3159,"title":{},"body":{"classes/UserNotFoundException.html":{}}}],["nothing",{"_index":233,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["notice",{"_index":3629,"title":{},"body":{"license.html":{}}}],["now",{"_index":881,"title":{},"body":{"injectables/CityService.html":{}}}],["npm",{"_index":3390,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["null",{"_index":186,"title":{},"body":{"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"classes/Banks.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/HttpErrorFilter.html":{},"classes/PaginationQueryDto.html":{},"injectables/PrismaService.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryCountryDto.html":{},"interfaces/QueryOptions.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{},"classes/UtilsService.html":{}}}],["num_code",{"_index":1539,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/Query-2.html":{}}}],["number",{"_index":64,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"controllers/AppController.html":{},"classes/BankDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ConfigService.html":{},"classes/Country.html":{},"classes/CountryMas.html":{},"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/Document.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"classes/DocumentGroupDto.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileUploadDto.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"interfaces/IAppConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"interfaces/QueryConfig.html":{},"classes/QueryCountryDto.html":{},"interfaces/QueryOptions.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/State.html":{},"classes/StateDto.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{}}}],["number(strippedvalue",{"_index":2442,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["number(this.get(key",{"_index":1206,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["number(total[0].count",{"_index":2690,"title":{},"body":{"injectables/PaginationService.html":{}}}],["number(value",{"_index":2386,"title":{},"body":{"classes/FilterCountryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortCountryDto.html":{}}}],["numbers",{"_index":902,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"injectables/SortBy.html":{},"classes/UtilsService.html":{}}}],["numbervalue",{"_index":2441,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["numeric",{"_index":3428,"title":{},"body":{"miscellaneous/functions.html":{}}}],["o",{"_index":464,"title":{},"body":{"controllers/AppController.html":{}}}],["object",{"_index":12,"title":{},"body":{"classes/AddresTypeDto.html":{},"injectables/AddressTypeService.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/BankController.html":{},"classes/BankDto.html":{},"injectables/BankService.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"controllers/CityController.html":{},"classes/CityDto.html":{},"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/Document.html":{},"controllers/DocumentController.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"controllers/DocumentGroupController.html":{},"classes/DocumentGroupDto.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/FilterQueryDto.html":{},"controllers/HomeController.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/PaginationQueryDto.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{},"classes/SortByDto.html":{},"classes/State.html":{},"controllers/StateController.html":{},"classes/StateDto.html":{},"injectables/StateService.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UpdateDto-7.html":{},"classes/UpdateDto-8.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{}}}],["object.assign",{"_index":2791,"title":{},"body":{"injectables/PrismaService.html":{}}}],["object.defineproperty(pagination",{"_index":2667,"title":{},"body":{"classes/PaginationResponseDto.html":{}}}],["object.entries(newobj",{"_index":2792,"title":{},"body":{"injectables/PrismaService.html":{}}}],["object.entries(updatedata",{"_index":1033,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["object.keys(conditions).map",{"_index":1831,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["object.keys(conditions).map((key",{"_index":1816,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["object.keys(conds",{"_index":1020,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["object.keys(data).filter((key",{"_index":2884,"title":{},"body":{"classes/Query-2.html":{}}}],["object.keys(optionalconditions).foreach((key",{"_index":1820,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["object.keys(payload).length",{"_index":1635,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["object.keys(process.env",{"_index":1202,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["object.keys(updatedata).map",{"_index":2962,"title":{},"body":{"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{}}}],["object.keys(updatedto).length",{"_index":231,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["object.keys(values).length",{"_index":1832,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["object.keys(values).map((key",{"_index":1830,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["object.keys(where)[object.keys(where).length",{"_index":2863,"title":{},"body":{"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{}}}],["object.values(conditions",{"_index":1835,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["object.values(values",{"_index":1834,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["objects",{"_index":303,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"controllers/CountriesController.html":{},"classes/FilterQueryDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/PaginationQueryDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"interfaces/QueryConfig.html":{},"classes/QueryFailedFilter.html":{},"classes/SortByDto.html":{},"miscellaneous/typealiases.html":{}}}],["observable",{"_index":3054,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["obtaining",{"_index":3609,"title":{},"body":{"license.html":{}}}],["occurred",{"_index":2818,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["occurs",{"_index":210,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["office",{"_index":48,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{}}}],["offset",{"_index":1451,"title":{},"body":{"classes/Country.html":{},"injectables/PaginationService.html":{}}}],["offset_in_minutes",{"_index":1452,"title":{},"body":{"classes/Country.html":{}}}],["ok",{"_index":409,"title":{},"body":{"controllers/AppController.html":{}}}],["one",{"_index":489,"title":{},"body":{"controllers/AppController.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/SortByDto.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["onmoduledestroy",{"_index":2757,"title":{},"body":{"injectables/PrismaService.html":{}}}],["onmoduleinit",{"_index":2758,"title":{},"body":{"injectables/PrismaService.html":{}}}],["open",{"_index":3237,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["operation",{"_index":1803,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/PrismaClientExceptionFilter.html":{},"interfaces/QueryOptions.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UpdateDto-7.html":{},"classes/UpdateDto-8.html":{}}}],["operations",{"_index":119,"title":{},"body":{"injectables/AddressTypeService.html":{},"modules/BankModule.html":{},"injectables/BankService.html":{},"modules/CityModule.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService-1.html":{},"modules/CountryMasModule.html":{},"injectables/CurrenciesService.html":{},"modules/DocumentGroupModule.html":{},"injectables/DocumentGroupService.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/FileResponseDto-2.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"injectables/PrismaService.html":{},"classes/Query-10.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryOptions.html":{},"modules/StateModule.html":{},"injectables/StateService.html":{}}}],["operator",{"_index":2391,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{}}}],["opinionated",{"_index":3496,"title":{},"body":{"index.html":{}}}],["optional",{"_index":38,"title":{},"body":{"classes/AddresTypeDto.html":{},"injectables/AddressTypeService.html":{},"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/BankController.html":{},"classes/BankDto.html":{},"injectables/BankService.html":{},"classes/Banks.html":{},"controllers/CityController.html":{},"classes/CityDto.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"classes/CountryDto.html":{},"classes/CreateCountryDto.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"controllers/DocumentController.html":{},"classes/DocumentDto.html":{},"controllers/DocumentGroupController.html":{},"classes/DocumentGroupDto.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/FileNotImageException.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"controllers/StateController.html":{},"classes/StateDto.html":{},"injectables/StateService.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UpdateDto-7.html":{},"classes/UpdateDto-8.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["optionalconditions",{"_index":1801,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/Query-3.html":{},"interfaces/QueryOptions.html":{}}}],["optionalconditions[key",{"_index":1821,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["options",{"_index":199,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"interfaces/QueryOptions.html":{},"classes/SortByDto.html":{},"injectables/StateService.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{}}}],["options.ts",{"_index":2615,"title":{},"body":{"interfaces/IPaginationFieldConfig.html":{},"coverage.html":{}}}],["orchestration",{"_index":3475,"title":{},"body":{"index.html":{}}}],["order",{"_index":2385,"title":{},"body":{"classes/FilterCountryDto.html":{},"injectables/PaginationService.html":{},"classes/QueryCountryDto.html":{},"classes/SortCountryDto.html":{},"classes/UtilsService.html":{}}}],["orderby",{"_index":2384,"title":{},"body":{"classes/FilterCountryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortCountryDto.html":{}}}],["org",{"_index":2032,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["organization",{"_index":2030,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["origin",{"_index":3253,"title":{},"body":{"contributing.html":{}}}],["original",{"_index":3424,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["originalname",{"_index":2553,"title":{},"body":{"interfaces/IFileConfig.html":{}}}],["orm",{"_index":434,"title":{},"body":{"controllers/AppController.html":{},"injectables/PrismaService.html":{},"index.html":{}}}],["otherwise",{"_index":918,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{},"license.html":{}}}],["out",{"_index":348,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/BankModule.html":{},"modules/CityModule.html":{},"modules/CountriesModule.html":{},"modules/CountryMasModule.html":{},"modules/CurrenciesModule.html":{},"modules/DocumentGroupModule.html":{},"modules/DocumentModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"modules/StateModule.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["outputs",{"_index":2837,"title":{},"body":{"classes/Query-1.html":{}}}],["overrides",{"_index":1924,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["overview",{"_index":3657,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":3537,"title":{},"body":{"index.html":{}}}],["p2000",{"_index":2737,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["p2002",{"_index":2733,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["p2010",{"_index":2745,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["p2025",{"_index":2741,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["package",{"_index":3358,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":1385,"title":{},"body":{"controllers/CountriesController.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{}}}],["pager",{"_index":2601,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["pages",{"_index":2577,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{}}}],["pagesize",{"_index":2568,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{}}}],["paginate",{"_index":2410,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/SortByDto.html":{},"miscellaneous/enumerations.html":{}}}],["paginate(only",{"_index":2413,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["paginate(selectquery",{"_index":2680,"title":{},"body":{"injectables/PaginationService.html":{}}}],["paginated",{"_index":176,"title":{},"body":{"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{}}}],["paginatedresultdto",{"_index":1399,"title":{},"body":{"controllers/CountriesController.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["pagination",{"_index":173,"title":{},"body":{"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/Query-3.html":{},"classes/SortByDto.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{},"classes/UtilsService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["pagination${classreference.name}responsedto",{"_index":2669,"title":{},"body":{"classes/PaginationResponseDto.html":{}}}],["paginationmetadto",{"_index":2561,"title":{"classes/PaginationMetaDto.html":{}},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"coverage.html":{}}}],["paginationoptions",{"_index":1395,"title":{},"body":{"controllers/CountriesController.html":{}}}],["paginationquery",{"_index":174,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/PaginationService.html":{},"injectables/StateService.html":{},"classes/UtilsService.html":{}}}],["paginationquery.filters",{"_index":3179,"title":{},"body":{"classes/UtilsService.html":{}}}],["paginationquery.sort",{"_index":3180,"title":{},"body":{"classes/UtilsService.html":{}}}],["paginationquerydto",{"_index":169,"title":{"classes/PaginationQueryDto.html":{}},"body":{"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/SortByDto.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{},"classes/UtilsService.html":{},"coverage.html":{}}}],["paginationquerydto.limit",{"_index":2586,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["paginationquerydto.page",{"_index":2587,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["paginationresponse",{"_index":638,"title":{},"body":{"controllers/BankController.html":{},"controllers/CityController.html":{},"controllers/CountriesController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"controllers/StateController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["paginationresponse(banks",{"_index":654,"title":{},"body":{"controllers/BankController.html":{}}}],["paginationresponse(cities",{"_index":795,"title":{},"body":{"controllers/CityController.html":{}}}],["paginationresponse(classreference",{"_index":2663,"title":{},"body":{"classes/PaginationResponseDto.html":{},"miscellaneous/functions.html":{}}}],["paginationresponse(country",{"_index":1357,"title":{},"body":{"controllers/CountriesController.html":{}}}],["paginationresponse(countrymas",{"_index":1511,"title":{},"body":{"controllers/CountryController.html":{}}}],["paginationresponse(currency",{"_index":1611,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["paginationresponse(document",{"_index":1698,"title":{},"body":{"controllers/DocumentController.html":{}}}],["paginationresponse(documentgroup",{"_index":1736,"title":{},"body":{"controllers/DocumentGroupController.html":{}}}],["paginationresponse(state",{"_index":3102,"title":{},"body":{"controllers/StateController.html":{}}}],["paginationresponsedto",{"_index":193,"title":{"classes/PaginationResponseDto.html":{}},"body":{"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{},"coverage.html":{}}}],["paginationservice",{"_index":146,"title":{"injectables/PaginationService.html":{}},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"modules/HelperModule.html":{},"injectables/PaginationService.html":{},"injectables/StateService.html":{},"coverage.html":{},"overview.html":{}}}],["paginationservice.paginate",{"_index":2677,"title":{},"body":{"injectables/PaginationService.html":{}}}],["paginationtype",{"_index":2407,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"miscellaneous/enumerations.html":{}}}],["paginationtype.all",{"_index":2414,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["pair",{"_index":945,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["pairs",{"_index":949,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["pallette",{"_index":3535,"title":{},"body":{"index.html":{}}}],["param",{"_index":204,"title":{},"body":{"injectables/AddressTypeService.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/FileNotImageException.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"controllers/HomeController.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{}}}],["param('id",{"_index":1696,"title":{},"body":{"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{}}}],["param('id_bank",{"_index":652,"title":{},"body":{"controllers/BankController.html":{}}}],["param('id_city",{"_index":793,"title":{},"body":{"controllers/CityController.html":{}}}],["param('id_country",{"_index":1366,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CountryController.html":{}}}],["param('id_currency",{"_index":1608,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["param('id_state",{"_index":3100,"title":{},"body":{"controllers/StateController.html":{}}}],["parameter",{"_index":1089,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"injectables/PrismaService.html":{},"interfaces/QueryConfig.html":{}}}],["parameterized",{"_index":3192,"title":{},"body":{"classes/UtilsService.html":{}}}],["parameters",{"_index":149,"title":{},"body":{"injectables/AddressTypeService.html":{},"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/FileNotImageException.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/FilterQueryDto.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":2585,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"injectables/PrismaService.html":{},"classes/Query-4.html":{},"classes/Query-8.html":{}}}],["parseint(process.env.app_port",{"_index":1885,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["parseint(process.env.max_file_size",{"_index":2000,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["parseint(process.env.port",{"_index":1887,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["parseint(process.env.postgres_max_connections",{"_index":1955,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["parseint(process.env.postgres_pool_timeout",{"_index":1959,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["parseint(process.env.postgres_port",{"_index":1947,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["parseuuidpipe",{"_index":632,"title":{},"body":{"controllers/BankController.html":{},"controllers/CityController.html":{},"controllers/CountriesController.html":{},"controllers/CountryController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"controllers/StateController.html":{}}}],["part.trim",{"_index":1078,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["partial",{"_index":3139,"title":{},"body":{"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UpdateDto-7.html":{},"classes/UpdateDto-8.html":{},"miscellaneous/typealiases.html":{}}}],["partial.type",{"_index":1630,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["partial.type.ts",{"_index":3670,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["partialtype",{"_index":3133,"title":{},"body":{"classes/UpdateDto.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UpdateDto-7.html":{},"classes/UpdateDto-8.html":{}}}],["partialtype(addrestypedto",{"_index":3143,"title":{},"body":{"classes/UpdateDto-2.html":{}}}],["partialtype(bankdto",{"_index":3145,"title":{},"body":{"classes/UpdateDto-3.html":{}}}],["partialtype(citydto",{"_index":3147,"title":{},"body":{"classes/UpdateDto-4.html":{}}}],["partialtype(countrydto",{"_index":3149,"title":{},"body":{"classes/UpdateDto-5.html":{}}}],["partialtype(createcountrydto",{"_index":3132,"title":{},"body":{"classes/UpdateDto.html":{}}}],["partialtype(createdto",{"_index":3140,"title":{},"body":{"classes/UpdateDto-1.html":{}}}],["partialtype(documentdto",{"_index":3151,"title":{},"body":{"classes/UpdateDto-6.html":{}}}],["partialtype(documentgroupdto",{"_index":3153,"title":{},"body":{"classes/UpdateDto-7.html":{}}}],["partialtype(statedto",{"_index":3155,"title":{},"body":{"classes/UpdateDto-8.html":{}}}],["particular",{"_index":3640,"title":{},"body":{"license.html":{}}}],["particularly",{"_index":2522,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["parts",{"_index":946,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["parts.length",{"_index":950,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["pass",{"_index":2665,"title":{},"body":{"classes/PaginationResponseDto.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["passport",{"_index":451,"title":{},"body":{"controllers/AppController.html":{},"classes/Document.html":{},"classes/DocumentDto.html":{}}}],["password",{"_index":1220,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{}}}],["patch",{"_index":633,"title":{},"body":{"controllers/BankController.html":{},"controllers/CityController.html":{},"controllers/CountriesController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"controllers/StateController.html":{}}}],["patch(':id",{"_index":1695,"title":{},"body":{"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{}}}],["patch(':id')@httpcode(httpstatus.ok)@apiparam({name",{"_index":1687,"title":{},"body":{"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{}}}],["patch(':id_bank",{"_index":650,"title":{},"body":{"controllers/BankController.html":{}}}],["patch(':id_bank')@httpcode(httpstatus.ok)@apiparam({name",{"_index":629,"title":{},"body":{"controllers/BankController.html":{}}}],["patch(':id_city",{"_index":792,"title":{},"body":{"controllers/CityController.html":{}}}],["patch(':id_city')@httpcode(httpstatus.ok)@apiparam({name",{"_index":782,"title":{},"body":{"controllers/CityController.html":{}}}],["patch(':id_state",{"_index":3099,"title":{},"body":{"controllers/StateController.html":{}}}],["patch(':id_state')@httpcode(httpstatus.ok)@apiparam({name",{"_index":3091,"title":{},"body":{"controllers/StateController.html":{}}}],["patch('updatebyid/:id_country",{"_index":1365,"title":{},"body":{"controllers/CountriesController.html":{}}}],["patch('updatebyid/:id_country')@httpcode(httpstatus.ok)@apiparam({name",{"_index":1348,"title":{},"body":{"controllers/CountriesController.html":{}}}],["patch(`${modules}/:id_country",{"_index":1509,"title":{},"body":{"controllers/CountryController.html":{}}}],["patch(`${modules}/:id_currency",{"_index":1607,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["patch(undefined)@httpcode(httpstatus.ok)@apiparam({name",{"_index":1503,"title":{},"body":{"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{}}}],["patel",{"_index":3599,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["patel/nestjs",{"_index":3512,"title":{},"body":{"index.html":{},"properties.html":{}}}],["path",{"_index":320,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["path/to/exception",{"_index":2064,"title":{},"body":{"classes/FileNotImageException.html":{}}}],["path/to/exception';throw",{"_index":2056,"title":{},"body":{"classes/FileNotImageException.html":{}}}],["path/to/filter",{"_index":2526,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["path/to/filter';@module",{"_index":2523,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["paths",{"_index":2106,"title":{},"body":{"classes/FileType.html":{}}}],["payload",{"_index":833,"title":{},"body":{"injectables/CityService.html":{},"injectables/CurrenciesService.html":{},"injectables/FilesS3PresignedService.html":{}}}],["payload.code",{"_index":1636,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["payload.id",{"_index":1638,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["payloadtoolargeexception",{"_index":2346,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["per",{"_index":2418,"title":{},"body":{"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["perform",{"_index":1797,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"controllers/HomeController.html":{},"injectables/PaginationService.html":{},"interfaces/QueryOptions.html":{}}}],["performing",{"_index":432,"title":{},"body":{"controllers/AppController.html":{}}}],["performs",{"_index":131,"title":{},"body":{"injectables/AddressTypeService.html":{},"controllers/AppController.html":{},"injectables/BankService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["permission",{"_index":3603,"title":{},"body":{"license.html":{}}}],["permit",{"_index":3624,"title":{},"body":{"license.html":{}}}],["person",{"_index":3608,"title":{},"body":{"license.html":{}}}],["persons",{"_index":3625,"title":{},"body":{"license.html":{}}}],["petersen",{"_index":3525,"title":{},"body":{"index.html":{}}}],["pg",{"_index":3392,"title":{},"body":{"dependencies.html":{}}}],["pgbasequery",{"_index":2917,"title":{},"body":{"classes/Query-3.html":{}}}],["pgbaseselectfield",{"_index":2918,"title":{},"body":{"classes/Query-3.html":{}}}],["pgsqlservice",{"_index":556,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["phone",{"_index":457,"title":{},"body":{"controllers/AppController.html":{}}}],["pino",{"_index":3388,"title":{},"body":{"dependencies.html":{}}}],["plain",{"_index":62,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"classes/CountryDto.html":{},"classes/Currency.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/StateDto.html":{},"miscellaneous/functions.html":{}}}],["plaintoinstance",{"_index":2381,"title":{},"body":{"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{}}}],["plaintoinstance(filtercountrydto",{"_index":2387,"title":{},"body":{"classes/FilterCountryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortCountryDto.html":{}}}],["plaintoinstance(filterquerydto",{"_index":2423,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["plaintoinstance(sortbydto",{"_index":2427,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["plaintoinstance(sortcountrydto",{"_index":2389,"title":{},"body":{"classes/FilterCountryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortCountryDto.html":{}}}],["plaintoinstance(sortuserdto",{"_index":2445,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["please",{"_index":3230,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["pluggable",{"_index":3492,"title":{},"body":{"index.html":{}}}],["plural",{"_index":1580,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{}}}],["plus",{"_index":3476,"title":{},"body":{"index.html":{}}}],["pooltimeout",{"_index":1957,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["pop",{"_index":2297,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["port",{"_index":1216,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"interfaces/IAppConfig.html":{}}}],["portions",{"_index":3632,"title":{},"body":{"license.html":{}}}],["possible",{"_index":3240,"title":{},"body":{"contributing.html":{}}}],["post",{"_index":634,"title":{},"body":{"controllers/BankController.html":{},"controllers/CityController.html":{},"controllers/CountriesController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"controllers/StateController.html":{}}}],["post('create",{"_index":1362,"title":{},"body":{"controllers/CountriesController.html":{}}}],["post('create')@httpcode(httpstatus.ok)@apiokresponse({type",{"_index":1339,"title":{},"body":{"controllers/CountriesController.html":{}}}],["post('upload",{"_index":2191,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["post('v1/upload",{"_index":2322,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["post('v1/upload/s3",{"_index":2263,"title":{},"body":{"controllers/FilesS3Controller.html":{}}}],["post()@httpcode(httpstatus.created)@apicreatedresponse({type",{"_index":615,"title":{},"body":{"controllers/BankController.html":{},"controllers/CityController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"controllers/StateController.html":{}}}],["post(`${modules",{"_index":1507,"title":{},"body":{"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{}}}],["post(undefined)@httpcode(httpstatus.ok)@apicreatedresponse({type",{"_index":1497,"title":{},"body":{"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{}}}],["postgres",{"_index":3561,"title":{},"body":{"index.html":{}}}],["postgres_connection_limit",{"_index":2621,"title":{},"body":{"interfaces/IPostgreSQLConfig.html":{}}}],["postgres_host",{"_index":1898,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"interfaces/IPostgreSQLConfig.html":{}}}],["postgres_max_connections",{"_index":1899,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["postgres_name",{"_index":1900,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"interfaces/IPostgreSQLConfig.html":{}}}],["postgres_password",{"_index":1901,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"interfaces/IPostgreSQLConfig.html":{}}}],["postgres_pool_timeout",{"_index":2622,"title":{},"body":{"interfaces/IPostgreSQLConfig.html":{}}}],["postgres_port",{"_index":1902,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"interfaces/IPostgreSQLConfig.html":{}}}],["postgres_schema",{"_index":2623,"title":{},"body":{"interfaces/IPostgreSQLConfig.html":{}}}],["postgres_user",{"_index":1903,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"interfaces/IPostgreSQLConfig.html":{}}}],["postgresql",{"_index":1926,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"index.html":{}}}],["postgresql://${process.env.postgres_user}:${process.env.postgres_password}@${process.env.postgres_host}:${process.env.postgres_port}/${process.env.postgres_name}?connection_limit=${process.env.postgres_max_connections}&pool_timeout=${process.env.postgres_pool_timeout}&schema=${process.env.postgres_schema",{"_index":1944,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["postgresql://${this.get('postgres_user')}:${this.get('postgres_password')}@${this.get('postgres_host')}:${this.get('postgres_port')}/${this.get('postgres_name')}?connection_limit=${this.get('postgres_connection_limit')}&pool_timeout=${this.get('postgres_pool_timeout')}&schema=${this.get('postgres_schema",{"_index":1242,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["powerful",{"_index":3455,"title":{},"body":{"index.html":{}}}],["pre",{"_index":3478,"title":{},"body":{"index.html":{}}}],["precision",{"_index":1584,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{}}}],["preferred",{"_index":889,"title":{},"body":{"injectables/CityService.html":{}}}],["prefix",{"_index":107,"title":{},"body":{"controllers/AddressTypeController.html":{},"controllers/BankController.html":{},"controllers/CityController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/HomeService.html":{},"interfaces/IAppConfig.html":{},"controllers/StateController.html":{}}}],["prerequisites",{"_index":3504,"title":{},"body":{"index.html":{}}}],["presence",{"_index":2366,"title":{},"body":{"injectables/FilesS3Service.html":{}}}],["present",{"_index":3686,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["preserves",{"_index":3423,"title":{},"body":{"miscellaneous/functions.html":{}}}],["presigned",{"_index":1974,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"modules/FilesModule.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"miscellaneous/enumerations.html":{}}}],["presigned/dto/file",{"_index":2090,"title":{},"body":{"classes/FileResponseDto-2.html":{},"coverage.html":{}}}],["presigned/dto/file.dto.ts",{"_index":2138,"title":{},"body":{"classes/FileUploadDto.html":{},"coverage.html":{}}}],["presigned/dto/file.dto.ts:23",{"_index":2144,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["presigned/dto/file.dto.ts:35",{"_index":2147,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["presigned/files.controller.ts",{"_index":2302,"title":{},"body":{"controllers/FilesS3PresignedController.html":{},"coverage.html":{}}}],["presigned/files.controller.ts:49",{"_index":2315,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["presigned/files.controller.ts:69",{"_index":2309,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["presigned/files.module",{"_index":2248,"title":{},"body":{"modules/FilesModule.html":{}}}],["presigned/files.module.ts",{"_index":2330,"title":{},"body":{"modules/FilesS3PresignedModule.html":{}}}],["presigned/files.service.ts",{"_index":2337,"title":{},"body":{"injectables/FilesS3PresignedService.html":{},"coverage.html":{}}}],["presigned/files.service.ts:128",{"_index":2344,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["presigned/files.service.ts:26",{"_index":2339,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["presigned/files.service.ts:59",{"_index":2340,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["presigner",{"_index":2122,"title":{},"body":{"classes/FileType.html":{},"injectables/FilesS3PresignedService.html":{},"dependencies.html":{}}}],["prettier",{"_index":3495,"title":{},"body":{"index.html":{}}}],["pretty",{"_index":3394,"title":{},"body":{"dependencies.html":{}}}],["prevent",{"_index":1631,"title":{},"body":{"injectables/CurrenciesService.html":{},"classes/Query-1.html":{}}}],["primitive",{"_index":3422,"title":{},"body":{"miscellaneous/functions.html":{}}}],["prisma",{"_index":151,"title":{},"body":{"injectables/AddressTypeService.html":{},"controllers/AppController.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/QueryFailedFilter.html":{},"injectables/StateService.html":{},"coverage.html":{},"index.html":{}}}],["prisma's",{"_index":2672,"title":{},"body":{"injectables/PaginationService.html":{}}}],["prisma.io",{"_index":3527,"title":{},"body":{"index.html":{}}}],["prisma.prisma",{"_index":3526,"title":{},"body":{"index.html":{}}}],["prisma.prismaclientknownrequesterror",{"_index":2723,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["prisma.transactionclient",{"_index":2766,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prisma/.../seed1.ts",{"_index":3412,"title":{},"body":{"miscellaneous/functions.html":{}}}],["prisma/client",{"_index":2726,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/QueryFailedFilter.html":{},"dependencies.html":{}}}],["prisma/data/countries",{"_index":3266,"title":{},"body":{"coverage.html":{}}}],["prisma/migration",{"_index":3550,"title":{},"body":{"index.html":{}}}],["prisma/seed.ts",{"_index":3273,"title":{},"body":{"coverage.html":{}}}],["prisma/seed1.ts",{"_index":3275,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["prisma_client",{"_index":534,"title":{},"body":{"modules/AppModule.html":{}}}],["prismaclient",{"_index":2748,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismaclientexceptionfilter",{"_index":2719,"title":{"classes/PrismaClientExceptionFilter.html":{}},"body":{"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"coverage.html":{}}}],["prismaclientknownrequesterror",{"_index":2722,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["prismaconfig",{"_index":1129,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["prismaservice",{"_index":130,"title":{"injectables/PrismaService.html":{}},"body":{"injectables/AddressTypeService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"modules/HelperModule.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"injectables/StateService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":137,"title":{},"body":{"injectables/AddressTypeService.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/FilesS3PresignedService.html":{},"classes/Query-3.html":{},"interfaces/QueryConfig.html":{},"injectables/StateService.html":{}}}],["process",{"_index":2364,"title":{},"body":{"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["process.cwd",{"_index":1234,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{}}}],["process.env",{"_index":1994,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["process.env.api_prefix",{"_index":1889,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["process.env.app_description",{"_index":1876,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["process.env.app_name",{"_index":1874,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["process.env.app_port",{"_index":1884,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["process.env.app_prefix",{"_index":1879,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["process.env.app_version",{"_index":1877,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["process.env.aws_access_key_id",{"_index":1995,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["process.env.aws_default_s3_bucket",{"_index":1997,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["process.env.aws_s3_region",{"_index":1998,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["process.env.aws_secret_access_key",{"_index":1996,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["process.env.backend_domain",{"_index":1882,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["process.env.database_ca",{"_index":1965,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.database_cert",{"_index":1968,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.database_key",{"_index":1966,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.database_reject_unauthorized",{"_index":1964,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.database_ssl_enabled",{"_index":1962,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.database_synchronize",{"_index":1952,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.file_driver",{"_index":1992,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["process.env.frontend_domain",{"_index":1881,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["process.env.logger_app",{"_index":2035,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["process.env.logger_context",{"_index":2033,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["process.env.logger_duration_log_level",{"_index":2043,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["process.env.logger_log_level",{"_index":2039,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["process.env.logger_organization",{"_index":2031,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["process.env.logger_slack_inc_webhook_url",{"_index":2049,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["process.env.max_file_size",{"_index":1999,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["process.env.node_env",{"_index":527,"title":{},"body":{"modules/AppModule.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-3.html":{}}}],["process.env.port",{"_index":1886,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["process.env.postgres_host",{"_index":1945,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.postgres_max_connections",{"_index":1954,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.postgres_name",{"_index":1950,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.postgres_password",{"_index":1949,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.postgres_pool_timeout",{"_index":1958,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.postgres_port",{"_index":1946,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.postgres_schema",{"_index":1960,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.postgres_user",{"_index":1951,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.pwd",{"_index":1233,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{}}}],["process.env[envname",{"_index":1203,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["process.env[envname].replace(/\\\\n/g",{"_index":1204,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["process.env[key",{"_index":1205,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-3.html":{}}}],["processed",{"_index":2070,"title":{},"body":{"classes/FileResponseDto.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{}}}],["processing",{"_index":2280,"title":{},"body":{"modules/FilesS3Module.html":{},"index.html":{}}}],["production",{"_index":1191,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["productionbuild",{"_index":3543,"title":{},"body":{"index.html":{}}}],["profile_pic_file_path",{"_index":1318,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IUploadFileConfig.html":{}}}],["profiledestdir",{"_index":3345,"title":{},"body":{"coverage.html":{}}}],["project",{"_index":3226,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["promise",{"_index":159,"title":{},"body":{"injectables/AddressTypeService.html":{},"controllers/AppController.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query-2.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{},"miscellaneous/functions.html":{}}}],["promise.all",{"_index":2688,"title":{},"body":{"injectables/PaginationService.html":{}}}],["promise.resolve",{"_index":2807,"title":{},"body":{"injectables/PrismaService.html":{}}}],["promises",{"_index":3039,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{},"miscellaneous/functions.html":{}}}],["properties",{"_index":24,"title":{"properties.html":{}},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"injectables/AddressTypeService.html":{},"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/BankDto.html":{},"injectables/BankService.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"injectables/CountriesService-1.html":{},"classes/Country.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/Document.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"classes/DocumentGroupDto.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"injectables/FilesS3PresignedService.html":{},"classes/FilterQueryDto.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/State.html":{},"classes/StateDto.html":{},"injectables/StateService.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UpdateDto-7.html":{},"classes/UpdateDto-8.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["property",{"_index":60,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"classes/Country.html":{},"classes/CountryDto.html":{},"classes/Currency.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/FileResponseDto-1.html":{},"interfaces/IAppConfig.html":{},"classes/State.html":{},"classes/StateDto.html":{},"miscellaneous/functions.html":{}}}],["propertyvalue",{"_index":915,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["props",{"_index":480,"title":{},"body":{"controllers/AppController.html":{}}}],["provide",{"_index":390,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"classes/Country.html":{},"modules/FilesLocalModule.html":{},"classes/HttpErrorFilter.html":{},"classes/State.html":{}}}],["provided",{"_index":26,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"injectables/CountriesService-1.html":{},"classes/CountryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"injectables/CurrenciesService.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"interfaces/IPaginationFieldConfig.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/Query-10.html":{},"classes/Query-3.html":{},"classes/Query-6.html":{},"classes/StateDto.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["provider",{"_index":2367,"title":{},"body":{"injectables/FilesS3Service.html":{}}}],["providers",{"_index":332,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/BankModule.html":{},"modules/CityModule.html":{},"modules/CountriesModule.html":{},"modules/CountryMasModule.html":{},"modules/CurrenciesModule.html":{},"modules/DocumentGroupModule.html":{},"modules/DocumentModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{},"classes/HttpErrorFilter.html":{},"modules/StateModule.html":{},"coverage.html":{},"overview.html":{}}}],["providers/dynamic",{"_index":2939,"title":{},"body":{"classes/Query-3.html":{}}}],["providers/file",{"_index":2181,"title":{},"body":{"controllers/FilesLocalController.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["provides",{"_index":116,"title":{},"body":{"injectables/AddressTypeService.html":{},"controllers/AppController.html":{},"controllers/BankController.html":{},"modules/BankModule.html":{},"injectables/BankService.html":{},"modules/CityModule.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"modules/CountryMasModule.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"modules/DocumentGroupModule.html":{},"injectables/DocumentGroupService.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"modules/HelperModule.html":{},"injectables/HomeService.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/PaginationMetaDto.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query-10.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"controllers/StateController.html":{},"modules/StateModule.html":{},"injectables/StateService.html":{},"classes/UtilsService.html":{}}}],["ptbl",{"_index":255,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/Query-3.html":{},"injectables/StateService.html":{},"classes/UtilsService.html":{}}}],["ptbl.address_type",{"_index":252,"title":{},"body":{"injectables/AddressTypeService.html":{}}}],["ptbl.code",{"_index":2935,"title":{},"body":{"classes/Query-3.html":{}}}],["ptbl.decimal_digits",{"_index":2937,"title":{},"body":{"classes/Query-3.html":{}}}],["ptbl.dial_code",{"_index":1431,"title":{},"body":{"injectables/CountriesService-1.html":{}}}],["ptbl.id_address_type",{"_index":251,"title":{},"body":{"injectables/AddressTypeService.html":{}}}],["ptbl.id_bank",{"_index":722,"title":{},"body":{"injectables/BankService.html":{}}}],["ptbl.id_city",{"_index":725,"title":{},"body":{"injectables/BankService.html":{},"injectables/CityService.html":{}}}],["ptbl.id_country",{"_index":727,"title":{},"body":{"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/StateService.html":{}}}],["ptbl.id_currency",{"_index":1642,"title":{},"body":{"injectables/CurrenciesService.html":{},"classes/Query-3.html":{}}}],["ptbl.id_document",{"_index":1773,"title":{},"body":{"injectables/DocumentService.html":{}}}],["ptbl.id_document_group",{"_index":1758,"title":{},"body":{"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{}}}],["ptbl.id_state",{"_index":726,"title":{},"body":{"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/StateService.html":{}}}],["ptbl.name",{"_index":723,"title":{},"body":{"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/Query-3.html":{},"injectables/StateService.html":{}}}],["ptbl.rounding",{"_index":2938,"title":{},"body":{"classes/Query-3.html":{}}}],["ptbl.short_name",{"_index":724,"title":{},"body":{"injectables/BankService.html":{}}}],["ptbl.status",{"_index":253,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["ptbl.symbol",{"_index":2936,"title":{},"body":{"classes/Query-3.html":{}}}],["public",{"_index":282,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"modules/FilesS3PresignedModule.html":{},"classes/QueryFailedFilter.html":{},"classes/UtilsService.html":{}}}],["public_route_key",{"_index":3294,"title":{},"body":{"coverage.html":{}}}],["publicroute",{"_index":423,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["publish",{"_index":3618,"title":{},"body":{"license.html":{}}}],["pull",{"_index":3254,"title":{},"body":{"contributing.html":{}}}],["purpose",{"_index":3641,"title":{},"body":{"license.html":{}}}],["purposes",{"_index":1446,"title":{},"body":{"classes/Country.html":{},"controllers/FilesS3Controller.html":{},"classes/State.html":{}}}],["push",{"_index":3252,"title":{},"body":{"contributing.html":{}}}],["put",{"_index":569,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["putobjectcommand",{"_index":2347,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["q",{"_index":2890,"title":{},"body":{"classes/Query-2.html":{}}}],["qq",{"_index":2914,"title":{},"body":{"classes/Query-2.html":{}}}],["qr_image",{"_index":1263,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["qr_image_path",{"_index":1265,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["qr_image_path_salt",{"_index":1267,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["qrconfig",{"_index":1262,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["queries",{"_index":709,"title":{},"body":{"injectables/BankService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"interfaces/IPaginationFieldConfig.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-10.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/StateService.html":{},"classes/UtilsService.html":{}}}],["query",{"_index":136,"title":{"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{}},"body":{"injectables/AddressTypeService.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/BankController.html":{},"modules/BankModule.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"modules/CityModule.html":{},"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"modules/CountryMasModule.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"modules/DocumentGroupModule.html":{},"injectables/DocumentGroupService.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"controllers/FilesS3PresignedController.html":{},"classes/FilterQueryDto.html":{},"classes/HttpErrorFilter.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"classes/SortByDto.html":{},"controllers/StateController.html":{},"modules/StateModule.html":{},"injectables/StateService.html":{},"classes/UtilsService.html":{},"coverage.html":{}}}],["query('expiresin",{"_index":2325,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["query.addhttpqueryerror",{"_index":2832,"title":{},"body":{"classes/Query-1.html":{}}}],["query.addhttpqueryerror(\"httperror",{"_index":2533,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["query.addqueryerror(\"badrequest",{"_index":586,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["query.service",{"_index":1778,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/Query-3.html":{},"interfaces/QueryOptions.html":{},"coverage.html":{}}}],["query?.filters",{"_index":1392,"title":{},"body":{"controllers/CountriesController.html":{}}}],["query?.limit",{"_index":1388,"title":{},"body":{"controllers/CountriesController.html":{}}}],["query?.page",{"_index":1386,"title":{},"body":{"controllers/CountriesController.html":{}}}],["query?.sort",{"_index":1394,"title":{},"body":{"controllers/CountriesController.html":{}}}],["querybuilder",{"_index":2940,"title":{},"body":{"classes/Query-3.html":{}}}],["queryconfig",{"_index":836,"title":{"interfaces/QueryConfig.html":{}},"body":{"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{},"coverage.html":{}}}],["queryconfig.syntax",{"_index":854,"title":{},"body":{"injectables/CityService.html":{}}}],["queryconfig.syntax(1",{"_index":867,"title":{},"body":{"injectables/CityService.html":{}}}],["queryconfig.syntax(id",{"_index":885,"title":{},"body":{"injectables/CityService.html":{}}}],["querycountrydto",{"_index":1379,"title":{"classes/QueryCountryDto.html":{}},"body":{"controllers/CountriesController.html":{},"classes/FilterCountryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortCountryDto.html":{},"coverage.html":{}}}],["queryfailederror",{"_index":3022,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["queryfailedfilter",{"_index":3014,"title":{"classes/QueryFailedFilter.html":{}},"body":{"classes/QueryFailedFilter.html":{},"coverage.html":{}}}],["queryname",{"_index":1795,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["queryobj",{"_index":2763,"title":{},"body":{"injectables/PrismaService.html":{}}}],["queryobj.syntax",{"_index":2797,"title":{},"body":{"injectables/PrismaService.html":{}}}],["queryobj.type",{"_index":2799,"title":{},"body":{"injectables/PrismaService.html":{}}}],["queryoptions",{"_index":1785,"title":{"interfaces/QueryOptions.html":{}},"body":{"classes/DynamicQueryBuilder.html":{},"classes/Query-3.html":{},"interfaces/QueryOptions.html":{},"coverage.html":{}}}],["querystatements",{"_index":3168,"title":{},"body":{"classes/UtilsService.html":{}}}],["querystatements(basefields",{"_index":3176,"title":{},"body":{"classes/UtilsService.html":{}}}],["querytype",{"_index":1796,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["quotes",{"_index":2830,"title":{},"body":{"classes/Query-1.html":{}}}],["qux",{"_index":469,"title":{},"body":{"controllers/AppController.html":{}}}],["r",{"_index":562,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"properties.html":{}}}],["r.error",{"_index":567,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["r.message",{"_index":566,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["r.message[0",{"_index":565,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["r.statuscode",{"_index":575,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["randomstringgenerator",{"_index":2282,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["randomstringgenerator()}.${file.filename.split('.').pop()?.tolowercase",{"_index":2357,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["randomstringgenerator()}.${file.originalname",{"_index":2296,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["range",{"_index":2591,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["rate",{"_index":3361,"title":{},"body":{"dependencies.html":{}}}],["raw",{"_index":134,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/PrismaService.html":{},"injectables/StateService.html":{}}}],["rbac",{"_index":3489,"title":{},"body":{"index.html":{}}}],["read",{"_index":2336,"title":{},"body":{"modules/FilesS3PresignedModule.html":{},"index.html":{}}}],["readonly",{"_index":138,"title":{},"body":{"injectables/AddressTypeService.html":{},"controllers/AppController.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query-2.html":{},"classes/SortByDto.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{}}}],["ready",{"_index":3485,"title":{},"body":{"index.html":{}}}],["receive",{"_index":2666,"title":{},"body":{"classes/PaginationResponseDto.html":{}}}],["recomandation",{"_index":3507,"title":{},"body":{"index.html":{}}}],["record",{"_index":18,"title":{},"body":{"classes/AddresTypeDto.html":{},"injectables/AddressTypeService.html":{},"classes/BankDto.html":{},"injectables/BankService.html":{},"classes/CityDto.html":{},"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"injectables/CountriesService-1.html":{},"classes/CountryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"injectables/CurrenciesService.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{},"classes/SortByDto.html":{},"classes/StateDto.html":{},"injectables/StateService.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{}}}],["recordexists",{"_index":235,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/DocumentService.html":{}}}],["recordexits",{"_index":834,"title":{},"body":{"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/DocumentGroupService.html":{},"injectables/StateService.html":{}}}],["records",{"_index":607,"title":{},"body":{"controllers/BankController.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"controllers/CountryController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentService.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/Query-10.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/SortByDto.html":{},"controllers/StateController.html":{},"classes/UtilsService.html":{}}}],["recursively",{"_index":3045,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["redis",{"_index":3560,"title":{},"body":{"index.html":{}}}],["redisswagger",{"_index":3562,"title":{},"body":{"index.html":{}}}],["ref",{"_index":2470,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["refactor",{"_index":3574,"title":{},"body":{"index.html":{}}}],["reference",{"_index":2662,"title":{},"body":{"classes/PaginationResponseDto.html":{},"miscellaneous/functions.html":{}}}],["reflect",{"_index":3396,"title":{},"body":{"dependencies.html":{}}}],["reflection",{"_index":288,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["reflector",{"_index":283,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["region",{"_index":1978,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["registeras",{"_index":1864,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{}}}],["registeras('app",{"_index":1873,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["registeras('database",{"_index":1943,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["registeras('file",{"_index":1990,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["registeras('logger",{"_index":2029,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["registers",{"_index":1872,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{}}}],["registration",{"_index":1871,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"index.html":{}}}],["regular",{"_index":951,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["reject",{"_index":1913,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["rejectunauthorized",{"_index":1963,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["related",{"_index":126,"title":{},"body":{"injectables/AddressTypeService.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"controllers/BankController.html":{},"modules/BankModule.html":{},"injectables/BankService.html":{},"modules/CityModule.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService-1.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"modules/CountryMasModule.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"modules/DocumentGroupModule.html":{},"injectables/DocumentGroupService.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"classes/Query.html":{},"classes/Query-10.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"classes/QueryFailedFilter.html":{},"classes/State.html":{},"controllers/StateController.html":{},"modules/StateModule.html":{},"injectables/StateService.html":{}}}],["relational",{"_index":3491,"title":{},"body":{"index.html":{}}}],["release",{"_index":3222,"title":{},"body":{"changelog.html":{}}}],["relevant",{"_index":2088,"title":{},"body":{"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{}}}],["remarks",{"_index":2492,"title":{},"body":{"modules/HelperModule.html":{},"injectables/PaginationService.html":{}}}],["remove",{"_index":1030,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["remove.ts",{"_index":1779,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/FilterCountryDto.html":{},"classes/QueryCountryDto.html":{},"interfaces/QueryOptions.html":{},"classes/SortCountryDto.html":{},"coverage.html":{}}}],["remove.ts:116",{"_index":1789,"title":{},"body":{"classes/DynamicQueryBuilder.html":{}}}],["remove.ts:14",{"_index":3072,"title":{},"body":{"classes/SortCountryDto.html":{}}}],["remove.ts:145",{"_index":1791,"title":{},"body":{"classes/DynamicQueryBuilder.html":{}}}],["remove.ts:18",{"_index":3070,"title":{},"body":{"classes/SortCountryDto.html":{}}}],["remove.ts:195",{"_index":1793,"title":{},"body":{"classes/DynamicQueryBuilder.html":{}}}],["remove.ts:235",{"_index":1786,"title":{},"body":{"classes/DynamicQueryBuilder.html":{}}}],["remove.ts:26",{"_index":3012,"title":{},"body":{"classes/QueryCountryDto.html":{}}}],["remove.ts:32",{"_index":3011,"title":{},"body":{"classes/QueryCountryDto.html":{}}}],["remove.ts:41",{"_index":3008,"title":{},"body":{"classes/QueryCountryDto.html":{}}}],["remove.ts:50",{"_index":3013,"title":{},"body":{"classes/QueryCountryDto.html":{}}}],["removefile",{"_index":3346,"title":{},"body":{"coverage.html":{}}}],["repeat",{"_index":2600,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["replace",{"_index":895,"title":{},"body":{"injectables/CityService.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["reporting",{"_index":3235,"title":{},"body":{"contributing.html":{}}}],["repository",{"_index":3244,"title":{},"body":{"contributing.html":{},"index.html":{},"properties.html":{}}}],["repository:example",{"_index":3510,"title":{},"body":{"index.html":{}}}],["representation",{"_index":63,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/CountryDto.html":{},"classes/Currency.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"interfaces/QueryConfig.html":{},"classes/StateDto.html":{}}}],["representing",{"_index":1438,"title":{},"body":{"classes/Country.html":{},"classes/FileResponseDto-1.html":{},"classes/FileType.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/Query-1.html":{},"classes/SortByDto.html":{},"classes/State.html":{},"miscellaneous/enumerations.html":{}}}],["represents",{"_index":9,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"classes/Country.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/Document.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"classes/DocumentGroupDto.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/State.html":{},"classes/StateDto.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UpdateDto-7.html":{},"classes/UpdateDto-8.html":{},"miscellaneous/typealiases.html":{}}}],["reqdata",{"_index":2815,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["reqescvalue",{"_index":2820,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["reqescvalue.replace(/'/g",{"_index":2822,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["reqstr",{"_index":581,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["reqstrobj",{"_index":588,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{}}}],["request",{"_index":301,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/FileType.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"modules/HomeModule.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResolvePromisesInterceptor.html":{},"contributing.html":{},"dependencies.html":{}}}],["request.filter.ts",{"_index":538,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"coverage.html":{}}}],["request.filter.ts:27",{"_index":542,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["request.filter.ts:34",{"_index":543,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["request.filter.ts:43",{"_index":552,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["request.filter.ts:93",{"_index":546,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["request.method",{"_index":587,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["request.url",{"_index":321,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["requested",{"_index":3164,"title":{},"body":{"classes/UserNotFoundException.html":{}}}],["requests",{"_index":397,"title":{},"body":{"controllers/AppController.html":{},"controllers/BankController.html":{},"controllers/CountriesController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"modules/FilesLocalModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"controllers/StateController.html":{},"contributing.html":{}}}],["require",{"_index":3198,"title":{},"body":{"classes/UtilsService.html":{}}}],["require_tld",{"_index":1175,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{}}}],["required",{"_index":157,"title":{},"body":{"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"classes/BankDto.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileUploadDto.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/SortByDto.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UpdateDto-7.html":{},"classes/UpdateDto-8.html":{}}}],["requirements",{"_index":2377,"title":{},"body":{"injectables/FilesService.html":{}}}],["requrest",{"_index":560,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["res",{"_index":595,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{}}}],["resdata",{"_index":2816,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["resescvalue",{"_index":2821,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["resescvalue.replace(/'/g",{"_index":2823,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["reset",{"_index":347,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/BankModule.html":{},"modules/CityModule.html":{},"modules/CountriesModule.html":{},"modules/CountryMasModule.html":{},"modules/CurrenciesModule.html":{},"modules/DocumentGroupModule.html":{},"modules/DocumentModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{},"modules/StateModule.html":{},"overview.html":{}}}],["resolved",{"_index":3041,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["resolvepromisesinterceptor",{"_index":3035,"title":{"injectables/ResolvePromisesInterceptor.html":{}},"body":{"injectables/ResolvePromisesInterceptor.html":{},"coverage.html":{}}}],["resolver",{"_index":3061,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["resolver.ts",{"_index":3350,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["resolves",{"_index":410,"title":{},"body":{"controllers/AppController.html":{},"controllers/CountriesController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"injectables/FilesS3Service.html":{},"injectables/ResolvePromisesInterceptor.html":{},"miscellaneous/functions.html":{}}}],["resolving",{"_index":3425,"title":{},"body":{"miscellaneous/functions.html":{}}}],["response",{"_index":302,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/CountriesController.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PaginationResponseDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResolvePromisesInterceptor.html":{},"miscellaneous/functions.html":{}}}],["response.dto",{"_index":195,"title":{},"body":{"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/PaginationService.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{}}}],["response.dto.ts",{"_index":2069,"title":{},"body":{"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/PaginationResponseDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["response.dto.ts:21",{"_index":2655,"title":{},"body":{"classes/PaginationResponseDto.html":{}}}],["response.dto.ts:27",{"_index":2072,"title":{},"body":{"classes/FileResponseDto.html":{},"classes/FileResponseDto-2.html":{}}}],["response.dto.ts:30",{"_index":2657,"title":{},"body":{"classes/PaginationResponseDto.html":{}}}],["response.dto.ts:34",{"_index":2086,"title":{},"body":{"classes/FileResponseDto-1.html":{}}}],["response.dto.ts:39",{"_index":2656,"title":{},"body":{"classes/PaginationResponseDto.html":{}}}],["response.dto.ts:41",{"_index":2097,"title":{},"body":{"classes/FileResponseDto-2.html":{}}}],["response.sendfile(path",{"_index":2200,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["response.status(status).json",{"_index":2541,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["response.status(status).json(errorresponse",{"_index":325,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["response.status(statuscode).json(r",{"_index":577,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["response_serialization_meta_key",{"_index":3295,"title":{},"body":{"coverage.html":{}}}],["responses",{"_index":611,"title":{},"body":{"controllers/BankController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"classes/FileResponseDto-1.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"controllers/StateController.html":{}}}],["responsible",{"_index":123,"title":{},"body":{"injectables/AddressTypeService.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/BankController.html":{},"modules/BankModule.html":{},"injectables/BankService.html":{},"modules/CityModule.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"modules/CountryMasModule.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"modules/DocumentGroupModule.html":{},"injectables/DocumentGroupService.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"injectables/FilesService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"controllers/StateController.html":{},"modules/StateModule.html":{},"injectables/StateService.html":{}}}],["resstr",{"_index":583,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["resstrobj",{"_index":594,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{}}}],["restriction",{"_index":3613,"title":{},"body":{"license.html":{}}}],["result",{"_index":167,"title":{},"body":{"injectables/AddressTypeService.html":{},"controllers/AppController.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{}}}],["results",{"_index":88,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/BankController.html":{},"classes/BankDto.html":{},"modules/BankModule.html":{},"injectables/BankService.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"controllers/CityController.html":{},"classes/CityDto.html":{},"modules/CityModule.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService-1.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"modules/CountryMasModule.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/Document.html":{},"controllers/DocumentController.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"controllers/DocumentGroupController.html":{},"classes/DocumentGroupDto.html":{},"modules/DocumentGroupModule.html":{},"injectables/DocumentGroupService.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/State.html":{},"controllers/StateController.html":{},"classes/StateDto.html":{},"modules/StateModule.html":{},"injectables/StateService.html":{},"classes/UpdateDto.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UpdateDto-7.html":{},"classes/UpdateDto-8.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"changelog.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["retrieval",{"_index":2365,"title":{},"body":{"injectables/FilesS3Service.html":{},"injectables/PaginationService.html":{}}}],["retrievals",{"_index":2207,"title":{},"body":{"modules/FilesLocalModule.html":{}}}],["retrieve",{"_index":606,"title":{},"body":{"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{}}}],["retrieves",{"_index":171,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/HomeService.html":{},"injectables/StateService.html":{}}}],["retrieving",{"_index":120,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"modules/FilesLocalModule.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesService.html":{},"injectables/HomeService.html":{},"injectables/PrismaService.html":{},"classes/Query-10.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"injectables/StateService.html":{}}}],["return",{"_index":228,"title":{},"body":{"injectables/AddressTypeService.html":{},"controllers/AppController.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileType.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"controllers/HomeController.html":{},"injectables/HomeService.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryCountryDto.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{},"classes/UtilsService.html":{}}}],["returned",{"_index":408,"title":{},"body":{"controllers/AppController.html":{},"classes/FileResponseDto.html":{}}}],["returning",{"_index":1026,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/DynamicQueryBuilder.html":{},"classes/FileResponseDto-1.html":{},"controllers/FilesS3Controller.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{}}}],["returningclause",{"_index":1811,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["returningfields",{"_index":1802,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/Query-3.html":{},"interfaces/QueryOptions.html":{}}}],["returningfields.join",{"_index":1813,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["returningfields.length",{"_index":1812,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["returns",{"_index":158,"title":{},"body":{"injectables/AddressTypeService.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"controllers/HomeController.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{}}}],["right",{"_index":3463,"title":{},"body":{"index.html":{}}}],["rights",{"_index":3615,"title":{},"body":{"license.html":{}}}],["root",{"_index":501,"title":{},"body":{"modules/AppModule.html":{},"controllers/FilesLocalController.html":{},"controllers/HomeController.html":{}}}],["rounding",{"_index":1570,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/Query-3.html":{}}}],["route",{"_index":436,"title":{},"body":{"controllers/AppController.html":{},"controllers/BankController.html":{},"controllers/CityController.html":{},"controllers/CountriesController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"controllers/StateController.html":{}}}],["routermodule",{"_index":365,"title":{},"body":{"modules/ApiModule.html":{}}}],["routermodule.register",{"_index":383,"title":{},"body":{"modules/ApiModule.html":{}}}],["rows",{"_index":2798,"title":{},"body":{"injectables/PrismaService.html":{}}}],["rows[0",{"_index":2801,"title":{},"body":{"injectables/PrismaService.html":{}}}],["rsa256",{"_index":3487,"title":{},"body":{"index.html":{}}}],["rules",{"_index":21,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"classes/CountryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/StateDto.html":{}}}],["run",{"_index":3261,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["running",{"_index":2545,"title":{},"body":{"interfaces/IAppConfig.html":{},"contributing.html":{},"index.html":{}}}],["rupee",{"_index":1463,"title":{},"body":{"classes/Country.html":{},"classes/CreateDto.html":{},"classes/Currency.html":{}}}],["rupees",{"_index":1581,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{}}}],["rxjs",{"_index":3057,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":3059,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["s",{"_index":463,"title":{},"body":{"controllers/AppController.html":{}}}],["s.trim",{"_index":2710,"title":{},"body":{"injectables/PaginationService.html":{}}}],["s3",{"_index":1973,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["s3://bucket/path/to/file",{"_index":2319,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["s3_presigned",{"_index":2115,"title":{},"body":{"classes/FileType.html":{},"miscellaneous/enumerations.html":{}}}],["s3client",{"_index":2118,"title":{},"body":{"classes/FileType.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["safe",{"_index":1002,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["same",{"_index":206,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["sanitization",{"_index":2762,"title":{},"body":{"injectables/PrismaService.html":{}}}],["sanitized",{"_index":2764,"title":{},"body":{"injectables/PrismaService.html":{}}}],["sbi",{"_index":692,"title":{},"body":{"classes/BankDto.html":{},"classes/Banks.html":{}}}],["scalable",{"_index":3458,"title":{},"body":{"index.html":{}}}],["scanning",{"_index":3502,"title":{},"body":{"index.html":{}}}],["schema",{"_index":1919,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"miscellaneous/functions.html":{}}}],["scope",{"_index":3570,"title":{},"body":{"index.html":{}}}],["script",{"_index":3553,"title":{},"body":{"index.html":{}}}],["sdk/client",{"_index":2119,"title":{},"body":{"classes/FileType.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"dependencies.html":{}}}],["sdk/s3",{"_index":2121,"title":{},"body":{"classes/FileType.html":{},"injectables/FilesS3PresignedService.html":{},"dependencies.html":{}}}],["search",{"_index":2856,"title":{},"body":{"classes/Query-10.html":{},"classes/Query-3.html":{},"classes/Query-6.html":{},"index.html":{}}}],["seconds",{"_index":2313,"title":{},"body":{"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{}}}],["secret",{"_index":1270,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"interfaces/IJWTConfig.html":{}}}],["secretaccesskey",{"_index":1326,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"interfaces/IFileConfig.html":{}}}],["secure",{"_index":3480,"title":{},"body":{"index.html":{}}}],["securely",{"_index":2100,"title":{},"body":{"classes/FileResponseDto-2.html":{}}}],["see",{"_index":1347,"title":{},"body":{"controllers/CountriesController.html":{}}}],["seed",{"_index":3274,"title":{},"body":{"coverage.html":{}}}],["select",{"_index":844,"title":{},"body":{"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"interfaces/IPaginationFieldConfig.html":{},"injectables/PaginationService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{}}}],["select_one",{"_index":985,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/DynamicQueryBuilder.html":{},"injectables/PrismaService.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{}}}],["select_with_dynamic_join",{"_index":1087,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["selected",{"_index":999,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/Query-3.html":{},"interfaces/QueryConfig.html":{}}}],["selectedfields",{"_index":3202,"title":{},"body":{"classes/UtilsService.html":{}}}],["selectfields",{"_index":843,"title":{},"body":{"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentService.html":{},"interfaces/IPaginationFieldConfig.html":{},"injectables/PaginationService.html":{},"interfaces/QueryConfig.html":{},"injectables/StateService.html":{},"classes/UtilsService.html":{}}}],["selectfields.join",{"_index":2694,"title":{},"body":{"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["selectfields.length",{"_index":3203,"title":{},"body":{"classes/UtilsService.html":{}}}],["selectfields.push(...config.selectfields(alias",{"_index":3189,"title":{},"body":{"classes/UtilsService.html":{}}}],["selectfile",{"_index":2228,"title":{},"body":{"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{}}}],["selecting",{"_index":2618,"title":{},"body":{"interfaces/IPaginationFieldConfig.html":{},"classes/Query-3.html":{}}}],["selectoptions",{"_index":2942,"title":{},"body":{"classes/Query-3.html":{}}}],["selectquery",{"_index":260,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/PaginationService.html":{},"injectables/StateService.html":{},"classes/UtilsService.html":{}}}],["sell",{"_index":3622,"title":{},"body":{"license.html":{}}}],["sender_id",{"_index":1309,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/ISMSConfig.html":{}}}],["sendgrid_api_key",{"_index":1283,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/ISendGridConfig.html":{}}}],["sendgridconfig",{"_index":1282,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["sent",{"_index":3043,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["separate",{"_index":3438,"title":{},"body":{"miscellaneous/functions.html":{}}}],["separated",{"_index":901,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["sequelize",{"_index":892,"title":{},"body":{"injectables/CityService.html":{}}}],["serialized",{"_index":2842,"title":{},"body":{"classes/Query-1.html":{}}}],["server",{"_index":324,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/FileResponseDto-2.html":{},"classes/HttpErrorFilter.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["serves",{"_index":359,"title":{},"body":{"modules/ApiModule.html":{},"classes/Country.html":{},"classes/State.html":{}}}],["service",{"_index":264,"title":{},"body":{"injectables/AddressTypeService.html":{},"controllers/AppController.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"classes/ConfigService.html":{},"injectables/CountriesService-1.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/EnvVarAppConfigValidator.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"index.html":{}}}],["service's",{"_index":2375,"title":{},"body":{"injectables/FilesService.html":{}}}],["servicecommit",{"_index":3569,"title":{},"body":{"index.html":{}}}],["services",{"_index":706,"title":{},"body":{"modules/BankModule.html":{},"modules/CityModule.html":{},"modules/CountriesModule.html":{},"modules/CountryMasModule.html":{},"modules/DocumentGroupModule.html":{},"modules/DocumentModule.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/StateModule.html":{},"index.html":{}}}],["services/comman.query",{"_index":2491,"title":{},"body":{"modules/HelperModule.html":{}}}],["services/config.service",{"_index":2490,"title":{},"body":{"modules/HelperModule.html":{},"injectables/PrismaService.html":{}}}],["services/encryption.service",{"_index":2496,"title":{},"body":{"modules/HelperModule.html":{}}}],["services/pagination.service",{"_index":829,"title":{},"body":{"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentService.html":{},"modules/HelperModule.html":{}}}],["services/prisma.service",{"_index":422,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"modules/HelperModule.html":{},"injectables/PaginationService.html":{},"injectables/StateService.html":{}}}],["services/task.service",{"_index":2498,"title":{},"body":{"modules/HelperModule.html":{}}}],["services/util.service",{"_index":830,"title":{},"body":{"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentService.html":{},"modules/HelperModule.html":{}}}],["set",{"_index":482,"title":{},"body":{"controllers/AppController.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/DynamicQueryBuilder.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{}}}],["setclauses",{"_index":1032,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/DynamicQueryBuilder.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{}}}],["setclauses.join",{"_index":1833,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryOptions.html":{}}}],["setcolumnwithvalue",{"_index":2886,"title":{},"body":{"classes/Query-2.html":{}}}],["sets",{"_index":353,"title":{},"body":{"modules/ApiModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"miscellaneous/functions.html":{}}}],["setting",{"_index":3467,"title":{},"body":{"index.html":{}}}],["settings",{"_index":1927,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"interfaces/IAppConfig.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["several",{"_index":351,"title":{},"body":{"modules/ApiModule.html":{}}}],["sf",{"_index":766,"title":{},"body":{"classes/Cities.html":{}}}],["sh",{"_index":3262,"title":{},"body":{"contributing.html":{}}}],["shall",{"_index":3630,"title":{},"body":{"license.html":{}}}],["shared/services/sql.service",{"_index":2525,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["shift",{"_index":3536,"title":{},"body":{"index.html":{}}}],["short",{"_index":691,"title":{},"body":{"classes/BankDto.html":{},"classes/Banks.html":{},"index.html":{}}}],["short_name",{"_index":668,"title":{},"body":{"classes/BankDto.html":{},"classes/Banks.html":{},"classes/Query-5.html":{}}}],["side",{"_index":3459,"title":{},"body":{"index.html":{}}}],["signed",{"_index":2092,"title":{},"body":{"classes/FileResponseDto-2.html":{}}}],["signedurl",{"_index":2360,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["simple",{"_index":2773,"title":{},"body":{"injectables/PrismaService.html":{}}}],["single",{"_index":179,"title":{},"body":{"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/Query-1.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{},"index.html":{}}}],["size",{"_index":1986,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileUploadDto.html":{},"injectables/FilesS3PresignedService.html":{},"interfaces/IFileConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["slack_webhook",{"_index":2048,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["smooth",{"_index":3232,"title":{},"body":{"contributing.html":{}}}],["sms_provider_name",{"_index":1305,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/ISMSConfig.html":{}}}],["smsconfig",{"_index":1304,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["soft",{"_index":1804,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["software",{"_index":3611,"title":{},"body":{"license.html":{}}}],["solutions",{"_index":2244,"title":{},"body":{"modules/FilesModule.html":{}}}],["something",{"_index":224,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["somewhere",{"_index":2593,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["sort",{"_index":1405,"title":{},"body":{"controllers/CountriesController.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UtilsService.html":{}}}],["sort.length",{"_index":3194,"title":{},"body":{"classes/UtilsService.html":{}}}],["sortby",{"_index":938,"title":{"injectables/SortBy.html":{}},"body":{"injectables/CommaSeparated.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"coverage.html":{}}}],["sortbydto",{"_index":2425,"title":{"classes/SortByDto.html":{}},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"coverage.html":{}}}],["sortbyquery",{"_index":1645,"title":{},"body":{"injectables/CurrenciesService.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["sortconditions",{"_index":2708,"title":{},"body":{"injectables/PaginationService.html":{}}}],["sortcountrydto",{"_index":2383,"title":{"classes/SortCountryDto.html":{}},"body":{"classes/FilterCountryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortCountryDto.html":{},"coverage.html":{}}}],["sorting",{"_index":2424,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{}}}],["sortitem.direction",{"_index":3201,"title":{},"body":{"classes/UtilsService.html":{}}}],["sortitem.field.tolowercase",{"_index":3196,"title":{},"body":{"classes/UtilsService.html":{}}}],["sortoptions",{"_index":1393,"title":{},"body":{"controllers/CountriesController.html":{}}}],["sortquery",{"_index":2706,"title":{},"body":{"injectables/PaginationService.html":{}}}],["sortuserdto",{"_index":2446,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/BankController.html":{},"classes/BankDto.html":{},"modules/BankModule.html":{},"injectables/BankService.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"controllers/CityController.html":{},"classes/CityDto.html":{},"modules/CityModule.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService-1.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"modules/CountryMasModule.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/Document.html":{},"controllers/DocumentController.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"controllers/DocumentGroupController.html":{},"classes/DocumentGroupDto.html":{},"modules/DocumentGroupModule.html":{},"injectables/DocumentGroupService.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/State.html":{},"controllers/StateController.html":{},"classes/StateDto.html":{},"modules/StateModule.html":{},"injectables/StateService.html":{},"classes/UpdateDto.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UpdateDto-7.html":{},"classes/UpdateDto-8.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"index.html":{}}}],["sourceclass",{"_index":478,"title":{},"body":{"controllers/AppController.html":{}}}],["spaces",{"_index":943,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["specific",{"_index":357,"title":{},"body":{"modules/ApiModule.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesService.html":{},"classes/PrismaClientExceptionFilter.html":{},"interfaces/QueryConfig.html":{},"classes/QueryFailedFilter.html":{}}}],["specifically",{"_index":540,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["specified",{"_index":28,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/CountryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/FileResponseDto-2.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"interfaces/QueryConfig.html":{},"classes/SortByDto.html":{},"classes/StateDto.html":{},"miscellaneous/functions.html":{}}}],["specifies",{"_index":1982,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{}}}],["specify",{"_index":841,"title":{},"body":{"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/FileUploadDto.html":{},"interfaces/QueryConfig.html":{}}}],["specifying",{"_index":996,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/QueryConfig.html":{}}}],["split",{"_index":942,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/PaginationService.html":{},"interfaces/QueryConfig.html":{},"injectables/SortBy.html":{}}}],["sponsors",{"_index":3592,"title":{},"body":{"index.html":{}}}],["sql",{"_index":135,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"injectables/PaginationService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{},"injectables/StateService.html":{},"classes/UtilsService.html":{}}}],["sqlquery",{"_index":853,"title":{},"body":{"injectables/CityService.html":{},"classes/Query-1.html":{}}}],["sqlservice",{"_index":580,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["sqlservice.run",{"_index":585,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{}}}],["sqlservice.run(query.addqueryerror(\"dbquery",{"_index":3033,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["src/**/**.entity{.ts,.js",{"_index":1228,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["src/.../app",{"_index":3668,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../app.config.ts",{"_index":3401,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../config.type.ts",{"_index":3667,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../database",{"_index":3669,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../deep",{"_index":3409,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../field.validator.ts",{"_index":3411,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../file",{"_index":3403,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../logger",{"_index":3671,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../logger.config.ts",{"_index":3402,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":3408,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../maybe.type.ts",{"_index":3673,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../number.string.validator.ts",{"_index":3410,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../pagination",{"_index":3413,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../pagination.dto.ts",{"_index":3405,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../swagger.ts",{"_index":3415,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../transforms.decorator.ts",{"_index":3414,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../validate",{"_index":3416,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app/app.controller.ts",{"_index":393,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app/app.controller.ts:66",{"_index":405,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app/app.controller.ts:91",{"_index":412,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app/app.module.ts",{"_index":500,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{}}}],["src/common/helper/helper.module.ts",{"_index":2479,"title":{},"body":{"modules/HelperModule.html":{},"coverage.html":{}}}],["src/common/helper/services/comman.query.ts",{"_index":960,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{},"coverage.html":{}}}],["src/common/helper/services/comman.query.ts:11",{"_index":979,"title":{},"body":{"classes/CommonQuery1.html":{}}}],["src/common/helper/services/comman.query.ts:12",{"_index":974,"title":{},"body":{"classes/CommonQuery1.html":{}}}],["src/common/helper/services/comman.query.ts:137",{"_index":983,"title":{},"body":{"classes/CommonQuery1.html":{}}}],["src/common/helper/services/comman.query.ts:150",{"_index":1001,"title":{},"body":{"classes/CommonQuery1.html":{}}}],["src/common/helper/services/comman.query.ts:193",{"_index":1112,"title":{},"body":{"classes/CommonQuery5.html":{}}}],["src/common/helper/services/comman.query.ts:194",{"_index":1111,"title":{},"body":{"classes/CommonQuery5.html":{}}}],["src/common/helper/services/comman.query.ts:211",{"_index":1114,"title":{},"body":{"classes/CommonQuery5.html":{}}}],["src/common/helper/services/comman.query.ts:255",{"_index":1116,"title":{},"body":{"classes/CommonQuery5.html":{}}}],["src/common/helper/services/comman.query.ts:28",{"_index":988,"title":{},"body":{"classes/CommonQuery1.html":{}}}],["src/common/helper/services/comman.query.ts:310",{"_index":1119,"title":{},"body":{"classes/CommonQuery5.html":{}}}],["src/common/helper/services/comman.query.ts:365",{"_index":1121,"title":{},"body":{"classes/CommonQuery5.html":{}}}],["src/common/helper/services/comman.query.ts:43",{"_index":1004,"title":{},"body":{"classes/CommonQuery1.html":{}}}],["src/common/helper/services/comman.query.ts:436",{"_index":1113,"title":{},"body":{"classes/CommonQuery5.html":{}}}],["src/common/helper/services/comman.query.ts:457",{"_index":1122,"title":{},"body":{"classes/CommonQuery5.html":{}}}],["src/common/helper/services/comman.query.ts:60",{"_index":1005,"title":{},"body":{"classes/CommonQuery1.html":{}}}],["src/common/helper/services/comman.query.ts:82",{"_index":987,"title":{},"body":{"classes/CommonQuery1.html":{}}}],["src/common/helper/services/comman.query.ts:99",{"_index":990,"title":{},"body":{"classes/CommonQuery1.html":{}}}],["src/common/helper/services/config.service.ts",{"_index":1124,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"coverage.html":{}}}],["src/common/helper/services/config.service.ts:101",{"_index":1134,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/common/helper/services/config.service.ts:105",{"_index":1138,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/common/helper/services/config.service.ts:139",{"_index":1140,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/common/helper/services/config.service.ts:28",{"_index":1842,"title":{},"body":{"classes/EnvVarAppConfigValidator.html":{}}}],["src/common/helper/services/config.service.ts:32",{"_index":1846,"title":{},"body":{"classes/EnvVarAppConfigValidator.html":{}}}],["src/common/helper/services/config.service.ts:36",{"_index":1845,"title":{},"body":{"classes/EnvVarAppConfigValidator.html":{}}}],["src/common/helper/services/config.service.ts:40",{"_index":1840,"title":{},"body":{"classes/EnvVarAppConfigValidator.html":{}}}],["src/common/helper/services/config.service.ts:72",{"_index":1130,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/common/helper/services/config.service.ts:93",{"_index":1132,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/common/helper/services/config.service.ts:97",{"_index":1136,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/common/helper/services/pagination.service.ts",{"_index":2670,"title":{},"body":{"injectables/PaginationService.html":{},"coverage.html":{}}}],["src/common/helper/services/pagination.service.ts:36",{"_index":2679,"title":{},"body":{"injectables/PaginationService.html":{}}}],["src/common/helper/services/pagination.service.ts:39",{"_index":2681,"title":{},"body":{"injectables/PaginationService.html":{}}}],["src/common/helper/services/prisma.service.ts",{"_index":2747,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/common/helper/services/prisma.service.ts:129",{"_index":2767,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/common/helper/services/prisma.service.ts:141",{"_index":2771,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/common/helper/services/prisma.service.ts:28",{"_index":2759,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/common/helper/services/prisma.service.ts:51",{"_index":2777,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/common/helper/services/prisma.service.ts:61",{"_index":2774,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/common/helper/services/prisma.service.ts:79",{"_index":2761,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/common/helper/services/util.service.ts",{"_index":3166,"title":{},"body":{"classes/UtilsService.html":{},"coverage.html":{}}}],["src/common/helper/services/util.service.ts:139",{"_index":3177,"title":{},"body":{"classes/UtilsService.html":{}}}],["src/common/helper/services/util.service.ts:157",{"_index":3175,"title":{},"body":{"classes/UtilsService.html":{}}}],["src/common/helper/services/util.service.ts:29",{"_index":3171,"title":{},"body":{"classes/UtilsService.html":{}}}],["src/config/app.config.ts",{"_index":1848,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/config/app.config.ts:25",{"_index":1863,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["src/config/app.config.ts:29",{"_index":1856,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["src/config/app.config.ts:33",{"_index":1855,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["src/config/app.config.ts:37",{"_index":1859,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["src/config/app.config.ts:41",{"_index":1858,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["src/config/app.config.ts:47",{"_index":1857,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["src/config/app.config.ts:51",{"_index":1861,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["src/config/app.config.ts:55",{"_index":1860,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["src/config/app.config.ts:59",{"_index":1854,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["src/config/database.config.ts",{"_index":1890,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"coverage.html":{}}}],["src/config/database.config.ts:106",{"_index":1930,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/database.config.ts:117",{"_index":1916,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/database.config.ts:128",{"_index":1911,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/database.config.ts:139",{"_index":1904,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/database.config.ts:150",{"_index":1909,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/database.config.ts:161",{"_index":1908,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/database.config.ts:26",{"_index":1922,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/database.config.ts:37",{"_index":1928,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/database.config.ts:51",{"_index":1935,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/database.config.ts:62",{"_index":1933,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/database.config.ts:73",{"_index":1932,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/database.config.ts:84",{"_index":1938,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/database.config.ts:95",{"_index":1918,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/file.config.ts",{"_index":1969,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"coverage.html":{}}}],["src/config/file.config.ts:25",{"_index":1981,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["src/config/file.config.ts:38",{"_index":1972,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["src/config/file.config.ts:51",{"_index":1979,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["src/config/file.config.ts:64",{"_index":1975,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["src/config/file.config.ts:77",{"_index":1977,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["src/config/file.config.ts:88",{"_index":1985,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["src/config/logger.config.ts",{"_index":2001,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/config/logger.config.ts:30",{"_index":2024,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["src/config/logger.config.ts:34",{"_index":2022,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["src/config/logger.config.ts:38",{"_index":2016,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["src/config/logger.config.ts:42",{"_index":2013,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["src/config/logger.config.ts:46",{"_index":2017,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["src/config/logger.config.ts:50",{"_index":2021,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["src/config/logger.config.ts:54",{"_index":2018,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["src/config/logger.config.ts:58",{"_index":2019,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["src/config/logger.config.ts:62",{"_index":2015,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["src/config/logger.config.ts:66",{"_index":2020,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["src/config/logger.config.ts:70",{"_index":2023,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["src/config/type/app",{"_index":3677,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/config/type/config.type.ts",{"_index":3674,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/config/type/database",{"_index":3678,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/config/type/file",{"_index":3406,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/config/type/logger",{"_index":3682,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/core/constants/core.constant.ts",{"_index":3291,"title":{},"body":{"coverage.html":{}}}],["src/core/decorators/number.string.validator.ts",{"_index":3296,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/decorators/public.request.decorator",{"_index":424,"title":{},"body":{"controllers/AppController.html":{}}}],["src/core/decorators/public.request.decorator.ts",{"_index":3297,"title":{},"body":{"coverage.html":{}}}],["src/core/decorators/swagger.schema.ts",{"_index":3298,"title":{},"body":{"coverage.html":{}}}],["src/core/decorators/transforms.decorator.ts",{"_index":3300,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/exceptions/file",{"_index":2052,"title":{},"body":{"classes/FileNotImageException.html":{},"coverage.html":{}}}],["src/core/exceptions/http",{"_index":2519,"title":{},"body":{"classes/HttpErrorFilter.html":{},"coverage.html":{}}}],["src/core/exceptions/query.ts",{"_index":2827,"title":{},"body":{"classes/Query-1.html":{},"coverage.html":{}}}],["src/core/exceptions/query.ts:36",{"_index":2841,"title":{},"body":{"classes/Query-1.html":{}}}],["src/core/exceptions/user",{"_index":3157,"title":{},"body":{"classes/UserNotFoundException.html":{},"coverage.html":{}}}],["src/core/filters/all",{"_index":272,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["src/core/filters/bad",{"_index":537,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"coverage.html":{}}}],["src/core/filters/constraint",{"_index":3304,"title":{},"body":{"coverage.html":{}}}],["src/core/filters/http",{"_index":2535,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/core/filters/prisma",{"_index":2720,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"coverage.html":{}}}],["src/core/filters/query",{"_index":3015,"title":{},"body":{"classes/QueryFailedFilter.html":{},"coverage.html":{}}}],["src/core/filters/query.ts",{"_index":2811,"title":{},"body":{"classes/Query.html":{},"coverage.html":{}}}],["src/core/filters/query.ts:24",{"_index":2817,"title":{},"body":{"classes/Query.html":{}}}],["src/core/interfaces/app.interfaces.ts",{"_index":2543,"title":{},"body":{"interfaces/IAppConfig.html":{},"coverage.html":{}}}],["src/core/interfaces/aws.interfaces.ts",{"_index":2548,"title":{},"body":{"interfaces/IAwsConfig.html":{},"coverage.html":{}}}],["src/core/interfaces/file.interfaces.ts",{"_index":2549,"title":{},"body":{"interfaces/IFileConfig.html":{},"coverage.html":{}}}],["src/core/interfaces/jwt.interfaces.ts",{"_index":2554,"title":{},"body":{"interfaces/IJWTConfig.html":{},"coverage.html":{}}}],["src/core/interfaces/node",{"_index":2555,"title":{},"body":{"interfaces/INodeEmailerConfig.html":{},"coverage.html":{}}}],["src/core/interfaces/postgres.interfaces.ts",{"_index":2620,"title":{},"body":{"interfaces/IPostgreSQLConfig.html":{},"coverage.html":{}}}],["src/core/interfaces/sendgrid.interfaces.ts",{"_index":2625,"title":{},"body":{"interfaces/ISendGridConfig.html":{},"coverage.html":{}}}],["src/core/interfaces/sms.interfaces.ts",{"_index":2624,"title":{},"body":{"interfaces/ISMSConfig.html":{},"coverage.html":{}}}],["src/core/interfaces/upload",{"_index":2626,"title":{},"body":{"interfaces/IUploadFileConfig.html":{},"coverage.html":{}}}],["src/core/validators/field.validator.ts",{"_index":3310,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/validators/filter.validator.ts",{"_index":897,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{},"coverage.html":{}}}],["src/core/validators/filter.validator.ts:101",{"_index":3064,"title":{},"body":{"injectables/SortBy.html":{}}}],["src/core/validators/filter.validator.ts:28",{"_index":911,"title":{},"body":{"injectables/CommaSeparated.html":{}}}],["src/core/validators/filter.validator.ts:47",{"_index":907,"title":{},"body":{"injectables/CommaSeparated.html":{}}}],["src/core/validators/filter.validator.ts:71",{"_index":3065,"title":{},"body":{"injectables/SortBy.html":{}}}],["src/main.ts",{"_index":3311,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/api.module.ts",{"_index":349,"title":{},"body":{"modules/ApiModule.html":{}}}],["src/modules/countries/countries.controller.ts",{"_index":1336,"title":{},"body":{"controllers/CountriesController.html":{},"coverage.html":{}}}],["src/modules/countries/countries.controller.ts:114",{"_index":1342,"title":{},"body":{"controllers/CountriesController.html":{}}}],["src/modules/countries/countries.controller.ts:58",{"_index":1344,"title":{},"body":{"controllers/CountriesController.html":{}}}],["src/modules/countries/countries.controller.ts:74",{"_index":1340,"title":{},"body":{"controllers/CountriesController.html":{}}}],["src/modules/countries/countries.controller.ts:93",{"_index":1349,"title":{},"body":{"controllers/CountriesController.html":{}}}],["src/modules/countries/countries.module.ts",{"_index":1412,"title":{},"body":{"modules/CountriesModule.html":{}}}],["src/modules/countries/countries.service.ts",{"_index":3314,"title":{},"body":{"coverage.html":{}}}],["src/modules/countries/dto/country.ts",{"_index":1434,"title":{},"body":{"classes/Country.html":{},"coverage.html":{}}}],["src/modules/countries/dto/country.ts:107",{"_index":1461,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:120",{"_index":1489,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:133",{"_index":1465,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:146",{"_index":1493,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:159",{"_index":1484,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:172",{"_index":1487,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:185",{"_index":1456,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:198",{"_index":1490,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:29",{"_index":1475,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:42",{"_index":1482,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:55",{"_index":1476,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:68",{"_index":1480,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:81",{"_index":1467,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:94",{"_index":1459,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/create.dto.ts",{"_index":1535,"title":{},"body":{"classes/CreateCountryDto.html":{},"coverage.html":{}}}],["src/modules/countries/dto/create.dto.ts:110",{"_index":1543,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["src/modules/countries/dto/create.dto.ts:125",{"_index":1542,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["src/modules/countries/dto/create.dto.ts:140",{"_index":1541,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["src/modules/countries/dto/create.dto.ts:155",{"_index":1545,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["src/modules/countries/dto/create.dto.ts:170",{"_index":1551,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["src/modules/countries/dto/create.dto.ts:173",{"_index":1544,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["src/modules/countries/dto/create.dto.ts:34",{"_index":1556,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["src/modules/countries/dto/create.dto.ts:51",{"_index":1553,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["src/modules/countries/dto/create.dto.ts:66",{"_index":1557,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["src/modules/countries/dto/create.dto.ts:82",{"_index":1555,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["src/modules/countries/dto/create.dto.ts:96",{"_index":1559,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["src/modules/countries/dto/query",{"_index":2379,"title":{},"body":{"classes/FilterCountryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortCountryDto.html":{},"coverage.html":{}}}],["src/modules/countries/dto/update.dto.ts",{"_index":3131,"title":{},"body":{"classes/UpdateDto.html":{},"coverage.html":{}}}],["src/modules/countries/query.ts",{"_index":2867,"title":{},"body":{"classes/Query-2.html":{},"coverage.html":{}}}],["src/modules/countries/query.ts:115",{"_index":2872,"title":{},"body":{"classes/Query-2.html":{}}}],["src/modules/countries/query.ts:13",{"_index":2873,"title":{},"body":{"classes/Query-2.html":{}}}],["src/modules/countries/query.ts:148",{"_index":2870,"title":{},"body":{"classes/Query-2.html":{}}}],["src/modules/countries/query.ts:159",{"_index":2874,"title":{},"body":{"classes/Query-2.html":{}}}],["src/modules/countries/query.ts:31",{"_index":2875,"title":{},"body":{"classes/Query-2.html":{}}}],["src/modules/countries/query.ts:5",{"_index":2869,"title":{},"body":{"classes/Query-2.html":{}}}],["src/modules/countries/query.ts:76",{"_index":2876,"title":{},"body":{"classes/Query-2.html":{}}}],["src/modules/currencies/currencies.controller.ts",{"_index":1595,"title":{},"body":{"controllers/CurrenciesController.html":{},"coverage.html":{}}}],["src/modules/currencies/currencies.controller.ts:113",{"_index":1599,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["src/modules/currencies/currencies.controller.ts:54",{"_index":1598,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["src/modules/currencies/currencies.controller.ts:74",{"_index":1601,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["src/modules/currencies/currencies.controller.ts:93",{"_index":1600,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["src/modules/currencies/currencies.module.ts",{"_index":1619,"title":{},"body":{"modules/CurrenciesModule.html":{}}}],["src/modules/currencies/currencies.service.ts",{"_index":1621,"title":{},"body":{"injectables/CurrenciesService.html":{},"coverage.html":{}}}],["src/modules/currencies/currencies.service.ts:136",{"_index":1625,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["src/modules/currencies/currencies.service.ts:175",{"_index":1624,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["src/modules/currencies/currencies.service.ts:201",{"_index":1626,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["src/modules/currencies/currencies.service.ts:27",{"_index":1622,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["src/modules/currencies/currencies.service.ts:53",{"_index":1623,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["src/modules/currencies/currencies.service.ts:86",{"_index":1628,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["src/modules/currencies/dto/create.dto.ts",{"_index":1567,"title":{},"body":{"classes/CreateDto.html":{},"coverage.html":{}}}],["src/modules/currencies/dto/create.dto.ts:106",{"_index":1590,"title":{},"body":{"classes/CreateDto.html":{}}}],["src/modules/currencies/dto/create.dto.ts:122",{"_index":1578,"title":{},"body":{"classes/CreateDto.html":{}}}],["src/modules/currencies/dto/create.dto.ts:138",{"_index":1583,"title":{},"body":{"classes/CreateDto.html":{}}}],["src/modules/currencies/dto/create.dto.ts:38",{"_index":1574,"title":{},"body":{"classes/CreateDto.html":{}}}],["src/modules/currencies/dto/create.dto.ts:55",{"_index":1579,"title":{},"body":{"classes/CreateDto.html":{}}}],["src/modules/currencies/dto/create.dto.ts:72",{"_index":1582,"title":{},"body":{"classes/CreateDto.html":{}}}],["src/modules/currencies/dto/create.dto.ts:89",{"_index":1587,"title":{},"body":{"classes/CreateDto.html":{}}}],["src/modules/currencies/dto/currency.ts",{"_index":1652,"title":{},"body":{"classes/Currency.html":{},"coverage.html":{}}}],["src/modules/currencies/dto/currency.ts:100",{"_index":1659,"title":{},"body":{"classes/Currency.html":{}}}],["src/modules/currencies/dto/currency.ts:108",{"_index":1656,"title":{},"body":{"classes/Currency.html":{}}}],["src/modules/currencies/dto/currency.ts:28",{"_index":1654,"title":{},"body":{"classes/Currency.html":{}}}],["src/modules/currencies/dto/currency.ts:40",{"_index":1657,"title":{},"body":{"classes/Currency.html":{}}}],["src/modules/currencies/dto/currency.ts:52",{"_index":1658,"title":{},"body":{"classes/Currency.html":{}}}],["src/modules/currencies/dto/currency.ts:64",{"_index":1660,"title":{},"body":{"classes/Currency.html":{}}}],["src/modules/currencies/dto/currency.ts:76",{"_index":1661,"title":{},"body":{"classes/Currency.html":{}}}],["src/modules/currencies/dto/currency.ts:88",{"_index":1655,"title":{},"body":{"classes/Currency.html":{}}}],["src/modules/currencies/dto/update.dto.ts",{"_index":3135,"title":{},"body":{"classes/UpdateDto-1.html":{},"coverage.html":{}}}],["src/modules/currencies/query.ts",{"_index":2915,"title":{},"body":{"classes/Query-3.html":{},"coverage.html":{}}}],["src/modules/currencies/query.ts:100",{"_index":2926,"title":{},"body":{"classes/Query-3.html":{}}}],["src/modules/currencies/query.ts:139",{"_index":2919,"title":{},"body":{"classes/Query-3.html":{}}}],["src/modules/currencies/query.ts:156",{"_index":2925,"title":{},"body":{"classes/Query-3.html":{}}}],["src/modules/currencies/query.ts:172",{"_index":2924,"title":{},"body":{"classes/Query-3.html":{}}}],["src/modules/currencies/query.ts:21",{"_index":2922,"title":{},"body":{"classes/Query-3.html":{}}}],["src/modules/currencies/query.ts:49",{"_index":2921,"title":{},"body":{"classes/Query-3.html":{}}}],["src/modules/currencies/query.ts:71",{"_index":2923,"title":{},"body":{"classes/Query-3.html":{}}}],["src/modules/files/domain/file.ts",{"_index":2105,"title":{},"body":{"classes/FileType.html":{},"coverage.html":{}}}],["src/modules/files/domain/file.ts:35",{"_index":2108,"title":{},"body":{"classes/FileType.html":{}}}],["src/modules/files/domain/file.ts:81",{"_index":2110,"title":{},"body":{"classes/FileType.html":{}}}],["src/modules/files/files.module.ts",{"_index":2238,"title":{},"body":{"modules/FilesModule.html":{},"coverage.html":{}}}],["src/modules/files/files.service.ts",{"_index":2372,"title":{},"body":{"injectables/FilesService.html":{},"coverage.html":{}}}],["src/modules/files/infrastructure/uploader/local/dto/file",{"_index":2068,"title":{},"body":{"classes/FileResponseDto.html":{},"coverage.html":{}}}],["src/modules/files/infrastructure/uploader/local/files.controller.ts",{"_index":2150,"title":{},"body":{"controllers/FilesLocalController.html":{},"coverage.html":{}}}],["src/modules/files/infrastructure/uploader/local/files.controller.ts:79",{"_index":2166,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["src/modules/files/infrastructure/uploader/local/files.controller.ts:96",{"_index":2156,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["src/modules/files/infrastructure/uploader/local/files.module.ts",{"_index":2205,"title":{},"body":{"modules/FilesLocalModule.html":{}}}],["src/modules/files/infrastructure/uploader/local/files.service.ts",{"_index":2216,"title":{},"body":{"injectables/FilesLocalService.html":{},"coverage.html":{}}}],["src/modules/files/infrastructure/uploader/local/files.service.ts:16",{"_index":2220,"title":{},"body":{"injectables/FilesLocalService.html":{}}}],["src/modules/files/infrastructure/uploader/local/files.service.ts:37",{"_index":2222,"title":{},"body":{"injectables/FilesLocalService.html":{}}}],["src/modules/files/infrastructure/uploader/s3",{"_index":2089,"title":{},"body":{"classes/FileResponseDto-2.html":{},"classes/FileUploadDto.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"coverage.html":{}}}],["src/modules/files/infrastructure/uploader/s3/dto/file",{"_index":2081,"title":{},"body":{"classes/FileResponseDto-1.html":{},"coverage.html":{}}}],["src/modules/files/infrastructure/uploader/s3/files.controller.ts",{"_index":2257,"title":{},"body":{"controllers/FilesS3Controller.html":{},"coverage.html":{}}}],["src/modules/files/infrastructure/uploader/s3/files.controller.ts:74",{"_index":2270,"title":{},"body":{"controllers/FilesS3Controller.html":{}}}],["src/modules/files/infrastructure/uploader/s3/files.module.ts",{"_index":2275,"title":{},"body":{"modules/FilesS3Module.html":{}}}],["src/modules/files/infrastructure/uploader/s3/files.service.ts",{"_index":2363,"title":{},"body":{"injectables/FilesS3Service.html":{},"coverage.html":{}}}],["src/modules/files/infrastructure/uploader/s3/files.service.ts:29",{"_index":2369,"title":{},"body":{"injectables/FilesS3Service.html":{}}}],["src/modules/files/infrastructure/uploader/s3/files.service.ts:40",{"_index":2370,"title":{},"body":{"injectables/FilesS3Service.html":{}}}],["src/modules/home/home.controller.ts",{"_index":2500,"title":{},"body":{"controllers/HomeController.html":{},"coverage.html":{}}}],["src/modules/home/home.controller.ts:30",{"_index":2503,"title":{},"body":{"controllers/HomeController.html":{}}}],["src/modules/home/home.module.ts",{"_index":2510,"title":{},"body":{"modules/HomeModule.html":{}}}],["src/modules/home/home.service.ts",{"_index":2513,"title":{},"body":{"injectables/HomeService.html":{},"coverage.html":{}}}],["src/modules/home/home.service.ts:15",{"_index":2514,"title":{},"body":{"injectables/HomeService.html":{}}}],["src/modules/home/home.service.ts:26",{"_index":2515,"title":{},"body":{"injectables/HomeService.html":{}}}],["src/modules/master/address_type/address_type.controller.ts",{"_index":106,"title":{},"body":{"controllers/AddressTypeController.html":{},"coverage.html":{}}}],["src/modules/master/address_type/address_type.service.ts",{"_index":115,"title":{},"body":{"injectables/AddressTypeService.html":{},"coverage.html":{}}}],["src/modules/master/address_type/address_type.service.ts:125",{"_index":178,"title":{},"body":{"injectables/AddressTypeService.html":{}}}],["src/modules/master/address_type/address_type.service.ts:138",{"_index":162,"title":{},"body":{"injectables/AddressTypeService.html":{}}}],["src/modules/master/address_type/address_type.service.ts:27",{"_index":148,"title":{},"body":{"injectables/AddressTypeService.html":{}}}],["src/modules/master/address_type/address_type.service.ts:43",{"_index":154,"title":{},"body":{"injectables/AddressTypeService.html":{}}}],["src/modules/master/address_type/address_type.service.ts:66",{"_index":182,"title":{},"body":{"injectables/AddressTypeService.html":{}}}],["src/modules/master/address_type/address_type.service.ts:94",{"_index":170,"title":{},"body":{"injectables/AddressTypeService.html":{}}}],["src/modules/master/address_type/dto/address_type.ts",{"_index":91,"title":{},"body":{"classes/AddressType.html":{},"coverage.html":{}}}],["src/modules/master/address_type/dto/address_type.ts:24",{"_index":99,"title":{},"body":{"classes/AddressType.html":{}}}],["src/modules/master/address_type/dto/address_type.ts:34",{"_index":93,"title":{},"body":{"classes/AddressType.html":{}}}],["src/modules/master/address_type/dto/address_type.ts:44",{"_index":101,"title":{},"body":{"classes/AddressType.html":{}}}],["src/modules/master/address_type/dto/create.dto.ts",{"_index":6,"title":{},"body":{"classes/AddresTypeDto.html":{},"coverage.html":{}}}],["src/modules/master/address_type/dto/create.dto.ts:33",{"_index":52,"title":{},"body":{"classes/AddresTypeDto.html":{}}}],["src/modules/master/address_type/dto/create.dto.ts:47",{"_index":68,"title":{},"body":{"classes/AddresTypeDto.html":{}}}],["src/modules/master/address_type/dto/create.dto.ts:54",{"_index":56,"title":{},"body":{"classes/AddresTypeDto.html":{}}}],["src/modules/master/address_type/dto/create.dto.ts:61",{"_index":70,"title":{},"body":{"classes/AddresTypeDto.html":{}}}],["src/modules/master/address_type/dto/update.dto.ts",{"_index":3142,"title":{},"body":{"classes/UpdateDto-2.html":{},"coverage.html":{}}}],["src/modules/master/address_type/query.ts",{"_index":2951,"title":{},"body":{"classes/Query-4.html":{},"coverage.html":{}}}],["src/modules/master/address_type/query.ts:115",{"_index":2955,"title":{},"body":{"classes/Query-4.html":{}}}],["src/modules/master/address_type/query.ts:20",{"_index":2953,"title":{},"body":{"classes/Query-4.html":{}}}],["src/modules/master/address_type/query.ts:37",{"_index":2954,"title":{},"body":{"classes/Query-4.html":{}}}],["src/modules/master/address_type/query.ts:54",{"_index":2956,"title":{},"body":{"classes/Query-4.html":{}}}],["src/modules/master/address_type/query.ts:74",{"_index":2957,"title":{},"body":{"classes/Query-4.html":{}}}],["src/modules/master/address_type/query.ts:98",{"_index":2952,"title":{},"body":{"classes/Query-4.html":{}}}],["src/modules/master/banks/bank.controller.ts",{"_index":604,"title":{},"body":{"controllers/BankController.html":{},"coverage.html":{}}}],["src/modules/master/banks/bank.controller.ts:102",{"_index":628,"title":{},"body":{"controllers/BankController.html":{}}}],["src/modules/master/banks/bank.controller.ts:119",{"_index":622,"title":{},"body":{"controllers/BankController.html":{}}}],["src/modules/master/banks/bank.controller.ts:51",{"_index":616,"title":{},"body":{"controllers/BankController.html":{}}}],["src/modules/master/banks/bank.controller.ts:69",{"_index":630,"title":{},"body":{"controllers/BankController.html":{}}}],["src/modules/master/banks/bank.controller.ts:85",{"_index":625,"title":{},"body":{"controllers/BankController.html":{}}}],["src/modules/master/banks/bank.module.ts",{"_index":702,"title":{},"body":{"modules/BankModule.html":{}}}],["src/modules/master/banks/bank.service.ts",{"_index":708,"title":{},"body":{"injectables/BankService.html":{},"coverage.html":{}}}],["src/modules/master/banks/bank.service.ts:107",{"_index":715,"title":{},"body":{"injectables/BankService.html":{}}}],["src/modules/master/banks/bank.service.ts:141",{"_index":716,"title":{},"body":{"injectables/BankService.html":{}}}],["src/modules/master/banks/bank.service.ts:155",{"_index":713,"title":{},"body":{"injectables/BankService.html":{}}}],["src/modules/master/banks/bank.service.ts:27",{"_index":711,"title":{},"body":{"injectables/BankService.html":{}}}],["src/modules/master/banks/bank.service.ts:44",{"_index":712,"title":{},"body":{"injectables/BankService.html":{}}}],["src/modules/master/banks/bank.service.ts:74",{"_index":717,"title":{},"body":{"injectables/BankService.html":{}}}],["src/modules/master/banks/dto/bank.dto.ts",{"_index":730,"title":{},"body":{"classes/Banks.html":{},"coverage.html":{}}}],["src/modules/master/banks/dto/bank.dto.ts:23",{"_index":739,"title":{},"body":{"classes/Banks.html":{}}}],["src/modules/master/banks/dto/bank.dto.ts:33",{"_index":758,"title":{},"body":{"classes/Banks.html":{}}}],["src/modules/master/banks/dto/bank.dto.ts:43",{"_index":759,"title":{},"body":{"classes/Banks.html":{}}}],["src/modules/master/banks/dto/bank.dto.ts:53",{"_index":745,"title":{},"body":{"classes/Banks.html":{}}}],["src/modules/master/banks/dto/bank.dto.ts:63",{"_index":757,"title":{},"body":{"classes/Banks.html":{}}}],["src/modules/master/banks/dto/bank.dto.ts:73",{"_index":751,"title":{},"body":{"classes/Banks.html":{}}}],["src/modules/master/banks/dto/bank.dto.ts:83",{"_index":760,"title":{},"body":{"classes/Banks.html":{}}}],["src/modules/master/banks/dto/create.dto.ts",{"_index":664,"title":{},"body":{"classes/BankDto.html":{},"coverage.html":{}}}],["src/modules/master/banks/dto/create.dto.ts:113",{"_index":695,"title":{},"body":{"classes/BankDto.html":{}}}],["src/modules/master/banks/dto/create.dto.ts:120",{"_index":669,"title":{},"body":{"classes/BankDto.html":{}}}],["src/modules/master/banks/dto/create.dto.ts:123",{"_index":696,"title":{},"body":{"classes/BankDto.html":{}}}],["src/modules/master/banks/dto/create.dto.ts:41",{"_index":689,"title":{},"body":{"classes/BankDto.html":{}}}],["src/modules/master/banks/dto/create.dto.ts:57",{"_index":694,"title":{},"body":{"classes/BankDto.html":{}}}],["src/modules/master/banks/dto/create.dto.ts:71",{"_index":673,"title":{},"body":{"classes/BankDto.html":{}}}],["src/modules/master/banks/dto/create.dto.ts:85",{"_index":687,"title":{},"body":{"classes/BankDto.html":{}}}],["src/modules/master/banks/dto/create.dto.ts:99",{"_index":681,"title":{},"body":{"classes/BankDto.html":{}}}],["src/modules/master/banks/dto/update.dto.ts",{"_index":3144,"title":{},"body":{"classes/UpdateDto-3.html":{},"coverage.html":{}}}],["src/modules/master/banks/query.ts",{"_index":2965,"title":{},"body":{"classes/Query-5.html":{},"coverage.html":{}}}],["src/modules/master/banks/query.ts:126",{"_index":2966,"title":{},"body":{"classes/Query-5.html":{}}}],["src/modules/master/banks/query.ts:144",{"_index":2969,"title":{},"body":{"classes/Query-5.html":{}}}],["src/modules/master/banks/query.ts:19",{"_index":2967,"title":{},"body":{"classes/Query-5.html":{}}}],["src/modules/master/banks/query.ts:45",{"_index":2968,"title":{},"body":{"classes/Query-5.html":{}}}],["src/modules/master/banks/query.ts:63",{"_index":2970,"title":{},"body":{"classes/Query-5.html":{}}}],["src/modules/master/banks/query.ts:92",{"_index":2971,"title":{},"body":{"classes/Query-5.html":{}}}],["src/modules/master/city_mas/cities.controller.ts",{"_index":774,"title":{},"body":{"controllers/CityController.html":{},"coverage.html":{}}}],["src/modules/master/city_mas/cities.controller.ts:109",{"_index":778,"title":{},"body":{"controllers/CityController.html":{}}}],["src/modules/master/city_mas/cities.controller.ts:41",{"_index":776,"title":{},"body":{"controllers/CityController.html":{}}}],["src/modules/master/city_mas/cities.controller.ts:59",{"_index":783,"title":{},"body":{"controllers/CityController.html":{}}}],["src/modules/master/city_mas/cities.controller.ts:75",{"_index":779,"title":{},"body":{"controllers/CityController.html":{}}}],["src/modules/master/city_mas/cities.controller.ts:92",{"_index":781,"title":{},"body":{"controllers/CityController.html":{}}}],["src/modules/master/city_mas/cities.modules.ts",{"_index":817,"title":{},"body":{"modules/CityModule.html":{}}}],["src/modules/master/city_mas/cities.service.ts",{"_index":819,"title":{},"body":{"injectables/CityService.html":{},"coverage.html":{}}}],["src/modules/master/city_mas/cities.service.ts:103",{"_index":825,"title":{},"body":{"injectables/CityService.html":{}}}],["src/modules/master/city_mas/cities.service.ts:203",{"_index":826,"title":{},"body":{"injectables/CityService.html":{}}}],["src/modules/master/city_mas/cities.service.ts:21",{"_index":822,"title":{},"body":{"injectables/CityService.html":{}}}],["src/modules/master/city_mas/cities.service.ts:217",{"_index":824,"title":{},"body":{"injectables/CityService.html":{}}}],["src/modules/master/city_mas/cities.service.ts:40",{"_index":823,"title":{},"body":{"injectables/CityService.html":{}}}],["src/modules/master/city_mas/cities.service.ts:67",{"_index":827,"title":{},"body":{"injectables/CityService.html":{}}}],["src/modules/master/city_mas/dto/cities.dto.ts",{"_index":762,"title":{},"body":{"classes/Cities.html":{},"coverage.html":{}}}],["src/modules/master/city_mas/dto/cities.dto.ts:22",{"_index":765,"title":{},"body":{"classes/Cities.html":{}}}],["src/modules/master/city_mas/dto/cities.dto.ts:32",{"_index":771,"title":{},"body":{"classes/Cities.html":{}}}],["src/modules/master/city_mas/dto/cities.dto.ts:42",{"_index":769,"title":{},"body":{"classes/Cities.html":{}}}],["src/modules/master/city_mas/dto/cities.dto.ts:52",{"_index":767,"title":{},"body":{"classes/Cities.html":{}}}],["src/modules/master/city_mas/dto/cities.dto.ts:62",{"_index":772,"title":{},"body":{"classes/Cities.html":{}}}],["src/modules/master/city_mas/dto/create.dto.ts",{"_index":803,"title":{},"body":{"classes/CityDto.html":{},"coverage.html":{}}}],["src/modules/master/city_mas/dto/create.dto.ts:34",{"_index":810,"title":{},"body":{"classes/CityDto.html":{}}}],["src/modules/master/city_mas/dto/create.dto.ts:48",{"_index":807,"title":{},"body":{"classes/CityDto.html":{}}}],["src/modules/master/city_mas/dto/create.dto.ts:62",{"_index":806,"title":{},"body":{"classes/CityDto.html":{}}}],["src/modules/master/city_mas/dto/create.dto.ts:76",{"_index":811,"title":{},"body":{"classes/CityDto.html":{}}}],["src/modules/master/city_mas/dto/create.dto.ts:83",{"_index":804,"title":{},"body":{"classes/CityDto.html":{}}}],["src/modules/master/city_mas/dto/create.dto.ts:86",{"_index":812,"title":{},"body":{"classes/CityDto.html":{}}}],["src/modules/master/city_mas/dto/update.dto.ts",{"_index":3146,"title":{},"body":{"classes/UpdateDto-4.html":{},"coverage.html":{}}}],["src/modules/master/city_mas/query.ts",{"_index":2974,"title":{},"body":{"classes/Query-6.html":{},"coverage.html":{}}}],["src/modules/master/city_mas/query.ts:102",{"_index":2975,"title":{},"body":{"classes/Query-6.html":{}}}],["src/modules/master/city_mas/query.ts:119",{"_index":2978,"title":{},"body":{"classes/Query-6.html":{}}}],["src/modules/master/city_mas/query.ts:19",{"_index":2976,"title":{},"body":{"classes/Query-6.html":{}}}],["src/modules/master/city_mas/query.ts:38",{"_index":2977,"title":{},"body":{"classes/Query-6.html":{}}}],["src/modules/master/city_mas/query.ts:55",{"_index":2979,"title":{},"body":{"classes/Query-6.html":{}}}],["src/modules/master/city_mas/query.ts:74",{"_index":2980,"title":{},"body":{"classes/Query-6.html":{}}}],["src/modules/master/country_mas/country_mas.controller.ts",{"_index":1496,"title":{},"body":{"controllers/CountryController.html":{},"coverage.html":{}}}],["src/modules/master/country_mas/country_mas.controller.ts:112",{"_index":1500,"title":{},"body":{"controllers/CountryController.html":{}}}],["src/modules/master/country_mas/country_mas.controller.ts:55",{"_index":1498,"title":{},"body":{"controllers/CountryController.html":{}}}],["src/modules/master/country_mas/country_mas.controller.ts:75",{"_index":1504,"title":{},"body":{"controllers/CountryController.html":{}}}],["src/modules/master/country_mas/country_mas.controller.ts:93",{"_index":1502,"title":{},"body":{"controllers/CountryController.html":{}}}],["src/modules/master/country_mas/country_mas.module.ts",{"_index":1533,"title":{},"body":{"modules/CountryMasModule.html":{}}}],["src/modules/master/country_mas/country_mas.service.ts",{"_index":1414,"title":{},"body":{"injectables/CountriesService-1.html":{},"coverage.html":{}}}],["src/modules/master/country_mas/country_mas.service.ts:118",{"_index":1422,"title":{},"body":{"injectables/CountriesService-1.html":{}}}],["src/modules/master/country_mas/country_mas.service.ts:145",{"_index":1421,"title":{},"body":{"injectables/CountriesService-1.html":{}}}],["src/modules/master/country_mas/country_mas.service.ts:169",{"_index":1423,"title":{},"body":{"injectables/CountriesService-1.html":{}}}],["src/modules/master/country_mas/country_mas.service.ts:27",{"_index":1415,"title":{},"body":{"injectables/CountriesService-1.html":{}}}],["src/modules/master/country_mas/country_mas.service.ts:51",{"_index":1420,"title":{},"body":{"injectables/CountriesService-1.html":{}}}],["src/modules/master/country_mas/country_mas.service.ts:80",{"_index":1424,"title":{},"body":{"injectables/CountriesService-1.html":{}}}],["src/modules/master/country_mas/dto/country_mas.dto.ts",{"_index":1525,"title":{},"body":{"classes/CountryMas.html":{},"coverage.html":{}}}],["src/modules/master/country_mas/dto/country_mas.dto.ts:25",{"_index":1527,"title":{},"body":{"classes/CountryMas.html":{}}}],["src/modules/master/country_mas/dto/country_mas.dto.ts:35",{"_index":1528,"title":{},"body":{"classes/CountryMas.html":{}}}],["src/modules/master/country_mas/dto/country_mas.dto.ts:45",{"_index":1526,"title":{},"body":{"classes/CountryMas.html":{}}}],["src/modules/master/country_mas/dto/country_mas.dto.ts:55",{"_index":1529,"title":{},"body":{"classes/CountryMas.html":{}}}],["src/modules/master/country_mas/dto/create.dto.ts",{"_index":1513,"title":{},"body":{"classes/CountryDto.html":{},"coverage.html":{}}}],["src/modules/master/country_mas/dto/create.dto.ts:35",{"_index":1515,"title":{},"body":{"classes/CountryDto.html":{}}}],["src/modules/master/country_mas/dto/create.dto.ts:52",{"_index":1522,"title":{},"body":{"classes/CountryDto.html":{}}}],["src/modules/master/country_mas/dto/create.dto.ts:59",{"_index":1519,"title":{},"body":{"classes/CountryDto.html":{}}}],["src/modules/master/country_mas/dto/create.dto.ts:62",{"_index":1523,"title":{},"body":{"classes/CountryDto.html":{}}}],["src/modules/master/country_mas/dto/update.dto.ts",{"_index":3148,"title":{},"body":{"classes/UpdateDto-5.html":{},"coverage.html":{}}}],["src/modules/master/country_mas/query.ts",{"_index":2982,"title":{},"body":{"classes/Query-7.html":{},"coverage.html":{}}}],["src/modules/master/country_mas/query.ts:107",{"_index":2983,"title":{},"body":{"classes/Query-7.html":{}}}],["src/modules/master/country_mas/query.ts:124",{"_index":2986,"title":{},"body":{"classes/Query-7.html":{}}}],["src/modules/master/country_mas/query.ts:20",{"_index":2984,"title":{},"body":{"classes/Query-7.html":{}}}],["src/modules/master/country_mas/query.ts:39",{"_index":2985,"title":{},"body":{"classes/Query-7.html":{}}}],["src/modules/master/country_mas/query.ts:56",{"_index":2987,"title":{},"body":{"classes/Query-7.html":{}}}],["src/modules/master/country_mas/query.ts:76",{"_index":2988,"title":{},"body":{"classes/Query-7.html":{}}}],["src/modules/master/document_groups/document_grp.controller.ts",{"_index":1720,"title":{},"body":{"controllers/DocumentGroupController.html":{},"coverage.html":{}}}],["src/modules/master/document_groups/document_grp.controller.ts:104",{"_index":1727,"title":{},"body":{"controllers/DocumentGroupController.html":{}}}],["src/modules/master/document_groups/document_grp.controller.ts:121",{"_index":1725,"title":{},"body":{"controllers/DocumentGroupController.html":{}}}],["src/modules/master/document_groups/document_grp.controller.ts:51",{"_index":1724,"title":{},"body":{"controllers/DocumentGroupController.html":{}}}],["src/modules/master/document_groups/document_grp.controller.ts:69",{"_index":1728,"title":{},"body":{"controllers/DocumentGroupController.html":{}}}],["src/modules/master/document_groups/document_grp.controller.ts:85",{"_index":1726,"title":{},"body":{"controllers/DocumentGroupController.html":{}}}],["src/modules/master/document_groups/document_grp.module.ts",{"_index":1748,"title":{},"body":{"modules/DocumentGroupModule.html":{}}}],["src/modules/master/document_groups/document_grp.service.ts",{"_index":1750,"title":{},"body":{"injectables/DocumentGroupService.html":{},"coverage.html":{}}}],["src/modules/master/document_groups/document_grp.service.ts:107",{"_index":1754,"title":{},"body":{"injectables/DocumentGroupService.html":{}}}],["src/modules/master/document_groups/document_grp.service.ts:137",{"_index":1755,"title":{},"body":{"injectables/DocumentGroupService.html":{}}}],["src/modules/master/document_groups/document_grp.service.ts:151",{"_index":1753,"title":{},"body":{"injectables/DocumentGroupService.html":{}}}],["src/modules/master/document_groups/document_grp.service.ts:27",{"_index":1751,"title":{},"body":{"injectables/DocumentGroupService.html":{}}}],["src/modules/master/document_groups/document_grp.service.ts:44",{"_index":1752,"title":{},"body":{"injectables/DocumentGroupService.html":{}}}],["src/modules/master/document_groups/document_grp.service.ts:74",{"_index":1756,"title":{},"body":{"injectables/DocumentGroupService.html":{}}}],["src/modules/master/document_groups/dto/create.dto.ts",{"_index":1740,"title":{},"body":{"classes/DocumentGroupDto.html":{},"coverage.html":{}}}],["src/modules/master/document_groups/dto/create.dto.ts:32",{"_index":1742,"title":{},"body":{"classes/DocumentGroupDto.html":{}}}],["src/modules/master/document_groups/dto/create.dto.ts:46",{"_index":1743,"title":{},"body":{"classes/DocumentGroupDto.html":{}}}],["src/modules/master/document_groups/dto/create.dto.ts:53",{"_index":1741,"title":{},"body":{"classes/DocumentGroupDto.html":{}}}],["src/modules/master/document_groups/dto/create.dto.ts:56",{"_index":1744,"title":{},"body":{"classes/DocumentGroupDto.html":{}}}],["src/modules/master/document_groups/dto/document_grp.dto.ts",{"_index":1713,"title":{},"body":{"classes/DocumentGroup.html":{},"coverage.html":{}}}],["src/modules/master/document_groups/dto/document_grp.dto.ts:22",{"_index":1715,"title":{},"body":{"classes/DocumentGroup.html":{}}}],["src/modules/master/document_groups/dto/document_grp.dto.ts:32",{"_index":1717,"title":{},"body":{"classes/DocumentGroup.html":{}}}],["src/modules/master/document_groups/dto/document_grp.dto.ts:42",{"_index":1718,"title":{},"body":{"classes/DocumentGroup.html":{}}}],["src/modules/master/document_groups/dto/update.dto.ts",{"_index":3152,"title":{},"body":{"classes/UpdateDto-7.html":{},"coverage.html":{}}}],["src/modules/master/document_groups/query.ts",{"_index":2999,"title":{},"body":{"classes/Query-9.html":{},"coverage.html":{}}}],["src/modules/master/document_groups/query.ts:103",{"_index":3000,"title":{},"body":{"classes/Query-9.html":{}}}],["src/modules/master/document_groups/query.ts:121",{"_index":3003,"title":{},"body":{"classes/Query-9.html":{}}}],["src/modules/master/document_groups/query.ts:19",{"_index":3001,"title":{},"body":{"classes/Query-9.html":{}}}],["src/modules/master/document_groups/query.ts:37",{"_index":3002,"title":{},"body":{"classes/Query-9.html":{}}}],["src/modules/master/document_groups/query.ts:55",{"_index":3004,"title":{},"body":{"classes/Query-9.html":{}}}],["src/modules/master/document_groups/query.ts:77",{"_index":3005,"title":{},"body":{"classes/Query-9.html":{}}}],["src/modules/master/documents/documents.controller.ts",{"_index":1677,"title":{},"body":{"controllers/DocumentController.html":{},"coverage.html":{}}}],["src/modules/master/documents/documents.controller.ts:102",{"_index":1686,"title":{},"body":{"controllers/DocumentController.html":{}}}],["src/modules/master/documents/documents.controller.ts:119",{"_index":1683,"title":{},"body":{"controllers/DocumentController.html":{}}}],["src/modules/master/documents/documents.controller.ts:51",{"_index":1681,"title":{},"body":{"controllers/DocumentController.html":{}}}],["src/modules/master/documents/documents.controller.ts:69",{"_index":1688,"title":{},"body":{"controllers/DocumentController.html":{}}}],["src/modules/master/documents/documents.controller.ts:85",{"_index":1684,"title":{},"body":{"controllers/DocumentController.html":{}}}],["src/modules/master/documents/documents.module.ts",{"_index":1763,"title":{},"body":{"modules/DocumentModule.html":{}}}],["src/modules/master/documents/documents.service.ts",{"_index":1765,"title":{},"body":{"injectables/DocumentService.html":{},"coverage.html":{}}}],["src/modules/master/documents/documents.service.ts:102",{"_index":1769,"title":{},"body":{"injectables/DocumentService.html":{}}}],["src/modules/master/documents/documents.service.ts:137",{"_index":1770,"title":{},"body":{"injectables/DocumentService.html":{}}}],["src/modules/master/documents/documents.service.ts:151",{"_index":1768,"title":{},"body":{"injectables/DocumentService.html":{}}}],["src/modules/master/documents/documents.service.ts:27",{"_index":1766,"title":{},"body":{"injectables/DocumentService.html":{}}}],["src/modules/master/documents/documents.service.ts:44",{"_index":1767,"title":{},"body":{"injectables/DocumentService.html":{}}}],["src/modules/master/documents/documents.service.ts:71",{"_index":1771,"title":{},"body":{"injectables/DocumentService.html":{}}}],["src/modules/master/documents/dto/create.dto.ts",{"_index":1706,"title":{},"body":{"classes/DocumentDto.html":{},"coverage.html":{}}}],["src/modules/master/documents/dto/create.dto.ts:31",{"_index":1708,"title":{},"body":{"classes/DocumentDto.html":{}}}],["src/modules/master/documents/dto/create.dto.ts:46",{"_index":1710,"title":{},"body":{"classes/DocumentDto.html":{}}}],["src/modules/master/documents/dto/create.dto.ts:60",{"_index":1711,"title":{},"body":{"classes/DocumentDto.html":{}}}],["src/modules/master/documents/dto/create.dto.ts:67",{"_index":1707,"title":{},"body":{"classes/DocumentDto.html":{}}}],["src/modules/master/documents/dto/create.dto.ts:70",{"_index":1712,"title":{},"body":{"classes/DocumentDto.html":{}}}],["src/modules/master/documents/dto/documents.dto.ts",{"_index":1662,"title":{},"body":{"classes/Document.html":{},"coverage.html":{}}}],["src/modules/master/documents/dto/documents.dto.ts:22",{"_index":1672,"title":{},"body":{"classes/Document.html":{}}}],["src/modules/master/documents/dto/documents.dto.ts:32",{"_index":1673,"title":{},"body":{"classes/Document.html":{}}}],["src/modules/master/documents/dto/documents.dto.ts:42",{"_index":1674,"title":{},"body":{"classes/Document.html":{}}}],["src/modules/master/documents/dto/documents.dto.ts:52",{"_index":1675,"title":{},"body":{"classes/Document.html":{}}}],["src/modules/master/documents/dto/update.dto.ts",{"_index":3150,"title":{},"body":{"classes/UpdateDto-6.html":{},"coverage.html":{}}}],["src/modules/master/documents/query.ts",{"_index":2990,"title":{},"body":{"classes/Query-8.html":{},"coverage.html":{}}}],["src/modules/master/documents/query.ts:108",{"_index":2991,"title":{},"body":{"classes/Query-8.html":{}}}],["src/modules/master/documents/query.ts:125",{"_index":2994,"title":{},"body":{"classes/Query-8.html":{}}}],["src/modules/master/documents/query.ts:19",{"_index":2992,"title":{},"body":{"classes/Query-8.html":{}}}],["src/modules/master/documents/query.ts:37",{"_index":2993,"title":{},"body":{"classes/Query-8.html":{}}}],["src/modules/master/documents/query.ts:55",{"_index":2995,"title":{},"body":{"classes/Query-8.html":{}}}],["src/modules/master/documents/query.ts:76",{"_index":2996,"title":{},"body":{"classes/Query-8.html":{}}}],["src/modules/master/state_mas/dto/create.dto.ts",{"_index":3110,"title":{},"body":{"classes/StateDto.html":{},"coverage.html":{}}}],["src/modules/master/state_mas/dto/create.dto.ts:34",{"_index":3114,"title":{},"body":{"classes/StateDto.html":{}}}],["src/modules/master/state_mas/dto/create.dto.ts:48",{"_index":3111,"title":{},"body":{"classes/StateDto.html":{}}}],["src/modules/master/state_mas/dto/create.dto.ts:62",{"_index":3115,"title":{},"body":{"classes/StateDto.html":{}}}],["src/modules/master/state_mas/dto/create.dto.ts:69",{"_index":3112,"title":{},"body":{"classes/StateDto.html":{}}}],["src/modules/master/state_mas/dto/create.dto.ts:72",{"_index":3116,"title":{},"body":{"classes/StateDto.html":{}}}],["src/modules/master/state_mas/dto/state.dto.ts",{"_index":3073,"title":{},"body":{"classes/State.html":{},"coverage.html":{}}}],["src/modules/master/state_mas/dto/state.dto.ts:24",{"_index":3076,"title":{},"body":{"classes/State.html":{}}}],["src/modules/master/state_mas/dto/state.dto.ts:35",{"_index":3078,"title":{},"body":{"classes/State.html":{}}}],["src/modules/master/state_mas/dto/state.dto.ts:46",{"_index":3075,"title":{},"body":{"classes/State.html":{}}}],["src/modules/master/state_mas/dto/state.dto.ts:57",{"_index":3079,"title":{},"body":{"classes/State.html":{}}}],["src/modules/master/state_mas/dto/update.dto.ts",{"_index":3154,"title":{},"body":{"classes/UpdateDto-8.html":{},"coverage.html":{}}}],["src/modules/master/state_mas/query.ts",{"_index":2843,"title":{},"body":{"classes/Query-10.html":{},"coverage.html":{}}}],["src/modules/master/state_mas/query.ts:102",{"_index":2848,"title":{},"body":{"classes/Query-10.html":{}}}],["src/modules/master/state_mas/query.ts:118",{"_index":2851,"title":{},"body":{"classes/Query-10.html":{}}}],["src/modules/master/state_mas/query.ts:19",{"_index":2849,"title":{},"body":{"classes/Query-10.html":{}}}],["src/modules/master/state_mas/query.ts:37",{"_index":2850,"title":{},"body":{"classes/Query-10.html":{}}}],["src/modules/master/state_mas/query.ts:54",{"_index":2852,"title":{},"body":{"classes/Query-10.html":{}}}],["src/modules/master/state_mas/query.ts:74",{"_index":2853,"title":{},"body":{"classes/Query-10.html":{}}}],["src/modules/master/state_mas/state.controller.ts",{"_index":3081,"title":{},"body":{"controllers/StateController.html":{},"coverage.html":{}}}],["src/modules/master/state_mas/state.controller.ts:103",{"_index":3090,"title":{},"body":{"controllers/StateController.html":{}}}],["src/modules/master/state_mas/state.controller.ts:120",{"_index":3087,"title":{},"body":{"controllers/StateController.html":{}}}],["src/modules/master/state_mas/state.controller.ts:52",{"_index":3085,"title":{},"body":{"controllers/StateController.html":{}}}],["src/modules/master/state_mas/state.controller.ts:70",{"_index":3092,"title":{},"body":{"controllers/StateController.html":{}}}],["src/modules/master/state_mas/state.controller.ts:86",{"_index":3088,"title":{},"body":{"controllers/StateController.html":{}}}],["src/modules/master/state_mas/state.module.ts",{"_index":3121,"title":{},"body":{"modules/StateModule.html":{}}}],["src/modules/master/state_mas/state.service.ts",{"_index":3123,"title":{},"body":{"injectables/StateService.html":{},"coverage.html":{}}}],["src/modules/master/state_mas/state.service.ts:102",{"_index":3127,"title":{},"body":{"injectables/StateService.html":{}}}],["src/modules/master/state_mas/state.service.ts:132",{"_index":3128,"title":{},"body":{"injectables/StateService.html":{}}}],["src/modules/master/state_mas/state.service.ts:146",{"_index":3126,"title":{},"body":{"injectables/StateService.html":{}}}],["src/modules/master/state_mas/state.service.ts:27",{"_index":3124,"title":{},"body":{"injectables/StateService.html":{}}}],["src/modules/master/state_mas/state.service.ts:44",{"_index":3125,"title":{},"body":{"injectables/StateService.html":{}}}],["src/modules/master/state_mas/state.service.ts:71",{"_index":3129,"title":{},"body":{"injectables/StateService.html":{}}}],["src/providers/dynamic",{"_index":1777,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{},"coverage.html":{}}}],["src/providers/file",{"_index":3340,"title":{},"body":{"coverage.html":{}}}],["src/swagger.ts",{"_index":3347,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/deep",{"_index":3349,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/dto/pagination",{"_index":2653,"title":{},"body":{"classes/PaginationResponseDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/dto/pagination.dto.ts",{"_index":2390,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/utils/dto/pagination.dto.ts:119",{"_index":2643,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["src/utils/dto/pagination.dto.ts:141",{"_index":2652,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["src/utils/dto/pagination.dto.ts:160",{"_index":2393,"title":{},"body":{"classes/FilterQueryDto.html":{}}}],["src/utils/dto/pagination.dto.ts:172",{"_index":2395,"title":{},"body":{"classes/FilterQueryDto.html":{}}}],["src/utils/dto/pagination.dto.ts:184",{"_index":2397,"title":{},"body":{"classes/FilterQueryDto.html":{}}}],["src/utils/dto/pagination.dto.ts:214",{"_index":3069,"title":{},"body":{"classes/SortByDto.html":{}}}],["src/utils/dto/pagination.dto.ts:228",{"_index":3067,"title":{},"body":{"classes/SortByDto.html":{}}}],["src/utils/dto/pagination.dto.ts:59",{"_index":2650,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["src/utils/dto/pagination.dto.ts:77",{"_index":2648,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["src/utils/dto/pagination.dto.ts:97",{"_index":2646,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["src/utils/dto/pagination.meta.dto.ts",{"_index":2558,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"coverage.html":{}}}],["src/utils/dto/pagination.meta.dto.ts:101",{"_index":2633,"title":{},"body":{"classes/PaginationMetaDto.html":{}}}],["src/utils/dto/pagination.meta.dto.ts:113",{"_index":2635,"title":{},"body":{"classes/PaginationMetaDto.html":{}}}],["src/utils/dto/pagination.meta.dto.ts:125",{"_index":2632,"title":{},"body":{"classes/PaginationMetaDto.html":{}}}],["src/utils/dto/pagination.meta.dto.ts:137",{"_index":2629,"title":{},"body":{"classes/PaginationMetaDto.html":{}}}],["src/utils/dto/pagination.meta.dto.ts:41",{"_index":2637,"title":{},"body":{"classes/PaginationMetaDto.html":{}}}],["src/utils/dto/pagination.meta.dto.ts:53",{"_index":2631,"title":{},"body":{"classes/PaginationMetaDto.html":{}}}],["src/utils/dto/pagination.meta.dto.ts:65",{"_index":2634,"title":{},"body":{"classes/PaginationMetaDto.html":{}}}],["src/utils/dto/pagination.meta.dto.ts:77",{"_index":2638,"title":{},"body":{"classes/PaginationMetaDto.html":{}}}],["src/utils/dto/pagination.meta.dto.ts:89",{"_index":2636,"title":{},"body":{"classes/PaginationMetaDto.html":{}}}],["src/utils/serializer.interceptor.ts",{"_index":3036,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{},"coverage.html":{}}}],["src/utils/serializer.interceptor.ts:30",{"_index":3051,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["src/utils/transformers/lower",{"_index":3351,"title":{},"body":{"coverage.html":{}}}],["src/utils/transformers/upper",{"_index":3354,"title":{},"body":{"coverage.html":{}}}],["src/utils/types/deep",{"_index":3680,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/utils/types/maybe.type.ts",{"_index":3683,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/utils/types/pagination",{"_index":2614,"title":{},"body":{"interfaces/IPaginationFieldConfig.html":{},"coverage.html":{}}}],["src/utils/validate",{"_index":3355,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["ssl",{"_index":1905,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["sslenabled",{"_index":1961,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["stack",{"_index":485,"title":{},"body":{"controllers/AppController.html":{}}}],["staging",{"_index":1194,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["staging/production",{"_index":3552,"title":{},"body":{"index.html":{}}}],["staging/productiondocker",{"_index":3556,"title":{},"body":{"index.html":{}}}],["staging/productionrunning",{"_index":3558,"title":{},"body":{"index.html":{}}}],["standardize",{"_index":2093,"title":{},"body":{"classes/FileResponseDto-2.html":{}}}],["start",{"_index":1090,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"injectables/PaginationService.html":{},"interfaces/QueryConfig.html":{},"changelog.html":{},"index.html":{}}}],["start.sh",{"_index":3555,"title":{},"body":{"index.html":{}}}],["started",{"_index":3207,"title":{"changelog.html":{},"contributing.html":{},"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["starter",{"_index":3446,"title":{},"body":{"index.html":{},"properties.html":{}}}],["starter.git",{"_index":3513,"title":{},"body":{"index.html":{},"properties.html":{}}}],["starter.git#readme",{"_index":3663,"title":{},"body":{"properties.html":{}}}],["starter.git/issues",{"_index":3664,"title":{},"body":{"properties.html":{}}}],["startindex",{"_index":2573,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{}}}],["startpage",{"_index":2571,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{}}}],["startpage).keys()).map((i",{"_index":2604,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["starts",{"_index":3418,"title":{},"body":{"miscellaneous/functions.html":{}}}],["state",{"_index":386,"title":{"classes/State.html":{}},"body":{"modules/ApiModule.html":{},"classes/BankDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"classes/Query-10.html":{},"classes/State.html":{},"controllers/StateController.html":{},"classes/StateDto.html":{},"modules/StateModule.html":{},"injectables/StateService.html":{},"classes/UpdateDto-8.html":{},"coverage.html":{}}}],["state's",{"_index":3074,"title":{},"body":{"classes/State.html":{}}}],["state.controller",{"_index":3122,"title":{},"body":{"modules/StateModule.html":{}}}],["state.service",{"_index":3094,"title":{},"body":{"controllers/StateController.html":{},"modules/StateModule.html":{}}}],["state_mas",{"_index":838,"title":{},"body":{"injectables/CityService.html":{},"classes/Query-10.html":{},"injectables/StateService.html":{}}}],["state_mas.status=1",{"_index":852,"title":{},"body":{"injectables/CityService.html":{}}}],["state_name",{"_index":878,"title":{},"body":{"injectables/CityService.html":{}}}],["statecontroller",{"_index":3080,"title":{"controllers/StateController.html":{}},"body":{"controllers/StateController.html":{},"modules/StateModule.html":{},"coverage.html":{}}}],["statedto",{"_index":3084,"title":{"classes/StateDto.html":{}},"body":{"controllers/StateController.html":{},"classes/StateDto.html":{},"injectables/StateService.html":{},"classes/UpdateDto-8.html":{},"coverage.html":{}}}],["statements",{"_index":3265,"title":{},"body":{"coverage.html":{}}}],["statemodule",{"_index":345,"title":{"modules/StateModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/StateModule.html":{},"modules.html":{},"overview.html":{}}}],["states",{"_index":3082,"title":{},"body":{"controllers/StateController.html":{},"injectables/StateService.html":{}}}],["states/:id_state",{"_index":3098,"title":{},"body":{"controllers/StateController.html":{}}}],["stateservice",{"_index":3083,"title":{"injectables/StateService.html":{}},"body":{"controllers/StateController.html":{},"modules/StateModule.html":{},"injectables/StateService.html":{},"coverage.html":{},"overview.html":{}}}],["status",{"_index":40,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"controllers/BankController.html":{},"classes/BankDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"controllers/CityController.html":{},"classes/CityDto.html":{},"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"classes/CountryMas.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/Document.html":{},"controllers/DocumentController.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"controllers/DocumentGroupController.html":{},"classes/DocumentGroupDto.html":{},"classes/DynamicQueryBuilder.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/FilterQueryDto.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PaginationQueryDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"classes/SortByDto.html":{},"classes/State.html":{},"controllers/StateController.html":{},"classes/StateDto.html":{}}}],["status=1",{"_index":847,"title":{},"body":{"injectables/CityService.html":{}}}],["status_codes",{"_index":553,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["status_codes[status",{"_index":3034,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["status_codes[statuscode",{"_index":576,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["statuscode",{"_index":318,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/FilesS3PresignedService.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["stop.sh",{"_index":3557,"title":{},"body":{"index.html":{}}}],["storage",{"_index":1970,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileResponseDto-2.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["strategies",{"_index":2676,"title":{},"body":{"injectables/PaginationService.html":{}}}],["stream",{"_index":2159,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["street",{"_index":450,"title":{},"body":{"controllers/AppController.html":{}}}],["strict",{"_index":2061,"title":{},"body":{"classes/FileNotImageException.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/UserNotFoundException.html":{}}}],["string",{"_index":44,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"classes/BankDto.html":{},"injectables/BankService.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"controllers/CityController.html":{},"classes/CityDto.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/Document.html":{},"controllers/DocumentController.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"controllers/DocumentGroupController.html":{},"classes/DocumentGroupDto.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryCountryDto.html":{},"interfaces/QueryOptions.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/State.html":{},"controllers/StateController.html":{},"classes/StateDto.html":{},"injectables/StateService.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{}}}],["string(value).replace(/['\"]+/g",{"_index":2440,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["stringexample",{"_index":2838,"title":{},"body":{"classes/Query-1.html":{}}}],["strings",{"_index":1199,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["string})@apiokresponse({status",{"_index":619,"title":{},"body":{"controllers/BankController.html":{},"controllers/CityController.html":{},"controllers/CountriesController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"controllers/StateController.html":{}}}],["string})@apiokresponse({type",{"_index":627,"title":{},"body":{"controllers/BankController.html":{},"controllers/CityController.html":{},"controllers/CountriesController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"controllers/StateController.html":{}}}],["string})@isoptional()@transform",{"_index":3006,"title":{},"body":{"classes/QueryCountryDto.html":{}}}],["strippedvalue",{"_index":2439,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["structure",{"_index":731,"title":{},"body":{"classes/Banks.html":{},"classes/Cities.html":{},"classes/Country.html":{},"classes/CountryMas.html":{},"classes/Currency.html":{},"classes/Document.html":{},"classes/DocumentGroup.html":{},"classes/FileResponseDto-2.html":{},"classes/State.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UpdateDto-7.html":{},"classes/UpdateDto-8.html":{},"miscellaneous/functions.html":{}}}],["structures",{"_index":3046,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{},"miscellaneous/functions.html":{}}}],["studio",{"_index":3517,"title":{},"body":{"index.html":{}}}],["style",{"_index":2467,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"contributing.html":{},"index.html":{}}}],["subject",{"_index":3627,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":3620,"title":{},"body":{"license.html":{}}}],["submitting",{"_index":3260,"title":{},"body":{"contributing.html":{}}}],["substantial",{"_index":3631,"title":{},"body":{"license.html":{}}}],["success",{"_index":1651,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["successful",{"_index":2262,"title":{},"body":{"controllers/FilesS3Controller.html":{}}}],["successfully",{"_index":621,"title":{},"body":{"controllers/BankController.html":{},"controllers/CityController.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"classes/FileResponseDto.html":{},"controllers/StateController.html":{}}}],["such",{"_index":1439,"title":{},"body":{"classes/Country.html":{},"classes/FileResponseDto-1.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/HttpErrorFilter.html":{},"injectables/PaginationService.html":{},"classes/Query-10.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"classes/State.html":{},"index.html":{}}}],["suggesting",{"_index":3241,"title":{},"body":{"contributing.html":{}}}],["summary",{"_index":3577,"title":{},"body":{"index.html":{}}}],["super",{"_index":2781,"title":{},"body":{"injectables/PrismaService.html":{}}}],["super('error.file.not_image",{"_index":2066,"title":{},"body":{"classes/FileNotImageException.html":{}}}],["super('error.user_not_found",{"_index":3165,"title":{},"body":{"classes/UserNotFoundException.html":{}}}],["super(message",{"_index":2065,"title":{},"body":{"classes/FileNotImageException.html":{}}}],["super.catch(exception",{"_index":2746,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["support",{"_index":1197,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"index.html":{},"modules.html":{}}}],["supports",{"_index":2675,"title":{},"body":{"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["surat",{"_index":770,"title":{},"body":{"classes/Cities.html":{},"classes/CityDto.html":{}}}],["svg",{"_index":3655,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":428,"title":{},"body":{"controllers/AppController.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"classes/CountryMas.html":{},"classes/Currency.html":{},"classes/Document.html":{},"classes/DocumentGroup.html":{},"classes/FileResponseDto-1.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["switch",{"_index":2730,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["switching",{"_index":2243,"title":{},"body":{"modules/FilesModule.html":{}}}],["symbol",{"_index":1453,"title":{},"body":{"classes/Country.html":{},"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/Query-3.html":{}}}],["symbol_native",{"_index":1571,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/Query-3.html":{}}}],["synchronize",{"_index":1225,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{}}}],["syntax",{"_index":863,"title":{},"body":{"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/DynamicQueryBuilder.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{}}}],["syntaxgenerator",{"_index":981,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["system",{"_index":1984,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/UserNotFoundException.html":{}}}],["t",{"_index":1008,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"interfaces/QueryConfig.html":{},"classes/SortByDto.html":{},"miscellaneous/typealiases.html":{}}}],["table",{"_index":249,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/DynamicQueryBuilder.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/Query-1.html":{},"classes/Query-3.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{},"coverage.html":{}}}],["table${index",{"_index":1041,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["table/model",{"_index":1006,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["table1",{"_index":1042,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["table2",{"_index":1043,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["tables",{"_index":998,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":3357,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":2260,"title":{},"body":{"controllers/FilesS3Controller.html":{}}}],["tags",{"_index":427,"title":{},"body":{"controllers/AppController.html":{},"controllers/FilesS3Controller.html":{}}}],["takes",{"_index":3421,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tasks",{"_index":2211,"title":{},"body":{"modules/FilesLocalModule.html":{},"injectables/FilesService.html":{}}}],["taskservice",{"_index":2497,"title":{},"body":{"modules/HelperModule.html":{}}}],["teardown",{"_index":2750,"title":{},"body":{"injectables/PrismaService.html":{}}}],["temp_file_upload_url",{"_index":1312,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IUploadFileConfig.html":{}}}],["template",{"_index":2659,"title":{},"body":{"classes/PaginationResponseDto.html":{}}}],["terminusmodule",{"_index":509,"title":{},"body":{"modules/AppModule.html":{}}}],["test",{"_index":1868,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"contributing.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["test:covdatabase",{"_index":3548,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":3547,"title":{},"body":{"index.html":{}}}],["testing",{"_index":1869,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["tests",{"_index":3259,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["texposedaccountinfo",{"_index":2430,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["text",{"_index":1454,"title":{},"body":{"classes/Country.html":{}}}],["thanks",{"_index":3591,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":2785,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$disconnect",{"_index":2786,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$queryraw`select",{"_index":2805,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$queryrawunsafe(query",{"_index":2788,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$transaction(actions",{"_index":2804,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this._validationfilter(validationerrors",{"_index":568,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["this.allowedkeys",{"_index":1010,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["this.allowedkeys.join",{"_index":1012,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["this.bankservice.create(createdto",{"_index":648,"title":{},"body":{"controllers/BankController.html":{}}}],["this.bankservice.delete(id",{"_index":663,"title":{},"body":{"controllers/BankController.html":{}}}],["this.bankservice.findall(query",{"_index":656,"title":{},"body":{"controllers/BankController.html":{}}}],["this.bankservice.findone(id",{"_index":659,"title":{},"body":{"controllers/BankController.html":{}}}],["this.bankservice.update(id",{"_index":653,"title":{},"body":{"controllers/BankController.html":{}}}],["this.cityservice.create(createdto",{"_index":790,"title":{},"body":{"controllers/CityController.html":{}}}],["this.cityservice.delete(id",{"_index":802,"title":{},"body":{"controllers/CityController.html":{}}}],["this.cityservice.findall(query",{"_index":796,"title":{},"body":{"controllers/CityController.html":{}}}],["this.cityservice.findone(id",{"_index":799,"title":{},"body":{"controllers/CityController.html":{}}}],["this.cityservice.update(id",{"_index":794,"title":{},"body":{"controllers/CityController.html":{}}}],["this.commonquery",{"_index":831,"title":{},"body":{"injectables/CityService.html":{}}}],["this.commonquery.findwithdynamicjoin1",{"_index":880,"title":{},"body":{"injectables/CityService.html":{}}}],["this.commonquery.findwithdynamicjoin3",{"_index":837,"title":{},"body":{"injectables/CityService.html":{}}}],["this.configservice.get('app.apiprefix",{"_index":2229,"title":{},"body":{"injectables/FilesLocalService.html":{},"injectables/HomeService.html":{}}}],["this.configservice.get('app.appprefix",{"_index":2518,"title":{},"body":{"injectables/HomeService.html":{}}}],["this.configservice.get('app.description",{"_index":2517,"title":{},"body":{"injectables/HomeService.html":{}}}],["this.configservice.get('app.name",{"_index":2516,"title":{},"body":{"injectables/HomeService.html":{}}}],["this.configservice.get('file.maxfilesize",{"_index":2354,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["this.configservice.getorthrow('file.awsdefaults3bucket",{"_index":2358,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["this.countriesservice.create(createdto",{"_index":1363,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CountryController.html":{}}}],["this.countriesservice.delete(id",{"_index":1371,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CountryController.html":{}}}],["this.countriesservice.findall(paginationquery",{"_index":1408,"title":{},"body":{"controllers/CountriesController.html":{}}}],["this.countriesservice.findall(query",{"_index":1359,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CountryController.html":{}}}],["this.countriesservice.findmanywithpagination",{"_index":1390,"title":{},"body":{"controllers/CountriesController.html":{}}}],["this.countriesservice.update(id",{"_index":1367,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CountryController.html":{}}}],["this.create",{"_index":2341,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["this.createquery",{"_index":1011,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["this.createquery('insert",{"_index":1017,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["this.createquery('select_with_dynamic_join",{"_index":1038,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["this.createquery('update",{"_index":1027,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["this.currenciesservice.create(createdto",{"_index":1605,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["this.currenciesservice.delete(id",{"_index":1616,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["this.currenciesservice.findall(query",{"_index":1612,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["this.currenciesservice.update(id",{"_index":1610,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["this.currentpage",{"_index":2606,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["this.datasource.query(sqlquery",{"_index":893,"title":{},"body":{"injectables/CityService.html":{}}}],["this.documentgroupservice.create(createdto",{"_index":1733,"title":{},"body":{"controllers/DocumentGroupController.html":{}}}],["this.documentgroupservice.delete(id",{"_index":1739,"title":{},"body":{"controllers/DocumentGroupController.html":{}}}],["this.documentgroupservice.findall(query",{"_index":1737,"title":{},"body":{"controllers/DocumentGroupController.html":{}}}],["this.documentgroupservice.findone(id",{"_index":1738,"title":{},"body":{"controllers/DocumentGroupController.html":{}}}],["this.documentgroupservice.update(id",{"_index":1735,"title":{},"body":{"controllers/DocumentGroupController.html":{}}}],["this.documentservice.create(createdto",{"_index":1693,"title":{},"body":{"controllers/DocumentController.html":{}}}],["this.documentservice.delete(id",{"_index":1705,"title":{},"body":{"controllers/DocumentController.html":{}}}],["this.documentservice.findall(query",{"_index":1699,"title":{},"body":{"controllers/DocumentController.html":{}}}],["this.documentservice.findone(id",{"_index":1702,"title":{},"body":{"controllers/DocumentController.html":{}}}],["this.documentservice.update(id",{"_index":1697,"title":{},"body":{"controllers/DocumentController.html":{}}}],["this.endindex",{"_index":2612,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["this.endpage",{"_index":2610,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["this.filerepository.create",{"_index":2362,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["this.filesservice.create(file",{"_index":2198,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{}}}],["this.filesservice.generatepresignedurl(key",{"_index":2326,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["this.findone(id",{"_index":236,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["this.findone(inserted.insertid",{"_index":229,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["this.findone(updated[0].updatedid",{"_index":244,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["this.formatvalue(conds[key",{"_index":1023,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{}}}],["this.formatvalue(conds[key])).join",{"_index":2858,"title":{},"body":{"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{}}}],["this.formatvalue(data[key",{"_index":2888,"title":{},"body":{"classes/Query-2.html":{}}}],["this.formatvalue(id",{"_index":1016,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/Query-2.html":{},"interfaces/QueryConfig.html":{}}}],["this.formatvalue(updatedata[key",{"_index":2973,"title":{},"body":{"classes/Query-5.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{}}}],["this.formatvalue(value",{"_index":1036,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/Query-10.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"interfaces/QueryConfig.html":{}}}],["this.generatepresignedurl('path/to/file",{"_index":2345,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["this.get(\"database_host",{"_index":1215,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get(\"database_pass",{"_index":1221,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get(\"database_schema",{"_index":1222,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get(\"database_user",{"_index":1219,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('api_key",{"_index":1308,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('api_prefix",{"_index":1241,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('app_name",{"_index":1231,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_access_key_id",{"_index":1325,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_default_s3_bucket",{"_index":1329,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_s3_access_key_id",{"_index":1245,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_s3_bucket_name",{"_index":1249,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_s3_companion_secret",{"_index":1259,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_s3_default_region",{"_index":1251,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_s3_endpoint",{"_index":1255,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_s3_region",{"_index":1331,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_s3_secret_access_key",{"_index":1247,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_s3_server_host",{"_index":1257,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_s3_temp_directory",{"_index":1253,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_secret_access_key",{"_index":1327,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('backend_domain",{"_index":1238,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('file_driver",{"_index":1323,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('file_upload_destination",{"_index":1315,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('from_email",{"_index":1286,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('frontend_domain",{"_index":1236,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('jwt_algorithm",{"_index":1273,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('jwt_audience",{"_index":1277,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('jwt_issuer",{"_index":1275,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('jwt_secret_key",{"_index":1271,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('multiple_file_path",{"_index":1321,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('node_emailer_from_email",{"_index":1301,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('node_emailer_host",{"_index":1293,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('node_emailer_password",{"_index":1299,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('node_emailer_to_email",{"_index":1303,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('node_emailer_user",{"_index":1297,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('node_env",{"_index":1208,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('profile_pic_file_path",{"_index":1319,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('qr_image",{"_index":1264,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('qr_image_path",{"_index":1266,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('qr_image_path_salt",{"_index":1268,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('sender_id",{"_index":1310,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('sendgrid_api_key",{"_index":1284,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('sms_provider_name",{"_index":1306,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('temp_file_upload_url",{"_index":1313,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('to_email",{"_index":1288,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('tus_storage_driver",{"_index":1261,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('welcome_email",{"_index":1290,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.getnumber(\"database_port",{"_index":1217,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.getnumber('jwt_expiration_time",{"_index":1281,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.getnumber('jwt_expires_in_seconds",{"_index":1279,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.getnumber('max_upload_file_size",{"_index":1317,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.getnumber('node_emailer_port",{"_index":1295,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.getnumber('port",{"_index":1239,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.healthcheckservice.check",{"_index":442,"title":{},"body":{"controllers/AppController.html":{}}}],["this.logger.debug",{"_index":471,"title":{},"body":{"controllers/AppController.html":{}}}],["this.logger.debug('foo",{"_index":462,"title":{},"body":{"controllers/AppController.html":{}}}],["this.logger.emergency('i",{"_index":496,"title":{},"body":{"controllers/AppController.html":{}}}],["this.logger.error('i",{"_index":492,"title":{},"body":{"controllers/AppController.html":{}}}],["this.logger.fatal('i",{"_index":494,"title":{},"body":{"controllers/AppController.html":{}}}],["this.logger.info('i",{"_index":481,"title":{},"body":{"controllers/AppController.html":{}}}],["this.logger.log('hello",{"_index":460,"title":{},"body":{"controllers/AppController.html":{}}}],["this.logger.verbose",{"_index":466,"title":{},"body":{"controllers/AppController.html":{}}}],["this.logger.warn('i",{"_index":488,"title":{},"body":{"controllers/AppController.html":{}}}],["this.model",{"_index":1009,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["this.module",{"_index":203,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["this.nodeenv",{"_index":1189,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.pages",{"_index":2613,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["this.pagesize",{"_index":2607,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["this.paginationservice.paginate",{"_index":265,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/CountriesService-1.html":{},"injectables/DocumentGroupService.html":{}}}],["this.paginationservice.paginate(selectquery",{"_index":729,"title":{},"body":{"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["this.prisma.$queryrawunsafe(countquery",{"_index":2686,"title":{},"body":{"injectables/PaginationService.html":{}}}],["this.prisma.$queryrawunsafe(dataquery",{"_index":2685,"title":{},"body":{"injectables/PaginationService.html":{}}}],["this.prisma.$queryrawunsafe(finalcountquery",{"_index":2717,"title":{},"body":{"injectables/PaginationService.html":{}}}],["this.prisma.$transaction",{"_index":2684,"title":{},"body":{"injectables/PaginationService.html":{}}}],["this.prisma.executerawquery(this.query.delete",{"_index":269,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["this.prisma.executerawquery(this.query.findbycode",{"_index":1633,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["this.prisma.executerawquery(this.query.findbycode(id",{"_index":1637,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["this.prisma.executerawquery(this.query.findbyid",{"_index":266,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["this.prisma.executerawquery(this.query.findbyname",{"_index":215,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["this.prisma.executerawquery(this.query.insert",{"_index":222,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["this.prisma.executerawquery(this.query.update",{"_index":242,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["this.prismaservice.ishealthy",{"_index":443,"title":{},"body":{"controllers/AppController.html":{}}}],["this.query.pgbasequery",{"_index":1641,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["this.query.pgbaseselectfield",{"_index":1640,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["this.querybuilder.builddeletequery(deleteoptions",{"_index":2950,"title":{},"body":{"classes/Query-3.html":{}}}],["this.querybuilder.buildinsertquery(insertoptions",{"_index":2946,"title":{},"body":{"classes/Query-3.html":{}}}],["this.querybuilder.buildselectquery(selectoptions",{"_index":2943,"title":{},"body":{"classes/Query-3.html":{}}}],["this.querystatements",{"_index":3204,"title":{},"body":{"classes/UtilsService.html":{}}}],["this.s3",{"_index":2348,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["this.service.appinfo",{"_index":2507,"title":{},"body":{"controllers/HomeController.html":{}}}],["this.startindex",{"_index":2611,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["this.startpage",{"_index":2609,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["this.stateservice.create(createdto",{"_index":3097,"title":{},"body":{"controllers/StateController.html":{}}}],["this.stateservice.delete(id",{"_index":3109,"title":{},"body":{"controllers/StateController.html":{}}}],["this.stateservice.findall(query",{"_index":3103,"title":{},"body":{"controllers/StateController.html":{}}}],["this.stateservice.findone(id",{"_index":3106,"title":{},"body":{"controllers/StateController.html":{}}}],["this.stateservice.update(id",{"_index":3101,"title":{},"body":{"controllers/StateController.html":{}}}],["this.totalitems",{"_index":2605,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["this.totalpages",{"_index":2608,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["this.utilsservice.builddynamicquery",{"_index":262,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["this.utilsservice.builddynamicquery(paginationquery",{"_index":1646,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["this.utilsservice.querystatements",{"_index":1650,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["those",{"_index":3468,"title":{},"body":{"index.html":{}}}],["through",{"_index":129,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CommaSeparated.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"modules/FilesModule.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"injectables/SortBy.html":{},"injectables/StateService.html":{}}}],["throughout",{"_index":2483,"title":{},"body":{"modules/HelperModule.html":{}}}],["throw",{"_index":216,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/FileNotImageException.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/StateService.html":{},"classes/UserNotFoundException.html":{}}}],["thrown",{"_index":296,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/FileNotImageException.html":{},"classes/HttpErrorFilter.html":{},"classes/QueryFailedFilter.html":{},"classes/UserNotFoundException.html":{}}}],["throws",{"_index":205,"title":{},"body":{"injectables/AddressTypeService.html":{},"controllers/AppController.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/StateService.html":{},"miscellaneous/functions.html":{}}}],["time",{"_index":72,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/Country.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{}}}],["timestamp",{"_index":319,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["timestamps",{"_index":1714,"title":{},"body":{"classes/DocumentGroup.html":{}}}],["timezone",{"_index":1444,"title":{},"body":{"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/Query-2.html":{}}}],["timezones.ts",{"_index":3267,"title":{},"body":{"coverage.html":{}}}],["to_email",{"_index":1287,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/ISendGridConfig.html":{}}}],["together",{"_index":704,"title":{},"body":{"modules/BankModule.html":{},"modules/CityModule.html":{},"modules/CountriesModule.html":{},"modules/CountryMasModule.html":{},"modules/CurrenciesModule.html":{},"modules/DocumentGroupModule.html":{},"modules/DocumentModule.html":{},"modules/StateModule.html":{}}}],["tolowercase",{"_index":2298,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["tonumber",{"_index":2404,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["tool/linter",{"_index":3256,"title":{},"body":{"contributing.html":{}}}],["tools",{"_index":3479,"title":{},"body":{"index.html":{}}}],["toplainonly",{"_index":87,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"classes/CountryDto.html":{},"classes/CreateCountryDto.html":{},"classes/Currency.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/FileType.html":{},"classes/StateDto.html":{}}}],["tort",{"_index":3651,"title":{},"body":{"license.html":{}}}],["total",{"_index":2435,"title":{},"body":{"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/SortByDto.html":{}}}],["total[0",{"_index":2689,"title":{},"body":{"injectables/PaginationService.html":{}}}],["total[0].count",{"_index":2718,"title":{},"body":{"injectables/PaginationService.html":{}}}],["totalitems",{"_index":2560,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{}}}],["totalpages",{"_index":2569,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{}}}],["trace",{"_index":486,"title":{},"body":{"controllers/AppController.html":{}}}],["transaction",{"_index":2768,"title":{},"body":{"injectables/PrismaService.html":{}}}],["transactional",{"_index":2770,"title":{},"body":{"injectables/PrismaService.html":{}}}],["transactions",{"_index":2753,"title":{},"body":{"injectables/PrismaService.html":{}}}],["transfer",{"_index":11,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"classes/Country.html":{},"classes/CountryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileUploadDto.html":{},"classes/State.html":{},"classes/StateDto.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UpdateDto-7.html":{},"classes/UpdateDto-8.html":{}}}],["transform",{"_index":1560,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/FileType.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"miscellaneous/functions.html":{}}}],["transform(uppercasetransformer",{"_index":1564,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{}}}],["transform(uppercasetransformer)@isdefined()@isnotempty()@isstring()@maxlength(2)@apiproperty({type",{"_index":1552,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["transform(uppercasetransformer)@isdefined()@isnotempty()@isstring()@maxlength(3)@apiproperty({type",{"_index":1572,"title":{},"body":{"classes/CreateDto.html":{}}}],["transform(uppercasetransformer)@isnotempty()@isstring()@maxlength(3)@apiproperty({type",{"_index":1554,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["transformation",{"_index":22,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"classes/CountryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"classes/StateDto.html":{}}}],["transformed",{"_index":764,"title":{},"body":{"classes/Cities.html":{},"classes/CountryMas.html":{},"classes/Currency.html":{},"classes/Document.html":{},"classes/DocumentGroup.html":{}}}],["transformer",{"_index":33,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"classes/CountryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/FileType.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/StateDto.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["transforming",{"_index":34,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"classes/CountryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/FileType.html":{},"classes/StateDto.html":{},"miscellaneous/functions.html":{}}}],["transforms",{"_index":2111,"title":{},"body":{"classes/FileType.html":{},"miscellaneous/functions.html":{}}}],["true",{"_index":55,"title":{},"body":{"classes/AddresTypeDto.html":{},"modules/AppModule.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"classes/CountryDto.html":{},"classes/CreateCountryDto.html":{},"classes/Currency.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileType.html":{},"injectables/FilesLocalService.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"injectables/HomeService.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PrismaService.html":{},"classes/QueryCountryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/StateDto.html":{}}}],["true})@isnotempty()@isstring",{"_index":2392,"title":{},"body":{"classes/FilterQueryDto.html":{}}}],["true})@type(undefined",{"_index":2642,"title":{},"body":{"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{}}}],["try",{"_index":578,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/QueryFailedFilter.html":{}}}],["tus_storage_driver",{"_index":1260,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IAwsConfig.html":{}}}],["two",{"_index":3437,"title":{},"body":{"miscellaneous/functions.html":{}}}],["type",{"_index":42,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/BankController.html":{},"classes/BankDto.html":{},"injectables/BankService.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"controllers/CityController.html":{},"classes/CityDto.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/Document.html":{},"controllers/DocumentController.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"controllers/DocumentGroupController.html":{},"classes/DocumentGroupDto.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/State.html":{},"controllers/StateController.html":{},"classes/StateDto.html":{},"injectables/StateService.html":{},"classes/UpdateDto-2.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["type.tolowercase",{"_index":1055,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["type/database",{"_index":1940,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["typealiases",{"_index":3666,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":859,"title":{},"body":{"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/DynamicQueryBuilder.html":{},"injectables/PrismaService.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{}}}],["typeorm",{"_index":891,"title":{},"body":{"injectables/CityService.html":{},"classes/QueryFailedFilter.html":{}}}],["typeormconfig",{"_index":1210,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["typeormmoduleoptions",{"_index":1211,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["types",{"_index":1061,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/SortByDto.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UpdateDto-7.html":{},"classes/UpdateDto-8.html":{},"classes/UtilsService.html":{},"miscellaneous/enumerations.html":{}}}],["types,@typescript",{"_index":2460,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["typescript",{"_index":925,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/FileNotImageException.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"classes/HttpErrorFilter.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/Query-1.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"index.html":{},"properties.html":{}}}],["tz",{"_index":2909,"title":{},"body":{"classes/Query-2.html":{}}}],["tz.abbr",{"_index":2904,"title":{},"body":{"classes/Query-2.html":{}}}],["tz.id_timezone=c.id_timezone",{"_index":2910,"title":{},"body":{"classes/Query-2.html":{}}}],["tz.offset",{"_index":2902,"title":{},"body":{"classes/Query-2.html":{}}}],["tz.offset_in_minutes",{"_index":2903,"title":{},"body":{"classes/Query-2.html":{}}}],["tz.text",{"_index":2905,"title":{},"body":{"classes/Query-2.html":{}}}],["tz.value",{"_index":2901,"title":{},"body":{"classes/Query-2.html":{}}}],["ui",{"_index":3440,"title":{},"body":{"miscellaneous/functions.html":{}}}],["unauthorized",{"_index":1914,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["undefined",{"_index":620,"title":{},"body":{"controllers/BankController.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"controllers/StateController.html":{},"classes/UtilsService.html":{},"miscellaneous/typealiases.html":{}}}],["undefined})@apifile()@useinterceptors(undefined",{"_index":2165,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["undefined})@isenum(paginationtype)@isoptional",{"_index":2649,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["under",{"_index":2259,"title":{},"body":{"controllers/FilesS3Controller.html":{}}}],["unique",{"_index":57,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"classes/BankDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"classes/Country.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{},"classes/Currency.html":{},"classes/Document.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"classes/DocumentGroupDto.html":{},"classes/FileType.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"classes/State.html":{},"classes/StateDto.html":{}}}],["unit",{"_index":3545,"title":{},"body":{"index.html":{}}}],["united",{"_index":2448,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["unknown",{"_index":308,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/FilesS3PresignedController.html":{}}}],["unnamed",{"_index":3348,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["unprocessableentityexception",{"_index":2224,"title":{},"body":{"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{}}}],["unsupported",{"_index":2349,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["unused",{"_index":927,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{},"classes/UtilsService.html":{}}}],["up",{"_index":354,"title":{},"body":{"modules/ApiModule.html":{},"controllers/AppController.html":{},"classes/CreateDto.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/PrismaService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["upadetid",{"_index":2889,"title":{},"body":{"classes/Query-2.html":{}}}],["update",{"_index":73,"title":{},"body":{"classes/AddresTypeDto.html":{},"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UpdateDto-7.html":{},"classes/UpdateDto-8.html":{},"index.html":{}}}],["update(id",{"_index":180,"title":{},"body":{"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{}}}],["update1(id",{"_index":2883,"title":{},"body":{"classes/Query-2.html":{}}}],["updatebyid/:id_country",{"_index":1364,"title":{},"body":{"controllers/CountriesController.html":{}}}],["updated",{"_index":185,"title":{},"body":{"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{},"changelog.html":{}}}],["updated[0].updatedid",{"_index":243,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["updated[0]?.updatedid",{"_index":1430,"title":{},"body":{"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{}}}],["updated_at",{"_index":41,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"classes/CountryDto.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/Query-10.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"classes/StateDto.html":{}}}],["updatedata",{"_index":1031,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{}}}],["updatedid",{"_index":2865,"title":{},"body":{"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{}}}],["updatedto",{"_index":181,"title":{"classes/UpdateDto.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UpdateDto-7.html":{},"classes/UpdateDto-8.html":{}},"body":{"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{},"classes/UpdateDto.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UpdateDto-7.html":{},"classes/UpdateDto-8.html":{},"coverage.html":{}}}],["updatedto.id_address_type",{"_index":237,"title":{},"body":{"injectables/AddressTypeService.html":{}}}],["updatedto.id_bank",{"_index":721,"title":{},"body":{"injectables/BankService.html":{}}}],["updatedto.id_city",{"_index":835,"title":{},"body":{"injectables/CityService.html":{}}}],["updatedto.id_country",{"_index":1429,"title":{},"body":{"injectables/CountriesService-1.html":{}}}],["updatedto.id_document",{"_index":1772,"title":{},"body":{"injectables/DocumentService.html":{}}}],["updatedto.id_document_group",{"_index":1757,"title":{},"body":{"injectables/DocumentGroupService.html":{}}}],["updatedto.id_state",{"_index":3130,"title":{},"body":{"injectables/StateService.html":{}}}],["updatedto.updated_at",{"_index":238,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["updates",{"_index":718,"title":{},"body":{"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UpdateDto-7.html":{},"classes/UpdateDto-8.html":{}}}],["updating",{"_index":16,"title":{},"body":{"classes/AddresTypeDto.html":{},"injectables/AddressTypeService.html":{},"classes/BankDto.html":{},"injectables/BankService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/Query-10.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"injectables/StateService.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UpdateDto-7.html":{},"classes/UpdateDto-8.html":{}}}],["upload",{"_index":2091,"title":{},"body":{"classes/FileResponseDto-2.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{}}}],["upload.service",{"_index":2182,"title":{},"body":{"controllers/FilesLocalController.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["upload.service.ts",{"_index":3341,"title":{},"body":{"coverage.html":{}}}],["uploaded",{"_index":2062,"title":{},"body":{"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3Service.html":{}}}],["uploadedfile",{"_index":2167,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["uploader",{"_index":2241,"title":{},"body":{"modules/FilesModule.html":{}}}],["uploadfile",{"_index":2153,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{}}}],["uploadfile(@body",{"_index":2323,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["uploadfile(@uploadedfile",{"_index":2197,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["uploadfile(file",{"_index":2160,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{}}}],["uploadfileconfig",{"_index":1311,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["uploading",{"_index":2098,"title":{},"body":{"classes/FileResponseDto-2.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesService.html":{}}}],["uploads",{"_index":1987,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileNotImageException.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["uploadsignedurl",{"_index":2094,"title":{},"body":{"classes/FileResponseDto-2.html":{},"injectables/FilesS3PresignedService.html":{}}}],["uppercase",{"_index":1516,"title":{},"body":{"classes/CountryDto.html":{},"classes/CreateDto.html":{}}}],["uppercasetransformer",{"_index":1561,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"coverage.html":{}}}],["url",{"_index":1923,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"classes/HttpErrorFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{}}}],["urls",{"_index":2305,"title":{},"body":{"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["use",{"_index":882,"title":{},"body":{"injectables/CityService.html":{},"classes/FileNotImageException.html":{},"modules/FilesLocalModule.html":{},"modules/FilesS3PresignedModule.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationQueryDto.html":{},"classes/Query-10.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"classes/SortByDto.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"contributing.html":{},"index.html":{},"license.html":{}}}],["useclass",{"_index":391,"title":{},"body":{"modules/ApiModule.html":{},"classes/HttpErrorFilter.html":{}}}],["used",{"_index":14,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/BankDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/Country.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/Document.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"classes/DocumentGroupDto.html":{},"classes/DynamicQueryBuilder.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"controllers/HomeController.html":{},"injectables/HomeService.html":{},"interfaces/IAppConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"injectables/PrismaService.html":{},"classes/Query-1.html":{},"interfaces/QueryConfig.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"classes/State.html":{},"classes/StateDto.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UpdateDto-7.html":{},"classes/UpdateDto-8.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["useexisting",{"_index":535,"title":{},"body":{"modules/AppModule.html":{}}}],["usefactory",{"_index":2288,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["useful",{"_index":3684,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["useinterceptors",{"_index":2168,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["useinterceptors(fileinterceptor('file",{"_index":2266,"title":{},"body":{"controllers/FilesS3Controller.html":{}}}],["user",{"_index":444,"title":{},"body":{"controllers/AppController.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/UserNotFoundException.html":{},"index.html":{}}}],["usermodule",{"_index":2833,"title":{},"body":{"classes/Query-1.html":{}}}],["username",{"_index":1218,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{}}}],["usernotfoundexception",{"_index":3156,"title":{"classes/UserNotFoundException.html":{}},"body":{"classes/UserNotFoundException.html":{},"coverage.html":{}}}],["usernotfoundexception('specific",{"_index":3160,"title":{},"body":{"classes/UserNotFoundException.html":{}}}],["users",{"_index":2834,"title":{},"body":{"classes/Query-1.html":{}}}],["uses",{"_index":30,"title":{},"body":{"classes/AddresTypeDto.html":{},"controllers/AppController.html":{},"controllers/BankController.html":{},"classes/BankDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"controllers/CountryController.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"classes/Currency.html":{},"classes/Document.html":{},"controllers/DocumentController.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"controllers/DocumentGroupController.html":{},"classes/DocumentGroupDto.html":{},"classes/FileType.html":{},"controllers/HomeController.html":{},"classes/Query-10.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"injectables/ResolvePromisesInterceptor.html":{},"controllers/StateController.html":{},"classes/StateDto.html":{},"miscellaneous/functions.html":{}}}],["using",{"_index":133,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileType.html":{},"modules/FilesLocalModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/HomeService.html":{},"classes/Query-2.html":{},"interfaces/QueryConfig.html":{},"injectables/StateService.html":{},"index.html":{}}}],["utc",{"_index":1485,"title":{},"body":{"classes/Country.html":{}}}],["utility",{"_index":1417,"title":{},"body":{"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"modules/HelperModule.html":{},"classes/Query.html":{},"classes/UtilsService.html":{},"miscellaneous/typealiases.html":{}}}],["utilize",{"_index":2215,"title":{},"body":{"modules/FilesLocalModule.html":{}}}],["utilizes",{"_index":2671,"title":{},"body":{"injectables/PaginationService.html":{}}}],["utils/dto/infinity",{"_index":1375,"title":{},"body":{"controllers/CountriesController.html":{}}}],["utils/dto/pagination",{"_index":639,"title":{},"body":{"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/PaginationService.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{}}}],["utils/dto/pagination.dto",{"_index":640,"title":{},"body":{"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"injectables/PaginationService.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{},"classes/UtilsService.html":{}}}],["utils/dto/pagination.meta.dto",{"_index":2658,"title":{},"body":{"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{}}}],["utils/infinity",{"_index":1377,"title":{},"body":{"controllers/CountriesController.html":{}}}],["utils/transformers/upper",{"_index":1591,"title":{},"body":{"classes/CreateDto.html":{}}}],["utils/types/deep",{"_index":1629,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["utils/types/pagination",{"_index":1425,"title":{},"body":{"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["utils/validate",{"_index":1170,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{}}}],["utilsservice",{"_index":147,"title":{"classes/UtilsService.html":{}},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"modules/HelperModule.html":{},"classes/Query-2.html":{},"injectables/StateService.html":{},"classes/UtilsService.html":{},"coverage.html":{},"overview.html":{}}}],["v.replace(/'/g",{"_index":1059,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/UtilsService.html":{}}}],["v1",{"_index":384,"title":{},"body":{"modules/ApiModule.html":{}}}],["v1/${file.path",{"_index":2231,"title":{},"body":{"injectables/FilesLocalService.html":{}}}],["v1/countries?page=1&limit=10",{"_index":1355,"title":{},"body":{"controllers/CountriesController.html":{}}}],["v1/countries?page=1&limit=10this",{"_index":1345,"title":{},"body":{"controllers/CountriesController.html":{}}}],["v1/currencies/:id_currency",{"_index":1613,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["v1/upload",{"_index":2188,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["v1/upload/s3",{"_index":2261,"title":{},"body":{"controllers/FilesS3Controller.html":{}}}],["val.trim",{"_index":2702,"title":{},"body":{"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["valid",{"_index":899,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"miscellaneous/functions.html":{}}}],["validate",{"_index":904,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileUploadDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"miscellaneous/functions.html":{}}}],["validate(isvalidfield",{"_index":2428,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["validate(propertyvalue",{"_index":910,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["validate(sortby",{"_index":2444,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["validate(value",{"_index":941,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["validateconfig",{"_index":1169,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["validateconfig(config",{"_index":3441,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validateconfig(process.env",{"_index":1230,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{}}}],["validated",{"_index":916,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{},"miscellaneous/functions.html":{}}}],["validateif",{"_index":1143,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["validateif((envvalues",{"_index":1182,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["validateif(envvalues",{"_index":1920,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["validatenested",{"_index":2382,"title":{},"body":{"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{}}}],["validatenested()@type(undefined",{"_index":3007,"title":{},"body":{"classes/QueryCountryDto.html":{}}}],["validatenested({each",{"_index":2641,"title":{},"body":{"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{}}}],["validates",{"_index":912,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"injectables/FilesS3Service.html":{},"injectables/SortBy.html":{},"miscellaneous/functions.html":{}}}],["validating",{"_index":3445,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validation",{"_index":20,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"injectables/CommaSeparated.html":{},"classes/CountryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"injectables/SortBy.html":{},"classes/StateDto.html":{},"miscellaneous/functions.html":{}}}],["validationarguments",{"_index":906,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["validationerror",{"_index":545,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["validationerror.children",{"_index":600,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["validationerror.children.length",{"_index":601,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["validationerrors",{"_index":549,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["validationoptions",{"_index":3427,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validator",{"_index":32,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"classes/CountryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/StateDto.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["validatorconstraint",{"_index":919,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["validatorconstraintinterface",{"_index":920,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["validators/filter.validator",{"_index":2438,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["vals",{"_index":1809,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["vals.join",{"_index":1814,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["value",{"_index":914,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/Country.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileType.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryCountryDto.html":{},"interfaces/QueryOptions.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UtilsService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["value.map((v",{"_index":1058,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/UtilsService.html":{}}}],["value.replace(/'/g",{"_index":1060,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/UtilsService.html":{}}}],["value.split",{"_index":947,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["value.tolowercase",{"_index":2028,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["values",{"_index":1021,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/Country.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"injectables/HomeService.html":{},"injectables/PaginationService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{},"classes/State.html":{},"classes/UtilsService.html":{}}}],["values(${values",{"_index":2961,"title":{},"body":{"classes/Query-4.html":{}}}],["values.join",{"_index":1025,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-5.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/UtilsService.html":{}}}],["values1",{"_index":2878,"title":{},"body":{"classes/Query-2.html":{}}}],["var",{"_index":579,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["variable",{"_index":1942,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"coverage.html":{}}}],["variables",{"_index":505,"title":{},"body":{"modules/AppModule.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"index.html":{}}}],["various",{"_index":132,"title":{},"body":{"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"injectables/CountriesService-1.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"modules/FilesModule.html":{},"classes/State.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{},"miscellaneous/functions.html":{}}}],["vars",{"_index":928,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{},"classes/UtilsService.html":{}}}],["verifying",{"_index":407,"title":{},"body":{"controllers/AppController.html":{}}}],["version",{"_index":425,"title":{},"body":{"controllers/AppController.html":{},"classes/EnvironmentVariablesValidator.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"index.html":{},"properties.html":{}}}],["version_neutral",{"_index":416,"title":{},"body":{"controllers/AppController.html":{}}}],["visual",{"_index":3516,"title":{},"body":{"index.html":{}}}],["void",{"_index":304,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"injectables/FilesS3Service.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/QueryFailedFilter.html":{},"miscellaneous/functions.html":{}}}],["vscode",{"_index":3523,"title":{},"body":{"index.html":{}}}],["w",{"_index":955,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["warn",{"_index":487,"title":{},"body":{"controllers/AppController.html":{}}}],["warranties",{"_index":3637,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":3633,"title":{},"body":{"license.html":{}}}],["way",{"_index":3451,"title":{},"body":{"index.html":{}}}],["welcome",{"_index":3227,"title":{},"body":{"contributing.html":{}}}],["welcome_email",{"_index":1289,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/ISendGridConfig.html":{}}}],["went",{"_index":225,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["whereclause",{"_index":1823,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["whereclauses",{"_index":1815,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"injectables/PaginationService.html":{},"interfaces/QueryOptions.html":{}}}],["whereclauses.join",{"_index":1825,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["whereclauses.length",{"_index":1824,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["whereclauses.push",{"_index":1822,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["whether",{"_index":1912,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"license.html":{}}}],["windows",{"_index":3539,"title":{},"body":{"index.html":{}}}],["within",{"_index":2255,"title":{},"body":{"modules/FilesModule.html":{},"modules/HelperModule.html":{},"injectables/ResolvePromisesInterceptor.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["without",{"_index":2484,"title":{},"body":{"modules/HelperModule.html":{},"license.html":{}}}],["working",{"_index":2546,"title":{},"body":{"interfaces/IAppConfig.html":{}}}],["workingdirectory",{"_index":1232,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"interfaces/IAppConfig.html":{}}}],["world",{"_index":491,"title":{},"body":{"controllers/AppController.html":{}}}],["worry",{"_index":3466,"title":{},"body":{"index.html":{}}}],["writable",{"_index":2668,"title":{},"body":{"classes/PaginationResponseDto.html":{}}}],["wrong",{"_index":226,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["x",{"_index":2716,"title":{},"body":{"injectables/PaginationService.html":{},"injectables/PrismaService.html":{}}}],["yarn",{"_index":3263,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["yarnrunning",{"_index":3542,"title":{},"body":{"index.html":{}}}],["yes",{"_index":1117,"title":{},"body":{"classes/CommonQuery5.html":{},"classes/FileNotImageException.html":{},"classes/Query-3.html":{},"classes/UserNotFoundException.html":{},"miscellaneous/functions.html":{}}}],["yet_another_table",{"_index":850,"title":{},"body":{"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["yet_another_table.foreign_key",{"_index":1068,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["you'd",{"_index":3595,"title":{},"body":{"index.html":{}}}],["you're",{"_index":3484,"title":{},"body":{"index.html":{}}}],["yourproject",{"_index":3515,"title":{},"body":{"index.html":{}}}],["yourself",{"_index":3469,"title":{},"body":{"index.html":{}}}],["yu",{"_index":3533,"title":{},"body":{"index.html":{}}}],["yzhang.markdown",{"_index":3532,"title":{},"body":{"index.html":{}}}],["zhang",{"_index":3534,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":346,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/BankModule.html":{},"modules/CityModule.html":{},"modules/CountriesModule.html":{},"modules/CountryMasModule.html":{},"modules/CurrenciesModule.html":{},"modules/DocumentGroupModule.html":{},"modules/DocumentModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{},"modules/StateModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AddresTypeDto.html":{"url":"classes/AddresTypeDto.html","title":"class - AddresTypeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddresTypeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/address_type/dto/create.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the AddresTypeDto class, which represents the data transfer object (DTO)\nused for creating or updating a AddresType record. It includes validation rules and transformation logic\nfor the properties of the AddresType.\nThe AddresTypeDto class ensures that the data provided for creating or updating a AddresType adheres to\nspecified validation rules and formats. It uses decorators from class-validator for validation\nand class-transformer for transforming input data.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                address_type\n                            \n                            \n                                    \n                                    Optional\n                                id_address_type\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                            \n                                    \n                                    Optional\n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        address_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@MaxLength(50)@ApiProperty({type: String, description: 'type of address', example: '\"Office\"', maxLength: 50})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/address_type/dto/create.dto.ts:33\n                        \n                    \n\n            \n                \n                    The type of address (e.g., 'Office') .\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        id_address_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude({toPlainOnly: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/address_type/dto/create.dto.ts:54\n                        \n                    \n\n            \n                \n                    The unique identifier for the address_types.\nThis property is excluded from the plain representation of the object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNumber()@ApiProperty({type: Number, description: 'Status of the address type (optional)', example: 1, default: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/address_type/dto/create.dto.ts:47\n                        \n                    \n\n            \n                \n                    The status of the address type (optional, default is 1 for active).\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude({toPlainOnly: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/address_type/dto/create.dto.ts:61\n                        \n                    \n\n            \n                \n                    The date with time when data Update\nThis property is excluded from the plain representation of the object.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nimport { Exclude } from 'class-transformer';\nimport { IsDefined, IsNotEmpty, IsNumber, IsOptional, IsString, MaxLength } from 'class-validator';\n\n/**\n * @fileoverview\n * This file defines the `AddresTypeDto` class, which represents the data transfer object (DTO)\n * used for creating or updating a AddresType record. It includes validation rules and transformation logic\n * for the properties of the AddresType.\n *\n * @module\n * @description\n * The `AddresTypeDto` class ensures that the data provided for creating or updating a AddresType adheres to\n * specified validation rules and formats. It uses decorators from `class-validator` for validation\n * and `class-transformer` for transforming input data.\n */\nexport class AddresTypeDto {\n    /**\n     * The type of address (e.g., 'Office') .\n     * @example '\"Office\"'\n     */\n    @IsDefined()\n    @IsNotEmpty()\n    @IsString()\n    @MaxLength(50)\n    @ApiProperty({\n        type: String,\n        description: 'type of address',\n        example: '\"Office\"',\n        maxLength: 50,\n    })\n    address_type: string;\n\n    /**\n     * The status of the address type (optional, default is 1 for active).\n     * @example 1\n     */\n    @IsOptional()\n    @IsNumber()\n    @ApiProperty({\n        type: Number,\n        description: 'Status of the address type (optional)',\n        example: 1,\n        default: 1,\n    })\n    status?: number;\n\n    /**\n     * The unique identifier for the address_types.\n     * This property is excluded from the plain representation of the object.\n     */\n    @Exclude({ toPlainOnly: true })\n    id_address_type?: string;\n\n    /**\n     * The date with time when data Update\n     * This property is excluded from the plain representation of the object.\n     */\n    @Exclude({ toPlainOnly: true })\n    updated_at?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddressType.html":{"url":"classes/AddressType.html","title":"class - AddressType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddressType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/address_type/dto/address_type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                address_type\n                            \n                            \n                                    \n                                id_address_type\n                            \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        address_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'Office'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/address_type/dto/address_type.ts:34\n                        \n                    \n\n            \n                \n                    The address_type of the AddressType (e.g., 'Office').\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id_address_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: '1a2b3c4d-5678-90ef-1234-56789abcdef0'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/address_type/dto/address_type.ts:24\n                        \n                    \n\n            \n                \n                    The unique identifier of the AddressType (e.g., '1a2b3c').\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: Number, example: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/address_type/dto/address_type.ts:44\n                        \n                    \n\n            \n                \n                    The status of the AddressType (e.g., 1 for active).\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiResponseProperty } from '@nestjs/swagger';\n\nexport class AddressType {\n    /**\n     * The unique identifier of the AddressType (e.g., '1a2b3c').\n     * @example '1a2b3c4d-5678-90ef-1234-56789abcdef0'\n     */\n    @ApiResponseProperty({\n        type: String,\n        example: '1a2b3c4d-5678-90ef-1234-56789abcdef0',\n    })\n    id_address_type: string;\n\n    /**\n     * The address_type of the AddressType (e.g., 'Office').\n     * @example 'Office'\n     */\n    @ApiResponseProperty({\n        type: String,\n        example: 'Office',\n    })\n    address_type: string;\n\n    /**\n     * The status of the AddressType (e.g., 1 for active).\n     * @example 1\n     */\n    @ApiResponseProperty({\n        type: Number,\n        example: 1,\n    })\n    status: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AddressTypeController.html":{"url":"controllers/AddressTypeController.html","title":"controller - AddressTypeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AddressTypeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/address_type/address_type.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                address_type\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\n/**\n *\n */\n@ApiTags('Address Type')\n@Controller('address_type')\nexport class AddressTypeController {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AddressTypeService.html":{"url":"injectables/AddressTypeService.html","title":"injectable - AddressTypeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AddressTypeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/address_type/address_type.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the AddressTypeService class, which provides methods to manage Address Type data.\nIt includes operations for creating, updating, retrieving, and deleting Addres Type.\nThe AddressTypeService class is responsible for handaling business logic related to AddresType\nIt interacts with the Database through The PrismaService and performs various operations using raw SQL Query.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                MODULE\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, query: Query, paginationService: PaginationService, utilsService: UtilsService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/master/address_type/address_type.service.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        query\n                                                  \n                                                        \n                                                                        Query\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        paginationService\n                                                  \n                                                        \n                                                                        PaginationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        utilsService\n                                                  \n                                                        \n                                                                        UtilsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createDto: createDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/address_type/address_type.service.ts:43\n                        \n                    \n\n\n            \n                \n                        Creates a new Address Type.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createDto\n                                            \n                                                            createDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data required to create a new Address Type.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The created Address Type object.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/address_type/address_type.service.ts:138\n                        \n                    \n\n\n            \n                \n                        delete addresss type by its id.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe id of addres type to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nAn object indicating the deletion result.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(paginationQuery: PaginationQueryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/address_type/address_type.service.ts:94\n                        \n                    \n\n\n            \n                \n                        Retrieves a List of addres type with pagination\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                paginationQuery\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe pagination and filtering data\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \nA paginated list of address Type\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/address_type/address_type.service.ts:125\n                        \n                    \n\n\n            \n                \n                        Retrieves Single Address Type By its Id.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe Id of the Address Type to Retrieves.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe AddressType Object.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateDto: UpdateDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/address_type/address_type.service.ts:66\n                        \n                    \n\n\n            \n                \n                        Update Existing Addres Type By its Id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    -The ID of the adrres_type to be updated.\n\n                                            \n                                        \n                                        \n                                                updateDto\n                                            \n                                                            UpdateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    -Data to Update Address Type\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The updated Address Type object or null if not found\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        MODULE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/master/address_type/address_type.service.ts:27\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\n\nimport { PaginationService } from '@app/common/helper/services/pagination.service';\nimport { PrismaService } from '@app/common/helper/services/prisma.service';\nimport { UtilsService } from '@app/common/helper/services/util.service';\nimport { PaginationResponseDto } from '@app/utils/dto/pagination-response.dto';\nimport { PaginationQueryDto } from '@app/utils/dto/pagination.dto';\nimport { IPaginationFieldConfig } from '@app/utils/types/pagination-options';\n\nimport { AddressType } from './dto/address_type';\nimport { AddresTypeDto as createDto } from './dto/create.dto';\nimport { UpdateDto } from './dto/update.dto';\nimport { Query } from './query';\n\n/**\n * @fileoverview\n * This file defines the `AddressTypeService` class, which provides methods to manage Address Type data.\n * It includes operations for creating, updating, retrieving, and deleting Addres Type.\n *\n * @module\n * @description\n * The `AddressTypeService` class is responsible for handaling business logic related to AddresType\n * It interacts with the Database through The `PrismaService` and performs various operations using raw SQL Query.\n */\n@Injectable()\nexport class AddressTypeService {\n    private readonly MODULE: string;\n    constructor(\n        private readonly prisma: PrismaService,\n        private readonly query: Query,\n        private readonly paginationService: PaginationService,\n        private readonly utilsService: UtilsService\n    ) {\n        this.MODULE = 'address_type';\n    }\n\n    /**\n     * Creates a new Address Type.\n     * @param {createDto} createDto - The data required to create a new Address Type.\n     * @returns {Promise} The created Address Type object.\n     * @throws {HttpException} If a Address Type with the same name already exists or if an error occurs.\n     */\n    async create(createDto: createDto): Promise {\n        //check if Address Type already with same name\n        const find = await this.prisma.executeRawQuery(this.query.findByName(), createDto);\n        if (find) {\n            throw new HttpException({ message: 'Address Type Already Exits' }, HttpStatus.CONFLICT);\n        }\n        //insert new address Type\n        const inserted = await this.prisma.executeRawQuery(this.query.insert(), createDto);\n        if (!inserted && !inserted.insertid) {\n            throw new HttpException(\n                { message: 'Something Went Wrong' },\n                HttpStatus.INTERNAL_SERVER_ERROR\n            );\n        }\n        return await this.findOne(inserted.insertid);\n    }\n    /**\n     *Update Existing Addres Type By its Id\n     * @param {string} id -The ID of the adrres_type to be updated.\n     * @param {UpdateDto} updateDto -Data to Update Address Type\n     * @returns {Promise} The updated Address Type object or null if not found\n     * @throws {HttpException} If the addres_type is not found or if an error occurs\n     */\n    async update(id: string, updateDto: UpdateDto): Promise {\n        if (Object.keys(updateDto).length === 0) {\n            throw new HttpException({ message: 'Nothing to update' }, HttpStatus.BAD_REQUEST);\n        }\n        //check record is exits or not\n        const recordExists = this.findOne(id);\n        if (recordExists) {\n            updateDto.id_address_type = id;\n            updateDto.updated_at = new Date().toISOString();\n            //update adddress Type details\n            const updated = await this.prisma.executeRawQuery(this.query.update(), updateDto);\n            if (!updated && !updated[0].updatedid) {\n                throw new HttpException(\n                    { message: 'Something went wrong!' },\n                    HttpStatus.INTERNAL_SERVER_ERROR\n                );\n            }\n            return await this.findOne(updated[0].updatedid);\n        } else {\n            throw new HttpException({ message: 'Address Type Not found' }, HttpStatus.NOT_FOUND);\n        }\n    }\n\n    /**\n     * Retrieves a List of addres type with pagination\n     * @param {PaginationQueryDto} paginationQuery - The pagination and filtering data\n     * @returns {Promise>} - A paginated list of address Type\n     */\n    async findAll(\n        paginationQuery: PaginationQueryDto\n    ): Promise> {\n        // Define the base query fields and source table\n        const baseQuery = ['ptbl.id_address_type', 'ptbl.address_type', 'ptbl.status'];\n        const fromQuery = 'FROM address_types AS ptbl';\n\n        const fieldConfigs: Record = null;\n\n        // Build dynamic query based on pagination parameters\n        const { selectQuery, countQuery } = this.utilsService.buildDynamicQuery(\n            paginationQuery,\n            fieldConfigs,\n            baseQuery,\n            fromQuery,\n            'ptbl.id_address_type'\n        );\n        // Execute pagination service to get paginated results\n        return this.paginationService.paginate(\n            selectQuery,\n            countQuery,\n            paginationQuery\n        );\n    }\n\n    /**\n     *Retrieves Single Address Type By its Id.\n     * @param {string} id - The Id of the Address Type to Retrieves.\n     * @returns {Promise} - The AddressType Object.\n     * @throws {HttpException} - If the addres type not Found.\n     */\n    async findOne(id: string): Promise {\n        const result = await this.prisma.executeRawQuery(this.query.findById(), { id });\n        if (!result) {\n            throw new HttpException({ message: 'Address Type Not Found' }, HttpStatus.NOT_FOUND);\n        }\n        return result as any;\n    }\n    /**\n     * delete addresss type by its id.\n     * @param {string} id - The id of addres type to delete.\n     * @returns {Promise} - An object indicating the deletion result.\n     * @throws {HttpException} - if an error occurs during delete\n     */\n    async delete(id: string): Promise {\n        //delete record\n        const deleted = await this.prisma.executeRawQuery(this.query.delete(), id);\n\n        if (deleted && deleted[0].deletedid) {\n            return deleted;\n        } else {\n            throw new HttpException(\n                { message: 'Something went wrong' },\n                HttpStatus.INTERNAL_SERVER_ERROR\n            );\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AllExceptionsFilter.html":{"url":"classes/AllExceptionsFilter.html","title":"class - AllExceptionsFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllExceptionsFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/all-exceptions.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                A global exception filter to catch and handle all exceptions.\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                reflector\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/all-exceptions.filter.ts:47\n                            \n                        \n\n                \n                    \n                            Creates an instance of AllExceptionsFilter.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe reflector instance used for metadata reflection.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        reflector\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Reflector\n\n                    \n                \n                    \n                        \n                                Defined in src/core/filters/all-exceptions.filter.ts:54\n                        \n                    \n\n            \n                \n                    \nThe reflector instance used for metadata reflection.\n\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/filters/all-exceptions.filter.ts:63\n                        \n                    \n\n\n            \n                \n                        Catches and handles exceptions thrown by the application.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe exception that was thrown.\n\n\n                                            \n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe execution context that contains request and response objects.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ExceptionFilter, Catch, ArgumentsHost, HttpException, HttpStatus } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n\nimport { Request, Response } from 'express';\n\n/**\n * A global exception filter to catch and handle all exceptions.\n *\n * @class\n * @implements {ExceptionFilter}\n */\n\n@Catch()\nexport class AllExceptionsFilter implements ExceptionFilter {\n    /**\n     * Creates an instance of AllExceptionsFilter.\n     *\n     * @param {Reflector} reflector - The reflector instance used for metadata reflection.\n     */\n\n    constructor(public reflector: Reflector) {}\n\n    /**\n     * Catches and handles exceptions thrown by the application.\n     *\n     * @param {unknown} exception - The exception that was thrown.\n     * @param {ArgumentsHost} host - The execution context that contains request and response objects.\n     */\n\n    catch(exception: unknown, host: ArgumentsHost) {\n        console.log('ALL EXEPTION from filter', exception);\n        const ctx = host.switchToHttp();\n        const response = ctx.getResponse();\n        const request = ctx.getRequest();\n        const status =\n            exception instanceof HttpException\n                ? exception.getStatus()\n                : HttpStatus.INTERNAL_SERVER_ERROR;\n\n        const errorResponse = {\n            statusCode: status,\n            timestamp: new Date().toISOString(),\n            path: request.url,\n            message: (exception as any).message || 'Internal server error',\n        };\n\n        response.status(status).json(errorResponse);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ApiModule.html":{"url":"modules/ApiModule.html","title":"module - ApiModule","body":"\n                   \n\n\n\n\n    Modules\n    ApiModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ApiModule\n\n\n\ncluster_ApiModule_imports\n\n\n\n\nBankModule\n\nBankModule\n\n\n\nApiModule\n\nApiModule\n\nApiModule -->\n\nBankModule->ApiModule\n\n\n\n\n\nCityModule\n\nCityModule\n\nApiModule -->\n\nCityModule->ApiModule\n\n\n\n\n\nCountriesModule\n\nCountriesModule\n\nApiModule -->\n\nCountriesModule->ApiModule\n\n\n\n\n\nCountryMasModule\n\nCountryMasModule\n\nApiModule -->\n\nCountryMasModule->ApiModule\n\n\n\n\n\nCurrenciesModule\n\nCurrenciesModule\n\nApiModule -->\n\nCurrenciesModule->ApiModule\n\n\n\n\n\nDocumentGroupModule\n\nDocumentGroupModule\n\nApiModule -->\n\nDocumentGroupModule->ApiModule\n\n\n\n\n\nDocumentModule\n\nDocumentModule\n\nApiModule -->\n\nDocumentModule->ApiModule\n\n\n\n\n\nFilesModule\n\nFilesModule\n\nApiModule -->\n\nFilesModule->ApiModule\n\n\n\n\n\nHomeModule\n\nHomeModule\n\nApiModule -->\n\nHomeModule->ApiModule\n\n\n\n\n\nStateModule\n\nStateModule\n\nApiModule -->\n\nStateModule->ApiModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/api.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            This file contains the ApiModule class, which aggregates several feature modules and sets up a global HTTP error filter.\nThe ApiModule class is responsible for importing feature-specific modules and configuring a global HTTP error filter.\nIt serves as an aggregate module for the API-related functionalities of the application.\n\n        \n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            BankModule\n                        \n                        \n                            CityModule\n                        \n                        \n                            CountriesModule\n                        \n                        \n                            CountryMasModule\n                        \n                        \n                            CurrenciesModule\n                        \n                        \n                            DocumentGroupModule\n                        \n                        \n                            DocumentModule\n                        \n                        \n                            FilesModule\n                        \n                        \n                            HomeModule\n                        \n                        \n                            StateModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { APP_FILTER, RouterModule } from '@nestjs/core';\n\nimport { HttpErrorFilter } from '@core/exceptions/http-error.filter';\n\nimport { CountriesModule } from './countries/countries.module';\nimport { CurrenciesModule } from './currencies/currencies.module';\nimport { FilesModule } from './files/files.module';\nimport { HomeModule } from './home/home.module';\nimport { BankModule } from './master/banks/bank.module';\nimport { CityModule } from './master/city_mas/cities.modules';\nimport { CountryMasModule } from './master/country_mas/country_mas.module';\nimport { DocumentGroupModule } from './master/document_groups/document_grp.module';\nimport { DocumentModule } from './master/documents/documents.module';\nimport { StateModule } from './master/state_mas/state.module';\n\n/**\n * @fileoverview\n * This file contains the `ApiModule` class, which aggregates several feature modules and sets up a global HTTP error filter.\n *\n * @module\n * @description\n * The `ApiModule` class is responsible for importing feature-specific modules and configuring a global HTTP error filter.\n * It serves as an aggregate module for the API-related functionalities of the application.\n */\n\n@Module({\n    imports: [\n        /**\n         * Module responsible for managing country-related functionalities.\n         */\n        CountriesModule,\n\n        /**\n         * Module responsible for managing currency-related functionalities.\n         */\n        CurrenciesModule,\n\n        /**\n         * Module responsible for managing file-related functionalities.\n         */\n        FilesModule,\n\n        /**\n         * Module responsible for managing home-related functionalities.\n         */\n        HomeModule,\n        RouterModule.register([\n            {\n                path: 'v1',\n                module: CountriesModule,\n            },\n        ]),\n        RouterModule.register([\n            {\n                path: 'v1',\n                module: CurrenciesModule,\n            },\n        ]),\n        /**\n         * Module responsible for managing country-related functionalities.\n         */\n        CountryMasModule,\n\n        /**\n         * Module responsible for managing city-related functionalities.\n         */\n        CityModule,\n\n        /**\n         * Module responsible for managing state-related functionalities.\n         */\n        StateModule,\n\n        /**\n         * Module responsible for managing banks-related functionalities.\n         */\n        BankModule,\n        /**\n         * Module responsible for managing documentGroup-related functionalities.\n         */\n        DocumentGroupModule,\n        /**\n         * Module responsible for managing document-related functionalities.\n         */\n        DocumentModule,\n    ],\n\n    providers: [\n        {\n            provide: APP_FILTER,\n            useClass: HttpErrorFilter,\n        },\n    ],\n})\nexport class ApiModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/app.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                This file contains the AppController class, which provides health check endpoints for the application.\nThe AppController is responsible for handling HTTP requests related to the application's health status.\nIt uses @nestjs/terminus for health checks and PrismaService to check the database connection status.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Public\n                                    Async\n                                getHealth\n                            \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Async\n                        getHealth\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHealth()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/health')@HealthCheck()\n                \n            \n\n                    \n                        \n                            Defined in src/app/app.controller.ts:66\n                        \n                    \n\n\n            \n                \n                        Health check endpoint.\nThis endpoint performs a health check by verifying the status of the database connection.\nThe result of the health check is returned in the response.\nExample :// Example response\n{\n  \"status\": \"ok\",\n  \"info\": {\n    \"prisma\": \"up\"\n  },\n  \"error\": {},\n  \"details\": {}\n}\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves with the health check result.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/log')\n                \n            \n\n                    \n                        \n                            Defined in src/app/app.controller.ts:91\n                        \n                    \n\n\n            \n                \n                        Log check endpoint.\nThis endpoint performs a log check.\nThe result of the log check is returned in the response.\nExample :// Example response\n{\n  \"logger\": {\n    \"status\": \"ok\"\n  },\n}\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                A promise that resolves with the log check result.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Inject } from '@nestjs/common'; // VERSION_NEUTRAL\nimport { ApiTags } from '@nestjs/swagger';\nimport { HealthCheck, HealthCheckService } from '@nestjs/terminus';\n\nimport Logger, { LoggerKey } from '@infineit/winston-logger/logger/domain/logger';\n\nimport { PrismaService } from '@services/prisma.service';\n// import { PublicRoute } from 'src/core/decorators/public.request.decorator';\n\n// @Controller({\n//     version: VERSION_NEUTRAL,\n//     path: '/',\n// })\n\n/**\n * @fileoverview\n * This file contains the `AppController` class, which provides health check endpoints for the application.\n *\n * @module\n * @description\n * The `AppController` is responsible for handling HTTP requests related to the application's health status.\n * It uses `@nestjs/terminus` for health checks and `PrismaService` to check the database connection status.\n */\n\n@ApiTags('Health') // Tags the controller for Swagger API documentation\n@Controller() // Decorates the class as a NestJS controller\nexport class AppController {\n    /**\n     * Creates an instance of `AppController`.\n     *\n     * @param {HealthCheckService} healthCheckService - Service for performing health checks.\n     * @param {PrismaService} prismaService - Service for interacting with the Prisma ORM.\n     */\n    constructor(\n        @Inject(LoggerKey) private logger: Logger,\n        private readonly healthCheckService: HealthCheckService,\n        private readonly prismaService: PrismaService\n    ) {}\n\n    /**\n     * Health check endpoint.\n     *\n     * @route GET /health\n     * @returns {Promise} A promise that resolves with the health check result.\n     * @throws {BadRequestException} If the health check fails.\n     *\n     * @description\n     * This endpoint performs a health check by verifying the status of the database connection.\n     * The result of the health check is returned in the response.\n     *\n     * @example\n     * // Example response\n     * {\n     *   \"status\": \"ok\",\n     *   \"info\": {\n     *     \"prisma\": \"up\"\n     *   },\n     *   \"error\": {},\n     *   \"details\": {}\n     * }\n     */\n\n    @Get('/health') // Route to handle GET requests at /health\n    @HealthCheck() // Decorator to indicate that this is a health check endpoint\n    // @PublicRoute()\n    public async getHealth(): Promise {\n        return this.healthCheckService.check([() => this.prismaService.isHealthy()]);\n    }\n\n    /**\n     * Log check endpoint.\n     *\n     * @route GET /log\n     * @returns {Promise} A promise that resolves with the log check result.\n     * @throws {BadRequestException} If the health check fails.\n     *\n     * @description\n     * This endpoint performs a log check.\n     * The result of the log check is returned in the response.\n     *\n     * @example\n     * // Example response\n     * {\n     *   \"logger\": {\n     *     \"status\": \"ok\"\n     *   },\n     * }\n     */\n\n    @Get('/log')\n    getHello(): object {\n        // const user = {\n        //     id: 'johndoe',\n        //     name: 'John Doe',\n        //     address: '123 Imaginary Street',\n        //     passport: {\n        //         number: 'BE123892',\n        //         issued: 2023,\n        //         expires: 2027,\n        //     },\n        //     phone: '123-234-544',\n        // };\n        // this.logger.log('Hello endpoint called');\n        // this.logger.log('Hello endpoint called');\n        // this.logger.debug('foo %s %o', 'bar');\n        // this.logger.verbose({ foo: 'bar' }, 'baz %s', 'qux');\n        // Debug\n        // Debug\n        this.logger.debug(\n            'I am a debug message!',\n            {\n                context: 'Bootstrap',\n                correlationId: '1b3fd064-2bed-4bb4-b3af-a5f3686b1b53',\n                sourceClass: 'AppModule',\n                props: {\n                    foo: 'bar-debug',\n                    baz: 'qux',\n                },\n            },\n            'getHello'\n        );\n\n        // // Info\n        // this.logger.info('I am an info message!', {\n        //     props: {\n        //         foo: 'bar',\n        //         baz: 'qux',\n        //     },\n        // });\n\n        this.logger.info('I am an info message should be set!', {\n            context: 'Bootstrap',\n            correlationId: '1b3fd064-2bed-4bb4-b3af-a5f3686b1b53',\n            sourceClass: 'AppModule',\n            // durationMs: 120,\n            // stack: 'Error stack trace',\n            props: { foo: 'bar', baz: 'qux' },\n        });\n\n        // Warn\n        this.logger.warn('I am a warn message! new one', {\n            context: 'Bootstrap',\n            correlationId: '1b3fd064-2bed-4bb4-b3af-a5f3686b1b53',\n            sourceClass: 'AppModule',\n            props: {\n                foo: 'bar',\n                baz: 'qux',\n            },\n            error: new Error('Hello World!'),\n        });\n\n        // Error\n        this.logger.error('I am an error message!', {\n            props: {\n                foo: 'bar',\n                baz: 'qux',\n            },\n            error: new Error('Hello World!'),\n        });\n\n        // Fatal\n        this.logger.fatal('I am a fatal message!', {\n            props: {\n                foo: 'bar',\n                baz: 'qux',\n            },\n            error: new Error('Hello World!'),\n        });\n\n        // Emergency\n        this.logger.emergency('I am an emergency message!', {\n            props: {\n                foo: 'bar',\n                baz: 'qux',\n            },\n            error: new Error('Hello World!'),\n        });\n\n        return {\n            logger: {\n                status: 'ok',\n            },\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nApiModule\n\nApiModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nApiModule->AppModule\n\n\n\n\n\nHelperModule\n\nHelperModule\n\nAppModule -->\n\nHelperModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            This file contains the AppModule class, which is the root module of the NestJS application.\nThe AppModule class is responsible for importing and configuring the core modules of the application.\nIt includes configuration for environment variables, database connections, and health checks.\n\n        \n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ApiModule\n                        \n                        \n                            HelperModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { TerminusModule } from '@nestjs/terminus';\n\n// import * as dotenv from 'dotenv';\nimport { ContextModule } from '@infineit/winston-logger/context/infrastructure/nestjs/contextModule';\nimport { LoggerModule } from '@infineit/winston-logger/logger/infrastructure/nestjs/loggerModule';\n\nimport { HelperModule } from '@common/helper/helper.module';\nimport appConfig from '@config/app.config';\nimport databaseConfig from '@config/database.config';\nimport fileConfig from '@config/file.config';\nimport loggerConfig from '@config/logger.config';\nimport { PrismaService } from '@services/prisma.service';\n\nimport { ApiModule } from '../modules/api.module';\n\nimport { AppController } from './app.controller';\n\nconst ENV = process.env.NODE_ENV;\n\n/**\n * @fileoverview\n * This file contains the `AppModule` class, which is the root module of the NestJS application.\n *\n * @module\n * @description\n * The `AppModule` class is responsible for importing and configuring the core modules of the application.\n * It includes configuration for environment variables, database connections, and health checks.\n */\n\n@Module({\n    controllers: [AppController],\n    imports: [\n        ConfigModule.forRoot({\n            isGlobal: true,\n            load: [appConfig, databaseConfig, fileConfig, loggerConfig],\n            envFilePath: !ENV ? '.env' : `.env.${ENV}`,\n        }),\n        ApiModule,\n        TerminusModule,\n        HelperModule,\n        LoggerModule.forRoot(PrismaService),\n        ContextModule,\n    ],\n    // providers: [\n    //     PrismaService,\n    //     {\n    //         provide: 'PRISMA_CLIENT',\n    //         useExisting: PrismaService,\n    //     },\n    // ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BadRequestExceptionFilter.html":{"url":"classes/BadRequestExceptionFilter.html","title":"class - BadRequestExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BadRequestExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/bad-request.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                A custom exception filter to handle BadRequestException specifically.\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                reflector\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _validationFilter\n                            \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/bad-request.filter.ts:27\n                            \n                        \n\n                \n                    \n                            Creates an instance of BadRequestExceptionFilter.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe reflector instance used for metadata reflection.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        reflector\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Reflector\n\n                    \n                \n                    \n                        \n                                Defined in src/core/filters/bad-request.filter.ts:34\n                        \n                    \n\n            \n                \n                    \nThe reflector instance used for metadata reflection.\n\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _validationFilter\n                        \n                    \n                \n            \n            \n                \n                        \n                    _validationFilter(validationErrors: ValidationError[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/filters/bad-request.filter.ts:93\n                        \n                    \n\n\n            \n                \n                        Filters and formats validation errors.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                validationErrors\n                                            \n                                                        ValidationError[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nArray of validation errors.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                Formatted validation errors.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: BadRequestException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/filters/bad-request.filter.ts:43\n                        \n                    \n\n\n            \n                \n                        Catches and handles BadRequestException thrown by the application.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                        BadRequestException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe BadRequestException that was thrown.\n\n\n                                            \n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe execution context that contains request and response objects.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { STATUS_CODES } from 'http';\n\nimport {\n    ArgumentsHost,\n    BadRequestException,\n    Catch,\n    ExceptionFilter,\n    // HttpStatus,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n\nimport { ValidationError } from 'class-validator';\nimport { Response } from 'express';\nimport * as _ from 'lodash';\n\n// import { PgSQLService } from \"../common/shared/services/pgsql.service\";\n// import { Query } from './query';\n\n/**\n * A custom exception filter to handle BadRequestException specifically.\n *\n * @class\n * @implements {ExceptionFilter}\n */\n\n@Catch(BadRequestException)\nexport class BadRequestExceptionFilter implements ExceptionFilter {\n    /**\n     * Creates an instance of BadRequestExceptionFilter.\n     *\n     * @param {Reflector} reflector - The reflector instance used for metadata reflection.\n     */\n\n    constructor(public reflector: Reflector) {}\n\n    /**\n     * Catches and handles BadRequestException thrown by the application.\n     *\n     * @param {BadRequestException} exception - The BadRequestException that was thrown.\n     * @param {ArgumentsHost} host - The execution context that contains request and response objects.\n     */\n\n    catch(exception: BadRequestException, host: ArgumentsHost) {\n        console.log('BAD REQUREST from fil');\n        const ctx = host.switchToHttp();\n        const response = ctx.getResponse();\n        // const request = ctx.getRequest();\n        const statusCode = exception.getStatus();\n        const r = exception.getResponse();\n\n        if (_.isArray(r.message) && r.message[0] instanceof ValidationError) {\n            const validationErrors = r.message;\n            r.error = this._validationFilter(validationErrors);\n        }\n\n        //put api logic here to fetch from db is erro code found\n        r.statusCode = statusCode;\n        r.message = STATUS_CODES[statusCode];\n\n        response.status(statusCode).json(r);\n\n        // try {\n        //   var sqlService = new PgSQLService();\n        //   var query = new Query();\n        //   var reqstr = JSON.stringify(_.clone(request.body));\n        //   var resstr = JSON.stringify(_.clone(r));\n        //   sqlService.run(\n        //     query.addQueryError(\"BadRequest\", request.method, request.url, reqstr, resstr)\n        //   );\n        // } catch (error) {}\n\n        // try {\n        //   var sqlService = new PgSQLService();\n        //   var query = new Query();\n        //   const reqstrobj = { body: _.clone(request.body), header: _.clone(request.header) };\n        //   var reqstr = JSON.stringify(reqstrobj);\n\n        //   const resstrobj = { res: _.clone(r), exception: exception.stack };\n        //   var resstr = JSON.stringify(resstrobj);\n        //   sqlService.run(\n        //     query.addQueryError(\"BadRequest\", request.method, request.url, reqstr, resstr)\n        //   );\n        // } catch (error) {}\n    }\n\n    /**\n     * Filters and formats validation errors.\n     *\n     * @param {ValidationError[]} validationErrors - Array of validation errors.\n     * @returns {object} Formatted validation errors.\n     */\n\n    private _validationFilter(validationErrors: ValidationError[]) {\n        const errorMessages = {};\n\n        for (const validationError of validationErrors) {\n            if (validationError.children && validationError.children.length > 0) {\n                const nestedErrorMessage = {};\n                for (let i = 0; i \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/BankController.html":{"url":"controllers/BankController.html","title":"controller - BankController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  BankController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/banks/bank.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                banks\n            \n\n\n            \n                Description\n            \n            \n                This file defines the BankController, which handles HTTP requests related to bank data.\nIt provides endpoints to create, update, retrieve, and delete bank records.\nThe BankController is responsible for exposing endpoints that interact with the BankService.\nIt uses various HTTP methods to manage bank data and handles responses with appropriate HTTP status codes.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createDto: BankDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(HttpStatus.CREATED)@ApiCreatedResponse({type: Banks, description: 'Create bank'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/master/banks/bank.controller.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createDto\n                                            \n                                                            BankDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data required to create a new bank.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The created bank object.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id_bank')@HttpCode(HttpStatus.OK)@ApiParam({name: 'id_bank', type: String})@ApiOkResponse({status: undefined, description: 'Bank has been successfully deleted.'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/master/banks/bank.controller.ts:119\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the bank to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                An object indicating the deletion result.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(query: PaginationQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@ApiOkResponse({type: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/master/banks/bank.controller.ts:85\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe pagination and filtering parameters.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                A paginated list of banks.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id_bank')@HttpCode(HttpStatus.OK)@ApiParam({name: 'id_bank', type: String})@ApiOkResponse({type: Banks, description: 'Get bank by ID'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/master/banks/bank.controller.ts:102\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the bank to retrieve.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The bank object.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateDto: UpdateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id_bank')@HttpCode(HttpStatus.OK)@ApiParam({name: 'id_bank', type: String})@ApiOkResponse({type: Banks, description: 'Update bank'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/master/banks/bank.controller.ts:69\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the bank to be updated.\n\n\n                                            \n                                        \n                                        \n                                                updateDto\n                                            \n                                                            UpdateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data to update the bank with.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The updated bank object or null if not found.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    HttpCode,\n    HttpStatus,\n    Param,\n    ParseUUIDPipe,\n    Patch,\n    Post,\n    Query,\n} from '@nestjs/common';\nimport { ApiTags, ApiOkResponse, ApiCreatedResponse, ApiParam } from '@nestjs/swagger';\n\nimport { PaginationResponse, PaginationResponseDto } from '@utils/dto/pagination-response.dto';\nimport { PaginationQueryDto } from '@utils/dto/pagination.dto';\n\nimport { BankService } from './bank.service';\nimport { Banks } from './dto/bank.dto';\nimport { BankDto } from './dto/create.dto';\nimport { UpdateDto } from './dto/update.dto';\n\n/**\n * @fileoverview\n * This file defines the `BankController`, which handles HTTP requests related to bank data.\n * It provides endpoints to create, update, retrieve, and delete bank records.\n *\n * @module\n * @description\n * The `BankController` is responsible for exposing endpoints that interact with the `BankService`.\n * It uses various HTTP methods to manage bank data and handles responses with appropriate HTTP status codes.\n */\n@ApiTags('Banks')\n@Controller('banks')\nexport class BankController {\n    constructor(private readonly bankService: BankService) {}\n\n    /**\n     * @route POST /banks\n     * @description Create a new bank.\n     * @param {BankDto} createDto - The data required to create a new bank.\n     * @returns {Promise} The created bank object.\n     */\n    @Post()\n    @HttpCode(HttpStatus.CREATED)\n    @ApiCreatedResponse({\n        type: Banks,\n        description: 'Create bank',\n    })\n    async create(@Body() createDto: BankDto): Promise {\n        return this.bankService.create(createDto);\n    }\n\n    /**\n     * @route PATCH /banks/:id_bank\n     * @description Update an existing bank by its ID.\n     * @param {string} id - The ID of the bank to be updated.\n     * @param {UpdateDto} updateDto - The data to update the bank with.\n     * @returns {Promise} The updated bank object or null if not found.\n     */\n    @Patch(':id_bank')\n    @HttpCode(HttpStatus.OK)\n    @ApiParam({ name: 'id_bank', type: String })\n    @ApiOkResponse({\n        type: Banks,\n        description: 'Update bank',\n    })\n    async update(\n        @Param('id_bank', ParseUUIDPipe) id: string,\n        @Body() updateDto: UpdateDto\n    ): Promise {\n        return this.bankService.update(id, updateDto);\n    }\n\n    /**\n     * @route GET /banks\n     * @description Retrieve a list of banks with pagination.\n     * @param {PaginationQueryDto} query - The pagination and filtering parameters.\n     * @returns {Promise>} A paginated list of banks.\n     */\n    @Get()\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ type: PaginationResponse(Banks) })\n    async findAll(@Query() query: PaginationQueryDto): Promise> {\n        return this.bankService.findAll(query);\n    }\n\n    /**\n     * @route GET /banks/:id_bank\n     * @description Retrieve a single bank by its ID.\n     * @param {string} id - The ID of the bank to retrieve.\n     * @returns {Promise} The bank object.\n     */\n    @Get(':id_bank')\n    @HttpCode(HttpStatus.OK)\n    @ApiParam({ name: 'id_bank', type: String })\n    @ApiOkResponse({\n        type: Banks,\n        description: 'Get bank by ID',\n    })\n    async findOne(@Param('id_bank', ParseUUIDPipe) id: string): Promise {\n        return this.bankService.findOne(id);\n    }\n\n    /**\n     * @route DELETE /banks/:id_bank\n     * @description Delete a bank by its ID.\n     * @param {string} id - The ID of the bank to delete.\n     * @returns {Promise} An object indicating the deletion result.\n     */\n    @Delete(':id_bank')\n    @HttpCode(HttpStatus.OK)\n    @ApiParam({ name: 'id_bank', type: String })\n    @ApiOkResponse({\n        status: HttpStatus.OK,\n        description: 'Bank has been successfully deleted.',\n    })\n    async delete(@Param('id_bank', ParseUUIDPipe) id: string): Promise {\n        return this.bankService.delete(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BankDto.html":{"url":"classes/BankDto.html","title":"class - BankDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BankDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/banks/dto/create.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the BankDto class, which represents the data transfer object (DTO)\nused for creating or updating a bank record. It includes validation rules and transformation logic\nfor the properties of the bank.\nThe BankDto class ensures that the data provided for creating or updating a bank adheres to\nspecified validation rules and formats. It uses decorators from class-validator for validation\nand class-transformer for transforming input data.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                id_bank\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                id_city\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                id_country\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                id_state\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                short_name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                            \n                                    \n                                    Optional\n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        id_bank\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude({toPlainOnly: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/banks/dto/create.dto.ts:120\n                        \n                    \n\n            \n                \n                    The unique identifier for the bank.\nThis property is excluded from the plain representation of the object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        id_city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsUUID()@ApiProperty({type: String, description: 'City ID (optional)', example: 'a12b34cd-5678-90ef-1234-56789abcdef0', required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/banks/dto/create.dto.ts:71\n                        \n                    \n\n            \n                \n                    The ID of the city where the bank is located (optional).\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        id_country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsUUID()@ApiProperty({type: String, description: 'Country ID', example: 'c34d56ef-7890-12ij-3456-78901abcdef2'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/banks/dto/create.dto.ts:99\n                        \n                    \n\n            \n                \n                    The ID of the country where the bank is located.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        id_state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsUUID()@ApiProperty({type: String, description: 'State ID (optional)', example: 'b23c45de-6789-01gh-2345-67890abcdef1', required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/banks/dto/create.dto.ts:85\n                        \n                    \n\n            \n                \n                    The ID of the state where the bank is located (optional).\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@MaxLength(50)@ApiProperty({type: String, description: 'Bank name', example: 'State Bank Of India', maxLength: 50})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/banks/dto/create.dto.ts:41\n                        \n                    \n\n            \n                \n                    The name of the bank (e.g., 'State Bank Of India').\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        short_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@MaxLength(5)@ApiProperty({type: String, description: 'Short name of the bank (optional)', example: 'SBI', maxLength: 5, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/banks/dto/create.dto.ts:57\n                        \n                    \n\n            \n                \n                    The short name of the bank (optional, e.g., 'SBI').\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNumber()@ApiProperty({type: Number, description: 'Status of the bank (optional)', example: 1, default: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/banks/dto/create.dto.ts:113\n                        \n                    \n\n            \n                \n                    The status of the bank (optional, default is 1 for active).\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude({toPlainOnly: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/banks/dto/create.dto.ts:123\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nimport { Exclude } from 'class-transformer';\nimport {\n    IsDefined,\n    IsNotEmpty,\n    IsString,\n    MaxLength,\n    IsOptional,\n    IsNumber,\n    IsUUID,\n} from 'class-validator';\n\n/**\n * @fileoverview\n * This file defines the `BankDto` class, which represents the data transfer object (DTO)\n * used for creating or updating a bank record. It includes validation rules and transformation logic\n * for the properties of the bank.\n *\n * @module\n * @description\n * The `BankDto` class ensures that the data provided for creating or updating a bank adheres to\n * specified validation rules and formats. It uses decorators from `class-validator` for validation\n * and `class-transformer` for transforming input data.\n */\nexport class BankDto {\n    /**\n     * The name of the bank (e.g., 'State Bank Of India').\n     * @example 'State Bank Of India'\n     */\n    @IsDefined()\n    @IsNotEmpty()\n    @IsString()\n    @MaxLength(50)\n    @ApiProperty({\n        type: String,\n        description: 'Bank name',\n        example: 'State Bank Of India',\n        maxLength: 50,\n    })\n    name: string;\n\n    /**\n     * The short name of the bank (optional, e.g., 'SBI').\n     * @example 'SBI'\n     */\n    @IsOptional()\n    @IsString()\n    @MaxLength(5)\n    @ApiProperty({\n        type: String,\n        description: 'Short name of the bank (optional)',\n        example: 'SBI',\n        maxLength: 5,\n        required: false,\n    })\n    short_name?: string;\n\n    /**\n     * The ID of the city where the bank is located (optional).\n     * @example 'a12b34cd-5678-90ef-1234-56789abcdef0'\n     */\n    @IsOptional()\n    @IsUUID()\n    @ApiProperty({\n        type: String,\n        description: 'City ID (optional)',\n        example: 'a12b34cd-5678-90ef-1234-56789abcdef0',\n        required: false,\n    })\n    id_city?: string;\n\n    /**\n     * The ID of the state where the bank is located (optional).\n     * @example 'b23c45de-6789-01gh-2345-67890abcdef1'\n     */\n    @IsOptional()\n    @IsUUID()\n    @ApiProperty({\n        type: String,\n        description: 'State ID (optional)',\n        example: 'b23c45de-6789-01gh-2345-67890abcdef1',\n        required: false,\n    })\n    id_state?: string;\n\n    /**\n     * The ID of the country where the bank is located.\n     * @example 'c34d56ef-7890-12ij-3456-78901abcdef2'\n     */\n    @IsDefined()\n    @IsNotEmpty()\n    @IsUUID()\n    @ApiProperty({\n        type: String,\n        description: 'Country ID',\n        example: 'c34d56ef-7890-12ij-3456-78901abcdef2',\n    })\n    id_country: string;\n\n    /**\n     * The status of the bank (optional, default is 1 for active).\n     * @example 1\n     */\n    @IsOptional()\n    @IsNumber()\n    @ApiProperty({\n        type: Number,\n        description: 'Status of the bank (optional)',\n        example: 1,\n        default: 1,\n    })\n    status?: number;\n\n    /**\n     * The unique identifier for the bank.\n     * This property is excluded from the plain representation of the object.\n     */\n    @Exclude({ toPlainOnly: true })\n    id_bank?: string;\n\n    @Exclude({ toPlainOnly: true })\n    updated_at?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BankModule.html":{"url":"modules/BankModule.html","title":"module - BankModule","body":"\n                   \n\n\n\n\n    Modules\n    BankModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_BankModule\n\n\n\ncluster_BankModule_providers\n\n\n\ncluster_BankModule_exports\n\n\n\n\nBankService \n\nBankService \n\n\n\nBankModule\n\nBankModule\n\nBankService  -->\n\nBankModule->BankService \n\n\n\n\n\nBankService\n\nBankService\n\nBankModule -->\n\nBankService->BankModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/master/banks/bank.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            This file defines the BankModule, which bundles the BankController and BankService together.\nThe BankModule is responsible for handling bank-related operations. It provides the necessary controllers and services to manage bank data.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            BankService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            BankController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BankService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { BankController } from './bank.controller';\nimport { BankService } from './bank.service';\nimport { Query } from './query';\n\n/**\n * @fileoverview\n * This file defines the `BankModule`, which bundles the `BankController` and `BankService` together.\n *\n * @module\n * @description\n * The `BankModule` is responsible for handling bank-related operations. It provides the necessary controllers and services to manage bank data.\n */\n@Module({\n    controllers: [BankController],\n    providers: [BankService, Query],\n    exports: [BankService],\n})\nexport class BankModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BankService.html":{"url":"injectables/BankService.html","title":"injectable - BankService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BankService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/banks/bank.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the BankService class, which provides methods to manage bank data.\nIt includes operations for creating, updating, retrieving, and deleting banks.\nThe BankService class is responsible for handling business logic related to banks.\nIt interacts with the database through the PrismaService and performs various operations using raw SQL queries.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                MODULE\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(paginationService: PaginationService, prisma: PrismaService, query: Query, utilsService: UtilsService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/master/banks/bank.service.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        paginationService\n                                                  \n                                                        \n                                                                        PaginationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        query\n                                                  \n                                                        \n                                                                        Query\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        utilsService\n                                                  \n                                                        \n                                                                        UtilsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createDto: BankDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/banks/bank.service.ts:44\n                        \n                    \n\n\n            \n                \n                        Creates a new bank.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createDto\n                                            \n                                                            BankDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data required to create a new bank.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The created bank object.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/banks/bank.service.ts:155\n                        \n                    \n\n\n            \n                \n                        Deletes a bank by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the bank to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                An object indicating the deletion result.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(paginationQuery: PaginationQueryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/banks/bank.service.ts:107\n                        \n                    \n\n\n            \n                \n                        Retrieves a list of banks with pagination.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                paginationQuery\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe pagination and filtering parameters.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                A paginated list of banks.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/banks/bank.service.ts:141\n                        \n                    \n\n\n            \n                \n                        Retrieves a single bank by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the bank to retrieve.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The bank object.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateDto: UpdateDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/banks/bank.service.ts:74\n                        \n                    \n\n\n            \n                \n                        Updates an existing bank by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the bank to be updated.\n\n\n                                            \n                                        \n                                        \n                                                updateDto\n                                            \n                                                            UpdateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data to update the bank with.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The updated bank object or null if not found.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        MODULE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/master/banks/bank.service.ts:27\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, HttpException, HttpStatus } from '@nestjs/common';\n\nimport { PaginationService } from '@app/common/helper/services/pagination.service';\nimport { UtilsService } from '@app/common/helper/services/util.service';\nimport { IPaginationFieldConfig } from '@app/utils/types/pagination-options';\nimport { PrismaService } from '@services/prisma.service';\nimport { PaginationResponseDto } from '@utils/dto/pagination-response.dto';\nimport { PaginationQueryDto } from '@utils/dto/pagination.dto';\n\nimport { Banks } from './dto/bank.dto'; // DTO for bank data\nimport { BankDto } from './dto/create.dto'; // DTO for creating a bank\nimport { UpdateDto } from './dto/update.dto'; // DTO for updating a bank\nimport { Query } from './query'; // Query class for generating SQL queries\n\n/**\n * @fileoverview\n * This file defines the `BankService` class, which provides methods to manage bank data.\n * It includes operations for creating, updating, retrieving, and deleting banks.\n *\n * @module\n * @description\n * The `BankService` class is responsible for handling business logic related to banks.\n * It interacts with the database through the `PrismaService` and performs various operations using raw SQL queries.\n */\n@Injectable()\nexport class BankService {\n    private readonly MODULE: string;\n\n    constructor(\n        private readonly paginationService: PaginationService,\n        private readonly prisma: PrismaService,\n        private readonly query: Query,\n        private readonly utilsService: UtilsService\n    ) {\n        this.MODULE = 'bank';\n    }\n\n    /**\n     * Creates a new bank.\n     * @param {BankDto} createDto - The data required to create a new bank.\n     * @returns {Promise} The created bank object.\n     * @throws {HttpException} If a bank with the same name already exists or if an error occurs.\n     */\n    async create(createDto: BankDto): Promise {\n        // Check if a bank with the same name already exists\n        const find = await this.prisma.executeRawQuery(this.query.findByName(), createDto);\n\n        if (find) {\n            throw new HttpException({ message: 'NAME ALREADY EXISTS' }, HttpStatus.CONFLICT);\n        }\n\n        // Insert the new bank\n        const inserted = await this.prisma.executeRawQuery(this.query.insert(), createDto);\n\n        if (inserted && inserted.insertid) {\n            // Retrieve and return the newly created bank\n            const get = await this.findOne(inserted.insertid);\n            return get as any;\n        } else {\n            throw new HttpException(\n                { message: 'Something went wrong' },\n                HttpStatus.INTERNAL_SERVER_ERROR\n            );\n        }\n    }\n\n    /**\n     * Updates an existing bank by its ID.\n     * @param {string} id - The ID of the bank to be updated.\n     * @param {UpdateDto} updateDto - The data to update the bank with.\n     * @returns {Promise} The updated bank object or null if not found.\n     * @throws {HttpException} If the bank is not found or if an error occurs.\n     */\n    async update(id: string, updateDto: UpdateDto): Promise {\n        if (Object.keys(updateDto).length === 0) {\n            throw new HttpException({ message: 'Nothing to update!' }, HttpStatus.BAD_REQUEST);\n        }\n\n        // Check if the bank record exists\n        const recordExists = await this.findOne(id);\n        if (recordExists) {\n            updateDto.id_bank = id;\n            updateDto.updated_at = new Date().toISOString();\n            // Update the bank details\n            const updated = await this.prisma.executeRawQuery(this.query.update(), updateDto);\n\n            if (updated && updated[0].updatedid) {\n                // Retrieve and return the updated bank\n                const get = await this.findOne(updated[0].updatedid);\n                return get as any;\n            } else {\n                throw new HttpException(\n                    { message: 'Something went wrong' },\n                    HttpStatus.INTERNAL_SERVER_ERROR\n                );\n            }\n        } else {\n            throw new HttpException({ message: 'Bank not found' }, HttpStatus.NOT_FOUND);\n        }\n    }\n\n    /**\n     * Retrieves a list of banks with pagination.\n     * @param {PaginationQueryDto} paginationQuery - The pagination and filtering parameters.\n     * @returns {Promise>} A paginated list of banks.\n     */\n    async findAll(paginationQuery: PaginationQueryDto): Promise> {\n        // Define the base query fields and source table\n        const baseQuery = [\n            'ptbl.id_bank',\n            'ptbl.name',\n            'ptbl.short_name',\n            'ptbl.id_city',\n            'ptbl.id_state',\n            'ptbl.id_country',\n            'ptbl.status',\n        ];\n        const fromQuery = ` FROM banks_mas as ptbl`;\n\n        const fieldConfigs: Record = null;\n\n        // Build dynamic query based on pagination parameters\n        const { selectQuery, countQuery } = this.utilsService.buildDynamicQuery(\n            paginationQuery,\n            fieldConfigs,\n            baseQuery,\n            fromQuery,\n            'ptbl.id_bank'\n        );\n\n        // Execute pagination service to get paginated results\n        return this.paginationService.paginate(selectQuery, countQuery, paginationQuery);\n    }\n\n    /**\n     * Retrieves a single bank by its ID.\n     * @param {string} id - The ID of the bank to retrieve.\n     * @returns {Promise} The bank object.\n     * @throws {HttpException} If the bank is not found.\n     */\n    async findOne(id: string): Promise {\n        const result = await this.prisma.executeRawQuery(this.query.findById(), { id });\n        if (!result) {\n            throw new HttpException({ message: 'Bank not found' }, HttpStatus.NOT_FOUND);\n        }\n        return result as any;\n    }\n\n    /**\n     * Deletes a bank by its ID.\n     * @param {string} id - The ID of the bank to delete.\n     * @returns {Promise} An object indicating the deletion result.\n     * @throws {HttpException} If an error occurs during deletion.\n     */\n    async delete(id: string): Promise {\n        const deleted = await this.prisma.executeRawQuery(this.query.delete(), id);\n\n        if (deleted && deleted[0].deletedid) {\n            return deleted;\n        } else {\n            throw new HttpException(\n                { message: 'Something went wrong' },\n                HttpStatus.INTERNAL_SERVER_ERROR\n            );\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Banks.html":{"url":"classes/Banks.html","title":"class - Banks","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Banks\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/banks/dto/bank.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the Banks class, which represents the data structure of a bank entity.\nIt includes properties that describe the bank and uses decorators for Swagger documentation.\nThe Banks class is used to define the structure of a bank object, including its name, short name,\ncity, state, and country IDs, along with the status of the bank. The class uses decorators to\nconfigure how the properties should be documented in the Swagger API documentation.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id_bank\n                            \n                            \n                                    \n                                id_city\n                            \n                            \n                                    \n                                id_country\n                            \n                            \n                                    \n                                id_state\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                short_name\n                            \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id_bank\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: '1a2b3c4d-5678-90ef-1234-56789abcdef0'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/banks/dto/bank.dto.ts:23\n                        \n                    \n\n            \n                \n                    The unique identifier of the bank (e.g., '1a2b3c').\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id_city\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: '09407516-c0ac-4298-a6a7-59f48b87c094'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/banks/dto/bank.dto.ts:53\n                        \n                    \n\n            \n                \n                    The ID of the city where the bank is located (optional).\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id_country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: '3a10e186-c759-4aec-9a86-2e5e0c2e5870'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/banks/dto/bank.dto.ts:73\n                        \n                    \n\n            \n                \n                    The ID of the country where the bank is located.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id_state\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'f2d90547-a09a-4baa-a9f4-244e44a80875'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/banks/dto/bank.dto.ts:63\n                        \n                    \n\n            \n                \n                    The ID of the state where the bank is located (optional).\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'State Bank Of India'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/banks/dto/bank.dto.ts:33\n                        \n                    \n\n            \n                \n                    The name of the bank (e.g., 'State Bank Of India').\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        short_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'SBI'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/banks/dto/bank.dto.ts:43\n                        \n                    \n\n            \n                \n                    The short name of the bank (e.g., 'SBI').\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: Number, example: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/banks/dto/bank.dto.ts:83\n                        \n                    \n\n            \n                \n                    The status of the bank (e.g., 1 for active).\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiResponseProperty } from '@nestjs/swagger';\n\n/**\n * @fileoverview\n * This file defines the `Banks` class, which represents the data structure of a bank entity.\n * It includes properties that describe the bank and uses decorators for Swagger documentation.\n *\n * @module\n * @description\n * The `Banks` class is used to define the structure of a bank object, including its name, short name,\n * city, state, and country IDs, along with the status of the bank. The class uses decorators to\n * configure how the properties should be documented in the Swagger API documentation.\n */\nexport class Banks {\n    /**\n     * The unique identifier of the bank (e.g., '1a2b3c').\n     * @example '1a2b3c4d-5678-90ef-1234-56789abcdef0'\n     */\n    @ApiResponseProperty({\n        type: String,\n        example: '1a2b3c4d-5678-90ef-1234-56789abcdef0',\n    })\n    id_bank: string;\n\n    /**\n     * The name of the bank (e.g., 'State Bank Of India').\n     * @example 'State Bank Of India'\n     */\n    @ApiResponseProperty({\n        type: String,\n        example: 'State Bank Of India',\n    })\n    name: string;\n\n    /**\n     * The short name of the bank (e.g., 'SBI').\n     * @example 'SBI'\n     */\n    @ApiResponseProperty({\n        type: String,\n        example: 'SBI',\n    })\n    short_name: string;\n\n    /**\n     * The ID of the city where the bank is located (optional).\n     * @example '09407516-c0ac-4298-a6a7-59f48b87c094'\n     */\n    @ApiResponseProperty({\n        type: String,\n        example: '09407516-c0ac-4298-a6a7-59f48b87c094',\n    })\n    id_city: string | null;\n\n    /**\n     * The ID of the state where the bank is located (optional).\n     * @example 'f2d90547-a09a-4baa-a9f4-244e44a80875'\n     */\n    @ApiResponseProperty({\n        type: String,\n        example: 'f2d90547-a09a-4baa-a9f4-244e44a80875',\n    })\n    id_state: string | null;\n\n    /**\n     * The ID of the country where the bank is located.\n     * @example '3a10e186-c759-4aec-9a86-2e5e0c2e5870'\n     */\n    @ApiResponseProperty({\n        type: String,\n        example: '3a10e186-c759-4aec-9a86-2e5e0c2e5870',\n    })\n    id_country: string;\n\n    /**\n     * The status of the bank (e.g., 1 for active).\n     * @example 1\n     */\n    @ApiResponseProperty({\n        type: Number,\n        example: 1,\n    })\n    status: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Cities.html":{"url":"classes/Cities.html","title":"class - Cities","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Cities\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/city_mas/dto/cities.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the Cities class, which represents the data structure of a city entity.\nIt includes properties that describe the city and uses decorators for Swagger documentation.\nThe Cities class is used to define the structure of a city object, including its name, state id,country id The class also uses decorators\nto configure how the properties should be documented and transformed.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id_city\n                            \n                            \n                                    \n                                id_country\n                            \n                            \n                                    \n                                id_state\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id_city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: '09407516-c0ac-4298-a6a7-59f48b87c094'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/city_mas/dto/cities.dto.ts:22\n                        \n                    \n\n            \n                \n                    The unique identifier of the city (e.g., 'SF').\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id_country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: '3a10e186-c759-4aec-9a86-2e5e0c2e5870'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/city_mas/dto/cities.dto.ts:52\n                        \n                    \n\n            \n                \n                    The ID of the country to which the city belongs.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id_state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'f2d90547-a09a-4baa-a9f4-244e44a80875'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/city_mas/dto/cities.dto.ts:42\n                        \n                    \n\n            \n                \n                    The ID of the state to which the city belongs.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'Surat'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/city_mas/dto/cities.dto.ts:32\n                        \n                    \n\n            \n                \n                    The name of the city (e.g., 'Surat').\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: Number, example: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/city_mas/dto/cities.dto.ts:62\n                        \n                    \n\n            \n                \n                    The status of the city (e.g., 1 for active).\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiResponseProperty } from '@nestjs/swagger';\n\n/**\n * @fileoverview\n * This file defines the `Cities` class, which represents the data structure of a city entity.\n * It includes properties that describe the city and uses decorators for Swagger documentation.\n *\n * @module\n * @description\n * The `Cities` class is used to define the structure of a city object, including its name, state id,country id The class also uses decorators\n * to configure how the properties should be documented and transformed.\n */\nexport class Cities {\n    /**\n     * The unique identifier of the city (e.g., 'SF').\n     * @example 'SF'\n     */\n    @ApiResponseProperty({\n        type: String,\n        example: '09407516-c0ac-4298-a6a7-59f48b87c094',\n    })\n    id_city: string;\n\n    /**\n     * The name of the city (e.g., 'Surat').\n     * @example 'Surat'\n     */\n    @ApiResponseProperty({\n        type: String,\n        example: 'Surat',\n    })\n    name: string;\n\n    /**\n     * The ID of the state to which the city belongs.\n     * @example 'f2d90547-a09a-4baa-a9f4-244e44a80875'\n     */\n    @ApiResponseProperty({\n        type: String,\n        example: 'f2d90547-a09a-4baa-a9f4-244e44a80875',\n    })\n    id_state: string;\n\n    /**\n     * The ID of the country to which the city belongs.\n     * @example '3a10e186-c759-4aec-9a86-2e5e0c2e5870'\n     */\n    @ApiResponseProperty({\n        type: String,\n        example: '3a10e186-c759-4aec-9a86-2e5e0c2e5870',\n    })\n    id_country: string;\n\n    /**\n     * The status of the city (e.g., 1 for active).\n     * @example 1\n     */\n    @ApiResponseProperty({\n        type: Number,\n        example: 1,\n    })\n    status: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CityController.html":{"url":"controllers/CityController.html","title":"controller - CityController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CityController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/city_mas/cities.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                cities\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createDto: CityDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(HttpStatus.CREATED)@ApiCreatedResponse({type: Cities, description: 'Create city'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/master/city_mas/cities.controller.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createDto\n                                            \n                                                            CityDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data required to create a new city.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The created city object.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id_city')@HttpCode(HttpStatus.OK)@ApiParam({name: 'id_city', type: String})@ApiOkResponse({status: undefined, description: 'City has been successfully deleted.'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/master/city_mas/cities.controller.ts:109\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the city to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                An object indicating the deletion result.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(query: PaginationQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@ApiOkResponse({type: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/master/city_mas/cities.controller.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe pagination and filtering parameters.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                A paginated list of cities.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id_city')@HttpCode(HttpStatus.OK)@ApiParam({name: 'id_city', type: String})@ApiOkResponse({type: Cities, description: 'Get City by ID'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/master/city_mas/cities.controller.ts:92\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the city to retrieve.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The city object.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateDto: UpdateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id_city')@HttpCode(HttpStatus.OK)@ApiParam({name: 'id_city', type: String})@ApiOkResponse({type: Cities, description: 'Update City'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/master/city_mas/cities.controller.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the city to be updated.\n\n\n                                            \n                                        \n                                        \n                                                updateDto\n                                            \n                                                            UpdateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data to update the city with.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The updated city object or null if not found.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    HttpCode,\n    HttpStatus,\n    Param,\n    ParseUUIDPipe,\n    Patch,\n    Post,\n    Query,\n} from '@nestjs/common';\nimport { ApiTags, ApiOkResponse, ApiCreatedResponse, ApiParam } from '@nestjs/swagger';\n\nimport { PaginationResponse, PaginationResponseDto } from '@utils/dto/pagination-response.dto';\nimport { PaginationQueryDto } from '@utils/dto/pagination.dto';\n\nimport { CityService } from './cities.service';\nimport { Cities } from './dto/cities.dto';\nimport { CityDto } from './dto/create.dto';\nimport { UpdateDto } from './dto/update.dto';\n\n@ApiTags('Cities')\n@Controller('cities')\nexport class CityController {\n    constructor(private readonly cityService: CityService) {}\n\n    /**\n     * @route POST /cities\n     * @description Create a new city.\n     * @param {CreateCityDto} createDto - The data required to create a new city.\n     * @returns {Promise} The created city object.\n     */\n    @Post()\n    @HttpCode(HttpStatus.CREATED)\n    @ApiCreatedResponse({\n        type: Cities,\n        description: 'Create city',\n    })\n    async create(@Body() createDto: CityDto): Promise {\n        return this.cityService.create(createDto);\n    }\n\n    /**\n     * @route PATCH /cities/:id_city\n     * @description Update an existing city by its ID.\n     * @param {string} id - The ID of the city to be updated.\n     * @param {UpdateDto} updateDto - The data to update the city with.\n     * @returns {Promise} The updated city object or null if not found.\n     */\n    @Patch(':id_city')\n    @HttpCode(HttpStatus.OK)\n    @ApiParam({ name: 'id_city', type: String })\n    @ApiOkResponse({\n        type: Cities,\n        description: 'Update City',\n    })\n    async update(\n        @Param('id_city', ParseUUIDPipe) id: string,\n        @Body() updateDto: UpdateDto\n    ): Promise {\n        return this.cityService.update(id, updateDto);\n    }\n\n    /**\n     * @route GET /cities\n     * @description Retrieve a list of cities with pagination.\n     * @param {PaginationQueryDto} query - The pagination and filtering parameters.\n     * @returns {Promise>} A paginated list of cities.\n     */\n    @Get()\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ type: PaginationResponse(Cities) })\n    async findAll(@Query() query: PaginationQueryDto): Promise> {\n        return this.cityService.findAll(query);\n    }\n\n    /**\n     * @route GET /cities/:id_city\n     * @description Retrieve a single city by its ID.\n     * @param {string} id - The ID of the city to retrieve.\n     * @returns {Promise} The city object.\n     */\n    @Get(':id_city')\n    @HttpCode(HttpStatus.OK)\n    @ApiParam({ name: 'id_city', type: String })\n    @ApiOkResponse({\n        type: Cities,\n        description: 'Get City by ID',\n    })\n    async findOne(@Param('id_city', ParseUUIDPipe) id: string): Promise {\n        return this.cityService.findOne(id);\n    }\n\n    /**\n     * @route DELETE /cities/:id_city\n     * @description Delete a city by its ID.\n     * @param {string} id - The ID of the city to delete.\n     * @returns {Promise} An object indicating the deletion result.\n     */\n    @Delete(':id_city')\n    @HttpCode(HttpStatus.OK)\n    @ApiParam({ name: 'id_city', type: String })\n    @ApiOkResponse({\n        status: HttpStatus.OK,\n        description: 'City has been successfully deleted.',\n    })\n    async delete(@Param('id_city', ParseUUIDPipe) id: string): Promise {\n        return this.cityService.delete(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CityDto.html":{"url":"classes/CityDto.html","title":"class - CityDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CityDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/city_mas/dto/create.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the CityDto class, which represents the data transfer object (DTO)\nused for creating a new city record. It includes validation rules and transformation logic\nfor the properties of the city.\nThe CityDto class ensures that the data provided for creating a city adheres to\nspecified validation rules and formats. It uses decorators from class-validator for validation\nand class-transformer for transforming input data.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                id_city\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                id_country\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                id_state\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                            \n                                    \n                                    Optional\n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        id_city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude({toPlainOnly: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/city_mas/dto/create.dto.ts:83\n                        \n                    \n\n            \n                \n                    The unique identifier for the city.\nThis property is excluded from the plain representation of the object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        id_country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@ApiProperty({type: String, description: 'Country ID', example: 'f2d90547-a09a-4baa-a9f4-244e44a80875'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/city_mas/dto/create.dto.ts:62\n                        \n                    \n\n            \n                \n                    The ID of the Country to which the city belongs.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        id_state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@ApiProperty({type: String, description: 'State ID', example: '09407516-c0ac-4298-a6a7-59f48b87c094'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/city_mas/dto/create.dto.ts:48\n                        \n                    \n\n            \n                \n                    The ID of the state to which the city belongs.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@MaxLength(20)@ApiProperty({type: String, description: 'City name', example: 'Surat', maxLength: 20})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/city_mas/dto/create.dto.ts:34\n                        \n                    \n\n            \n                \n                    The name of the city (e.g., 'Surat').\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNumber()@ApiProperty({type: Number, description: 'Status of the city', example: 1, default: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/city_mas/dto/create.dto.ts:76\n                        \n                    \n\n            \n                \n                    The status of the city (e.g., 1 for active).\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude({toPlainOnly: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/city_mas/dto/create.dto.ts:86\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nimport { Exclude } from 'class-transformer';\nimport { IsDefined, IsNotEmpty, IsString, MaxLength, IsOptional, IsNumber } from 'class-validator';\n\n/**\n * @fileoverview\n * This file defines the `CityDto` class, which represents the data transfer object (DTO)\n * used for creating a new city record. It includes validation rules and transformation logic\n * for the properties of the city.\n *\n * @module\n * @description\n * The `CityDto` class ensures that the data provided for creating a city adheres to\n * specified validation rules and formats. It uses decorators from `class-validator` for validation\n * and `class-transformer` for transforming input data.\n */\n\nexport class CityDto {\n    /**\n     * The name of the city (e.g., 'Surat').\n     * @example 'Surat'\n     */\n    @IsDefined()\n    @IsNotEmpty()\n    @IsString()\n    @MaxLength(20)\n    @ApiProperty({\n        type: String,\n        description: 'City name',\n        example: 'Surat',\n        maxLength: 20,\n    })\n    name: string;\n\n    /**\n     * The ID of the state to which the city belongs.\n     * @example '09407516-c0ac-4298-a6a7-59f48b87c094'\n     */\n    @IsDefined()\n    @IsNotEmpty()\n    @IsString()\n    @ApiProperty({\n        type: String,\n        description: 'State ID',\n        example: '09407516-c0ac-4298-a6a7-59f48b87c094',\n    })\n    id_state: string;\n\n    /**\n     * The ID of the Country to which the city belongs.\n     * @example 'f2d90547-a09a-4baa-a9f4-244e44a80875'\n     */\n    @IsDefined()\n    @IsNotEmpty()\n    @IsString()\n    @ApiProperty({\n        type: String,\n        description: 'Country ID',\n        example: 'f2d90547-a09a-4baa-a9f4-244e44a80875',\n    })\n    id_country: string;\n\n    /**\n     * The status of the city (e.g., 1 for active).\n     * @example 1\n     */\n    @IsOptional()\n    @IsNumber()\n    @ApiProperty({\n        type: Number,\n        description: 'Status of the city',\n        example: 1,\n        default: 1,\n    })\n    status?: number;\n\n    /**\n     * The unique identifier for the city.\n     * This property is excluded from the plain representation of the object.\n     */\n    @Exclude({ toPlainOnly: true })\n    id_city?: string;\n\n    @Exclude({ toPlainOnly: true })\n    updated_at?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CityModule.html":{"url":"modules/CityModule.html","title":"module - CityModule","body":"\n                   \n\n\n\n\n    Modules\n    CityModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CityModule\n\n\n\ncluster_CityModule_exports\n\n\n\ncluster_CityModule_providers\n\n\n\n\nCityService \n\nCityService \n\n\n\nCityModule\n\nCityModule\n\nCityService  -->\n\nCityModule->CityService \n\n\n\n\n\nCityService\n\nCityService\n\nCityModule -->\n\nCityService->CityModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/master/city_mas/cities.modules.ts\n        \n\n\n\n        \n            Description\n        \n        \n            This file defines the CityModule, which bundles the CityController and CityService together.\nThe CityModule is responsible for handling city-related operations. It provides the necessary controllers and services to manage City.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CityService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CityController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CityService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { CityController } from './cities.controller';\nimport { CityService } from './cities.service';\nimport { Query } from './query';\n\n/**\n * @fileoverview\n * This file defines the `CityModule`, which bundles the `CityController` and `CityService` together.\n *\n * @module\n * @description\n * The `CityModule` is responsible for handling city-related operations. It provides the necessary controllers and services to manage City.\n */\n@Module({\n    controllers: [CityController],\n    providers: [CityService, Query],\n    exports: [CityService],\n})\nexport class CityModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CityService.html":{"url":"injectables/CityService.html","title":"injectable - CityService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CityService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/city_mas/cities.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service class for managing city data.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                MODULE\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(paginationService: PaginationService, prisma: PrismaService, query: Query, utilsService: UtilsService, commonQuery: CommonQuery5)\n                    \n                \n                        \n                            \n                                Defined in src/modules/master/city_mas/cities.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        paginationService\n                                                  \n                                                        \n                                                                        PaginationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        query\n                                                  \n                                                        \n                                                                        Query\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        utilsService\n                                                  \n                                                        \n                                                                        UtilsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        commonQuery\n                                                  \n                                                        \n                                                                    CommonQuery5\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createDto: CityDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/city_mas/cities.service.ts:40\n                        \n                    \n\n\n            \n                \n                        Creates a new city.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createDto\n                                            \n                                                            CityDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data required to create a new city.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The created city object.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/city_mas/cities.service.ts:217\n                        \n                    \n\n\n            \n                \n                        Deletes a city by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the city to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                An object indicating the deletion result.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(paginationQuery: PaginationQueryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/city_mas/cities.service.ts:103\n                        \n                    \n\n\n            \n                \n                        Retrieves a list of cities with pagination.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                paginationQuery\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe pagination and filtering parameters.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                A paginated list of cities.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/city_mas/cities.service.ts:203\n                        \n                    \n\n\n            \n                \n                        Retrieves a single city by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the city to retrieve.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The city object.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateDto: UpdateDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/city_mas/cities.service.ts:67\n                        \n                    \n\n\n            \n                \n                        Updates an existing city by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the city to be updated.\n\n\n                                            \n                                        \n                                        \n                                                updateDto\n                                            \n                                                            UpdateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The updated city object or null if not found.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        MODULE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/master/city_mas/cities.service.ts:21\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, HttpException, HttpStatus } from '@nestjs/common';\n\nimport { CommonQuery5 } from '@app/common/helper/services/comman.query';\nimport { IPaginationFieldConfig } from '@app/utils/types/pagination-options';\nimport { PaginationService } from '@services/pagination.service';\nimport { PrismaService } from '@services/prisma.service';\nimport { UtilsService } from '@services/util.service';\nimport { PaginationResponseDto } from '@utils/dto/pagination-response.dto';\nimport { PaginationQueryDto } from '@utils/dto/pagination.dto';\n\nimport { Cities } from './dto/cities.dto';\nimport { CityDto } from './dto/create.dto';\nimport { UpdateDto } from './dto/update.dto';\nimport { Query } from './query';\n\n/**\n * Service class for managing city data.\n */\n@Injectable()\nexport class CityService {\n    private readonly MODULE: string;\n\n    constructor(\n        private readonly paginationService: PaginationService,\n        private readonly prisma: PrismaService,\n        private readonly query: Query,\n        private readonly utilsService: UtilsService,\n        private commonQuery: CommonQuery5\n    ) {\n        this.commonQuery = new CommonQuery5('city_mas', ['id_city', 'name', 'status']);\n        this.MODULE = 'city';\n    }\n\n    /**\n     * Creates a new city.\n     * @param {CityDto} createDto - The data required to create a new city.\n     * @returns {Promise} The created city object.\n     * @throws {HttpException} If a city with the same name already exists or if an error occurs.\n     */\n    async create(createDto: CityDto): Promise {\n        const find = await this.prisma.executeRawQuery(this.query.findByName(), createDto);\n\n        if (find) {\n            throw new HttpException({ message: 'NAME ALREADY EXISTS' }, HttpStatus.CONFLICT);\n        }\n\n        const inserted = await this.prisma.executeRawQuery(this.query.insert(), createDto);\n\n        if (inserted && inserted.insertid) {\n            const get = await this.findOne(inserted.insertid);\n            return get as any;\n        } else {\n            throw new HttpException(\n                { message: 'Something went wrong' },\n                HttpStatus.INTERNAL_SERVER_ERROR\n            );\n        }\n    }\n\n    /**\n     * Updates an existing city by its ID.\n     * @param {string} id - The ID of the city to be updated.\n     * @param {UpdateDto} payload - The data to update the city with.\n     * @returns {Promise} The updated city object or null if not found.\n     * @throws {HttpException} If the city is not found or if an error occurs.\n     */\n    async update(id: string, updateDto: UpdateDto): Promise {\n        if (id == undefined && Object.keys(updateDto).length === 0) {\n            throw new HttpException(\n                {\n                    message: 'Nothing to be update!',\n                },\n                HttpStatus.BAD_REQUEST\n            );\n        }\n        //check Data is Exits or not\n        const recordExits = await this.findOne(id);\n        if (recordExits) {\n            updateDto.id_city = id;\n            updateDto.updated_at = new Date().toISOString();\n            //update\n            const updated = await this.prisma.executeRawQuery(this.query.update(), updateDto);\n\n            if (updated && updated[0].updatedid) {\n                const get = await this.findOne(updated[0].updatedid);\n                return get as any;\n            } else {\n                throw new HttpException(\n                    { message: 'Something went wrong' },\n                    HttpStatus.INTERNAL_SERVER_ERROR\n                );\n            }\n        } else {\n            throw new HttpException({ message: 'city not found' }, HttpStatus.NOT_FOUND);\n        }\n    }\n\n    /**\n     * Retrieves a list of cities with pagination.\n     * @param {PaginationQueryDto} paginationQuery - The pagination and filtering parameters.\n     * @returns {Promise>} A paginated list of cities.\n     */\n    async findAll(paginationQuery: PaginationQueryDto): Promise> {\n        // const commonQuery = new CommonQuery5('city_mas', ['id_city', 'name', 'status']);\n        // const queryConfig = this.commonQuery.findWithDynamicJoin3(\n        //     [\n        //         {\n        //             table: 'state_mas',\n        //             condition: 'id_state=id_state', // Specify the join condition\n        //             type: 'JOIN',\n        //             selectFields: ['name', 'status'], // Specify fields to select from another_table\n        //             additionalConditions: ['status=1'],\n        //         },\n        //         {\n        //             table: 'country_mas',\n        //             condition: 'id_country=id_country', // Specify the join condition\n        //             selectFields: ['name', 'status'], // Specify fields to select from yet_another_table\n        //             additionalConditions: ['status=1'],\n        //         },\n        //     ]\n        //     //'country_mas.status=1 AND state_mas.status=1'\n        // );\n        // // const sqlQuery = queryConfig.syntax;\n        // console.log('Query Config:', JSON.stringify(queryConfig, null, 2));\n        // if (typeof queryConfig.syntax !== 'function') {\n        //     throw new Error('Syntax function is not defined.');\n        // }\n\n        // // Call the syntax method to generate the actual SQL query string\n        // const sqlQuery = queryConfig.syntax(1);\n\n        // // Log the generated SQL query\n        // console.log('Generated SQL Query:', sqlQuery);\n        const baseQuery = [\n            'ptbl.id_city',\n            'ptbl.name',\n            'ptbl.id_state',\n            'ptbl.id_country',\n            'ptbl.status',\n        ];\n        const fromQuery = ` FROM city_mas as ptbl`;\n\n        const fieldConfigs: Record = {\n            id_country: {\n                joinTable: (alias: string) =>\n                    `JOIN country_mas ${alias} ON ${alias}.id_country = ptbl.id_country`,\n                alias: () => `c${0}`,\n                selectFields: (alias: string) => [`${alias}.name as country_name`],\n            },\n            id_state: {\n                joinTable: (alias: string) =>\n                    `JOIN state_mas ${alias} ON ${alias}.id_state = ptbl.id_state`,\n                alias: () => `c${0}`,\n                selectFields: (alias: string) => [`${alias}.name as state_name`],\n            },\n        };\n\n        const { selectQuery, countQuery } = this.utilsService.buildDynamicQuery(\n            paginationQuery,\n            fieldConfigs,\n            baseQuery,\n            fromQuery,\n            'ptbl.id_city'\n        );\n\n        return this.paginationService.paginate(selectQuery, countQuery, paginationQuery);\n    }\n\n    // async getRecordsWithJoins(id: number): Promise {\n    //     const queryConfig = this.commonQuery.findWithDynamicJoin1(\n    //         [\n    //             {\n    //                 table: 'state_mas',\n    //                 condition: 'id_state=id_state', // Specify the join condition\n    //                 type: 'JOIN',\n    //                 selectFields: ['name', 'status'], // Specify fields to select from another_table\n    //             },\n    //             {\n    //                 table: 'country_mas',\n    //                 condition: 'id_country=id_country', // Specify the join condition\n    //                 selectFields: ['name', 'status'], // Specify fields to select from yet_another_table\n    //             },\n    //         ],\n    //         'country_mas.status=1 AND state_mas.status=1'\n    //     );\n\n    //     // You can now use the generated SQL query in your database access layer\n    //     const sqlQuery = queryConfig.syntax(id); // This generates the actual SQL query string\n    //     console.log(sqlQuery); // Log the SQL query for debugging or execution\n\n    //     // Execute the SQL query using your preferred database library (e.g., TypeORM, Sequelize)\n    //     // For example, if using TypeORM:\n    //     // return await this.dataSource.query(sqlQuery);\n\n    //     return sqlQuery; // Just for demonstration; replace with actual execution\n    // }\n    /**\n     * Retrieves a single city by its ID.\n     * @param {string} id - The ID of the city to retrieve.\n     * @returns {Promise} The city object.\n     * @throws {HttpException} If the city is not found.\n     */\n    async findOne(id: string): Promise {\n        const result = await this.prisma.executeRawQuery(this.query.findById(), { id });\n        if (!result) {\n            throw new HttpException({ message: 'City not found' }, HttpStatus.NOT_FOUND);\n        }\n        return result as any;\n    }\n\n    /**\n     * Deletes a city by its ID.\n     * @param {string} id - The ID of the city to delete.\n     * @returns {Promise} An object indicating the deletion result.\n     * @throws {HttpException} If an error occurs during deletion.\n     */\n    async delete(id: string): Promise {\n        const deleted = await this.prisma.executeRawQuery(this.query.delete(), id);\n\n        if (deleted && deleted[0].deletedid) {\n            return deleted;\n        } else {\n            throw new HttpException(\n                { message: 'Something went wrong' },\n                HttpStatus.INTERNAL_SERVER_ERROR\n            );\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CommaSeparated.html":{"url":"injectables/CommaSeparated.html","title":"injectable - CommaSeparated","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CommaSeparated\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/filter.validator.ts\n        \n\n\n            \n                Description\n            \n            \n                Custom validator for checking if a string is a valid comma-separated list of numbers.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/validators/filter.validator.ts:47\n                        \n                    \n\n\n            \n                \n                        Default error message when validation fails.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe validation arguments.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \nThe error message.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(propertyValue: string, args: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/validators/filter.validator.ts:28\n                        \n                    \n\n\n            \n                \n                        Validates if the given value is a comma-separated list of numbers.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                propertyValue\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe value to be validated.\n\n\n                                            \n                                        \n                                        \n                                                args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe validation arguments.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \nReturns true if valid; otherwise, false.\n\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\nimport {\n    ValidatorConstraint,\n    ValidatorConstraintInterface,\n    ValidationArguments,\n} from 'class-validator';\n\n/**\n * Custom validator for checking if a string is a valid comma-separated list of numbers.\n *\n * @export\n * @class CommaSeparated\n * @implements {ValidatorConstraintInterface}\n */\n@Injectable()\n@ValidatorConstraint({ name: 'CommaSeparated', async: false })\nexport class CommaSeparated implements ValidatorConstraintInterface {\n    /**\n     * Validates if the given value is a comma-separated list of numbers.\n     *\n     * @param {string} propertyValue - The value to be validated.\n     * @param {ValidationArguments} args - The validation arguments.\n     * @returns {boolean} - Returns true if valid; otherwise, false.\n     */\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    validate(propertyValue: string, args: ValidationArguments): boolean {\n        //\n        //\n        const isValid = /^[0-9]+(,[0-9]+)*$/.test(propertyValue);\n\n        if (isValid) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Default error message when validation fails.\n     *\n     * @param {ValidationArguments} args - The validation arguments.\n     * @returns {string} - The error message.\n     */\n\n    defaultMessage(args: ValidationArguments): string {\n        return `Invalid ${args.property}`;\n    }\n}\n\n/**\n * Custom validator for checking if a string is in the correct \"field direction\" format.\n *\n * @export\n * @class SortBy\n * @implements {ValidatorConstraintInterface}\n */\n@Injectable()\n@ValidatorConstraint({ name: 'SortBy', async: false })\nexport class SortBy implements ValidatorConstraintInterface {\n    /**\n     * Validates if the given value is in the format of \"field direction\" where direction is \"ASC\" or \"DESC\".\n     *\n     * @param {string} value - The value to be validated.\n     * @param {ValidationArguments} args - The validation arguments.\n     * @returns {boolean} - Returns true if valid; otherwise, false.\n     */\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    validate(value: string, args: ValidationArguments): boolean {\n        // Split the input by spaces and validate each pair\n        const parts = value.split(' ');\n\n        // Ensure pairs of field direction (e.g., field direction, field direction, ...)\n        if (parts.length % 2 !== 0) {\n            return false;\n        }\n\n        // Regular expression to match valid field direction\n        const fieldRegex = /^[\\w]+$/;\n        const directionRegex = /^(ASC|DESC|asc|desc|Asc|Desc)$/;\n\n        // Iterate through pairs and validate\n        for (let i = 0; i \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommonQuery1.html":{"url":"classes/CommonQuery1.html","title":"class - CommonQuery1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommonQuery1\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/helper/services/comman.query.ts\n        \n\n\n            \n                Description\n            \n            \n                CommonQuery\nA generic class to handle SQL queries for different models. It provides methods for\nfinding, inserting, updating, and deleting records using DTOs.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                allowedKeys\n                            \n                            \n                                    Private\n                                model\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                createQuery\n                            \n                            \n                                delete\n                            \n                            \n                                findById\n                            \n                            \n                                findWithDynamicJoin\n                            \n                            \n                                    Private\n                                formatValue\n                            \n                            \n                                insert\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(model: string, allowedKeys: ()[])\n                    \n                \n                        \n                            \n                                Defined in src/common/helper/services/comman.query.ts:12\n                            \n                        \n\n                \n                    \n                            Constructor to initialize the CommonQuery class.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        model\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe name of the model/table for queries.\n\n\n                                                        \n                                                \n                                                \n                                                        allowedKeys\n                                                  \n                                                        \n                                                                    ()[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe keys of the DTO that are allowed in queries.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        allowedKeys\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ()[]\n\n                    \n                \n                    \n                        \n                                Defined in src/common/helper/services/comman.query.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        model\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/common/helper/services/comman.query.ts:11\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        createQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    createQuery(type: string, syntaxGenerator: (arg: any) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/helper/services/comman.query.ts:137\n                        \n                    \n\n\n            \n                \n                        Creates a query object with a specific type and syntax generator.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe type of query (e.g., SELECT_ONE, INSERT).\n\n\n                                            \n                                        \n                                        \n                                                syntaxGenerator\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nA function that generates the SQL syntax.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         object\n\n                        \n                            \n                                An object containing the query configuration.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete()\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/helper/services/comman.query.ts:82\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to delete a record by ID.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                An object containing the query configuration for deleting a record.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findById\n                        \n                    \n                \n            \n            \n                \nfindById()\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/helper/services/comman.query.ts:28\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to find a record by ID.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                An object containing the query configuration for finding by ID.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findWithDynamicJoin\n                        \n                    \n                \n            \n            \n                \nfindWithDynamicJoin(joins: Array)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/helper/services/comman.query.ts:99\n                        \n                    \n\n\n            \n                \n                        Finds records with dynamic joins, automatically creating aliases for each table.\nAllows specifying fields to select from joined tables.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                joins\n                                            \n                                                        Array\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nAn array of objects containing the table name, join condition, join type, and selected fields.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         object\n\n                        \n                            \n                                An object containing the query configuration for finding with joins.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        formatValue\n                        \n                    \n                \n            \n            \n                \n                        \n                    formatValue(value: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/helper/services/comman.query.ts:150\n                        \n                    \n\n\n            \n                \n                        Formats a value for safe SQL query insertion.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe value to format.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A string representation of the formatted value.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        insert\n                        \n                    \n                \n            \n            \n                \ninsert()\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/helper/services/comman.query.ts:43\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to insert a new record.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                An object containing the query configuration for inserting a record.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate()\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/helper/services/comman.query.ts:60\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to update an existing record.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                An object containing the query configuration for updating a record.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as _ from 'lodash';\n\n/**\n * CommonQuery\n *\n * @description\n * A generic class to handle SQL queries for different models. It provides methods for\n * finding, inserting, updating, and deleting records using DTOs.\n */\nexport class CommonQuery1 {\n    private model: string; // The name of the database table/model\n    private allowedKeys: (keyof T)[]; // List of keys that can be used in queries\n\n    /**\n     * Constructor to initialize the CommonQuery class.\n     * @param model - The name of the model/table for queries.\n     * @param allowedKeys - The keys of the DTO that are allowed in queries.\n     */\n    constructor(model: string, allowedKeys: (keyof T)[]) {\n        this.model = model;\n        this.allowedKeys = allowedKeys;\n    }\n\n    /**\n     * Generates a SQL query to find a record by ID.\n     * @returns An object containing the query configuration for finding by ID.\n     */\n    findById(): object {\n        return this.createQuery(\n            'SELECT_ONE',\n            (id: number) => `\n            SELECT ${this.allowedKeys.join(', ')}\n            FROM ${this.model} AS main\n            WHERE main.status = 1 AND main.id = ${this.formatValue(id)};\n        `\n        );\n    }\n\n    /**\n     * Generates a SQL query to insert a new record.\n     * @returns An object containing the query configuration for inserting a record.\n     */\n    insert(): object {\n        return this.createQuery('INSERT', (dto: T) => {\n            const conds = _.pick(dto, this.allowedKeys);\n            const keys = Object.keys(conds);\n            const values = keys.map((key) => this.formatValue(conds[key]));\n\n            return `\n                INSERT INTO ${this.model} (${keys.join(', ')})\n                VALUES (${values.join(', ')}) RETURNING *;\n            `;\n        });\n    }\n\n    /**\n     * Generates a SQL query to update an existing record.\n     * @returns An object containing the query configuration for updating a record.\n     */\n    update(): object {\n        return this.createQuery('UPDATE', (dto: T) => {\n            const id = _.get(dto, 'id');\n            _.unset(dto, 'id'); // Remove the ID for the update\n            const updateData = _.pick(dto, this.allowedKeys);\n\n            const setClauses = Object.entries(updateData)\n                .map(([key, value]) => `${key} = ${this.formatValue(value)}`)\n                .join(', ');\n\n            return `\n                UPDATE ${this.model}\n                SET ${setClauses}\n                WHERE id = ${this.formatValue(id)} RETURNING *;\n            `;\n        });\n    }\n\n    /**\n     * Generates a SQL query to delete a record by ID.\n     * @returns An object containing the query configuration for deleting a record.\n     */\n    delete(): object {\n        return this.createQuery(\n            'UPDATE',\n            (id: number) => `\n            UPDATE ${this.model}\n            SET status = 127\n            WHERE id = ${this.formatValue(id)} RETURNING *;\n        `\n        );\n    }\n\n    /**\n     * Finds records with dynamic joins, automatically creating aliases for each table.\n     * Allows specifying fields to select from joined tables.\n     * @param joins - An array of objects containing the table name, join condition, join type, and selected fields.\n     * @returns An object containing the query configuration for finding with joins.\n     */\n    findWithDynamicJoin(\n        joins: Array\n    ): object {\n        return this.createQuery('SELECT_WITH_DYNAMIC_JOIN', (id: number) => {\n            const fields = this.allowedKeys.join(', ');\n            const joinClauses = joins\n                .map((join, index) => {\n                    const alias = `table${index + 1}`; // Create an alias like table1, table2, etc.\n                    const joinType = join.type ? join.type : 'JOIN'; // Default to INNER JOIN if no type is specified\n\n                    // Select specific fields from the joined table\n                    const selectFields = join.selectFields\n                        ? join.selectFields.map((field) => `${alias}.${field}`).join(', ')\n                        : '';\n                    return `${joinType} ${join.table} AS ${alias} ON ${join.condition}${selectFields ? `, ${selectFields}` : ''}`;\n                })\n                .join(' ');\n\n            return `\n                SELECT ${fields}, ${joins.map((join, index) => (join.selectFields ? join.selectFields.map((field) => `table${index + 1}.${field}`).join(', ') : '')).join(', ')}\n                FROM ${this.model} AS main\n                ${joinClauses}\n                WHERE main.status = 1 AND main.id = ${this.formatValue(id)};\n            `;\n        });\n    }\n\n    /**\n     * Creates a query object with a specific type and syntax generator.\n     * @param type - The type of query (e.g., SELECT_ONE, INSERT).\n     * @param syntaxGenerator - A function that generates the SQL syntax.\n     * @returns An object containing the query configuration.\n     */\n    private createQuery(type: string, syntaxGenerator: (arg: any) => string): object {\n        return {\n            name: type.toLowerCase(),\n            type,\n            syntax: syntaxGenerator,\n        };\n    }\n\n    /**\n     * Formats a value for safe SQL query insertion.\n     * @param value - The value to format.\n     * @returns A string representation of the formatted value.\n     */\n    private formatValue(value: any): string {\n        if (Array.isArray(value)) {\n            const formattedArray = value.map((v) => `'${v.replace(/'/g, \"''\")}'`).join(', ');\n            return `'{${formattedArray}}'`;\n        } else if (typeof value === 'string') {\n            return `'${value.replace(/'/g, \"''\")}'`;\n        } else if (value === null || value === undefined) {\n            return 'NULL';\n        } else {\n            return `${value}`; // For numbers and other types\n        }\n    }\n    // commonQuery = new CommonQuery('your_table', ['id', 'name', 'status']);\n    // queryConfig = commonQuery.findWithDynamicJoin([\n    //     {\n    //         table: 'another_table',\n    //         condition: 'another_table.foreign_key = main.id',\n    //         type: 'LEFT JOIN',\n    //         selectFields: ['field1', 'field2'], // Specify fields to select from another_table\n    //     },\n    //     {\n    //         table: 'yet_another_table',\n    //         condition: 'yet_another_table.foreign_key = main.id',\n    //         selectFields: ['field3', 'field4'], // Specify fields to select from yet_another_table\n    //     },\n    // ]);\n}\n/**\n * CommonQuery\n *\n * @description\n * A generic class to handle SQL queries for different models. It provides methods for\n * finding, inserting, updating, and deleting records using DTOs.\n */\n\n/**\n * CommonQuery\n *\n * @description\n * A generic class to handle SQL queries for different models. It provides methods for\n * finding, inserting, updating, and deleting records using DTOs.\n */\nexport class CommonQuery5 {\n    private model: string; // The name of the database table/model\n    private allowedKeys: (keyof T)[]; // List of keys that can be used in queries\n\n    /**\n     * Constructor to initialize the CommonQuery class.\n     * @param model - The name of the model/table for queries.\n     * @param allowedKeys - The keys of the DTO that are allowed in queries.\n     */\n    constructor(model: string, allowedKeys: (keyof T)[]) {\n        this.model = model;\n        this.allowedKeys = allowedKeys;\n    }\n\n    /**\n     * Finds records with dynamic joins, automatically creating aliases for each table.\n     * @param joins - An array of objects containing the table name, join condition, join type, and selected fields.\n     * @returns An object containing the query configuration for finding with joins.\n     */\n    findWithDynamicJoin(\n        joins: Array\n    ): object {\n        return this.createQuery('SELECT_WITH_DYNAMIC_JOIN', (id: number) => {\n            const fields = this.allowedKeys.join(', ');\n            const mainAlias = 'main'; // Alias for the main table\n            const joinClauses = joins\n                .map((join, index) => {\n                    const joinAlias = `table${index + 1}`; // Create an alias like table1, table2, etc.\n                    const joinType = join.type ? join.type : 'JOIN'; // Default to INNER JOIN if no type is specified\n\n                    // Split the condition to derive the join fields\n                    const [foreignKey, mainField] = join.condition\n                        .split('=')\n                        .map((part) => part.trim());\n                    const condition = `${join.table}.${foreignKey} = ${mainAlias}.${mainField}`;\n\n                    return `${joinType} ${join.table} AS ${joinAlias} ON ${condition}`;\n                })\n                .join(' ');\n\n            return `\n                SELECT ${fields}, \n                ${joins\n                    .map((join, index) => {\n                        const alias = `table${index + 1}`;\n                        return join.selectFields\n                            ? join.selectFields.map((field) => `${alias}.${field}`).join(', ')\n                            : '';\n                    })\n                    .filter((field) => field)\n                    .join(', ')} \n                FROM ${this.model} AS ${mainAlias}\n                ${joinClauses}\n                WHERE ${mainAlias}.status = 1 AND ${mainAlias}.id = ${this.formatValue(id)};\n            `;\n        });\n    }\n\n    findWithDynamicJoin1(\n        joins: Array,\n        additionalConditions?: string // Additional dynamic WHERE conditions\n    ): QueryConfig {\n        // Specify the return type\n        return {\n            name: `SELECT_WITH_DYNAMIC_JOIN`,\n            type: `join`,\n            syntax: (id: number) => {\n                // Accept id as a parameter\n                const fields = this.allowedKeys.join(', ');\n                const mainAlias = 'main'; // Alias for the main table\n                const joinClauses = joins\n                    .map((join, index) => {\n                        const joinAlias = `table${index + 1}`; // Create an alias like table1, table2, etc.\n                        const joinType = join.type ? join.type : 'JOIN'; // Default to INNER JOIN if no type is specified\n\n                        // Split the condition to derive the join fields\n                        const [foreignKey, mainField] = join.condition\n                            .split('=')\n                            .map((part) => part.trim());\n                        const condition = `${join.table}.${foreignKey} = ${mainAlias}.${mainField}`;\n\n                        return `${joinType} ${join.table} AS ${joinAlias} ON ${condition}`;\n                    })\n                    .join(' ');\n\n                // Start building the WHERE clause\n                const baseWhere = `${mainAlias}.status = 1 AND ${mainAlias}.id = ${this.formatValue(id)}`;\n                const dynamicWhere = additionalConditions ? `AND ${additionalConditions}` : '';\n\n                return `\n            SELECT ${fields}, \n            ${joins\n                .map((join, index) => {\n                    const alias = `table${index + 1}`;\n                    return join.selectFields\n                        ? join.selectFields.map((field) => `${alias}.${field}`).join(', ')\n                        : '';\n                })\n                .filter((field) => field)\n                .join(', ')} \n            FROM ${this.model} AS ${mainAlias}\n            ${joinClauses}\n            WHERE ${baseWhere} ${dynamicWhere};\n            `;\n            },\n        };\n    }\n\n    findWithDynamicJoin2(\n        joins: Array,\n        additionalConditions?: string // Additional dynamic WHERE conditions\n    ): QueryConfig {\n        return {\n            name: `SELECT_WITH_DYNAMIC_JOIN`,\n            type: `join,`,\n            syntax: () => {\n                const mainAlias = 'main';\n                // const fields = this.allowedKeys.join(', ');\n                const fields = this.allowedKeys\n                    .map((field) => `${mainAlias}.${String(field)}`) // Ensure conversion to string\n                    .join(', '); // Alias for the main table\n                const joinClauses = joins\n                    .map((join, index) => {\n                        const joinAlias = `table${index + 1}`; // Create an alias like table1, table2, etc.\n                        const joinType = join.type ? join.type : 'JOIN'; // Default to INNER JOIN if no type is specified\n\n                        // Split the condition to derive the join fields\n                        const [foreignKey, mainField] = join.condition\n                            .split('=')\n                            .map((part) => part.trim());\n                        const condition = `${joinAlias}.${foreignKey} = ${mainAlias}.${mainField}`;\n\n                        return `${joinType} ${join.table} AS ${joinAlias} ON ${condition}`;\n                    })\n                    .join(' ');\n\n                // Start building the WHERE clause\n                const baseWhere = `${mainAlias}.status = 1`;\n                const dynamicWhere = additionalConditions ? `AND ${additionalConditions}` : '';\n\n                return `\n            SELECT ${fields}, \n            ${joins\n                .map((join, index) => {\n                    const alias = `table${index + 1}`;\n                    return join.selectFields\n                        ? join.selectFields.map((field) => `${alias}.${field}`).join(', ')\n                        : '';\n                })\n                .filter((field) => field)\n                .join(', ')} \n            FROM ${this.model} AS ${mainAlias}\n            ${joinClauses}\n            WHERE ${baseWhere} ${dynamicWhere};\n        `;\n            },\n        };\n    }\n    findWithDynamicJoin3(\n        joins: Array,\n        baseAdditionalConditions?: string // Additional conditions for the main WHERE clause\n    ): QueryConfig {\n        return {\n            name: `SELECT_WITH_DYNAMIC_JOIN`,\n            type: `join`,\n            syntax: () => {\n                const mainAlias = 'main';\n                const fields = this.allowedKeys\n                    .map((field) => `${mainAlias}.${String(field)}`)\n                    .join(', ');\n\n                const joinClauses = joins\n                    .map((join, index) => {\n                        const joinAlias = `table${index + 1}`;\n                        const joinType = join.type ? join.type : 'JOIN';\n\n                        const [foreignKey, mainField] = join.condition\n                            .split('=')\n                            .map((part) => part.trim());\n                        const condition = `${joinAlias}.${foreignKey} = ${mainAlias}.${mainField}`;\n\n                        // Add dynamic conditions for the current join\n                        const dynamicJoinConditions = join.additionalConditions\n                            ? join.additionalConditions\n                                  .map((cond) => `${joinAlias}.${cond}`)\n                                  .join(' AND ')\n                            : '';\n\n                        return `${joinType} ${join.table} AS ${joinAlias} ON ${condition}${dynamicJoinConditions ? ' AND ' + dynamicJoinConditions : ''}`;\n                    })\n                    .join(' ');\n\n                // Base where clause\n                const baseWhere = `${mainAlias}.status = 1`;\n                const dynamicWhere = baseAdditionalConditions\n                    ? `AND ${baseAdditionalConditions}`\n                    : '';\n\n                return `\n            SELECT ${fields}, \n            ${joins\n                .map((join, index) => {\n                    const alias = `table${index + 1}`;\n                    return join.selectFields\n                        ? join.selectFields.map((field) => `${alias}.${field}`).join(', ')\n                        : '';\n                })\n                .filter((field) => field)\n                .join(', ')} \n            FROM ${this.model} AS ${mainAlias}\n            ${joinClauses}\n            WHERE ${baseWhere} ${dynamicWhere};\n        `;\n            },\n        };\n    }\n\n    /**\n     * Creates a query object with a specific type and syntax generator.\n     * @param type - The type of query (e.g., SELECT_ONE, INSERT).\n     * @param syntaxGenerator - A function that generates the SQL syntax.\n     * @returns An object containing the query configuration.\n     */\n    private createQuery(type: string, syntaxGenerator: (arg: any) => string): object {\n        return {\n            name: type.toLowerCase(),\n            type,\n            syntax: syntaxGenerator, // This is a function\n        };\n    }\n\n    // private createQuery(type: string, syntaxGenerator: (arg: any) => string): object {\n    //     return {\n    //         name: type.toLowerCase(),\n    //         type,\n    //         syntax: syntaxGenerator,\n    //     };\n    // }\n\n    /**\n     * Formats a value for safe SQL query insertion.\n     * @param value - The value to format.\n     * @returns A string representation of the formatted value.\n     */\n    private formatValue(value: any): string {\n        if (Array.isArray(value)) {\n            const formattedArray = value.map((v) => `'${v.replace(/'/g, \"''\")}'`).join(', ');\n            return `'{${formattedArray}}'`;\n        } else if (typeof value === 'string') {\n            return `'${value.replace(/'/g, \"''\")}'`;\n        } else if (value === null || value === undefined) {\n            return 'NULL';\n        } else {\n            return `${value}`; // For numbers and other types\n        }\n    }\n    // commonQuery = new CommonQuery('your_table', ['id', 'name', 'status']);\n    // queryConfig = commonQuery.findWithDynamicJoin([\n    //     {\n    //         table: 'another_table',\n    //         condition: 'foreign_key=id', // Specify the join condition\n    //         type: 'LEFT JOIN',\n    //         selectFields: ['field1', 'field2'], // Specify fields to select from another_table\n    //     },\n    //     {\n    //         table: 'yet_another_table',\n    //         condition: 'foreign_key=id', // Specify the join condition\n    //         selectFields: ['field3', 'field4'], // Specify fields to select from yet_another_table\n    //     },\n    // ]);\n}\ninterface QueryConfig {\n    name: string;\n    type: string;\n    syntax: (id: number) => string; // Method to generate SQL\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommonQuery5.html":{"url":"classes/CommonQuery5.html","title":"class - CommonQuery5","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommonQuery5\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/helper/services/comman.query.ts\n        \n\n\n            \n                Description\n            \n            \n                CommonQuery\nA generic class to handle SQL queries for different models. It provides methods for\nfinding, inserting, updating, and deleting records using DTOs.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                allowedKeys\n                            \n                            \n                                    Private\n                                model\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                createQuery\n                            \n                            \n                                findWithDynamicJoin\n                            \n                            \n                                findWithDynamicJoin1\n                            \n                            \n                                findWithDynamicJoin2\n                            \n                            \n                                findWithDynamicJoin3\n                            \n                            \n                                    Private\n                                formatValue\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(model: string, allowedKeys: ()[])\n                    \n                \n                        \n                            \n                                Defined in src/common/helper/services/comman.query.ts:194\n                            \n                        \n\n                \n                    \n                            Constructor to initialize the CommonQuery class.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        model\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe name of the model/table for queries.\n\n\n                                                        \n                                                \n                                                \n                                                        allowedKeys\n                                                  \n                                                        \n                                                                    ()[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe keys of the DTO that are allowed in queries.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        allowedKeys\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ()[]\n\n                    \n                \n                    \n                        \n                                Defined in src/common/helper/services/comman.query.ts:194\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        model\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/common/helper/services/comman.query.ts:193\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        createQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    createQuery(type: string, syntaxGenerator: (arg: any) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/helper/services/comman.query.ts:436\n                        \n                    \n\n\n            \n                \n                        Creates a query object with a specific type and syntax generator.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe type of query (e.g., SELECT_ONE, INSERT).\n\n\n                                            \n                                        \n                                        \n                                                syntaxGenerator\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nA function that generates the SQL syntax.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         object\n\n                        \n                            \n                                An object containing the query configuration.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findWithDynamicJoin\n                        \n                    \n                \n            \n            \n                \nfindWithDynamicJoin(joins: Array)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/helper/services/comman.query.ts:211\n                        \n                    \n\n\n            \n                \n                        Finds records with dynamic joins, automatically creating aliases for each table.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                joins\n                                            \n                                                        Array\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nAn array of objects containing the table name, join condition, join type, and selected fields.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         object\n\n                        \n                            \n                                An object containing the query configuration for finding with joins.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findWithDynamicJoin1\n                        \n                    \n                \n            \n            \n                \nfindWithDynamicJoin1(joins: Array, additionalConditions?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/helper/services/comman.query.ts:255\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                joins\n                                            \n                                                        Array\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalConditions\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         QueryConfig\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findWithDynamicJoin2\n                        \n                    \n                \n            \n            \n                \nfindWithDynamicJoin2(joins: Array, additionalConditions?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/helper/services/comman.query.ts:310\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                joins\n                                            \n                                                        Array\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalConditions\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         QueryConfig\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findWithDynamicJoin3\n                        \n                    \n                \n            \n            \n                \nfindWithDynamicJoin3(joins: Array, baseAdditionalConditions?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/helper/services/comman.query.ts:365\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                joins\n                                            \n                                                        Array\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                baseAdditionalConditions\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         QueryConfig\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        formatValue\n                        \n                    \n                \n            \n            \n                \n                        \n                    formatValue(value: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/helper/services/comman.query.ts:457\n                        \n                    \n\n\n            \n                \n                        Formats a value for safe SQL query insertion.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe value to format.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A string representation of the formatted value.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as _ from 'lodash';\n\n/**\n * CommonQuery\n *\n * @description\n * A generic class to handle SQL queries for different models. It provides methods for\n * finding, inserting, updating, and deleting records using DTOs.\n */\nexport class CommonQuery1 {\n    private model: string; // The name of the database table/model\n    private allowedKeys: (keyof T)[]; // List of keys that can be used in queries\n\n    /**\n     * Constructor to initialize the CommonQuery class.\n     * @param model - The name of the model/table for queries.\n     * @param allowedKeys - The keys of the DTO that are allowed in queries.\n     */\n    constructor(model: string, allowedKeys: (keyof T)[]) {\n        this.model = model;\n        this.allowedKeys = allowedKeys;\n    }\n\n    /**\n     * Generates a SQL query to find a record by ID.\n     * @returns An object containing the query configuration for finding by ID.\n     */\n    findById(): object {\n        return this.createQuery(\n            'SELECT_ONE',\n            (id: number) => `\n            SELECT ${this.allowedKeys.join(', ')}\n            FROM ${this.model} AS main\n            WHERE main.status = 1 AND main.id = ${this.formatValue(id)};\n        `\n        );\n    }\n\n    /**\n     * Generates a SQL query to insert a new record.\n     * @returns An object containing the query configuration for inserting a record.\n     */\n    insert(): object {\n        return this.createQuery('INSERT', (dto: T) => {\n            const conds = _.pick(dto, this.allowedKeys);\n            const keys = Object.keys(conds);\n            const values = keys.map((key) => this.formatValue(conds[key]));\n\n            return `\n                INSERT INTO ${this.model} (${keys.join(', ')})\n                VALUES (${values.join(', ')}) RETURNING *;\n            `;\n        });\n    }\n\n    /**\n     * Generates a SQL query to update an existing record.\n     * @returns An object containing the query configuration for updating a record.\n     */\n    update(): object {\n        return this.createQuery('UPDATE', (dto: T) => {\n            const id = _.get(dto, 'id');\n            _.unset(dto, 'id'); // Remove the ID for the update\n            const updateData = _.pick(dto, this.allowedKeys);\n\n            const setClauses = Object.entries(updateData)\n                .map(([key, value]) => `${key} = ${this.formatValue(value)}`)\n                .join(', ');\n\n            return `\n                UPDATE ${this.model}\n                SET ${setClauses}\n                WHERE id = ${this.formatValue(id)} RETURNING *;\n            `;\n        });\n    }\n\n    /**\n     * Generates a SQL query to delete a record by ID.\n     * @returns An object containing the query configuration for deleting a record.\n     */\n    delete(): object {\n        return this.createQuery(\n            'UPDATE',\n            (id: number) => `\n            UPDATE ${this.model}\n            SET status = 127\n            WHERE id = ${this.formatValue(id)} RETURNING *;\n        `\n        );\n    }\n\n    /**\n     * Finds records with dynamic joins, automatically creating aliases for each table.\n     * Allows specifying fields to select from joined tables.\n     * @param joins - An array of objects containing the table name, join condition, join type, and selected fields.\n     * @returns An object containing the query configuration for finding with joins.\n     */\n    findWithDynamicJoin(\n        joins: Array\n    ): object {\n        return this.createQuery('SELECT_WITH_DYNAMIC_JOIN', (id: number) => {\n            const fields = this.allowedKeys.join(', ');\n            const joinClauses = joins\n                .map((join, index) => {\n                    const alias = `table${index + 1}`; // Create an alias like table1, table2, etc.\n                    const joinType = join.type ? join.type : 'JOIN'; // Default to INNER JOIN if no type is specified\n\n                    // Select specific fields from the joined table\n                    const selectFields = join.selectFields\n                        ? join.selectFields.map((field) => `${alias}.${field}`).join(', ')\n                        : '';\n                    return `${joinType} ${join.table} AS ${alias} ON ${join.condition}${selectFields ? `, ${selectFields}` : ''}`;\n                })\n                .join(' ');\n\n            return `\n                SELECT ${fields}, ${joins.map((join, index) => (join.selectFields ? join.selectFields.map((field) => `table${index + 1}.${field}`).join(', ') : '')).join(', ')}\n                FROM ${this.model} AS main\n                ${joinClauses}\n                WHERE main.status = 1 AND main.id = ${this.formatValue(id)};\n            `;\n        });\n    }\n\n    /**\n     * Creates a query object with a specific type and syntax generator.\n     * @param type - The type of query (e.g., SELECT_ONE, INSERT).\n     * @param syntaxGenerator - A function that generates the SQL syntax.\n     * @returns An object containing the query configuration.\n     */\n    private createQuery(type: string, syntaxGenerator: (arg: any) => string): object {\n        return {\n            name: type.toLowerCase(),\n            type,\n            syntax: syntaxGenerator,\n        };\n    }\n\n    /**\n     * Formats a value for safe SQL query insertion.\n     * @param value - The value to format.\n     * @returns A string representation of the formatted value.\n     */\n    private formatValue(value: any): string {\n        if (Array.isArray(value)) {\n            const formattedArray = value.map((v) => `'${v.replace(/'/g, \"''\")}'`).join(', ');\n            return `'{${formattedArray}}'`;\n        } else if (typeof value === 'string') {\n            return `'${value.replace(/'/g, \"''\")}'`;\n        } else if (value === null || value === undefined) {\n            return 'NULL';\n        } else {\n            return `${value}`; // For numbers and other types\n        }\n    }\n    // commonQuery = new CommonQuery('your_table', ['id', 'name', 'status']);\n    // queryConfig = commonQuery.findWithDynamicJoin([\n    //     {\n    //         table: 'another_table',\n    //         condition: 'another_table.foreign_key = main.id',\n    //         type: 'LEFT JOIN',\n    //         selectFields: ['field1', 'field2'], // Specify fields to select from another_table\n    //     },\n    //     {\n    //         table: 'yet_another_table',\n    //         condition: 'yet_another_table.foreign_key = main.id',\n    //         selectFields: ['field3', 'field4'], // Specify fields to select from yet_another_table\n    //     },\n    // ]);\n}\n/**\n * CommonQuery\n *\n * @description\n * A generic class to handle SQL queries for different models. It provides methods for\n * finding, inserting, updating, and deleting records using DTOs.\n */\n\n/**\n * CommonQuery\n *\n * @description\n * A generic class to handle SQL queries for different models. It provides methods for\n * finding, inserting, updating, and deleting records using DTOs.\n */\nexport class CommonQuery5 {\n    private model: string; // The name of the database table/model\n    private allowedKeys: (keyof T)[]; // List of keys that can be used in queries\n\n    /**\n     * Constructor to initialize the CommonQuery class.\n     * @param model - The name of the model/table for queries.\n     * @param allowedKeys - The keys of the DTO that are allowed in queries.\n     */\n    constructor(model: string, allowedKeys: (keyof T)[]) {\n        this.model = model;\n        this.allowedKeys = allowedKeys;\n    }\n\n    /**\n     * Finds records with dynamic joins, automatically creating aliases for each table.\n     * @param joins - An array of objects containing the table name, join condition, join type, and selected fields.\n     * @returns An object containing the query configuration for finding with joins.\n     */\n    findWithDynamicJoin(\n        joins: Array\n    ): object {\n        return this.createQuery('SELECT_WITH_DYNAMIC_JOIN', (id: number) => {\n            const fields = this.allowedKeys.join(', ');\n            const mainAlias = 'main'; // Alias for the main table\n            const joinClauses = joins\n                .map((join, index) => {\n                    const joinAlias = `table${index + 1}`; // Create an alias like table1, table2, etc.\n                    const joinType = join.type ? join.type : 'JOIN'; // Default to INNER JOIN if no type is specified\n\n                    // Split the condition to derive the join fields\n                    const [foreignKey, mainField] = join.condition\n                        .split('=')\n                        .map((part) => part.trim());\n                    const condition = `${join.table}.${foreignKey} = ${mainAlias}.${mainField}`;\n\n                    return `${joinType} ${join.table} AS ${joinAlias} ON ${condition}`;\n                })\n                .join(' ');\n\n            return `\n                SELECT ${fields}, \n                ${joins\n                    .map((join, index) => {\n                        const alias = `table${index + 1}`;\n                        return join.selectFields\n                            ? join.selectFields.map((field) => `${alias}.${field}`).join(', ')\n                            : '';\n                    })\n                    .filter((field) => field)\n                    .join(', ')} \n                FROM ${this.model} AS ${mainAlias}\n                ${joinClauses}\n                WHERE ${mainAlias}.status = 1 AND ${mainAlias}.id = ${this.formatValue(id)};\n            `;\n        });\n    }\n\n    findWithDynamicJoin1(\n        joins: Array,\n        additionalConditions?: string // Additional dynamic WHERE conditions\n    ): QueryConfig {\n        // Specify the return type\n        return {\n            name: `SELECT_WITH_DYNAMIC_JOIN`,\n            type: `join`,\n            syntax: (id: number) => {\n                // Accept id as a parameter\n                const fields = this.allowedKeys.join(', ');\n                const mainAlias = 'main'; // Alias for the main table\n                const joinClauses = joins\n                    .map((join, index) => {\n                        const joinAlias = `table${index + 1}`; // Create an alias like table1, table2, etc.\n                        const joinType = join.type ? join.type : 'JOIN'; // Default to INNER JOIN if no type is specified\n\n                        // Split the condition to derive the join fields\n                        const [foreignKey, mainField] = join.condition\n                            .split('=')\n                            .map((part) => part.trim());\n                        const condition = `${join.table}.${foreignKey} = ${mainAlias}.${mainField}`;\n\n                        return `${joinType} ${join.table} AS ${joinAlias} ON ${condition}`;\n                    })\n                    .join(' ');\n\n                // Start building the WHERE clause\n                const baseWhere = `${mainAlias}.status = 1 AND ${mainAlias}.id = ${this.formatValue(id)}`;\n                const dynamicWhere = additionalConditions ? `AND ${additionalConditions}` : '';\n\n                return `\n            SELECT ${fields}, \n            ${joins\n                .map((join, index) => {\n                    const alias = `table${index + 1}`;\n                    return join.selectFields\n                        ? join.selectFields.map((field) => `${alias}.${field}`).join(', ')\n                        : '';\n                })\n                .filter((field) => field)\n                .join(', ')} \n            FROM ${this.model} AS ${mainAlias}\n            ${joinClauses}\n            WHERE ${baseWhere} ${dynamicWhere};\n            `;\n            },\n        };\n    }\n\n    findWithDynamicJoin2(\n        joins: Array,\n        additionalConditions?: string // Additional dynamic WHERE conditions\n    ): QueryConfig {\n        return {\n            name: `SELECT_WITH_DYNAMIC_JOIN`,\n            type: `join,`,\n            syntax: () => {\n                const mainAlias = 'main';\n                // const fields = this.allowedKeys.join(', ');\n                const fields = this.allowedKeys\n                    .map((field) => `${mainAlias}.${String(field)}`) // Ensure conversion to string\n                    .join(', '); // Alias for the main table\n                const joinClauses = joins\n                    .map((join, index) => {\n                        const joinAlias = `table${index + 1}`; // Create an alias like table1, table2, etc.\n                        const joinType = join.type ? join.type : 'JOIN'; // Default to INNER JOIN if no type is specified\n\n                        // Split the condition to derive the join fields\n                        const [foreignKey, mainField] = join.condition\n                            .split('=')\n                            .map((part) => part.trim());\n                        const condition = `${joinAlias}.${foreignKey} = ${mainAlias}.${mainField}`;\n\n                        return `${joinType} ${join.table} AS ${joinAlias} ON ${condition}`;\n                    })\n                    .join(' ');\n\n                // Start building the WHERE clause\n                const baseWhere = `${mainAlias}.status = 1`;\n                const dynamicWhere = additionalConditions ? `AND ${additionalConditions}` : '';\n\n                return `\n            SELECT ${fields}, \n            ${joins\n                .map((join, index) => {\n                    const alias = `table${index + 1}`;\n                    return join.selectFields\n                        ? join.selectFields.map((field) => `${alias}.${field}`).join(', ')\n                        : '';\n                })\n                .filter((field) => field)\n                .join(', ')} \n            FROM ${this.model} AS ${mainAlias}\n            ${joinClauses}\n            WHERE ${baseWhere} ${dynamicWhere};\n        `;\n            },\n        };\n    }\n    findWithDynamicJoin3(\n        joins: Array,\n        baseAdditionalConditions?: string // Additional conditions for the main WHERE clause\n    ): QueryConfig {\n        return {\n            name: `SELECT_WITH_DYNAMIC_JOIN`,\n            type: `join`,\n            syntax: () => {\n                const mainAlias = 'main';\n                const fields = this.allowedKeys\n                    .map((field) => `${mainAlias}.${String(field)}`)\n                    .join(', ');\n\n                const joinClauses = joins\n                    .map((join, index) => {\n                        const joinAlias = `table${index + 1}`;\n                        const joinType = join.type ? join.type : 'JOIN';\n\n                        const [foreignKey, mainField] = join.condition\n                            .split('=')\n                            .map((part) => part.trim());\n                        const condition = `${joinAlias}.${foreignKey} = ${mainAlias}.${mainField}`;\n\n                        // Add dynamic conditions for the current join\n                        const dynamicJoinConditions = join.additionalConditions\n                            ? join.additionalConditions\n                                  .map((cond) => `${joinAlias}.${cond}`)\n                                  .join(' AND ')\n                            : '';\n\n                        return `${joinType} ${join.table} AS ${joinAlias} ON ${condition}${dynamicJoinConditions ? ' AND ' + dynamicJoinConditions : ''}`;\n                    })\n                    .join(' ');\n\n                // Base where clause\n                const baseWhere = `${mainAlias}.status = 1`;\n                const dynamicWhere = baseAdditionalConditions\n                    ? `AND ${baseAdditionalConditions}`\n                    : '';\n\n                return `\n            SELECT ${fields}, \n            ${joins\n                .map((join, index) => {\n                    const alias = `table${index + 1}`;\n                    return join.selectFields\n                        ? join.selectFields.map((field) => `${alias}.${field}`).join(', ')\n                        : '';\n                })\n                .filter((field) => field)\n                .join(', ')} \n            FROM ${this.model} AS ${mainAlias}\n            ${joinClauses}\n            WHERE ${baseWhere} ${dynamicWhere};\n        `;\n            },\n        };\n    }\n\n    /**\n     * Creates a query object with a specific type and syntax generator.\n     * @param type - The type of query (e.g., SELECT_ONE, INSERT).\n     * @param syntaxGenerator - A function that generates the SQL syntax.\n     * @returns An object containing the query configuration.\n     */\n    private createQuery(type: string, syntaxGenerator: (arg: any) => string): object {\n        return {\n            name: type.toLowerCase(),\n            type,\n            syntax: syntaxGenerator, // This is a function\n        };\n    }\n\n    // private createQuery(type: string, syntaxGenerator: (arg: any) => string): object {\n    //     return {\n    //         name: type.toLowerCase(),\n    //         type,\n    //         syntax: syntaxGenerator,\n    //     };\n    // }\n\n    /**\n     * Formats a value for safe SQL query insertion.\n     * @param value - The value to format.\n     * @returns A string representation of the formatted value.\n     */\n    private formatValue(value: any): string {\n        if (Array.isArray(value)) {\n            const formattedArray = value.map((v) => `'${v.replace(/'/g, \"''\")}'`).join(', ');\n            return `'{${formattedArray}}'`;\n        } else if (typeof value === 'string') {\n            return `'${value.replace(/'/g, \"''\")}'`;\n        } else if (value === null || value === undefined) {\n            return 'NULL';\n        } else {\n            return `${value}`; // For numbers and other types\n        }\n    }\n    // commonQuery = new CommonQuery('your_table', ['id', 'name', 'status']);\n    // queryConfig = commonQuery.findWithDynamicJoin([\n    //     {\n    //         table: 'another_table',\n    //         condition: 'foreign_key=id', // Specify the join condition\n    //         type: 'LEFT JOIN',\n    //         selectFields: ['field1', 'field2'], // Specify fields to select from another_table\n    //     },\n    //     {\n    //         table: 'yet_another_table',\n    //         condition: 'foreign_key=id', // Specify the join condition\n    //         selectFields: ['field3', 'field4'], // Specify fields to select from yet_another_table\n    //     },\n    // ]);\n}\ninterface QueryConfig {\n    name: string;\n    type: string;\n    syntax: (id: number) => string; // Method to generate SQL\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConfigService.html":{"url":"classes/ConfigService.html","title":"class - ConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/helper/services/config.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                get\n                            \n                            \n                                    Public\n                                getBoolean\n                            \n                            \n                                    Public\n                                getNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    nodeEnv\n                                \n                                \n                                    prismaConfig\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/helper/services/config.service.ts:72\n                            \n                        \n\n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        get\n                        \n                    \n                \n            \n            \n                \n                        \n                    get(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/helper/services/config.service.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getBoolean\n                        \n                    \n                \n            \n            \n                \n                        \n                    getBoolean(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/helper/services/config.service.ts:101\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getNumber\n                        \n                    \n                \n            \n            \n                \n                        \n                    getNumber(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/helper/services/config.service.ts:97\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        nodeEnv\n                    \n                \n\n                \n                    \n                        getnodeEnv()\n                    \n                \n                            \n                                \n                                    Defined in src/common/helper/services/config.service.ts:105\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        prismaConfig\n                    \n                \n\n                \n                    \n                        getprismaConfig()\n                    \n                \n                            \n                                \n                                    Defined in src/common/helper/services/config.service.ts:139\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { IsEnum, IsInt, IsOptional, IsString, ValidateIf, IsUrl, Max, Min } from 'class-validator';\nimport * as dotenv from 'dotenv';\n\n// import { FileDriver } from '../../../core/enum/file.type';\nimport { IAppConfig } from '../../../core/interfaces/app.interfaces';\nimport { IAwsConfig } from '../../../core/interfaces/aws.interfaces';\nimport { IFileConfig } from '../../../core/interfaces/file.interfaces';\nimport { IJWTConfig } from '../../../core/interfaces/jwt.interfaces';\nimport { INodeEmailerConfig } from '../../../core/interfaces/node-emailer.interfaces';\n// import { IPostgreSQLConfig } from '../../../core/interfaces/postgres.interfaces';\nimport { ISendGridConfig } from '../../../core/interfaces/sendgrid.interfaces';\nimport { ISMSConfig } from '../../../core/interfaces/sms.interfaces';\nimport { IUploadFileConfig } from '../../../core/interfaces/upload-file.interfaces';\nimport validateConfig from '../../../utils/validate-config';\n\n/**\n * Config service\n * @export\n * @class ConfigService\n */\n\nclass EnvVarAppConfigValidator {\n    @IsInt()\n    @Min(0)\n    @Max(65535)\n    @IsOptional()\n    APP_PORT: number;\n\n    @IsUrl({ require_tld: false })\n    @IsOptional()\n    FRONTEND_DOMAIN: string;\n\n    @IsUrl({ require_tld: false })\n    @IsOptional()\n    BACKEND_DOMAIN: string;\n\n    @IsString()\n    @IsOptional()\n    API_PREFIX: string;\n}\n\n// class EnvVarFileConfigValidator {\n//     // @IsEnum(FileDriver)\n//     // FILE_DRIVER: FileDriver;\n\n//     // @ValidateIf((envValues) =>\n//     //     [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n//     // )\n//     // @IsString()\n//     // AWS_ACCESS_KEY_ID: string;\n\n//     // @ValidateIf((envValues) =>\n//     //     [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n//     // )\n//     // @IsString()\n//     // AWS_SECRET_ACCESS_KEY: string;\n\n//     // @ValidateIf((envValues) =>\n//     //     [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n//     // )\n//     // @IsString()\n//     // AWS_DEFAULT_S3_BUCKET: string;\n\n//     // @ValidateIf((envValues) =>\n//     //     [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n//     // )\n//     @IsString()\n//     AWS_S3_REGION: string;\n// }\n\nexport class ConfigService {\n    constructor() {\n        const nodeEnv = this.nodeEnv;\n        // dotenv.config({\n        //   path: nodeEnv === \"production\" ? \".env\" : `.env.${nodeEnv}`,\n        // });\n        dotenv.config({\n            path:\n                nodeEnv === 'production'\n                    ? '.env.staging'\n                    : nodeEnv === 'staging'\n                      ? '.env.staging'\n                      : '.env.development',\n        });\n\n        // // Replace \\\\n with \\n to support multiline strings in AWS\n        // for (const envName of Object.keys(process.env)) {\n        //   process.env[envName] = process.env[envName].replace(/\\\\n/g, \"\\n\");\n        // }\n    }\n\n    public get(key: string): string {\n        return process.env[key] || 'undefined';\n    }\n\n    public getNumber(key: string): number {\n        return Number(this.get(key));\n    }\n\n    public getBoolean(key: string): boolean {\n        return Boolean(this.get(key));\n    }\n\n    get nodeEnv(): string {\n        return this.get('NODE_ENV') || 'development';\n    }\n\n    // get typeOrmConfig(): TypeOrmModuleOptions {\n    //   const dbConfig = {\n    //     // eslint-disable-next-line @typescript-eslint/prefer-as-const\n    //     type: \"mysql\" as \"mysql\",\n    //     host: this.get(\"DATABASE_HOST\"),\n    //     port: this.getNumber(\"DATABASE_PORT\"),\n    //     username: this.get(\"DATABASE_USER\"),\n    //     password: this.get(\"DATABASE_PASS\"),\n    //     database: this.get(\"DATABASE_SCHEMA\"),\n    //     authSource: \"admin\",\n    //     synchronize: true,\n    //     multipleStatements: true,\n    //     entities: [\"src/**/**.entity{.ts,.js}\"],\n    //     bigNumberStrings: false,\n    //   };\n    //   return dbConfig;\n    // }\n\n    // get appConfig(): IAppConfig {\n    //     validateConfig(process.env, EnvVarAppConfigValidator);\n    //     return {\n    //         name: this.get('APP_NAME') || '',\n    //         workingDirectory: process.env.PWD || process.cwd(),\n    //         frontendDomain: this.get('FRONTEND_DOMAIN') || '',\n    //         backendDomain: this.get('BACKEND_DOMAIN') || '',\n    //         port: this.getNumber('PORT'),\n    //         apiPrefix: this.get('API_PREFIX') || '',\n    //     };\n    // }\n\n    get prismaConfig(): string {\n        return `postgresql://${this.get('POSTGRES_USER')}:${this.get('POSTGRES_PASSWORD')}@${this.get('POSTGRES_HOST')}:${this.get('POSTGRES_PORT')}/${this.get('POSTGRES_NAME')}?connection_limit=${this.get('POSTGRES_CONNECTION_LIMIT')}&pool_timeout=${this.get('POSTGRES_POOL_TIMEOUT')}&schema=${this.get('POSTGRES_SCHEMA')}`;\n    }\n\n    // get awsS3Config(): IAwsConfig {\n    //     return {\n    //         AWS_S3_ACCESS_KEY_ID: this.get('AWS_S3_ACCESS_KEY_ID'),\n    //         AWS_S3_SECRET_ACCESS_KEY: this.get('AWS_S3_SECRET_ACCESS_KEY'),\n    //         AWS_S3_BUCKET_NAME: this.get('AWS_S3_BUCKET_NAME'),\n    //         AWS_S3_DEFAULT_REGION: this.get('AWS_S3_DEFAULT_REGION'),\n    //         AWS_S3_TEMP_DIRECTORY: this.get('AWS_S3_TEMP_DIRECTORY'),\n    //         AWS_S3_ENDPOINT: this.get('AWS_S3_ENDPOINT'),\n    //         AWS_S3_SERVER_HOST: this.get('AWS_S3_SERVER_HOST'),\n    //         AWS_S3_COMPANION_SECRET: this.get('AWS_S3_COMPANION_SECRET'),\n    //         TUS_STORAGE_DRIVER: this.get('TUS_STORAGE_DRIVER'),\n    //     };\n    // }\n\n    // get qrConfig() {\n    //     return {\n    //         QR_IMAGE: this.get('QR_IMAGE') || '',\n    //         QR_IMAGE_PATH: this.get('QR_IMAGE_PATH') || '',\n    //         QR_IMAGE_PATH_SALT: this.get('QR_IMAGE_PATH_SALT') || '',\n    //     };\n    // }\n\n    // get jwtConfig(): IJWTConfig {\n    //     return {\n    //         secret: this.get('JWT_SECRET_KEY'),\n    //         algorithm: this.get('JWT_ALGORITHM'),\n    //         issuer: this.get('JWT_ISSUER'),\n    //         audience: this.get('JWT_AUDIENCE'),\n    //         expiresInSeconds: this.getNumber('JWT_EXPIRES_IN_SECONDS'),\n    //         expirationTime: this.getNumber('JWT_EXPIRATION_TIME'),\n    //     };\n    // }\n\n    // get sendgridConfig(): ISendGridConfig {\n    //     return {\n    //         SENDGRID_API_KEY: this.get('SENDGRID_API_KEY'),\n    //         FROM_EMAIL: this.get('FROM_EMAIL'),\n    //         TO_EMAIL: this.get('TO_EMAIL'),\n    //         WELCOME_EMAIL: this.get('WELCOME_EMAIL'),\n    //     };\n    // }\n\n    // get nodeemailerConfig(): INodeEmailerConfig {\n    //     return {\n    //         NODE_EMAILER_HOST: this.get('NODE_EMAILER_HOST'),\n    //         NODE_EMAILER_PORT: this.getNumber('NODE_EMAILER_PORT'),\n    //         NODE_EMAILER_USER: this.get('NODE_EMAILER_USER'),\n    //         NODE_EMAILER_PASSWORD: this.get('NODE_EMAILER_PASSWORD'),\n    //         NODE_EMAILER_FROM_EMAIL: this.get('NODE_EMAILER_FROM_EMAIL'),\n    //         NODE_EMAILER_TO_EMAIL: this.get('NODE_EMAILER_TO_EMAIL'),\n    //     };\n    // }\n\n    // get smsConfig(): ISMSConfig {\n    //     return {\n    //         SMS_PROVIDER_NAME: this.get('SMS_PROVIDER_NAME'),\n    //         API_KEY: this.get('API_KEY'),\n    //         SENDER_ID: this.get('SENDER_ID'),\n    //     };\n    // }\n\n    // get uploadFileConfig(): IUploadFileConfig {\n    //     return {\n    //         TEMP_FILE_UPLOAD_URL: this.get('TEMP_FILE_UPLOAD_URL'),\n    //         FILE_UPLOAD_DESTINATION: this.get('FILE_UPLOAD_DESTINATION'),\n    //         MAX_UPLOAD_FILE_SIZE: this.getNumber('MAX_UPLOAD_FILE_SIZE'),\n    //         PROFILE_PIC_FILE_PATH: this.get('PROFILE_PIC_FILE_PATH'),\n    //         MULTIPLE_FILE_PATH: this.get('MULTIPLE_FILE_PATH'),\n    //     };\n    // }\n\n    // get fileConfig(): IFileConfig {\n    //     // validateConfig(process.env, EnvVarFileConfigValidator);\n    //     return {\n    //         driver: (this.get('FILE_DRIVER') as any | undefined) ?? undefined,\n    //         accessKeyId: this.get('AWS_ACCESS_KEY_ID'),\n    //         secretAccessKey: this.get('AWS_SECRET_ACCESS_KEY'),\n    //         awsDefaultS3Bucket: this.get('AWS_DEFAULT_S3_BUCKET'),\n    //         awsS3Region: this.get('AWS_S3_REGION'),\n    //         maxFileSize: 5242880, // 5mb\n    //     };\n    // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CountriesController.html":{"url":"controllers/CountriesController.html","title":"controller - CountriesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CountriesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/countries/countries.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                This file defines the CountriesController, which handles HTTP requests related to countries.\nThe CountriesController is responsible for handling requests to find and retrieve country information.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createDto: createDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create')@HttpCode(HttpStatus.OK)@ApiOkResponse({type: Country, description: 'Create Country'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/countries/countries.controller.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createDto\n                                            \n                                                            createDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data required to create a new country.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The created country object.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(deletebyid/:id_country)@HttpCode(HttpStatus.OK)@ApiParam({name: 'id_country', type: String})@ApiOkResponse({status: undefined, description: Country has been successfully deleted.})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/countries/countries.controller.ts:114\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the country to be deleted.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                An object indicating the deletion result.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(query: PaginationQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('findall')@HttpCode(HttpStatus.OK)@ApiOkResponse({type: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/countries/countries.controller.ts:58\n                        \n                    \n\n\n            \n                \n                        Find all countries\nExample :GET /v1/countries?page=1&limit=10This endpoint allows the client to retrieve a paginated list of countries.\nSee PaginationQueryDto\nSee PaginationResponseDto\nSee Country\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe pagination query parameters.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                A promise that resolves to a paginated response of countries.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateDto: UpdateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('updatebyid/:id_country')@HttpCode(HttpStatus.OK)@ApiParam({name: 'id_country', type: String})@ApiOkResponse({type: Country, description: 'Update Country'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/countries/countries.controller.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the Country to be updated.\n\n\n                                            \n                                        \n                                        \n                                                updateDto\n                                            \n                                                            UpdateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data to update the Country with.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The updated Country object or null if not found.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Get,\n    Query,\n    HttpStatus,\n    HttpCode,\n    Post,\n    Body,\n    Patch,\n    Param,\n    ParseUUIDPipe,\n    Delete,\n} from '@nestjs/common';\nimport { ApiTags, ApiOkResponse, ApiParam } from '@nestjs/swagger';\n\nimport { PaginationResponse, PaginationResponseDto } from '@utils/dto/pagination-response.dto';\nimport { PaginationQueryDto } from '@utils/dto/pagination.dto';\n\nimport { CountriesService } from './countries.service';\nimport { Country } from './dto/country';\n//import { CreateCountryDto } from './dto/create.dto';\nimport { CreateCountryDto as createDto } from './dto/create.dto';\nimport { UpdateDto } from './dto/update.dto';\n\n/**\n * @fileoverview\n * This file defines the `CountriesController`, which handles HTTP requests related to countries.\n *\n * @module\n * @description\n * The `CountriesController` is responsible for handling requests to find and retrieve country information.\n */\n@ApiTags('Countries')\n@Controller()\nexport class CountriesController {\n    constructor(private readonly countriesService: CountriesService) {}\n\n    /***\n     * Find all countries\n     *\n     * @param {PaginationQueryDto} query - The pagination query parameters.\n     * @returns {Promise>} A promise that resolves to a paginated response of countries.\n     *\n     * @example\n     * GET /v1/countries?page=1&limit=10\n     *\n     * @description\n     * This endpoint allows the client to retrieve a paginated list of countries.\n     *\n     * @see PaginationQueryDto\n     * @see PaginationResponseDto\n     * @see Country\n     */\n\n    @Get('findall')\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ type: PaginationResponse(Country) })\n    async findAll(@Query() query: PaginationQueryDto): Promise> {\n        const get_all = await this.countriesService.findAll(query);\n\n        return get_all;\n    }\n\n    /**\n     * @route POST /country/create\n     * @description Create a new country.\n     * @param {CountryDto} createDto - The data required to create a new country.\n     * @returns {Promise} The created country object.\n     */\n\n    @Post('create')\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ type: Country, description: 'Create Country' })\n    async create(@Body() createDto: createDto): Promise {\n        return await this.countriesService.create(createDto);\n    }\n\n    /**\n     * @route PATCH /updatebyid/:id_country\n     * @description Update an existing Country by its ID.\n     * @param {string} id - The ID of the Country to be updated.\n     * @param {UpdateDto} updateDto - The data to update the Country with.\n     * @returns {Promise} The updated Country object or null if not found.\n     */\n\n    @Patch('updatebyid/:id_country')\n    @HttpCode(HttpStatus.OK)\n    @ApiParam({ name: 'id_country', type: String })\n    @ApiOkResponse({\n        type: Country,\n        description: 'Update Country',\n    })\n    async update(\n        @Param('id_country', ParseUUIDPipe) id: string,\n        @Body() updateDto: UpdateDto\n    ): Promise {\n        const updated = await this.countriesService.update(id, updateDto);\n        return updated;\n    }\n    /**\n     * @route DELETE /deletebyid/:id_country\n     * @description Delete a country by its ID.\n     * @param {string} id - The ID of the country to be deleted.\n     * @returns {Promise} An object indicating the deletion result.\n     */\n\n    @Delete(`deletebyid/:id_country`)\n    @HttpCode(HttpStatus.OK)\n    @ApiParam({ name: 'id_country', type: String })\n    @ApiOkResponse({\n        status: HttpStatus.OK,\n        description: `Country has been successfully deleted.`,\n    })\n    async delete(@Param('id_country', ParseUUIDPipe) id: string): Promise {\n        const deleted = await this.countriesService.delete(id);\n        return deleted;\n    }\n\n    // @Get('v1/country')\n}\n\n// import { Controller, Get, Query, HttpStatus, HttpCode } from '@nestjs/common';\n// import { ApiTags, ApiOkResponse } from '@nestjs/swagger';\n\n// import {\n//     InfinityPaginationResponse,\n//     InfinityPaginationResponseDto,\n// } from '@utils/dto/infinity-pagination-response.dto';\n// import { infinityPagination } from '@utils/infinity-pagination';\n\n// import { CountriesService } from './countries.service';\n// import { Country } from './domain/country';\n// import { QueryCountryDto } from './dto/query-country.dto';\n\n// @ApiTags('Countries')\n// @Controller()\n// export class CountriesController {\n//     constructor(private readonly countriesService: CountriesService) {}\n\n//     /***\n//      * Find all countries\n//      */\n\n//     @Get('v1/countries')\n//     @HttpCode(HttpStatus.OK)\n//     @ApiOkResponse({\n//         type: InfinityPaginationResponse(Country),\n//     })\n//     async findAll(\n//         @Query() query: QueryCountryDto\n//     ): Promise> {\n//         console.log('HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHA');\n//         const page = query?.page ?? 1;\n//         let limit = query?.limit ?? 10;\n//         if (limit > 50) {\n//             limit = 50;\n//         }\n\n//         return infinityPagination(\n//             await this.countriesService.findManyWithPagination({\n//                 filterOptions: query?.filters,\n//                 sortOptions: query?.sort,\n//                 paginationOptions: {\n//                     page,\n//                     limit,\n//                 },\n//             }),\n//             { page, limit }\n//         );\n//     }\n// }\n\n// import { Controller, Get, Query, HttpStatus, HttpCode } from '@nestjs/common';\n// import { ApiTags, ApiOkResponse, ApiQuery } from '@nestjs/swagger';\n\n// // import {\n// //     InfinityPaginationResponse,\n// //     InfinityPaginationResponseDto,\n// // } from '@utils/dto/infinity-pagination-response.dto';\n// // import { infinityPagination } from '@utils/infinity-pagination';\n\n// import { ApiFilterQuery } from '@decorators/api.filter.query';\n// import {\n//     PaginationQueryDto,\n//     PaginatedResultDto,\n//     FilterQueryDto,\n//     // ApiFilterQuery,\n// } from '@utils/dto/pagination.dto';\n\n// // import { ApiNestedQuery } from '../../decorators/api-filter-query';\n\n// import { CountriesService } from './countries.service';\n// import { Country } from './domain/country';\n// // import { QueryCountryDto } from './dto/query-country.dto';\n\n// @ApiTags('Countries')\n// @Controller()\n// export class CountriesController {\n//     constructor(private readonly countriesService: CountriesService) {}\n\n//     /***\n//      * Find all countries\n//      */\n\n//     @Get('v1/countries')\n//     @HttpCode(HttpStatus.OK)\n//     // @ApiQuery({\n//     //     name: 'filters',\n//     //     required: false,\n//     //     type: String,\n//     //     description: 'Array of filter objects as a JSON string',\n//     //     example:\n//     //         '[{\"field\":\"name\",\"operator\":\"LIKE\",\"value\":\"John\"},{\"field\":\"age\",\"operator\":\">\",\"value\":\"30\"}]',\n//     // })\n//     // @ApiQuery({\n//     //     name: 'sort',\n//     //     required: false,\n//     //     type: String,\n//     //     description: 'Array of sort objects as a JSON string',\n//     //     example: '[{\"field\":\"name\",\"direction\":\"ASC\"},{\"field\":\"age\",\"direction\":\"DESC\"}]',\n//     // })\n//     // @ApiFilterQuery('filters', FilterQueryDto, 0)\n//     // @ApiFilterQuery('filters', FilterQueryDto, 1)\n//     @ApiOkResponse({ type: PaginatedResultDto })\n//     async findAll(\n//         @Query() paginationQuery: PaginationQueryDto\n//     ): Promise> {\n//         return this.countriesService.findAll(paginationQuery);\n//     }\n// }\n\n// // import { Controller, Get, Query, HttpStatus, HttpCode } from '@nestjs/common';\n// // import { ApiTags, ApiOkResponse } from '@nestjs/swagger';\n\n// // import {\n// //     InfinityPaginationResponse,\n// //     InfinityPaginationResponseDto,\n// // } from '@utils/dto/infinity-pagination-response.dto';\n// // import { infinityPagination } from '@utils/infinity-pagination';\n\n// // import { CountriesService } from './countries.service';\n// // import { Country } from './domain/country';\n// // import { QueryCountryDto } from './dto/query-country.dto';\n\n// // @ApiTags('Countries')\n// // @Controller()\n// // export class CountriesController {\n// //     constructor(private readonly countriesService: CountriesService) {}\n\n// //     /***\n// //      * Find all countries\n// //      */\n\n// //     @Get('v1/countries')\n// //     @HttpCode(HttpStatus.OK)\n// //     @ApiOkResponse({\n// //         type: InfinityPaginationResponse(Country),\n// //     })\n// //     async findAll(\n// //         @Query() query: QueryCountryDto\n// //     ): Promise> {\n// //         console.log('HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHA');\n// //         const page = query?.page ?? 1;\n// //         let limit = query?.limit ?? 10;\n// //         if (limit > 50) {\n// //             limit = 50;\n// //         }\n\n// //         return infinityPagination(\n// //             await this.countriesService.findManyWithPagination({\n// //                 filterOptions: query?.filters,\n// //                 sortOptions: query?.sort,\n// //                 paginationOptions: {\n// //                     page,\n// //                     limit,\n// //                 },\n// //             }),\n// //             { page, limit }\n// //         );\n// //     }\n// // }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CountriesModule.html":{"url":"modules/CountriesModule.html","title":"module - CountriesModule","body":"\n                   \n\n\n\n\n    Modules\n    CountriesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CountriesModule\n\n\n\ncluster_CountriesModule_providers\n\n\n\ncluster_CountriesModule_exports\n\n\n\n\nCountriesService \n\nCountriesService \n\n\n\nCountriesModule\n\nCountriesModule\n\nCountriesService  -->\n\nCountriesModule->CountriesService \n\n\n\n\n\nCountriesService\n\nCountriesService\n\nCountriesModule -->\n\nCountriesService->CountriesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/countries/countries.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            This file defines the CountriesModule, which bundles the CountriesController and CountriesService together.\nThe CountriesModule is responsible for handling country-related operations. It provides the necessary controllers and services to manage countries.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CountriesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CountriesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CountriesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { CountriesController } from './countries.controller';\nimport { CountriesService } from './countries.service';\nimport { Query } from './query';\n\n/**\n * @fileoverview\n * This file defines the `CountriesModule`, which bundles the `CountriesController` and `CountriesService` together.\n *\n * @module\n * @description\n * The `CountriesModule` is responsible for handling country-related operations. It provides the necessary controllers and services to manage countries.\n */\n@Module({\n    controllers: [CountriesController],\n    providers: [CountriesService, Query],\n    exports: [CountriesService],\n})\nexport class CountriesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CountriesService-1.html":{"url":"injectables/CountriesService-1.html","title":"injectable - CountriesService-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CountriesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/country_mas/country_mas.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the CountriesService class, which provides methods to manage country data.\nIt includes operations for creating, updating, retrieving, and deleting countries.\nThe CountriesService class is responsible for handling business logic related to countries.\nIt interacts with the database through the PrismaService and performs various operations using raw SQL queries.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                MODULE\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(paginationService: PaginationService, prisma: PrismaService, query: Query, utilsService: UtilsService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/master/country_mas/country_mas.service.ts:27\n                            \n                        \n\n                \n                    \n                            Creates an instance of CountriesService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        paginationService\n                                                  \n                                                        \n                                                                        PaginationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to handle pagination logic.\n\n\n                                                        \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to interact with the database.\n\n\n                                                        \n                                                \n                                                \n                                                        query\n                                                  \n                                                        \n                                                                        Query\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for SQL query generation.\n\n\n                                                        \n                                                \n                                                \n                                                        utilsService\n                                                  \n                                                        \n                                                                        UtilsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for utility functions, including dynamic query building.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(CountryDto: CountryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/country_mas/country_mas.service.ts:51\n                        \n                    \n\n\n            \n                \n                        Creates a new country.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                CountryDto\n                                            \n                                                            CountryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nData required to create a new country.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                The created country object.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/country_mas/country_mas.service.ts:145\n                        \n                    \n\n\n            \n                \n                        Deletes a country by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the country to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                An object indicating the result of the deletion.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(paginationQuery: PaginationQueryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/country_mas/country_mas.service.ts:118\n                        \n                    \n\n\n            \n                \n                        Retrieves a paginated list of countries.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                paginationQuery\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nPagination and filtering parameters.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                A paginated list of countries.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/country_mas/country_mas.service.ts:169\n                        \n                    \n\n\n            \n                \n                        Retrieves a country by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateDto: UpdateDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/country_mas/country_mas.service.ts:80\n                        \n                    \n\n\n            \n                \n                        Updates an existing country by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the country to update.\n\n\n                                            \n                                        \n                                        \n                                                updateDto\n                                            \n                                                            UpdateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nData to update the country with.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                The updated country object or null if not found.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        MODULE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/master/country_mas/country_mas.service.ts:27\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, HttpException, HttpStatus } from '@nestjs/common';\n\nimport { PaginationService } from '@services/pagination.service';\nimport { PrismaService } from '@services/prisma.service';\nimport { UtilsService } from '@services/util.service';\nimport { PaginationResponseDto } from '@utils/dto/pagination-response.dto';\nimport { PaginationQueryDto } from '@utils/dto/pagination.dto';\nimport { IPaginationFieldConfig } from '@utils/types/pagination-options';\n\nimport { CountryMas } from './dto/country_mas.dto';\nimport { CountryDto } from './dto/create.dto';\nimport { UpdateDto } from './dto/update.dto';\nimport { Query } from './query';\n\n/**\n * @fileoverview\n * This file defines the `CountriesService` class, which provides methods to manage country data.\n * It includes operations for creating, updating, retrieving, and deleting countries.\n *\n * @module\n * @description\n * The `CountriesService` class is responsible for handling business logic related to countries.\n * It interacts with the database through the `PrismaService` and performs various operations using raw SQL queries.\n */\n@Injectable()\nexport class CountriesService {\n    private readonly MODULE: string;\n\n    /**\n     * Creates an instance of `CountriesService`.\n     * @param {PaginationService} paginationService - Service to handle pagination logic.\n     * @param {PrismaService} prisma - Service to interact with the database.\n     * @param {Query} query - Service for SQL query generation.\n     * @param {UtilsService} utilsService - Service for utility functions, including dynamic query building.\n     */\n    constructor(\n        private readonly paginationService: PaginationService,\n        private readonly prisma: PrismaService,\n        private readonly query: Query,\n        private readonly utilsService: UtilsService\n    ) {\n        this.MODULE = 'country_mas';\n    }\n\n    /**\n     * Creates a new country.\n     * @param {CountryDto} CountryDto - Data required to create a new country.\n     * @returns {Promise} The created country object.\n     * @throws {HttpException} If the country already exists or if an error occurs during creation.\n     */\n    async create(CountryDto: CountryDto): Promise {\n        // Check if the country already exists\n        const find = await this.prisma.executeRawQuery(this.query.findByName(), CountryDto);\n\n        if (find) {\n            throw new HttpException({ message: 'Country already exists' }, HttpStatus.CONFLICT);\n        }\n\n        // Create the country\n        const inserted = await this.prisma.executeRawQuery(this.query.insert(), CountryDto);\n\n        if (inserted && inserted.insertid) {\n            const get = await this.findOne(inserted.insertid);\n            return get as any;\n        } else {\n            throw new HttpException(\n                { message: 'Something went wrong' },\n                HttpStatus.INTERNAL_SERVER_ERROR\n            );\n        }\n    }\n\n    /**\n     * Updates an existing country by its ID.\n     * @param {string} id - The ID of the country to update.\n     * @param {UpdateDto} updateDto - Data to update the country with.\n     * @returns {Promise} The updated country object or null if not found.\n     * @throws {HttpException} If nothing to update is provided or if an error occurs during the update.\n     */\n    async update(id: string, updateDto: UpdateDto): Promise {\n        if (Object.keys(updateDto).length === 0) {\n            throw new HttpException({ message: 'Nothing to update!' }, HttpStatus.BAD_REQUEST);\n        }\n        // check country exits or not\n        const recordExits = await this.findOne(id);\n        if (recordExits) {\n            // Update\n            updateDto.id_country = id;\n            updateDto.updated_at = new Date().toISOString();\n            const updated = await this.prisma.executeRawQuery(this.query.update(), updateDto);\n\n            if (!updated) {\n                throw new HttpException(\n                    { message: 'Something went wrong' },\n                    HttpStatus.INTERNAL_SERVER_ERROR\n                );\n            }\n\n            if (updated[0]?.updatedid) {\n                const get = await this.findOne(id);\n                return get;\n            } else {\n                throw new HttpException(\n                    { message: `${this.MODULE} not found` },\n                    HttpStatus.NOT_FOUND\n                );\n            }\n        } else {\n            throw new HttpException({ message: `country not found` }, HttpStatus.NOT_FOUND);\n        }\n    }\n\n    /**\n     * Retrieves a paginated list of countries.\n     * @param {PaginationQueryDto} paginationQuery - Pagination and filtering parameters.\n     * @returns {Promise>} A paginated list of countries.\n     */\n    async findAll(paginationQuery: PaginationQueryDto): Promise> {\n        const baseQuery = ['ptbl.id_country', 'ptbl.name', 'ptbl.dial_code', 'ptbl.status'];\n        const fromQuery = ` FROM country_mas as ptbl`;\n\n        const fieldConfigs: Record = null;\n\n        const { selectQuery, countQuery } = this.utilsService.buildDynamicQuery(\n            paginationQuery,\n            fieldConfigs,\n            baseQuery,\n            fromQuery,\n            'ptbl.id_country'\n        );\n\n        return this.paginationService.paginate(\n            selectQuery,\n            countQuery,\n            paginationQuery\n        );\n    }\n\n    /**\n     * Deletes a country by its ID.\n     * @param {string} id - The ID of the country to delete.\n     * @returns {Promise} An object indicating the result of the deletion.\n     * @throws {HttpException} If an error occurs during deletion or if the country is not found.\n     */\n    async delete(id: string): Promise {\n        const deleted = await this.prisma.executeRawQuery(this.query.delete(), id);\n\n        if (!deleted) {\n            throw new HttpException(\n                { message: 'Something went wrong' },\n                HttpStatus.INTERNAL_SERVER_ERROR\n            );\n        }\n\n        if (deleted[0]?.deletedid) {\n            return { status: `${this.MODULE} has been successfully deleted` };\n        } else {\n            throw new HttpException({ message: `${this.MODULE} not found` }, HttpStatus.NOT_FOUND);\n        }\n    }\n\n    /*** HELPER METHODS */\n\n    /**\n     * Retrieves a country by its ID.\n     * @param {string} id - The ID of the country to retrieve.\n     * @returns {Promise} The country object.\n     */\n    async findOne(id: string): Promise {\n        const data = await this.prisma.executeRawQuery(this.query.findById(), { id });\n        return data;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Country.html":{"url":"classes/Country.html","title":"class - Country","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Country\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/countries/dto/country.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the Country class, which represents the data structure of a country\nentity used in the application. The Country class is used to describe various details\nabout a country, including its identification, name, ISO codes, and other related attributes.\nThe Country class serves as a Data Transfer Object (DTO) for representing country data.\nIt includes properties such as the country's ID, name, ISO codes, dial code, capital city,\ncontinent, currency details, and timezone information. Each property is annotated with @ApiResponseProperty\nto define its type and provide example values for API documentation purposes.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                abbr\n                            \n                            \n                                    \n                                capital\n                            \n                            \n                                    \n                                continent\n                            \n                            \n                                    \n                                currency_name\n                            \n                            \n                                    \n                                dial_code\n                            \n                            \n                                    \n                                id_country\n                            \n                            \n                                    \n                                iso\n                            \n                            \n                                    \n                                iso3\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                offset\n                            \n                            \n                                    \n                                offset_in_minutes\n                            \n                            \n                                    \n                                symbol\n                            \n                            \n                                    \n                                text\n                            \n                            \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        abbr\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'IST'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:185\n                        \n                    \n\n            \n                \n                    The abbreviation for the timezone.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        capital\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'New Delhi'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:94\n                        \n                    \n\n            \n                \n                    The capital city of the country.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        continent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'Asia'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:107\n                        \n                    \n\n            \n                \n                    The continent where the country is located.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        currency_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'Indian Rupee, US Dollar etc'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:133\n                        \n                    \n\n            \n                \n                    The name of the currency used in the country.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        dial_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: '91'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:81\n                        \n                    \n\n            \n                \n                    The international dialing code for the country.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id_country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: '123e4567-e89b-12d3-a456-426614174000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:29\n                        \n                    \n\n            \n                \n                    The unique identifier for the country.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        iso\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'IN'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:55\n                        \n                    \n\n            \n                \n                    The ISO 3166-1 alpha-2 code of the country.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        iso3\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'IND'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:68\n                        \n                    \n\n            \n                \n                    The ISO 3166-1 alpha-3 code of the country.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'India'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:42\n                        \n                    \n\n            \n                \n                    The name of the country.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        offset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: '+5:30'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:159\n                        \n                    \n\n            \n                \n                    The timezone offset from UTC.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        offset_in_minutes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: '270'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:172\n                        \n                    \n\n            \n                \n                    The timezone offset in minutes from UTC.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        symbol\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'currency symbol ₹, $ etc'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:120\n                        \n                    \n\n            \n                \n                    The symbol used for the country's currency.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'Indian Time'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:198\n                        \n                    \n\n            \n                \n                    The descriptive name of the timezone.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'Asia/Mumbai'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:146\n                        \n                    \n\n            \n                \n                    The timezone value of the country.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiResponseProperty } from '@nestjs/swagger';\n\n/**\n * @fileoverview\n * This file defines the `Country` class, which represents the data structure of a country\n * entity used in the application. The `Country` class is used to describe various details\n * about a country, including its identification, name, ISO codes, and other related attributes.\n *\n * @module\n * @description\n * The `Country` class serves as a Data Transfer Object (DTO) for representing country data.\n * It includes properties such as the country's ID, name, ISO codes, dial code, capital city,\n * continent, currency details, and timezone information. Each property is annotated with `@ApiResponseProperty`\n * to define its type and provide example values for API documentation purposes.\n */\n\nexport class Country {\n    /**\n     * The unique identifier for the country.\n     *\n     * @type {string}\n     * @example '123e4567-e89b-12d3-a456-426614174000'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: '123e4567-e89b-12d3-a456-426614174000',\n    })\n    id_country: string;\n\n    /**\n     * The name of the country.\n     *\n     * @type {string}\n     * @example 'India'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: 'India',\n    })\n    name: string;\n\n    /**\n     * The ISO 3166-1 alpha-2 code of the country.\n     *\n     * @type {string}\n     * @example 'IN'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: 'IN',\n    })\n    iso: string;\n\n    /**\n     * The ISO 3166-1 alpha-3 code of the country.\n     *\n     * @type {string}\n     * @example 'IND'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: 'IND',\n    })\n    iso3: string;\n\n    /**\n     * The international dialing code for the country.\n     *\n     * @type {string}\n     * @example '91'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: '91',\n    })\n    dial_code: string;\n\n    /**\n     * The capital city of the country.\n     *\n     * @type {string}\n     * @example 'New Delhi'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: 'New Delhi',\n    })\n    capital: string;\n\n    /**\n     * The continent where the country is located.\n     *\n     * @type {string}\n     * @example 'Asia'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: 'Asia',\n    })\n    continent: string;\n\n    /**\n     * The symbol used for the country's currency.\n     *\n     * @type {string}\n     * @example '₹'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: 'currency symbol ₹, $ etc',\n    })\n    symbol: string;\n\n    /**\n     * The name of the currency used in the country.\n     *\n     * @type {string}\n     * @example 'Indian Rupee'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: 'Indian Rupee, US Dollar etc',\n    })\n    currency_name: string;\n\n    /**\n     * The timezone value of the country.\n     *\n     * @type {string}\n     * @example 'Asia/Mumbai'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: 'Asia/Mumbai',\n    })\n    value: string;\n\n    /**\n     * The timezone offset from UTC.\n     *\n     * @type {string}\n     * @example '+5:30'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: '+5:30',\n    })\n    offset: string;\n\n    /**\n     * The timezone offset in minutes from UTC.\n     *\n     * @type {number}\n     * @example 330\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: '270',\n    })\n    offset_in_minutes: number;\n\n    /**\n     * The abbreviation for the timezone.\n     *\n     * @type {string}\n     * @example 'IST'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: 'IST',\n    })\n    abbr: string;\n\n    /**\n     * The descriptive name of the timezone.\n     *\n     * @type {string}\n     * @example 'Indian Time'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: 'Indian Time',\n    })\n    text: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CountryController.html":{"url":"controllers/CountryController.html","title":"controller - CountryController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CountryController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/country_mas/country_mas.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                This file defines the CountryController, which handles HTTP requests related to countries.\nIt provides endpoints to create, update, retrieve, and delete country records.\nThe CountryController is responsible for exposing endpoints that interact with the CountriesService.\nIt uses various HTTP methods to manage country data and handles responses with appropriate HTTP status codes.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createDto: CountryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(undefined)@HttpCode(HttpStatus.OK)@ApiCreatedResponse({type: CountryMas, description: 'Create country'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/master/country_mas/country_mas.controller.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createDto\n                                            \n                                                            CountryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data required to create a new country.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                The created country object.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(undefined)@HttpCode(HttpStatus.OK)@ApiParam({name: 'id_country', type: String})@ApiOkResponse({status: undefined, description: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/master/country_mas/country_mas.controller.ts:112\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the country to be deleted.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                An object indicating the deletion result.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(query: PaginationQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(undefined)@HttpCode(HttpStatus.OK)@ApiOkResponse({type: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/master/country_mas/country_mas.controller.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe pagination and filtering parameters.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                A paginated list of countries.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateDto: UpdateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(undefined)@HttpCode(HttpStatus.OK)@ApiParam({name: 'id_country', type: String})@ApiOkResponse({type: CountryMas, description: 'Update Country'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/master/country_mas/country_mas.controller.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the country to be updated.\n\n\n                                            \n                                        \n                                        \n                                                updateDto\n                                            \n                                                            UpdateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data to update the country with.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                The updated country object or null if not found.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    HttpCode,\n    HttpStatus,\n    Param,\n    ParseUUIDPipe,\n    Patch,\n    Post,\n    Query,\n} from '@nestjs/common';\nimport { ApiTags, ApiOkResponse, ApiCreatedResponse, ApiParam } from '@nestjs/swagger';\n\nimport { PaginationResponse, PaginationResponseDto } from '@utils/dto/pagination-response.dto';\nimport { PaginationQueryDto } from '@utils/dto/pagination.dto';\n\nimport { CountriesService } from './country_mas.service';\nimport { CountryMas } from './dto/country_mas.dto';\nimport { CountryDto } from './dto/create.dto';\nimport { UpdateDto } from './dto/update.dto';\n\nconst modules = 'country_mas';\n\n/**\n * @fileoverview\n * This file defines the `CountryController`, which handles HTTP requests related to countries.\n * It provides endpoints to create, update, retrieve, and delete country records.\n *\n * @module\n * @description\n * The `CountryController` is responsible for exposing endpoints that interact with the `CountriesService`.\n * It uses various HTTP methods to manage country data and handles responses with appropriate HTTP status codes.\n */\n\n@ApiTags('Country_mas')\n@Controller()\nexport class CountryController {\n    constructor(private readonly countriesService: CountriesService) {}\n\n    /**\n     * @route POST /countries\n     * @description Create a new country.\n     * @param {CountryDto} createDto - The data required to create a new country.\n     * @returns {Promise} The created country object.\n     */\n\n    @Post(`${modules}`)\n    @HttpCode(HttpStatus.OK)\n    @ApiCreatedResponse({\n        type: CountryMas,\n        description: 'Create country',\n    })\n    async create(@Body() createDto: CountryDto): Promise {\n        const created = await this.countriesService.create(createDto);\n        return created;\n    }\n\n    /**\n     * @route PATCH /countries/:id_country\n     * @description Update an existing country by its ID.\n     * @param {string} id - The ID of the country to be updated.\n     * @param {UpdateDto} updateDto - The data to update the country with.\n     * @returns {Promise} The updated country object or null if not found.\n     */\n\n    @Patch(`${modules}/:id_country`)\n    @HttpCode(HttpStatus.OK)\n    @ApiParam({ name: 'id_country', type: String })\n    @ApiOkResponse({\n        type: CountryMas,\n        description: 'Update Country',\n    })\n    async update(\n        @Param('id_country', ParseUUIDPipe) id: string,\n        @Body() updateDto: UpdateDto\n    ): Promise {\n        const updated = await this.countriesService.update(id, updateDto);\n        return updated;\n    }\n\n    /**\n     * @route GET /countries\n     * @description Retrieve a list of countries with pagination.\n     * @param {PaginationQueryDto} query - The pagination and filtering parameters.\n     * @returns {Promise>} A paginated list of countries.\n     */\n\n    @Get(`${modules}`)\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ type: PaginationResponse(CountryMas) })\n    async findAll(@Query() query: PaginationQueryDto): Promise> {\n        const get_all = await this.countriesService.findAll(query);\n        return get_all;\n    }\n\n    /**\n     * @route DELETE /countries/:id_country\n     * @description Delete a country by its ID.\n     * @param {string} id - The ID of the country to be deleted.\n     * @returns {Promise} An object indicating the deletion result.\n     */\n\n    @Delete(`${modules}/:id_country`)\n    @HttpCode(HttpStatus.OK)\n    @ApiParam({ name: 'id_country', type: String })\n    @ApiOkResponse({\n        status: HttpStatus.OK,\n        description: `${modules} has been successfully deleted.`,\n    })\n    async delete(@Param('id_country', ParseUUIDPipe) id: string): Promise {\n        const deleted = await this.countriesService.delete(id);\n        return deleted;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CountryDto.html":{"url":"classes/CountryDto.html","title":"class - CountryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CountryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/country_mas/dto/create.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the CountryDto class, which represents the data transfer object (DTO)\nused for creating a new country record. It includes validation rules and transformation logic\nfor the properties of the country.\nThe CountryDto class ensures that the data provided for creating a country adheres to\nspecified validation rules and formats. It uses decorators from class-validator for validation\nand class-transformer for transforming input data.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                dial_code\n                            \n                            \n                                    \n                                    Optional\n                                id_country\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    Optional\n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        dial_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@MaxLength(5)@ApiProperty({type: String, description: 'Country Dial Code', example: '+91', maxLength: 5})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/country_mas/dto/create.dto.ts:35\n                        \n                    \n\n            \n                \n                    Country Dial Code, which must be uppercase and 5 characters long\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        id_country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude({toPlainOnly: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/country_mas/dto/create.dto.ts:59\n                        \n                    \n\n            \n                \n                    The unique identifier for the country.\nThis property is excluded from the plain representation of the object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@MaxLength(80)@ApiProperty({type: String, description: 'Name of the country', example: 'India', maxLength: 80})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/country_mas/dto/create.dto.ts:52\n                        \n                    \n\n            \n                \n                    Name of the country.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude({toPlainOnly: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/country_mas/dto/create.dto.ts:62\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nimport { Exclude } from 'class-transformer';\nimport { IsDefined, IsNotEmpty, IsString, MaxLength } from 'class-validator';\n\n/**\n * @fileoverview\n * This file defines the `CountryDto` class, which represents the data transfer object (DTO)\n * used for creating a new country record. It includes validation rules and transformation logic\n * for the properties of the country.\n *\n * @module\n * @description\n * The `CountryDto` class ensures that the data provided for creating a country adheres to\n * specified validation rules and formats. It uses decorators from `class-validator` for validation\n * and `class-transformer` for transforming input data.\n */\n\nexport class CountryDto {\n    /**\n     * Country Dial Code, which must be uppercase and 5 characters long\n     * @example '+91'\n     */\n\n    @IsDefined()\n    @IsNotEmpty()\n    @IsString()\n    @MaxLength(5)\n    @ApiProperty({\n        type: String,\n        description: 'Country Dial Code',\n        example: '+91',\n        maxLength: 5,\n    })\n    dial_code: string;\n\n    /**\n     * Name of the country.\n     * @example 'India'\n     */\n\n    @IsDefined()\n    @IsNotEmpty()\n    @IsString()\n    @MaxLength(80)\n    @ApiProperty({\n        type: String,\n        description: 'Name of the country',\n        example: 'India',\n        maxLength: 80,\n    })\n    name: string;\n\n    /**\n     * The unique identifier for the country.\n     * This property is excluded from the plain representation of the object.\n     */\n    @Exclude({ toPlainOnly: true })\n    id_country?: string;\n\n    @Exclude({ toPlainOnly: true })\n    updated_at?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CountryMas.html":{"url":"classes/CountryMas.html","title":"class - CountryMas","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CountryMas\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/country_mas/dto/country_mas.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the Country class, which represents the data structure of a country entity.\nIt includes properties that describe the country and uses decorators for Swagger documentation.\nThe Country class is used to define the structure of a country object, including its dial code, name, The class also uses decorators\nto configure how the properties should be documented and transformed.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                dial_code\n                            \n                            \n                                    \n                                id_country\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        dial_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: '+91'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/country_mas/dto/country_mas.dto.ts:45\n                        \n                    \n\n            \n                \n                    The dial code of the country .\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id_country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: '123e4567-e89b-12d3-a456-426614174000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/country_mas/dto/country_mas.dto.ts:25\n                        \n                    \n\n            \n                \n                    The unique identifier for the country.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'India'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/country_mas/dto/country_mas.dto.ts:35\n                        \n                    \n\n            \n                \n                    The name of the country.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: Number, example: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/country_mas/dto/country_mas.dto.ts:55\n                        \n                    \n\n            \n                \n                    The Status of the country .\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiResponseProperty } from '@nestjs/swagger';\n\n/**\n * @fileoverview\n * This file defines the `Country` class, which represents the data structure of a country entity.\n * It includes properties that describe the country and uses decorators for Swagger documentation.\n *\n * @module\n * @description\n * The `Country` class is used to define the structure of a country object, including its dial code, name, The class also uses decorators\n * to configure how the properties should be documented and transformed.\n */\nexport class CountryMas {\n    /**\n     * The unique identifier for the country.\n     *\n     * @type {string}\n     * @example '123e4567-e89b-12d3-a456-426614174000'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: '123e4567-e89b-12d3-a456-426614174000',\n    })\n    id_country: string;\n\n    /**\n     * The name of the country.\n     * @example 'India'\n     */\n    @ApiResponseProperty({\n        type: String,\n        example: 'India',\n    })\n    name: string;\n\n    /**\n     * The dial code of the country .\n     * @example '+91'\n     */\n    @ApiResponseProperty({\n        type: String,\n        example: '+91',\n    })\n    dial_code: string;\n\n    /**\n     * The Status of the country .\n     * @example 1\n     */\n    @ApiResponseProperty({\n        type: Number,\n        example: 1,\n    })\n    status: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CountryMasModule.html":{"url":"modules/CountryMasModule.html","title":"module - CountryMasModule","body":"\n                   \n\n\n\n\n    Modules\n    CountryMasModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CountryMasModule\n\n\n\ncluster_CountryMasModule_exports\n\n\n\ncluster_CountryMasModule_providers\n\n\n\n\nCountriesService \n\nCountriesService \n\n\n\nCountryMasModule\n\nCountryMasModule\n\nCountriesService  -->\n\nCountryMasModule->CountriesService \n\n\n\n\n\nCountriesService\n\nCountriesService\n\nCountryMasModule -->\n\nCountriesService->CountryMasModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/master/country_mas/country_mas.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            This file defines the CountryMasModule, which bundles the CountryController and CountriesService together.\nThe CountryMasModule is responsible for handling country-related operations. It provides the necessary controllers and services to manage countries.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CountriesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CountryController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CountriesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { CountryController } from './country_mas.controller';\nimport { CountriesService } from './country_mas.service';\nimport { Query } from './query';\n\n/**\n * @fileoverview\n * This file defines the `CountryMasModule`, which bundles the `CountryController` and `CountriesService` together.\n *\n * @module\n * @description\n * The `CountryMasModule` is responsible for handling country-related operations. It provides the necessary controllers and services to manage countries.\n */\n@Module({\n    controllers: [CountryController],\n    providers: [CountriesService, Query],\n    exports: [CountriesService],\n})\nexport class CountryMasModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCountryDto.html":{"url":"classes/CreateCountryDto.html","title":"class - CreateCountryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCountryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/countries/dto/create.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the CountryDto class, which represents the data transfer object (DTO)\nused for creating a new Country record. It includes validation rules and transformation logic\nfor the properties of the Country.\nThe CountryDto class ensures that the data provided for creating a Country adheres to\nspecified validation rules and formats. It uses decorators from class-validator for validation\nand class-transformer for transforming input data.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                capital\n                            \n                            \n                                    \n                                    \n                                    \n                                continent\n                            \n                            \n                                    \n                                    \n                                    \n                                dial_code\n                            \n                            \n                                    \n                                    Optional\n                                id_country\n                            \n                            \n                                    \n                                    \n                                    \n                                id_currency\n                            \n                            \n                                    \n                                    \n                                    \n                                id_timezone\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                iso\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                iso3\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                nice_name\n                            \n                            \n                                    \n                                    \n                                    \n                                num_code\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        capital\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({type: String, example: 'New Delhi'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/create.dto.ts:140\n                        \n                    \n\n            \n                \n                    The capital city of the country.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        continent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({type: String, example: 'Asia'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/create.dto.ts:125\n                        \n                    \n\n            \n                \n                    The continent where the country is located.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        dial_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({type: String, example: '91'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/create.dto.ts:110\n                        \n                    \n\n            \n                \n                    The international dialing code for the country.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        id_country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude({toPlainOnly: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/create.dto.ts:173\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id_currency\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({type: String, example: '123e4567-e89b-12d3-a456-426614174000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/create.dto.ts:155\n                        \n                    \n\n            \n                \n                    The unique identifier for the currency.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id_timezone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({type: String, example: '80d3aa38-6b64-424a-a95b-383e6490f5d5'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/create.dto.ts:170\n                        \n                    \n\n            \n                \n                    The unique identifier for the timezone.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        iso\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Transform(upperCaseTransformer)@IsDefined()@IsNotEmpty()@IsString()@MaxLength(2)@ApiProperty({type: String, example: 'IN'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/create.dto.ts:51\n                        \n                    \n\n            \n                \n                    The ISO 3166-1 alpha-2 code of the country.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        iso3\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Transform(upperCaseTransformer)@IsNotEmpty()@IsString()@MaxLength(3)@ApiProperty({type: String, example: 'IND'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/create.dto.ts:82\n                        \n                    \n\n            \n                \n                    The ISO 3166-1 alpha-3 code of the country.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@ApiProperty({type: String, example: 'India'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/create.dto.ts:34\n                        \n                    \n\n            \n                \n                    The name of the country.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        nice_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@ApiProperty({type: String, example: 'India'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/create.dto.ts:66\n                        \n                    \n\n            \n                \n                    The nice name of the country.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        num_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({type: String, example: '91'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/create.dto.ts:96\n                        \n                    \n\n            \n                \n                    The international  code for the country.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nimport { Exclude, Transform } from 'class-transformer';\nimport { IsDefined, IsNotEmpty, IsString, MaxLength } from 'class-validator';\n\nimport { upperCaseTransformer } from '@app/utils/transformers/upper-case.transformer';\n\n/**\n * @fileoverview\n * This file defines the `CountryDto` class, which represents the data transfer object (DTO)\n * used for creating a new Country record. It includes validation rules and transformation logic\n * for the properties of the Country.\n *\n * @module\n * @description\n * The `CountryDto` class ensures that the data provided for creating a Country adheres to\n * specified validation rules and formats. It uses decorators from `class-validator` for validation\n * and `class-transformer` for transforming input data.\n */\nexport class CreateCountryDto {\n    /**\n     * The name of the country.\n     *\n     * @type {string}\n     * @example 'India'\n     */\n    @IsDefined()\n    @IsNotEmpty()\n    @IsString()\n    @ApiProperty({\n        type: String,\n        example: 'India',\n    })\n    name: string;\n\n    /**\n     * The ISO 3166-1 alpha-2 code of the country.\n     *\n     * @type {string}\n     * @example 'IN'\n     */\n    @Transform(upperCaseTransformer)\n    @IsDefined()\n    @IsNotEmpty()\n    @IsString()\n    @MaxLength(2)\n    @ApiProperty({\n        type: String,\n        example: 'IN',\n    })\n    iso: string;\n\n    /**\n     * The nice name of the country.\n     *\n     * @type {string}\n     * @example 'India'\n     */\n    @IsDefined()\n    @IsNotEmpty()\n    @IsString()\n    @ApiProperty({\n        type: String,\n        example: 'India',\n    })\n    nice_name: string;\n\n    /**\n     * The ISO 3166-1 alpha-3 code of the country.\n     *\n     * @type {string}\n     * @example 'IND'\n     */\n    @Transform(upperCaseTransformer)\n    @IsNotEmpty()\n    @IsString()\n    @MaxLength(3)\n    @ApiProperty({\n        type: String,\n        example: 'IND',\n    })\n    iso3: string;\n\n    /**\n     * The international  code for the country.\n     *\n     * @type {string}\n     * @example '91'\n     */\n    @IsNotEmpty()\n    @IsString()\n    @ApiProperty({\n        type: String,\n        example: '91',\n    })\n    num_code: string;\n\n    /**\n     * The international dialing code for the country.\n     *\n     * @type {string}\n     * @example '91'\n     */\n    @IsNotEmpty()\n    @IsString()\n    @ApiProperty({\n        type: String,\n        example: '91',\n    })\n    dial_code: string;\n\n    /**\n     * The continent where the country is located.\n     *\n     * @type {string}\n     * @example 'Asia'\n     */\n\n    @IsNotEmpty()\n    @IsString()\n    @ApiProperty({\n        type: String,\n        example: 'Asia',\n    })\n    continent: string;\n\n    /**\n     * The capital city of the country.\n     *\n     * @type {string}\n     * @example 'New Delhi'\n     */\n\n    @IsNotEmpty()\n    @IsString()\n    @ApiProperty({\n        type: String,\n        example: 'New Delhi',\n    })\n    capital: string;\n\n    /**\n     * The unique identifier for the currency.\n     *\n     * @type {string}\n     * @example '123e4567-e89b-12d3-a456-426614174000'\n     */\n\n    @IsNotEmpty()\n    @IsString()\n    @ApiProperty({\n        type: String,\n        example: '123e4567-e89b-12d3-a456-426614174000',\n    })\n    id_currency: string;\n\n    /**\n     * The unique identifier for the timezone.\n     *\n     * @type {string}\n     * @example '80d3aa38-6b64-424a-a95b-383e6490f5d5'\n     */\n\n    @IsNotEmpty()\n    @IsString()\n    @ApiProperty({\n        type: String,\n        example: '80d3aa38-6b64-424a-a95b-383e6490f5d5',\n    })\n    id_timezone: string;\n\n    @Exclude({ toPlainOnly: true })\n    id_country?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateDto.html":{"url":"classes/CreateDto.html","title":"class - CreateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/currencies/dto/create.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the CreateDto class, which represents the data transfer object (DTO)\nused for creating a new currency record. It includes validation rules and transformation logic\nfor the properties of the currency.\nThe CreateDto class ensures that the data provided for creating a currency adheres to\nspecified validation rules and formats. It uses decorators from class-validator for validation\nand class-transformer for transforming input data.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                code\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                decimal_digits\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name_plural\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                rounding\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                symbol\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                symbol_native\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Readonly\n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Transform(upperCaseTransformer)@IsDefined()@IsNotEmpty()@IsString()@MaxLength(3)@ApiProperty({type: String, description: 'Currency Code', example: 'INR', maxLength: 3})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/create.dto.ts:38\n                        \n                    \n\n            \n                \n                    Currency code, which must be uppercase and 3 characters long.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Readonly\n                        decimal_digits\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@Type(undefined)@IsNumber()@Min(0)@ApiProperty({type: Number, description: 'Decimal digits', example: '2'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/create.dto.ts:122\n                        \n                    \n\n            \n                \n                    Number of decimal digits used for the currency.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@MaxLength(80)@ApiProperty({type: String, description: 'name of currency', example: 'Indian Rupee', maxLength: 80})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/create.dto.ts:55\n                        \n                    \n\n            \n                \n                    Name of the currency.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name_plural\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@MaxLength(80)@ApiProperty({type: String, description: 'plural name of currency', example: 'Indian rupees', maxLength: 80})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/create.dto.ts:72\n                        \n                    \n\n            \n                \n                    Plural name of the currency.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Readonly\n                        rounding\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@Type(undefined)@IsNumber()@Min(0)@ApiProperty({type: Number, description: 'Rounding', example: '0'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/create.dto.ts:138\n                        \n                    \n\n            \n                \n                    Rounding precision used for the currency.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        symbol\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@MaxLength(6)@ApiProperty({type: String, description: 'Symbol of currency', example: '₹', maxLength: 6})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/create.dto.ts:89\n                        \n                    \n\n            \n                \n                    Symbol of the currency, which can be up to 6 characters long.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        symbol_native\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@MaxLength(10)@ApiProperty({type: String, description: 'native symbol of currency', example: '₹', maxLength: 10})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/create.dto.ts:106\n                        \n                    \n\n            \n                \n                    Native symbol of the currency, which can be up to 10 characters long.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nimport { Transform, Type } from 'class-transformer';\nimport { IsDefined, IsNotEmpty, IsNumber, IsString, Min, MaxLength } from 'class-validator';\n\nimport { upperCaseTransformer } from '@utils/transformers/upper-case.transformer';\n\n/**\n * @fileoverview\n * This file defines the `CreateDto` class, which represents the data transfer object (DTO)\n * used for creating a new currency record. It includes validation rules and transformation logic\n * for the properties of the currency.\n *\n * @module\n * @description\n * The `CreateDto` class ensures that the data provided for creating a currency adheres to\n * specified validation rules and formats. It uses decorators from `class-validator` for validation\n * and `class-transformer` for transforming input data.\n */\n\nexport class CreateDto {\n    /**\n     * Currency code, which must be uppercase and 3 characters long.\n     * @example 'INR'\n     */\n\n    @Transform(upperCaseTransformer)\n    @IsDefined()\n    @IsNotEmpty()\n    @IsString()\n    @MaxLength(3)\n    @ApiProperty({\n        type: String,\n        description: 'Currency Code',\n        example: 'INR',\n        maxLength: 3,\n    })\n    readonly code: string;\n\n    /**\n     * Name of the currency.\n     * @example 'Indian Rupee'\n     */\n\n    @IsDefined()\n    @IsNotEmpty()\n    @IsString()\n    @MaxLength(80)\n    @ApiProperty({\n        type: String,\n        description: 'name of currency',\n        example: 'Indian Rupee',\n        maxLength: 80,\n    })\n    name: string;\n\n    /**\n     * Plural name of the currency.\n     * @example 'Indian rupees'\n     */\n\n    @IsDefined()\n    @IsNotEmpty()\n    @IsString()\n    @MaxLength(80)\n    @ApiProperty({\n        type: String,\n        description: 'plural name of currency',\n        example: 'Indian rupees',\n        maxLength: 80,\n    })\n    name_plural: string;\n\n    /**\n     * Symbol of the currency, which can be up to 6 characters long.\n     * @example '₹'\n     */\n\n    @IsDefined()\n    @IsNotEmpty()\n    @IsString()\n    @MaxLength(6)\n    @ApiProperty({\n        type: String,\n        description: 'Symbol of currency',\n        example: '₹',\n        maxLength: 6,\n    })\n    symbol: string;\n\n    /**\n     * Native symbol of the currency, which can be up to 10 characters long.\n     * @example '₹'\n     */\n\n    @IsDefined()\n    @IsNotEmpty()\n    @IsString()\n    @MaxLength(10)\n    @ApiProperty({\n        type: String,\n        description: 'native symbol of currency',\n        example: '₹',\n        maxLength: 10,\n    })\n    symbol_native: string;\n\n    /**\n     * Number of decimal digits used for the currency.\n     * @example 2\n     */\n\n    @IsDefined()\n    @Type(() => Number)\n    @IsNumber()\n    @Min(0)\n    @ApiProperty({\n        type: Number,\n        description: 'Decimal digits',\n        example: '2',\n    })\n    readonly decimal_digits: number;\n\n    /**\n     * Rounding precision used for the currency.\n     * @example 0\n     */\n\n    @IsDefined()\n    @Type(() => Number)\n    @IsNumber()\n    @Min(0)\n    @ApiProperty({\n        type: Number,\n        description: 'Rounding',\n        example: '0',\n    })\n    readonly rounding: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CurrenciesController.html":{"url":"controllers/CurrenciesController.html","title":"controller - CurrenciesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CurrenciesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/currencies/currencies.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                This file defines the CurrenciesController, which handles HTTP requests related to currencies.\nIt provides endpoints to create, update, retrieve, and delete currencies.\nThe CurrenciesController is responsible for exposing endpoints that interact with the CurrenciesService.\nIt uses various HTTP methods to manage currency data and handles responses with appropriate HTTP status codes.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createDto: CreateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(undefined)@HttpCode(HttpStatus.OK)@ApiCreatedResponse({type: Currency, description: 'Create currency'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/currencies/currencies.controller.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createDto\n                                            \n                                                            CreateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data required to create a new currency.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The created currency object.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(undefined)@HttpCode(HttpStatus.OK)@ApiParam({name: 'id_currency', type: String})@ApiOkResponse({status: undefined, description: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/currencies/currencies.controller.ts:113\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the currency to be deleted.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                An object indicating the deletion result.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(query: PaginationQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(undefined)@HttpCode(HttpStatus.OK)@ApiOkResponse({type: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/currencies/currencies.controller.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe pagination and filtering parameters.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                A paginated list of currencies.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateDto: UpdateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(undefined)@HttpCode(HttpStatus.OK)@ApiParam({name: 'id_currency', type: String})@ApiOkResponse({type: Currency, description: 'Update Currency'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/currencies/currencies.controller.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the currency to be updated.\n\n\n                                            \n                                        \n                                        \n                                                updateDto\n                                            \n                                                            UpdateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data to update the currency with.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The updated currency object or null if not found.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    HttpCode,\n    HttpStatus,\n    Param,\n    Patch,\n    Post,\n    Query,\n} from '@nestjs/common';\nimport { ApiTags, ApiOkResponse, ApiCreatedResponse, ApiParam } from '@nestjs/swagger';\n\nimport { PaginationResponse, PaginationResponseDto } from '@utils/dto/pagination-response.dto';\nimport { PaginationQueryDto } from '@utils/dto/pagination.dto';\n\nimport { CurrenciesService } from './currencies.service';\nimport { CreateDto } from './dto/create.dto';\nimport { Currency } from './dto/currency';\nimport { UpdateDto } from './dto/update.dto';\n\nconst modules = 'currencies';\n\n/**\n * @fileoverview\n * This file defines the `CurrenciesController`, which handles HTTP requests related to currencies.\n * It provides endpoints to create, update, retrieve, and delete currencies.\n *\n * @module\n * @description\n * The `CurrenciesController` is responsible for exposing endpoints that interact with the `CurrenciesService`.\n * It uses various HTTP methods to manage currency data and handles responses with appropriate HTTP status codes.\n */\n\n@ApiTags('Currencies')\n@Controller()\nexport class CurrenciesController {\n    constructor(private readonly currenciesService: CurrenciesService) {}\n\n    /**\n     * @route POST /currencies\n     * @description Create a new currency.\n     * @param {CreateDto} createDto - The data required to create a new currency.\n     * @returns {Promise} The created currency object.\n     */\n\n    @Post(`${modules}`)\n    @HttpCode(HttpStatus.OK)\n    @ApiCreatedResponse({\n        type: Currency,\n        description: 'Create currency',\n    })\n    async create(@Body() createDto: CreateDto): Promise {\n        const created = await this.currenciesService.create(createDto);\n        return created;\n    }\n\n    /**\n     * @route PATCH /currencies/:id_currency\n     * @description Update an existing currency by its ID.\n     * @param {string} id - The ID of the currency to be updated.\n     * @param {UpdateDto} updateDto - The data to update the currency with.\n     * @returns {Promise} The updated currency object or null if not found.\n     */\n\n    @Patch(`${modules}/:id_currency`)\n    @HttpCode(HttpStatus.OK)\n    @ApiParam({ name: 'id_currency', type: String })\n    @ApiOkResponse({\n        type: Currency,\n        description: 'Update Currency',\n    })\n    async update(\n        @Param('id_currency') id: string,\n        @Body() updateDto: UpdateDto\n    ): Promise {\n        console.log('UPDATE', id, updateDto);\n        const updated = await this.currenciesService.update(id, updateDto);\n        return updated;\n    }\n\n    /**\n     * @route GET /currencies\n     * @description Retrieve a list of currencies with pagination.\n     * @param {PaginationQueryDto} query - The pagination and filtering parameters.\n     * @returns {Promise>} A paginated list of currencies.\n     */\n\n    @Get(`${modules}`)\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ type: PaginationResponse(Currency) })\n    async findAll(@Query() query: PaginationQueryDto): Promise> {\n        const get_all = await this.currenciesService.findAll(query);\n\n        return get_all;\n    }\n\n    /**\n     * @route DELETE /v1/currencies/:id_currency\n     * @description Delete a currency by its ID.\n     * @param {string} id - The ID of the currency to be deleted.\n     * @returns {Promise} An object indicating the deletion result.\n     */\n\n    @Delete(`${modules}/:id_currency`)\n    @HttpCode(HttpStatus.OK)\n    @ApiParam({ name: 'id_currency', type: String })\n    @ApiOkResponse({\n        status: HttpStatus.OK,\n        description: `${modules} has been successfully deleted.`,\n    })\n    async delete(@Param('id_currency') id: string): Promise {\n        const deleted = await this.currenciesService.delete(id);\n\n        return deleted;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CurrenciesModule.html":{"url":"modules/CurrenciesModule.html","title":"module - CurrenciesModule","body":"\n                   \n\n\n\n\n    Modules\n    CurrenciesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CurrenciesModule\n\n\n\ncluster_CurrenciesModule_providers\n\n\n\n\nCurrenciesService\n\nCurrenciesService\n\n\n\nCurrenciesModule\n\nCurrenciesModule\n\nCurrenciesModule -->\n\nCurrenciesService->CurrenciesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/currencies/currencies.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            This file defines the CurrenciesModule, which is responsible for managing currency-related functionalities.\nThe CurrenciesModule bundles together the controller and service related to currencies,\nalong with any other necessary providers.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CurrenciesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CurrenciesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { CurrenciesController } from './currencies.controller';\nimport { CurrenciesService } from './currencies.service';\nimport { Query } from './query';\n\n/**\n * @fileoverview\n * This file defines the `CurrenciesModule`, which is responsible for managing currency-related functionalities.\n *\n * @module\n * @description\n * The `CurrenciesModule` bundles together the controller and service related to currencies,\n * along with any other necessary providers.\n */\n@Module({\n    controllers: [CurrenciesController],\n    providers: [CurrenciesService, Query],\n})\nexport class CurrenciesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CurrenciesService.html":{"url":"injectables/CurrenciesService.html","title":"injectable - CurrenciesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CurrenciesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/currencies/currencies.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the CurrenciesService class, which provides methods to manage currency data.\nIt includes operations for creating, updating, retrieving, and deleting currencies.\nThe CurrenciesService class is responsible for handling business logic related to currencies.\nIt interacts with the database through the PrismaService and performs various operations using raw SQL queries.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                MODULE\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(paginationService: PaginationService, prisma: PrismaService, query: Query, utilsService: UtilsService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/currencies/currencies.service.ts:27\n                            \n                        \n\n                \n                    \n                            Creates an instance of CurrenciesService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        paginationService\n                                                  \n                                                        \n                                                                        PaginationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to handle pagination logic.\n\n\n                                                        \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to interact with the database.\n\n\n                                                        \n                                                \n                                                \n                                                        query\n                                                  \n                                                        \n                                                                        Query\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for SQL query generation.\n\n\n                                                        \n                                                \n                                                \n                                                        utilsService\n                                                  \n                                                        \n                                                                        UtilsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for utility functions, including dynamic query building.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createDto: CreateDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/currencies/currencies.service.ts:53\n                        \n                    \n\n\n            \n                \n                        Creates a new currency.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createDto\n                                            \n                                                            CreateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nData required to create a new currency.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The created currency object.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/currencies/currencies.service.ts:175\n                        \n                    \n\n\n            \n                \n                        Deletes a currency by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the currency to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                An object indicating the result of the deletion.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(paginationQuery: PaginationQueryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/currencies/currencies.service.ts:136\n                        \n                    \n\n\n            \n                \n                        Retrieves a paginated list of currencies.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                paginationQuery\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nPagination and filtering parameters.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                A paginated list of currencies.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/currencies/currencies.service.ts:201\n                        \n                    \n\n\n            \n                \n                        Retrieves a currency by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, payload: DeepPartial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/currencies/currencies.service.ts:86\n                        \n                    \n\n\n            \n                \n                        Updates an existing currency by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the currency to update.\n\n\n                                            \n                                        \n                                        \n                                                payload\n                                            \n                                                            DeepPartial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nData to update the currency with.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The updated currency object or null if not found.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        MODULE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/currencies.service.ts:27\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, HttpException, HttpStatus } from '@nestjs/common';\n\nimport { PaginationService } from '@services/pagination.service';\nimport { PrismaService } from '@services/prisma.service';\nimport { UtilsService } from '@services/util.service';\nimport { PaginationResponseDto } from '@utils/dto/pagination-response.dto';\nimport { PaginationQueryDto } from '@utils/dto/pagination.dto';\nimport { DeepPartial } from '@utils/types/deep-partial.type';\nimport { IPaginationFieldConfig } from '@utils/types/pagination-options';\n\nimport { CreateDto } from './dto/create.dto';\nimport { Currency } from './dto/currency';\nimport { Query } from './query';\n\n/**\n * @fileoverview\n * This file defines the `CurrenciesService` class, which provides methods to manage currency data.\n * It includes operations for creating, updating, retrieving, and deleting currencies.\n *\n * @module\n * @description\n * The `CurrenciesService` class is responsible for handling business logic related to currencies.\n * It interacts with the database through the `PrismaService` and performs various operations using raw SQL queries.\n */\n@Injectable()\nexport class CurrenciesService {\n    private readonly MODULE: string;\n\n    /**\n     * Creates an instance of `CurrenciesService`.\n     * @param {PaginationService} paginationService - Service to handle pagination logic.\n     * @param {PrismaService} prisma - Service to interact with the database.\n     * @param {Query} query - Service for SQL query generation.\n     * @param {UtilsService} utilsService - Service for utility functions, including dynamic query building.\n     */\n\n    constructor(\n        private readonly paginationService: PaginationService,\n        private readonly prisma: PrismaService,\n        private readonly query: Query,\n        private readonly utilsService: UtilsService\n    ) {\n        this.MODULE = 'currency';\n    }\n\n    /**\n     * Creates a new currency.\n     * @param {CreateDto} createDto - Data required to create a new currency.\n     * @returns {Promise} The created currency object.\n     * @throws {HttpException} If the currency code already exists or if an error occurs during creation.\n     */\n\n    async create(createDto: CreateDto): Promise {\n        // Check Code for prevent duplicate\n        const find = await this.prisma.executeRawQuery(this.query.findByCode(), createDto);\n\n        if (find) {\n            throw new HttpException({ message: 'CODE ALREADY EXIST' }, HttpStatus.CONFLICT);\n        }\n\n        // Create\n        const inserted = await this.prisma.executeRawQuery(this.query.insert(), createDto, [\n            'name',\n        ]);\n\n        if (inserted && inserted.insertid) {\n            const get = await this.findOne(inserted.insertid);\n\n            return get as any;\n        } else {\n            throw new HttpException(\n                { message: 'Something went wrong' },\n                HttpStatus.INTERNAL_SERVER_ERROR\n            );\n        }\n    }\n\n    /**\n     * Updates an existing currency by its ID.\n     * @param {string} id - The ID of the currency to update.\n     * @param {DeepPartial} payload - Data to update the currency with.\n     * @returns {Promise} The updated currency object or null if not found.\n     * @throws {HttpException} If nothing to update is provided, if the code already exists, or if an error occurs during the update.\n     */\n\n    async update(id: string, payload: DeepPartial): Promise {\n        if (Object.keys(payload).length === 0) {\n            throw new HttpException(\n                {\n                    message: 'Nothing to be update!',\n                },\n                HttpStatus.BAD_REQUEST\n            );\n        }\n        if (payload.code) {\n            // Check Code\n\n            const find = await this.prisma.executeRawQuery(this.query.findByCode(id), payload);\n\n            if (find) {\n                throw new HttpException(\n                    {\n                        message: 'Code already exists!',\n                    },\n                    HttpStatus.CONFLICT\n                );\n            }\n        }\n\n        payload.id = id;\n\n        // Update\n        const updated = await this.prisma.executeRawQuery(this.query.update(), payload, ['name']);\n\n        if (!updated) {\n            throw new HttpException(\n                { message: 'Something went wrong' },\n                HttpStatus.INTERNAL_SERVER_ERROR\n            );\n        }\n\n        if (updated[0]?.updatedid) {\n            const get = await this.findOne(id);\n            return get;\n        } else {\n            throw new HttpException({ message: `${this.MODULE} not found` }, HttpStatus.NOT_FOUND);\n        }\n    }\n\n    /**\n     * Retrieves a paginated list of currencies.\n     * @param {PaginationQueryDto} paginationQuery - Pagination and filtering parameters.\n     * @returns {Promise>} A paginated list of currencies.\n     */\n\n    async findAll(paginationQuery: PaginationQueryDto): Promise> {\n        const baseFields = this.query.pgBaseSelectField();\n        const fromQuery = this.query.pgBaseQuery();\n\n        const fieldConfigs: Record = null;\n\n        const { selectQuery, countQuery } = this.utilsService.buildDynamicQuery(\n            paginationQuery,\n            fieldConfigs,\n            baseFields,\n            fromQuery,\n            'ptbl.id_currency'\n        );\n\n        return this.paginationService.paginate(selectQuery, countQuery, paginationQuery);\n\n        // const { joinTables, selectFields, filterQuery, sortByQuery } =\n        //     this.utilsService.buildDynamicQuery(paginationQuery, fieldConfigs);\n\n        // const selectQuery = `SELECT ${baseFields.join(', ')} ${selectFields} ${fromQuery} ${joinTables.join(' ')} ${filterQuery} ${sortByQuery}`;\n        // const countQuery = `SELECT count(*) ${fromQuery} ${joinTables.join(' ')} ${filterQuery}`;\n\n        // const { selectQuery, countQuery } = this.utilsService.queryStatements(\n        //     baseFields,\n        //     selectFields,\n        //     fromQuery,\n        //     joinTables,\n        //     filterQuery,\n        //     sortByQuery\n        // );\n    }\n\n    /**\n     * Deletes a currency by its ID.\n     * @param {string} id - The ID of the currency to delete.\n     * @returns {Promise} An object indicating the result of the deletion.\n     * @throws {HttpException} If an error occurs during deletion or if the currency is not found.\n     */\n\n    async delete(id: string): Promise {\n        // Delete\n        const deleted = await this.prisma.executeRawQuery(this.query.delete(), id);\n\n        if (!deleted) {\n            throw new HttpException(\n                { message: 'Something went wrong' },\n                HttpStatus.INTERNAL_SERVER_ERROR\n            );\n        }\n\n        if (deleted[0]?.deletedid) {\n            return { status: 'success' };\n        } else {\n            throw new HttpException({ message: `${this.MODULE} not found` }, HttpStatus.NOT_FOUND);\n        }\n    }\n\n    /*** HELPER METHODS */\n\n    /**\n     * Retrieves a currency by its ID.\n     * @param {string} id - The ID of the currency to retrieve.\n     * @returns {Promise} The currency object.\n     */\n\n    async findOne(id: string): Promise {\n        // Get\n        const data = await this.prisma.executeRawQuery(this.query.findById(), { id });\n\n        return data;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Currency.html":{"url":"classes/Currency.html","title":"class - Currency","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Currency\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/currencies/dto/currency.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the Currency class, which represents the data structure of a currency entity.\nIt includes properties that describe the currency and uses decorators for Swagger documentation\nand data transformation.\nThe Currency class is used to define the structure of a currency object, including its code, name,\nplural name, symbol, native symbol, decimal digits, and rounding. The class also uses decorators\nto configure how the properties should be documented and transformed.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                code\n                            \n                            \n                                    \n                                decimal_digits\n                            \n                            \n                                    \n                                    Optional\n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                name_plural\n                            \n                            \n                                    \n                                rounding\n                            \n                            \n                                    \n                                symbol\n                            \n                            \n                                    \n                                symbol_native\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'Currency Code', example: 'INR'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/currency.ts:28\n                        \n                    \n\n            \n                \n                    The code of the currency (e.g., 'INR').\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        decimal_digits\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: 'Decimal digits', example: '2'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/currency.ts:88\n                        \n                    \n\n            \n                \n                    The number of decimal digits used for the currency.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude({toPlainOnly: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/currency.ts:108\n                        \n                    \n\n            \n                \n                    The unique identifier for the currency.\nThis property is excluded from the plain representation of the object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'name of currency', example: 'Indian Rupee'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/currency.ts:40\n                        \n                    \n\n            \n                \n                    The name of the currency (e.g., 'Indian Rupee').\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name_plural\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'plural name of currency', example: 'Indian rupees'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/currency.ts:52\n                        \n                    \n\n            \n                \n                    The plural name of the currency (e.g., 'Indian rupees').\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        rounding\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: 'Rounding', example: '0'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/currency.ts:100\n                        \n                    \n\n            \n                \n                    The rounding precision used for the currency.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        symbol\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'Symbol of currency', example: '₹'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/currency.ts:64\n                        \n                    \n\n            \n                \n                    The symbol  of the currency (e.g., '₹').\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        symbol_native\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'native symbol of currency', example: '₹'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/currency.ts:76\n                        \n                    \n\n            \n                \n                    The native symbol of the currency (e.g., '₹').\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nimport { Exclude } from 'class-transformer';\n\n/**\n * @fileoverview\n * This file defines the `Currency` class, which represents the data structure of a currency entity.\n * It includes properties that describe the currency and uses decorators for Swagger documentation\n * and data transformation.\n *\n * @module\n * @description\n * The `Currency` class is used to define the structure of a currency object, including its code, name,\n * plural name, symbol, native symbol, decimal digits, and rounding. The class also uses decorators\n * to configure how the properties should be documented and transformed.\n */\nexport class Currency {\n    /**\n     * The code of the currency (e.g., 'INR').\n     * @example 'INR'\n     */\n\n    @ApiProperty({\n        type: String,\n        description: 'Currency Code',\n        example: 'INR',\n    })\n    code: string;\n\n    /**\n     * The name of the currency (e.g., 'Indian Rupee').\n     * @example 'Indian Rupee'\n     */\n\n    @ApiProperty({\n        type: String,\n        description: 'name of currency',\n        example: 'Indian Rupee',\n    })\n    name: string;\n\n    /**\n     * The plural name of the currency (e.g., 'Indian rupees').\n     * @example 'Indian rupees'\n     */\n\n    @ApiProperty({\n        type: String,\n        description: 'plural name of currency',\n        example: 'Indian rupees',\n    })\n    name_plural: string;\n\n    /**\n     * The symbol  of the currency (e.g., '₹').\n     * @example '₹'\n     */\n\n    @ApiProperty({\n        type: String,\n        description: 'Symbol of currency',\n        example: '₹',\n    })\n    symbol: string;\n\n    /**\n     * The native symbol of the currency (e.g., '₹').\n     * @example '₹'\n     */\n\n    @ApiProperty({\n        type: String,\n        description: 'native symbol of currency',\n        example: '₹',\n    })\n    symbol_native: string;\n\n    /**\n     * The number of decimal digits used for the currency.\n     * @example 2\n     */\n\n    @ApiProperty({\n        type: Number,\n        description: 'Decimal digits',\n        example: '2',\n    })\n    decimal_digits: number;\n\n    /**\n     * The rounding precision used for the currency.\n     * @example 0\n     */\n\n    @ApiProperty({\n        type: Number,\n        description: 'Rounding',\n        example: '0',\n    })\n    rounding: number;\n\n    /**\n     * The unique identifier for the currency.\n     * This property is excluded from the plain representation of the object.\n     */\n\n    @Exclude({ toPlainOnly: true })\n    id?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Document.html":{"url":"classes/Document.html","title":"class - Document","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Document\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/documents/dto/documents.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the Document class, which represents the data structure of a document entity.\nIt includes properties that describe the document and uses decorators for Swagger documentation.\nThe Document class is used to define the structure of a document object, including its ID, name, status,\nand associated document group. The class also uses decorators to configure how the properties should be documented and transformed.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id_document\n                            \n                            \n                                    \n                                id_document_group\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id_document\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: '421939d4-b484-4f58-aa03-d8e94a843431'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/documents/dto/documents.dto.ts:22\n                        \n                    \n\n            \n                \n                    The unique identifier of the document (e.g., '\"421939d4-b484-4f58-aa03-d8e94a843431\"').\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id_document_group\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: '09407516-c0ac-4298-a6a7-59f48b87c094'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/documents/dto/documents.dto.ts:32\n                        \n                    \n\n            \n                \n                    The ID of the document group to which the document belongs.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'Passport'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/documents/dto/documents.dto.ts:42\n                        \n                    \n\n            \n                \n                    The name of the document (e.g., 'Passport').\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: Number, example: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/documents/dto/documents.dto.ts:52\n                        \n                    \n\n            \n                \n                    The status of the document (e.g., 1 for active).\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiResponseProperty } from '@nestjs/swagger';\n\n/**\n * @fileoverview\n * This file defines the `Document` class, which represents the data structure of a document entity.\n * It includes properties that describe the document and uses decorators for Swagger documentation.\n *\n * @module\n * @description\n * The `Document` class is used to define the structure of a document object, including its ID, name, status,\n * and associated document group. The class also uses decorators to configure how the properties should be documented and transformed.\n */\nexport class Document {\n    /**\n     * The unique identifier of the document (e.g., '\"421939d4-b484-4f58-aa03-d8e94a843431\"').\n     * @example '\"421939d4-b484-4f58-aa03-d8e94a843431\"'\n     */\n    @ApiResponseProperty({\n        type: String,\n        example: '421939d4-b484-4f58-aa03-d8e94a843431',\n    })\n    id_document: string;\n\n    /**\n     * The ID of the document group to which the document belongs.\n     * @example '09407516-c0ac-4298-a6a7-59f48b87c094'\n     */\n    @ApiResponseProperty({\n        type: String,\n        example: '09407516-c0ac-4298-a6a7-59f48b87c094',\n    })\n    id_document_group: string;\n\n    /**\n     * The name of the document (e.g., 'Passport').\n     * @example 'Passport'\n     */\n    @ApiResponseProperty({\n        type: String,\n        example: 'Passport',\n    })\n    name: string;\n\n    /**\n     * The status of the document (e.g., 1 for active).\n     * @example 1\n     */\n    @ApiResponseProperty({\n        type: Number,\n        example: 1,\n    })\n    status: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/DocumentController.html":{"url":"controllers/DocumentController.html","title":"controller - DocumentController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  DocumentController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/documents/documents.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                documents\n            \n\n\n            \n                Description\n            \n            \n                This file defines the DocumentController, which handles HTTP requests related to documents.\nIt provides endpoints to create, update, retrieve, and delete document records.\nThe DocumentController is responsible for exposing endpoints that interact with the DocumentService.\nIt uses various HTTP methods to manage document data and handles responses with appropriate HTTP status codes.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createDto: DocumentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(HttpStatus.CREATED)@ApiCreatedResponse({type: Document, description: 'Create document'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/master/documents/documents.controller.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createDto\n                                            \n                                                            DocumentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data required to create a new document.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The created document object.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(HttpStatus.OK)@ApiParam({name: 'id', type: String})@ApiOkResponse({status: undefined, description: 'Document has been successfully deleted.'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/master/documents/documents.controller.ts:119\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the document to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                An object indicating the deletion result.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(query: PaginationQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@ApiOkResponse({type: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/master/documents/documents.controller.ts:85\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe pagination and filtering parameters.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                A paginated list of documents.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@HttpCode(HttpStatus.OK)@ApiParam({name: 'id', type: String})@ApiOkResponse({type: Document, description: 'Get document by ID'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/master/documents/documents.controller.ts:102\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the document to retrieve.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The document object.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateDto: UpdateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@HttpCode(HttpStatus.OK)@ApiParam({name: 'id', type: String})@ApiOkResponse({type: Document, description: 'Update document'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/master/documents/documents.controller.ts:69\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the document to be updated.\n\n\n                                            \n                                        \n                                        \n                                                updateDto\n                                            \n                                                            UpdateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data to update the document with.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The updated document object or null if not found.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    HttpCode,\n    HttpStatus,\n    Param,\n    ParseUUIDPipe,\n    Patch,\n    Post,\n    Query,\n} from '@nestjs/common';\nimport { ApiTags, ApiOkResponse, ApiCreatedResponse, ApiParam } from '@nestjs/swagger';\n\nimport { PaginationResponse, PaginationResponseDto } from '@utils/dto/pagination-response.dto';\nimport { PaginationQueryDto } from '@utils/dto/pagination.dto';\n\nimport { DocumentService } from './documents.service';\nimport { DocumentDto } from './dto/create.dto';\nimport { Document } from './dto/documents.dto';\nimport { UpdateDto } from './dto/update.dto';\n\n/**\n * @fileoverview\n * This file defines the `DocumentController`, which handles HTTP requests related to documents.\n * It provides endpoints to create, update, retrieve, and delete document records.\n *\n * @module\n * @description\n * The `DocumentController` is responsible for exposing endpoints that interact with the `DocumentService`.\n * It uses various HTTP methods to manage document data and handles responses with appropriate HTTP status codes.\n */\n@ApiTags('Documents')\n@Controller('documents')\nexport class DocumentController {\n    constructor(private readonly documentService: DocumentService) {}\n\n    /**\n     * @route POST /documents\n     * @description Create a new document.\n     * @param {DocumentDto} createDto - The data required to create a new document.\n     * @returns {Promise} The created document object.\n     */\n    @Post()\n    @HttpCode(HttpStatus.CREATED)\n    @ApiCreatedResponse({\n        type: Document,\n        description: 'Create document',\n    })\n    async create(@Body() createDto: DocumentDto): Promise {\n        return this.documentService.create(createDto);\n    }\n\n    /**\n     * @route PATCH /documents/:id\n     * @description Update an existing document by its ID.\n     * @param {string} id - The ID of the document to be updated.\n     * @param {UpdateDto} updateDto - The data to update the document with.\n     * @returns {Promise} The updated document object or null if not found.\n     */\n    @Patch(':id')\n    @HttpCode(HttpStatus.OK)\n    @ApiParam({ name: 'id', type: String })\n    @ApiOkResponse({\n        type: Document,\n        description: 'Update document',\n    })\n    async update(\n        @Param('id', ParseUUIDPipe) id: string,\n        @Body() updateDto: UpdateDto\n    ): Promise {\n        return this.documentService.update(id, updateDto);\n    }\n\n    /**\n     * @route GET /documents\n     * @description Retrieve a list of documents with pagination.\n     * @param {PaginationQueryDto} query - The pagination and filtering parameters.\n     * @returns {Promise>} A paginated list of documents.\n     */\n    @Get()\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ type: PaginationResponse(Document) })\n    async findAll(@Query() query: PaginationQueryDto): Promise> {\n        return this.documentService.findAll(query);\n    }\n\n    /**\n     * @route GET /documents/:id\n     * @description Retrieve a single document by its ID.\n     * @param {string} id - The ID of the document to retrieve.\n     * @returns {Promise} The document object.\n     */\n    @Get(':id')\n    @HttpCode(HttpStatus.OK)\n    @ApiParam({ name: 'id', type: String })\n    @ApiOkResponse({\n        type: Document,\n        description: 'Get document by ID',\n    })\n    async findOne(@Param('id', ParseUUIDPipe) id: string): Promise {\n        return this.documentService.findOne(id);\n    }\n\n    /**\n     * @route DELETE /documents/:id\n     * @description Delete a document by its ID.\n     * @param {string} id - The ID of the document to delete.\n     * @returns {Promise} An object indicating the deletion result.\n     */\n    @Delete(':id')\n    @HttpCode(HttpStatus.OK)\n    @ApiParam({ name: 'id', type: String })\n    @ApiOkResponse({\n        status: HttpStatus.OK,\n        description: 'Document has been successfully deleted.',\n    })\n    async delete(@Param('id', ParseUUIDPipe) id: string): Promise {\n        return this.documentService.delete(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DocumentDto.html":{"url":"classes/DocumentDto.html","title":"class - DocumentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DocumentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/documents/dto/create.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the DocumentDto class, which represents the data transfer object (DTO)\nused for creating a new document record. It includes validation rules and transformation logic\nfor the properties of the document.\nThe DocumentDto class ensures that the data provided for creating a document adheres to\nspecified validation rules and formats. It uses decorators from class-validator for validation\nand class-transformer for transforming input data.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                id_document\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                id_document_group\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                            \n                                    \n                                    Optional\n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        id_document\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude({toPlainOnly: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/documents/dto/create.dto.ts:67\n                        \n                    \n\n            \n                \n                    The unique identifier for the document.\nThis property is excluded from the plain representation of the object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        id_document_group\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@ApiProperty({type: String, description: 'Document group ID', example: '\"421939d4-b484-4f58-aa03-d8e94a843431\"'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/documents/dto/create.dto.ts:31\n                        \n                    \n\n            \n                \n                    The ID of the document group to which the document belongs.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@ApiProperty({type: String, description: 'Document name', example: 'Passport', maxLength: 25})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/documents/dto/create.dto.ts:46\n                        \n                    \n\n            \n                \n                    The name of the document (e.g., 'Passport').\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNumber()@ApiProperty({type: Number, description: 'Status of the document', example: 1, default: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/documents/dto/create.dto.ts:60\n                        \n                    \n\n            \n                \n                    The status of the document (e.g., 1 for active).\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude({toPlainOnly: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/documents/dto/create.dto.ts:70\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nimport { Exclude } from 'class-transformer';\nimport { IsDefined, IsNotEmpty, IsString, IsOptional, IsNumber } from 'class-validator';\n\n/**\n * @fileoverview\n * This file defines the `DocumentDto` class, which represents the data transfer object (DTO)\n * used for creating a new document record. It includes validation rules and transformation logic\n * for the properties of the document.\n *\n * @module\n * @description\n * The `DocumentDto` class ensures that the data provided for creating a document adheres to\n * specified validation rules and formats. It uses decorators from `class-validator` for validation\n * and `class-transformer` for transforming input data.\n */\nexport class DocumentDto {\n    /**\n     * The ID of the document group to which the document belongs.\n     * @example '\"421939d4-b484-4f58-aa03-d8e94a843431\"'\n     */\n    @IsDefined()\n    @IsNotEmpty()\n    @IsString()\n    @ApiProperty({\n        type: String,\n        description: 'Document group ID',\n        example: '\"421939d4-b484-4f58-aa03-d8e94a843431\"',\n    })\n    id_document_group: string;\n\n    /**\n     * The name of the document (e.g., 'Passport').\n     * @example 'Passport'\n     */\n    @IsDefined()\n    @IsNotEmpty()\n    @IsString()\n    @ApiProperty({\n        type: String,\n        description: 'Document name',\n        example: 'Passport',\n        maxLength: 25,\n    })\n    name: string;\n\n    /**\n     * The status of the document (e.g., 1 for active).\n     * @example 1\n     */\n    @IsOptional()\n    @IsNumber()\n    @ApiProperty({\n        type: Number,\n        description: 'Status of the document',\n        example: 1,\n        default: 1,\n    })\n    status?: number;\n\n    /**\n     * The unique identifier for the document.\n     * This property is excluded from the plain representation of the object.\n     */\n    @Exclude({ toPlainOnly: true })\n    id_document?: string;\n\n    @Exclude({ toPlainOnly: true })\n    updated_at?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DocumentGroup.html":{"url":"classes/DocumentGroup.html","title":"class - DocumentGroup","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DocumentGroup\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/document_groups/dto/document_grp.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the DocumentGroup class, which represents the data structure of a document group entity.\nIt includes properties that describe the document group and uses decorators for Swagger documentation.\nThe DocumentGroup class is used to define the structure of a document group object, including its name, status,\nand timestamps. The class also uses decorators to configure how the properties should be documented and transformed.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id_document_group\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id_document_group\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: '\"421939d4-b484-4f58-aa03-d8e94a843431\"'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/document_groups/dto/document_grp.dto.ts:22\n                        \n                    \n\n            \n                \n                    The unique identifier of the document group (e.g., '\"421939d4-b484-4f58-aa03-d8e94a843431\"').\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'Legal Documents'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/document_groups/dto/document_grp.dto.ts:32\n                        \n                    \n\n            \n                \n                    The name of the document group (e.g., 'Legal Documents').\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: Number, example: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/document_groups/dto/document_grp.dto.ts:42\n                        \n                    \n\n            \n                \n                    The status of the document group (e.g., 1 for active).\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiResponseProperty } from '@nestjs/swagger';\n\n/**\n * @fileoverview\n * This file defines the `DocumentGroup` class, which represents the data structure of a document group entity.\n * It includes properties that describe the document group and uses decorators for Swagger documentation.\n *\n * @module\n * @description\n * The `DocumentGroup` class is used to define the structure of a document group object, including its name, status,\n * and timestamps. The class also uses decorators to configure how the properties should be documented and transformed.\n */\nexport class DocumentGroup {\n    /**\n     * The unique identifier of the document group (e.g., '\"421939d4-b484-4f58-aa03-d8e94a843431\"').\n     * @example '\"421939d4-b484-4f58-aa03-d8e94a843431\"'\n     */\n    @ApiResponseProperty({\n        type: String,\n        example: '\"421939d4-b484-4f58-aa03-d8e94a843431\"',\n    })\n    id_document_group: string;\n\n    /**\n     * The name of the document group (e.g., 'Legal Documents').\n     * @example 'Legal Documents'\n     */\n    @ApiResponseProperty({\n        type: String,\n        example: 'Legal Documents',\n    })\n    name: string;\n\n    /**\n     * The status of the document group (e.g., 1 for active).\n     * @example 1\n     */\n    @ApiResponseProperty({\n        type: Number,\n        example: 1,\n    })\n    status: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/DocumentGroupController.html":{"url":"controllers/DocumentGroupController.html","title":"controller - DocumentGroupController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  DocumentGroupController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/document_groups/document_grp.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                document-groups\n            \n\n\n            \n                Description\n            \n            \n                This file defines the DocumentGroupController, which handles HTTP requests related to document groups.\nIt provides endpoints to create, update, retrieve, and delete document group records.\nThe DocumentGroupController is responsible for exposing endpoints that interact with the DocumentGroupService.\nIt uses various HTTP methods to manage document group data and handles responses with appropriate HTTP status codes.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createDto: DocumentGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(HttpStatus.CREATED)@ApiCreatedResponse({type: DocumentGroup, description: 'Create document group'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/master/document_groups/document_grp.controller.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createDto\n                                            \n                                                            DocumentGroupDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data required to create a new document group.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                The created document group object.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(HttpStatus.OK)@ApiParam({name: 'id', type: String})@ApiOkResponse({status: undefined, description: 'Document group has been successfully deleted.'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/master/document_groups/document_grp.controller.ts:121\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the document group to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                An object indicating the deletion result.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(query: PaginationQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@ApiOkResponse({type: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/master/document_groups/document_grp.controller.ts:85\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe pagination and filtering parameters.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                A paginated list of document groups.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@HttpCode(HttpStatus.OK)@ApiParam({name: 'id', type: String})@ApiOkResponse({type: DocumentGroup, description: 'Get document group by ID'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/master/document_groups/document_grp.controller.ts:104\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the document group to retrieve.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                The document group object.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateDto: UpdateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@HttpCode(HttpStatus.OK)@ApiParam({name: 'id', type: String})@ApiOkResponse({type: DocumentGroup, description: 'Update document group'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/master/document_groups/document_grp.controller.ts:69\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the document group to be updated.\n\n\n                                            \n                                        \n                                        \n                                                updateDto\n                                            \n                                                            UpdateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data to update the document group with.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                The updated document group object or null if not found.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    HttpCode,\n    HttpStatus,\n    Param,\n    ParseUUIDPipe,\n    Patch,\n    Post,\n    Query,\n} from '@nestjs/common';\nimport { ApiTags, ApiOkResponse, ApiCreatedResponse, ApiParam } from '@nestjs/swagger';\n\nimport { PaginationResponse, PaginationResponseDto } from '@utils/dto/pagination-response.dto';\nimport { PaginationQueryDto } from '@utils/dto/pagination.dto';\n\nimport { DocumentGroupService } from './document_grp.service';\nimport { DocumentGroupDto } from './dto/create.dto';\nimport { DocumentGroup } from './dto/document_grp.dto';\nimport { UpdateDto } from './dto/update.dto';\n\n/**\n * @fileoverview\n * This file defines the `DocumentGroupController`, which handles HTTP requests related to document groups.\n * It provides endpoints to create, update, retrieve, and delete document group records.\n *\n * @module\n * @description\n * The `DocumentGroupController` is responsible for exposing endpoints that interact with the `DocumentGroupService`.\n * It uses various HTTP methods to manage document group data and handles responses with appropriate HTTP status codes.\n */\n@ApiTags('DocumentGroups')\n@Controller('document-groups')\nexport class DocumentGroupController {\n    constructor(private readonly documentGroupService: DocumentGroupService) {}\n\n    /**\n     * @route POST /document-groups\n     * @description Create a new document group.\n     * @param {DocumentGroupDto} createDto - The data required to create a new document group.\n     * @returns {Promise} The created document group object.\n     */\n    @Post()\n    @HttpCode(HttpStatus.CREATED)\n    @ApiCreatedResponse({\n        type: DocumentGroup,\n        description: 'Create document group',\n    })\n    async create(@Body() createDto: DocumentGroupDto): Promise {\n        return this.documentGroupService.create(createDto);\n    }\n\n    /**\n     * @route PATCH /document-groups/:id\n     * @description Update an existing document group by its ID.\n     * @param {string} id - The ID of the document group to be updated.\n     * @param {UpdateDto} updateDto - The data to update the document group with.\n     * @returns {Promise} The updated document group object or null if not found.\n     */\n    @Patch(':id')\n    @HttpCode(HttpStatus.OK)\n    @ApiParam({ name: 'id', type: String })\n    @ApiOkResponse({\n        type: DocumentGroup,\n        description: 'Update document group',\n    })\n    async update(\n        @Param('id', ParseUUIDPipe) id: string,\n        @Body() updateDto: UpdateDto\n    ): Promise {\n        return this.documentGroupService.update(id, updateDto);\n    }\n\n    /**\n     * @route GET /document-groups\n     * @description Retrieve a list of document groups with pagination.\n     * @param {PaginationQueryDto} query - The pagination and filtering parameters.\n     * @returns {Promise>} A paginated list of document groups.\n     */\n    @Get()\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ type: PaginationResponse(DocumentGroup) })\n    async findAll(\n        @Query() query: PaginationQueryDto\n    ): Promise> {\n        return this.documentGroupService.findAll(query);\n    }\n\n    /**\n     * @route GET /document-groups/:id\n     * @description Retrieve a single document group by its ID.\n     * @param {string} id - The ID of the document group to retrieve.\n     * @returns {Promise} The document group object.\n     */\n    @Get(':id')\n    @HttpCode(HttpStatus.OK)\n    @ApiParam({ name: 'id', type: String })\n    @ApiOkResponse({\n        type: DocumentGroup,\n        description: 'Get document group by ID',\n    })\n    async findOne(@Param('id', ParseUUIDPipe) id: string): Promise {\n        return this.documentGroupService.findOne(id);\n    }\n\n    /**\n     * @route DELETE /document-groups/:id\n     * @description Delete a document group by its ID.\n     * @param {string} id - The ID of the document group to delete.\n     * @returns {Promise} An object indicating the deletion result.\n     */\n    @Delete(':id')\n    @HttpCode(HttpStatus.OK)\n    @ApiParam({ name: 'id', type: String })\n    @ApiOkResponse({\n        status: HttpStatus.OK,\n        description: 'Document group has been successfully deleted.',\n    })\n    async delete(@Param('id', ParseUUIDPipe) id: string): Promise {\n        return this.documentGroupService.delete(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DocumentGroupDto.html":{"url":"classes/DocumentGroupDto.html","title":"class - DocumentGroupDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DocumentGroupDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/document_groups/dto/create.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the DocumentGroupDto class, which represents the data transfer object (DTO)\nused for creating a new document group record. It includes validation rules and transformation logic\nfor the properties of the document group.\nThe DocumentGroupDto class ensures that the data provided for creating a document group adheres to\nspecified validation rules and formats. It uses decorators from class-validator for validation\nand class-transformer for transforming input data.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                id_document_group\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                            \n                                    \n                                    Optional\n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        id_document_group\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude({toPlainOnly: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/document_groups/dto/create.dto.ts:53\n                        \n                    \n\n            \n                \n                    The unique identifier for the document group.\nThis property is excluded from the plain representation of the object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@ApiProperty({type: String, description: 'Document group name', example: 'Legal Documents', maxLength: 25})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/document_groups/dto/create.dto.ts:32\n                        \n                    \n\n            \n                \n                    The name of the document group (e.g., 'Legal Documents').\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNumber()@ApiProperty({type: Number, description: 'Status of the document group', example: 1, default: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/document_groups/dto/create.dto.ts:46\n                        \n                    \n\n            \n                \n                    The status of the document group (e.g., 1 for active).\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude({toPlainOnly: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/document_groups/dto/create.dto.ts:56\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nimport { Exclude } from 'class-transformer';\nimport { IsDefined, IsNotEmpty, IsString, IsOptional, IsNumber } from 'class-validator';\n\n/**\n * @fileoverview\n * This file defines the `DocumentGroupDto` class, which represents the data transfer object (DTO)\n * used for creating a new document group record. It includes validation rules and transformation logic\n * for the properties of the document group.\n *\n * @module\n * @description\n * The `DocumentGroupDto` class ensures that the data provided for creating a document group adheres to\n * specified validation rules and formats. It uses decorators from `class-validator` for validation\n * and `class-transformer` for transforming input data.\n */\nexport class DocumentGroupDto {\n    /**\n     * The name of the document group (e.g., 'Legal Documents').\n     * @example 'Legal Documents'\n     */\n    @IsDefined()\n    @IsNotEmpty()\n    @IsString()\n    @ApiProperty({\n        type: String,\n        description: 'Document group name',\n        example: 'Legal Documents',\n        maxLength: 25,\n    })\n    name: string;\n\n    /**\n     * The status of the document group (e.g., 1 for active).\n     * @example 1\n     */\n    @IsOptional()\n    @IsNumber()\n    @ApiProperty({\n        type: Number,\n        description: 'Status of the document group',\n        example: 1,\n        default: 1,\n    })\n    status?: number;\n\n    /**\n     * The unique identifier for the document group.\n     * This property is excluded from the plain representation of the object.\n     */\n    @Exclude({ toPlainOnly: true })\n    id_document_group?: string;\n\n    @Exclude({ toPlainOnly: true })\n    updated_at?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DocumentGroupModule.html":{"url":"modules/DocumentGroupModule.html","title":"module - DocumentGroupModule","body":"\n                   \n\n\n\n\n    Modules\n    DocumentGroupModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_DocumentGroupModule\n\n\n\ncluster_DocumentGroupModule_providers\n\n\n\ncluster_DocumentGroupModule_exports\n\n\n\n\nDocumentGroupService \n\nDocumentGroupService \n\n\n\nDocumentGroupModule\n\nDocumentGroupModule\n\nDocumentGroupService  -->\n\nDocumentGroupModule->DocumentGroupService \n\n\n\n\n\nDocumentGroupService\n\nDocumentGroupService\n\nDocumentGroupModule -->\n\nDocumentGroupService->DocumentGroupModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/master/document_groups/document_grp.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            This file defines the DocumentGroupModule, which bundles the DocumentGroupController and DocumentGroupService together.\nThe DocumentGroupModule is responsible for handling document group-related operations. It provides the necessary controllers and services to manage document groups.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DocumentGroupService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            DocumentGroupController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            DocumentGroupService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { DocumentGroupController } from './document_grp.controller';\nimport { DocumentGroupService } from './document_grp.service';\nimport { Query } from './query';\n\n/**\n * @fileoverview\n * This file defines the `DocumentGroupModule`, which bundles the `DocumentGroupController` and `DocumentGroupService` together.\n *\n * @module\n * @description\n * The `DocumentGroupModule` is responsible for handling document group-related operations. It provides the necessary controllers and services to manage document groups.\n */\n@Module({\n    controllers: [DocumentGroupController],\n    providers: [DocumentGroupService, Query],\n    exports: [DocumentGroupService],\n})\nexport class DocumentGroupModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DocumentGroupService.html":{"url":"injectables/DocumentGroupService.html","title":"injectable - DocumentGroupService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DocumentGroupService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/document_groups/document_grp.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the DocumentGroupService class, which provides methods to manage document group data.\nIt includes operations for creating, updating, retrieving, and deleting document groups.\nThe DocumentGroupService class is responsible for handling business logic related to document groups.\nIt interacts with the database through the PrismaService and performs various operations using raw SQL queries.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                MODULE\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(paginationService: PaginationService, prisma: PrismaService, query: Query, utilsService: UtilsService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/master/document_groups/document_grp.service.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        paginationService\n                                                  \n                                                        \n                                                                        PaginationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        query\n                                                  \n                                                        \n                                                                        Query\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        utilsService\n                                                  \n                                                        \n                                                                        UtilsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createDto: DocumentGroupDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/document_groups/document_grp.service.ts:44\n                        \n                    \n\n\n            \n                \n                        Creates a new document group.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createDto\n                                            \n                                                            DocumentGroupDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data required to create a new document group.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                The created document group object.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/document_groups/document_grp.service.ts:151\n                        \n                    \n\n\n            \n                \n                        Deletes a document group by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the document group to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                An object indicating the deletion result.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(paginationQuery: PaginationQueryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/document_groups/document_grp.service.ts:107\n                        \n                    \n\n\n            \n                \n                        Retrieves a list of document groups with pagination.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                paginationQuery\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe pagination and filtering parameters.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                A paginated list of document groups.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/document_groups/document_grp.service.ts:137\n                        \n                    \n\n\n            \n                \n                        Retrieves a single document group by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the document group to retrieve.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                The document group object.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateDto: UpdateDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/document_groups/document_grp.service.ts:74\n                        \n                    \n\n\n            \n                \n                        Updates an existing document group by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the document group to be updated.\n\n\n                                            \n                                        \n                                        \n                                                updateDto\n                                            \n                                                            UpdateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data to update the document group with.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                The updated document group object or null if not found.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        MODULE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/master/document_groups/document_grp.service.ts:27\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, HttpException, HttpStatus } from '@nestjs/common';\n\nimport { PaginationService } from '@app/common/helper/services/pagination.service';\nimport { UtilsService } from '@app/common/helper/services/util.service';\nimport { IPaginationFieldConfig } from '@app/utils/types/pagination-options';\nimport { PrismaService } from '@services/prisma.service';\nimport { PaginationResponseDto } from '@utils/dto/pagination-response.dto';\nimport { PaginationQueryDto } from '@utils/dto/pagination.dto';\n\nimport { DocumentGroupDto } from './dto/create.dto';\nimport { DocumentGroup } from './dto/document_grp.dto';\nimport { UpdateDto } from './dto/update.dto';\nimport { Query } from './query';\n\n/**\n * @fileoverview\n * This file defines the `DocumentGroupService` class, which provides methods to manage document group data.\n * It includes operations for creating, updating, retrieving, and deleting document groups.\n *\n * @module\n * @description\n * The `DocumentGroupService` class is responsible for handling business logic related to document groups.\n * It interacts with the database through the `PrismaService` and performs various operations using raw SQL queries.\n */\n@Injectable()\nexport class DocumentGroupService {\n    private readonly MODULE: string;\n\n    constructor(\n        private readonly paginationService: PaginationService,\n        private readonly prisma: PrismaService,\n        private readonly query: Query,\n        private readonly utilsService: UtilsService\n    ) {\n        this.MODULE = 'document-group';\n    }\n\n    /**\n     * Creates a new document group.\n     * @param {DocumentGroupDto} createDto - The data required to create a new document group.\n     * @returns {Promise} The created document group object.\n     * @throws {HttpException} If a document group with the same name already exists or if an error occurs.\n     */\n    async create(createDto: DocumentGroupDto): Promise {\n        // Check if a document group with the same name already exists\n        const find = await this.prisma.executeRawQuery(this.query.findByName(), createDto);\n\n        if (find) {\n            throw new HttpException({ message: 'NAME ALREADY EXISTS' }, HttpStatus.CONFLICT);\n        }\n\n        // Insert the new document group\n        const inserted = await this.prisma.executeRawQuery(this.query.insert(), createDto);\n\n        if (inserted && inserted.insertid) {\n            // Retrieve and return the newly created document group\n            const get = await this.findOne(inserted.insertid);\n            return get as any;\n        } else {\n            throw new HttpException(\n                { message: 'Something went wrong' },\n                HttpStatus.INTERNAL_SERVER_ERROR\n            );\n        }\n    }\n\n    /**\n     * Updates an existing document group by its ID.\n     * @param {string} id - The ID of the document group to be updated.\n     * @param {UpdateDto} updateDto - The data to update the document group with.\n     * @returns {Promise} The updated document group object or null if not found.\n     * @throws {HttpException} If the document group is not found or if an error occurs.\n     */\n    async update(id: string, updateDto: UpdateDto): Promise {\n        if (Object.keys(updateDto).length === 0) {\n            throw new HttpException({ message: 'Nothing to update!' }, HttpStatus.BAD_REQUEST);\n        }\n\n        // Check if the document group exists\n        const recordExits = await this.findOne(id);\n        if (recordExits) {\n            updateDto.id_document_group = id;\n            updateDto.updated_at = new Date().toISOString();\n            // Update the document group\n            const updated = await this.prisma.executeRawQuery(this.query.update(), updateDto);\n\n            if (updated && updated[0].updatedid) {\n                // Retrieve and return the updated document group\n                const get = await this.findOne(updated[0].updatedid);\n                return get as any;\n            } else {\n                throw new HttpException(\n                    { message: 'Something went wrong' },\n                    HttpStatus.INTERNAL_SERVER_ERROR\n                );\n            }\n        } else {\n            throw new HttpException({ message: 'Document group not found' }, HttpStatus.NOT_FOUND);\n        }\n    }\n\n    /**\n     * Retrieves a list of document groups with pagination.\n     * @param {PaginationQueryDto} paginationQuery - The pagination and filtering parameters.\n     * @returns {Promise>} A paginated list of document groups.\n     */\n    async findAll(\n        paginationQuery: PaginationQueryDto\n    ): Promise> {\n        const baseQuery = ['ptbl.id_document_group', 'ptbl.name', 'ptbl.status'];\n        const fromQuery = ` FROM document_groups as ptbl`;\n\n        const fieldConfigs: Record = null;\n\n        // Build the dynamic query for pagination\n        const { selectQuery, countQuery } = this.utilsService.buildDynamicQuery(\n            paginationQuery,\n            fieldConfigs,\n            baseQuery,\n            fromQuery,\n            'ptbl.id_document_group'\n        );\n\n        return this.paginationService.paginate(\n            selectQuery,\n            countQuery,\n            paginationQuery\n        );\n    }\n\n    /**\n     * Retrieves a single document group by its ID.\n     * @param {string} id - The ID of the document group to retrieve.\n     * @returns {Promise} The document group object.\n     * @throws {HttpException} If the document group is not found.\n     */\n    async findOne(id: string): Promise {\n        const result = await this.prisma.executeRawQuery(this.query.findById(), { id });\n        if (!result) {\n            throw new HttpException({ message: 'Document group not found' }, HttpStatus.NOT_FOUND);\n        }\n        return result as any;\n    }\n\n    /**\n     * Deletes a document group by its ID.\n     * @param {string} id - The ID of the document group to delete.\n     * @returns {Promise} An object indicating the deletion result.\n     * @throws {HttpException} If an error occurs during deletion.\n     */\n    async delete(id: string): Promise {\n        const deleted = await this.prisma.executeRawQuery(this.query.delete(), id);\n\n        if (deleted && deleted[0].deletedid) {\n            return deleted;\n        } else {\n            throw new HttpException(\n                { message: 'Something went wrong' },\n                HttpStatus.INTERNAL_SERVER_ERROR\n            );\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DocumentModule.html":{"url":"modules/DocumentModule.html","title":"module - DocumentModule","body":"\n                   \n\n\n\n\n    Modules\n    DocumentModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_DocumentModule\n\n\n\ncluster_DocumentModule_providers\n\n\n\ncluster_DocumentModule_exports\n\n\n\n\nDocumentService \n\nDocumentService \n\n\n\nDocumentModule\n\nDocumentModule\n\nDocumentService  -->\n\nDocumentModule->DocumentService \n\n\n\n\n\nDocumentService\n\nDocumentService\n\nDocumentModule -->\n\nDocumentService->DocumentModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/master/documents/documents.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            This file defines the DocumentModule, which bundles the DocumentController and DocumentService together.\nThe DocumentModule is responsible for handling document-related operations. It provides the necessary controllers and services to manage documents.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DocumentService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            DocumentController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            DocumentService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { DocumentController } from './documents.controller';\nimport { DocumentService } from './documents.service';\nimport { Query } from './query';\n\n/**\n * @fileoverview\n * This file defines the `DocumentModule`, which bundles the `DocumentController` and `DocumentService` together.\n *\n * @module\n * @description\n * The `DocumentModule` is responsible for handling document-related operations. It provides the necessary controllers and services to manage documents.\n */\n@Module({\n    controllers: [DocumentController],\n    providers: [DocumentService, Query],\n    exports: [DocumentService],\n})\nexport class DocumentModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DocumentService.html":{"url":"injectables/DocumentService.html","title":"injectable - DocumentService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DocumentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/documents/documents.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the DocumentService class, which provides methods to manage Document data.\nIt includes operations for creating, updating, retrieving, and deleting Document records.\nThe DocumentService class is responsible for handling business logic related to Document entities.\nIt interacts with the database through the PrismaService and performs various operations using raw SQL queries.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                MODULE\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(paginationService: PaginationService, prisma: PrismaService, query: Query, utilsService: UtilsService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/master/documents/documents.service.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        paginationService\n                                                  \n                                                        \n                                                                        PaginationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        query\n                                                  \n                                                        \n                                                                        Query\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        utilsService\n                                                  \n                                                        \n                                                                        UtilsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createDto: DocumentDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/documents/documents.service.ts:44\n                        \n                    \n\n\n            \n                \n                        Creates a new document.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createDto\n                                            \n                                                            DocumentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data required to create a new document.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The created document object.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/documents/documents.service.ts:151\n                        \n                    \n\n\n            \n                \n                        Deletes a document by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the document to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                An object indicating the deletion result.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(paginationQuery: PaginationQueryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/documents/documents.service.ts:102\n                        \n                    \n\n\n            \n                \n                        Retrieves a list of documents with pagination.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                paginationQuery\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe pagination and filtering parameters.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                A paginated list of documents.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/documents/documents.service.ts:137\n                        \n                    \n\n\n            \n                \n                        Retrieves a single document by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the document to retrieve.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The document object.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateDto: UpdateDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/documents/documents.service.ts:71\n                        \n                    \n\n\n            \n                \n                        Updates an existing document by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the document to be updated.\n\n\n                                            \n                                        \n                                        \n                                                updateDto\n                                            \n                                                            UpdateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data to update the document with.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The updated document object or null if not found.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        MODULE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/master/documents/documents.service.ts:27\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, HttpException, HttpStatus } from '@nestjs/common';\n\nimport { IPaginationFieldConfig } from '@app/utils/types/pagination-options';\nimport { PaginationService } from '@services/pagination.service';\nimport { PrismaService } from '@services/prisma.service';\nimport { UtilsService } from '@services/util.service';\nimport { PaginationResponseDto } from '@utils/dto/pagination-response.dto';\nimport { PaginationQueryDto } from '@utils/dto/pagination.dto';\n\nimport { DocumentDto } from './dto/create.dto';\nimport { Document } from './dto/documents.dto';\nimport { UpdateDto } from './dto/update.dto';\nimport { Query } from './query';\n\n/**\n * @fileoverview\n * This file defines the `DocumentService` class, which provides methods to manage Document data.\n * It includes operations for creating, updating, retrieving, and deleting Document records.\n *\n * @module\n * @description\n * The `DocumentService` class is responsible for handling business logic related to Document entities.\n * It interacts with the database through the `PrismaService` and performs various operations using raw SQL queries.\n */\n@Injectable()\nexport class DocumentService {\n    private readonly MODULE: string;\n\n    constructor(\n        private readonly paginationService: PaginationService,\n        private readonly prisma: PrismaService,\n        private readonly query: Query,\n        private readonly utilsService: UtilsService\n    ) {\n        this.MODULE = 'document';\n    }\n\n    /**\n     * Creates a new document.\n     * @param {DocumentDto} createDto - The data required to create a new document.\n     * @returns {Promise} The created document object.\n     * @throws {HttpException} If a document with the same name already exists or if an error occurs.\n     */\n    async create(createDto: DocumentDto): Promise {\n        const find = await this.prisma.executeRawQuery(this.query.findByName(), createDto);\n\n        if (find) {\n            throw new HttpException({ message: 'NAME ALREADY EXISTS' }, HttpStatus.CONFLICT);\n        }\n\n        const inserted = await this.prisma.executeRawQuery(this.query.insert(), createDto);\n\n        if (inserted && inserted.insertid) {\n            const get = await this.findOne(inserted.insertid);\n            return get as any;\n        } else {\n            throw new HttpException(\n                { message: 'Something went wrong' },\n                HttpStatus.INTERNAL_SERVER_ERROR\n            );\n        }\n    }\n\n    /**\n     * Updates an existing document by its ID.\n     * @param {string} id - The ID of the document to be updated.\n     * @param {UpdateDto} updateDto - The data to update the document with.\n     * @returns {Promise} The updated document object or null if not found.\n     * @throws {HttpException} If the document is not found or if an error occurs.\n     */\n    async update(id: string, updateDto: UpdateDto): Promise {\n        if (Object.keys(updateDto).length === 0) {\n            throw new HttpException({ message: 'Nothing to update!' }, HttpStatus.BAD_REQUEST);\n        }\n        // Check if document exists\n        const recordExists = await this.findOne(id);\n        if (recordExists) {\n            updateDto.id_document = id;\n            updateDto.updated_at = new Date().toISOString();\n            // Update document\n            const updated = await this.prisma.executeRawQuery(this.query.update(), updateDto);\n\n            if (updated && updated[0].updatedid) {\n                const get = await this.findOne(updated[0].updatedid);\n                return get;\n            } else {\n                throw new HttpException(\n                    { message: 'Something went wrong' },\n                    HttpStatus.INTERNAL_SERVER_ERROR\n                );\n            }\n        } else {\n            throw new HttpException({ message: 'Document not found' }, HttpStatus.NOT_FOUND);\n        }\n    }\n\n    /**\n     * Retrieves a list of documents with pagination.\n     * @param {PaginationQueryDto} paginationQuery - The pagination and filtering parameters.\n     * @returns {Promise>} A paginated list of documents.\n     */\n    async findAll(paginationQuery: PaginationQueryDto): Promise> {\n        const baseQuery = [\n            'ptbl.id_document',\n            'ptbl.id_document_group',\n            'ptbl.name',\n            'ptbl.status',\n        ];\n        const fromQuery = ` FROM documents as ptbl`;\n\n        const fieldConfigs: Record = {\n            id_document_group: {\n                joinTable: (alias: string) =>\n                    `JOIN document_groups ${alias} ON ${alias}.id_document_group = ptbl.id_document_group`,\n                alias: () => `c${0}`,\n                selectFields: (alias: string) => [`${alias}.name as documentgroup_name`],\n            },\n        };\n\n        const { selectQuery, countQuery } = this.utilsService.buildDynamicQuery(\n            paginationQuery,\n            fieldConfigs,\n            baseQuery,\n            fromQuery,\n            'ptbl.id_document'\n        );\n\n        return this.paginationService.paginate(selectQuery, countQuery, paginationQuery);\n    }\n\n    /**\n     * Retrieves a single document by its ID.\n     * @param {string} id - The ID of the document to retrieve.\n     * @returns {Promise} The document object.\n     * @throws {HttpException} If the document is not found.\n     */\n    async findOne(id: string): Promise {\n        const result = await this.prisma.executeRawQuery(this.query.findById(), { id });\n        if (!result) {\n            throw new HttpException({ message: 'Document not found' }, HttpStatus.NOT_FOUND);\n        }\n        return result as any;\n    }\n\n    /**\n     * Deletes a document by its ID.\n     * @param {string} id - The ID of the document to delete.\n     * @returns {Promise} An object indicating the deletion result.\n     * @throws {HttpException} If an error occurs during deletion.\n     */\n    async delete(id: string): Promise {\n        const deleted = await this.prisma.executeRawQuery(this.query.delete(), id);\n\n        if (deleted && deleted[0].deletedid) {\n            return deleted;\n        } else {\n            throw new HttpException(\n                { message: 'Something went wrong' },\n                HttpStatus.INTERNAL_SERVER_ERROR\n            );\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DynamicQueryBuilder.html":{"url":"classes/DynamicQueryBuilder.html","title":"class - DynamicQueryBuilder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DynamicQueryBuilder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/providers/dynamic-query.service-to-be-remove.ts\n        \n\n\n            \n                Description\n            \n            \n                Class to build dynamic SQL queries.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                buildDeleteQuery\n                            \n                            \n                                buildInsertQuery\n                            \n                            \n                                buildSelectQuery\n                            \n                            \n                                buildUpdateQuery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        buildDeleteQuery\n                        \n                    \n                \n            \n            \n                \nbuildDeleteQuery(options: QueryOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/providers/dynamic-query.service-to-be-remove.ts:235\n                        \n                    \n\n\n            \n                \n                        Builds a DELETE SQL query.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                            QueryOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nOptions for the DELETE query.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         object\n\n                        \n                            \n                                \nAn object containing the query name, type, and the SQL syntax.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildInsertQuery\n                        \n                    \n                \n            \n            \n                \nbuildInsertQuery(options: QueryOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/providers/dynamic-query.service-to-be-remove.ts:116\n                        \n                    \n\n\n            \n                \n                        Builds an INSERT SQL query.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                            QueryOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nOptions for the INSERT query.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         object\n\n                        \n                            \n                                \nAn object containing the query name, type, and the SQL syntax.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildSelectQuery\n                        \n                    \n                \n            \n            \n                \nbuildSelectQuery(options: QueryOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/providers/dynamic-query.service-to-be-remove.ts:145\n                        \n                    \n\n\n            \n                \n                        Builds a SELECT SQL query.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                            QueryOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nOptions for the SELECT query.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         object\n\n                        \n                            \n                                \nAn object containing the query name, type, and the SQL syntax.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildUpdateQuery\n                        \n                    \n                \n            \n            \n                \nbuildUpdateQuery(options: QueryOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/providers/dynamic-query.service-to-be-remove.ts:195\n                        \n                    \n\n\n            \n                \n                        Builds an UPDATE SQL query.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                            QueryOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nOptions for the UPDATE query.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         object\n\n                        \n                            \n                                \nAn object containing the query name, type, SQL syntax, and values to be used.\n\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as _ from 'lodash';\n\n/**\n * Options for building queries.\n *\n * @export\n * @interface QueryOptions\n */\n\nexport interface QueryOptions {\n    /**\n     * Name of the query.\n     *\n     * @type {string}\n     * @memberof QueryOptions\n     */\n\n    queryName?: string;\n\n    /**\n     * Type of the query (e.g., INSERT, SELECT, UPDATE, DELETE).\n     *\n     * @type {string}\n     * @memberof QueryOptions\n     */\n\n    queryType?: string;\n\n    /**\n     * Name of the table to perform the query on.\n     *\n     * @type {string}\n     * @memberof QueryOptions\n     */\n\n    table: string;\n\n    /**\n     * List of fields to include in the query (e.g., columns for SELECT, INSERT, or UPDATE).\n     *\n     * @type {string[]}\n     * @memberof QueryOptions\n     */\n\n    fields?: string[];\n\n    /**\n     * Values to be used in the query (e.g., for INSERT or UPDATE operations).\n     *\n     * @type {Record}\n     * @memberof QueryOptions\n     */\n\n    values?: Record;\n\n    /**\n     * Conditions for the query (e.g., WHERE clauses).\n     *\n     * @type {Record}\n     * @memberof QueryOptions\n     */\n\n    conditions?: Record;\n\n    /**\n     * Optional conditions for the query.\n     *\n     * @type {Record}\n     * @memberof QueryOptions\n     */\n\n    optionalConditions?: Record;\n\n    /**\n     * Join clauses to include in the query.\n     *\n     * @type {string[]}\n     * @memberof QueryOptions\n     */\n\n    joins?: string[];\n\n    /**\n     * Fields to return from the query.\n     *\n     * @type {string[]}\n     * @memberof QueryOptions\n     */\n\n    returningFields?: string[];\n\n    /**\n     * Type of delete operation ('soft' or 'hard').\n     *\n     * @type {string}\n     * @memberof QueryOptions\n     */\n    deleteType?: string;\n}\n\n/**\n * Class to build dynamic SQL queries.\n *\n * @export\n * @class DynamicQueryBuilder\n */\nexport class DynamicQueryBuilder {\n    /**\n     * Builds an INSERT SQL query.\n     *\n     * @param {QueryOptions} options - Options for the INSERT query.\n     * @returns {object} - An object containing the query name, type, and the SQL syntax.\n     * @memberof DynamicQueryBuilder\n     */\n\n    buildInsertQuery(options: QueryOptions): object {\n        const { queryName, queryType, fields, table, values = {}, returningFields = [] } = options;\n        const conds = _.pick(values, fields);\n        const keys = _.keys(conds);\n        const vals = _.values(conds);\n\n        const returningClause = returningFields.length\n            ? `RETURNING ${returningFields.join(', ')}`\n            : '';\n\n        const sql = `INSERT INTO ${table} (${keys.join()}) VALUES ('${vals.join(\"','\")}') ${returningClause};`;\n\n        return {\n            name: queryName ? queryName : 'add',\n            type: queryType ? queryType : 'INSERT',\n            syntax: () => {\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Builds a SELECT SQL query.\n     *\n     * @param {QueryOptions} options - Options for the SELECT query.\n     * @returns {object} - An object containing the query name, type, and the SQL syntax.\n     * @memberof DynamicQueryBuilder\n     */\n\n    buildSelectQuery(options: QueryOptions): object {\n        const {\n            queryName,\n            queryType,\n            table,\n            fields = ['*'],\n            conditions = {},\n            joins = [],\n            optionalConditions = null,\n        } = options;\n\n        const whereClauses = Object.keys(conditions).map((key) => {\n            const value = conditions[key];\n            return typeof value === 'string' ? `${key} = '${value}'` : `${key} = ${value}`;\n        });\n\n        if (optionalConditions) {\n            // Adding optional conditions dynamically\n            Object.keys(optionalConditions).forEach((key) => {\n                const value = optionalConditions[key];\n                if (value) {\n                    whereClauses.push(\n                        typeof value === 'string' ? `${key} != '${value}'` : `${key} != ${value}`\n                    );\n                }\n            });\n        }\n\n        const whereClause = whereClauses.length ? `WHERE ${whereClauses.join(' AND ')}` : '';\n        const joinClause = joins.length ? joins.join(' ') : '';\n\n        const sql = `SELECT ${fields.join(', ')} FROM ${table} ${joinClause} ${whereClause}`;\n\n        return {\n            name: queryName ? queryName : 'find',\n            type: queryType ? queryType : 'SELECT_ONE',\n            syntax: () => {\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Builds an UPDATE SQL query.\n     *\n     * @param {QueryOptions} options - Options for the UPDATE query.\n     * @returns {object} - An object containing the query name, type, SQL syntax, and values to be used.\n     * @memberof DynamicQueryBuilder\n     */\n\n    buildUpdateQuery(options: QueryOptions): object {\n        const { table, values = {}, conditions = {}, returningFields = [] } = options;\n\n        const setClauses = Object.keys(values).map((key, index) => `${key} = $${index + 1}`);\n        const whereClauses = Object.keys(conditions).map(\n            (key, index) => `${key} = $${index + Object.keys(values).length + 1}`\n        );\n\n        const returningClause = returningFields.length\n            ? `RETURNING ${returningFields.join(', ')}`\n            : '';\n\n        const sql = `UPDATE ${table} SET ${setClauses.join(', ')} WHERE ${whereClauses.join(' AND ')} ${returningClause};`;\n\n        return {\n            name: 'update',\n            type: 'UPDATE',\n            sql,\n            values: [...Object.values(values), ...Object.values(conditions)],\n        };\n    }\n\n    //     return {\n    //   name: `delete`,\n    //   type: `UPDATE`,\n    //   syntax: (idArea: number) => {\n    //     const sql = `UPDATE Area SET Status = 127 WHERE Status = 1 AND idArea = ${idArea}`;\n\n    //     return sql;\n    //   },\n    // };\n\n    /**\n     * Builds a DELETE SQL query.\n     *\n     * @param {QueryOptions} options - Options for the DELETE query.\n     * @returns {object} - An object containing the query name, type, and the SQL syntax.\n     * @memberof DynamicQueryBuilder\n     */\n\n    buildDeleteQuery(options: QueryOptions): object {\n        const {\n            queryName,\n            queryType,\n            table,\n            conditions = {},\n            optionalConditions = null,\n            joins = [],\n            returningFields = [],\n            deleteType = 'soft',\n        } = options;\n\n        const whereClauses = Object.keys(conditions).map((key) => {\n            const value = conditions[key];\n            return typeof value === 'string' ? `${key} = '${value}'` : `${key} = ${value}`;\n        });\n\n        if (optionalConditions) {\n            // Adding optional conditions dynamically\n            Object.keys(optionalConditions).forEach((key) => {\n                const value = optionalConditions[key];\n                if (value) {\n                    whereClauses.push(\n                        typeof value === 'string' ? `${key} != '${value}'` : `${key} != ${value}`\n                    );\n                }\n            });\n        }\n\n        const whereClause = whereClauses.length ? `WHERE ${whereClauses.join(' AND ')}` : '';\n        const joinClause = joins.length ? joins.join(' ') : '';\n\n        // const whereClauses = Object.keys(conditions).map((key, index) => `${key} = $${index + 1}`);\n        // const whereClause = whereClauses.length ? `WHERE ${whereClauses.join(' AND ')}` : '';\n\n        const returningClause = returningFields.length\n            ? `RETURNING ${returningFields.join(', ')}`\n            : '';\n\n        let sql: string;\n        if (deleteType === 'soft') {\n            sql = `UPDATE ${table} SET status = 127 ${whereClause} ${returningClause};`;\n        } else {\n            sql = `DELETE FROM ${table} ${joinClause} ${whereClause} ${returningClause};`;\n        }\n\n        console.log('QQQQQQQQQQQQQQQQQQQQ', sql);\n\n        return {\n            name: queryName ? queryName : 'delete',\n            type: queryType ? queryType : 'DELETE',\n            syntax: () => {\n                return sql;\n            },\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EnvVarAppConfigValidator.html":{"url":"classes/EnvVarAppConfigValidator.html","title":"class - EnvVarAppConfigValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EnvVarAppConfigValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/helper/services/config.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Config service\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                API_PREFIX\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                APP_PORT\n                            \n                            \n                                    \n                                    \n                                BACKEND_DOMAIN\n                            \n                            \n                                    \n                                    \n                                FRONTEND_DOMAIN\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        API_PREFIX\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/helper/services/config.service.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        APP_PORT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@Min(0)@Max(65535)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/helper/services/config.service.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        BACKEND_DOMAIN\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUrl({require_tld: false})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/helper/services/config.service.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        FRONTEND_DOMAIN\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUrl({require_tld: false})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/helper/services/config.service.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsInt, IsOptional, IsString, ValidateIf, IsUrl, Max, Min } from 'class-validator';\nimport * as dotenv from 'dotenv';\n\n// import { FileDriver } from '../../../core/enum/file.type';\nimport { IAppConfig } from '../../../core/interfaces/app.interfaces';\nimport { IAwsConfig } from '../../../core/interfaces/aws.interfaces';\nimport { IFileConfig } from '../../../core/interfaces/file.interfaces';\nimport { IJWTConfig } from '../../../core/interfaces/jwt.interfaces';\nimport { INodeEmailerConfig } from '../../../core/interfaces/node-emailer.interfaces';\n// import { IPostgreSQLConfig } from '../../../core/interfaces/postgres.interfaces';\nimport { ISendGridConfig } from '../../../core/interfaces/sendgrid.interfaces';\nimport { ISMSConfig } from '../../../core/interfaces/sms.interfaces';\nimport { IUploadFileConfig } from '../../../core/interfaces/upload-file.interfaces';\nimport validateConfig from '../../../utils/validate-config';\n\n/**\n * Config service\n * @export\n * @class ConfigService\n */\n\nclass EnvVarAppConfigValidator {\n    @IsInt()\n    @Min(0)\n    @Max(65535)\n    @IsOptional()\n    APP_PORT: number;\n\n    @IsUrl({ require_tld: false })\n    @IsOptional()\n    FRONTEND_DOMAIN: string;\n\n    @IsUrl({ require_tld: false })\n    @IsOptional()\n    BACKEND_DOMAIN: string;\n\n    @IsString()\n    @IsOptional()\n    API_PREFIX: string;\n}\n\n// class EnvVarFileConfigValidator {\n//     // @IsEnum(FileDriver)\n//     // FILE_DRIVER: FileDriver;\n\n//     // @ValidateIf((envValues) =>\n//     //     [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n//     // )\n//     // @IsString()\n//     // AWS_ACCESS_KEY_ID: string;\n\n//     // @ValidateIf((envValues) =>\n//     //     [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n//     // )\n//     // @IsString()\n//     // AWS_SECRET_ACCESS_KEY: string;\n\n//     // @ValidateIf((envValues) =>\n//     //     [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n//     // )\n//     // @IsString()\n//     // AWS_DEFAULT_S3_BUCKET: string;\n\n//     // @ValidateIf((envValues) =>\n//     //     [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n//     // )\n//     @IsString()\n//     AWS_S3_REGION: string;\n// }\n\nexport class ConfigService {\n    constructor() {\n        const nodeEnv = this.nodeEnv;\n        // dotenv.config({\n        //   path: nodeEnv === \"production\" ? \".env\" : `.env.${nodeEnv}`,\n        // });\n        dotenv.config({\n            path:\n                nodeEnv === 'production'\n                    ? '.env.staging'\n                    : nodeEnv === 'staging'\n                      ? '.env.staging'\n                      : '.env.development',\n        });\n\n        // // Replace \\\\n with \\n to support multiline strings in AWS\n        // for (const envName of Object.keys(process.env)) {\n        //   process.env[envName] = process.env[envName].replace(/\\\\n/g, \"\\n\");\n        // }\n    }\n\n    public get(key: string): string {\n        return process.env[key] || 'undefined';\n    }\n\n    public getNumber(key: string): number {\n        return Number(this.get(key));\n    }\n\n    public getBoolean(key: string): boolean {\n        return Boolean(this.get(key));\n    }\n\n    get nodeEnv(): string {\n        return this.get('NODE_ENV') || 'development';\n    }\n\n    // get typeOrmConfig(): TypeOrmModuleOptions {\n    //   const dbConfig = {\n    //     // eslint-disable-next-line @typescript-eslint/prefer-as-const\n    //     type: \"mysql\" as \"mysql\",\n    //     host: this.get(\"DATABASE_HOST\"),\n    //     port: this.getNumber(\"DATABASE_PORT\"),\n    //     username: this.get(\"DATABASE_USER\"),\n    //     password: this.get(\"DATABASE_PASS\"),\n    //     database: this.get(\"DATABASE_SCHEMA\"),\n    //     authSource: \"admin\",\n    //     synchronize: true,\n    //     multipleStatements: true,\n    //     entities: [\"src/**/**.entity{.ts,.js}\"],\n    //     bigNumberStrings: false,\n    //   };\n    //   return dbConfig;\n    // }\n\n    // get appConfig(): IAppConfig {\n    //     validateConfig(process.env, EnvVarAppConfigValidator);\n    //     return {\n    //         name: this.get('APP_NAME') || '',\n    //         workingDirectory: process.env.PWD || process.cwd(),\n    //         frontendDomain: this.get('FRONTEND_DOMAIN') || '',\n    //         backendDomain: this.get('BACKEND_DOMAIN') || '',\n    //         port: this.getNumber('PORT'),\n    //         apiPrefix: this.get('API_PREFIX') || '',\n    //     };\n    // }\n\n    get prismaConfig(): string {\n        return `postgresql://${this.get('POSTGRES_USER')}:${this.get('POSTGRES_PASSWORD')}@${this.get('POSTGRES_HOST')}:${this.get('POSTGRES_PORT')}/${this.get('POSTGRES_NAME')}?connection_limit=${this.get('POSTGRES_CONNECTION_LIMIT')}&pool_timeout=${this.get('POSTGRES_POOL_TIMEOUT')}&schema=${this.get('POSTGRES_SCHEMA')}`;\n    }\n\n    // get awsS3Config(): IAwsConfig {\n    //     return {\n    //         AWS_S3_ACCESS_KEY_ID: this.get('AWS_S3_ACCESS_KEY_ID'),\n    //         AWS_S3_SECRET_ACCESS_KEY: this.get('AWS_S3_SECRET_ACCESS_KEY'),\n    //         AWS_S3_BUCKET_NAME: this.get('AWS_S3_BUCKET_NAME'),\n    //         AWS_S3_DEFAULT_REGION: this.get('AWS_S3_DEFAULT_REGION'),\n    //         AWS_S3_TEMP_DIRECTORY: this.get('AWS_S3_TEMP_DIRECTORY'),\n    //         AWS_S3_ENDPOINT: this.get('AWS_S3_ENDPOINT'),\n    //         AWS_S3_SERVER_HOST: this.get('AWS_S3_SERVER_HOST'),\n    //         AWS_S3_COMPANION_SECRET: this.get('AWS_S3_COMPANION_SECRET'),\n    //         TUS_STORAGE_DRIVER: this.get('TUS_STORAGE_DRIVER'),\n    //     };\n    // }\n\n    // get qrConfig() {\n    //     return {\n    //         QR_IMAGE: this.get('QR_IMAGE') || '',\n    //         QR_IMAGE_PATH: this.get('QR_IMAGE_PATH') || '',\n    //         QR_IMAGE_PATH_SALT: this.get('QR_IMAGE_PATH_SALT') || '',\n    //     };\n    // }\n\n    // get jwtConfig(): IJWTConfig {\n    //     return {\n    //         secret: this.get('JWT_SECRET_KEY'),\n    //         algorithm: this.get('JWT_ALGORITHM'),\n    //         issuer: this.get('JWT_ISSUER'),\n    //         audience: this.get('JWT_AUDIENCE'),\n    //         expiresInSeconds: this.getNumber('JWT_EXPIRES_IN_SECONDS'),\n    //         expirationTime: this.getNumber('JWT_EXPIRATION_TIME'),\n    //     };\n    // }\n\n    // get sendgridConfig(): ISendGridConfig {\n    //     return {\n    //         SENDGRID_API_KEY: this.get('SENDGRID_API_KEY'),\n    //         FROM_EMAIL: this.get('FROM_EMAIL'),\n    //         TO_EMAIL: this.get('TO_EMAIL'),\n    //         WELCOME_EMAIL: this.get('WELCOME_EMAIL'),\n    //     };\n    // }\n\n    // get nodeemailerConfig(): INodeEmailerConfig {\n    //     return {\n    //         NODE_EMAILER_HOST: this.get('NODE_EMAILER_HOST'),\n    //         NODE_EMAILER_PORT: this.getNumber('NODE_EMAILER_PORT'),\n    //         NODE_EMAILER_USER: this.get('NODE_EMAILER_USER'),\n    //         NODE_EMAILER_PASSWORD: this.get('NODE_EMAILER_PASSWORD'),\n    //         NODE_EMAILER_FROM_EMAIL: this.get('NODE_EMAILER_FROM_EMAIL'),\n    //         NODE_EMAILER_TO_EMAIL: this.get('NODE_EMAILER_TO_EMAIL'),\n    //     };\n    // }\n\n    // get smsConfig(): ISMSConfig {\n    //     return {\n    //         SMS_PROVIDER_NAME: this.get('SMS_PROVIDER_NAME'),\n    //         API_KEY: this.get('API_KEY'),\n    //         SENDER_ID: this.get('SENDER_ID'),\n    //     };\n    // }\n\n    // get uploadFileConfig(): IUploadFileConfig {\n    //     return {\n    //         TEMP_FILE_UPLOAD_URL: this.get('TEMP_FILE_UPLOAD_URL'),\n    //         FILE_UPLOAD_DESTINATION: this.get('FILE_UPLOAD_DESTINATION'),\n    //         MAX_UPLOAD_FILE_SIZE: this.getNumber('MAX_UPLOAD_FILE_SIZE'),\n    //         PROFILE_PIC_FILE_PATH: this.get('PROFILE_PIC_FILE_PATH'),\n    //         MULTIPLE_FILE_PATH: this.get('MULTIPLE_FILE_PATH'),\n    //     };\n    // }\n\n    // get fileConfig(): IFileConfig {\n    //     // validateConfig(process.env, EnvVarFileConfigValidator);\n    //     return {\n    //         driver: (this.get('FILE_DRIVER') as any | undefined) ?? undefined,\n    //         accessKeyId: this.get('AWS_ACCESS_KEY_ID'),\n    //         secretAccessKey: this.get('AWS_SECRET_ACCESS_KEY'),\n    //         awsDefaultS3Bucket: this.get('AWS_DEFAULT_S3_BUCKET'),\n    //         awsS3Region: this.get('AWS_S3_REGION'),\n    //         maxFileSize: 5242880, // 5mb\n    //     };\n    // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EnvironmentVariablesValidator.html":{"url":"classes/EnvironmentVariablesValidator.html","title":"class - EnvironmentVariablesValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EnvironmentVariablesValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/app.config.ts\n        \n\n\n            \n                Description\n            \n            \n                Class to validate environment variables using class-validator decorators.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                API_PREFIX\n                            \n                            \n                                    \n                                    \n                                APP_DESCRIPTION\n                            \n                            \n                                    \n                                    \n                                APP_NAME\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                APP_PORT\n                            \n                            \n                                    \n                                    \n                                APP_PREFIX\n                            \n                            \n                                    \n                                    \n                                APP_VERSION\n                            \n                            \n                                    \n                                    \n                                BACKEND_DOMAIN\n                            \n                            \n                                    \n                                    \n                                FRONTEND_DOMAIN\n                            \n                            \n                                    \n                                    \n                                NODE_ENV\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        API_PREFIX\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/app.config.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        APP_DESCRIPTION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/app.config.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        APP_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/app.config.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        APP_PORT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@Min(0)@Max(65535)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/app.config.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        APP_PREFIX\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/app.config.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        APP_VERSION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/app.config.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        BACKEND_DOMAIN\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUrl({require_tld: false})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/app.config.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        FRONTEND_DOMAIN\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUrl({require_tld: false})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/app.config.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        NODE_ENV\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Environment\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(Environment)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/app.config.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { registerAs } from '@nestjs/config';\n\nimport { IsEnum, IsInt, IsOptional, IsString, IsUrl, Max, Min } from 'class-validator';\n\nimport { AppConfig } from '@config/type/app-config.type';\nimport validateConfig from '@utils/validate-config';\n\nenum Environment {\n    Development = 'development',\n    Production = 'production',\n    Staging = 'staging',\n    Test = 'testing',\n}\n\n/**\n * Class to validate environment variables using class-validator decorators.\n *\n * @export\n * @class EnvironmentVariablesValidator\n */\n\nclass EnvironmentVariablesValidator {\n    @IsEnum(Environment)\n    @IsOptional()\n    NODE_ENV: Environment;\n\n    @IsString()\n    @IsOptional()\n    APP_NAME: string;\n\n    @IsString()\n    @IsOptional()\n    APP_DESCRIPTION: string;\n\n    @IsString()\n    @IsOptional()\n    APP_VERSION: string;\n\n    @IsString()\n    @IsOptional()\n    APP_PREFIX: string;\n\n    @IsInt()\n    @Min(0)\n    @Max(65535)\n    @IsOptional()\n    APP_PORT: number;\n\n    @IsUrl({ require_tld: false })\n    @IsOptional()\n    FRONTEND_DOMAIN: string;\n\n    @IsUrl({ require_tld: false })\n    @IsOptional()\n    BACKEND_DOMAIN: string;\n\n    @IsString()\n    @IsOptional()\n    API_PREFIX: string;\n}\n\n/**\n * Configuration registration and validation.\n *\n * Registers the configuration with NestJS and validates the environment variables\n * using `EnvironmentVariablesValidator`. Returns an `AppConfig` object with default values\n * for the application configuration.\n *\n * @export\n * @function\n * @returns {AppConfig} The application configuration.\n */\n\nexport default registerAs('app', (): AppConfig => {\n    validateConfig(process.env, EnvironmentVariablesValidator);\n\n    return {\n        nodeEnv: process.env.NODE_ENV || 'development',\n        name: process.env.APP_NAME || 'app',\n        description: process.env.APP_DESCRIPTION || 'description',\n        version: process.env.APP_VERSION || '1',\n        appPrefix: process.env.APP_PREFIX || 'docs',\n        workingDirectory: process.env.PWD || process.cwd(),\n        frontendDomain: process.env.FRONTEND_DOMAIN,\n        backendDomain: process.env.BACKEND_DOMAIN ?? 'http://localhost',\n        port: process.env.APP_PORT\n            ? parseInt(process.env.APP_PORT, 10)\n            : process.env.PORT\n              ? parseInt(process.env.PORT, 10)\n              : 3000,\n        apiPrefix: process.env.API_PREFIX || 'api',\n    };\n});\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EnvironmentVariablesValidator-1.html":{"url":"classes/EnvironmentVariablesValidator-1.html","title":"class - EnvironmentVariablesValidator-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EnvironmentVariablesValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/database.config.ts\n        \n\n\n            \n                Description\n            \n            \n                Class to validate environment variables using class-validator decorators.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                DATABASE_CA\n                            \n                            \n                                    \n                                    \n                                DATABASE_CERT\n                            \n                            \n                                    \n                                    \n                                DATABASE_KEY\n                            \n                            \n                                    \n                                    \n                                DATABASE_REJECT_UNAUTHORIZED\n                            \n                            \n                                    \n                                    \n                                DATABASE_SSL_ENABLED\n                            \n                            \n                                    \n                                    \n                                DATABASE_SYNCHRONIZE\n                            \n                            \n                                    \n                                    \n                                DATABASE_URL\n                            \n                            \n                                    \n                                    \n                                POSTGRES_HOST\n                            \n                            \n                                    \n                                    \n                                POSTGRES_MAX_CONNECTIONS\n                            \n                            \n                                    \n                                    \n                                POSTGRES_NAME\n                            \n                            \n                                    \n                                    \n                                POSTGRES_PASSWORD\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                POSTGRES_PORT\n                            \n                            \n                                    \n                                    \n                                POSTGRES_USER\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        DATABASE_CA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:139\n                        \n                    \n\n            \n                \n                    Path to the SSL CA certificate.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        DATABASE_CERT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:161\n                        \n                    \n\n            \n                \n                    Path to the SSL certificate file.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        DATABASE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:150\n                        \n                    \n\n            \n                \n                    Path to the SSL key file.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        DATABASE_REJECT_UNAUTHORIZED\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:128\n                        \n                    \n\n            \n                \n                    Whether to reject unauthorized SSL certificates.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        DATABASE_SSL_ENABLED\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:117\n                        \n                    \n\n            \n                \n                    Whether to enable SSL for the database connection.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        DATABASE_SYNCHRONIZE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:95\n                        \n                    \n\n            \n                \n                    Whether to synchronize the database schema on every application start.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        DATABASE_URL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateIf(envValues => envValues.DATABASE_URL)@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:26\n                        \n                    \n\n            \n                \n                    URL for the database connection. Overrides individual PostgreSQL settings if provided.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        POSTGRES_HOST\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateIf(envValues => )@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:37\n                        \n                    \n\n            \n                \n                    PostgreSQL host if DATABASE_URL is not provided.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        POSTGRES_MAX_CONNECTIONS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:106\n                        \n                    \n\n            \n                \n                    Maximum number of PostgreSQL connections.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        POSTGRES_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateIf(envValues => )@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:73\n                        \n                    \n\n            \n                \n                    PostgreSQL database name if DATABASE_URL is not provided.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        POSTGRES_PASSWORD\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateIf(envValues => )@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:62\n                        \n                    \n\n            \n                \n                    PostgreSQL password if DATABASE_URL is not provided.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        POSTGRES_PORT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateIf(envValues => )@IsInt()@Min(0)@Max(65535)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:51\n                        \n                    \n\n            \n                \n                    PostgreSQL port if DATABASE_URL is not provided.\nMust be between 0 and 65535.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        POSTGRES_USER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateIf(envValues => )@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:84\n                        \n                    \n\n            \n                \n                    PostgreSQL user if DATABASE_URL is not provided.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { registerAs } from '@nestjs/config';\n\nimport { IsOptional, IsInt, Min, Max, IsString, ValidateIf, IsBoolean } from 'class-validator';\n\nimport validateConfig from '@utils/validate-config';\n\nimport { DatabaseConfig } from './type/database-config.type';\n\n/**\n * Class to validate environment variables using class-validator decorators.\n *\n * @export\n * @class EnvironmentVariablesValidator\n */\n\nclass EnvironmentVariablesValidator {\n    /**\n     * URL for the database connection. Overrides individual PostgreSQL settings if provided.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @ValidateIf((envValues) => envValues.DATABASE_URL)\n    @IsString()\n    DATABASE_URL: string;\n\n    /**\n     * PostgreSQL host if `DATABASE_URL` is not provided.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @ValidateIf((envValues) => !envValues.DATABASE_URL)\n    @IsString()\n    POSTGRES_HOST: string;\n\n    /**\n     * PostgreSQL port if `DATABASE_URL` is not provided.\n     * Must be between 0 and 65535.\n     *\n     * @type {number}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @ValidateIf((envValues) => !envValues.DATABASE_URL)\n    @IsInt()\n    @Min(0)\n    @Max(65535)\n    POSTGRES_PORT: number;\n\n    /**\n     * PostgreSQL password if `DATABASE_URL` is not provided.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @ValidateIf((envValues) => !envValues.DATABASE_URL)\n    @IsString()\n    POSTGRES_PASSWORD: string;\n\n    /**\n     * PostgreSQL database name if `DATABASE_URL` is not provided.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @ValidateIf((envValues) => !envValues.DATABASE_URL)\n    @IsString()\n    POSTGRES_NAME: string;\n\n    /**\n     * PostgreSQL user if `DATABASE_URL` is not provided.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @ValidateIf((envValues) => !envValues.DATABASE_URL)\n    @IsString()\n    POSTGRES_USER: string;\n\n    /**\n     * Whether to synchronize the database schema on every application start.\n     *\n     * @type {boolean}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @IsBoolean()\n    @IsOptional()\n    DATABASE_SYNCHRONIZE: boolean;\n\n    /**\n     * Maximum number of PostgreSQL connections.\n     *\n     * @type {number}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @IsInt()\n    @IsOptional()\n    POSTGRES_MAX_CONNECTIONS: number;\n\n    /**\n     * Whether to enable SSL for the database connection.\n     *\n     * @type {boolean}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @IsBoolean()\n    @IsOptional()\n    DATABASE_SSL_ENABLED: boolean;\n\n    /**\n     * Whether to reject unauthorized SSL certificates.\n     *\n     * @type {boolean}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @IsBoolean()\n    @IsOptional()\n    DATABASE_REJECT_UNAUTHORIZED: boolean;\n\n    /**\n     * Path to the SSL CA certificate.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @IsString()\n    @IsOptional()\n    DATABASE_CA: string;\n\n    /**\n     * Path to the SSL key file.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @IsString()\n    @IsOptional()\n    DATABASE_KEY: string;\n\n    /**\n     * Path to the SSL certificate file.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @IsString()\n    @IsOptional()\n    DATABASE_CERT: string;\n}\n\n/**\n * Configuration registration and validation for database settings.\n *\n * Registers the database configuration with NestJS and validates the environment variables\n * using `EnvironmentVariablesValidator`. Returns a `DatabaseConfig` object with default values\n * and environment variable values for the database configuration.\n *\n * @export\n * @function\n * @returns {DatabaseConfig} The database configuration.\n */\n\nexport default registerAs('database', (): DatabaseConfig => {\n    validateConfig(process.env, EnvironmentVariablesValidator);\n\n    return {\n        url: `postgresql://${process.env.POSTGRES_USER}:${process.env.POSTGRES_PASSWORD}@${process.env.POSTGRES_HOST}:${process.env.POSTGRES_PORT}/${process.env.POSTGRES_NAME}?connection_limit=${process.env.POSTGRES_MAX_CONNECTIONS}&pool_timeout=${process.env.POSTGRES_POOL_TIMEOUT}&schema=${process.env.POSTGRES_SCHEMA}`,\n        host: process.env.POSTGRES_HOST,\n        port: process.env.POSTGRES_PORT ? parseInt(process.env.POSTGRES_PORT, 10) : 5432,\n        password: process.env.POSTGRES_PASSWORD,\n        name: process.env.POSTGRES_NAME,\n        username: process.env.POSTGRES_USER,\n        synchronize: process.env.DATABASE_SYNCHRONIZE === 'true',\n        maxConnections: process.env.POSTGRES_MAX_CONNECTIONS\n            ? parseInt(process.env.POSTGRES_MAX_CONNECTIONS, 10)\n            : 100,\n        poolTimeout: process.env.POSTGRES_POOL_TIMEOUT\n            ? parseInt(process.env.POSTGRES_POOL_TIMEOUT, 10)\n            : 100,\n        schema: process.env.POSTGRES_SCHEMA ? process.env.POSTGRES_SCHEMA : 'public',\n        sslEnabled: process.env.DATABASE_SSL_ENABLED === 'true',\n        rejectUnauthorized: process.env.DATABASE_REJECT_UNAUTHORIZED === 'true',\n        ca: process.env.DATABASE_CA,\n        key: process.env.DATABASE_KEY,\n        cert: process.env.DATABASE_CERT,\n    };\n});\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EnvironmentVariablesValidator-2.html":{"url":"classes/EnvironmentVariablesValidator-2.html","title":"class - EnvironmentVariablesValidator-2","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EnvironmentVariablesValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/file.config.ts\n        \n\n\n            \n                Description\n            \n            \n                Class to validate environment variables related to file storage configuration.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                AWS_ACCESS_KEY_ID\n                            \n                            \n                                    \n                                    \n                                AWS_DEFAULT_S3_BUCKET\n                            \n                            \n                                    \n                                    \n                                AWS_S3_REGION\n                            \n                            \n                                    \n                                    \n                                AWS_SECRET_ACCESS_KEY\n                            \n                            \n                                    \n                                    \n                                FILE_DRIVER\n                            \n                            \n                                    \n                                    \n                                MAX_FILE_SIZE\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        AWS_ACCESS_KEY_ID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateIf(envValues => )@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/file.config.ts:38\n                        \n                    \n\n            \n                \n                    AWS access key ID, required if using S3 or presigned S3 driver.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        AWS_DEFAULT_S3_BUCKET\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateIf(envValues => )@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/file.config.ts:64\n                        \n                    \n\n            \n                \n                    Default S3 bucket name, required if using S3 or presigned S3 driver.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        AWS_S3_REGION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateIf(envValues => )@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/file.config.ts:77\n                        \n                    \n\n            \n                \n                    AWS S3 region, required if using S3 or presigned S3 driver.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        AWS_SECRET_ACCESS_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateIf(envValues => )@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/file.config.ts:51\n                        \n                    \n\n            \n                \n                    AWS secret access key, required if using S3 or presigned S3 driver.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        FILE_DRIVER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FileDriver\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(FileDriver)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/file.config.ts:25\n                        \n                    \n\n            \n                \n                    Driver for file storage. Specifies the method of file storage, e.g., local file system or S3.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        MAX_FILE_SIZE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/file.config.ts:88\n                        \n                    \n\n            \n                \n                    Maximum file size allowed for uploads, in bytes.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { registerAs } from '@nestjs/config';\n\nimport { IsEnum, IsString, ValidateIf, IsOptional } from 'class-validator';\n\nimport { FileDriver, FileConfig } from '@config/type/file-config.type';\nimport validateConfig from '@utils/validate-config';\n\n/**\n * Class to validate environment variables related to file storage configuration.\n *\n * @export\n * @class EnvironmentVariablesValidator\n */\n\nclass EnvironmentVariablesValidator {\n    /**\n     * Driver for file storage. Specifies the method of file storage, e.g., local file system or S3.\n     *\n     * @type {FileDriver}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @IsEnum(FileDriver)\n    @IsOptional()\n    FILE_DRIVER: FileDriver;\n\n    /**\n     * AWS access key ID, required if using S3 or presigned S3 driver.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @ValidateIf((envValues) =>\n        [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n    )\n    @IsString()\n    AWS_ACCESS_KEY_ID: string;\n\n    /**\n     * AWS secret access key, required if using S3 or presigned S3 driver.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @ValidateIf((envValues) =>\n        [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n    )\n    @IsString()\n    AWS_SECRET_ACCESS_KEY: string;\n\n    /**\n     * Default S3 bucket name, required if using S3 or presigned S3 driver.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @ValidateIf((envValues) =>\n        [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n    )\n    @IsString()\n    AWS_DEFAULT_S3_BUCKET: string;\n\n    /**\n     * AWS S3 region, required if using S3 or presigned S3 driver.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @ValidateIf((envValues) =>\n        [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n    )\n    @IsString()\n    AWS_S3_REGION: string;\n\n    /**\n     * Maximum file size allowed for uploads, in bytes.\n     *\n     * @type {number}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @IsString()\n    @IsOptional()\n    MAX_FILE_SIZE: number;\n}\n\n/**\n * Configuration registration and validation for file storage settings.\n *\n * Registers the file storage configuration with NestJS and validates the environment variables\n * using `EnvironmentVariablesValidator`. Returns a `FileConfig` object with default values\n * and environment variable values for file storage configuration.\n *\n * @export\n * @function\n * @returns {FileConfig} The file storage configuration.\n */\n\nexport default registerAs('file', (): FileConfig => {\n    validateConfig(process.env, EnvironmentVariablesValidator);\n\n    // console.log(\n    //     'registerAS fileconfig',\n    //     (process.env.FILE_DRIVER as FileDriver | undefined) ?? FileDriver.LOCAL,\n    //     process.env.FILE_DRIVER,\n    //     process.env\n    // );\n\n    return {\n        driver: (process.env.FILE_DRIVER as FileDriver | undefined) ?? FileDriver.LOCAL,\n        accessKeyId: process.env.AWS_ACCESS_KEY_ID,\n        secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,\n        awsDefaultS3Bucket: process.env.AWS_DEFAULT_S3_BUCKET,\n        awsS3Region: process.env.AWS_S3_REGION,\n        maxFileSize: process.env.MAX_FILE_SIZE\n            ? parseInt(process.env.MAX_FILE_SIZE, 10)\n            : process.env.MAX_FILE_SIZE\n              ? parseInt(process.env.MAX_FILE_SIZE, 10)\n              : 5242880,\n        // maxFileSize: 5242880, // 5mb\n    };\n});\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EnvironmentVariablesValidator-3.html":{"url":"classes/EnvironmentVariablesValidator-3.html","title":"class - EnvironmentVariablesValidator-3","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EnvironmentVariablesValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/logger.config.ts\n        \n\n\n            \n                Description\n            \n            \n                Class to validate environment variables using class-validator decorators.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                LOGGER_APP\n                            \n                            \n                                    \n                                    \n                                LOGGER_CONSOLE_PRINT\n                            \n                            \n                                    \n                                    \n                                LOGGER_CONTEXT\n                            \n                            \n                                    \n                                    \n                                LOGGER_DATABASE_STORAGE\n                            \n                            \n                                    \n                                    \n                                LOGGER_DURATION\n                            \n                            \n                                    \n                                    \n                                LOGGER_DURATION_LOG_LEVEL\n                            \n                            \n                                    \n                                    \n                                LOGGER_LOG_IN_FILE\n                            \n                            \n                                    \n                                    \n                                LOGGER_LOG_LEVEL\n                            \n                            \n                                    \n                                    \n                                LOGGER_ORGANIZATION\n                            \n                            \n                                    \n                                    \n                                LOGGER_SLACK_INC_WEBHOOK_URL\n                            \n                            \n                                    \n                                    \n                                NODE_ENV\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        LOGGER_APP\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/logger.config.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        LOGGER_CONSOLE_PRINT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/logger.config.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        LOGGER_CONTEXT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/logger.config.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        LOGGER_DATABASE_STORAGE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/logger.config.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        LOGGER_DURATION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/logger.config.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        LOGGER_DURATION_LOG_LEVEL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/logger.config.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        LOGGER_LOG_IN_FILE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/logger.config.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        LOGGER_LOG_LEVEL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/logger.config.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        LOGGER_ORGANIZATION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/logger.config.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        LOGGER_SLACK_INC_WEBHOOK_URL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/logger.config.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        NODE_ENV\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Environment\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(Environment)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/logger.config.ts:30\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { registerAs } from '@nestjs/config';\n\nimport { IsEnum, IsString, IsOptional, IsBoolean } from 'class-validator';\n\nimport { LoggerConfig } from '@config/type/logger-config.type';\nimport validateConfig from '@utils/validate-config';\n\nconst getBooleanEnvVar = (key: string, defaultValue: boolean = false): boolean => {\n    const value = process.env[key];\n    return value ? value.toLowerCase() === 'true' : defaultValue;\n};\n\nenum Environment {\n    Development = 'development',\n    Production = 'production',\n    Staging = 'staging',\n    Test = 'testing',\n}\n\n/**\n * Class to validate environment variables using class-validator decorators.\n *\n * @export\n * @class EnvironmentVariablesValidator\n */\n\nclass EnvironmentVariablesValidator {\n    @IsEnum(Environment)\n    @IsOptional()\n    NODE_ENV: Environment;\n\n    @IsOptional()\n    @IsString()\n    LOGGER_ORGANIZATION: string;\n\n    @IsOptional()\n    @IsString()\n    LOGGER_CONTEXT: string;\n\n    @IsOptional()\n    @IsString()\n    LOGGER_APP: string;\n\n    @IsOptional()\n    @IsBoolean()\n    LOGGER_DATABASE_STORAGE: boolean;\n\n    @IsOptional()\n    @IsString()\n    LOGGER_LOG_LEVEL: string;\n\n    @IsOptional()\n    @IsBoolean()\n    LOGGER_DURATION: boolean;\n\n    @IsOptional()\n    @IsString()\n    LOGGER_DURATION_LOG_LEVEL: string;\n\n    @IsOptional()\n    @IsBoolean()\n    LOGGER_CONSOLE_PRINT: boolean;\n\n    @IsOptional()\n    @IsBoolean()\n    LOGGER_LOG_IN_FILE: boolean;\n\n    @IsOptional()\n    @IsString()\n    LOGGER_SLACK_INC_WEBHOOK_URL: string;\n}\n\n/**\n * Configuration registration and validation.\n *\n * Registers the configuration with NestJS and validates the environment variables\n * using `EnvironmentVariablesValidator`. Returns an `LoggerConfig` object with default values\n * for the application configuration.\n *\n * @export\n * @function\n * @returns {LoggerConfig} The logger configuration.\n */\n\nexport default registerAs('logger', (): LoggerConfig => {\n    validateConfig(process.env, EnvironmentVariablesValidator);\n\n    return {\n        nodeEnv: process.env.NODE_ENV || 'development',\n        organization: process.env.LOGGER_ORGANIZATION || 'org',\n        context: process.env.LOGGER_CONTEXT || 'mycontext',\n        app: process.env.LOGGER_APP || 'api',\n        database_storage: getBooleanEnvVar('LOGGER_DATABASE_STORAGE', false),\n        database_log_level: process.env.LOGGER_LOG_LEVEL || 'error',\n        duration: getBooleanEnvVar('LOGGER_DURATION', false),\n        duration_log_level: process.env.LOGGER_DURATION_LOG_LEVEL || 'info',\n        console_print: getBooleanEnvVar('LOGGER_CONSOLE_PRINT', false),\n        log_in_file: getBooleanEnvVar('LOGGER_LOG_IN_FILE', false),\n        slack_webhook:\n            process.env.LOGGER_SLACK_INC_WEBHOOK_URL ||\n            'https://hooks.slack.com/services/XXXXXXXXX/XXXXXXXXX/XXXXXXXXXXXXXXXXXXXXXXXX',\n    };\n});\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileNotImageException.html":{"url":"classes/FileNotImageException.html","title":"class - FileNotImageException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileNotImageException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/exceptions/file-not-image.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Exception class for handling non-image file uploads.\nExample :```typescript\nimport { FileNotImageException } from './path/to/exception';throw new FileNotImageException('Custom error message');\nExample :\n            \n\n            \n                Extends\n            \n            \n                        BadRequestException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message?: string | any, error?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/exceptions/file-not-image.exception.ts:20\n                            \n                        \n\n                \n                    \n                            Creates an instance of FileNotImageException.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                    string | any\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                \nOptional custom error message.\n\n\n                                                        \n                                                \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                \nOptional custom error code.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        'use strict';\n\nimport { BadRequestException } from '@nestjs/common';\n\n/**\n * Exception class for handling non-image file uploads.\n *\n * @description This exception is thrown when a file that is not an image is uploaded, extending the `BadRequestException` from NestJS.\n *\n * @example\n * ```typescript\n * import { FileNotImageException } from './path/to/exception';\n *\n * throw new FileNotImageException('Custom error message');\n * ```\n *\n * @extends {BadRequestException}\n */\n\nexport class FileNotImageException extends BadRequestException {\n    /**\n     * Creates an instance of FileNotImageException.\n     *\n     * @param {string | any} [message] - Optional custom error message.\n     * @param {string} [error] - Optional custom error code.\n     */\n\n    constructor(message?: string | any, error?: string) {\n        if (message) {\n            super(message, error);\n        } else {\n            super('error.file.not_image');\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileResponseDto.html":{"url":"classes/FileResponseDto.html","title":"class - FileResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/local/dto/file-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                The FileResponseDto represents the response object returned when a file is successfully uploaded or processed.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                file\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        file\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FileType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: () => FileType})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/infrastructure/uploader/local/dto/file-response.dto.ts:27\n                        \n                    \n\n            \n                \n                    The file details.\nExample :{\n  id: 'cbcfa8b8-3a25-4adb-a9c6-e325f0d0f3ae',\n  path: '/api/v1/uploads/example-file.jpg'\n}\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiResponseProperty } from '@nestjs/swagger';\n\nimport { FileType } from '../../../../domain/file';\n\n/**\n * @dto FileResponseDto\n *\n * @description\n * The `FileResponseDto` represents the response object returned when a file is successfully uploaded or processed.\n */\nexport class FileResponseDto {\n    /**\n     * The file details.\n     *\n     * @type {FileType}\n     *\n     * @example\n     * {\n     *   id: 'cbcfa8b8-3a25-4adb-a9c6-e325f0d0f3ae',\n     *   path: '/api/v1/uploads/example-file.jpg'\n     * }\n     */\n\n    @ApiResponseProperty({\n        type: () => FileType,\n    })\n    file: FileType;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileResponseDto-1.html":{"url":"classes/FileResponseDto-1.html","title":"class - FileResponseDto-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/s3/dto/file-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data transfer object (DTO) for representing the response format when returning file metadata. This DTO is used to encapsulate the file's information in API responses.\n\n@ApiResponseProperty(): Marks the property for inclusion in Swagger API documentation.\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                file\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        file\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FileType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: () => FileType})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/infrastructure/uploader/s3/dto/file-response.dto.ts:34\n                        \n                    \n\n            \n                \n                    Represents the metadata of the uploaded file.\nExample :{\n    \"id\": \"cbcfa8b8-3a25-4adb-a9c6-e325f0d0f3ae\",\n    \"path\": \"https://example.com/path/to/file.jpg\"\n}\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiResponseProperty } from '@nestjs/swagger';\n\nimport { FileType } from '../../../../domain/file';\n\n/**\n * @dto FileResponseDto\n *\n * @description\n * Data transfer object (DTO) for representing the response format when returning file metadata. This DTO is used to encapsulate the file's information in API responses.\n *\n * @properties\n *\n * @property {FileType} file - Represents the metadata of the uploaded file, including its path and any other relevant information.\n *\n * @decorators\n * - `@ApiResponseProperty()`: Marks the property for inclusion in Swagger API documentation.\n */\nexport class FileResponseDto {\n    /**\n     * Represents the metadata of the uploaded file.\n     *\n     * @type {FileType}\n     * @description Contains details about the file, such as its path and identifier.\n     * @example\n     * {\n     *     \"id\": \"cbcfa8b8-3a25-4adb-a9c6-e325f0d0f3ae\",\n     *     \"path\": \"https://example.com/path/to/file.jpg\"\n     * }\n     */\n\n    @ApiResponseProperty({\n        type: () => FileType,\n    })\n    file: FileType;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileResponseDto-2.html":{"url":"classes/FileResponseDto-2.html","title":"class - FileResponseDto-2","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/s3-presigned/dto/file-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                The FileResponseDto class represents the response structure for file operations, including the file metadata and upload signed URL. This DTO is used to standardize the response format for file upload operations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                file\n                            \n                            \n                                    \n                                uploadSignedUrl\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        file\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FileType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: () => FileType})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/infrastructure/uploader/s3-presigned/dto/file-response.dto.ts:27\n                        \n                    \n\n            \n                \n                    The metadata of the file, including its path and other relevant information.\nExample :{\n  id: 'abc123',\n  path: '/files/example.jpg'\n}\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        uploadSignedUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/infrastructure/uploader/s3-presigned/dto/file-response.dto.ts:41\n                        \n                    \n\n            \n                \n                    The presigned URL for uploading the file to the server or cloud storage.\nThis URL is used to securely upload the file to the specified location.\nExample :'https://example-bucket.s3.amazonaws.com/unique-file-key?AWSAccessKeyId=ACCESS_KEY&Expires=EXPIRATION_TIME&Signature=SIGNATURE'\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiResponseProperty } from '@nestjs/swagger';\n\nimport { FileType } from '../../../../domain/file';\n\n/**\n * @class FileResponseDto\n *\n * @description\n * The `FileResponseDto` class represents the response structure for file operations, including the file metadata and upload signed URL. This DTO is used to standardize the response format for file upload operations.\n */\n\nexport class FileResponseDto {\n    /**\n     * The metadata of the file, including its path and other relevant information.\n     *\n     * @type {FileType}\n     * @example\n     * {\n     *   id: 'abc123',\n     *   path: '/files/example.jpg'\n     * }\n     */\n\n    @ApiResponseProperty({\n        type: () => FileType,\n    })\n    file: FileType;\n\n    /**\n     * The presigned URL for uploading the file to the server or cloud storage.\n     * This URL is used to securely upload the file to the specified location.\n     *\n     * @type {string}\n     * @example\n     * 'https://example-bucket.s3.amazonaws.com/unique-file-key?AWSAccessKeyId=ACCESS_KEY&Expires=EXPIRATION_TIME&Signature=SIGNATURE'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n    })\n    uploadSignedUrl: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileType.html":{"url":"classes/FileType.html","title":"class - FileType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/domain/file.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the FileType class used for representing file metadata and handling file paths.\nThe FileType class represents the metadata associated with a file, including its unique identifier and file path.\nIt uses decorators from @nestjs/swagger for API documentation and class-transformer for transforming file paths based on the file configuration.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                path\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'cbcfa8b8-3a25-4adb-a9c6-e325f0d0f3ae'})@Allow()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/domain/file.ts:35\n                        \n                    \n\n            \n                \n                    The unique identifier for the file.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'https://example.com/path/to/file.jpg'})@Transform( => , {toPlainOnly: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/domain/file.ts:81\n                        \n                    \n\n            \n                \n                    The URL or path of the file. Transforms the file path based on the file driver configuration.\nIf the driver is LOCAL, the URL is constructed using the backend domain.\nIf the driver is S3 or S3_PRESIGNED, a presigned URL is generated for accessing the file.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiResponseProperty } from '@nestjs/swagger';\n\nimport { GetObjectCommand, S3Client } from '@aws-sdk/client-s3';\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner';\nimport { Transform } from 'class-transformer';\nimport { Allow } from 'class-validator';\n\nimport appConfig from '@config/app.config';\nimport fileConfig from '@config/file.config';\nimport { AppConfig } from '@config/type/app-config.type';\nimport { FileConfig, FileDriver } from '@config/type/file-config.type';\n\n/**\n * @fileoverview\n * Defines the `FileType` class used for representing file metadata and handling file paths.\n *\n * @module\n * @description\n * The `FileType` class represents the metadata associated with a file, including its unique identifier and file path.\n * It uses decorators from `@nestjs/swagger` for API documentation and `class-transformer` for transforming file paths based on the file configuration.\n */\nexport class FileType {\n    /**\n     * The unique identifier for the file.\n     *\n     * @example 'cbcfa8b8-3a25-4adb-a9c6-e325f0d0f3ae'\n     * @type {string}\n     */\n\n    @ApiProperty({\n        type: String,\n        example: 'cbcfa8b8-3a25-4adb-a9c6-e325f0d0f3ae',\n    })\n    @Allow()\n    id: string;\n\n    /**\n     * The URL or path of the file. Transforms the file path based on the file driver configuration.\n     * If the driver is LOCAL, the URL is constructed using the backend domain.\n     * If the driver is S3 or S3_PRESIGNED, a presigned URL is generated for accessing the file.\n     *\n     * @example 'https://example.com/path/to/file.jpg'\n     * @type {string}\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: 'https://example.com/path/to/file.jpg',\n    })\n    @Transform(\n        ({ value }) => {\n            if ((fileConfig() as FileConfig).driver === FileDriver.LOCAL) {\n                return (appConfig() as AppConfig).backendDomain + value;\n            } else if (\n                [FileDriver.S3_PRESIGNED, FileDriver.S3].includes(\n                    (fileConfig() as FileConfig).driver\n                )\n            ) {\n                const s3 = new S3Client({\n                    region: (fileConfig() as FileConfig).awsS3Region ?? '',\n                    credentials: {\n                        accessKeyId: (fileConfig() as FileConfig).accessKeyId ?? '',\n                        secretAccessKey: (fileConfig() as FileConfig).secretAccessKey ?? '',\n                    },\n                });\n\n                const command = new GetObjectCommand({\n                    Bucket: (fileConfig() as FileConfig).awsDefaultS3Bucket ?? '',\n                    Key: value,\n                });\n\n                return getSignedUrl(s3, command, { expiresIn: 3600 });\n            }\n\n            return value;\n        },\n        {\n            toPlainOnly: true,\n        }\n    )\n    path: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileUploadDto.html":{"url":"classes/FileUploadDto.html","title":"class - FileUploadDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileUploadDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/s3-presigned/dto/file.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                The FileUploadDto class defines the data transfer object for uploading files. It includes properties to specify the file's name and size. This DTO is used to validate and document the data required for file upload operations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                fileName\n                            \n                            \n                                    \n                                    \n                                fileSize\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        fileName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'image.jpg'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/infrastructure/uploader/s3-presigned/dto/file.dto.ts:23\n                        \n                    \n\n            \n                \n                    The name of the file to be uploaded.\nExample :'image.jpg'\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        fileSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 138723})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/infrastructure/uploader/s3-presigned/dto/file.dto.ts:35\n                        \n                    \n\n            \n                \n                    The size of the file in bytes.\nExample :138723\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nimport { IsNumber, IsString } from 'class-validator';\n\n/**\n * @class FileUploadDto\n *\n * @description\n * The `FileUploadDto` class defines the data transfer object for uploading files. It includes properties to specify the file's name and size. This DTO is used to validate and document the data required for file upload operations.\n */\n\nexport class FileUploadDto {\n    /**\n     * The name of the file to be uploaded.\n     *\n     * @type {string}\n     * @example\n     * 'image.jpg'\n     */\n\n    @ApiProperty({ example: 'image.jpg' })\n    @IsString()\n    fileName: string;\n\n    /**\n     * The size of the file in bytes.\n     *\n     * @type {number}\n     * @example\n     * 138723\n     */\n\n    @ApiProperty({ example: 138723 })\n    @IsNumber()\n    fileSize: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FilesLocalController.html":{"url":"controllers/FilesLocalController.html","title":"controller - FilesLocalController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FilesLocalController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/local/files.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                The FilesLocalController is responsible for handling file operations related to local storage.\nIt provides endpoints for uploading and downloading files.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                download\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        download\n                        \n                    \n                \n            \n            \n                \n                        \n                    download(path: string, response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('local/download/:path')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/files/infrastructure/uploader/local/files.controller.ts:96\n                        \n                    \n\n\n            \n                \n                        Downloads a file from local storage.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                path\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The path to the file to be downloaded.\n\n                                            \n                                        \n                                        \n                                                response\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A file response stream.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiCreatedResponse({type: FileResponseDto})@Post('upload')@ApiConsumes('multipart/form-data')@ApiBody({schema: undefined})@ApiFile()@UseInterceptors(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/files/infrastructure/uploader/local/files.controller.ts:79\n                        \n                    \n\n\n            \n                \n                        Uploads a file to local storage.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The file to be uploaded.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                FileResponseDto The response containing file details after upload.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Get,\n    Param,\n    Post,\n    Response,\n    UploadedFile,\n    UseInterceptors,\n} from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport {\n    ApiBody,\n    ApiConsumes,\n    ApiCreatedResponse,\n    // ApiExcludeEndpoint,\n    ApiTags,\n} from '@nestjs/swagger';\n\nimport { diskStorage } from 'multer';\n\n// import { ApiFile } from '@decorators/swagger.schema';\nimport { ApiFile } from '@decorators/swagger.schema';\nimport { filesRoot, editFileName, imageFileFilter } from '@providers/file-upload.service';\n\nimport { FileResponseDto } from './dto/file-response.dto';\nimport { FilesLocalService } from './files.service';\n\n/**\n * @controller FilesLocalController\n *\n * @description\n * The `FilesLocalController` is responsible for handling file operations related to local storage.\n * It provides endpoints for uploading and downloading files.\n */\n\n@ApiTags('Files')\n@Controller()\nexport class FilesLocalController {\n    constructor(private readonly filesService: FilesLocalService) {}\n\n    /**\n     * Uploads a file to local storage.\n     *\n     * @endpoint POST /v1/upload\n     * @consumes multipart/form-data\n     *\n     * @param file The file to be uploaded.\n     * @returns FileResponseDto The response containing file details after upload.\n     *\n     * @throws { HttpException } If there is an error during file upload.\n     */\n\n    @ApiCreatedResponse({\n        type: FileResponseDto,\n    })\n    @Post('upload')\n    @ApiConsumes('multipart/form-data')\n    @ApiBody({\n        schema: {\n            type: 'object',\n            properties: {\n                file: {\n                    type: 'string',\n                    format: 'binary',\n                },\n            },\n        },\n    })\n    @ApiFile()\n    @UseInterceptors(\n        FileInterceptor('file', {\n            storage: diskStorage({\n                destination: filesRoot() + '/local',\n                filename: editFileName,\n            }),\n            fileFilter: imageFileFilter,\n        })\n    )\n    async uploadFile(@UploadedFile() file: Express.Multer.File): Promise {\n        return this.filesService.create(file);\n    }\n\n    /**\n     * Downloads a file from local storage.\n     *\n     * @endpoint GET /:path\n     *\n     * @param path The path to the file to be downloaded.\n     * @returns A file response stream.\n     *\n     * @throws { HttpException } If the file cannot be found or there is an error during download.\n     */\n\n    @Get('local/download/:path')\n    //@ApiExcludeEndpoint()\n    download(@Param('path') path: string, @Response() response) {\n        return response.sendFile(path, { root: filesRoot() + '/local' });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FilesLocalModule.html":{"url":"modules/FilesLocalModule.html","title":"module - FilesLocalModule","body":"\n                   \n\n\n\n\n    Modules\n    FilesLocalModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FilesLocalModule\n\n\n\ncluster_FilesLocalModule_providers\n\n\n\ncluster_FilesLocalModule_exports\n\n\n\n\nFilesLocalService \n\nFilesLocalService \n\n\n\nFilesLocalModule\n\nFilesLocalModule\n\nFilesLocalService  -->\n\nFilesLocalModule->FilesLocalService \n\n\n\n\n\nFilesLocalService\n\nFilesLocalService\n\nFilesLocalModule -->\n\nFilesLocalService->FilesLocalModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/local/files.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            The FilesLocalModule is responsible for managing file operations using local storage.\nIt provides the necessary components to handle file uploads, retrievals, and other file-related operations specific to local storage.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FilesLocalService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            FilesLocalController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FilesLocalService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { FilesLocalController } from './files.controller';\nimport { FilesLocalService } from './files.service';\n\n/**\n * @module FilesLocalModule\n *\n * @description\n * The `FilesLocalModule` is responsible for managing file operations using local storage.\n * It provides the necessary components to handle file uploads, retrievals, and other file-related operations specific to local storage.\n */\n@Module({\n    /**\n     * The list of controllers that handle incoming requests and provide endpoints related to local file operations.\n     */\n\n    controllers: [FilesLocalController],\n\n    /**\n     * The list of providers that contain the business logic for file operations.\n     * These providers are used to handle file-related tasks such as uploading, retrieving, and managing files.\n     */\n\n    providers: [FilesLocalService],\n\n    /**\n     * The list of providers that are made available for other modules to use.\n     * `FilesLocalService` is exported so that other modules can utilize the service for local file operations.\n     */\n    exports: [FilesLocalService],\n})\nexport class FilesLocalModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FilesLocalService.html":{"url":"injectables/FilesLocalService.html","title":"injectable - FilesLocalService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FilesLocalService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/local/files.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The FilesLocalService provides functionality for handling file operations related to local storage.\nIt manages file creation and provides necessary file details.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/files/infrastructure/uploader/local/files.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(file: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/files/infrastructure/uploader/local/files.service.ts:37\n                        \n                    \n\n\n            \n                \n                        Handles file creation and returns file details.\nExample :// Example response:\n{\n  file: {\n    id: 'asas',\n    path: '/api/v1/uploads/example-file.jpg'\n  }\n}\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The file to be processed.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves to an object containing file details.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpStatus, Injectable, UnprocessableEntityException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\nimport { AllConfigType } from '@config/type/config.type';\n\nimport { FileType } from '../../../domain/file';\n\n/**\n * @service FilesLocalService\n *\n * @description\n * The `FilesLocalService` provides functionality for handling file operations related to local storage.\n * It manages file creation and provides necessary file details.\n */\n@Injectable()\nexport class FilesLocalService {\n    constructor(private readonly configService: ConfigService) {}\n\n    /**\n     * Handles file creation and returns file details.\n     *\n     * @param file The file to be processed.\n     * @returns A promise that resolves to an object containing file details.\n     *\n     * @throws { UnprocessableEntityException } If the file is not provided.\n     *\n     * @example\n     * // Example response:\n     * {\n     *   file: {\n     *     id: 'asas',\n     *     path: '/api/v1/uploads/example-file.jpg'\n     *   }\n     * }\n     */\n\n    async create(file: Express.Multer.File): Promise {\n        if (!file) {\n            throw new UnprocessableEntityException({\n                status: HttpStatus.UNPROCESSABLE_ENTITY,\n                errors: {\n                    file: 'selectFile',\n                },\n            });\n        }\n\n        return {\n            file: {\n                id: 'asas',\n                path: `/${this.configService.get('app.apiPrefix', {\n                    infer: true,\n                })}/v1/${file.path}`,\n            },\n        } as any;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FilesModule.html":{"url":"modules/FilesModule.html","title":"module - FilesModule","body":"\n                   \n\n\n\n\n    Modules\n    FilesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_providers\n\n\n\ncluster_FilesModule_exports\n\n\n\ncluster_FilesModule_imports\n\n\n\n\nFilesS3Module\n\nFilesS3Module\n\n\n\nFilesModule\n\nFilesModule\n\nFilesModule -->\n\nFilesS3Module->FilesModule\n\n\n\n\n\nFilesS3PresignedModule\n\nFilesS3PresignedModule\n\nFilesModule -->\n\nFilesS3PresignedModule->FilesModule\n\n\n\n\n\nFilesService \n\nFilesService \n\nFilesService  -->\n\nFilesModule->FilesService \n\n\n\n\n\nFilesService\n\nFilesService\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/files/files.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            This file defines the FilesModule, which is responsible for managing file uploads\nthrough different infrastructure modules. It conditionally imports the appropriate\nfile uploader module based on configuration settings.\nThe FilesModule class integrates various file uploader modules and provides\nthe FilesService for handling file operations. The module configuration allows\nswitching between different file storage solutions such as local storage, S3, and\nS3 presigned uploads.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FilesService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            FilesS3Module\n                        \n                        \n                            FilesS3PresignedModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FilesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { FilesService } from './files.service';\nimport { FilesLocalModule } from './infrastructure/uploader/local/files.module';\nimport { FilesS3Module } from './infrastructure/uploader/s3/files.module';\nimport { FilesS3PresignedModule } from './infrastructure/uploader/s3-presigned/files.module';\n\n// import { InfrastructureUploaderModule } from './infrastructureUploaderModule';\n\n// const infrastructureUploaderModule =\n//     (fileConfig() as FileConfig).driver === FileDriver.LOCAL\n//         ? FilesLocalModule\n//         : (fileConfig() as FileConfig).driver === FileDriver.S3\n//           ? FilesS3Module\n//           : FilesS3PresignedModule;\n\n// console.log(\n//     '********************************************************************===============================',\n//     fileConfig() as FileConfig\n// );\n\nconst infrastructureUploaderModule = FilesLocalModule;\n\n/**\n * @fileoverview\n * This file defines the `FilesModule`, which is responsible for managing file uploads\n * through different infrastructure modules. It conditionally imports the appropriate\n * file uploader module based on configuration settings.\n *\n * @module\n * @description\n * The `FilesModule` class integrates various file uploader modules and provides\n * the `FilesService` for handling file operations. The module configuration allows\n * switching between different file storage solutions such as local storage, S3, and\n * S3 presigned uploads.\n */\n\n@Module({\n    /**\n     * The `imports` array specifies the modules that are imported into this module.\n     * The choice of uploader module is determined based on the configuration settings.\n     */\n\n    imports: [infrastructureUploaderModule, FilesS3Module, FilesS3PresignedModule],\n\n    /**\n     * The `providers` array defines the providers that are instantiated by this module.\n     * The `FilesService` is included here to be used within this module.\n     */\n\n    providers: [FilesService],\n\n    /**\n     * The `exports` array specifies the providers that are exported from this module.\n     * The `FilesService` is exported so it can be used by other modules.\n     */\n\n    exports: [FilesService],\n})\nexport class FilesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FilesS3Controller.html":{"url":"controllers/FilesS3Controller.html","title":"controller - FilesS3Controller","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FilesS3Controller\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/s3/files.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                The FilesS3Controller handles HTTP requests related to file uploads using AWS S3. It provides an endpoint for uploading files to S3 and returning the file metadata.\n\nFiles: Grouped under the 'Files' tag for API documentation purposes.\n\nfiles: Base path for file-related operations.\n\nv1/upload/s3: Endpoint for file uploads to S3.\n\n\nHandles file upload requests. Files are processed and uploaded to S3. The response includes metadata about the uploaded file.\n\n@ApiTags('Files'): Tags the controller with 'Files' for API documentation.\n@ApiCreatedResponse({ type: FileResponseDto }): Specifies the response type for successful file uploads.\n@Post('v1/upload/s3'): Defines the HTTP POST endpoint for file uploads.\n@ApiConsumes('multipart/form-data'): Indicates that the endpoint consumes 'multipart/form-data' for file uploads.\n@ApiBody({ schema: { type: 'object', properties: { file: { type: 'string', format: 'binary' } } } }): Documents the expected request body schema for file uploads.\n@ApiFile(): Custom decorator for file upload handling.\n@UseInterceptors(FileInterceptor('file')): Applies the FileInterceptor to handle file uploads.\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(file: Express.MulterS3.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiCreatedResponse({type: FileResponseDto})@Post('v1/upload/s3')@ApiConsumes('multipart/form-data')@ApiBody({schema: undefined})@ApiFile()@UseInterceptors(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/files/infrastructure/uploader/s3/files.controller.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.MulterS3.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, UploadedFile, UseInterceptors } from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { ApiBody, ApiConsumes, ApiCreatedResponse, ApiTags } from '@nestjs/swagger';\n\n// import { ApiFile } from '../../../../../decorators/swagger.schema';\nimport { ApiFile } from '@decorators/swagger.schema';\n\nimport { FileResponseDto } from './dto/file-response.dto';\nimport { FilesS3Service } from './files.service';\n\n/**\n * @controller FilesS3Controller\n *\n * @description\n * The `FilesS3Controller` handles HTTP requests related to file uploads using AWS S3. It provides an endpoint for uploading files to S3 and returning the file metadata.\n *\n * @tags\n * - Files: Grouped under the 'Files' tag for API documentation purposes.\n *\n * @path\n * - `files`: Base path for file-related operations.\n * - `v1/upload/s3`: Endpoint for file uploads to S3.\n *\n * @controller\n *\n * @constructor\n * @param {FilesS3Service} filesService - Service responsible for handling file operations with S3.\n *\n * @methods\n *\n * @method uploadFile\n * @description\n * Handles file upload requests. Files are processed and uploaded to S3. The response includes metadata about the uploaded file.\n *\n * @param {Express.MulterS3.File} file - The uploaded file from the request.\n * @returns {Promise} - A promise that resolves to the file metadata.\n *\n * @decorators\n * - `@ApiTags('Files')`: Tags the controller with 'Files' for API documentation.\n * - `@ApiCreatedResponse({ type: FileResponseDto })`: Specifies the response type for successful file uploads.\n * - `@Post('v1/upload/s3')`: Defines the HTTP POST endpoint for file uploads.\n * - `@ApiConsumes('multipart/form-data')`: Indicates that the endpoint consumes 'multipart/form-data' for file uploads.\n * - `@ApiBody({ schema: { type: 'object', properties: { file: { type: 'string', format: 'binary' } } } })`: Documents the expected request body schema for file uploads.\n * - `@ApiFile()`: Custom decorator for file upload handling.\n * - `@UseInterceptors(FileInterceptor('file'))`: Applies the `FileInterceptor` to handle file uploads.\n */\n\n@ApiTags('Files')\n@Controller({\n    path: 'files',\n    version: '1',\n})\nexport class FilesS3Controller {\n    constructor(private readonly filesService: FilesS3Service) {}\n\n    @ApiCreatedResponse({\n        type: FileResponseDto,\n    })\n    @Post('v1/upload/s3')\n    @ApiConsumes('multipart/form-data')\n    @ApiBody({\n        schema: {\n            type: 'object',\n            properties: {\n                file: {\n                    type: 'string',\n                    format: 'binary',\n                },\n            },\n        },\n    })\n    @ApiFile()\n    @UseInterceptors(FileInterceptor('file'))\n    async uploadFile(@UploadedFile() file: Express.MulterS3.File): Promise {\n        return this.filesService.create(file);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FilesS3Module.html":{"url":"modules/FilesS3Module.html","title":"module - FilesS3Module","body":"\n                   \n\n\n\n\n    Modules\n    FilesS3Module\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FilesS3Module\n\n\n\ncluster_FilesS3Module_exports\n\n\n\ncluster_FilesS3Module_providers\n\n\n\n\nFilesS3Service \n\nFilesS3Service \n\n\n\nFilesS3Module\n\nFilesS3Module\n\nFilesS3Service  -->\n\nFilesS3Module->FilesS3Service \n\n\n\n\n\nFilesS3Service\n\nFilesS3Service\n\nFilesS3Module -->\n\nFilesS3Service->FilesS3Module\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/s3/files.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            The FilesS3Module configures the integration with AWS S3 for file upload functionality. It sets up the Multer middleware to handle file uploads, configures the S3 client, and defines the file storage and filtering logic.\n\nMulterModule: Configures Multer for file handling and integrates it with S3.\n\nConfigModule: Provides access to application configuration settings.\n\nFilesS3Service: Handles file upload and processing logic using S3.\n\nFilesS3Controller: Manages HTTP requests related to file uploads and downloads.\n\nFilesS3Service: Exposes the service for file operations to other modules.\n\n\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FilesS3Service\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            FilesS3Controller\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FilesS3Service\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { randomStringGenerator } from '@nestjs/common/utils/random-string-generator.util';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { MulterModule } from '@nestjs/platform-express';\n\nimport { S3Client } from '@aws-sdk/client-s3';\nimport multerS3 from 'multer-s3';\n\n// import { HelperModule } from '../../../../../common/helper/helper.module';\n// import { ConfigService } from '../../../../../common/helper/services/config.service';\nimport { AllConfigType } from '@config/type/config.type';\nimport { imageFileFilter } from '@providers/file-upload.service';\n\nimport { FilesS3Controller } from './files.controller';\nimport { FilesS3Service } from './files.service';\n\n/**\n * @module FilesS3Module\n *\n * @description\n * The `FilesS3Module` configures the integration with AWS S3 for file upload functionality. It sets up the Multer middleware to handle file uploads, configures the S3 client, and defines the file storage and filtering logic.\n *\n * @imports\n * - `MulterModule`: Configures Multer for file handling and integrates it with S3.\n * - `ConfigModule`: Provides access to application configuration settings.\n *\n * @providers\n * - `FilesS3Service`: Handles file upload and processing logic using S3.\n *\n * @controllers\n * - `FilesS3Controller`: Manages HTTP requests related to file uploads and downloads.\n *\n * @exports\n * - `FilesS3Service`: Exposes the service for file operations to other modules.\n */\n\n@Module({\n    imports: [\n        MulterModule.registerAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: (configService: ConfigService) => {\n                const s3 = new S3Client({\n                    region: configService.get('file.awsS3Region', { infer: true }),\n                    credentials: {\n                        accessKeyId: configService.getOrThrow('file.accessKeyId', {\n                            infer: true,\n                        }),\n                        secretAccessKey: configService.getOrThrow('file.secretAccessKey', {\n                            infer: true,\n                        }),\n                    },\n                });\n\n                return {\n                    fileFilter: imageFileFilter,\n                    storage: multerS3({\n                        s3: s3,\n                        bucket: configService.getOrThrow('file.awsDefaultS3Bucket', {\n                            infer: true,\n                        }),\n                        contentType: multerS3.AUTO_CONTENT_TYPE,\n                        key: (request, file, callback) => {\n                            callback(\n                                null,\n                                `${randomStringGenerator()}.${file.originalname\n                                    .split('.')\n                                    .pop()\n                                    ?.toLowerCase()}`\n                            );\n                        },\n                    }),\n                    limits: {\n                        fileSize: configService.get('file.maxFileSize', { infer: true }),\n                    },\n                };\n            },\n        }),\n    ],\n    controllers: [FilesS3Controller],\n    providers: [FilesS3Service],\n    exports: [FilesS3Service],\n})\nexport class FilesS3Module {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FilesS3PresignedController.html":{"url":"controllers/FilesS3PresignedController.html","title":"controller - FilesS3PresignedController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FilesS3PresignedController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/s3-presigned/files.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                The FilesS3PresignedController manages HTTP requests for file operations involving Amazon S3 presigned URLs. It provides endpoints for uploading files and generating presigned URLs for downloading files from S3.\n\nFilesS3PresignedController: Handles file upload and presigned URL generation requests.\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                getDownloadUrl\n                            \n                            \n                                    \n                                    \n                                    Async\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getDownloadUrl\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDownloadUrl(key: string, expiresIn: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('v1/download/:key')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/files/infrastructure/uploader/s3-presigned/files.controller.ts:69\n                        \n                    \n\n\n            \n                \n                        Generates a presigned URL for downloading a file from Amazon S3.\nExample :GET /files/v1/download/{key}?expiresIn=3600\nResponse:\n{\n  \"url\": \"https://s3.amazonaws.com/bucket/path/to/file?signature\"\n}\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe key (path) of the file in the S3 bucket.\n\n\n                                            \n                                        \n                                        \n                                                expiresIn\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe expiration time for the presigned URL in seconds.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An object containing the presigned URL for file download.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(file: FileUploadDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiCreatedResponse({type: FileResponseDto})@Post('v1/upload')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/files/infrastructure/uploader/s3-presigned/files.controller.ts:49\n                        \n                    \n\n\n            \n                \n                        Uploads a file to Amazon S3.\nExample :POST /files/v1/upload\nRequest body:\n{\n  \"file\": \"base64-encoded-file-data\"\n}\nResponse:\n{\n  \"file\": {\n    \"path\": \"s3://bucket/path/to/file\"\n  }\n}\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                            FileUploadDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe file data to upload.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                A FileResponseDto object containing information about the uploaded file.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Post, Query } from '@nestjs/common';\nimport { ApiCreatedResponse, ApiTags } from '@nestjs/swagger';\n\nimport { FileResponseDto } from './dto/file-response.dto';\nimport { FileUploadDto } from './dto/file.dto';\nimport { FilesS3PresignedService } from './files.service';\n\n/**\n * @module FilesS3PresignedController\n *\n * @description\n * The `FilesS3PresignedController` manages HTTP requests for file operations involving Amazon S3 presigned URLs. It provides endpoints for uploading files and generating presigned URLs for downloading files from S3.\n *\n * @controllers\n * - `FilesS3PresignedController`: Handles file upload and presigned URL generation requests.\n */\n@ApiTags('Files')\n@Controller({\n    path: 'files',\n    version: '1',\n})\nexport class FilesS3PresignedController {\n    constructor(private readonly filesService: FilesS3PresignedService) {}\n\n    /**\n     * Uploads a file to Amazon S3.\n     *\n     * @param file - The file data to upload.\n     * @returns A `FileResponseDto` object containing information about the uploaded file.\n     *\n     * @example\n     * POST /files/v1/upload\n     * Request body:\n     * {\n     *   \"file\": \"base64-encoded-file-data\"\n     * }\n     * Response:\n     * {\n     *   \"file\": {\n     *     \"path\": \"s3://bucket/path/to/file\"\n     *   }\n     * }\n     */\n\n    @ApiCreatedResponse({\n        type: FileResponseDto,\n    })\n    @Post('v1/upload')\n    async uploadFile(@Body() file: FileUploadDto) {\n        return this.filesService.create(file);\n    }\n\n    /**\n     * Generates a presigned URL for downloading a file from Amazon S3.\n     *\n     * @param key - The key (path) of the file in the S3 bucket.\n     * @param expiresIn - The expiration time for the presigned URL in seconds.\n     * @returns An object containing the presigned URL for file download.\n     *\n     * @example\n     * GET /files/v1/download/{key}?expiresIn=3600\n     * Response:\n     * {\n     *   \"url\": \"https://s3.amazonaws.com/bucket/path/to/file?signature\"\n     * }\n     */\n\n    @Get('v1/download/:key')\n    async getDownloadUrl(@Param('key') key: string, @Query('expiresIn') expiresIn: number) {\n        const url = await this.filesService.generatePresignedUrl(key, expiresIn);\n        return { url };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FilesS3PresignedModule.html":{"url":"modules/FilesS3PresignedModule.html","title":"module - FilesS3PresignedModule","body":"\n                   \n\n\n\n\n    Modules\n    FilesS3PresignedModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FilesS3PresignedModule\n\n\n\ncluster_FilesS3PresignedModule_providers\n\n\n\ncluster_FilesS3PresignedModule_exports\n\n\n\n\nFilesS3PresignedService \n\nFilesS3PresignedService \n\n\n\nFilesS3PresignedModule\n\nFilesS3PresignedModule\n\nFilesS3PresignedService  -->\n\nFilesS3PresignedModule->FilesS3PresignedService \n\n\n\n\n\nFilesS3PresignedService\n\nFilesS3PresignedService\n\nFilesS3PresignedModule -->\n\nFilesS3PresignedService->FilesS3PresignedModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/s3-presigned/files.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            The FilesS3PresignedModule configures and sets up the module for handling file uploads to an Amazon S3 bucket using presigned URLs. It integrates the necessary dependencies and configurations for Multer to manage file uploads and provides the service and controller for handling S3 interactions.\n\nMulterModule: Configured asynchronously to use multer-s3 for file storage on S3.\n\nConfigModule: Provides configuration services for retrieving AWS S3 settings.\n\nFilesS3PresignedService: Service that handles the logic for interacting with S3 and generating presigned URLs.\n\nFilesS3PresignedController: Controller for handling HTTP requests related to file uploads and presigned URLs.\n\n\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FilesS3PresignedService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            FilesS3PresignedController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FilesS3PresignedService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { randomStringGenerator } from '@nestjs/common/utils/random-string-generator.util';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { MulterModule } from '@nestjs/platform-express';\n\nimport { S3Client } from '@aws-sdk/client-s3';\nimport multerS3 from 'multer-s3';\n\n// import { HelperModule } from '../../../../../common/helper/helper.module';\n// import { ConfigService } from '../../../../../common/helper/services/config.service';\nimport { AllConfigType } from '@config/type/config.type';\n\nimport { imageFileFilter } from '../../../../../providers/file-upload.service';\n\nimport { FilesS3PresignedController } from './files.controller';\nimport { FilesS3PresignedService } from './files.service';\n\n/**\n * @module FilesS3PresignedModule\n *\n * @description\n * The `FilesS3PresignedModule` configures and sets up the module for handling file uploads to an Amazon S3 bucket using presigned URLs. It integrates the necessary dependencies and configurations for Multer to manage file uploads and provides the service and controller for handling S3 interactions.\n *\n * @imports\n * - `MulterModule`: Configured asynchronously to use `multer-s3` for file storage on S3.\n * - `ConfigModule`: Provides configuration services for retrieving AWS S3 settings.\n *\n * @providers\n * - `FilesS3PresignedService`: Service that handles the logic for interacting with S3 and generating presigned URLs.\n *\n * @controllers\n * - `FilesS3PresignedController`: Controller for handling HTTP requests related to file uploads and presigned URLs.\n */\n@Module({\n    imports: [\n        MulterModule.registerAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: (configService: ConfigService) => {\n                const s3 = new S3Client({\n                    region: configService.get('file.awsS3Region', { infer: true }),\n                    credentials: {\n                        accessKeyId: configService.getOrThrow('file.accessKeyId', {\n                            infer: true,\n                        }),\n                        secretAccessKey: configService.getOrThrow('file.secretAccessKey', {\n                            infer: true,\n                        }),\n                    },\n                });\n\n                return {\n                    fileFilter: imageFileFilter,\n                    storage: multerS3({\n                        s3: s3,\n                        bucket: '',\n                        acl: 'public-read',\n                        contentType: multerS3.AUTO_CONTENT_TYPE,\n                        key: (request, file, callback) => {\n                            callback(\n                                null,\n                                `${randomStringGenerator()}.${file.originalname\n                                    .split('.')\n                                    .pop()\n                                    ?.toLowerCase()}`\n                            );\n                        },\n                    }),\n                };\n            },\n        }),\n    ],\n    controllers: [FilesS3PresignedController],\n    providers: [FilesS3PresignedService],\n    exports: [FilesS3PresignedService],\n})\nexport class FilesS3PresignedModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FilesS3PresignedService.html":{"url":"injectables/FilesS3PresignedService.html","title":"injectable - FilesS3PresignedService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FilesS3PresignedService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/s3-presigned/files.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The FilesS3PresignedService handles operations related to file uploads and downloads using Amazon S3 with presigned URLs. It provides methods for creating upload presigned URLs and generating download presigned URLs.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                s3\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                generatePresignedUrl\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/files/infrastructure/uploader/s3-presigned/files.service.ts:26\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(file: FileUploadDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/files/infrastructure/uploader/s3-presigned/files.service.ts:59\n                        \n                    \n\n\n            \n                \n                        Creates a presigned URL for uploading a file to Amazon S3.\nExample :const response = await this.create({\n  fileName: 'image.jpg',\n  fileSize: 123456\n});\n// response will include file metadata and uploadSignedUrl\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                            FileUploadDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe file upload data containing file information.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                An object containing the file metadata and the presigned URL for uploading.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generatePresignedUrl\n                        \n                    \n                \n            \n            \n                \n                        \n                    generatePresignedUrl(key: string, expiresIn: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/files/infrastructure/uploader/s3-presigned/files.service.ts:128\n                        \n                    \n\n\n            \n                \n                        Generates a presigned URL for downloading a file from Amazon S3.\nExample :const url = await this.generatePresignedUrl('path/to/file', 3600);\n// url will be a presigned URL for downloading the file\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe key (path) of the file in the S3 bucket.\n\n\n                                            \n                                        \n                                        \n                                                expiresIn\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe expiration time for the presigned URL in seconds.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                The presigned URL for downloading the file.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        s3\n                        \n                    \n                \n            \n                \n                    \n                        Type :     S3Client\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/files/infrastructure/uploader/s3-presigned/files.service.ts:26\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n    HttpStatus,\n    Injectable,\n    PayloadTooLargeException,\n    UnprocessableEntityException,\n} from '@nestjs/common';\nimport { randomStringGenerator } from '@nestjs/common/utils/random-string-generator.util';\nimport { ConfigService } from '@nestjs/config';\n\nimport { GetObjectCommand, PutObjectCommand, S3Client } from '@aws-sdk/client-s3';\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner';\n\n// import { ConfigService } from '../../../../../common/helper/services/config.service';\nimport { FileType } from '../../../domain/file';\n\nimport { FileUploadDto } from './dto/file.dto';\n\n/**\n * @module FilesS3PresignedService\n *\n * @description\n * The `FilesS3PresignedService` handles operations related to file uploads and downloads using Amazon S3 with presigned URLs. It provides methods for creating upload presigned URLs and generating download presigned URLs.\n */\n@Injectable()\nexport class FilesS3PresignedService {\n    private s3: S3Client;\n\n    constructor(private readonly configService: ConfigService) {\n        this.s3 = new S3Client({\n            region: configService.get('file.awsS3Region', { infer: true }),\n            credentials: {\n                accessKeyId: configService.getOrThrow('file.accessKeyId', {\n                    infer: true,\n                }),\n                secretAccessKey: configService.getOrThrow('file.secretAccessKey', {\n                    infer: true,\n                }),\n            },\n        });\n    }\n\n    /**\n     * Creates a presigned URL for uploading a file to Amazon S3.\n     *\n     * @param file - The file upload data containing file information.\n     * @returns An object containing the file metadata and the presigned URL for uploading.\n     *\n     * @throws {UnprocessableEntityException} If the file is not provided or has an unsupported type.\n     * @throws {PayloadTooLargeException} If the file size exceeds the maximum allowed size.\n     *\n     * @example\n     * const response = await this.create({\n     *   fileName: 'image.jpg',\n     *   fileSize: 123456\n     * });\n     * // response will include file metadata and uploadSignedUrl\n     */\n\n    async create(file: FileUploadDto): Promise {\n        if (!file) {\n            throw new UnprocessableEntityException({\n                status: HttpStatus.UNPROCESSABLE_ENTITY,\n                errors: {\n                    file: 'selectFile',\n                },\n            });\n        }\n\n        if (!file.fileName.match(/\\.(jpg|jpeg|png|gif)$/i)) {\n            throw new UnprocessableEntityException({\n                status: HttpStatus.UNPROCESSABLE_ENTITY,\n                errors: {\n                    file: `cantUploadFileType`,\n                },\n            });\n        }\n\n        if (\n            file.fileSize >\n            (this.configService.get('file.maxFileSize', {\n                infer: true,\n            }) || 0)\n        ) {\n            throw new PayloadTooLargeException({\n                statusCode: HttpStatus.PAYLOAD_TOO_LARGE,\n                error: 'Payload Too Large',\n                message: 'File too large',\n            });\n        }\n\n        const key = `${randomStringGenerator()}.${file.fileName.split('.').pop()?.toLowerCase()}`;\n\n        const command = new PutObjectCommand({\n            Bucket: this.configService.getOrThrow('file.awsDefaultS3Bucket', {\n                infer: true,\n            }),\n            Key: key,\n            ContentLength: file.fileSize,\n        });\n        const signedUrl = await getSignedUrl(this.s3, command, { expiresIn: 3600 });\n\n        // const data = await this.fileRepository.create({\n        //     path: key,\n        // });\n\n        const data = {\n            path: key,\n        } as any;\n\n        return {\n            file: data,\n            uploadSignedUrl: signedUrl,\n        };\n    }\n\n    /**\n     * Generates a presigned URL for downloading a file from Amazon S3.\n     *\n     * @param key - The key (path) of the file in the S3 bucket.\n     * @param expiresIn - The expiration time for the presigned URL in seconds.\n     * @returns The presigned URL for downloading the file.\n     *\n     * @example\n     * const url = await this.generatePresignedUrl('path/to/file', 3600);\n     * // url will be a presigned URL for downloading the file\n     */\n\n    async generatePresignedUrl(key: string, expiresIn: number): Promise {\n        const command = new GetObjectCommand({\n            Bucket: this.configService.getOrThrow('file.awsDefaultS3Bucket', {\n                infer: true,\n            }),\n            Key: key,\n        });\n\n        return await getSignedUrl(this.s3, command, { expiresIn });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FilesS3Service.html":{"url":"injectables/FilesS3Service.html","title":"injectable - FilesS3Service","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FilesS3Service\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/s3/files.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The FilesS3Service provides methods for handling file operations with AWS S3. It includes functionality to process uploaded files and return their metadata.\nHandles the creation and metadata retrieval for uploaded files. It validates the presence of the file and returns its metadata.\n\n@Injectable(): Marks the class as a provider that can be injected into other components.\n\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/modules/files/infrastructure/uploader/s3/files.service.ts:29\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(file: Express.MulterS3.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/files/infrastructure/uploader/s3/files.service.ts:40\n                        \n                    \n\n\n            \n                \n                        Handles the creation and metadata retrieval for uploaded files.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.MulterS3.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe uploaded file from the request.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nA promise that resolves to an object containing the file metadata.\n\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpStatus, Injectable, UnprocessableEntityException } from '@nestjs/common';\n\nimport { FileType } from '../../../domain/file';\n\n/**\n * @service FilesS3Service\n *\n * @description\n * The `FilesS3Service` provides methods for handling file operations with AWS S3. It includes functionality to process uploaded files and return their metadata.\n *\n * @constructor\n * @param {void} - No parameters are injected into the constructor.\n *\n * @methods\n *\n * @method create\n * @description\n * Handles the creation and metadata retrieval for uploaded files. It validates the presence of the file and returns its metadata.\n *\n * @param {Express.MulterS3.File} file - The uploaded file from the request. It should include information such as the file's S3 key.\n * @returns {Promise} - A promise that resolves to an object containing the file metadata.\n *\n * @throws {UnprocessableEntityException} - Throws an exception if the file is not provided in the request.\n *\n * @decorators\n * - `@Injectable()`: Marks the class as a provider that can be injected into other components.\n */\n@Injectable()\nexport class FilesS3Service {\n    constructor() {}\n\n    /**\n     * Handles the creation and metadata retrieval for uploaded files.\n     *\n     * @param {Express.MulterS3.File} file - The uploaded file from the request.\n     * @returns {Promise} - A promise that resolves to an object containing the file metadata.\n     * @throws {UnprocessableEntityException} - Throws an exception if the file is not provided.\n     */\n\n    async create(file: Express.MulterS3.File): Promise {\n        if (!file) {\n            throw new UnprocessableEntityException({\n                status: HttpStatus.UNPROCESSABLE_ENTITY,\n                errors: {\n                    file: 'selectFile',\n                },\n            });\n        }\n\n        return {\n            file: {\n                path: file.key,\n            } as any,\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FilesService.html":{"url":"injectables/FilesService.html","title":"injectable - FilesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FilesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/files.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the FilesService, a service responsible for handling file operations.\nThe FilesService class is an injectable service in the NestJS framework. It is designed\nto manage and process file-related tasks, such as uploading, retrieving, and managing files.\nThe service's methods and functionalities should be implemented based on the specific file\nhandling requirements of the application.\n\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n/**\n * @fileoverview\n * This file defines the `FilesService`, a service responsible for handling file operations.\n *\n * @module\n * @description\n * The `FilesService` class is an injectable service in the NestJS framework. It is designed\n * to manage and process file-related tasks, such as uploading, retrieving, and managing files.\n * The service's methods and functionalities should be implemented based on the specific file\n * handling requirements of the application.\n */\n@Injectable()\nexport class FilesService {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilterCountryDto.html":{"url":"classes/FilterCountryDto.html","title":"class - FilterCountryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilterCountryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/countries/dto/query-country.dto-remove.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nimport { Transform, Type, plainToInstance } from 'class-transformer';\nimport { IsNumber, IsOptional, IsString, ValidateNested } from 'class-validator';\n\nimport { Country } from './country';\n\nexport class FilterCountryDto {}\n\nexport class SortCountryDto {\n    @ApiProperty()\n    @Type(() => String)\n    @IsString()\n    orderBy: keyof Country;\n\n    @ApiProperty()\n    @IsString()\n    order: string;\n}\n\nexport class QueryCountryDto {\n    @ApiPropertyOptional()\n    @Transform(({ value }) => (value ? Number(value) : 1))\n    @IsNumber()\n    @IsOptional()\n    page?: number;\n\n    @ApiPropertyOptional()\n    @Transform(({ value }) => (value ? Number(value) : 10))\n    @IsNumber()\n    @IsOptional()\n    limit?: number;\n\n    @ApiPropertyOptional({ type: String })\n    @IsOptional()\n    @Transform(({ value }) =>\n        value ? plainToInstance(FilterCountryDto, JSON.parse(value)) : undefined\n    )\n    @ValidateNested()\n    @Type(() => FilterCountryDto)\n    filters?: FilterCountryDto | null;\n\n    @ApiPropertyOptional({ type: String })\n    @IsOptional()\n    @Transform(({ value }) => {\n        return value ? plainToInstance(SortCountryDto, JSON.parse(value)) : undefined;\n    })\n    @ValidateNested({ each: true })\n    @Type(() => SortCountryDto)\n    sort?: SortCountryDto[] | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilterQueryDto.html":{"url":"classes/FilterQueryDto.html","title":"class - FilterQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilterQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/dto/pagination.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO class for filter query parameters.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                field\n                            \n                            \n                                    \n                                    \n                                    \n                                operator\n                            \n                            \n                                    \n                                    \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        field\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'iso', required: true})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.dto.ts:160\n                        \n                    \n\n            \n                \n                    The field to filter on.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        operator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '='})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.dto.ts:172\n                        \n                    \n\n            \n                \n                    The operator to use for filtering.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'IN'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.dto.ts:184\n                        \n                    \n\n            \n                \n                    The value to filter by.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nimport { Type, Transform, plainToInstance } from 'class-transformer';\nimport {\n    IsOptional,\n    Min,\n    Max,\n    IsNotEmpty,\n    IsString,\n    ValidateNested,\n    Matches,\n    IsEnum,\n    // Validate,\n    // IsIn,\n} from 'class-validator';\n\n// import { IsValidField } from '@core/validators/field.validator'; // Import the custom validator\nimport { IsNumberStringOrNumber } from '@decorators/number.string.validator';\nimport { ToNumber } from '@decorators/transforms.decorator';\n// import { IsNumberStringOrNumber } from '@decorators/number.string.validator';\n// import { ToNumber } from '@decorators/transforms.decorator';\n// import { Country } from '@modules/countries/dto/country';\n\n/**\n * Enum representing different pagination types.\n *\n * @export\n * @enum {string}\n */\n\nexport enum PaginationType {\n    NONE = 'no',\n    INFINITY = 'infinity',\n    PAGINATE = 'paginate',\n    ALL = 'all',\n}\n\n/**\n * DTO class for pagination query parameters.\n *\n * @export\n */\nexport class PaginationQueryDto {\n    /**\n     * The type of pagination to apply.\n     *\n     * @type {PaginationType}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        description:\n            'Pagination must all (Page and has_next_page), infinity (only has_next_page), paginate(only page)',\n        enum: PaginationType,\n        default: PaginationType.ALL,\n    })\n    @IsEnum(PaginationType)\n    @IsOptional()\n    readonly pagination: PaginationType;\n\n    /**\n     * The page number for pagination.\n     *\n     * @type {number}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        description: 'Page number',\n        minimum: 1,\n        default: 1,\n    })\n    @IsOptional()\n    @IsNumberStringOrNumber()\n    @ToNumber()\n    @Min(1)\n    readonly page?: number;\n\n    /**\n     * The number of records per page.\n     *\n     * @type {number}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        description: 'Record limit',\n        minimum: 1,\n        maximum: 500,\n        default: 10,\n    })\n    @IsOptional()\n    @IsNumberStringOrNumber()\n    @ToNumber()\n    @Min(10)\n    @Max(500)\n    readonly limit?: number = 10;\n\n    /**\n     * Filters to apply to the query.\n     *\n     * @type {FilterQueryDto[] | null}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        name: 'filters',\n        required: false,\n        type: String,\n        description: 'Array of filter objects as a JSON string',\n        example: '[{\"field\":\"name\",\"operator\":\"=\",\"value\":\"IN\"}]',\n    })\n    @IsOptional()\n    @Transform(({ value }) => {\n        return value ? plainToInstance(FilterQueryDto, JSON.parse(value)) : undefined;\n    })\n    @ValidateNested({ each: true })\n    @Type(() => FilterQueryDto)\n    filters?: FilterQueryDto[] | null;\n\n    /**\n     * Sorting options for the query.\n     *\n     * @type {SortByDto[] | null}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        name: 'sort',\n        required: false,\n        type: String,\n        description: 'Array of sort objects as a JSON string',\n        example: '[{\"field\":\"name\",\"direction\":\"ASC\"}]',\n    })\n    @IsOptional()\n    @Transform(({ value }) => {\n        return value ? plainToInstance(SortByDto, JSON.parse(value)) : undefined;\n    })\n    @ValidateNested({ each: true })\n    @Type(() => SortByDto)\n    sort?: SortByDto[] | null;\n}\n\n/**\n * DTO class for filter query parameters.\n *\n * @export\n */\nexport class FilterQueryDto {\n    /**\n     * The field to filter on.\n     *\n     * @type {string}\n     * @memberof FilterQueryDto\n     */\n\n    @ApiProperty({ example: 'iso', required: true })\n    @IsNotEmpty()\n    @IsString()\n    field: string;\n\n    /**\n     * The operator to use for filtering.\n     *\n     * @type {string}\n     * @memberof FilterQueryDto\n     */\n\n    @ApiProperty({ example: '=' })\n    @IsNotEmpty()\n    @IsString()\n    operator: string;\n\n    /**\n     * The value to filter by.\n     *\n     * @type {string}\n     * @memberof FilterQueryDto\n     */\n\n    @ApiProperty({ example: 'IN' })\n    @IsNotEmpty()\n    @IsString()\n    value: string;\n}\n\n/**\n * DTO class for sorting options.\n *\n * @export\n */\nexport class SortByDto {\n    // @ApiProperty({ example: 'name' })\n    // @IsString()\n    // @Validate(IsValidField, [Country], {\n    //     message: 'Field must be a valid key of Country',\n    // })\n    // field: keyof Country;\n    /**\n     * The field to sort by.\n     *\n     * @type {string}\n     * @memberof SortByDto\n     */\n\n    @ApiProperty()\n    @IsString()\n    // @IsIn(abc(x : keyof TExposedAccountInfo), {\n    //     message: 'Field must be one of \"name\", \"age\", or \"status\"',\n    // })\n    // @Validate(IsValidField, [{ entity: () => T }], {\n    //     message: 'Field must be a valid key of the specified entity',\n    // })\n    field: string;\n\n    /**\n     * The direction of the sort (ascending or descending).\n     *\n     * @type {string}\n     * @memberof SortByDto\n     */\n\n    @ApiProperty({ example: 'ASC' })\n    @IsString()\n    @Matches(/^(ASC|DESC|asc|desc)$/, {\n        message: 'operator must be one of ASC, DESC, asc, or desc',\n    })\n    direction: string;\n}\n\n// export class PaginatedResultDto {\n//     @ApiProperty()\n//     data: T[];\n\n//     @ApiProperty()\n//     total: number;\n\n//     @ApiProperty()\n//     page: number;\n\n//     @ApiProperty()\n//     limit: number;\n// }\n\n//DX\n// import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\n// import { Type, Transform, plainToInstance } from 'class-transformer';\n// import {\n//     IsOptional,\n//     Min,\n//     Max,\n//     IsNotEmpty,\n//     IsString,\n//     IsArray,\n//     ValidateNested,\n//     Validate,\n//     Matches,\n// } from 'class-validator';\n\n// import { IsNumberStringOrNumber } from '@decorators/number.string.validator';\n// import { ToNumber } from '@decorators/transforms.decorator';\n// import { SortBy } from '@validators/filter.validator';\n\n// export class FilterQueryDto {\n//     @ApiProperty({ example: 'name', required: true })\n//     @IsNotEmpty()\n//     @IsString()\n//     field: string;\n\n//     @ApiProperty({ example: 'LIKE' })\n//     @IsNotEmpty()\n//     @IsString()\n//     operator: string;\n\n//     @ApiProperty({ example: '%John%' })\n//     @IsNotEmpty()\n//     @IsString()\n//     value: string;\n// }\n\n// export class SortByDto {\n//     @ApiProperty({ example: 'name' })\n//     @IsString()\n//     field: string;\n\n//     @ApiProperty({ example: 'ASC' })\n//     @IsString()\n//     @Matches(/^(ASC|DESC|asc|desc)$/, {\n//         message: 'operator must be one of ASC, DESC, asc, or desc',\n//     })\n//     direction: string;\n// }\n\n// export class PaginationQueryDto {\n//     @ApiPropertyOptional({\n//         description: 'Page number',\n//         minimum: 1,\n//         default: 1,\n//     })\n//     @IsOptional()\n//     @IsNumberStringOrNumber()\n//     @ToNumber()\n//     @Min(1)\n//     // @Transform(({ value }) => {\n//     //     const strippedValue = String(value).replace(/['\"]+/g, '');\n//     //     const numberValue = Number(strippedValue);\n//     //     return isNaN(numberValue) ? 'undefined' : numberValue;\n//     // })\n//     readonly page?: number;\n\n//     @ApiPropertyOptional({\n//         description: 'Record limit',\n//         minimum: 1,\n//         maximum: 500,\n//         default: 10,\n//     })\n//     @IsOptional()\n//     @IsNumberStringOrNumber()\n//     @ToNumber()\n//     @Min(10)\n//     @Max(500)\n//     readonly limit?: number = 10;\n\n//     // @IsOptional()\n//     // @IsArray()\n//     // @ValidateNested({ each: true })\n//     // @Type(() => FilterQueryDto)\n//     // filters?: FilterQueryDto[];\n//     // // filters?: any;\n//     @ApiPropertyOptional({\n//         name: 'filters',\n//         required: false,\n//         type: String,\n//         description: 'Array of filter objects as a JSON string',\n//         example:\n//             '[{\"field\":\"name\",\"operator\":\"LIKE\",\"value\":\"John\"},{\"field\":\"age\",\"operator\":\">\",\"value\":\"30\"}]',\n//     })\n//     @IsOptional()\n//     @Transform(({ value }) => {\n//         return value ? plainToInstance(FilterQueryDto, JSON.parse(value)) : undefined;\n//     })\n//     @ValidateNested({ each: true })\n//     @Type(() => FilterQueryDto)\n//     filters?: FilterQueryDto[] | null;\n\n//     // @ApiPropertyOptional({\n//     //     description: ' Name or City:  ASC or DESC',\n//     //     example: 'name ASC',\n//     // })\n//     // @IsOptional()\n//     // @IsString()\n//     // @Validate(SortBy)\n//     // readonly sort?: string;\n//     // @ApiPropertyOptional({ type: [SortByDto], isArray: true })\n//     // @IsOptional()\n//     // @Transform(({ value }) => {\n//     //     return value ? plainToInstance(SortUserDto, JSON.parse(value)) : undefined;\n//     // })\n//     // @ValidateNested({ each: true })\n//     // @Type(() => SortUserDto)\n//     // sort?: SortUserDto[] | null;\n\n//     @ApiPropertyOptional({\n//         name: 'sort',\n//         required: false,\n//         type: String,\n//         description: 'Array of sort objects as a JSON string',\n//         example: '[{\"field\":\"name\",\"direction\":\"ASC\"},{\"field\":\"age\",\"direction\":\"DESC\"}]',\n//     })\n//     @IsOptional()\n//     @Transform(({ value }) => {\n//         return value ? plainToInstance(SortByDto, JSON.parse(value)) : undefined;\n//     })\n//     @ValidateNested({ each: true })\n//     @Type(() => SortByDto)\n//     sort?: SortByDto[] | null;\n// }\n\n// export class PaginatedResultDto {\n//     @ApiProperty()\n//     data: T[];\n\n//     @ApiProperty()\n//     total: number;\n\n//     @ApiProperty()\n//     page: number;\n\n//     @ApiProperty()\n//     limit: number;\n// }\n\n// // import { ApiProperty, ApiExtraModels } from '@nestjs/swagger';\n\n// // import { Type } from 'class-transformer';\n// // import { IsOptional, IsString, IsArray, ValidateNested, IsNumber } from 'class-validator';\n\n// // // export class FilterQueryDto {\n// // //     @ApiProperty({ example: 'name' })\n// // //     field: string;\n\n// // //     @ApiProperty({ example: 'LIKE' })\n// // //     operator: string;\n\n// // //     @ApiProperty({ example: '%John%' })\n// // //     value: string;\n// // // }\n// // export class FilterQueryDto {\n// //     @ApiProperty({ example: 'country_name' })\n// //     @IsString()\n// //     field: string;\n\n// //     @ApiProperty({ example: 'LIKE' })\n// //     @IsString()\n// //     operator: string;\n\n// //     @ApiProperty({ example: '%United%' })\n// //     @IsString()\n// //     value: string;\n// // }\n// // @ApiExtraModels(FilterQueryDto)\n// // export class PaginationQueryDto {\n// //     @ApiProperty({ example: 1, required: false })\n// //     @IsOptional()\n// //     @IsNumber()\n// //     @Type(() => Number)\n// //     page?: number = 1;\n\n// //     @ApiProperty({ example: 10, required: false })\n// //     @IsOptional()\n// //     @IsNumber()\n// //     @Type(() => Number)\n// //     limit?: number = 10;\n\n// //     // @ApiProperty({\n// //     //     type: [FilterQueryDto],\n// //     //     required: false,\n// //     //     isArray: true,\n// //     // })\n// //     // @Type(() => FilterQueryDto)\n// //     // filters?: FilterQueryDto[];\n// //     @ApiProperty({\n// //         type: FilterQueryDto,\n// //         required: false,\n// //         isArray: true,\n// //     })\n// //     // @IsOptional()\n// //     @IsArray()\n// //     @ValidateNested({ each: true })\n// //     @Type(() => FilterQueryDto)\n// //     filters?: FilterQueryDto[];\n\n// //     // @ApiProperty({\n// //     //     type: [Object],\n// //     //     // items: {\n// //     //     //     type: 'object',\n// //     //     //     items: {\n// //     //     //         type: 'object',\n// //     //     //     },\n// //     //     // },\n// //     // })\n// //     // coords: FilterQueryDto[];\n\n// //     // @ApiProperty({ type: String, required: false })\n// //     // @IsOptional()\n// //     // @IsArray()\n// //     // @ValidateNested({ each: true })\n// //     // @Type(() => FilterQueryDto)\n// //     // filters?: FilterQueryDto[];\n\n// //     @ApiProperty({ example: 'name ASC1', required: false })\n// //     sort?: string;\n// // }\n\n// // // export class PaginationQueryDto {\n// // //     @ApiProperty({ example: 1, required: false })\n// // //     page?: number = 1;\n\n// // //     @ApiProperty({ example: 10, required: false })\n// // //     limit?: number = 10;\n\n// // //     // @ApiProperty({ type: [FilterQueryDto], required: false, isArray: true })\n// // //     // filters?: FilterQueryDto[];\n\n// // //     // @ApiProperty({ type: String, required: false, isArray: true })\n// // //     // filters?: FilterQueryDto[];\n\n// // //     // @ApiProperty({ type: [FilterQueryDto], required: false, isArray: true })\n// // //     // @Type(() => FilterQueryDto)\n// // //     // filters?: FilterQueryDto[];\n\n// // //     @ApiProperty({ type: [FilterQueryDto], required: false })\n// // //     @IsOptional()\n// // //     @IsArray()\n// // //     @ValidateNested({ each: true })\n// // //     @Type(() => FilterQueryDto)\n// // //     filters?: FilterQueryDto[];\n\n// // //     @ApiProperty({ example: 'name ASC1', required: false })\n// // //     sort?: string;\n// // // }\n\n// // export class PaginatedResultDto {\n// //     @ApiProperty()\n// //     data: T[];\n\n// //     @ApiProperty()\n// //     total: number;\n\n// //     @ApiProperty()\n// //     page: number;\n\n// //     @ApiProperty()\n// //     limit: number;\n// // }\n\n// // export class abc {\n// //     @ApiProperty()\n// //     page: number;\n\n// //     @ApiProperty()\n// //     limit: number;\n// // }\n\n// // import { applyDecorators } from '@nestjs/common';\n// // import { ApiProperty, ApiExtraModels, ApiQuery, getSchemaPath } from '@nestjs/swagger';\n\n// // /**\n// //  * Combines Swagger Decorators to create a description for `filters[name]=something`\n// //  *  - has support for swagger\n// //  *  - automatic transformation with nestjs\n// //  */\n// // // // eslint-disable-next-line @typescript-eslint/ban-types,@typescript-eslint/explicit-module-boundary-types\n// // // export function ApiFilterQuery(fieldName: string, filterDto: Function) {\n// // //     return applyDecorators(\n// // //         ApiExtraModels(filterDto),\n// // //         ApiQuery({\n// // //             required: false,\n// // //             name: fieldName,\n// // //             style: 'deepObject',\n// // //             explode: true,\n// // //             type: 'object',\n// // //             schema: {\n// // //                 $ref: getSchemaPath(filterDto),\n// // //             },\n// // //         })\n// // //     );\n// // // }\n// // // eslint-disable-next-line @typescript-eslint/ban-types,@typescript-eslint/explicit-module-boundary-types\n// // export function ApiFilterQuery(fieldName: string, filterDto: Function, index: number) {\n// //     return applyDecorators(\n// //         ApiExtraModels(filterDto),\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}]`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //             schema: {\n// //                 $ref: getSchemaPath(filterDto),\n// //             },\n// //         })\n// //     );\n// // }\n\n// // export function ApiFilterQuery(fieldName: string, index: number) {\n// //     return applyDecorators(\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}].field`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //         }),\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}].operator`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //         }),\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}].value`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //         })\n// //     );\n// // }\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HelperModule.html":{"url":"modules/HelperModule.html","title":"module - HelperModule","body":"\n                   \n\n\n\n\n    Modules\n    HelperModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_HelperModule\n\n\n\ncluster_HelperModule_exports\n\n\n\ncluster_HelperModule_providers\n\n\n\n\nCommonQuery5 \n\nCommonQuery5 \n\n\n\nPaginationService \n\nPaginationService \n\n\n\nPrismaService \n\nPrismaService \n\n\n\nUtilsService \n\nUtilsService \n\n\n\nHelperModule\n\nHelperModule\n\nCommonQuery5  -->\n\nHelperModule->CommonQuery5 \n\n\n\nPaginationService  -->\n\nHelperModule->PaginationService \n\n\n\nPrismaService  -->\n\nHelperModule->PrismaService \n\n\n\nUtilsService  -->\n\nHelperModule->UtilsService \n\n\n\n\n\nPaginationService\n\nPaginationService\n\nHelperModule -->\n\nPaginationService->HelperModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nHelperModule -->\n\nPrismaService->HelperModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/helper/helper.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            The HelperModule is a global module that provides common utility services across the application.\nIt is marked as global, meaning its providers are available throughout the application without needing to import the module in other modules.\n\nThe HttpModule is imported to allow services within this module to make HTTP requests.\nThe module exports its services and HttpModule, making them available for use in other modules.\n\nExample :```typescript\n@Module({\n    imports: [HttpModule],\n    providers: [PaginationService, PrismaService, UtilsService],\n    exports: [PaginationService, PrismaService, UtilsService, HttpModule],\n})\nexport class HelperModule {}Example :\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PaginationService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CommonQuery5\n                        \n                        \n                            PaginationService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            UtilsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from '@nestjs/axios';\nimport { Global, Module } from '@nestjs/common';\n\n// import { ConfigService } from './services/config.service';\n\nimport { CommonQuery5 } from './services/comman.query';\nimport { PaginationService } from './services/pagination.service';\nimport { PrismaService } from './services/prisma.service';\nimport { UtilsService } from './services/util.service';\n\nconst providers = [PaginationService, PrismaService, UtilsService, CommonQuery5]; // ConfigService,\n\n/**\n * @module HelperModule\n *\n * @description\n * The `HelperModule` is a global module that provides common utility services across the application.\n * It is marked as global, meaning its providers are available throughout the application without needing to import the module in other modules.\n *\n * @remarks\n * - The `HttpModule` is imported to allow services within this module to make HTTP requests.\n * - The module exports its services and `HttpModule`, making them available for use in other modules.\n *\n * @example\n * ```typescript\n * @Module({\n *     imports: [HttpModule],\n *     providers: [PaginationService, PrismaService, UtilsService],\n *     exports: [PaginationService, PrismaService, UtilsService, HttpModule],\n * })\n * export class HelperModule {}\n * ```\n */\n\n@Global()\n@Module({\n    // imports: [],\n    // providers: [ConfigService, PrismaService],\n    // controllers: [],\n    // exports: [ConfigService, PrismaService],\n    providers,\n    imports: [HttpModule],\n    exports: [...providers, HttpModule],\n})\nexport class HelperModule {}\n\n// import { Module } from '@nestjs/common';\n// import { JwtService } from '@nestjs/jwt';\n\n// import { EncryptionService } from './services/encryption.service';\n// import { PrismaService } from './services/prisma.service';\n// import { TaskService } from './services/task.service';\n\n// @Module({\n//   imports: [],\n//   providers: [JwtService, EncryptionService, PrismaService, TaskService],\n//   controllers: [],\n//   exports: [EncryptionService, PrismaService, TaskService],\n// })\n// export class HelperModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HomeController.html":{"url":"controllers/HomeController.html","title":"controller - HomeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HomeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/home/home.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                This file defines the HomeController class, which handles HTTP requests related to the home feature of the application.\nThe HomeController class is responsible for handling incoming HTTP requests and returning responses for the home-related endpoints.\nThis controller uses the HomeService to perform the necessary business logic.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                appInfo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        appInfo\n                        \n                    \n                \n            \n            \n                \n                        \n                    appInfo()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/home/home.controller.ts:30\n                        \n                    \n\n\n            \n                \n                        Handles GET requests to the root endpoint and returns application information.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The application information.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\n\nimport { HomeService } from './home.service';\n\n/**\n * @fileoverview\n * This file defines the `HomeController` class, which handles HTTP requests related to the home feature of the application.\n *\n * @module\n * @description\n * The `HomeController` class is responsible for handling incoming HTTP requests and returning responses for the home-related endpoints.\n * This controller uses the `HomeService` to perform the necessary business logic.\n */\n\n@ApiTags('Home')\n@Controller()\nexport class HomeController {\n    /**\n     * Constructs a new `HomeController`.\n     * @param {HomeService} service - The service used to handle business logic for home-related endpoints.\n     */\n    constructor(private service: HomeService) {}\n\n    /**\n     * Handles GET requests to the root endpoint and returns application information.\n     * @returns {object} The application information.\n     */\n    @Get()\n    appInfo(): object {\n        return this.service.appInfo();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HomeModule.html":{"url":"modules/HomeModule.html","title":"module - HomeModule","body":"\n                   \n\n\n\n\n    Modules\n    HomeModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_HomeModule\n\n\n\ncluster_HomeModule_providers\n\n\n\n\nHomeService\n\nHomeService\n\n\n\nHomeModule\n\nHomeModule\n\nHomeModule -->\n\nHomeService->HomeModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/home/home.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            This file defines the HomeModule class, which is responsible for the home-related functionalities of the application.\nThe HomeModule class configures the home feature of the application by declaring its controller and service.\nThis module handles the business logic and request handling for home-related endpoints.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HomeService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            HomeController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { HomeController } from './home.controller';\nimport { HomeService } from './home.service';\n\n/**\n * @fileoverview\n * This file defines the `HomeModule` class, which is responsible for the home-related functionalities of the application.\n *\n * @module\n * @description\n * The `HomeModule` class configures the home feature of the application by declaring its controller and service.\n * This module handles the business logic and request handling for home-related endpoints.\n */\n\n@Module({\n    imports: [],\n    controllers: [\n        /**\n         * Controller responsible for handling incoming requests and returning responses related to the home feature.\n         */\n        HomeController,\n    ],\n    providers: [\n        /**\n         * Service responsible for handling the business logic related to the home feature.\n         */\n        HomeService,\n    ],\n})\nexport class HomeModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HomeService.html":{"url":"injectables/HomeService.html","title":"injectable - HomeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HomeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/home/home.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the HomeService class, which provides methods for retrieving application information from the configuration.\nThe HomeService class is responsible for retrieving application information from the configuration using the ConfigService.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                appInfo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/home/home.service.ts:15\n                            \n                        \n\n                \n                    \n                            Constructs a new HomeService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe configuration service used to access application configuration values.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        appInfo\n                        \n                    \n                \n            \n            \n                \nappInfo()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/home/home.service.ts:26\n                        \n                    \n\n\n            \n                \n                        Retrieves and returns application information from the configuration.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                An object containing the application's name, description, app prefix, and API prefix.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\nimport { AllConfigType } from '@config/type/config.type';\n\n/**\n * @fileoverview\n * This file defines the `HomeService` class, which provides methods for retrieving application information from the configuration.\n *\n * @module\n * @description\n * The `HomeService` class is responsible for retrieving application information from the configuration using the `ConfigService`.\n */\n@Injectable()\nexport class HomeService {\n    /**\n     * Constructs a new `HomeService`.\n     * @param {ConfigService} configService - The configuration service used to access application configuration values.\n     */\n    constructor(private configService: ConfigService) {}\n\n    /**\n     * Retrieves and returns application information from the configuration.\n     * @returns {object} An object containing the application's name, description, app prefix, and API prefix.\n     */\n    appInfo(): object {\n        return {\n            name: this.configService.get('app.name', { infer: true }),\n            description: this.configService.get('app.description', { infer: true }),\n            appPrefix: this.configService.get('app.appPrefix', { infer: true }),\n            apiPrefix: this.configService.get('app.apiPrefix', { infer: true }),\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpErrorFilter.html":{"url":"classes/HttpErrorFilter.html","title":"class - HttpErrorFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpErrorFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/exceptions/http-error.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                Global HTTP error filter.\nadditional error information such as the HTTP status, timestamp, request URL, method, and message.\nIt logs the error details, particularly for internal server errors.\nExample :```typescript\nimport { HttpErrorFilter } from './path/to/filter';@Module({\n  providers: [\n    {\n      provide: APP_FILTER,\n      useClass: HttpErrorFilter,\n    },\n  ],\n})\nexport class AppModule {}\nExample :\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/exceptions/http-error.filter.ts:50\n                        \n                    \n\n\n            \n                \n                        Method that handles the exception.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                        HttpException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe exception that was thrown.\n\n\n                                            \n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe host object containing the details of the current request.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n    ExceptionFilter,\n    Catch,\n    ArgumentsHost,\n    Logger,\n    HttpException,\n    HttpStatus,\n} from '@nestjs/common';\n\n// import * as _ from 'lodash';\n\n//   import { SQLService } from \"../shared/services/sql.service\";\n\n//   import { Query } from \"./query\";\n\n/**\n * Global HTTP error filter.\n *\n * @description This filter catches all HTTP exceptions and formats the response to include\n * additional error information such as the HTTP status, timestamp, request URL, method, and message.\n * It logs the error details, particularly for internal server errors.\n *\n * @example\n * ```typescript\n * import { HttpErrorFilter } from './path/to/filter';\n *\n * @Module({\n *   providers: [\n *     {\n *       provide: APP_FILTER,\n *       useClass: HttpErrorFilter,\n *     },\n *   ],\n * })\n * export class AppModule {}\n * ```\n *\n * @implements {ExceptionFilter}\n */\n\n@Catch()\nexport class HttpErrorFilter implements ExceptionFilter {\n    /**\n     * Method that handles the exception.\n     *\n     * @param {HttpException} exception - The exception that was thrown.\n     * @param {ArgumentsHost} host - The host object containing the details of the current request.\n     */\n\n    catch(exception: HttpException, host: ArgumentsHost) {\n        const ctx = host.switchToHttp();\n        const response = ctx.getResponse();\n        const request = ctx.getRequest();\n        const status = exception.getStatus\n            ? exception.getStatus()\n            : HttpStatus.INTERNAL_SERVER_ERROR;\n        const errorResponse = {\n            code: status,\n            timestamp: new Date().toLocaleTimeString,\n            path: request.url,\n            method: request.method,\n            message:\n                status !== HttpStatus.INTERNAL_SERVER_ERROR\n                    ? exception.message || null\n                    : 'Internal server error',\n        };\n\n        if (status === HttpStatus.INTERNAL_SERVER_ERROR) {\n            Logger.error(`${request.method} ${request.url}`, exception.stack, 'ExceptionFilter');\n        } else {\n            Logger.error(\n                `${request.method} ${request.url}`,\n                JSON.stringify(errorResponse),\n                'ExceptionFilter'\n            );\n        }\n\n        response.status(status).json(errorResponse);\n\n        //   try {\n        //     const sqlService = new SQLService();\n        //     const query = new Query();\n        //     const reqstrobj = { body: _.clone(request.body), header: _.clone(request.header) };\n        //     const reqstr = JSON.stringify(reqstrobj);\n\n        //     const resstrobj = { res: _.clone(errorResponse), exception: exception.stack };\n        //     const resstr = JSON.stringify(resstrobj);\n        //     sqlService.run(\n        //       query.addHttpQueryError(\"HTTPERROR\", request.method, request.url, reqstr, resstr)\n        //     );\n        //   } catch (error) {}\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/http-exception.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                Exception filter for handling HTTP exceptions in a NestJS application.\nThis filter catches all HttpException instances and formats the response\nwith the status code, timestamp, and request path.\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/filters/http-exception.filter.ts:27\n                        \n                    \n\n\n            \n                \n                        Handles the HTTP exception and formats the error response.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                        HttpException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The HTTP exception to handle.\n\n                                            \n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The arguments host for accessing request and response objects.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ExceptionFilter, Catch, ArgumentsHost, HttpException } from '@nestjs/common';\n\nimport { Request, Response } from 'express';\n\n/**\n * Exception filter for handling HTTP exceptions in a NestJS application.\n *\n * This filter catches all `HttpException` instances and formats the response\n * with the status code, timestamp, and request path.\n *\n * @export\n * @class HttpExceptionFilter\n * @implements {ExceptionFilter}\n */\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n    /**\n     * Handles the HTTP exception and formats the error response.\n     *\n     * @param {HttpException} exception The HTTP exception to handle.\n     * @param {ArgumentsHost} host The arguments host for accessing request and response objects.\n     *\n     * @memberof HttpExceptionFilter\n     */\n\n    catch(exception: HttpException, host: ArgumentsHost) {\n        console.log('HTTP EXEPTION from filter');\n        const ctx = host.switchToHttp();\n        const response = ctx.getResponse();\n        const request = ctx.getRequest();\n        const status = exception.getStatus();\n\n        response.status(status).json({\n            statusCode: status,\n            timestamp: new Date().toISOString(),\n            path: request.url,\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAppConfig.html":{"url":"interfaces/IAppConfig.html","title":"interface - IAppConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IAppConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interfaces/app.interfaces.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration interface for application settings.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            apiPrefix\n                                        \n                                \n                                \n                                        \n                                            backendDomain\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            frontendDomain\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            port\n                                        \n                                \n                                \n                                        \n                                            workingDirectory\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        apiPrefix\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        apiPrefix:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The API prefix used in the application.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        backendDomain\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        backendDomain:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The domain for the backend application.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        frontendDomain\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        frontendDomain:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The domain for the frontend application.\nThis property is optional.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The name of the application.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        port\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        port:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The port on which the application is running.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        workingDirectory\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        workingDirectory:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The working directory of the application.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        'use strict';\n\n'use strict';\n\n/**\n * Configuration interface for application settings.\n *\n * @export\n * @interface IAppConfig\n */\nexport interface IAppConfig {\n    /**\n     * The name of the application.\n     *\n     * @type {string}\n     * @memberof IAppConfig\n     */\n\n    name: string;\n\n    /**\n     * The working directory of the application.\n     *\n     * @type {string}\n     * @memberof IAppConfig\n     */\n\n    workingDirectory: string;\n\n    /**\n     * The domain for the frontend application.\n     * This property is optional.\n     *\n     * @type {string}\n     * @memberof IAppConfig\n     */\n\n    frontendDomain?: string;\n\n    /**\n     * The domain for the backend application.\n     *\n     * @type {string}\n     * @memberof IAppConfig\n     */\n\n    backendDomain: string;\n\n    /**\n     * The port on which the application is running.\n     *\n     * @type {number}\n     * @memberof IAppConfig\n     */\n\n    port: number;\n\n    /**\n     * The API prefix used in the application.\n     *\n     * @type {string}\n     * @memberof IAppConfig\n     */\n\n    apiPrefix: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAwsConfig.html":{"url":"interfaces/IAwsConfig.html","title":"interface - IAwsConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IAwsConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interfaces/aws.interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            AWS_S3_ACCESS_KEY_ID\n                                        \n                                \n                                \n                                        \n                                            AWS_S3_BUCKET_NAME\n                                        \n                                \n                                \n                                        \n                                            AWS_S3_COMPANION_SECRET\n                                        \n                                \n                                \n                                        \n                                            AWS_S3_DEFAULT_REGION\n                                        \n                                \n                                \n                                        \n                                            AWS_S3_ENDPOINT\n                                        \n                                \n                                \n                                        \n                                            AWS_S3_SECRET_ACCESS_KEY\n                                        \n                                \n                                \n                                        \n                                            AWS_S3_SERVER_HOST\n                                        \n                                \n                                \n                                        \n                                            AWS_S3_TEMP_DIRECTORY\n                                        \n                                \n                                \n                                        \n                                            TUS_STORAGE_DRIVER\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        AWS_S3_ACCESS_KEY_ID\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        AWS_S3_ACCESS_KEY_ID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        AWS_S3_BUCKET_NAME\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        AWS_S3_BUCKET_NAME:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        AWS_S3_COMPANION_SECRET\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        AWS_S3_COMPANION_SECRET:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        AWS_S3_DEFAULT_REGION\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        AWS_S3_DEFAULT_REGION:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        AWS_S3_ENDPOINT\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        AWS_S3_ENDPOINT:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        AWS_S3_SECRET_ACCESS_KEY\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        AWS_S3_SECRET_ACCESS_KEY:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        AWS_S3_SERVER_HOST\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        AWS_S3_SERVER_HOST:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        AWS_S3_TEMP_DIRECTORY\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        AWS_S3_TEMP_DIRECTORY:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        TUS_STORAGE_DRIVER\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        TUS_STORAGE_DRIVER:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        'use strict';\n\nexport interface IAwsConfig {\n    AWS_S3_ACCESS_KEY_ID: string;\n    AWS_S3_SECRET_ACCESS_KEY: string;\n    AWS_S3_BUCKET_NAME: string;\n    AWS_S3_DEFAULT_REGION: string;\n    AWS_S3_TEMP_DIRECTORY: string;\n    AWS_S3_ENDPOINT: string;\n\n    AWS_S3_SERVER_HOST: string;\n    AWS_S3_COMPANION_SECRET: string;\n    TUS_STORAGE_DRIVER: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IFileConfig.html":{"url":"interfaces/IFileConfig.html","title":"interface - IFileConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IFileConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interfaces/file.interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            accessKeyId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            awsDefaultS3Bucket\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            awsS3Region\n                                        \n                                \n                                \n                                        \n                                            driver\n                                        \n                                \n                                \n                                        \n                                            maxFileSize\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            secretAccessKey\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accessKeyId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accessKeyId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        awsDefaultS3Bucket\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        awsDefaultS3Bucket:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        awsS3Region\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        awsS3Region:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        driver\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        driver:         FileDriver\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         FileDriver\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxFileSize\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxFileSize:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        secretAccessKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        secretAccessKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        'use strict';\n\nimport { FileDriver } from '@config/type/file-config.type';\nexport interface IFileConfig {\n    driver: FileDriver;\n    accessKeyId?: string;\n    secretAccessKey?: string;\n    awsDefaultS3Bucket?: string;\n    awsS3Region?: string;\n    maxFileSize: number;\n    // encoding: string;\n    // buffer: Buffer;\n    // fieldname: string;\n    // mimetype: string;\n    // originalname: string;\n    // size: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IJWTConfig.html":{"url":"interfaces/IJWTConfig.html","title":"interface - IJWTConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IJWTConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interfaces/jwt.interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            algorithm\n                                        \n                                \n                                \n                                        \n                                            audience\n                                        \n                                \n                                \n                                        \n                                            expirationTime\n                                        \n                                \n                                \n                                        \n                                            expiresInSeconds\n                                        \n                                \n                                \n                                        \n                                            issuer\n                                        \n                                \n                                \n                                        \n                                            secret\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        algorithm\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        algorithm:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        audience\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        audience:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expirationTime\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expirationTime:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expiresInSeconds\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expiresInSeconds:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        issuer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        issuer:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        secret\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        secret:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        'use strict';\n\nexport interface IJWTConfig {\n    secret: string;\n    algorithm: string;\n    expiresInSeconds: number;\n    expirationTime: number;\n    issuer: string;\n    audience: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/INodeEmailerConfig.html":{"url":"interfaces/INodeEmailerConfig.html","title":"interface - INodeEmailerConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  INodeEmailerConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interfaces/node-emailer.interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            NODE_EMAILER_FROM_EMAIL\n                                        \n                                \n                                \n                                        \n                                            NODE_EMAILER_HOST\n                                        \n                                \n                                \n                                        \n                                            NODE_EMAILER_PASSWORD\n                                        \n                                \n                                \n                                        \n                                            NODE_EMAILER_PORT\n                                        \n                                \n                                \n                                        \n                                            NODE_EMAILER_TO_EMAIL\n                                        \n                                \n                                \n                                        \n                                            NODE_EMAILER_USER\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        NODE_EMAILER_FROM_EMAIL\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        NODE_EMAILER_FROM_EMAIL:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        NODE_EMAILER_HOST\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        NODE_EMAILER_HOST:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        NODE_EMAILER_PASSWORD\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        NODE_EMAILER_PASSWORD:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        NODE_EMAILER_PORT\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        NODE_EMAILER_PORT:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        NODE_EMAILER_TO_EMAIL\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        NODE_EMAILER_TO_EMAIL:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        NODE_EMAILER_USER\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        NODE_EMAILER_USER:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        'use strict';\n\nexport interface INodeEmailerConfig {\n    NODE_EMAILER_HOST: string;\n    NODE_EMAILER_PORT: number;\n    NODE_EMAILER_USER: string;\n    NODE_EMAILER_PASSWORD: string;\n    NODE_EMAILER_FROM_EMAIL: string;\n    NODE_EMAILER_TO_EMAIL: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPageMetaDtoParameters.html":{"url":"interfaces/IPageMetaDtoParameters.html","title":"interface - IPageMetaDtoParameters","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPageMetaDtoParameters\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/dto/pagination.meta.dto.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            maxPages\n                                        \n                                \n                                \n                                        \n                                            paginationQueryDto\n                                        \n                                \n                                \n                                        \n                                            totalItems\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        maxPages\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxPages:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        paginationQueryDto\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        paginationQueryDto:         PaginationQueryDto\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PaginationQueryDto\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        totalItems\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        totalItems:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\n\nimport { PaginationQueryDto } from '@utils/dto/pagination.dto';\n\nexport interface IPageMetaDtoParameters {\n    paginationQueryDto: PaginationQueryDto;\n    totalItems: number;\n    maxPages?: number;\n}\n\n/**\n * PaginationMetaDto provides metadata for paginated responses.\n * This class helps in constructing the pagination information that can be used\n * to navigate through large sets of data.\n *\n * @example\n * {\n *   totalItems: 77,\n *   currentPage: 7,\n *   pageSize: 10,\n *   totalPages: 8,\n *   startPage: 1,\n *   endPage: 7,\n *   startIndex: 60,\n *   endIndex: 76,\n *   pages: [1, 2, 3, 4, 5, 6, 7]\n * }\n */\n\nexport class PaginationMetaDto {\n    /**\n     * The total number of items available.\n     *\n     * @example 77\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 77, //  'Total records'\n    })\n    readonly totalItems: number;\n\n    /**\n     * The current page number.\n     *\n     * @example 7\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 7, //  'Current page number',\n    })\n    readonly currentPage: number;\n\n    /**\n     * The number of items per page (page size).\n     *\n     * @example 10\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 10, //  'limit / page record number',\n    })\n    readonly pageSize: number;\n\n    /**\n     * The total number of pages based on total items and page size.\n     *\n     * @example 8\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 8, //  'Total pages',\n    })\n    readonly totalPages: number;\n\n    /**\n     * The start page in the pagination controls.\n     *\n     * @example 1\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 1, //  'Start page',\n    })\n    readonly startPage: number;\n\n    /**\n     * The end page in the pagination controls.\n     *\n     * @example 7\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 7, //  'End page',\n    })\n    readonly endPage: number;\n\n    /**\n     * The index of the first item on the current page.\n     *\n     * @example 60\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 0, //  'Record start index',\n    })\n    readonly startIndex: number;\n\n    /**\n     * The index of the last item on the current page.\n     *\n     * @example 76\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 76, //  'Record end index',\n    })\n    readonly endIndex: number;\n\n    /**\n     * An array of page numbers to display in pagination controls.\n     *\n     * @example [1, 2, 3, 4, 5, 6, 7]\n     */\n\n    @ApiPropertyOptional({\n        type: Array,\n        example: [1, 2, 3, 4, 5, 6, 7], //  'Array of page number',\n    })\n    readonly pages: any;\n\n    /**\n     * Creates an instance of PaginationMetaDto.\n     *\n     * @param {IPageMetaDtoParameters} params - Parameters required for creating pagination metadata.\n     */\n\n    constructor({ paginationQueryDto, totalItems, maxPages = 10 }: IPageMetaDtoParameters) {\n        const pageSize = paginationQueryDto.limit || 10;\n        let currentPage = paginationQueryDto.page || 1;\n\n        // calculate total pages\n\n        const totalPages = Math.ceil(totalItems / pageSize);\n\n        // ensure current page isn't out of range\n        if (currentPage  totalPages) {\n            currentPage = totalPages;\n        }\n\n        let startPage: number, endPage: number;\n\n        if (totalPages = totalPages) {\n                // current page near the end\n                startPage = totalPages - maxPages + 1;\n                endPage = totalPages;\n            } else {\n                // current page somewhere in the middle\n                startPage = currentPage - maxPagesBeforeCurrentPage;\n                endPage = currentPage + maxPagesAfterCurrentPage;\n            }\n        }\n\n        // calculate start and end item indexes\n        const startIndex = (currentPage - 1) * pageSize;\n        const endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\n\n        // create an array of pages to ng-repeat in the pager control\n        const pages = Array.from(Array(endPage + 1 - startPage).keys()).map((i) => startPage + i);\n\n        this.totalItems = totalItems;\n        this.currentPage = currentPage;\n        this.pageSize = pageSize;\n        this.totalPages = totalPages;\n        this.startPage = startPage;\n        this.endPage = endPage;\n        this.startIndex = startIndex > 0 ? startIndex : 0;\n        this.endIndex = endIndex > 0 ? endIndex : 0;\n        this.pages = pages;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPaginationFieldConfig.html":{"url":"interfaces/IPaginationFieldConfig.html","title":"interface - IPaginationFieldConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPaginationFieldConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/types/pagination-options.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for configuring pagination fields in a query.\nThis interface provides a contract for configuring how fields should be handled when constructing\npagination queries, including specifying the table to join, generating an alias, and selecting fields.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            alias\n                                        \n                                \n                                \n                                        \n                                            joinTable\n                                        \n                                \n                                \n                                        \n                                            selectFields\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        alias\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        alias:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A function that returns an alias for the table.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        joinTable\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        joinTable:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The table to join for pagination queries.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectFields\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectFields:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A function that returns an array of field names to select based on the provided alias.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface IPaginationFieldConfig {\n    /**\n     * The table to join for pagination queries.\n     *\n     * @type {any}\n     */\n\n    joinTable: any;\n\n    /**\n     * A function that returns an alias for the table.\n     *\n     * @returns {string} - The alias for the table.\n     */\n\n    alias: () => string;\n\n    /**\n     * A function that returns an array of field names to select based on the provided alias.\n     *\n     * @param {string} alias - The alias for the table.\n     * @returns {string[]} - An array of field names to select.\n     */\n\n    selectFields: (alias: string) => string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPostgreSQLConfig.html":{"url":"interfaces/IPostgreSQLConfig.html","title":"interface - IPostgreSQLConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPostgreSQLConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interfaces/postgres.interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            POSTGRES_CONNECTION_LIMIT\n                                        \n                                \n                                \n                                        \n                                            POSTGRES_HOST\n                                        \n                                \n                                \n                                        \n                                            POSTGRES_NAME\n                                        \n                                \n                                \n                                        \n                                            POSTGRES_PASSWORD\n                                        \n                                \n                                \n                                        \n                                            POSTGRES_POOL_TIMEOUT\n                                        \n                                \n                                \n                                        \n                                            POSTGRES_PORT\n                                        \n                                \n                                \n                                        \n                                            POSTGRES_SCHEMA\n                                        \n                                \n                                \n                                        \n                                            POSTGRES_USER\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        POSTGRES_CONNECTION_LIMIT\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        POSTGRES_CONNECTION_LIMIT:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        POSTGRES_HOST\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        POSTGRES_HOST:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        POSTGRES_NAME\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        POSTGRES_NAME:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        POSTGRES_PASSWORD\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        POSTGRES_PASSWORD:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        POSTGRES_POOL_TIMEOUT\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        POSTGRES_POOL_TIMEOUT:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        POSTGRES_PORT\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        POSTGRES_PORT:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        POSTGRES_SCHEMA\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        POSTGRES_SCHEMA:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        POSTGRES_USER\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        POSTGRES_USER:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        'use strict';\n\nexport interface IPostgreSQLConfig {\n    POSTGRES_HOST: string;\n    POSTGRES_PORT: string;\n    POSTGRES_USER: string;\n    POSTGRES_PASSWORD: string;\n    POSTGRES_NAME: string;\n    POSTGRES_CONNECTION_LIMIT: string;\n    POSTGRES_POOL_TIMEOUT: string;\n    POSTGRES_SCHEMA: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISMSConfig.html":{"url":"interfaces/ISMSConfig.html","title":"interface - ISMSConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ISMSConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interfaces/sms.interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            API_KEY\n                                        \n                                \n                                \n                                        \n                                            SENDER_ID\n                                        \n                                \n                                \n                                        \n                                            SMS_PROVIDER_NAME\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        API_KEY\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        API_KEY:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        SENDER_ID\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        SENDER_ID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        SMS_PROVIDER_NAME\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        SMS_PROVIDER_NAME:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        'use strict';\n\nexport interface ISMSConfig {\n    SMS_PROVIDER_NAME: string;\n    API_KEY: string;\n    SENDER_ID: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISendGridConfig.html":{"url":"interfaces/ISendGridConfig.html","title":"interface - ISendGridConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ISendGridConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interfaces/sendgrid.interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            FROM_EMAIL\n                                        \n                                \n                                \n                                        \n                                            SENDGRID_API_KEY\n                                        \n                                \n                                \n                                        \n                                            TO_EMAIL\n                                        \n                                \n                                \n                                        \n                                            WELCOME_EMAIL\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        FROM_EMAIL\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        FROM_EMAIL:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        SENDGRID_API_KEY\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        SENDGRID_API_KEY:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        TO_EMAIL\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        TO_EMAIL:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        WELCOME_EMAIL\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        WELCOME_EMAIL:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        'use strict';\n\nexport interface ISendGridConfig {\n    SENDGRID_API_KEY: string;\n    FROM_EMAIL: string;\n    TO_EMAIL: string;\n    WELCOME_EMAIL: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUploadFileConfig.html":{"url":"interfaces/IUploadFileConfig.html","title":"interface - IUploadFileConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUploadFileConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interfaces/upload-file.interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            FILE_UPLOAD_DESTINATION\n                                        \n                                \n                                \n                                        \n                                            MAX_UPLOAD_FILE_SIZE\n                                        \n                                \n                                \n                                        \n                                            MULTIPLE_FILE_PATH\n                                        \n                                \n                                \n                                        \n                                            PROFILE_PIC_FILE_PATH\n                                        \n                                \n                                \n                                        \n                                            TEMP_FILE_UPLOAD_URL\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        FILE_UPLOAD_DESTINATION\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        FILE_UPLOAD_DESTINATION:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        MAX_UPLOAD_FILE_SIZE\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        MAX_UPLOAD_FILE_SIZE:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        MULTIPLE_FILE_PATH\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        MULTIPLE_FILE_PATH:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        PROFILE_PIC_FILE_PATH\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        PROFILE_PIC_FILE_PATH:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        TEMP_FILE_UPLOAD_URL\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        TEMP_FILE_UPLOAD_URL:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        'use strict';\n\nexport interface IUploadFileConfig {\n    TEMP_FILE_UPLOAD_URL: string;\n    FILE_UPLOAD_DESTINATION: string;\n    MAX_UPLOAD_FILE_SIZE: number;\n    PROFILE_PIC_FILE_PATH: string;\n    MULTIPLE_FILE_PATH: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationMetaDto.html":{"url":"classes/PaginationMetaDto.html","title":"class - PaginationMetaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationMetaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/dto/pagination.meta.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                PaginationMetaDto provides metadata for paginated responses.\nThis class helps in constructing the pagination information that can be used\nto navigate through large sets of data.\nExample :{\n  totalItems: 77,\n  currentPage: 7,\n  pageSize: 10,\n  totalPages: 8,\n  startPage: 1,\n  endPage: 7,\n  startIndex: 60,\n  endIndex: 76,\n  pages: [1, 2, 3, 4, 5, 6, 7]\n}\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Readonly\n                                currentPage\n                            \n                            \n                                    \n                                    Readonly\n                                endIndex\n                            \n                            \n                                    \n                                    Readonly\n                                endPage\n                            \n                            \n                                    \n                                    Readonly\n                                pages\n                            \n                            \n                                    \n                                    Readonly\n                                pageSize\n                            \n                            \n                                    \n                                    Readonly\n                                startIndex\n                            \n                            \n                                    \n                                    Readonly\n                                startPage\n                            \n                            \n                                    \n                                    Readonly\n                                totalItems\n                            \n                            \n                                    \n                                    Readonly\n                                totalPages\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: IPageMetaDtoParameters)\n                    \n                \n                        \n                            \n                                Defined in src/utils/dto/pagination.meta.dto.ts:137\n                            \n                        \n\n                \n                    \n                            Creates an instance of PaginationMetaDto.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                        IPageMetaDtoParameters\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        currentPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: Number, example: 7})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.meta.dto.ts:53\n                        \n                    \n\n            \n                \n                    The current page number.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        endIndex\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: Number, example: 76})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.meta.dto.ts:125\n                        \n                    \n\n            \n                \n                    The index of the last item on the current page.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        endPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: Number, example: 7})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.meta.dto.ts:101\n                        \n                    \n\n            \n                \n                    The end page in the pagination controls.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        pages\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: Array, example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.meta.dto.ts:137\n                        \n                    \n\n            \n                \n                    An array of page numbers to display in pagination controls.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        pageSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: Number, example: 10})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.meta.dto.ts:65\n                        \n                    \n\n            \n                \n                    The number of items per page (page size).\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        startIndex\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: Number, example: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.meta.dto.ts:113\n                        \n                    \n\n            \n                \n                    The index of the first item on the current page.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        startPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: Number, example: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.meta.dto.ts:89\n                        \n                    \n\n            \n                \n                    The start page in the pagination controls.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        totalItems\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: Number, example: 77})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.meta.dto.ts:41\n                        \n                    \n\n            \n                \n                    The total number of items available.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        totalPages\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: Number, example: 8})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.meta.dto.ts:77\n                        \n                    \n\n            \n                \n                    The total number of pages based on total items and page size.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\n\nimport { PaginationQueryDto } from '@utils/dto/pagination.dto';\n\nexport interface IPageMetaDtoParameters {\n    paginationQueryDto: PaginationQueryDto;\n    totalItems: number;\n    maxPages?: number;\n}\n\n/**\n * PaginationMetaDto provides metadata for paginated responses.\n * This class helps in constructing the pagination information that can be used\n * to navigate through large sets of data.\n *\n * @example\n * {\n *   totalItems: 77,\n *   currentPage: 7,\n *   pageSize: 10,\n *   totalPages: 8,\n *   startPage: 1,\n *   endPage: 7,\n *   startIndex: 60,\n *   endIndex: 76,\n *   pages: [1, 2, 3, 4, 5, 6, 7]\n * }\n */\n\nexport class PaginationMetaDto {\n    /**\n     * The total number of items available.\n     *\n     * @example 77\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 77, //  'Total records'\n    })\n    readonly totalItems: number;\n\n    /**\n     * The current page number.\n     *\n     * @example 7\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 7, //  'Current page number',\n    })\n    readonly currentPage: number;\n\n    /**\n     * The number of items per page (page size).\n     *\n     * @example 10\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 10, //  'limit / page record number',\n    })\n    readonly pageSize: number;\n\n    /**\n     * The total number of pages based on total items and page size.\n     *\n     * @example 8\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 8, //  'Total pages',\n    })\n    readonly totalPages: number;\n\n    /**\n     * The start page in the pagination controls.\n     *\n     * @example 1\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 1, //  'Start page',\n    })\n    readonly startPage: number;\n\n    /**\n     * The end page in the pagination controls.\n     *\n     * @example 7\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 7, //  'End page',\n    })\n    readonly endPage: number;\n\n    /**\n     * The index of the first item on the current page.\n     *\n     * @example 60\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 0, //  'Record start index',\n    })\n    readonly startIndex: number;\n\n    /**\n     * The index of the last item on the current page.\n     *\n     * @example 76\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 76, //  'Record end index',\n    })\n    readonly endIndex: number;\n\n    /**\n     * An array of page numbers to display in pagination controls.\n     *\n     * @example [1, 2, 3, 4, 5, 6, 7]\n     */\n\n    @ApiPropertyOptional({\n        type: Array,\n        example: [1, 2, 3, 4, 5, 6, 7], //  'Array of page number',\n    })\n    readonly pages: any;\n\n    /**\n     * Creates an instance of PaginationMetaDto.\n     *\n     * @param {IPageMetaDtoParameters} params - Parameters required for creating pagination metadata.\n     */\n\n    constructor({ paginationQueryDto, totalItems, maxPages = 10 }: IPageMetaDtoParameters) {\n        const pageSize = paginationQueryDto.limit || 10;\n        let currentPage = paginationQueryDto.page || 1;\n\n        // calculate total pages\n\n        const totalPages = Math.ceil(totalItems / pageSize);\n\n        // ensure current page isn't out of range\n        if (currentPage  totalPages) {\n            currentPage = totalPages;\n        }\n\n        let startPage: number, endPage: number;\n\n        if (totalPages = totalPages) {\n                // current page near the end\n                startPage = totalPages - maxPages + 1;\n                endPage = totalPages;\n            } else {\n                // current page somewhere in the middle\n                startPage = currentPage - maxPagesBeforeCurrentPage;\n                endPage = currentPage + maxPagesAfterCurrentPage;\n            }\n        }\n\n        // calculate start and end item indexes\n        const startIndex = (currentPage - 1) * pageSize;\n        const endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\n\n        // create an array of pages to ng-repeat in the pager control\n        const pages = Array.from(Array(endPage + 1 - startPage).keys()).map((i) => startPage + i);\n\n        this.totalItems = totalItems;\n        this.currentPage = currentPage;\n        this.pageSize = pageSize;\n        this.totalPages = totalPages;\n        this.startPage = startPage;\n        this.endPage = endPage;\n        this.startIndex = startIndex > 0 ? startIndex : 0;\n        this.endIndex = endIndex > 0 ? endIndex : 0;\n        this.pages = pages;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationQueryDto.html":{"url":"classes/PaginationQueryDto.html","title":"class - PaginationQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/dto/pagination.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO class for pagination query parameters.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                filters\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                pagination\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                sort\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        filters\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FilterQueryDto[] | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({name: 'filters', required: false, type: String, description: 'Array of filter objects as a JSON string', example: '[{\"field\":\"name\",\"operator\":\"=\",\"value\":\"IN\"}]'})@IsOptional()@Transform( => )@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.dto.ts:119\n                        \n                    \n\n            \n                \n                    Filters to apply to the query.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Record limit', minimum: 1, maximum: 500, default: 10})@IsOptional()@IsNumberStringOrNumber()@ToNumber()@Min(10)@Max(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.dto.ts:97\n                        \n                    \n\n            \n                \n                    The number of records per page.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Page number', minimum: 1, default: 1})@IsOptional()@IsNumberStringOrNumber()@ToNumber()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.dto.ts:77\n                        \n                    \n\n            \n                \n                    The page number for pagination.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        pagination\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PaginationType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Pagination must all (Page and has_next_page), infinity (only has_next_page), paginate(only page)', enum: PaginationType, default: undefined})@IsEnum(PaginationType)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.dto.ts:59\n                        \n                    \n\n            \n                \n                    The type of pagination to apply.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        sort\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SortByDto[] | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({name: 'sort', required: false, type: String, description: 'Array of sort objects as a JSON string', example: '[{\"field\":\"name\",\"direction\":\"ASC\"}]'})@IsOptional()@Transform( => )@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.dto.ts:141\n                        \n                    \n\n            \n                \n                    Sorting options for the query.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nimport { Type, Transform, plainToInstance } from 'class-transformer';\nimport {\n    IsOptional,\n    Min,\n    Max,\n    IsNotEmpty,\n    IsString,\n    ValidateNested,\n    Matches,\n    IsEnum,\n    // Validate,\n    // IsIn,\n} from 'class-validator';\n\n// import { IsValidField } from '@core/validators/field.validator'; // Import the custom validator\nimport { IsNumberStringOrNumber } from '@decorators/number.string.validator';\nimport { ToNumber } from '@decorators/transforms.decorator';\n// import { IsNumberStringOrNumber } from '@decorators/number.string.validator';\n// import { ToNumber } from '@decorators/transforms.decorator';\n// import { Country } from '@modules/countries/dto/country';\n\n/**\n * Enum representing different pagination types.\n *\n * @export\n * @enum {string}\n */\n\nexport enum PaginationType {\n    NONE = 'no',\n    INFINITY = 'infinity',\n    PAGINATE = 'paginate',\n    ALL = 'all',\n}\n\n/**\n * DTO class for pagination query parameters.\n *\n * @export\n */\nexport class PaginationQueryDto {\n    /**\n     * The type of pagination to apply.\n     *\n     * @type {PaginationType}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        description:\n            'Pagination must all (Page and has_next_page), infinity (only has_next_page), paginate(only page)',\n        enum: PaginationType,\n        default: PaginationType.ALL,\n    })\n    @IsEnum(PaginationType)\n    @IsOptional()\n    readonly pagination: PaginationType;\n\n    /**\n     * The page number for pagination.\n     *\n     * @type {number}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        description: 'Page number',\n        minimum: 1,\n        default: 1,\n    })\n    @IsOptional()\n    @IsNumberStringOrNumber()\n    @ToNumber()\n    @Min(1)\n    readonly page?: number;\n\n    /**\n     * The number of records per page.\n     *\n     * @type {number}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        description: 'Record limit',\n        minimum: 1,\n        maximum: 500,\n        default: 10,\n    })\n    @IsOptional()\n    @IsNumberStringOrNumber()\n    @ToNumber()\n    @Min(10)\n    @Max(500)\n    readonly limit?: number = 10;\n\n    /**\n     * Filters to apply to the query.\n     *\n     * @type {FilterQueryDto[] | null}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        name: 'filters',\n        required: false,\n        type: String,\n        description: 'Array of filter objects as a JSON string',\n        example: '[{\"field\":\"name\",\"operator\":\"=\",\"value\":\"IN\"}]',\n    })\n    @IsOptional()\n    @Transform(({ value }) => {\n        return value ? plainToInstance(FilterQueryDto, JSON.parse(value)) : undefined;\n    })\n    @ValidateNested({ each: true })\n    @Type(() => FilterQueryDto)\n    filters?: FilterQueryDto[] | null;\n\n    /**\n     * Sorting options for the query.\n     *\n     * @type {SortByDto[] | null}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        name: 'sort',\n        required: false,\n        type: String,\n        description: 'Array of sort objects as a JSON string',\n        example: '[{\"field\":\"name\",\"direction\":\"ASC\"}]',\n    })\n    @IsOptional()\n    @Transform(({ value }) => {\n        return value ? plainToInstance(SortByDto, JSON.parse(value)) : undefined;\n    })\n    @ValidateNested({ each: true })\n    @Type(() => SortByDto)\n    sort?: SortByDto[] | null;\n}\n\n/**\n * DTO class for filter query parameters.\n *\n * @export\n */\nexport class FilterQueryDto {\n    /**\n     * The field to filter on.\n     *\n     * @type {string}\n     * @memberof FilterQueryDto\n     */\n\n    @ApiProperty({ example: 'iso', required: true })\n    @IsNotEmpty()\n    @IsString()\n    field: string;\n\n    /**\n     * The operator to use for filtering.\n     *\n     * @type {string}\n     * @memberof FilterQueryDto\n     */\n\n    @ApiProperty({ example: '=' })\n    @IsNotEmpty()\n    @IsString()\n    operator: string;\n\n    /**\n     * The value to filter by.\n     *\n     * @type {string}\n     * @memberof FilterQueryDto\n     */\n\n    @ApiProperty({ example: 'IN' })\n    @IsNotEmpty()\n    @IsString()\n    value: string;\n}\n\n/**\n * DTO class for sorting options.\n *\n * @export\n */\nexport class SortByDto {\n    // @ApiProperty({ example: 'name' })\n    // @IsString()\n    // @Validate(IsValidField, [Country], {\n    //     message: 'Field must be a valid key of Country',\n    // })\n    // field: keyof Country;\n    /**\n     * The field to sort by.\n     *\n     * @type {string}\n     * @memberof SortByDto\n     */\n\n    @ApiProperty()\n    @IsString()\n    // @IsIn(abc(x : keyof TExposedAccountInfo), {\n    //     message: 'Field must be one of \"name\", \"age\", or \"status\"',\n    // })\n    // @Validate(IsValidField, [{ entity: () => T }], {\n    //     message: 'Field must be a valid key of the specified entity',\n    // })\n    field: string;\n\n    /**\n     * The direction of the sort (ascending or descending).\n     *\n     * @type {string}\n     * @memberof SortByDto\n     */\n\n    @ApiProperty({ example: 'ASC' })\n    @IsString()\n    @Matches(/^(ASC|DESC|asc|desc)$/, {\n        message: 'operator must be one of ASC, DESC, asc, or desc',\n    })\n    direction: string;\n}\n\n// export class PaginatedResultDto {\n//     @ApiProperty()\n//     data: T[];\n\n//     @ApiProperty()\n//     total: number;\n\n//     @ApiProperty()\n//     page: number;\n\n//     @ApiProperty()\n//     limit: number;\n// }\n\n//DX\n// import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\n// import { Type, Transform, plainToInstance } from 'class-transformer';\n// import {\n//     IsOptional,\n//     Min,\n//     Max,\n//     IsNotEmpty,\n//     IsString,\n//     IsArray,\n//     ValidateNested,\n//     Validate,\n//     Matches,\n// } from 'class-validator';\n\n// import { IsNumberStringOrNumber } from '@decorators/number.string.validator';\n// import { ToNumber } from '@decorators/transforms.decorator';\n// import { SortBy } from '@validators/filter.validator';\n\n// export class FilterQueryDto {\n//     @ApiProperty({ example: 'name', required: true })\n//     @IsNotEmpty()\n//     @IsString()\n//     field: string;\n\n//     @ApiProperty({ example: 'LIKE' })\n//     @IsNotEmpty()\n//     @IsString()\n//     operator: string;\n\n//     @ApiProperty({ example: '%John%' })\n//     @IsNotEmpty()\n//     @IsString()\n//     value: string;\n// }\n\n// export class SortByDto {\n//     @ApiProperty({ example: 'name' })\n//     @IsString()\n//     field: string;\n\n//     @ApiProperty({ example: 'ASC' })\n//     @IsString()\n//     @Matches(/^(ASC|DESC|asc|desc)$/, {\n//         message: 'operator must be one of ASC, DESC, asc, or desc',\n//     })\n//     direction: string;\n// }\n\n// export class PaginationQueryDto {\n//     @ApiPropertyOptional({\n//         description: 'Page number',\n//         minimum: 1,\n//         default: 1,\n//     })\n//     @IsOptional()\n//     @IsNumberStringOrNumber()\n//     @ToNumber()\n//     @Min(1)\n//     // @Transform(({ value }) => {\n//     //     const strippedValue = String(value).replace(/['\"]+/g, '');\n//     //     const numberValue = Number(strippedValue);\n//     //     return isNaN(numberValue) ? 'undefined' : numberValue;\n//     // })\n//     readonly page?: number;\n\n//     @ApiPropertyOptional({\n//         description: 'Record limit',\n//         minimum: 1,\n//         maximum: 500,\n//         default: 10,\n//     })\n//     @IsOptional()\n//     @IsNumberStringOrNumber()\n//     @ToNumber()\n//     @Min(10)\n//     @Max(500)\n//     readonly limit?: number = 10;\n\n//     // @IsOptional()\n//     // @IsArray()\n//     // @ValidateNested({ each: true })\n//     // @Type(() => FilterQueryDto)\n//     // filters?: FilterQueryDto[];\n//     // // filters?: any;\n//     @ApiPropertyOptional({\n//         name: 'filters',\n//         required: false,\n//         type: String,\n//         description: 'Array of filter objects as a JSON string',\n//         example:\n//             '[{\"field\":\"name\",\"operator\":\"LIKE\",\"value\":\"John\"},{\"field\":\"age\",\"operator\":\">\",\"value\":\"30\"}]',\n//     })\n//     @IsOptional()\n//     @Transform(({ value }) => {\n//         return value ? plainToInstance(FilterQueryDto, JSON.parse(value)) : undefined;\n//     })\n//     @ValidateNested({ each: true })\n//     @Type(() => FilterQueryDto)\n//     filters?: FilterQueryDto[] | null;\n\n//     // @ApiPropertyOptional({\n//     //     description: ' Name or City:  ASC or DESC',\n//     //     example: 'name ASC',\n//     // })\n//     // @IsOptional()\n//     // @IsString()\n//     // @Validate(SortBy)\n//     // readonly sort?: string;\n//     // @ApiPropertyOptional({ type: [SortByDto], isArray: true })\n//     // @IsOptional()\n//     // @Transform(({ value }) => {\n//     //     return value ? plainToInstance(SortUserDto, JSON.parse(value)) : undefined;\n//     // })\n//     // @ValidateNested({ each: true })\n//     // @Type(() => SortUserDto)\n//     // sort?: SortUserDto[] | null;\n\n//     @ApiPropertyOptional({\n//         name: 'sort',\n//         required: false,\n//         type: String,\n//         description: 'Array of sort objects as a JSON string',\n//         example: '[{\"field\":\"name\",\"direction\":\"ASC\"},{\"field\":\"age\",\"direction\":\"DESC\"}]',\n//     })\n//     @IsOptional()\n//     @Transform(({ value }) => {\n//         return value ? plainToInstance(SortByDto, JSON.parse(value)) : undefined;\n//     })\n//     @ValidateNested({ each: true })\n//     @Type(() => SortByDto)\n//     sort?: SortByDto[] | null;\n// }\n\n// export class PaginatedResultDto {\n//     @ApiProperty()\n//     data: T[];\n\n//     @ApiProperty()\n//     total: number;\n\n//     @ApiProperty()\n//     page: number;\n\n//     @ApiProperty()\n//     limit: number;\n// }\n\n// // import { ApiProperty, ApiExtraModels } from '@nestjs/swagger';\n\n// // import { Type } from 'class-transformer';\n// // import { IsOptional, IsString, IsArray, ValidateNested, IsNumber } from 'class-validator';\n\n// // // export class FilterQueryDto {\n// // //     @ApiProperty({ example: 'name' })\n// // //     field: string;\n\n// // //     @ApiProperty({ example: 'LIKE' })\n// // //     operator: string;\n\n// // //     @ApiProperty({ example: '%John%' })\n// // //     value: string;\n// // // }\n// // export class FilterQueryDto {\n// //     @ApiProperty({ example: 'country_name' })\n// //     @IsString()\n// //     field: string;\n\n// //     @ApiProperty({ example: 'LIKE' })\n// //     @IsString()\n// //     operator: string;\n\n// //     @ApiProperty({ example: '%United%' })\n// //     @IsString()\n// //     value: string;\n// // }\n// // @ApiExtraModels(FilterQueryDto)\n// // export class PaginationQueryDto {\n// //     @ApiProperty({ example: 1, required: false })\n// //     @IsOptional()\n// //     @IsNumber()\n// //     @Type(() => Number)\n// //     page?: number = 1;\n\n// //     @ApiProperty({ example: 10, required: false })\n// //     @IsOptional()\n// //     @IsNumber()\n// //     @Type(() => Number)\n// //     limit?: number = 10;\n\n// //     // @ApiProperty({\n// //     //     type: [FilterQueryDto],\n// //     //     required: false,\n// //     //     isArray: true,\n// //     // })\n// //     // @Type(() => FilterQueryDto)\n// //     // filters?: FilterQueryDto[];\n// //     @ApiProperty({\n// //         type: FilterQueryDto,\n// //         required: false,\n// //         isArray: true,\n// //     })\n// //     // @IsOptional()\n// //     @IsArray()\n// //     @ValidateNested({ each: true })\n// //     @Type(() => FilterQueryDto)\n// //     filters?: FilterQueryDto[];\n\n// //     // @ApiProperty({\n// //     //     type: [Object],\n// //     //     // items: {\n// //     //     //     type: 'object',\n// //     //     //     items: {\n// //     //     //         type: 'object',\n// //     //     //     },\n// //     //     // },\n// //     // })\n// //     // coords: FilterQueryDto[];\n\n// //     // @ApiProperty({ type: String, required: false })\n// //     // @IsOptional()\n// //     // @IsArray()\n// //     // @ValidateNested({ each: true })\n// //     // @Type(() => FilterQueryDto)\n// //     // filters?: FilterQueryDto[];\n\n// //     @ApiProperty({ example: 'name ASC1', required: false })\n// //     sort?: string;\n// // }\n\n// // // export class PaginationQueryDto {\n// // //     @ApiProperty({ example: 1, required: false })\n// // //     page?: number = 1;\n\n// // //     @ApiProperty({ example: 10, required: false })\n// // //     limit?: number = 10;\n\n// // //     // @ApiProperty({ type: [FilterQueryDto], required: false, isArray: true })\n// // //     // filters?: FilterQueryDto[];\n\n// // //     // @ApiProperty({ type: String, required: false, isArray: true })\n// // //     // filters?: FilterQueryDto[];\n\n// // //     // @ApiProperty({ type: [FilterQueryDto], required: false, isArray: true })\n// // //     // @Type(() => FilterQueryDto)\n// // //     // filters?: FilterQueryDto[];\n\n// // //     @ApiProperty({ type: [FilterQueryDto], required: false })\n// // //     @IsOptional()\n// // //     @IsArray()\n// // //     @ValidateNested({ each: true })\n// // //     @Type(() => FilterQueryDto)\n// // //     filters?: FilterQueryDto[];\n\n// // //     @ApiProperty({ example: 'name ASC1', required: false })\n// // //     sort?: string;\n// // // }\n\n// // export class PaginatedResultDto {\n// //     @ApiProperty()\n// //     data: T[];\n\n// //     @ApiProperty()\n// //     total: number;\n\n// //     @ApiProperty()\n// //     page: number;\n\n// //     @ApiProperty()\n// //     limit: number;\n// // }\n\n// // export class abc {\n// //     @ApiProperty()\n// //     page: number;\n\n// //     @ApiProperty()\n// //     limit: number;\n// // }\n\n// // import { applyDecorators } from '@nestjs/common';\n// // import { ApiProperty, ApiExtraModels, ApiQuery, getSchemaPath } from '@nestjs/swagger';\n\n// // /**\n// //  * Combines Swagger Decorators to create a description for `filters[name]=something`\n// //  *  - has support for swagger\n// //  *  - automatic transformation with nestjs\n// //  */\n// // // // eslint-disable-next-line @typescript-eslint/ban-types,@typescript-eslint/explicit-module-boundary-types\n// // // export function ApiFilterQuery(fieldName: string, filterDto: Function) {\n// // //     return applyDecorators(\n// // //         ApiExtraModels(filterDto),\n// // //         ApiQuery({\n// // //             required: false,\n// // //             name: fieldName,\n// // //             style: 'deepObject',\n// // //             explode: true,\n// // //             type: 'object',\n// // //             schema: {\n// // //                 $ref: getSchemaPath(filterDto),\n// // //             },\n// // //         })\n// // //     );\n// // // }\n// // // eslint-disable-next-line @typescript-eslint/ban-types,@typescript-eslint/explicit-module-boundary-types\n// // export function ApiFilterQuery(fieldName: string, filterDto: Function, index: number) {\n// //     return applyDecorators(\n// //         ApiExtraModels(filterDto),\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}]`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //             schema: {\n// //                 $ref: getSchemaPath(filterDto),\n// //             },\n// //         })\n// //     );\n// // }\n\n// // export function ApiFilterQuery(fieldName: string, index: number) {\n// //     return applyDecorators(\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}].field`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //         }),\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}].operator`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //         }),\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}].value`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //         })\n// //     );\n// // }\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationResponseDto.html":{"url":"classes/PaginationResponseDto.html","title":"class - PaginationResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/dto/pagination-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO class for paginated responses.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                    Optional\n                                has_next_page\n                            \n                            \n                                    Optional\n                                meta\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T[]\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination-response.dto.ts:21\n                        \n                    \n\n            \n                \n                    The array of paginated data.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        has_next_page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination-response.dto.ts:39\n                        \n                    \n\n            \n                \n                    Indicates if there is a next page available.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        meta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PaginationMetaDto\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination-response.dto.ts:30\n                        \n                    \n\n            \n                \n                    Metadata about the pagination.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from '@nestjs/common';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nimport { PaginationMetaDto } from '@utils/dto/pagination.meta.dto';\n\n/**\n * DTO class for paginated responses.\n *\n * @export\n * @template T - Type of the data contained in the response.\n */\n\nexport class PaginationResponseDto {\n    /**\n     * The array of paginated data.\n     *\n     * @type {T[]}\n     * @memberof PaginationResponseDto\n     */\n\n    data: T[];\n\n    /**\n     * Metadata about the pagination.\n     *\n     * @type {PaginationMetaDto}\n     * @memberof PaginationResponseDto\n     */\n\n    meta?: PaginationMetaDto;\n\n    /**\n     * Indicates if there is a next page available.\n     *\n     * @type {boolean}\n     * @memberof PaginationResponseDto\n     */\n\n    has_next_page?: boolean;\n}\n\n/**\n * Creates a pagination response DTO class with specified data type.\n *\n * @export\n * @template T - Type of the data contained in the response.\n * @param {Type} classReference - The class reference for the data type.\n * @returns {Type} The class type of the pagination response DTO.\n */\n\nexport function PaginationResponse(classReference: Type) {\n    abstract class Pagination {\n        /**\n         * The array of paginated data.\n         *\n         * @type {T[]}\n         * @memberof Pagination\n         */\n\n        @ApiProperty({ type: [classReference] })\n        readonly data!: T[];\n\n        /**\n         * Metadata about the pagination.\n         *\n         * @type {PaginationMetaDto}\n         * @memberof Pagination\n         */\n\n        @ApiPropertyOptional({\n            type: PaginationMetaDto,\n            example: {\n                totalItems: 77,\n                currentPage: 1,\n                pageSize: 10,\n                totalPages: 8,\n                startPage: 1,\n                endPage: 8,\n                startIndex: 0,\n                endIndex: 76,\n                pages: [1, 2, 3, 4, 5, 6, 7],\n            },\n            description:\n                'When you pass `all` or `pagination` in the pagination query field, you will receive the meta field in the response.',\n        })\n        meta?: PaginationMetaDto;\n\n        /**\n         * Indicates if there is a next page available.\n         *\n         * @type {boolean}\n         * @memberof Pagination\n         */\n\n        @ApiPropertyOptional({\n            type: Boolean,\n            example: true,\n            description:\n                'When you pass `all` or `infinity` in the pagination query field, you will receive the has_next_page field in the response.',\n        })\n        readonly has_next_page?: boolean;\n    }\n\n    Object.defineProperty(Pagination, 'name', {\n        writable: false,\n        value: `Pagination${classReference.name}ResponseDto`,\n    });\n\n    return Pagination;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaginationService.html":{"url":"injectables/PaginationService.html","title":"injectable - PaginationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaginationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/helper/services/pagination.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The PaginationService provides functionality to handle pagination for database queries. It utilizes Prisma's query capabilities\nto perform paginated data retrieval based on the provided query parameters.\n\nThe paginate method constructs SQL queries to fetch paginated data and its corresponding metadata.\nThe method supports different pagination strategies such as 'all' and 'infinity'.\n\nExample :```typescript\nconst paginationQuery = new PaginationQueryDto({\n    page: 1,\n    limit: 10,\n    pagination: 'paginate',\n});const result = await paginationService.paginate(\n    'SELECT * FROM my_table',\n    'SELECT COUNT(*) as count FROM my_table',\n    paginationQuery\n);\nExample :\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                paginate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/common/helper/services/pagination.service.ts:36\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        paginate\n                        \n                    \n                \n            \n            \n                \n                        \n                    paginate(selectQuery: string, countQuery: string, paginationQuery: PaginationQueryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/helper/services/pagination.service.ts:39\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                selectQuery\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                countQuery\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                paginationQuery\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\nimport { PrismaService } from '@services/prisma.service';\nimport { PaginationResponseDto } from '@utils/dto/pagination-response.dto';\nimport { PaginationQueryDto } from '@utils/dto/pagination.dto';\nimport { PaginationMetaDto } from '@utils/dto/pagination.meta.dto';\n\n/**\n * @service PaginationService\n *\n * @description\n * The `PaginationService` provides functionality to handle pagination for database queries. It utilizes Prisma's query capabilities\n * to perform paginated data retrieval based on the provided query parameters.\n *\n * @remarks\n * - The `paginate` method constructs SQL queries to fetch paginated data and its corresponding metadata.\n * - The method supports different pagination strategies such as 'all' and 'infinity'.\n *\n * @example\n * ```typescript\n * const paginationQuery = new PaginationQueryDto({\n *     page: 1,\n *     limit: 10,\n *     pagination: 'paginate',\n * });\n *\n * const result = await paginationService.paginate(\n *     'SELECT * FROM my_table',\n *     'SELECT COUNT(*) as count FROM my_table',\n *     paginationQuery\n * );\n * ```\n */\n\n@Injectable()\nexport class PaginationService {\n    constructor(private readonly prisma: PrismaService) {}\n\n    async paginate(\n        selectQuery: string,\n        countQuery: string,\n        paginationQuery: PaginationQueryDto\n    ): Promise> {\n        const { page, limit, pagination } = paginationQuery;\n\n        const offset = (page - 1) * limit;\n\n        const dataQuery = `${selectQuery} LIMIT ${limit} OFFSET ${offset}`;\n\n        const metaPage = pagination === 'all' || pagination === 'paginate';\n\n        // const [data, total] = await this.prisma.$transaction([\n        //     this.prisma.$queryRawUnsafe(dataQuery),\n        //     this.prisma.$queryRawUnsafe(countQuery),\n        // ]);\n\n        // console.log('DATTTTTTTTTTTTTTTTTTTTTTTTT', dataQuery);\n\n        const [data, total] = await Promise.all([\n            this.prisma.$queryRawUnsafe(dataQuery),\n            metaPage\n                ? this.prisma.$queryRawUnsafe(countQuery)\n                : [{ count: 0 }],\n        ]);\n\n        // console.log('DATTTTTTTTTTTTTTTTTTTTTTTTT', total, total[0]);\n\n        const meta = metaPage\n            ? new PaginationMetaDto({\n                  paginationQueryDto: paginationQuery,\n                  totalItems: Number(total[0].count),\n              })\n            : undefined;\n\n        const has_next_page =\n            pagination === 'all' || pagination === 'infinity' ? data.length === limit : undefined;\n\n        return {\n            data,\n            meta,\n            has_next_page,\n        };\n    }\n}\n\n// start\n// import { Injectable } from '@nestjs/common';\n\n// import { PrismaService } from '@services/prisma.service';\n// import { PaginationResponseDto } from '@utils/dto/pagination-response.dto';\n// import { PaginationQueryDto } from '@utils/dto/pagination.dto';\n// import { PaginationMetaDto } from '@utils/dto/pagination.meta.dto';\n// import { IFieldConfig } from '@utils/types/pagination-options';\n\n// @Injectable()\n// export class PaginationService {\n//     constructor(private readonly prisma: PrismaService) {}\n\n//     async paginate(\n//         selectFields: string[],\n//         fromQuery: string,\n//         joinTables: string[] = [],\n//         filterQuery: string,\n//         sortByQuery: string,\n//         paginationQuery: PaginationQueryDto\n//     ): Promise> {\n//         const { page, limit, filters, pagination } = paginationQuery;\n\n//         // console.log('Hiii pagination service', page);\n\n//         // console.log('Hiii selectFields', selectFields);\n//         // console.log('Hiii fromQuery', fromQuery);\n//         // console.log('Hiii joinTables', joinTables);\n//         // console.log('Hiii whereClauses', filterQuery);\n\n//         // console.log('Hiii paginationQuery', paginationQuery);\n\n//         // console.log('Hiii paginationQuery---------------------------------', pagination === 'all');\n\n//         const offset = (page - 1) * limit;\n//         const select = selectFields.join(', ');\n\n//         const joinQuery = joinTables.join(' ');\n\n//         // const filterQuery = '';\n//         // if (filters && filters.length > 0) {\n//         //     const filterConditions = filters\n//         //         .map((filter) => {\n//         //             if (filter.operator.toUpperCase() === 'IN') {\n//         //                 const values = filter.value\n//         //                     .split(',')\n//         //                     .map((val) => `'${val.trim()}'`)\n//         //                     .join(', ');\n//         //                 return `${filter.field} IN (${values})`;\n//         //             }\n//         //             return `${filter.field} ${filter.operator} '${filter.value}'`;\n//         //         })\n//         //         .join(' AND ');\n//         //     filterQuery = `WHERE ${filterConditions}`;\n//         // }\n\n//         // console.log('____________________________________', filterQuery);\n\n//         const dataQuery = `SELECT ${select} ${fromQuery} ${joinQuery} ${filterQuery} ${sortByQuery} LIMIT ${limit} OFFSET ${offset}`;\n//         const countQuery = `SELECT count(*) ${fromQuery} ${joinQuery} ${filterQuery}`;\n\n//         // console.log('____________________________________', dataQuery);\n//         // console.log('____________________________________', countQuery);\n\n//         const metaPage = pagination === 'all' || pagination === 'paginate';\n\n//         // const [data, total] = await this.prisma.$transaction([\n//         //     this.prisma.$queryRawUnsafe(dataQuery),\n//         //     this.prisma.$queryRawUnsafe(countQuery),\n//         // ]);\n\n//         const [data, total] = await Promise.all([\n//             this.prisma.$queryRawUnsafe(dataQuery),\n//             metaPage\n//                 ? this.prisma.$queryRawUnsafe(countQuery)\n//                 : [{ count: 0 }],\n//         ]);\n\n//         // console.log('DATTTTTTTTTTTTTTTTTTTTTTTTT', total, total[0]);\n\n//         const meta = metaPage\n//             ? new PaginationMetaDto({\n//                   paginationQueryDto: paginationQuery,\n//                   totalItems: Number(total[0].count),\n//               })\n//             : undefined;\n\n//         const has_next_page =\n//             pagination === 'all' || pagination === 'infinity' ? data.length === limit : undefined;\n\n//         return {\n//             data,\n//             meta,\n//             has_next_page,\n//         };\n\n//         // const dataQuery = `SELECT ${select} ${joinQuery} ${filterQuery} ${sortQuery} LIMIT ${limit} OFFSET ${offset}`;\n\n//         return 'hi' as any;\n//         // const offset = (page - 1) * limit;\n//         // // const select = selectFields.join(', ');\n\n//         // let filterQuery = '';\n//         // if (filters && filters.length > 0) {\n//         //     const filterConditions = filters\n//         //         .map((filter) => {\n//         //             if (filter.operator.toUpperCase() === 'IN') {\n//         //                 const values = filter.value\n//         //                     .split(',')\n//         //                     .map((val) => `'${val.trim()}'`)\n//         //                     .join(', ');\n//         //                 return `${filter.field} IN (${values})`;\n//         //             }\n//         //             return `${filter.field} ${filter.operator} '${filter.value}'`;\n//         //         })\n//         //         .join(' AND ');\n//         //     filterQuery = `WHERE ${filterConditions}`;\n//         // }\n\n//         // let sortQuery = '';\n//         // // if (sort) {\n//         // //     const sortConditions = sort\n//         // //         .split(',')\n//         // //         .map((s) => s.trim())\n//         // //         .join(', ');\n//         // //     sortQuery = `ORDER BY ${sortConditions}`;\n//         // // }\n\n//         // const joinQuery = joinTables.join(' ');\n\n//         // const dataQuery = `${baseQuery} ${joinQuery} ${filterQuery} ${sortQuery} LIMIT ${limit} OFFSET ${offset}`;\n//         // const countFilterQuery = filterQuery ? filterQuery : '';\n//         // const finalCountQuery = `${countQuery} ${joinQuery} ${countFilterQuery}`;\n//         // console.log('DATA QUERY', dataQuery);\n//         // console.log('finalCountQuery QUERY', finalCountQuery);\n//         // console.log(offset, select, filters, sort, filterQuery, sortQuery, joinQuery);\n//         return 'x' as any;\n//         // const [data, total] = await this.prisma.$transaction([\n//         //     this.prisma.$queryRawUnsafe(dataQuery),\n//         //     this.prisma.$queryRawUnsafe(finalCountQuery),\n//         // ]);\n//         // return {\n//         //     data,\n//         //     total: total[0].count,\n//         //     page,\n//         //     limit,\n//         // };\n//     }\n// }\n// end\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PrismaClientExceptionFilter.html":{"url":"classes/PrismaClientExceptionFilter.html","title":"class - PrismaClientExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PrismaClientExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/prisma-exception.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                Exception filter for handling Prisma Client known request errors.\nThis filter catches PrismaClientKnownRequestError exceptions and formats the\nresponse based on the specific Prisma error codes.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: Prisma.PrismaClientKnownRequestError, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/filters/prisma-exception.filter.ts:30\n                        \n                    \n\n\n            \n                \n                        Handles the Prisma Client exception and formats the error response\nbased on the error code.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                        Prisma.PrismaClientKnownRequestError\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The Prisma Client error to handle.\n\n                                            \n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The arguments host for accessing request and response objects.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ArgumentsHost, Catch, HttpStatus } from '@nestjs/common';\nimport { BaseExceptionFilter } from '@nestjs/core';\n\nimport { Prisma } from '@prisma/client';\nimport { Response } from 'express';\n\n/**\n * Exception filter for handling Prisma Client known request errors.\n *\n * This filter catches `PrismaClientKnownRequestError` exceptions and formats the\n * response based on the specific Prisma error codes.\n *\n * @export\n * @class PrismaClientExceptionFilter\n * @extends {BaseExceptionFilter}\n */\n\n@Catch(Prisma.PrismaClientKnownRequestError)\nexport class PrismaClientExceptionFilter extends BaseExceptionFilter {\n    /**\n     * Handles the Prisma Client exception and formats the error response\n     * based on the error code.\n     *\n     * @param {Prisma.PrismaClientKnownRequestError} exception The Prisma Client error to handle.\n     * @param {ArgumentsHost} host The arguments host for accessing request and response objects.\n     *\n     * @memberof PrismaClientExceptionFilter\n     */\n\n    catch(exception: Prisma.PrismaClientKnownRequestError, host: ArgumentsHost) {\n        console.log('PRISMA CLIENT EXCEPTION', exception.message);\n        const ctx = host.switchToHttp();\n        const response = ctx.getResponse();\n        const message = exception.message.replace(/\\n/g, '');\n        switch (exception.code) {\n            case 'P2002': {\n                // Unique constraint failed on the {constraint}\n                const status = HttpStatus.CONFLICT;\n                response.status(status).json({\n                    statusCode: status,\n                    message: message,\n                });\n                break;\n            }\n            case 'P2000': {\n                // The provided value for the column is too long for the column’s type. Column: {column_name}\n                const status = HttpStatus.BAD_REQUEST;\n                response.status(status).json({\n                    statusCode: status,\n                    message: message,\n                });\n                break;\n            }\n            case 'P2025': {\n                // An operation failed because it depends on one or more records that were required but not found. {cause}\n                const status = HttpStatus.NOT_FOUND;\n                response.status(status).json({\n                    statusCode: status,\n                    message: message,\n                });\n                break;\n            }\n            case 'P2010': {\n                // An operation failed because it depends on one or more records that were required but not found. {cause}\n                const status = HttpStatus.BAD_REQUEST;\n                response.status(status).json({\n                    statusCode: status,\n                    message: message,\n                });\n                break;\n            }\n            default:\n                // default 500 error code\n                super.catch(exception, host);\n                break;\n        }\n    }\n\n    //   catch(exception: PrismaClientKnownRequestError, host: ArgumentsHost) {\n    //     const ctx = host.switchToHttp();\n    //     const response = ctx.getResponse();\n    //     const status = HttpStatus.BAD_REQUEST;\n\n    //     const errorResponse = {\n    //       statusCode: status,\n    //       timestamp: new Date().toISOString(),\n    //       message: exception.message,\n    //     };\n\n    //     response.status(status).json(errorResponse);\n    //   }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/helper/services/prisma.service.ts\n        \n\n\n            \n                Description\n            \n            \n                PrismaService\nPrismaService is a service that extends the PrismaClient class to manage database operations with Prisma ORM. It handles\ninitialization and teardown of database connections, executes raw queries with parameter escaping, supports transactions,\nand provides a health check for the database connection.\n\n            \n\n            \n                Extends\n            \n            \n                        PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                executeRawQuery\n                            \n                            \n                                    Async\n                                executeTransaction\n                            \n                            \n                                    Async\n                                isHealthy\n                            \n                            \n                                    Async\n                                onModuleDestroy\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/common/helper/services/prisma.service.ts:28\n                            \n                        \n\n                \n                    \n                            Creates an instance of PrismaService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe configuration service for retrieving database connection details.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        executeRawQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    executeRawQuery(queryObj: any, data: any, fields: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/helper/services/prisma.service.ts:79\n                        \n                    \n\n\n            \n                \n                        Executes a raw query with optional data and field sanitization.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                queryObj\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    null\n                                            \n\n                                            \n                                                    \nThe query object with a syntax method to generate the query string.\n\n\n                                            \n                                        \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    null\n                                            \n\n                                            \n                                                    \nOptional data to be used in the query.\n\n\n                                            \n                                        \n                                        \n                                                fields\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    []\n                                            \n\n                                            \n                                                    \nOptional fields to be sanitized in the data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe result of the query.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        executeTransaction\n                        \n                    \n                \n            \n            \n                \n                        \n                    executeTransaction(actions: (prisma: Prisma.TransactionClient) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/helper/services/prisma.service.ts:129\n                        \n                    \n\n\n            \n                \n                        Executes a transaction with Prisma.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                actions\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nA function containing the transactional operations.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe result of the transaction.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        isHealthy\n                        \n                    \n                \n            \n            \n                \n                        \n                    isHealthy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/helper/services/prisma.service.ts:141\n                        \n                    \n\n\n            \n                \n                        Checks the health of the Prisma connection by executing a simple query.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe result of the health check.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/helper/services/prisma.service.ts:61\n                        \n                    \n\n\n            \n                \n                        Called when the module is destroyed. Disconnects from the database.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/helper/services/prisma.service.ts:51\n                        \n                    \n\n\n            \n                \n                        Called when the module is initialized. Connects to the database.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit, OnModuleDestroy } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { HealthIndicatorResult } from '@nestjs/terminus';\n\nimport { Prisma, PrismaClient } from '@prisma/client';\nimport * as _ from 'lodash';\n\nimport { AllConfigType } from '@config/type/config.type';\n\n// import { ConfigService } from '../services/config.service';\n\n/**\n * PrismaService\n *\n * @description\n * `PrismaService` is a service that extends the PrismaClient class to manage database operations with Prisma ORM. It handles\n * initialization and teardown of database connections, executes raw queries with parameter escaping, supports transactions,\n * and provides a health check for the database connection.\n *\n * @export\n * @class PrismaService\n * @extends PrismaClient\n * @implements {OnModuleInit}\n * @implements {OnModuleDestroy}\n */\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit, OnModuleDestroy {\n    /**\n     * Creates an instance of PrismaService.\n     *\n     * @param {ConfigService} configService - The configuration service for retrieving database connection details.\n     */\n\n    constructor(private readonly configService: ConfigService) {\n        super({\n            datasources: {\n                db: {\n                    url: configService.get('database.url', { infer: true }), // configService.prismaConfig,\n                },\n            },\n        });\n    }\n\n    /**\n     * Called when the module is initialized. Connects to the database.\n     *\n     * @returns {Promise}\n     */\n\n    async onModuleInit(): Promise {\n        await this.$connect();\n    }\n\n    /**\n     * Called when the module is destroyed. Disconnects from the database.\n     *\n     * @returns {Promise}\n     */\n\n    async onModuleDestroy(): Promise {\n        await this.$disconnect();\n    }\n\n    // async executeRawQuery(query: string, params?: any[]): Promise {\n    //     return this.$queryRawUnsafe(query, ...params);\n    // }\n\n    /**\n     * Executes a raw query with optional data and field sanitization.\n     *\n     * @param {any} queryObj - The query object with a `syntax` method to generate the query string.\n     * @param {any} [data=null] - Optional data to be used in the query.\n     * @param {string[]} [fields=[]] - Optional fields to be sanitized in the data.\n     *\n     * @returns {Promise} - The result of the query.\n     */\n\n    async executeRawQuery(\n        queryObj: any = null,\n        data: any = null,\n        fields: string[] = []\n    ): Promise {\n        const newObj = Object.assign({}, data);\n\n        if (typeof data == 'object' && data instanceof Object && !(data instanceof Array)) {\n            for (const [key, value] of Object.entries(newObj)) {\n                const found = fields.includes(key);\n                if (found) {\n                    const escValue = value as any;\n                    // newObj[key] = escValue.replace(/'/g, \"\\\\'\");\n                    newObj[key] = escValue.replace(/'/g, \"''\");\n                }\n            }\n        }\n\n        let query: string;\n        if (data) {\n            query = queryObj.syntax(\n                typeof data == 'object' && data instanceof Object && !(data instanceof Array)\n                    ? newObj\n                    : data\n            );\n        } else {\n            query = queryObj.syntax();\n        }\n\n        // return this.$queryRawUnsafe(query, ...params);\n        const rows = await this.$queryRawUnsafe(query);\n\n        let result: any;\n        if (queryObj.type == 'SELECT_ONE' || queryObj.type == 'INSERT') {\n            result = !_.isEmpty(rows) ? rows[0] : null; //do not change null to blank object\n        } else {\n            result = rows;\n        }\n\n        return result;\n    }\n\n    /**\n     * Executes a transaction with Prisma.\n     *\n     * @param {(prisma: Prisma.TransactionClient) => Promise} actions - A function containing the transactional operations.\n     *\n     * @returns {Promise} - The result of the transaction.\n     */\n\n    async executeTransaction(\n        actions: (prisma: Prisma.TransactionClient) => Promise\n    ): Promise {\n        return this.$transaction(actions);\n    }\n\n    /**\n     * Checks the health of the Prisma connection by executing a simple query.\n     *\n     * @returns {Promise} - The result of the health check.\n     */\n\n    async isHealthy(): Promise {\n        try {\n            await this.$queryRaw`SELECT 1`;\n            // console.log('RESULTTTTTTTTTTTTTTTTTTTT', x);\n            return Promise.resolve({\n                prisma: {\n                    status: 'up',\n                },\n            });\n        } catch (e) {\n            return Promise.resolve({\n                prisma: {\n                    status: 'down',\n                },\n            });\n            console.log(e);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Query.html":{"url":"classes/Query.html","title":"class - Query","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Query\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/query.ts\n        \n\n\n            \n                Description\n            \n            \n                A utility class for generating SQL queries related to error logging.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addQueryError\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addQueryError\n                        \n                    \n                \n            \n            \n                \naddQueryError(module: any, method: any, url: any, reqdata: string, resdata: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/filters/query.ts:24\n                        \n                    \n\n\n            \n                \n                        Generates an SQL query for logging query errors.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                module\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The module where the error occurred.\n\n                                            \n                                        \n                                        \n                                                method\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The method that caused the error.\n\n                                            \n                                        \n                                        \n                                                url\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The URL where the error occurred.\n\n                                            \n                                        \n                                        \n                                                reqdata\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The request data associated with the error.\n\n                                            \n                                        \n                                        \n                                                resdata\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The response data associated with the error.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { name: string; type: string; syntax: () => string; }\n\n                        \n                            \n                                An object containing the SQL query details.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class Query {\n    /**\n     * Generates an SQL query for logging query errors.\n     *\n     * @param {any} module The module where the error occurred.\n     * @param {any} method The method that caused the error.\n     * @param {any} url The URL where the error occurred.\n     * @param {string} reqdata The request data associated with the error.\n     * @param {string} resdata The response data associated with the error.\n     * @returns {{ name: string, type: string, syntax: () => string }} An object containing the SQL query details.\n     *\n     * @memberof Query\n     */\n\n    addQueryError(module: any, method: any, url: any, reqdata: string, resdata: string) {\n        return {\n            name: `addQueryError`,\n            type: `INSERT`,\n            syntax: () => {\n                // data: any[]\n                try {\n                    let reqescValue = reqdata;\n                    let resescValue = resdata;\n                    reqescValue = reqescValue.replace(/'/g, \"\\\\'\");\n                    resescValue = resescValue.replace(/'/g, \"\\\\'\");\n                    const sql = `INSERT INTO Error (Module,Method,Url,Req,Response) VALUES\n                ('${module}','${method}','${url}','${reqescValue}','${resescValue}');`;\n                    return sql;\n                } catch (error) {\n                    return `Select ${module} ,${method},${url},${reqdata},${resdata}`;\n                }\n            },\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Query-1.html":{"url":"classes/Query-1.html","title":"class - Query-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Query\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/exceptions/query.ts\n        \n\n\n            \n                Description\n            \n            \n                Class representing SQL query builder for error logging.\ninto an Error table. The query escapes single quotes in request and response data\nto prevent SQL injection.\nExample :```typescript\nconst query = new Query();\nconst sqlQuery = query.addHttpQueryError(\n  'UserModule',\n  'GET',\n  '/users',\n  JSON.stringify(requestData),\n  JSON.stringify(responseData)\n).syntax();\nconsole.log(sqlQuery); // Outputs the SQL query stringExample :\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addHttpQueryError\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addHttpQueryError\n                        \n                    \n                \n            \n            \n                \naddHttpQueryError(module: any, method: any, url: any, reqdata: string, resdata: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/exceptions/query.ts:36\n                        \n                    \n\n\n            \n                \n                        Constructs an SQL query to insert HTTP error details into the Error table.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                module\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the module where the error occurred.\n\n\n                                            \n                                        \n                                        \n                                                method\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe HTTP method used in the request.\n\n\n                                            \n                                        \n                                        \n                                                url\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe URL of the request that caused the error.\n\n\n                                            \n                                        \n                                        \n                                                reqdata\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe request data, serialized as a JSON string.\n\n\n                                            \n                                        \n                                        \n                                                resdata\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe response data, serialized as a JSON string.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                An object representing the SQL query with a name, type, and syntax function.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class Query {\n    /**\n     * Constructs an SQL query to insert HTTP error details into the `Error` table.\n     *\n     * @param {string} module - The name of the module where the error occurred.\n     * @param {string} method - The HTTP method used in the request.\n     * @param {string} url - The URL of the request that caused the error.\n     * @param {string} reqdata - The request data, serialized as a JSON string.\n     * @param {string} resdata - The response data, serialized as a JSON string.\n     * @returns {Object} An object representing the SQL query with a `name`, `type`, and `syntax` function.\n     */\n\n    addHttpQueryError(module: any, method: any, url: any, reqdata: string, resdata: string): any {\n        return {\n            name: `addQueryError`,\n            type: `INSERT`,\n            /**\n             * Generates the SQL query string for inserting the error details.\n             *\n             * @returns {string} The SQL query string.\n             */\n\n            syntax: (): string => {\n                //data: any[]\n                try {\n                    let reqescValue = reqdata;\n                    let resescValue = resdata;\n                    reqescValue = reqescValue.replace(/'/g, \"\\\\'\");\n                    resescValue = resescValue.replace(/'/g, \"\\\\'\");\n                    const sql = `INSERT INTO Error (Module,Method,Url,Req,Response) VALUES\n                ('${module}','${method}','${url}','${reqescValue}','${resescValue}');`;\n                    return sql;\n                } catch (error) {\n                    return `Select ${module} ,${method},${url},${reqdata},${resdata}`;\n                }\n            },\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Query-10.html":{"url":"classes/Query-10.html","title":"class - Query-10","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Query\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/state_mas/query.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the Query class, which provides methods for generating SQL queries\nrelated to state data management.\nThe Query class includes methods to generate SQL queries for operations such as\nretrieving, inserting, updating, and deleting state records from the database.\nIt uses the lodash library for object manipulation and query construction.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                findById\n                            \n                            \n                                findByName\n                            \n                            \n                                formatValue\n                            \n                            \n                                insert\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/state_mas/query.ts:102\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to delete a state by its ID.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, and syntax properties.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findById\n                        \n                    \n                \n            \n            \n                \nfindById()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/state_mas/query.ts:19\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to find a state by its ID.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, and syntax properties.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByName\n                        \n                    \n                \n            \n            \n                \nfindByName()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/state_mas/query.ts:37\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to find a state by its name.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, and syntax properties.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        formatValue\n                        \n                    \n                \n            \n            \n                \nformatValue(value: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/state_mas/query.ts:118\n                        \n                    \n\n\n            \n                \n                        Formats a value for use in an SQL query.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nValue to format\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \nFormatted value as a string\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        insert\n                        \n                    \n                \n            \n            \n                \ninsert()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/state_mas/query.ts:54\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to insert a new state.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, and syntax properties.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/state_mas/query.ts:74\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to update an existing state.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, and syntax properties.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as _ from 'lodash';\n\n/**\n * @fileoverview\n * This file defines the `Query` class, which provides methods for generating SQL queries\n * related to state data management.\n *\n * @module\n * @description\n * The `Query` class includes methods to generate SQL queries for operations such as\n * retrieving, inserting, updating, and deleting state records from the database.\n * It uses the lodash library for object manipulation and query construction.\n */\nexport class Query {\n    /**\n     * Generates a SQL query to find a state by its ID.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    findById(): object {\n        return {\n            name: `findById`,\n            type: `SELECT_ONE`,\n            syntax: (where: any) => {\n                const allowedKeys = ['id_state', 'name', 'id_country', 'status'];\n                const id = _.get(where, 'id');\n                const sql = `SELECT ${allowedKeys.join(', ')} FROM state_mas WHERE status = 1 AND id_state = '${id}';`;\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to find a state by its name.\n     * @param {string} [id] - Optional ID to exclude from the search if provided.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    findByName(): object {\n        return {\n            name: `findByName`,\n            type: `SELECT_ONE`,\n            syntax: (where: any) => {\n                const allowedKeys = ['id_state', 'name', 'status'];\n                const name = _.get(where, 'name');\n                const sql = `SELECT ${allowedKeys.join(', ')} FROM state_mas WHERE status = 1 AND name = '${name}';`;\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to insert a new state.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    insert(): object {\n        return {\n            name: `insert`,\n            type: `INSERT`,\n            syntax: (where: any) => {\n                const allowedKeys = ['name', 'id_country', 'status'];\n                const conds = _.pick(where, allowedKeys);\n                const keys = _.keys(conds);\n                //const values = _.values(conds);\n                const sql = `INSERT INTO state_mas (${keys.join(', ')}) VALUES (${keys.map((key) => this.formatValue(conds[key])).join(', ')}) RETURNING id_state as insertid, name;`;\n                console.log('Insert query -- ' + sql);\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to update an existing state.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    update(): object {\n        return {\n            name: `update`,\n            type: `UPDATE`,\n            syntax: (where: any) => {\n                let sql = `UPDATE state_mas SET `;\n                const id = _.get(where, 'id_state');\n                _.unset(where, 'id_state');\n                const allowedKeys = ['name', 'id_country', 'status', 'updated_at'];\n                where = _.pick(where, allowedKeys);\n\n                const lastKey = Object.keys(where)[Object.keys(where).length - 1];\n                _.mapKeys(where, (value, key) => {\n                    sql += `${key} = ${this.formatValue(value)}`;\n                    sql += lastKey == key ? `` : `, `;\n                });\n                sql += ` WHERE status = 1 AND id_state = '${id}' RETURNING id_state as updatedid, name;`;\n                console.log('Update query -- ' + sql);\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to delete a state by its ID.\n     * @param {string} id - The ID of the state to delete.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    delete(): object {\n        return {\n            name: `delete`,\n            type: `UPDATE`,\n            syntax: (id: string) => {\n                const sql = `UPDATE state_mas SET status = 127 WHERE status = 1 AND id_state = '${id}' RETURNING id_state as deletedid, name;`;\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Formats a value for use in an SQL query.\n     * @param value - Value to format\n     * @returns - Formatted value as a string\n     */\n    formatValue(value: any): string {\n        if (Array.isArray(value)) {\n            const formattedArray = value.map((v) => `${v.replace(/'/g, \"''\")}`).join(', ');\n            return `'{${formattedArray}}'`;\n        } else if (typeof value === 'string') {\n            return `'${value.replace(/'/g, \"''\")}'`;\n        } else if (value === null || value === undefined) {\n            return 'NULL';\n        } else {\n            return `${value}`; // For numbers and other types\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Query-2.html":{"url":"classes/Query-2.html","title":"class - Query-2","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Query\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/countries/query.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                findById\n                            \n                            \n                                findByName\n                            \n                            \n                                formatValue\n                            \n                            \n                                insert\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(utilsService: UtilsService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/countries/query.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        utilsService\n                                                  \n                                                        \n                                                                        UtilsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/countries/query.ts:148\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to delete a Country by its ID.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, and syntax properties.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findById\n                        \n                    \n                \n            \n            \n                \nfindById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/countries/query.ts:115\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to find a Country by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The return select query string .\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByName\n                        \n                    \n                \n            \n            \n                \nfindByName()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/countries/query.ts:13\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to find a Country by its name.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, and syntax properties.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        formatValue\n                        \n                    \n                \n            \n            \n                \nformatValue(value: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/countries/query.ts:159\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        insert\n                        \n                    \n                \n            \n            \n                \ninsert()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/countries/query.ts:31\n                        \n                    \n\n\n            \n                \n                        Generates a SQL insert query to insert new Country in database.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, and syntax properties.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/countries/query.ts:76\n                        \n                    \n\n\n            \n                \n                        Generates a SQL update query to update country .\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, and syntax properties.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import _ from 'lodash';\n\nimport { UtilsService } from '@app/common/helper/services/util.service';\n\nexport class Query {\n    constructor(private readonly utilsService: UtilsService) {}\n\n    /**\n     * Generates a SQL query to find a Country by its name.\n     * @param {string} [name] - using name of country finde data from database.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    findByName(): object {\n        return {\n            name: `findByName`,\n            type: `SELECT_ONE`,\n            syntax: (where: any) => {\n                const allowedKeys = ['id_country', 'name', 'iso3'];\n                const name = _.get(where, 'name');\n\n                return `SELECT ${allowedKeys.join()} FROM countries  WHERE status = 1 AND name = '${name}'`;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL insert query to insert new Country in database.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n\n    insert(): object {\n        return {\n            name: `add`,\n            type: `INSERT`,\n            syntax: (where: any) => {\n                const allowedKeys = [\n                    'name',\n                    'iso',\n                    'nice_name',\n                    'iso3',\n                    'num_code',\n                    'dial_code',\n                    'continent',\n                    'capital',\n                    'id_currency',\n                    'id_timezone',\n                ];\n                const conds = _.pick(where, allowedKeys);\n                const keys = _.keys(conds);\n                const values = _.values(conds);\n                const values1 = keys.map((key) => this.formatValue(conds[key])).join(', ');\n                console.log('keys --' + keys);\n                console.log('values --' + values);\n                console.log('Formated --' + values1);\n                // const query = `INSERT INTO countries  (${keys.join()}) VALUES ('${values.join(\"','\")}') RETURNING id_country as insertid,name;`;\n                const query = `INSERT INTO countries  (${keys.join()}) VALUES (${keys.map((key) => this.formatValue(conds[key])).join(', ')}) RETURNING id_country as insertid,name;`;\n                console.log('Query--- ' + query);\n                return query;\n            },\n        };\n    }\n\n    // async update1(id: string, data: any): Promise {\n    //     const keys = Object.keys(data).filter((key) => data[key] !== undefined);\n    //     const setColumnwithValue = keys\n    //         .map((key) => `${key} = ${this.formatValue(data[key])}`)\n    //         .join(', ');\n    //     return `UPDATE countries SET ${setColumnwithValue} WHERE id_country  = ${this.formatValue(id)} AND status = 1 RETURNING id_country as upadetId ;`;\n    // }\n\n    /**\n     * Generates a SQL update query to update country .\n     * @param {string} [id_country] - using id_country of country to update country in database.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    update(): object {\n        return {\n            name: `update`,\n            type: `UPDATE`,\n            syntax: (where: any) => {\n                let sql = `UPDATE countries SET `;\n                const id = _.get(where, 'id_country');\n                _.unset(where, 'id_country');\n                const allowedKeys = [\n                    'name',\n                    'iso',\n                    'nice_name',\n                    'iso3',\n                    'num_code',\n                    'dial_code',\n                    'continent',\n                    'capital',\n                    'id_currency',\n                    'id_timezone',\n                ];\n                where = _.pick(where, allowedKeys);\n\n                const lastKey = Object.keys(where)[Object.keys(where).length - 1];\n                _.mapKeys(where, (value, key) => {\n                    sql += `${key} = '${value}'`;\n                    sql += lastKey == key ? `` : `, `;\n                });\n                sql += ` WHERE status = 1 AND id_country = '${id}' RETURNING id_country as updatedid, name;`;\n                console.log('update q--' + sql);\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to find a Country by its ID.\n     * @returns {string} The return select query string .\n     */\n\n    findById(id: string): string {\n        const allowedKeys = [\n            'c.name',\n            'c.iso',\n            'c.nice_name',\n            'c.iso3',\n            'c.num_code',\n            'c.dial_code',\n            'c.continent',\n            'c.capital',\n            'cr.symbol',\n            'cr.name as currency_name',\n            'tz.value',\n            'tz.offset',\n            'tz.offset_in_minutes',\n            'tz.abbr',\n            'tz.text',\n        ];\n\n        const query = `SELECT ${allowedKeys} FROM countries as c \n        JOIN currencies AS cr ON cr.id_currency=c.id_currency\n        JOIN timezone AS tz ON tz.id_timezone=c.id_timezone\n        WHERE c.status = 1 AND c.id_country='${id}' `;\n        console.log('Query--' + query);\n        return query;\n    }\n\n    /**\n     * Generates a SQL query to delete a Country by its ID.\n     * @param {string} id - The ID of the Country to delete.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n\n    delete(): object {\n        return {\n            name: `delete`,\n            type: `UPDATE`,\n            syntax: (id: string) => {\n                const sql = `UPDATE countries SET status = 127 WHERE status = 1 AND id_country = '${id}' RETURNING id_country as deletedid, name;`;\n                console.log('delete --QQ ' + sql);\n                return sql;\n            },\n        };\n    }\n    formatValue(value: any): string {\n        if (Array.isArray(value)) {\n            const formattedArray = value.map((v) => `${v.replace(/'/g, \"''\")}`).join(', ');\n            return `'{${formattedArray}}'`;\n        } else if (typeof value === 'string') {\n            return `'${value.replace(/'/g, \"''\")}'`;\n        } else if (value === null || value === undefined) {\n            return 'NULL';\n        } else {\n            return `${value}`; // For numbers and other types\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Query-3.html":{"url":"classes/Query-3.html","title":"class - Query-3","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Query\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/currencies/query.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the Query class, which provides methods for generating SQL queries\nrelated to currency data management.\nThe Query class includes methods to generate SQL queries for operations such as\nretrieving, inserting, updating, and deleting currency records from the database.\nIt uses the lodash library for object manipulation and query construction.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                findByCode\n                            \n                            \n                                findById\n                            \n                            \n                                insert\n                            \n                            \n                                pgBaseQuery\n                            \n                            \n                                pgBaseSelectField\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/currencies/query.ts:139\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to delete a currency by its ID.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, and syntax properties.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByCode\n                        \n                    \n                \n            \n            \n                \nfindByCode(id?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/currencies/query.ts:49\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to find a currency by its code.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional ID to exclude from the search if provided.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, and syntax properties.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findById\n                        \n                    \n                \n            \n            \n                \nfindById()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/currencies/query.ts:21\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to find a currency by its ID.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, and syntax properties.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        insert\n                        \n                    \n                \n            \n            \n                \ninsert()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/currencies/query.ts:71\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to insert a new currency.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, and syntax properties.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pgBaseQuery\n                        \n                    \n                \n            \n            \n                \npgBaseQuery()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/currencies/query.ts:172\n                        \n                    \n\n\n            \n                \n                        Provides the base query for selecting currencies.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                The base query string for selecting currencies.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pgBaseSelectField\n                        \n                    \n                \n            \n            \n                \npgBaseSelectField()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/currencies/query.ts:156\n                        \n                    \n\n\n            \n                \n                        Provides the base fields for selecting currencies in pagination queries.\n\n\n                        \n                            Returns :     string[]\n\n                        \n                            \n                                An array of column names to be selected in pagination queries.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/currencies/query.ts:100\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to update an existing currency.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, and syntax properties.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as _ from 'lodash';\n\n/**\n * @fileoverview\n * This file defines the `Query` class, which provides methods for generating SQL queries\n * related to currency data management.\n *\n * @module\n * @description\n * The `Query` class includes methods to generate SQL queries for operations such as\n * retrieving, inserting, updating, and deleting currency records from the database.\n * It uses the lodash library for object manipulation and query construction.\n */\n\nexport class Query {\n    /**\n     * Generates a SQL query to find a currency by its ID.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n\n    findById(): object {\n        return {\n            name: `findById`,\n            type: `SELECT_ONE`,\n            syntax: (where: any) => {\n                const allowedKeys = [\n                    'c.id_currency',\n                    'c.code',\n                    'c.name',\n                    'c.name_plural',\n                    'c.symbol',\n                    'c.symbol_native',\n                    'c.decimal_digits',\n                    'c.rounding',\n                ];\n                const id = _.get(where, 'id');\n                const sql = `select ${allowedKeys.join()} from currencies c WHERE c.status = 1 AND c.id_currency = '${id}';`;\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to find a currency by its code.\n     * @param {string} [id] - Optional ID to exclude from the search if provided.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n\n    findByCode(id?: string): object {\n        return {\n            name: `findByCode`,\n            type: `SELECT_ONE`,\n            syntax: (where: any) => {\n                const allowedKeys = ['c.id_currency', 'c.code'];\n                const code = _.get(where, 'code');\n\n                let sql = `SELECT ${allowedKeys.join()} FROM currencies c WHERE c.status = 1 AND c.code = '${code}'`;\n                if (id) {\n                    sql += ` AND c.id_currency != '${id}';`;\n                }\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to insert a new currency.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n\n    insert(): object {\n        return {\n            name: `add`,\n            type: `INSERT`,\n            syntax: (where: any) => {\n                const allowedKeys = [\n                    'code',\n                    'name',\n                    'name_plural',\n                    'symbol',\n                    'symbol_native',\n                    'decimal_digits',\n                    'rounding',\n                ];\n                const conds = _.pick(where, allowedKeys);\n                const keys = _.keys(conds);\n                const values = _.values(conds);\n                const sql = `insert into currencies (${keys.join()}) values ('${values.join(\"','\")}') RETURNING id_currency as insertid, code;`;\n                console.log('QUERY', sql);\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to update an existing currency.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n\n    update(): object {\n        return {\n            name: `update`,\n            type: `UPDATE`,\n            syntax: (where: any) => {\n                let sql = `UPDATE currencies SET `;\n                const id = _.get(where, 'id');\n                _.unset(where, 'id');\n                const allowedKeys = [\n                    'code',\n                    'name',\n                    'name_plural',\n                    'symbol',\n                    'symbol_native',\n                    'decimal_digits',\n                    'rounding',\n                ];\n                where = _.pick(where, allowedKeys);\n\n                const lastKey = Object.keys(where)[Object.keys(where).length - 1];\n                _.mapKeys(where, (value, key) => {\n                    sql += `${key} = '${value}'`;\n                    sql += lastKey == key ? `` : `, `;\n                });\n                sql += ` WHERE status = 1 AND id_currency = '${id}' RETURNING id_currency as updatedid, code;`;\n\n                console.log('QQQQQQQQQQQQQQ', sql);\n\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to delete a currency by its ID.\n     * @param {string} id - The ID of the currency to delete.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n\n    delete(): object {\n        return {\n            name: `delete`,\n            type: `UPDATE`,\n            syntax: (id: string) => {\n                const sql = `UPDATE currencies SET status = 127 WHERE status = 1 AND id_currency = '${id}' RETURNING id_currency as deletedid, code;`;\n\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Provides the base fields for selecting currencies in pagination queries.\n     * @returns {string[]} An array of column names to be selected in pagination queries.\n     */\n\n    pgBaseSelectField(): string[] {\n        return [\n            'ptbl.id_currency',\n            'ptbl.code',\n            'ptbl.name',\n            'ptbl.symbol',\n            'ptbl.decimal_digits',\n            'ptbl.rounding',\n        ];\n    }\n\n    /**\n     * Provides the base query for selecting currencies.\n     * @returns {string} The base query string for selecting currencies.\n     */\n\n    pgBaseQuery(): string {\n        return ` FROM currencies ptbl`;\n    }\n}\n\n// import * as _ from 'lodash';\n\n// import { DynamicQueryBuilder, QueryOptions } from '@providers/dynamic-query.service';\n\n// export class Query {\n//     private queryBuilder = new DynamicQueryBuilder();\n\n//     findBy(key: string, value: string, id?: string) {\n//         const selectOptions: QueryOptions = {\n//             table: 'currencies',\n//             fields: ['id_currency', 'code'],\n//             conditions: { status: 1, ...(key && { [key]: value }) },\n//             ...(id && {\n//                 optionalConditions: {\n//                     id_currency: id,\n//                 },\n//             }),\n//         };\n\n//         return this.queryBuilder.buildSelectQuery(selectOptions);\n//     }\n\n//     insert(values: any) {\n//         const insertOptions: QueryOptions = {\n//             table: 'currencies',\n//             fields: [\n//                 'code',\n//                 'name',\n//                 'name_plural',\n//                 'symbol',\n//                 'symbol_native',\n//                 'decimal_digits',\n//                 'rounding',\n//             ],\n//             values: values,\n//             returningFields: ['id_currency as insertid', 'code'],\n//         };\n\n//         return this.queryBuilder.buildInsertQuery(insertOptions);\n//     }\n\n//     delete(key: string, value: string) {\n//         const deleteOptions: QueryOptions = {\n//             table: 'currencies',\n//             conditions: { status: 1, ...(key && { [key]: value }) },\n//             returningFields: ['id_currency as deleteid'],\n//         };\n\n//         return this.queryBuilder.buildDeleteQuery(deleteOptions);\n//     }\n\n//     pgBaseSelectField(): string[] {\n//         return [\n//             'ptbl.id_currency',\n//             'ptbl.code',\n//             'ptbl.name',\n//             'ptbl.symbol',\n//             'ptbl.decimal_digits',\n//             'ptbl.rounding',\n//         ];\n//     }\n\n//     pgBaseQuery() {\n//         return ` FROM currencies ptbl`;\n//     }\n// }\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Query-4.html":{"url":"classes/Query-4.html","title":"class - Query-4","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Query\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/address_type/query.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the Query class, which provides methods for generating SQL queries\nrelated to address type data management.\nThe Query class includes methods to generate SQL queries for operations such as\nretrieving, inserting, updating, and deleting address type records from the database.\nIt uses the lodash library for object manipulation and query construction.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                findById\n                            \n                            \n                                findByName\n                            \n                            \n                                formatValue\n                            \n                            \n                                insert\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/address_type/query.ts:98\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to delete a address_types by its ID.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, and syntax properties.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findById\n                        \n                    \n                \n            \n            \n                \nfindById()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/address_type/query.ts:20\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to find a address_type by its ID.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, syntax, and params properties.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByName\n                        \n                    \n                \n            \n            \n                \nfindByName()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/address_type/query.ts:37\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to find a address_type  by its address_type.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, syntax, and params properties.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        formatValue\n                        \n                    \n                \n            \n            \n                \nformatValue(value: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/address_type/query.ts:115\n                        \n                    \n\n\n            \n                \n                        Formats a value for use in an SQL query.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nValue to format\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \nFormatted value as a string\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        insert\n                        \n                    \n                \n            \n            \n                \ninsert()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/address_type/query.ts:54\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to insert a new addres_type.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, and syntax properties.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/address_type/query.ts:74\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to update an existing address_types.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, and syntax properties.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as _ from 'lodash';\n\n/**\n * @fileoverview\n * This file defines the `Query` class, which provides methods for generating SQL queries\n * related to address type data management.\n *\n * @module\n * @description\n * The `Query` class includes methods to generate SQL queries for operations such as\n * retrieving, inserting, updating, and deleting address type records from the database.\n * It uses the lodash library for object manipulation and query construction.\n */\nexport class Query {\n    /**\n     * Generates a SQL query to find a address_type by its ID.\n     * @returns {object} The query configuration object with `name`, `type`, `syntax`, and `params` properties.\n     */\n\n    findById(): object {\n        return {\n            name: `findbyid`,\n            type: `SELECT_ONE`,\n            syntax: (where: any) => {\n                const allowedKeys = ['id_address_type', 'address_type', 'status'];\n                const id = _.get(where, 'id');\n                const sql = `SELECT ${allowedKeys.join(', ')} FROM address_types WHERE id_address_type = '${id}';`;\n                console.log('FindById query: ' + sql);\n                return sql;\n            },\n        };\n    }\n    /**\n     * Generates a SQL query to find a address_type  by its address_type.\n     * @returns {object} The query configuration object with `name`, `type`, `syntax`, and `params` properties.\n     */\n    findByName(): object {\n        return {\n            name: `findbyname`,\n            type: `SELECT_ONE`,\n            syntax: (where: any) => {\n                const allowedKeys = ['id_address_type', 'address_type', 'status'];\n                const name = _.get(where, 'address_type');\n                const sql = `SELECT ${allowedKeys.join(', ')} FROM address_types WHERE address_type='${name}';`;\n                console.log('FindByNmae query: ' + sql);\n                return sql;\n            },\n        };\n    }\n    /**\n     * Generates a SQL query to insert a new addres_type.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    insert(): object {\n        return {\n            name: `insert`,\n            type: `INSERT`,\n            syntax: (where: any) => {\n                const allowedKeys = ['address_type', 'status'];\n                const conds = _.pick(where, allowedKeys);\n                const keys = _.keys(conds);\n                const values = keys.map((key) => this.formatValue(conds[key]));\n                const sql = `INSERT INTO address_types (${keys.join(', ')}) VALUES(${values}) RETURNING id_address_type as insertid, address_type;`;\n                console.log('Insert query: ', sql);\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to update an existing address_types.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    update(): object {\n        return {\n            name: `update`,\n            type: `UPDATE`,\n            syntax: (where: any) => {\n                const id = _.get(where, 'id_address_type');\n                _.unset(where, 'id_address_type');\n                const allowedKeys = ['address_type', 'status', 'updated_at'];\n                const updateData = _.pick(where, allowedKeys);\n                const setClauses = Object.keys(updateData).map(\n                    (key) => `${key}=${this.formatValue(updateData[key])}`\n                );\n                const sql = `UPDATE address_types SET ${setClauses.join(', ')} WHERE id_address_type='${id}' RETURNING id_address_type as updatedid, address_type; `;\n                console.log('Update query-- ' + sql);\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to delete a address_types by its ID.\n     * @param {string} id - The ID of the address_types to delete.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    delete(): object {\n        return {\n            name: `delete`,\n            type: `DELETE`,\n            syntax: (id: string) => {\n                const sql = `UPDATE address_types SET status = 127 WHERE id_address_type = '${id}' RETURNING id_address_type as deletedid, address_type;`;\n                console.log('Delete query: ', sql);\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Formats a value for use in an SQL query.\n     * @param value - Value to format\n     * @returns - Formatted value as a string\n     */\n    formatValue(value: any): string {\n        if (Array.isArray(value)) {\n            const formattedArray = value.map((v) => `'${v.replace(/'/g, \"''\")}'`).join(', ');\n            return `'{${formattedArray}}'`;\n        } else if (typeof value === 'string') {\n            return `'${value.replace(/'/g, \"''\")}'`;\n        } else if (value === null || value === undefined) {\n            return 'NULL';\n        } else {\n            return `${value}`; // For numbers and other types\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Query-5.html":{"url":"classes/Query-5.html","title":"class - Query-5","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Query\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/banks/query.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the Query class, which provides methods for generating SQL queries\nrelated to bank data management.\nThe Query class includes methods to generate SQL queries for operations such as\nretrieving, inserting, updating, and deleting bank records from the database.\nIt uses the lodash library for object manipulation and query construction.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                findById\n                            \n                            \n                                findByName\n                            \n                            \n                                formatValue\n                            \n                            \n                                insert\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/banks/query.ts:126\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to delete a bank by its ID.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, and syntax properties.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findById\n                        \n                    \n                \n            \n            \n                \nfindById()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/banks/query.ts:19\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to find a bank by its ID.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, and syntax properties.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByName\n                        \n                    \n                \n            \n            \n                \nfindByName()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/banks/query.ts:45\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to find a bank by its name.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, and syntax properties.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        formatValue\n                        \n                    \n                \n            \n            \n                \nformatValue(value: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/banks/query.ts:144\n                        \n                    \n\n\n            \n                \n                        Formats a value for use in an SQL query.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nValue to format\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \nFormatted value as a string\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        insert\n                        \n                    \n                \n            \n            \n                \ninsert()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/banks/query.ts:63\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to insert a new bank.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, and syntax properties.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/banks/query.ts:92\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to update an existing bank.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, and syntax properties.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as _ from 'lodash';\n\n/**\n * @fileoverview\n * This file defines the `Query` class, which provides methods for generating SQL queries\n * related to bank data management.\n *\n * @module\n * @description\n * The `Query` class includes methods to generate SQL queries for operations such as\n * retrieving, inserting, updating, and deleting bank records from the database.\n * It uses the lodash library for object manipulation and query construction.\n */\nexport class Query {\n    /**\n     * Generates a SQL query to find a bank by its ID.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    findById(): object {\n        return {\n            name: `findById`,\n            type: `SELECT_ONE`,\n            syntax: (where: any) => {\n                const allowedKeys = [\n                    'id_bank',\n                    'name',\n                    'short_name',\n                    'id_city',\n                    'id_state',\n                    'id_country',\n                    'status',\n                ];\n                const id = _.get(where, 'id');\n                const sql = `SELECT ${allowedKeys.join(', ')} FROM banks_mas WHERE status = 1 AND id_bank = '${id}';`;\n                console.log('FindById query: ' + sql);\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to find a bank by its name.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    findByName(): object {\n        return {\n            name: `findByName`,\n            type: `SELECT_ONE`,\n            syntax: (where: any) => {\n                const allowedKeys = ['id_bank', 'name', 'short_name'];\n                const name = _.get(where, 'name');\n                const sql = `SELECT ${allowedKeys.join(', ')} FROM banks_mas WHERE status = 1 AND name = '${name}';`;\n                console.log('FindByName query: ' + sql);\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to insert a new bank.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    insert(): object {\n        return {\n            name: `insert`,\n            type: `INSERT`,\n            syntax: (where: any) => {\n                const allowedKeys = [\n                    'name',\n                    'short_name',\n                    'id_city',\n                    'id_state',\n                    'id_country',\n                    'status',\n                ];\n                const conds = _.pick(where, allowedKeys);\n                const keys = _.keys(conds);\n                const values = keys.map((key) => this.formatValue(conds[key]));\n\n                const sql = `INSERT INTO banks_mas (${keys.join(', ')}) VALUES (${values.join(', ')}) RETURNING id_bank as insertid, name;`;\n                console.log('Insert query: ', sql);\n\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to update an existing bank.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    update(): object {\n        return {\n            name: `update`,\n            type: `UPDATE`,\n            syntax: (where: any) => {\n                const id = _.get(where, 'id_bank');\n                _.unset(where, 'id_bank');\n                const allowedKeys = [\n                    'name',\n                    'short_name',\n                    'id_city',\n                    'id_state',\n                    'id_country',\n                    'status',\n                    'updated_at',\n                ];\n                const updateData = _.pick(where, allowedKeys);\n\n                const setClauses = Object.keys(updateData).map(\n                    (key) => `${key} = ${this.formatValue(updateData[key])}`\n                );\n                const sql = `UPDATE banks_mas SET ${setClauses.join(', ')} WHERE id_bank = '${id}' AND status = 1 RETURNING id_bank as updatedid, name;`;\n                console.log('Update query: ', sql);\n\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to delete a bank by its ID.\n     * @param {string} id - The ID of the bank to delete.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    delete(): object {\n        return {\n            name: `delete`,\n            type: `UPDATE`,\n            syntax: (id: string) => {\n                const sql = `UPDATE banks_mas SET status = 127 WHERE id_bank = '${id}' RETURNING id_bank as deletedid, name;`;\n                console.log('Delete query: ', sql);\n\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Formats a value for use in an SQL query.\n     * @param value - Value to format\n     * @returns - Formatted value as a string\n     */\n    formatValue(value: any): string {\n        if (Array.isArray(value)) {\n            const formattedArray = value.map((v) => `'${v.replace(/'/g, \"''\")}'`).join(', ');\n            return `'{${formattedArray}}'`;\n        } else if (typeof value === 'string') {\n            return `'${value.replace(/'/g, \"''\")}'`;\n        } else if (value === null || value === undefined) {\n            return 'NULL';\n        } else {\n            return `${value}`; // For numbers and other types\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Query-6.html":{"url":"classes/Query-6.html","title":"class - Query-6","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Query\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/city_mas/query.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the Query class, which provides methods for generating SQL queries\nrelated to city data management.\nThe Query class includes methods to generate SQL queries for operations such as\nretrieving, inserting, updating, and deleting city records from the database.\nIt uses the lodash library for object manipulation and query construction.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                findById\n                            \n                            \n                                findByName\n                            \n                            \n                                formatValue\n                            \n                            \n                                insert\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/city_mas/query.ts:102\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to delete a city by its ID.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, and syntax properties.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findById\n                        \n                    \n                \n            \n            \n                \nfindById()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/city_mas/query.ts:19\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to find a city by its ID.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, and syntax properties.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByName\n                        \n                    \n                \n            \n            \n                \nfindByName()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/city_mas/query.ts:38\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to find a city by its name.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, and syntax properties.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        formatValue\n                        \n                    \n                \n            \n            \n                \nformatValue(value: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/city_mas/query.ts:119\n                        \n                    \n\n\n            \n                \n                        Formats a value for use in an SQL query.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nValue to format\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \nFormatted value as a string\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        insert\n                        \n                    \n                \n            \n            \n                \ninsert()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/city_mas/query.ts:55\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to insert a new city.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, and syntax properties.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/city_mas/query.ts:74\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to update an existing city.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, and syntax properties.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as _ from 'lodash';\n\n/**\n * @fileoverview\n * This file defines the `Query` class, which provides methods for generating SQL queries\n * related to city data management.\n *\n * @module\n * @description\n * The `Query` class includes methods to generate SQL queries for operations such as\n * retrieving, inserting, updating, and deleting city records from the database.\n * It uses the lodash library for object manipulation and query construction.\n */\nexport class Query {\n    /**\n     * Generates a SQL query to find a city by its ID.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    findById(): object {\n        return {\n            name: `findById`,\n            type: `SELECT_ONE`,\n            syntax: (where: any) => {\n                const allowedKeys = ['id_city', 'name', 'id_state', 'id_country', 'status'];\n                const id = _.get(where, 'id');\n                const sql = `SELECT ${allowedKeys.join(', ')} FROM city_mas WHERE status = 1 AND id_city = '${id}';`;\n                console.log('find by id query--' + sql);\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to find a city by its name.\n     * @param {string} [id] - Optional ID to exclude from the search if provided.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    findByName(): object {\n        return {\n            name: `findByName`,\n            type: `SELECT_ONE`,\n            syntax: (where: any) => {\n                const allowedKeys = ['id_city', 'name'];\n                const name = _.get(where, 'name');\n                const sql = `SELECT ${allowedKeys.join(', ')} FROM city_mas WHERE status = 1 AND name = '${name}';`;\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to insert a new city.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    insert(): object {\n        return {\n            name: `insert`,\n            type: `INSERT`,\n            syntax: (where: any) => {\n                const allowedKeys = ['name', 'id_state', 'id_country', 'status'];\n                const conds = _.pick(where, allowedKeys);\n                const keys = _.keys(conds);\n                const sql = `INSERT INTO city_mas (${keys.join(', ')}) VALUES (${keys.map((key) => this.formatValue(conds[key])).join(', ')}) RETURNING id_city as insertid, name;`;\n                console.log('Insert Query-- ' + sql);\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to update an existing city.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    update(): object {\n        return {\n            name: `update`,\n            type: `UPDATE`,\n            syntax: (where: any) => {\n                let sql = `UPDATE city_mas SET `;\n                const id = _.get(where, 'id_city');\n                _.unset(where, 'id_city');\n                const allowedKeys = ['name', 'id_state', 'status', 'updated_at'];\n                where = _.pick(where, allowedKeys);\n\n                const lastKey = Object.keys(where)[Object.keys(where).length - 1];\n                _.mapKeys(where, (value, key) => {\n                    sql += `${key} = ${this.formatValue(value)}`;\n                    sql += lastKey == key ? `` : `, `;\n                });\n                sql += ` WHERE status = 1 AND id_city = '${id}' RETURNING id_city as updatedid, name;`;\n                console.log('Update Query-- ' + sql);\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to delete a city by its ID.\n     * @param {string} id - The ID of the city to delete.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    delete(): object {\n        return {\n            name: `delete`,\n            type: `UPDATE`,\n            syntax: (id: string) => {\n                const sql = `UPDATE city_mas SET status = 127 WHERE status = 1 AND id_city = '${id}' RETURNING id_city as deletedid, name;`;\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Formats a value for use in an SQL query.\n     * @param value - Value to format\n     * @returns - Formatted value as a string\n     */\n\n    formatValue(value: any): string {\n        if (Array.isArray(value)) {\n            const formattedArray = value.map((v) => `${v.replace(/'/g, \"''\")}`).join(', ');\n            return `'{${formattedArray}}'`;\n        } else if (typeof value === 'string') {\n            return `'${value.replace(/'/g, \"''\")}'`;\n        } else if (value === null || value === undefined) {\n            return 'NULL';\n        } else {\n            return `${value}`; // For numbers and other types\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Query-7.html":{"url":"classes/Query-7.html","title":"class - Query-7","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Query\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/country_mas/query.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the Query class, which provides methods for generating SQL queries\nrelated to country data management.\nThe Query class includes methods to generate SQL queries for operations such as\nretrieving, inserting, updating, and deleting country records from the database.\nIt uses the lodash library for object manipulation and query construction.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                findById\n                            \n                            \n                                findByName\n                            \n                            \n                                formatValue\n                            \n                            \n                                insert\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/country_mas/query.ts:107\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to delete a country by its ID.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, and syntax properties.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findById\n                        \n                    \n                \n            \n            \n                \nfindById()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/country_mas/query.ts:20\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to find a country by its ID.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, and syntax properties.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByName\n                        \n                    \n                \n            \n            \n                \nfindByName()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/country_mas/query.ts:39\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to find a country by its name.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, and syntax properties.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        formatValue\n                        \n                    \n                \n            \n            \n                \nformatValue(value: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/country_mas/query.ts:124\n                        \n                    \n\n\n            \n                \n                        Formats a value for use in an SQL query.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nValue to format\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \nFormatted value as a string\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        insert\n                        \n                    \n                \n            \n            \n                \ninsert()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/country_mas/query.ts:56\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to insert a new country.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, and syntax properties.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/country_mas/query.ts:76\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to update an existing country.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, and syntax properties.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as _ from 'lodash';\n\n/**\n * @fileoverview\n * This file defines the `Query` class, which provides methods for generating SQL queries\n * related to country data management.\n *\n * @module\n * @description\n * The `Query` class includes methods to generate SQL queries for operations such as\n * retrieving, inserting, updating, and deleting country records from the database.\n * It uses the lodash library for object manipulation and query construction.\n */\n\nexport class Query {\n    /**\n     * Generates a SQL query to find a country by its ID.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    findById(): object {\n        return {\n            name: `findById`,\n            type: `SELECT_ONE`,\n            syntax: (where: any) => {\n                const allowedKeys = ['id_country', 'name', 'dial_code', 'status'];\n                const id = _.get(where, 'id');\n                console.log('county Id' + id);\n                const sql = `SELECT ${allowedKeys.join(', ')} FROM country_mas  WHERE status = 1 AND id_country = '${id}';`;\n                console.log('FindByid query-- ' + sql);\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to find a country by its name.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    findByName(): object {\n        return {\n            name: `findByName`,\n            type: `SELECT_ONE`,\n            syntax: (where: any) => {\n                const allowedKeys = ['id_country', 'name', 'dial_code'];\n                const name = _.get(where, 'name');\n                const sql = `SELECT ${allowedKeys.join(', ')} FROM country_mas  WHERE status = 1 AND name = '${name}'`;\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to insert a new country.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    insert(): object {\n        return {\n            name: `insert`,\n            type: `INSERT`,\n            syntax: (where: any) => {\n                const allowedKeys = ['name', 'dial_code'];\n                const conds = _.pick(where, allowedKeys);\n                const keys = _.keys(conds);\n                // const values = _.values(conds);\n                const sql = `INSERT INTO country_mas (${keys.join(', ')}) VALUES (${keys.map((key) => this.formatValue(conds[key])).join(', ')}) RETURNING id_country as insertid, name;`;\n                console.log('Insert Query -- ', sql);\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to update an existing country.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    update(): object {\n        return {\n            name: `update`,\n            type: `UPDATE`,\n            syntax: (where: any) => {\n                let sql = `UPDATE country_mas SET `;\n                const id = _.get(where, 'id_country');\n                _.unset(where, 'id_country');\n                const allowedKeys = ['name', 'dial_code', 'status', 'updated_at'];\n                where = _.pick(where, allowedKeys);\n\n                const lastKey = Object.keys(where)[Object.keys(where).length - 1];\n                _.mapKeys(where, (value, key) => {\n                    // sql += `${key} = '${value}'`;\n                    sql += `${key} = ${this.formatValue(value)}`;\n                    sql += lastKey == key ? `` : `, `;\n                });\n                sql += ` WHERE status = 1 AND id_country = '${id}' RETURNING id_country as updatedid, name;`;\n\n                console.log('Update Query --- ', sql);\n\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to delete a country by its ID.\n     * @param {string} id - The ID of the country to delete.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    delete(): object {\n        return {\n            name: `delete`,\n            type: `UPDATE`,\n            syntax: (id: string) => {\n                const sql = `UPDATE country_mas SET status = 127 WHERE status = 1 AND id_country = '${id}' RETURNING id_country as deletedid, name;`;\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Formats a value for use in an SQL query.\n     * @param value - Value to format\n     * @returns - Formatted value as a string\n     */\n\n    formatValue(value: any): string {\n        if (Array.isArray(value)) {\n            const formattedArray = value.map((v) => `${v.replace(/'/g, \"''\")}`).join(', ');\n            return `'{${formattedArray}}'`;\n        } else if (typeof value === 'string') {\n            return `'${value.replace(/'/g, \"''\")}'`;\n        } else if (value === null || value === undefined) {\n            return 'NULL';\n        } else {\n            return `${value}`; // For numbers and other types\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Query-8.html":{"url":"classes/Query-8.html","title":"class - Query-8","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Query\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/documents/query.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the Query class, which provides methods for generating SQL queries\nrelated to document data management.\nThe Query class includes methods to generate SQL queries for operations such as\nretrieving, inserting, updating, and deleting document records from the database.\nIt uses the lodash library for object manipulation and query construction.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                findById\n                            \n                            \n                                findByName\n                            \n                            \n                                formatValue\n                            \n                            \n                                insert\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/documents/query.ts:108\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to delete a document by its ID.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, syntax, and params properties.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findById\n                        \n                    \n                \n            \n            \n                \nfindById()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/documents/query.ts:19\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to find a document by its ID.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, syntax, and params properties.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByName\n                        \n                    \n                \n            \n            \n                \nfindByName()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/documents/query.ts:37\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to find a document by its name.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, syntax, and params properties.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        formatValue\n                        \n                    \n                \n            \n            \n                \nformatValue(value: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/documents/query.ts:125\n                        \n                    \n\n\n            \n                \n                        Formats a value for use in an SQL query.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nValue to format\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \nFormatted value as a string\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        insert\n                        \n                    \n                \n            \n            \n                \ninsert()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/documents/query.ts:55\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to insert a new document.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, syntax, and params properties.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/documents/query.ts:76\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to update an existing document.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, syntax, and params properties.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as _ from 'lodash';\n\n/**\n * @fileoverview\n * This file defines the `Query` class, which provides methods for generating SQL queries\n * related to document data management.\n *\n * @module\n * @description\n * The `Query` class includes methods to generate SQL queries for operations such as\n * retrieving, inserting, updating, and deleting document records from the database.\n * It uses the lodash library for object manipulation and query construction.\n */\nexport class Query {\n    /**\n     * Generates a SQL query to find a document by its ID.\n     * @returns {object} The query configuration object with `name`, `type`, `syntax`, and `params` properties.\n     */\n    findById(): object {\n        return {\n            name: `findById`,\n            type: `SELECT_ONE`,\n            syntax: (where: any) => {\n                const allowedKeys = ['id_document', 'id_document_group', 'name', 'status'];\n                const id = _.get(where, 'id');\n                const sql = `SELECT ${allowedKeys.join(', ')} FROM documents WHERE id_document = '${id}';`;\n                console.log('FindById query: ' + sql);\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to find a document by its name.\n     * @returns {object} The query configuration object with `name`, `type`, `syntax`, and `params` properties.\n     */\n    findByName(): object {\n        return {\n            name: `findByName`,\n            type: `SELECT_ONE`,\n            syntax: (where: any) => {\n                const allowedKeys = ['id_document', 'id_document_group', 'name'];\n                const name = _.get(where, 'name');\n                const sql = `SELECT ${allowedKeys.join(', ')} FROM documents WHERE name = '${name}';`;\n                console.log('FindByName query: ' + sql);\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to insert a new document.\n     * @returns {object} The query configuration object with `name`, `type`, `syntax`, and `params` properties.\n     */\n    insert(): object {\n        return {\n            name: `insert`,\n            type: `INSERT`,\n            syntax: (where: any) => {\n                const allowedKeys = ['id_document_group', 'name', 'status'];\n                const conds = _.pick(where, allowedKeys);\n                const keys = _.keys(conds);\n                //const values = _.values(conds);\n                const values = keys.map((key) => this.formatValue(conds[key]));\n                const sql = `INSERT INTO documents (${keys.join(', ')}) VALUES (${values}) RETURNING id_document as insertid, name;`;\n                console.log('Insert query: ', sql);\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to update an existing document.\n     * @returns {object} The query configuration object with `name`, `type`, `syntax`, and `params` properties.\n     */\n    update(): object {\n        return {\n            name: `update`,\n            type: `UPDATE`,\n            syntax: (where: any) => {\n                const id = _.get(where, 'id_document');\n                _.unset(where, 'id_document');\n                const allowedKeys = [\n                    'id_document_group',\n                    'name',\n                    'status',\n                    'id_updated_by',\n                    'updated_at',\n                ];\n                const updateData = _.pick(where, allowedKeys);\n\n                const setClauses = Object.keys(updateData).map(\n                    (key) => `${key} = ${this.formatValue(updateData[key])}`\n                );\n                const sql = `UPDATE documents SET ${setClauses.join(', ')} WHERE id_document = '${id}' AND status = 1 RETURNING id_document as updatedid, name;`;\n                console.log('Update query: ', sql);\n\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to delete a document by its ID.\n     * @param {string} id - The ID of the document to delete.\n     * @returns {object} The query configuration object with `name`, `type`, `syntax`, and `params` properties.\n     */\n    delete(): object {\n        return {\n            name: `delete`,\n            type: `UPDATE`,\n            syntax: (id: string) => {\n                const sql = `UPDATE documents SET status = 127 WHERE id_document = '${id}' RETURNING id_document as deletedid, name;`;\n                console.log('Delete query: ', sql);\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Formats a value for use in an SQL query.\n     * @param value - Value to format\n     * @returns - Formatted value as a string\n     */\n    formatValue(value: any): string {\n        if (Array.isArray(value)) {\n            const formattedArray = value.map((v) => `'${v.replace(/'/g, \"''\")}'`).join(', ');\n            return `'{${formattedArray}}'`;\n        } else if (typeof value === 'string') {\n            return `'${value.replace(/'/g, \"''\")}'`;\n        } else if (value === null || value === undefined) {\n            return 'NULL';\n        } else {\n            return `${value}`; // For numbers and other types\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Query-9.html":{"url":"classes/Query-9.html","title":"class - Query-9","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Query\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/document_groups/query.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the Query class, which provides methods for generating SQL queries\nrelated to document group data management.\nThe Query class includes methods to generate SQL queries for operations such as\nretrieving, inserting, updating, and deleting document group records from the database.\nIt uses the lodash library for object manipulation and query construction.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                findById\n                            \n                            \n                                findByName\n                            \n                            \n                                formatValue\n                            \n                            \n                                insert\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/document_groups/query.ts:103\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to delete a document group by its ID.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, and syntax properties.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findById\n                        \n                    \n                \n            \n            \n                \nfindById()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/document_groups/query.ts:19\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to find a document group by its ID.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, and syntax properties.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByName\n                        \n                    \n                \n            \n            \n                \nfindByName()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/document_groups/query.ts:37\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to find a document group by its name.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, and syntax properties.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        formatValue\n                        \n                    \n                \n            \n            \n                \nformatValue(value: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/document_groups/query.ts:121\n                        \n                    \n\n\n            \n                \n                        Formats a value for use in an SQL query.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nValue to format\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \nFormatted value as a string\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        insert\n                        \n                    \n                \n            \n            \n                \ninsert()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/document_groups/query.ts:55\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to insert a new document group.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, and syntax properties.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/document_groups/query.ts:77\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to update an existing document group.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, and syntax properties.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as _ from 'lodash';\n\n/**\n * @fileoverview\n * This file defines the `Query` class, which provides methods for generating SQL queries\n * related to document group data management.\n *\n * @module\n * @description\n * The `Query` class includes methods to generate SQL queries for operations such as\n * retrieving, inserting, updating, and deleting document group records from the database.\n * It uses the lodash library for object manipulation and query construction.\n */\nexport class Query {\n    /**\n     * Generates a SQL query to find a document group by its ID.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    findById(): object {\n        return {\n            name: `findById`,\n            type: `SELECT_ONE`,\n            syntax: (where: any) => {\n                const allowedKeys = ['id_document_group', 'name', 'status'];\n                const id = _.get(where, 'id');\n                const sql = `SELECT ${allowedKeys.join(', ')} FROM document_groups WHERE status = 1 AND id_document_group = '${id}';`;\n                console.log('FindById query: ' + sql);\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to find a document group by its name.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    findByName(): object {\n        return {\n            name: `findByName`,\n            type: `SELECT_ONE`,\n            syntax: (where: any) => {\n                const allowedKeys = ['id_document_group', 'name'];\n                const name = _.get(where, 'name');\n                const sql = `SELECT ${allowedKeys.join(', ')} FROM document_groups WHERE status = 1 AND name = '${name}';`;\n                console.log('FindByName query: ' + sql);\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to insert a new document group.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    insert(): object {\n        return {\n            name: `insert`,\n            type: `INSERT`,\n            syntax: (where: any) => {\n                const allowedKeys = ['name', 'status'];\n                const conds = _.pick(where, allowedKeys);\n                const keys = _.keys(conds);\n                const values = keys.map((key) => this.formatValue(conds[key]));\n\n                const sql = `INSERT INTO document_groups (${keys.join(', ')}) VALUES (${values.join(', ')}) RETURNING id_document_group as insertid, name;`;\n                console.log('Insert query: ', sql);\n\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to update an existing document group.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    update(): object {\n        return {\n            name: `update`,\n            type: `UPDATE`,\n            syntax: (where: any) => {\n                const id = _.get(where, 'id_document_group');\n                _.unset(where, 'id_document_group');\n                const allowedKeys = ['name', 'status', 'updated_at'];\n                const updateData = _.pick(where, allowedKeys);\n\n                const setClauses = Object.keys(updateData).map(\n                    (key) => `${key} = ${this.formatValue(updateData[key])}`\n                );\n                const sql = `UPDATE document_groups SET ${setClauses.join(', ')} WHERE id_document_group = '${id}' AND status = 1 RETURNING id_document_group as updatedid, name;`;\n                console.log('Update query: ', sql);\n\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to delete a document group by its ID.\n     * @param {string} id - The ID of the document group to delete.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    delete(): object {\n        return {\n            name: `delete`,\n            type: `UPDATE`,\n            syntax: (id: string) => {\n                const sql = `UPDATE document_groups SET status = 127 WHERE id_document_group = '${id}' RETURNING id_document_group as deletedid, name;`;\n                console.log('Delete query: ', sql);\n\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Formats a value for use in an SQL query.\n     * @param value - Value to format\n     * @returns - Formatted value as a string\n     */\n    formatValue(value: any): string {\n        if (Array.isArray(value)) {\n            const formattedArray = value.map((v) => `'${v.replace(/'/g, \"''\")}'`).join(', ');\n            return `'{${formattedArray}}'`;\n        } else if (typeof value === 'string') {\n            return `'${value.replace(/'/g, \"''\")}'`;\n        } else if (value === null || value === undefined) {\n            return 'NULL';\n        } else {\n            return `${value}`; // For numbers and other types\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/QueryConfig.html":{"url":"interfaces/QueryConfig.html","title":"interface - QueryConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  QueryConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/helper/services/comman.query.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            syntax\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        syntax\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        syntax:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as _ from 'lodash';\n\n/**\n * CommonQuery\n *\n * @description\n * A generic class to handle SQL queries for different models. It provides methods for\n * finding, inserting, updating, and deleting records using DTOs.\n */\nexport class CommonQuery1 {\n    private model: string; // The name of the database table/model\n    private allowedKeys: (keyof T)[]; // List of keys that can be used in queries\n\n    /**\n     * Constructor to initialize the CommonQuery class.\n     * @param model - The name of the model/table for queries.\n     * @param allowedKeys - The keys of the DTO that are allowed in queries.\n     */\n    constructor(model: string, allowedKeys: (keyof T)[]) {\n        this.model = model;\n        this.allowedKeys = allowedKeys;\n    }\n\n    /**\n     * Generates a SQL query to find a record by ID.\n     * @returns An object containing the query configuration for finding by ID.\n     */\n    findById(): object {\n        return this.createQuery(\n            'SELECT_ONE',\n            (id: number) => `\n            SELECT ${this.allowedKeys.join(', ')}\n            FROM ${this.model} AS main\n            WHERE main.status = 1 AND main.id = ${this.formatValue(id)};\n        `\n        );\n    }\n\n    /**\n     * Generates a SQL query to insert a new record.\n     * @returns An object containing the query configuration for inserting a record.\n     */\n    insert(): object {\n        return this.createQuery('INSERT', (dto: T) => {\n            const conds = _.pick(dto, this.allowedKeys);\n            const keys = Object.keys(conds);\n            const values = keys.map((key) => this.formatValue(conds[key]));\n\n            return `\n                INSERT INTO ${this.model} (${keys.join(', ')})\n                VALUES (${values.join(', ')}) RETURNING *;\n            `;\n        });\n    }\n\n    /**\n     * Generates a SQL query to update an existing record.\n     * @returns An object containing the query configuration for updating a record.\n     */\n    update(): object {\n        return this.createQuery('UPDATE', (dto: T) => {\n            const id = _.get(dto, 'id');\n            _.unset(dto, 'id'); // Remove the ID for the update\n            const updateData = _.pick(dto, this.allowedKeys);\n\n            const setClauses = Object.entries(updateData)\n                .map(([key, value]) => `${key} = ${this.formatValue(value)}`)\n                .join(', ');\n\n            return `\n                UPDATE ${this.model}\n                SET ${setClauses}\n                WHERE id = ${this.formatValue(id)} RETURNING *;\n            `;\n        });\n    }\n\n    /**\n     * Generates a SQL query to delete a record by ID.\n     * @returns An object containing the query configuration for deleting a record.\n     */\n    delete(): object {\n        return this.createQuery(\n            'UPDATE',\n            (id: number) => `\n            UPDATE ${this.model}\n            SET status = 127\n            WHERE id = ${this.formatValue(id)} RETURNING *;\n        `\n        );\n    }\n\n    /**\n     * Finds records with dynamic joins, automatically creating aliases for each table.\n     * Allows specifying fields to select from joined tables.\n     * @param joins - An array of objects containing the table name, join condition, join type, and selected fields.\n     * @returns An object containing the query configuration for finding with joins.\n     */\n    findWithDynamicJoin(\n        joins: Array\n    ): object {\n        return this.createQuery('SELECT_WITH_DYNAMIC_JOIN', (id: number) => {\n            const fields = this.allowedKeys.join(', ');\n            const joinClauses = joins\n                .map((join, index) => {\n                    const alias = `table${index + 1}`; // Create an alias like table1, table2, etc.\n                    const joinType = join.type ? join.type : 'JOIN'; // Default to INNER JOIN if no type is specified\n\n                    // Select specific fields from the joined table\n                    const selectFields = join.selectFields\n                        ? join.selectFields.map((field) => `${alias}.${field}`).join(', ')\n                        : '';\n                    return `${joinType} ${join.table} AS ${alias} ON ${join.condition}${selectFields ? `, ${selectFields}` : ''}`;\n                })\n                .join(' ');\n\n            return `\n                SELECT ${fields}, ${joins.map((join, index) => (join.selectFields ? join.selectFields.map((field) => `table${index + 1}.${field}`).join(', ') : '')).join(', ')}\n                FROM ${this.model} AS main\n                ${joinClauses}\n                WHERE main.status = 1 AND main.id = ${this.formatValue(id)};\n            `;\n        });\n    }\n\n    /**\n     * Creates a query object with a specific type and syntax generator.\n     * @param type - The type of query (e.g., SELECT_ONE, INSERT).\n     * @param syntaxGenerator - A function that generates the SQL syntax.\n     * @returns An object containing the query configuration.\n     */\n    private createQuery(type: string, syntaxGenerator: (arg: any) => string): object {\n        return {\n            name: type.toLowerCase(),\n            type,\n            syntax: syntaxGenerator,\n        };\n    }\n\n    /**\n     * Formats a value for safe SQL query insertion.\n     * @param value - The value to format.\n     * @returns A string representation of the formatted value.\n     */\n    private formatValue(value: any): string {\n        if (Array.isArray(value)) {\n            const formattedArray = value.map((v) => `'${v.replace(/'/g, \"''\")}'`).join(', ');\n            return `'{${formattedArray}}'`;\n        } else if (typeof value === 'string') {\n            return `'${value.replace(/'/g, \"''\")}'`;\n        } else if (value === null || value === undefined) {\n            return 'NULL';\n        } else {\n            return `${value}`; // For numbers and other types\n        }\n    }\n    // commonQuery = new CommonQuery('your_table', ['id', 'name', 'status']);\n    // queryConfig = commonQuery.findWithDynamicJoin([\n    //     {\n    //         table: 'another_table',\n    //         condition: 'another_table.foreign_key = main.id',\n    //         type: 'LEFT JOIN',\n    //         selectFields: ['field1', 'field2'], // Specify fields to select from another_table\n    //     },\n    //     {\n    //         table: 'yet_another_table',\n    //         condition: 'yet_another_table.foreign_key = main.id',\n    //         selectFields: ['field3', 'field4'], // Specify fields to select from yet_another_table\n    //     },\n    // ]);\n}\n/**\n * CommonQuery\n *\n * @description\n * A generic class to handle SQL queries for different models. It provides methods for\n * finding, inserting, updating, and deleting records using DTOs.\n */\n\n/**\n * CommonQuery\n *\n * @description\n * A generic class to handle SQL queries for different models. It provides methods for\n * finding, inserting, updating, and deleting records using DTOs.\n */\nexport class CommonQuery5 {\n    private model: string; // The name of the database table/model\n    private allowedKeys: (keyof T)[]; // List of keys that can be used in queries\n\n    /**\n     * Constructor to initialize the CommonQuery class.\n     * @param model - The name of the model/table for queries.\n     * @param allowedKeys - The keys of the DTO that are allowed in queries.\n     */\n    constructor(model: string, allowedKeys: (keyof T)[]) {\n        this.model = model;\n        this.allowedKeys = allowedKeys;\n    }\n\n    /**\n     * Finds records with dynamic joins, automatically creating aliases for each table.\n     * @param joins - An array of objects containing the table name, join condition, join type, and selected fields.\n     * @returns An object containing the query configuration for finding with joins.\n     */\n    findWithDynamicJoin(\n        joins: Array\n    ): object {\n        return this.createQuery('SELECT_WITH_DYNAMIC_JOIN', (id: number) => {\n            const fields = this.allowedKeys.join(', ');\n            const mainAlias = 'main'; // Alias for the main table\n            const joinClauses = joins\n                .map((join, index) => {\n                    const joinAlias = `table${index + 1}`; // Create an alias like table1, table2, etc.\n                    const joinType = join.type ? join.type : 'JOIN'; // Default to INNER JOIN if no type is specified\n\n                    // Split the condition to derive the join fields\n                    const [foreignKey, mainField] = join.condition\n                        .split('=')\n                        .map((part) => part.trim());\n                    const condition = `${join.table}.${foreignKey} = ${mainAlias}.${mainField}`;\n\n                    return `${joinType} ${join.table} AS ${joinAlias} ON ${condition}`;\n                })\n                .join(' ');\n\n            return `\n                SELECT ${fields}, \n                ${joins\n                    .map((join, index) => {\n                        const alias = `table${index + 1}`;\n                        return join.selectFields\n                            ? join.selectFields.map((field) => `${alias}.${field}`).join(', ')\n                            : '';\n                    })\n                    .filter((field) => field)\n                    .join(', ')} \n                FROM ${this.model} AS ${mainAlias}\n                ${joinClauses}\n                WHERE ${mainAlias}.status = 1 AND ${mainAlias}.id = ${this.formatValue(id)};\n            `;\n        });\n    }\n\n    findWithDynamicJoin1(\n        joins: Array,\n        additionalConditions?: string // Additional dynamic WHERE conditions\n    ): QueryConfig {\n        // Specify the return type\n        return {\n            name: `SELECT_WITH_DYNAMIC_JOIN`,\n            type: `join`,\n            syntax: (id: number) => {\n                // Accept id as a parameter\n                const fields = this.allowedKeys.join(', ');\n                const mainAlias = 'main'; // Alias for the main table\n                const joinClauses = joins\n                    .map((join, index) => {\n                        const joinAlias = `table${index + 1}`; // Create an alias like table1, table2, etc.\n                        const joinType = join.type ? join.type : 'JOIN'; // Default to INNER JOIN if no type is specified\n\n                        // Split the condition to derive the join fields\n                        const [foreignKey, mainField] = join.condition\n                            .split('=')\n                            .map((part) => part.trim());\n                        const condition = `${join.table}.${foreignKey} = ${mainAlias}.${mainField}`;\n\n                        return `${joinType} ${join.table} AS ${joinAlias} ON ${condition}`;\n                    })\n                    .join(' ');\n\n                // Start building the WHERE clause\n                const baseWhere = `${mainAlias}.status = 1 AND ${mainAlias}.id = ${this.formatValue(id)}`;\n                const dynamicWhere = additionalConditions ? `AND ${additionalConditions}` : '';\n\n                return `\n            SELECT ${fields}, \n            ${joins\n                .map((join, index) => {\n                    const alias = `table${index + 1}`;\n                    return join.selectFields\n                        ? join.selectFields.map((field) => `${alias}.${field}`).join(', ')\n                        : '';\n                })\n                .filter((field) => field)\n                .join(', ')} \n            FROM ${this.model} AS ${mainAlias}\n            ${joinClauses}\n            WHERE ${baseWhere} ${dynamicWhere};\n            `;\n            },\n        };\n    }\n\n    findWithDynamicJoin2(\n        joins: Array,\n        additionalConditions?: string // Additional dynamic WHERE conditions\n    ): QueryConfig {\n        return {\n            name: `SELECT_WITH_DYNAMIC_JOIN`,\n            type: `join,`,\n            syntax: () => {\n                const mainAlias = 'main';\n                // const fields = this.allowedKeys.join(', ');\n                const fields = this.allowedKeys\n                    .map((field) => `${mainAlias}.${String(field)}`) // Ensure conversion to string\n                    .join(', '); // Alias for the main table\n                const joinClauses = joins\n                    .map((join, index) => {\n                        const joinAlias = `table${index + 1}`; // Create an alias like table1, table2, etc.\n                        const joinType = join.type ? join.type : 'JOIN'; // Default to INNER JOIN if no type is specified\n\n                        // Split the condition to derive the join fields\n                        const [foreignKey, mainField] = join.condition\n                            .split('=')\n                            .map((part) => part.trim());\n                        const condition = `${joinAlias}.${foreignKey} = ${mainAlias}.${mainField}`;\n\n                        return `${joinType} ${join.table} AS ${joinAlias} ON ${condition}`;\n                    })\n                    .join(' ');\n\n                // Start building the WHERE clause\n                const baseWhere = `${mainAlias}.status = 1`;\n                const dynamicWhere = additionalConditions ? `AND ${additionalConditions}` : '';\n\n                return `\n            SELECT ${fields}, \n            ${joins\n                .map((join, index) => {\n                    const alias = `table${index + 1}`;\n                    return join.selectFields\n                        ? join.selectFields.map((field) => `${alias}.${field}`).join(', ')\n                        : '';\n                })\n                .filter((field) => field)\n                .join(', ')} \n            FROM ${this.model} AS ${mainAlias}\n            ${joinClauses}\n            WHERE ${baseWhere} ${dynamicWhere};\n        `;\n            },\n        };\n    }\n    findWithDynamicJoin3(\n        joins: Array,\n        baseAdditionalConditions?: string // Additional conditions for the main WHERE clause\n    ): QueryConfig {\n        return {\n            name: `SELECT_WITH_DYNAMIC_JOIN`,\n            type: `join`,\n            syntax: () => {\n                const mainAlias = 'main';\n                const fields = this.allowedKeys\n                    .map((field) => `${mainAlias}.${String(field)}`)\n                    .join(', ');\n\n                const joinClauses = joins\n                    .map((join, index) => {\n                        const joinAlias = `table${index + 1}`;\n                        const joinType = join.type ? join.type : 'JOIN';\n\n                        const [foreignKey, mainField] = join.condition\n                            .split('=')\n                            .map((part) => part.trim());\n                        const condition = `${joinAlias}.${foreignKey} = ${mainAlias}.${mainField}`;\n\n                        // Add dynamic conditions for the current join\n                        const dynamicJoinConditions = join.additionalConditions\n                            ? join.additionalConditions\n                                  .map((cond) => `${joinAlias}.${cond}`)\n                                  .join(' AND ')\n                            : '';\n\n                        return `${joinType} ${join.table} AS ${joinAlias} ON ${condition}${dynamicJoinConditions ? ' AND ' + dynamicJoinConditions : ''}`;\n                    })\n                    .join(' ');\n\n                // Base where clause\n                const baseWhere = `${mainAlias}.status = 1`;\n                const dynamicWhere = baseAdditionalConditions\n                    ? `AND ${baseAdditionalConditions}`\n                    : '';\n\n                return `\n            SELECT ${fields}, \n            ${joins\n                .map((join, index) => {\n                    const alias = `table${index + 1}`;\n                    return join.selectFields\n                        ? join.selectFields.map((field) => `${alias}.${field}`).join(', ')\n                        : '';\n                })\n                .filter((field) => field)\n                .join(', ')} \n            FROM ${this.model} AS ${mainAlias}\n            ${joinClauses}\n            WHERE ${baseWhere} ${dynamicWhere};\n        `;\n            },\n        };\n    }\n\n    /**\n     * Creates a query object with a specific type and syntax generator.\n     * @param type - The type of query (e.g., SELECT_ONE, INSERT).\n     * @param syntaxGenerator - A function that generates the SQL syntax.\n     * @returns An object containing the query configuration.\n     */\n    private createQuery(type: string, syntaxGenerator: (arg: any) => string): object {\n        return {\n            name: type.toLowerCase(),\n            type,\n            syntax: syntaxGenerator, // This is a function\n        };\n    }\n\n    // private createQuery(type: string, syntaxGenerator: (arg: any) => string): object {\n    //     return {\n    //         name: type.toLowerCase(),\n    //         type,\n    //         syntax: syntaxGenerator,\n    //     };\n    // }\n\n    /**\n     * Formats a value for safe SQL query insertion.\n     * @param value - The value to format.\n     * @returns A string representation of the formatted value.\n     */\n    private formatValue(value: any): string {\n        if (Array.isArray(value)) {\n            const formattedArray = value.map((v) => `'${v.replace(/'/g, \"''\")}'`).join(', ');\n            return `'{${formattedArray}}'`;\n        } else if (typeof value === 'string') {\n            return `'${value.replace(/'/g, \"''\")}'`;\n        } else if (value === null || value === undefined) {\n            return 'NULL';\n        } else {\n            return `${value}`; // For numbers and other types\n        }\n    }\n    // commonQuery = new CommonQuery('your_table', ['id', 'name', 'status']);\n    // queryConfig = commonQuery.findWithDynamicJoin([\n    //     {\n    //         table: 'another_table',\n    //         condition: 'foreign_key=id', // Specify the join condition\n    //         type: 'LEFT JOIN',\n    //         selectFields: ['field1', 'field2'], // Specify fields to select from another_table\n    //     },\n    //     {\n    //         table: 'yet_another_table',\n    //         condition: 'foreign_key=id', // Specify the join condition\n    //         selectFields: ['field3', 'field4'], // Specify fields to select from yet_another_table\n    //     },\n    // ]);\n}\ninterface QueryConfig {\n    name: string;\n    type: string;\n    syntax: (id: number) => string; // Method to generate SQL\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QueryCountryDto.html":{"url":"classes/QueryCountryDto.html","title":"class - QueryCountryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QueryCountryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/countries/dto/query-country.dto-remove.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                filters\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                sort\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        filters\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FilterCountryDto | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: String})@IsOptional()@Transform( => )@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/query-country.dto-remove.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@Transform( => )@IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/query-country.dto-remove.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@Transform( => )@IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/query-country.dto-remove.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        sort\n                        \n                    \n                \n            \n                \n                    \n                        Type :     SortCountryDto[] | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: String})@IsOptional()@Transform( => )@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/query-country.dto-remove.ts:50\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nimport { Transform, Type, plainToInstance } from 'class-transformer';\nimport { IsNumber, IsOptional, IsString, ValidateNested } from 'class-validator';\n\nimport { Country } from './country';\n\nexport class FilterCountryDto {}\n\nexport class SortCountryDto {\n    @ApiProperty()\n    @Type(() => String)\n    @IsString()\n    orderBy: keyof Country;\n\n    @ApiProperty()\n    @IsString()\n    order: string;\n}\n\nexport class QueryCountryDto {\n    @ApiPropertyOptional()\n    @Transform(({ value }) => (value ? Number(value) : 1))\n    @IsNumber()\n    @IsOptional()\n    page?: number;\n\n    @ApiPropertyOptional()\n    @Transform(({ value }) => (value ? Number(value) : 10))\n    @IsNumber()\n    @IsOptional()\n    limit?: number;\n\n    @ApiPropertyOptional({ type: String })\n    @IsOptional()\n    @Transform(({ value }) =>\n        value ? plainToInstance(FilterCountryDto, JSON.parse(value)) : undefined\n    )\n    @ValidateNested()\n    @Type(() => FilterCountryDto)\n    filters?: FilterCountryDto | null;\n\n    @ApiPropertyOptional({ type: String })\n    @IsOptional()\n    @Transform(({ value }) => {\n        return value ? plainToInstance(SortCountryDto, JSON.parse(value)) : undefined;\n    })\n    @ValidateNested({ each: true })\n    @Type(() => SortCountryDto)\n    sort?: SortCountryDto[] | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QueryFailedFilter.html":{"url":"classes/QueryFailedFilter.html","title":"class - QueryFailedFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QueryFailedFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/query-failed.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                Exception filter for handling database query failures.\nThis filter catches exceptions related to failed database queries and formats\nthe response based on the type of database constraint error.\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                reflector\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/query-failed.filter.ts:26\n                            \n                        \n\n                \n                    \n                            Creates an instance of QueryFailedFilter.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The reflector instance used for metadata reflection.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        reflector\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Reflector\n\n                    \n                \n                    \n                        \n                                Defined in src/core/filters/query-failed.filter.ts:34\n                        \n                    \n\n            \n                \n                    The reflector instance used for metadata reflection.\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: any, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/filters/query-failed.filter.ts:45\n                        \n                    \n\n\n            \n                \n                        Handles the database query failure exception and formats the error response.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The exception thrown by a failed database query.\n\n                                            \n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The arguments host for accessing request and response objects.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { STATUS_CODES } from 'http';\n\nimport { ArgumentsHost, ExceptionFilter, HttpStatus, Logger } from '@nestjs/common'; // Catch\nimport { Reflector } from '@nestjs/core';\n\nimport { Response } from 'express';\n// import { QueryFailedError } from \"typeorm\";\n// import * as _ from 'lodash';\n\n// import { PgSQLService } from \"../common/shared/services/pgsql.service\";\nimport { constraintErrors } from './constraint-errors';\n// import { Query } from './query';\n\n/**\n * Exception filter for handling database query failures.\n *\n * This filter catches exceptions related to failed database queries and formats\n * the response based on the type of database constraint error.\n *\n * @export\n * @class QueryFailedFilter\n * @implements {ExceptionFilter}\n */\n\n// @Catch(QueryFailedError)\nexport class QueryFailedFilter implements ExceptionFilter {\n    /**\n     * Creates an instance of QueryFailedFilter.\n     * @param {Reflector} reflector The reflector instance used for metadata reflection.\n     *\n     * @memberof QueryFailedFilter\n     */\n\n    constructor(public reflector: Reflector) {}\n\n    /**\n     * Handles the database query failure exception and formats the error response.\n     *\n     * @param {any} exception The exception thrown by a failed database query.\n     * @param {ArgumentsHost} host The arguments host for accessing request and response objects.\n     *\n     * @memberof QueryFailedFilter\n     */\n\n    catch(exception: any, host: ArgumentsHost) {\n        console.log('QUERY FAIL from filter');\n        const ctx = host.switchToHttp();\n        const response = ctx.getResponse();\n        const request = ctx.getRequest();\n\n        const errorMessage = constraintErrors[exception.constraint];\n\n        const status =\n            exception.constraint && exception.constraint.startsWith('UQ')\n                ? HttpStatus.CONFLICT\n                : HttpStatus.INTERNAL_SERVER_ERROR;\n\n        const errorResponse = {\n            message: exception.sqlMessage,\n            query: exception.query,\n        };\n\n        try {\n            Logger.error(\n                `${request.method} ${request.url}`,\n                JSON.stringify(errorResponse),\n                'ExceptionFilter'\n            );\n\n            // const sqlService = new PgSQLService();\n            // const query = new Query();\n            // const reqstr = JSON.stringify(_.clone(request.body));\n            // const resstr = JSON.stringify(_.clone(errorResponse));\n            // sqlService.run(query.addQueryError(\"DBQuery\", request.method, request.url, reqstr, resstr));\n        } catch (error) {\n            Logger.error(\n                `${request.method} ${request.url}`,\n                JSON.stringify(errorResponse),\n                'ExceptionFilter'\n            );\n        }\n        response.status(status).json({\n            statusCode: status,\n            error: STATUS_CODES[status],\n            message: errorMessage,\n        });\n    }\n}\n\n// import { ArgumentsHost, Catch, ExceptionFilter, HttpException, HttpStatus } from '@nestjs/common';\n// import { Response } from 'express';\n// import { Prisma } from '@prisma/client';\n\n// @Catch(Prisma.PrismaClientKnownRequestError)\n// export class PrismaClientExceptionFilter implements ExceptionFilter {\n//   catch(exception: Prisma.PrismaClientKnownRequestError, host: ArgumentsHost) {\n//     const ctx = host.switchToHttp();\n//     const response = ctx.getResponse();\n//     const status = HttpStatus.INTERNAL_SERVER_ERROR;\n\n//     let message = exception.message;\n\n//     // Handle specific Prisma errors\n//     if (exception.code === 'P2002') {\n//       message = 'Unique constraint failed';\n//     }\n\n//     response.status(status).json({\n//       statusCode: status,\n//       message,\n//     });\n//   }\n// }\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/QueryOptions.html":{"url":"interfaces/QueryOptions.html","title":"interface - QueryOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  QueryOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/providers/dynamic-query.service-to-be-remove.ts\n        \n\n\n            \n                Description\n            \n            \n                Options for building queries.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            conditions\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            deleteType\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            fields\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            joins\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            optionalConditions\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            queryName\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            queryType\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            returningFields\n                                        \n                                \n                                \n                                        \n                                            table\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            values\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        conditions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        conditions:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Conditions for the query (e.g., WHERE clauses).\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        deleteType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        deleteType:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Type of delete operation ('soft' or 'hard').\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fields\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fields:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    List of fields to include in the query (e.g., columns for SELECT, INSERT, or UPDATE).\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        joins\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        joins:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Join clauses to include in the query.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        optionalConditions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        optionalConditions:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional conditions for the query.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        queryName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        queryName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Name of the query.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        queryType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        queryType:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Type of the query (e.g., INSERT, SELECT, UPDATE, DELETE).\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        returningFields\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        returningFields:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Fields to return from the query.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        table\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        table:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Name of the table to perform the query on.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        values\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        values:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Values to be used in the query (e.g., for INSERT or UPDATE operations).\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import * as _ from 'lodash';\n\n/**\n * Options for building queries.\n *\n * @export\n * @interface QueryOptions\n */\n\nexport interface QueryOptions {\n    /**\n     * Name of the query.\n     *\n     * @type {string}\n     * @memberof QueryOptions\n     */\n\n    queryName?: string;\n\n    /**\n     * Type of the query (e.g., INSERT, SELECT, UPDATE, DELETE).\n     *\n     * @type {string}\n     * @memberof QueryOptions\n     */\n\n    queryType?: string;\n\n    /**\n     * Name of the table to perform the query on.\n     *\n     * @type {string}\n     * @memberof QueryOptions\n     */\n\n    table: string;\n\n    /**\n     * List of fields to include in the query (e.g., columns for SELECT, INSERT, or UPDATE).\n     *\n     * @type {string[]}\n     * @memberof QueryOptions\n     */\n\n    fields?: string[];\n\n    /**\n     * Values to be used in the query (e.g., for INSERT or UPDATE operations).\n     *\n     * @type {Record}\n     * @memberof QueryOptions\n     */\n\n    values?: Record;\n\n    /**\n     * Conditions for the query (e.g., WHERE clauses).\n     *\n     * @type {Record}\n     * @memberof QueryOptions\n     */\n\n    conditions?: Record;\n\n    /**\n     * Optional conditions for the query.\n     *\n     * @type {Record}\n     * @memberof QueryOptions\n     */\n\n    optionalConditions?: Record;\n\n    /**\n     * Join clauses to include in the query.\n     *\n     * @type {string[]}\n     * @memberof QueryOptions\n     */\n\n    joins?: string[];\n\n    /**\n     * Fields to return from the query.\n     *\n     * @type {string[]}\n     * @memberof QueryOptions\n     */\n\n    returningFields?: string[];\n\n    /**\n     * Type of delete operation ('soft' or 'hard').\n     *\n     * @type {string}\n     * @memberof QueryOptions\n     */\n    deleteType?: string;\n}\n\n/**\n * Class to build dynamic SQL queries.\n *\n * @export\n * @class DynamicQueryBuilder\n */\nexport class DynamicQueryBuilder {\n    /**\n     * Builds an INSERT SQL query.\n     *\n     * @param {QueryOptions} options - Options for the INSERT query.\n     * @returns {object} - An object containing the query name, type, and the SQL syntax.\n     * @memberof DynamicQueryBuilder\n     */\n\n    buildInsertQuery(options: QueryOptions): object {\n        const { queryName, queryType, fields, table, values = {}, returningFields = [] } = options;\n        const conds = _.pick(values, fields);\n        const keys = _.keys(conds);\n        const vals = _.values(conds);\n\n        const returningClause = returningFields.length\n            ? `RETURNING ${returningFields.join(', ')}`\n            : '';\n\n        const sql = `INSERT INTO ${table} (${keys.join()}) VALUES ('${vals.join(\"','\")}') ${returningClause};`;\n\n        return {\n            name: queryName ? queryName : 'add',\n            type: queryType ? queryType : 'INSERT',\n            syntax: () => {\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Builds a SELECT SQL query.\n     *\n     * @param {QueryOptions} options - Options for the SELECT query.\n     * @returns {object} - An object containing the query name, type, and the SQL syntax.\n     * @memberof DynamicQueryBuilder\n     */\n\n    buildSelectQuery(options: QueryOptions): object {\n        const {\n            queryName,\n            queryType,\n            table,\n            fields = ['*'],\n            conditions = {},\n            joins = [],\n            optionalConditions = null,\n        } = options;\n\n        const whereClauses = Object.keys(conditions).map((key) => {\n            const value = conditions[key];\n            return typeof value === 'string' ? `${key} = '${value}'` : `${key} = ${value}`;\n        });\n\n        if (optionalConditions) {\n            // Adding optional conditions dynamically\n            Object.keys(optionalConditions).forEach((key) => {\n                const value = optionalConditions[key];\n                if (value) {\n                    whereClauses.push(\n                        typeof value === 'string' ? `${key} != '${value}'` : `${key} != ${value}`\n                    );\n                }\n            });\n        }\n\n        const whereClause = whereClauses.length ? `WHERE ${whereClauses.join(' AND ')}` : '';\n        const joinClause = joins.length ? joins.join(' ') : '';\n\n        const sql = `SELECT ${fields.join(', ')} FROM ${table} ${joinClause} ${whereClause}`;\n\n        return {\n            name: queryName ? queryName : 'find',\n            type: queryType ? queryType : 'SELECT_ONE',\n            syntax: () => {\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Builds an UPDATE SQL query.\n     *\n     * @param {QueryOptions} options - Options for the UPDATE query.\n     * @returns {object} - An object containing the query name, type, SQL syntax, and values to be used.\n     * @memberof DynamicQueryBuilder\n     */\n\n    buildUpdateQuery(options: QueryOptions): object {\n        const { table, values = {}, conditions = {}, returningFields = [] } = options;\n\n        const setClauses = Object.keys(values).map((key, index) => `${key} = $${index + 1}`);\n        const whereClauses = Object.keys(conditions).map(\n            (key, index) => `${key} = $${index + Object.keys(values).length + 1}`\n        );\n\n        const returningClause = returningFields.length\n            ? `RETURNING ${returningFields.join(', ')}`\n            : '';\n\n        const sql = `UPDATE ${table} SET ${setClauses.join(', ')} WHERE ${whereClauses.join(' AND ')} ${returningClause};`;\n\n        return {\n            name: 'update',\n            type: 'UPDATE',\n            sql,\n            values: [...Object.values(values), ...Object.values(conditions)],\n        };\n    }\n\n    //     return {\n    //   name: `delete`,\n    //   type: `UPDATE`,\n    //   syntax: (idArea: number) => {\n    //     const sql = `UPDATE Area SET Status = 127 WHERE Status = 1 AND idArea = ${idArea}`;\n\n    //     return sql;\n    //   },\n    // };\n\n    /**\n     * Builds a DELETE SQL query.\n     *\n     * @param {QueryOptions} options - Options for the DELETE query.\n     * @returns {object} - An object containing the query name, type, and the SQL syntax.\n     * @memberof DynamicQueryBuilder\n     */\n\n    buildDeleteQuery(options: QueryOptions): object {\n        const {\n            queryName,\n            queryType,\n            table,\n            conditions = {},\n            optionalConditions = null,\n            joins = [],\n            returningFields = [],\n            deleteType = 'soft',\n        } = options;\n\n        const whereClauses = Object.keys(conditions).map((key) => {\n            const value = conditions[key];\n            return typeof value === 'string' ? `${key} = '${value}'` : `${key} = ${value}`;\n        });\n\n        if (optionalConditions) {\n            // Adding optional conditions dynamically\n            Object.keys(optionalConditions).forEach((key) => {\n                const value = optionalConditions[key];\n                if (value) {\n                    whereClauses.push(\n                        typeof value === 'string' ? `${key} != '${value}'` : `${key} != ${value}`\n                    );\n                }\n            });\n        }\n\n        const whereClause = whereClauses.length ? `WHERE ${whereClauses.join(' AND ')}` : '';\n        const joinClause = joins.length ? joins.join(' ') : '';\n\n        // const whereClauses = Object.keys(conditions).map((key, index) => `${key} = $${index + 1}`);\n        // const whereClause = whereClauses.length ? `WHERE ${whereClauses.join(' AND ')}` : '';\n\n        const returningClause = returningFields.length\n            ? `RETURNING ${returningFields.join(', ')}`\n            : '';\n\n        let sql: string;\n        if (deleteType === 'soft') {\n            sql = `UPDATE ${table} SET status = 127 ${whereClause} ${returningClause};`;\n        } else {\n            sql = `DELETE FROM ${table} ${joinClause} ${whereClause} ${returningClause};`;\n        }\n\n        console.log('QQQQQQQQQQQQQQQQQQQQ', sql);\n\n        return {\n            name: queryName ? queryName : 'delete',\n            type: queryType ? queryType : 'DELETE',\n            syntax: () => {\n                return sql;\n            },\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ResolvePromisesInterceptor.html":{"url":"injectables/ResolvePromisesInterceptor.html","title":"injectable - ResolvePromisesInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ResolvePromisesInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/serializer.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                Interceptor that resolves all nested promises in the response data.\nThis interceptor is designed to be used within a NestJS application to ensure that any promises\nwithin the response data are fully resolved before the response is sent to the client.\nIt uses the deepResolvePromises function to recursively handle promises in nested structures.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/serializer.interceptor.ts:30\n                        \n                    \n\n\n            \n                \n                        Intercepts the request and resolves nested promises in the response data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe execution context of the request.\n\n\n                                            \n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe handler for the request.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable<>\n\n                        \n                            \n                                \nAn observable that emits the resolved data.\n\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestInterceptor, ExecutionContext, CallHandler } from '@nestjs/common';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport deepResolvePromises from './deep-resolver';\n\n/**\n * Interceptor that resolves all nested promises in the response data.\n *\n * This interceptor is designed to be used within a NestJS application to ensure that any promises\n * within the response data are fully resolved before the response is sent to the client.\n * It uses the `deepResolvePromises` function to recursively handle promises in nested structures.\n *\n * @export\n * @class ResolvePromisesInterceptor\n * @implements {NestInterceptor}\n */\n\n@Injectable()\nexport class ResolvePromisesInterceptor implements NestInterceptor {\n    /**\n     * Intercepts the request and resolves nested promises in the response data.\n     *\n     * @param {ExecutionContext} context - The execution context of the request.\n     * @param {CallHandler} next - The handler for the request.\n     * @returns {Observable} - An observable that emits the resolved data.\n     */\n\n    intercept(context: ExecutionContext, next: CallHandler): Observable {\n        return next.handle().pipe(map((data) => deepResolvePromises(data)));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SortBy.html":{"url":"injectables/SortBy.html","title":"injectable - SortBy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SortBy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/filter.validator.ts\n        \n\n\n            \n                Description\n            \n            \n                Custom validator for checking if a string is in the correct \"field direction\" format.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/validators/filter.validator.ts:101\n                        \n                    \n\n\n            \n                \n                        Default error message when validation fails.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe validation arguments.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \nThe error message.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(value: string, args: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/validators/filter.validator.ts:71\n                        \n                    \n\n\n            \n                \n                        Validates if the given value is in the format of \"field direction\" where direction is \"ASC\" or \"DESC\".\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe value to be validated.\n\n\n                                            \n                                        \n                                        \n                                                args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe validation arguments.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \nReturns true if valid; otherwise, false.\n\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\nimport {\n    ValidatorConstraint,\n    ValidatorConstraintInterface,\n    ValidationArguments,\n} from 'class-validator';\n\n/**\n * Custom validator for checking if a string is a valid comma-separated list of numbers.\n *\n * @export\n * @class CommaSeparated\n * @implements {ValidatorConstraintInterface}\n */\n@Injectable()\n@ValidatorConstraint({ name: 'CommaSeparated', async: false })\nexport class CommaSeparated implements ValidatorConstraintInterface {\n    /**\n     * Validates if the given value is a comma-separated list of numbers.\n     *\n     * @param {string} propertyValue - The value to be validated.\n     * @param {ValidationArguments} args - The validation arguments.\n     * @returns {boolean} - Returns true if valid; otherwise, false.\n     */\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    validate(propertyValue: string, args: ValidationArguments): boolean {\n        //\n        //\n        const isValid = /^[0-9]+(,[0-9]+)*$/.test(propertyValue);\n\n        if (isValid) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Default error message when validation fails.\n     *\n     * @param {ValidationArguments} args - The validation arguments.\n     * @returns {string} - The error message.\n     */\n\n    defaultMessage(args: ValidationArguments): string {\n        return `Invalid ${args.property}`;\n    }\n}\n\n/**\n * Custom validator for checking if a string is in the correct \"field direction\" format.\n *\n * @export\n * @class SortBy\n * @implements {ValidatorConstraintInterface}\n */\n@Injectable()\n@ValidatorConstraint({ name: 'SortBy', async: false })\nexport class SortBy implements ValidatorConstraintInterface {\n    /**\n     * Validates if the given value is in the format of \"field direction\" where direction is \"ASC\" or \"DESC\".\n     *\n     * @param {string} value - The value to be validated.\n     * @param {ValidationArguments} args - The validation arguments.\n     * @returns {boolean} - Returns true if valid; otherwise, false.\n     */\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    validate(value: string, args: ValidationArguments): boolean {\n        // Split the input by spaces and validate each pair\n        const parts = value.split(' ');\n\n        // Ensure pairs of field direction (e.g., field direction, field direction, ...)\n        if (parts.length % 2 !== 0) {\n            return false;\n        }\n\n        // Regular expression to match valid field direction\n        const fieldRegex = /^[\\w]+$/;\n        const directionRegex = /^(ASC|DESC|asc|desc|Asc|Desc)$/;\n\n        // Iterate through pairs and validate\n        for (let i = 0; i \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SortByDto.html":{"url":"classes/SortByDto.html","title":"class - SortByDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SortByDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/dto/pagination.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO class for sorting options.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                direction\n                            \n                            \n                                    \n                                    \n                                field\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        direction\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'ASC'})@IsString()@Matches(/^(ASC|DESC|asc|desc)$/, {message: 'operator must be one of ASC, DESC, asc, or desc'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.dto.ts:228\n                        \n                    \n\n            \n                \n                    The direction of the sort (ascending or descending).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        field\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.dto.ts:214\n                        \n                    \n\n            \n                \n                    The field to sort by.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nimport { Type, Transform, plainToInstance } from 'class-transformer';\nimport {\n    IsOptional,\n    Min,\n    Max,\n    IsNotEmpty,\n    IsString,\n    ValidateNested,\n    Matches,\n    IsEnum,\n    // Validate,\n    // IsIn,\n} from 'class-validator';\n\n// import { IsValidField } from '@core/validators/field.validator'; // Import the custom validator\nimport { IsNumberStringOrNumber } from '@decorators/number.string.validator';\nimport { ToNumber } from '@decorators/transforms.decorator';\n// import { IsNumberStringOrNumber } from '@decorators/number.string.validator';\n// import { ToNumber } from '@decorators/transforms.decorator';\n// import { Country } from '@modules/countries/dto/country';\n\n/**\n * Enum representing different pagination types.\n *\n * @export\n * @enum {string}\n */\n\nexport enum PaginationType {\n    NONE = 'no',\n    INFINITY = 'infinity',\n    PAGINATE = 'paginate',\n    ALL = 'all',\n}\n\n/**\n * DTO class for pagination query parameters.\n *\n * @export\n */\nexport class PaginationQueryDto {\n    /**\n     * The type of pagination to apply.\n     *\n     * @type {PaginationType}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        description:\n            'Pagination must all (Page and has_next_page), infinity (only has_next_page), paginate(only page)',\n        enum: PaginationType,\n        default: PaginationType.ALL,\n    })\n    @IsEnum(PaginationType)\n    @IsOptional()\n    readonly pagination: PaginationType;\n\n    /**\n     * The page number for pagination.\n     *\n     * @type {number}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        description: 'Page number',\n        minimum: 1,\n        default: 1,\n    })\n    @IsOptional()\n    @IsNumberStringOrNumber()\n    @ToNumber()\n    @Min(1)\n    readonly page?: number;\n\n    /**\n     * The number of records per page.\n     *\n     * @type {number}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        description: 'Record limit',\n        minimum: 1,\n        maximum: 500,\n        default: 10,\n    })\n    @IsOptional()\n    @IsNumberStringOrNumber()\n    @ToNumber()\n    @Min(10)\n    @Max(500)\n    readonly limit?: number = 10;\n\n    /**\n     * Filters to apply to the query.\n     *\n     * @type {FilterQueryDto[] | null}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        name: 'filters',\n        required: false,\n        type: String,\n        description: 'Array of filter objects as a JSON string',\n        example: '[{\"field\":\"name\",\"operator\":\"=\",\"value\":\"IN\"}]',\n    })\n    @IsOptional()\n    @Transform(({ value }) => {\n        return value ? plainToInstance(FilterQueryDto, JSON.parse(value)) : undefined;\n    })\n    @ValidateNested({ each: true })\n    @Type(() => FilterQueryDto)\n    filters?: FilterQueryDto[] | null;\n\n    /**\n     * Sorting options for the query.\n     *\n     * @type {SortByDto[] | null}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        name: 'sort',\n        required: false,\n        type: String,\n        description: 'Array of sort objects as a JSON string',\n        example: '[{\"field\":\"name\",\"direction\":\"ASC\"}]',\n    })\n    @IsOptional()\n    @Transform(({ value }) => {\n        return value ? plainToInstance(SortByDto, JSON.parse(value)) : undefined;\n    })\n    @ValidateNested({ each: true })\n    @Type(() => SortByDto)\n    sort?: SortByDto[] | null;\n}\n\n/**\n * DTO class for filter query parameters.\n *\n * @export\n */\nexport class FilterQueryDto {\n    /**\n     * The field to filter on.\n     *\n     * @type {string}\n     * @memberof FilterQueryDto\n     */\n\n    @ApiProperty({ example: 'iso', required: true })\n    @IsNotEmpty()\n    @IsString()\n    field: string;\n\n    /**\n     * The operator to use for filtering.\n     *\n     * @type {string}\n     * @memberof FilterQueryDto\n     */\n\n    @ApiProperty({ example: '=' })\n    @IsNotEmpty()\n    @IsString()\n    operator: string;\n\n    /**\n     * The value to filter by.\n     *\n     * @type {string}\n     * @memberof FilterQueryDto\n     */\n\n    @ApiProperty({ example: 'IN' })\n    @IsNotEmpty()\n    @IsString()\n    value: string;\n}\n\n/**\n * DTO class for sorting options.\n *\n * @export\n */\nexport class SortByDto {\n    // @ApiProperty({ example: 'name' })\n    // @IsString()\n    // @Validate(IsValidField, [Country], {\n    //     message: 'Field must be a valid key of Country',\n    // })\n    // field: keyof Country;\n    /**\n     * The field to sort by.\n     *\n     * @type {string}\n     * @memberof SortByDto\n     */\n\n    @ApiProperty()\n    @IsString()\n    // @IsIn(abc(x : keyof TExposedAccountInfo), {\n    //     message: 'Field must be one of \"name\", \"age\", or \"status\"',\n    // })\n    // @Validate(IsValidField, [{ entity: () => T }], {\n    //     message: 'Field must be a valid key of the specified entity',\n    // })\n    field: string;\n\n    /**\n     * The direction of the sort (ascending or descending).\n     *\n     * @type {string}\n     * @memberof SortByDto\n     */\n\n    @ApiProperty({ example: 'ASC' })\n    @IsString()\n    @Matches(/^(ASC|DESC|asc|desc)$/, {\n        message: 'operator must be one of ASC, DESC, asc, or desc',\n    })\n    direction: string;\n}\n\n// export class PaginatedResultDto {\n//     @ApiProperty()\n//     data: T[];\n\n//     @ApiProperty()\n//     total: number;\n\n//     @ApiProperty()\n//     page: number;\n\n//     @ApiProperty()\n//     limit: number;\n// }\n\n//DX\n// import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\n// import { Type, Transform, plainToInstance } from 'class-transformer';\n// import {\n//     IsOptional,\n//     Min,\n//     Max,\n//     IsNotEmpty,\n//     IsString,\n//     IsArray,\n//     ValidateNested,\n//     Validate,\n//     Matches,\n// } from 'class-validator';\n\n// import { IsNumberStringOrNumber } from '@decorators/number.string.validator';\n// import { ToNumber } from '@decorators/transforms.decorator';\n// import { SortBy } from '@validators/filter.validator';\n\n// export class FilterQueryDto {\n//     @ApiProperty({ example: 'name', required: true })\n//     @IsNotEmpty()\n//     @IsString()\n//     field: string;\n\n//     @ApiProperty({ example: 'LIKE' })\n//     @IsNotEmpty()\n//     @IsString()\n//     operator: string;\n\n//     @ApiProperty({ example: '%John%' })\n//     @IsNotEmpty()\n//     @IsString()\n//     value: string;\n// }\n\n// export class SortByDto {\n//     @ApiProperty({ example: 'name' })\n//     @IsString()\n//     field: string;\n\n//     @ApiProperty({ example: 'ASC' })\n//     @IsString()\n//     @Matches(/^(ASC|DESC|asc|desc)$/, {\n//         message: 'operator must be one of ASC, DESC, asc, or desc',\n//     })\n//     direction: string;\n// }\n\n// export class PaginationQueryDto {\n//     @ApiPropertyOptional({\n//         description: 'Page number',\n//         minimum: 1,\n//         default: 1,\n//     })\n//     @IsOptional()\n//     @IsNumberStringOrNumber()\n//     @ToNumber()\n//     @Min(1)\n//     // @Transform(({ value }) => {\n//     //     const strippedValue = String(value).replace(/['\"]+/g, '');\n//     //     const numberValue = Number(strippedValue);\n//     //     return isNaN(numberValue) ? 'undefined' : numberValue;\n//     // })\n//     readonly page?: number;\n\n//     @ApiPropertyOptional({\n//         description: 'Record limit',\n//         minimum: 1,\n//         maximum: 500,\n//         default: 10,\n//     })\n//     @IsOptional()\n//     @IsNumberStringOrNumber()\n//     @ToNumber()\n//     @Min(10)\n//     @Max(500)\n//     readonly limit?: number = 10;\n\n//     // @IsOptional()\n//     // @IsArray()\n//     // @ValidateNested({ each: true })\n//     // @Type(() => FilterQueryDto)\n//     // filters?: FilterQueryDto[];\n//     // // filters?: any;\n//     @ApiPropertyOptional({\n//         name: 'filters',\n//         required: false,\n//         type: String,\n//         description: 'Array of filter objects as a JSON string',\n//         example:\n//             '[{\"field\":\"name\",\"operator\":\"LIKE\",\"value\":\"John\"},{\"field\":\"age\",\"operator\":\">\",\"value\":\"30\"}]',\n//     })\n//     @IsOptional()\n//     @Transform(({ value }) => {\n//         return value ? plainToInstance(FilterQueryDto, JSON.parse(value)) : undefined;\n//     })\n//     @ValidateNested({ each: true })\n//     @Type(() => FilterQueryDto)\n//     filters?: FilterQueryDto[] | null;\n\n//     // @ApiPropertyOptional({\n//     //     description: ' Name or City:  ASC or DESC',\n//     //     example: 'name ASC',\n//     // })\n//     // @IsOptional()\n//     // @IsString()\n//     // @Validate(SortBy)\n//     // readonly sort?: string;\n//     // @ApiPropertyOptional({ type: [SortByDto], isArray: true })\n//     // @IsOptional()\n//     // @Transform(({ value }) => {\n//     //     return value ? plainToInstance(SortUserDto, JSON.parse(value)) : undefined;\n//     // })\n//     // @ValidateNested({ each: true })\n//     // @Type(() => SortUserDto)\n//     // sort?: SortUserDto[] | null;\n\n//     @ApiPropertyOptional({\n//         name: 'sort',\n//         required: false,\n//         type: String,\n//         description: 'Array of sort objects as a JSON string',\n//         example: '[{\"field\":\"name\",\"direction\":\"ASC\"},{\"field\":\"age\",\"direction\":\"DESC\"}]',\n//     })\n//     @IsOptional()\n//     @Transform(({ value }) => {\n//         return value ? plainToInstance(SortByDto, JSON.parse(value)) : undefined;\n//     })\n//     @ValidateNested({ each: true })\n//     @Type(() => SortByDto)\n//     sort?: SortByDto[] | null;\n// }\n\n// export class PaginatedResultDto {\n//     @ApiProperty()\n//     data: T[];\n\n//     @ApiProperty()\n//     total: number;\n\n//     @ApiProperty()\n//     page: number;\n\n//     @ApiProperty()\n//     limit: number;\n// }\n\n// // import { ApiProperty, ApiExtraModels } from '@nestjs/swagger';\n\n// // import { Type } from 'class-transformer';\n// // import { IsOptional, IsString, IsArray, ValidateNested, IsNumber } from 'class-validator';\n\n// // // export class FilterQueryDto {\n// // //     @ApiProperty({ example: 'name' })\n// // //     field: string;\n\n// // //     @ApiProperty({ example: 'LIKE' })\n// // //     operator: string;\n\n// // //     @ApiProperty({ example: '%John%' })\n// // //     value: string;\n// // // }\n// // export class FilterQueryDto {\n// //     @ApiProperty({ example: 'country_name' })\n// //     @IsString()\n// //     field: string;\n\n// //     @ApiProperty({ example: 'LIKE' })\n// //     @IsString()\n// //     operator: string;\n\n// //     @ApiProperty({ example: '%United%' })\n// //     @IsString()\n// //     value: string;\n// // }\n// // @ApiExtraModels(FilterQueryDto)\n// // export class PaginationQueryDto {\n// //     @ApiProperty({ example: 1, required: false })\n// //     @IsOptional()\n// //     @IsNumber()\n// //     @Type(() => Number)\n// //     page?: number = 1;\n\n// //     @ApiProperty({ example: 10, required: false })\n// //     @IsOptional()\n// //     @IsNumber()\n// //     @Type(() => Number)\n// //     limit?: number = 10;\n\n// //     // @ApiProperty({\n// //     //     type: [FilterQueryDto],\n// //     //     required: false,\n// //     //     isArray: true,\n// //     // })\n// //     // @Type(() => FilterQueryDto)\n// //     // filters?: FilterQueryDto[];\n// //     @ApiProperty({\n// //         type: FilterQueryDto,\n// //         required: false,\n// //         isArray: true,\n// //     })\n// //     // @IsOptional()\n// //     @IsArray()\n// //     @ValidateNested({ each: true })\n// //     @Type(() => FilterQueryDto)\n// //     filters?: FilterQueryDto[];\n\n// //     // @ApiProperty({\n// //     //     type: [Object],\n// //     //     // items: {\n// //     //     //     type: 'object',\n// //     //     //     items: {\n// //     //     //         type: 'object',\n// //     //     //     },\n// //     //     // },\n// //     // })\n// //     // coords: FilterQueryDto[];\n\n// //     // @ApiProperty({ type: String, required: false })\n// //     // @IsOptional()\n// //     // @IsArray()\n// //     // @ValidateNested({ each: true })\n// //     // @Type(() => FilterQueryDto)\n// //     // filters?: FilterQueryDto[];\n\n// //     @ApiProperty({ example: 'name ASC1', required: false })\n// //     sort?: string;\n// // }\n\n// // // export class PaginationQueryDto {\n// // //     @ApiProperty({ example: 1, required: false })\n// // //     page?: number = 1;\n\n// // //     @ApiProperty({ example: 10, required: false })\n// // //     limit?: number = 10;\n\n// // //     // @ApiProperty({ type: [FilterQueryDto], required: false, isArray: true })\n// // //     // filters?: FilterQueryDto[];\n\n// // //     // @ApiProperty({ type: String, required: false, isArray: true })\n// // //     // filters?: FilterQueryDto[];\n\n// // //     // @ApiProperty({ type: [FilterQueryDto], required: false, isArray: true })\n// // //     // @Type(() => FilterQueryDto)\n// // //     // filters?: FilterQueryDto[];\n\n// // //     @ApiProperty({ type: [FilterQueryDto], required: false })\n// // //     @IsOptional()\n// // //     @IsArray()\n// // //     @ValidateNested({ each: true })\n// // //     @Type(() => FilterQueryDto)\n// // //     filters?: FilterQueryDto[];\n\n// // //     @ApiProperty({ example: 'name ASC1', required: false })\n// // //     sort?: string;\n// // // }\n\n// // export class PaginatedResultDto {\n// //     @ApiProperty()\n// //     data: T[];\n\n// //     @ApiProperty()\n// //     total: number;\n\n// //     @ApiProperty()\n// //     page: number;\n\n// //     @ApiProperty()\n// //     limit: number;\n// // }\n\n// // export class abc {\n// //     @ApiProperty()\n// //     page: number;\n\n// //     @ApiProperty()\n// //     limit: number;\n// // }\n\n// // import { applyDecorators } from '@nestjs/common';\n// // import { ApiProperty, ApiExtraModels, ApiQuery, getSchemaPath } from '@nestjs/swagger';\n\n// // /**\n// //  * Combines Swagger Decorators to create a description for `filters[name]=something`\n// //  *  - has support for swagger\n// //  *  - automatic transformation with nestjs\n// //  */\n// // // // eslint-disable-next-line @typescript-eslint/ban-types,@typescript-eslint/explicit-module-boundary-types\n// // // export function ApiFilterQuery(fieldName: string, filterDto: Function) {\n// // //     return applyDecorators(\n// // //         ApiExtraModels(filterDto),\n// // //         ApiQuery({\n// // //             required: false,\n// // //             name: fieldName,\n// // //             style: 'deepObject',\n// // //             explode: true,\n// // //             type: 'object',\n// // //             schema: {\n// // //                 $ref: getSchemaPath(filterDto),\n// // //             },\n// // //         })\n// // //     );\n// // // }\n// // // eslint-disable-next-line @typescript-eslint/ban-types,@typescript-eslint/explicit-module-boundary-types\n// // export function ApiFilterQuery(fieldName: string, filterDto: Function, index: number) {\n// //     return applyDecorators(\n// //         ApiExtraModels(filterDto),\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}]`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //             schema: {\n// //                 $ref: getSchemaPath(filterDto),\n// //             },\n// //         })\n// //     );\n// // }\n\n// // export function ApiFilterQuery(fieldName: string, index: number) {\n// //     return applyDecorators(\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}].field`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //         }),\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}].operator`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //         }),\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}].value`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //         })\n// //     );\n// // }\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SortCountryDto.html":{"url":"classes/SortCountryDto.html","title":"class - SortCountryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SortCountryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/countries/dto/query-country.dto-remove.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                order\n                            \n                            \n                                    \n                                    \n                                    \n                                orderBy\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/query-country.dto-remove.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Type(undefined)@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/query-country.dto-remove.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nimport { Transform, Type, plainToInstance } from 'class-transformer';\nimport { IsNumber, IsOptional, IsString, ValidateNested } from 'class-validator';\n\nimport { Country } from './country';\n\nexport class FilterCountryDto {}\n\nexport class SortCountryDto {\n    @ApiProperty()\n    @Type(() => String)\n    @IsString()\n    orderBy: keyof Country;\n\n    @ApiProperty()\n    @IsString()\n    order: string;\n}\n\nexport class QueryCountryDto {\n    @ApiPropertyOptional()\n    @Transform(({ value }) => (value ? Number(value) : 1))\n    @IsNumber()\n    @IsOptional()\n    page?: number;\n\n    @ApiPropertyOptional()\n    @Transform(({ value }) => (value ? Number(value) : 10))\n    @IsNumber()\n    @IsOptional()\n    limit?: number;\n\n    @ApiPropertyOptional({ type: String })\n    @IsOptional()\n    @Transform(({ value }) =>\n        value ? plainToInstance(FilterCountryDto, JSON.parse(value)) : undefined\n    )\n    @ValidateNested()\n    @Type(() => FilterCountryDto)\n    filters?: FilterCountryDto | null;\n\n    @ApiPropertyOptional({ type: String })\n    @IsOptional()\n    @Transform(({ value }) => {\n        return value ? plainToInstance(SortCountryDto, JSON.parse(value)) : undefined;\n    })\n    @ValidateNested({ each: true })\n    @Type(() => SortCountryDto)\n    sort?: SortCountryDto[] | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/State.html":{"url":"classes/State.html","title":"class - State","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  State\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/state_mas/dto/state.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the State class, which represents the data structure of a country\nentity used in the application. The State class is used to describe various details\nabout a State, including its identification, name, and other related attributes.\nThe State class serves as a Data Transfer Object (DTO) for representing State data.\nIt includes properties such as the State's ID, name, status Each property is annotated with @ApiResponseProperty\nto define its type and provide example values for API documentation purposes.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id_country\n                            \n                            \n                                    \n                                id_state\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id_country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'Country ID', example: '3a10e186-c759-4aec-9a86-2e5e0c2e5870'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/state_mas/dto/state.dto.ts:46\n                        \n                    \n\n            \n                \n                    Country ID to which the state belongs.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id_state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'f2d90547-a09a-4baa-a9f4-244e44a80875'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/state_mas/dto/state.dto.ts:24\n                        \n                    \n\n            \n                \n                    The unique identifier for the state.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'State name', example: 'Gujarat'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/state_mas/dto/state.dto.ts:35\n                        \n                    \n\n            \n                \n                    State name.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: 'Status of the state', example: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/state_mas/dto/state.dto.ts:57\n                        \n                    \n\n            \n                \n                    Status of the state.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiResponseProperty } from '@nestjs/swagger';\n\n/**\n * @fileoverview\n * This file defines the `State` class, which represents the data structure of a country\n * entity used in the application. The `State` class is used to describe various details\n * about a State, including its identification, name, and other related attributes.\n *\n * @module\n * @description\n * The `State` class serves as a Data Transfer Object (DTO) for representing State data.\n * It includes properties such as the State's ID, name, status Each property is annotated with `@ApiResponseProperty`\n * to define its type and provide example values for API documentation purposes.\n */\nexport class State {\n    /**\n     * The unique identifier for the state.\n     * @example 'f2d90547-a09a-4baa-a9f4-244e44a80875'\n     */\n    @ApiResponseProperty({\n        type: String,\n        example: 'f2d90547-a09a-4baa-a9f4-244e44a80875',\n    })\n    id_state: string;\n\n    /**\n     * State name.\n     * @example 'Gujarat'\n     */\n    @ApiProperty({\n        type: String,\n        description: 'State name',\n        example: 'Gujarat',\n    })\n    name: string;\n\n    /**\n     * Country ID to which the state belongs.\n     * @example '3a10e186-c759-4aec-9a86-2e5e0c2e5870'\n     */\n    @ApiProperty({\n        type: String,\n        description: 'Country ID',\n        example: '3a10e186-c759-4aec-9a86-2e5e0c2e5870',\n    })\n    id_country: string;\n\n    /**\n     * Status of the state.\n     * @example 1\n     */\n    @ApiProperty({\n        type: Number,\n        description: 'Status of the state',\n        example: 1,\n    })\n    status: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/StateController.html":{"url":"controllers/StateController.html","title":"controller - StateController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  StateController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/state_mas/state.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                states\n            \n\n\n            \n                Description\n            \n            \n                This file defines the StateController, which handles HTTP requests related to state.\nIt provides endpoints to create, update, retrieve, and delete state records.\nThe StateController is responsible for exposing endpoints that interact with the StateService.\nIt uses various HTTP methods to manage state data and handles responses with appropriate HTTP status codes.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createDto: StateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(HttpStatus.CREATED)@ApiCreatedResponse({type: State, description: 'Create state'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/master/state_mas/state.controller.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createDto\n                                            \n                                                            StateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data required to create a new state.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The created state object.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id_state')@HttpCode(HttpStatus.OK)@ApiParam({name: 'id_state', type: String})@ApiOkResponse({status: undefined, description: 'State has been successfully deleted.'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/master/state_mas/state.controller.ts:120\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the state to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                An object indicating the deletion result.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(query: PaginationQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@ApiOkResponse({type: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/master/state_mas/state.controller.ts:86\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe pagination and filtering parameters.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                A paginated list of states.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id_state')@HttpCode(HttpStatus.OK)@ApiParam({name: 'id_state', type: String})@ApiOkResponse({type: State, description: 'Get State by ID'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/master/state_mas/state.controller.ts:103\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the state to retrieve.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The state object.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateDto: UpdateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id_state')@HttpCode(HttpStatus.OK)@ApiParam({name: 'id_state', type: String})@ApiOkResponse({type: State, description: 'Update State'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/master/state_mas/state.controller.ts:70\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the state to be updated.\n\n\n                                            \n                                        \n                                        \n                                                updateDto\n                                            \n                                                            UpdateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data to update the state with.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The updated state object or null if not found.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    HttpCode,\n    HttpStatus,\n    Param,\n    ParseUUIDPipe,\n    Patch,\n    Post,\n    Query,\n} from '@nestjs/common';\nimport { ApiTags, ApiOkResponse, ApiCreatedResponse, ApiParam } from '@nestjs/swagger';\n\nimport { PaginationResponse, PaginationResponseDto } from '@utils/dto/pagination-response.dto';\nimport { PaginationQueryDto } from '@utils/dto/pagination.dto';\n\nimport { StateDto } from './dto/create.dto';\nimport { State } from './dto/state.dto';\nimport { UpdateDto } from './dto/update.dto';\nimport { StateService } from './state.service';\n\n/**\n * @fileoverview\n * This file defines the `StateController`, which handles HTTP requests related to state.\n * It provides endpoints to create, update, retrieve, and delete state records.\n *\n * @module\n * @description\n * The `StateController` is responsible for exposing endpoints that interact with the `StateService`.\n * It uses various HTTP methods to manage state data and handles responses with appropriate HTTP status codes.\n */\n\n@ApiTags('States')\n@Controller('states')\nexport class StateController {\n    constructor(private readonly stateService: StateService) {}\n\n    /**\n     * @route POST /states\n     * @description Create a new state.\n     * @param {StateDto} createDto - The data required to create a new state.\n     * @returns {Promise} The created state object.\n     */\n    @Post()\n    @HttpCode(HttpStatus.CREATED)\n    @ApiCreatedResponse({\n        type: State,\n        description: 'Create state',\n    })\n    async create(@Body() createDto: StateDto): Promise {\n        return this.stateService.create(createDto);\n    }\n\n    /**\n     * @route PATCH /states/:id_state\n     * @description Update an existing state by its ID.\n     * @param {string} id - The ID of the state to be updated.\n     * @param {UpdateDto} updateDto - The data to update the state with.\n     * @returns {Promise} The updated state object or null if not found.\n     */\n    @Patch(':id_state')\n    @HttpCode(HttpStatus.OK)\n    @ApiParam({ name: 'id_state', type: String })\n    @ApiOkResponse({\n        type: State,\n        description: 'Update State',\n    })\n    async update(\n        @Param('id_state', ParseUUIDPipe) id: string,\n        @Body() updateDto: UpdateDto\n    ): Promise {\n        return this.stateService.update(id, updateDto);\n    }\n\n    /**\n     * @route GET /states\n     * @description Retrieve a list of states with pagination.\n     * @param {PaginationQueryDto} query - The pagination and filtering parameters.\n     * @returns {Promise>} A paginated list of states.\n     */\n    @Get()\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ type: PaginationResponse(State) })\n    async findAll(@Query() query: PaginationQueryDto): Promise> {\n        return this.stateService.findAll(query);\n    }\n\n    /**\n     * @route GET /states/:id_state\n     * @description Retrieve a single state by its ID.\n     * @param {string} id - The ID of the state to retrieve.\n     * @returns {Promise} The state object.\n     */\n    @Get(':id_state')\n    @HttpCode(HttpStatus.OK)\n    @ApiParam({ name: 'id_state', type: String })\n    @ApiOkResponse({\n        type: State,\n        description: 'Get State by ID',\n    })\n    async findOne(@Param('id_state', ParseUUIDPipe) id: string): Promise {\n        return this.stateService.findOne(id);\n    }\n\n    /**\n     * @route DELETE /states/:id_state\n     * @description Delete a state by its ID.\n     * @param {string} id - The ID of the state to delete.\n     * @returns {Promise} An object indicating the deletion result.\n     */\n    @Delete(':id_state')\n    @HttpCode(HttpStatus.OK)\n    @ApiParam({ name: 'id_state', type: String })\n    @ApiOkResponse({\n        status: HttpStatus.OK,\n        description: 'State has been successfully deleted.',\n    })\n    async delete(@Param('id_state', ParseUUIDPipe) id: string): Promise {\n        return this.stateService.delete(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StateDto.html":{"url":"classes/StateDto.html","title":"class - StateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/state_mas/dto/create.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the StateDto class, which represents the data transfer object (DTO)\nused for creating a new State record. It includes validation rules and transformation logic\nfor the properties of the State.\nThe StateDto class ensures that the data provided for creating a State adheres to\nspecified validation rules and formats. It uses decorators from class-validator for validation\nand class-transformer for transforming input data.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                id_country\n                            \n                            \n                                    \n                                    Optional\n                                id_state\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                            \n                                    \n                                    Optional\n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        id_country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@ApiProperty({type: String, description: 'Country ID', example: 'f2d90547-a09a-4baa-a9f4-244e44a80875'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/state_mas/dto/create.dto.ts:48\n                        \n                    \n\n            \n                \n                    Country ID to which the state belongs.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        id_state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude({toPlainOnly: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/state_mas/dto/create.dto.ts:69\n                        \n                    \n\n            \n                \n                    The unique identifier for the state.\nThis property is excluded from the plain representation of the object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@MaxLength(100)@ApiProperty({type: String, description: 'State name', example: 'Gujarat', maxLength: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/state_mas/dto/create.dto.ts:34\n                        \n                    \n\n            \n                \n                    State name.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNumber()@ApiProperty({type: Number, description: 'Status of the state', example: 1, default: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/state_mas/dto/create.dto.ts:62\n                        \n                    \n\n            \n                \n                    Status of the state.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude({toPlainOnly: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/state_mas/dto/create.dto.ts:72\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nimport { Exclude } from 'class-transformer';\nimport { IsDefined, IsNotEmpty, IsString, MaxLength, IsOptional, IsNumber } from 'class-validator';\n\n/**\n * @fileoverview\n * This file defines the `StateDto` class, which represents the data transfer object (DTO)\n * used for creating a new State record. It includes validation rules and transformation logic\n * for the properties of the State.\n *\n * @module\n * @description\n * The `StateDto` class ensures that the data provided for creating a State adheres to\n * specified validation rules and formats. It uses decorators from `class-validator` for validation\n * and `class-transformer` for transforming input data.\n */\n\nexport class StateDto {\n    /**\n     * State name.\n     * @example 'Gujarat'\n     */\n    @IsDefined()\n    @IsNotEmpty()\n    @IsString()\n    @MaxLength(100)\n    @ApiProperty({\n        type: String,\n        description: 'State name',\n        example: 'Gujarat',\n        maxLength: 100,\n    })\n    name: string;\n\n    /**\n     * Country ID to which the state belongs.\n     * @example 'f2d90547-a09a-4baa-a9f4-244e44a80875'\n     */\n    @IsDefined()\n    @IsNotEmpty()\n    @IsString()\n    @ApiProperty({\n        type: String,\n        description: 'Country ID',\n        example: 'f2d90547-a09a-4baa-a9f4-244e44a80875',\n    })\n    id_country: string;\n\n    /**\n     * Status of the state.\n     * @example 1\n     */\n    @IsOptional()\n    @IsNumber()\n    @ApiProperty({\n        type: Number,\n        description: 'Status of the state',\n        example: 1,\n        default: 1,\n    })\n    status?: number;\n\n    /**\n     * The unique identifier for the state.\n     * This property is excluded from the plain representation of the object.\n     */\n    @Exclude({ toPlainOnly: true })\n    id_state?: string;\n\n    @Exclude({ toPlainOnly: true })\n    updated_at?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StateModule.html":{"url":"modules/StateModule.html","title":"module - StateModule","body":"\n                   \n\n\n\n\n    Modules\n    StateModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_StateModule\n\n\n\ncluster_StateModule_exports\n\n\n\ncluster_StateModule_providers\n\n\n\n\nStateService \n\nStateService \n\n\n\nStateModule\n\nStateModule\n\nStateService  -->\n\nStateModule->StateService \n\n\n\n\n\nStateService\n\nStateService\n\nStateModule -->\n\nStateService->StateModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/master/state_mas/state.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            This file defines the StateModule, which bundles the StateController and StateService together.\nThe StateModule is responsible for handling state-related operations. It provides the necessary controllers and services to manage state.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StateService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            StateController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StateService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { Query } from './query';\nimport { StateController } from './state.controller';\nimport { StateService } from './state.service';\n\n/**\n * @fileoverview\n * This file defines the `StateModule`, which bundles the `StateController` and `StateService` together.\n *\n * @module\n * @description\n * The `StateModule` is responsible for handling state-related operations. It provides the necessary controllers and services to manage state.\n */\n@Module({\n    controllers: [StateController],\n    providers: [StateService, Query],\n    exports: [StateService],\n})\nexport class StateModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StateService.html":{"url":"injectables/StateService.html","title":"injectable - StateService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StateService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/state_mas/state.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the StateService class, which provides methods to manage State data.\nIt includes operations for creating, updating, retrieving, and deleting State.\nThe StateService class is responsible for handling business logic related to State.\nIt interacts with the database through the PrismaService and performs various operations using raw SQL queries.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                MODULE\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(paginationService: PaginationService, prisma: PrismaService, query: Query, utilsService: UtilsService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/master/state_mas/state.service.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        paginationService\n                                                  \n                                                        \n                                                                        PaginationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        query\n                                                  \n                                                        \n                                                                        Query\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        utilsService\n                                                  \n                                                        \n                                                                        UtilsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createDto: StateDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/state_mas/state.service.ts:44\n                        \n                    \n\n\n            \n                \n                        Creates a new state.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createDto\n                                            \n                                                            StateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data required to create a new state.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The created state object.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/state_mas/state.service.ts:146\n                        \n                    \n\n\n            \n                \n                        Deletes a state by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the state to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                An object indicating the deletion result.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(paginationQuery: PaginationQueryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/state_mas/state.service.ts:102\n                        \n                    \n\n\n            \n                \n                        Retrieves a list of states with pagination.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                paginationQuery\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                A paginated list of states.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/state_mas/state.service.ts:132\n                        \n                    \n\n\n            \n                \n                        Retrieves a single state by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the state to retrieve.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The state object.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateDto: UpdateDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/master/state_mas/state.service.ts:71\n                        \n                    \n\n\n            \n                \n                        Updates an existing state by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the state to be updated.\n\n\n                                            \n                                        \n                                        \n                                                updateDto\n                                            \n                                                            UpdateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data to update the state with.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The updated state object or null if not found.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        MODULE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/master/state_mas/state.service.ts:27\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, HttpException, HttpStatus } from '@nestjs/common';\n\nimport { PaginationService } from '@app/common/helper/services/pagination.service';\nimport { UtilsService } from '@app/common/helper/services/util.service';\nimport { IPaginationFieldConfig } from '@app/utils/types/pagination-options';\nimport { PrismaService } from '@services/prisma.service';\nimport { PaginationResponseDto } from '@utils/dto/pagination-response.dto';\nimport { PaginationQueryDto } from '@utils/dto/pagination.dto';\n\nimport { StateDto } from './dto/create.dto';\nimport { State } from './dto/state.dto';\nimport { UpdateDto } from './dto/update.dto';\nimport { Query } from './query';\n\n/**\n * @fileoverview\n * This file defines the `StateService` class, which provides methods to manage State data.\n * It includes operations for creating, updating, retrieving, and deleting State.\n *\n * @module\n * @description\n * The `StateService` class is responsible for handling business logic related to State.\n * It interacts with the database through the `PrismaService` and performs various operations using raw SQL queries.\n */\n@Injectable()\nexport class StateService {\n    private readonly MODULE: string;\n\n    constructor(\n        private readonly paginationService: PaginationService,\n        private readonly prisma: PrismaService,\n        private readonly query: Query,\n        private readonly utilsService: UtilsService\n    ) {\n        this.MODULE = 'state';\n    }\n\n    /**\n     * Creates a new state.\n     * @param {StateDto} createDto - The data required to create a new state.\n     * @returns {Promise} The created state object.\n     * @throws {HttpException} If a state with the same name already exists or if an error occurs.\n     */\n    async create(createDto: StateDto): Promise {\n        const find = await this.prisma.executeRawQuery(this.query.findByName(), createDto);\n\n        if (find) {\n            throw new HttpException({ message: 'NAME ALREADY EXISTS' }, HttpStatus.CONFLICT);\n        }\n\n        const inserted = await this.prisma.executeRawQuery(this.query.insert(), createDto);\n\n        if (inserted && inserted.insertid) {\n            const get = await this.findOne(inserted.insertid);\n            return get as any;\n        } else {\n            throw new HttpException(\n                { message: 'Something went wrong' },\n                HttpStatus.INTERNAL_SERVER_ERROR\n            );\n        }\n    }\n\n    /**\n     * Updates an existing state by its ID.\n     * @param {string} id - The ID of the state to be updated.\n     * @param {UpdateDto} updateDto - The data to update the state with.\n     * @returns {Promise} The updated state object or null if not found.\n     * @throws {HttpException} If the state is not found or if an error occurs.\n     */\n    async update(id: string, updateDto: UpdateDto): Promise {\n        if (Object.keys(updateDto).length === 0) {\n            throw new HttpException({ message: 'Nothing to update!' }, HttpStatus.BAD_REQUEST);\n        }\n        // check country exits or not\n        const recordExits = await this.findOne(id);\n        if (recordExits) {\n            updateDto.id_state = id;\n            updateDto.updated_at = new Date().toISOString();\n            // update\n            const updated = await this.prisma.executeRawQuery(this.query.update(), updateDto);\n\n            if (updated && updated[0].updatedid) {\n                const get = await this.findOne(updated[0].updatedid);\n                return get as any;\n            } else {\n                throw new HttpException(\n                    { message: 'Something went wrong' },\n                    HttpStatus.INTERNAL_SERVER_ERROR\n                );\n            }\n        } else {\n            throw new HttpException({ message: 'record not exits' }, HttpStatus.NOT_FOUND);\n        }\n    }\n\n    /**\n     * Retrieves a list of states with pagination.\n     * @param {PaginationQueryDto} query - The pagination and filtering parameters.\n     * @returns {Promise>} A paginated list of states.\n     */\n    async findAll(paginationQuery: PaginationQueryDto): Promise> {\n        const baseQuery = ['ptbl.id_state', 'ptbl.name', 'ptbl.id_country', 'ptbl.status'];\n        const fromQuery = ` FROM state_mas as ptbl`;\n\n        const fieldConfigs: Record = {\n            id_country: {\n                joinTable: (alias: string) =>\n                    `JOIN country_mas ${alias} ON ${alias}.id_country = ptbl.id_country`,\n                alias: () => `c${0}`,\n                selectFields: (alias: string) => [`${alias}.name as country_name`],\n            },\n        };\n\n        const { selectQuery, countQuery } = this.utilsService.buildDynamicQuery(\n            paginationQuery,\n            fieldConfigs,\n            baseQuery,\n            fromQuery,\n            'ptbl.id_state'\n        );\n\n        return this.paginationService.paginate(selectQuery, countQuery, paginationQuery);\n    }\n\n    /**\n     * Retrieves a single state by its ID.\n     * @param {string} id - The ID of the state to retrieve.\n     * @returns {Promise} The state object.\n     * @throws {HttpException} If the state is not found.\n     */\n    async findOne(id: string): Promise {\n        const result = await this.prisma.executeRawQuery(this.query.findById(), { id });\n        if (!result) {\n            throw new HttpException({ message: 'State not found' }, HttpStatus.NOT_FOUND);\n        }\n        return result as any;\n    }\n\n    /**\n     * Deletes a state by its ID.\n     * @param {string} id - The ID of the state to delete.\n     * @returns {Promise} An object indicating the deletion result.\n     * @throws {HttpException} If an error occurs during deletion.\n     */\n    async delete(id: string): Promise {\n        const deleted = await this.prisma.executeRawQuery(this.query.delete(), id);\n\n        if (deleted && deleted[0].deletedid) {\n            return deleted;\n        } else {\n            throw new HttpException(\n                { message: 'Something went wrong' },\n                HttpStatus.INTERNAL_SERVER_ERROR\n            );\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateDto.html":{"url":"classes/UpdateDto.html","title":"class - UpdateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/countries/dto/update.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateCountryDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\n\nimport { CreateCountryDto } from './create.dto';\n\nexport class UpdateDto extends PartialType(CreateCountryDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateDto-1.html":{"url":"classes/UpdateDto-1.html","title":"class - UpdateDto-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/currencies/dto/update.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the UpdateDto class, which represents the Data Transfer Object (DTO)\nused for updating an existing currency entity. It extends from the CreateDto class,\nmaking all fields optional for the update operation.\nThe UpdateDto class is used to define the structure of the data required to update\nan existing currency entity. It inherits all properties from the CreateDto class but\nmakes them optional, allowing partial updates.\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreateDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\n\nimport { CreateDto } from './create.dto';\n\n/**\n * @fileoverview\n * This file defines the `UpdateDto` class, which represents the Data Transfer Object (DTO)\n * used for updating an existing currency entity. It extends from the `CreateDto` class,\n * making all fields optional for the update operation.\n *\n * @module\n * @description\n * The `UpdateDto` class is used to define the structure of the data required to update\n * an existing currency entity. It inherits all properties from the `CreateDto` class but\n * makes them optional, allowing partial updates.\n */\n\nexport class UpdateDto extends PartialType(CreateDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateDto-2.html":{"url":"classes/UpdateDto-2.html","title":"class - UpdateDto-2","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/address_type/dto/update.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the UpdateDto class, which represents the Data Transfer Object (DTO)\nused for updating an existing Address Type entity. It extends from the AddresTypeDto class,\nmaking all fields optional for the update operation.\nThe UpdateDto class is used to define the structure of the data required to update\nan existing Address Type entity. It inherits all properties from the AddresTypeDto class but\nmakes them optional, allowing partial updates.\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(AddresTypeDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\n\nimport { AddresTypeDto } from './create.dto';\n/**\n * @fileoverview\n * This file defines the `UpdateDto` class, which represents the Data Transfer Object (DTO)\n * used for updating an existing Address Type entity. It extends from the `AddresTypeDto` class,\n * making all fields optional for the update operation.\n *\n * @module\n * @description\n * The `UpdateDto` class is used to define the structure of the data required to update\n * an existing Address Type entity. It inherits all properties from the `AddresTypeDto` class but\n * makes them optional, allowing partial updates.\n */\n\nexport class UpdateDto extends PartialType(AddresTypeDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateDto-3.html":{"url":"classes/UpdateDto-3.html","title":"class - UpdateDto-3","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/banks/dto/update.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the UpdateDto class, which represents the Data Transfer Object (DTO)\nused for updating an existing Bank entity. It extends from the BankDto class,\nmaking all fields optional for the update operation.\nThe UpdateDto class is used to define the structure of the data required to update\nan existing Bank entity. It inherits all properties from the BankDto class but\nmakes them optional, allowing partial updates.\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(BankDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\n\nimport { BankDto } from './create.dto';\n\n/**\n * @fileoverview\n * This file defines the `UpdateDto` class, which represents the Data Transfer Object (DTO)\n * used for updating an existing Bank entity. It extends from the `BankDto` class,\n * making all fields optional for the update operation.\n *\n * @module\n * @description\n * The `UpdateDto` class is used to define the structure of the data required to update\n * an existing Bank entity. It inherits all properties from the `BankDto` class but\n * makes them optional, allowing partial updates.\n */\nexport class UpdateDto extends PartialType(BankDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateDto-4.html":{"url":"classes/UpdateDto-4.html","title":"class - UpdateDto-4","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/city_mas/dto/update.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the UpdateDto class, which represents the Data Transfer Object (DTO)\nused for updating an existing city entity. It extends from the CityDto class,\nmaking all fields optional for the update operation.\nThe UpdateDto class is used to define the structure of the data required to update\nan existing city entity. It inherits all properties from the CityDto class but\nmakes them optional, allowing partial updates.\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CityDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\n\nimport { CityDto } from './create.dto';\n\n/**\n * @fileoverview\n * This file defines the `UpdateDto` class, which represents the Data Transfer Object (DTO)\n * used for updating an existing city entity. It extends from the `CityDto` class,\n * making all fields optional for the update operation.\n *\n * @module\n * @description\n * The `UpdateDto` class is used to define the structure of the data required to update\n * an existing city entity. It inherits all properties from the `CityDto` class but\n * makes them optional, allowing partial updates.\n */\n\nexport class UpdateDto extends PartialType(CityDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateDto-5.html":{"url":"classes/UpdateDto-5.html","title":"class - UpdateDto-5","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/country_mas/dto/update.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the UpdateDto class, which represents the Data Transfer Object (DTO)\nused for updating an existing Country entity. It extends from the CreateDto class,\nmaking all fields optional for the update operation.\nThe UpdateDto class is used to define the structure of the data required to update\nan existing Country entity. It inherits all properties from the CreateDto class but\nmakes them optional, allowing partial updates.\n\n            \n\n            \n                Extends\n            \n            \n                        PartialType(CountryDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\n\nimport { CountryDto } from './create.dto';\n\n/**\n * @fileoverview\n * This file defines the `UpdateDto` class, which represents the Data Transfer Object (DTO)\n * used for updating an existing Country entity. It extends from the `CreateDto` class,\n * making all fields optional for the update operation.\n *\n * @module\n * @description\n * The `UpdateDto` class is used to define the structure of the data required to update\n * an existing Country entity. It inherits all properties from the `CreateDto` class but\n * makes them optional, allowing partial updates.\n */\n\nexport class UpdateDto extends PartialType(CountryDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateDto-6.html":{"url":"classes/UpdateDto-6.html","title":"class - UpdateDto-6","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/documents/dto/update.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the UpdateDto class, which represents the Data Transfer Object (DTO)\nused for updating an existing Document entity. It extends from the DocumentDto class,\nmaking all fields optional for the update operation.\nThe UpdateDto class is used to define the structure of the data required to update\nan existing Document entity. It inherits all properties from the DocumentDto class but\nmakes them optional, allowing partial updates.\n\n            \n\n            \n                Extends\n            \n            \n                        PartialType(DocumentDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\n\nimport { DocumentDto } from './create.dto';\n\n/**\n * @fileoverview\n * This file defines the `UpdateDto` class, which represents the Data Transfer Object (DTO)\n * used for updating an existing Document entity. It extends from the `DocumentDto` class,\n * making all fields optional for the update operation.\n *\n * @module\n * @description\n * The `UpdateDto` class is used to define the structure of the data required to update\n * an existing Document entity. It inherits all properties from the `DocumentDto` class but\n * makes them optional, allowing partial updates.\n */\nexport class UpdateDto extends PartialType(DocumentDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateDto-7.html":{"url":"classes/UpdateDto-7.html","title":"class - UpdateDto-7","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/document_groups/dto/update.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the UpdateDto class, which represents the Data Transfer Object (DTO)\nused for updating an existing DocumentGroup entity. It extends from the DocumentGroupDto class,\nmaking all fields optional for the update operation.\nThe UpdateDto class is used to define the structure of the data required to update\nan existing DocumentGroup entity. It inherits all properties from the DocumentGroupDto class but\nmakes them optional, allowing partial updates.\n\n            \n\n            \n                Extends\n            \n            \n                        PartialType(DocumentGroupDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\n\nimport { DocumentGroupDto } from './create.dto';\n\n/**\n * @fileoverview\n * This file defines the `UpdateDto` class, which represents the Data Transfer Object (DTO)\n * used for updating an existing DocumentGroup entity. It extends from the `DocumentGroupDto` class,\n * making all fields optional for the update operation.\n *\n * @module\n * @description\n * The `UpdateDto` class is used to define the structure of the data required to update\n * an existing DocumentGroup entity. It inherits all properties from the `DocumentGroupDto` class but\n * makes them optional, allowing partial updates.\n */\nexport class UpdateDto extends PartialType(DocumentGroupDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateDto-8.html":{"url":"classes/UpdateDto-8.html","title":"class - UpdateDto-8","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/state_mas/dto/update.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the UpdateDto class, which represents the Data Transfer Object (DTO)\nused for updating an existing State entity. It extends from the StateDto class,\nmaking all fields optional for the update operation.\nThe UpdateDto class is used to define the structure of the data required to update\nan existing State entity. It inherits all properties from the StateDto class but\nmakes them optional, allowing partial updates.\n\n            \n\n            \n                Extends\n            \n            \n                        PartialType(StateDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\n\nimport { StateDto } from './create.dto';\n\n/**\n * @fileoverview\n * This file defines the `UpdateDto` class, which represents the Data Transfer Object (DTO)\n * used for updating an existing State entity. It extends from the `StateDto` class,\n * making all fields optional for the update operation.\n *\n * @module\n * @description\n * The `UpdateDto` class is used to define the structure of the data required to update\n * an existing State entity. It inherits all properties from the `StateDto` class but\n * makes them optional, allowing partial updates.\n */\n\nexport class UpdateDto extends PartialType(StateDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserNotFoundException.html":{"url":"classes/UserNotFoundException.html","title":"class - UserNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/exceptions/user-not-found.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Custom exception for user not found errors.\nIt extends the NotFoundException provided by NestJS.\nExample :```typescript\nthrow new UserNotFoundException();\nthrow new UserNotFoundException('Specific error message');Example :\n            \n\n            \n                Extends\n            \n            \n                        NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(error?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/exceptions/user-not-found.exception.ts:20\n                            \n                        \n\n                \n                    \n                            Creates an instance of UserNotFoundException.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                \nOptional error message.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        'use strict';\n\nimport { NotFoundException } from '@nestjs/common';\n\n/**\n * Custom exception for user not found errors.\n *\n * @extends {NotFoundException}\n *\n * @description This exception is thrown when a requested user is not found in the system.\n * It extends the `NotFoundException` provided by NestJS.\n *\n * @example\n * ```typescript\n * throw new UserNotFoundException();\n * throw new UserNotFoundException('Specific error message');\n * ```\n */\n\nexport class UserNotFoundException extends NotFoundException {\n    /**\n     * Creates an instance of UserNotFoundException.\n     *\n     * @param {string} [error] - Optional error message.\n     */\n\n    constructor(error?: string) {\n        super('error.user_not_found', error);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UtilsService.html":{"url":"classes/UtilsService.html","title":"class - UtilsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UtilsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/helper/services/util.service.ts\n        \n\n\n            \n                Description\n            \n            \n                UtilsService\nUtilsService provides utility methods for building dynamic SQL queries, including pagination, filtering, sorting, and query construction.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                buildDynamicQuery\n                            \n                            \n                                    Public\n                                formatValue\n                            \n                            \n                                    Public\n                                queryStatements\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        buildDynamicQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    buildDynamicQuery(paginationQuery: PaginationQueryDto, fieldConfigs: Record, baseFields: string[], fromQuery: string, countByField: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/helper/services/util.service.ts:29\n                        \n                    \n\n\n            \n                \n                        Builds dynamic SQL queries based on pagination, filtering, sorting, and field configuration.\nExample :selectQuery: string;\ncountQuery: string;}} - An object containing the dynamically built SELECT and COUNT queries.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                paginationQuery\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe pagination query parameters including filters and sorting options.\n\n\n                                            \n                                        \n                                        \n                                                fieldConfigs\n                                            \n                                                            Record\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nConfiguration for each field including alias, join table, and select fields.\n\n\n                                            \n                                        \n                                        \n                                                baseFields\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe base fields to include in the SELECT clause.\n\n\n                                            \n                                        \n                                        \n                                                fromQuery\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe base FROM clause for the query.\n\n\n                                            \n                                        \n                                        \n                                                countByField\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    '*'\n                                            \n\n                                            \n                                                    \nThe field to use for counting records in the count query.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                \nAn object containing the dynamically built SELECT and COUNT queries.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        formatValue\n                        \n                    \n                \n            \n            \n                \n                        \n                    formatValue(value: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/helper/services/util.service.ts:157\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        queryStatements\n                        \n                    \n                \n            \n            \n                \n                        \n                    queryStatements(baseFields: string[], selectFields: string | string[], fromQuery: string, joinTables: string[], filterQuery: string, sortByQuery: string, countByField: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/helper/services/util.service.ts:139\n                        \n                    \n\n\n            \n                \n                        Constructs SELECT and COUNT SQL queries based on the provided parameters.\nExample :selectQuery: string;\ncountQuery: string;}} - An object containing the constructed SELECT and COUNT queries.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                baseFields\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe base fields to include in the SELECT clause.\n\n\n                                            \n                                        \n                                        \n                                                selectFields\n                                            \n                                                        string | string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAdditional fields to include in the SELECT clause.\n\n\n                                            \n                                        \n                                        \n                                                fromQuery\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe base FROM clause for the query.\n\n\n                                            \n                                        \n                                        \n                                                joinTables\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nJOIN clauses to include in the query.\n\n\n                                            \n                                        \n                                        \n                                                filterQuery\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe WHERE clause for filtering.\n\n\n                                            \n                                        \n                                        \n                                                sortByQuery\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe ORDER BY clause for sorting.\n\n\n                                            \n                                        \n                                        \n                                                countByField\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    '*'\n                                            \n\n                                            \n                                                    \nThe field to use for counting records in the count query.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                \nAn object containing the constructed SELECT and COUNT queries.\n\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PaginationQueryDto } from '@utils/dto/pagination.dto';\nimport { IPaginationFieldConfig } from '@utils/types/pagination-options';\n\n/**\n * UtilsService\n *\n * @description\n * `UtilsService` provides utility methods for building dynamic SQL queries, including pagination, filtering, sorting, and query construction.\n *\n * @export\n * @class UtilsService\n */\nexport class UtilsService {\n    /**\n     * Builds dynamic SQL queries based on pagination, filtering, sorting, and field configuration.\n     *\n     * @param {PaginationQueryDto} paginationQuery - The pagination query parameters including filters and sorting options.\n     * @param {Record} fieldConfigs - Configuration for each field including alias, join table, and select fields.\n     * @param {string[]} baseFields - The base fields to include in the SELECT clause.\n     * @param {string} fromQuery - The base FROM clause for the query.\n     * @param {string} [countByField='*'] - The field to use for counting records in the count query.\n     *\n     * @returns {{\n     *     selectQuery: string;\n     *     countQuery: string;\n     * }} - An object containing the dynamically built SELECT and COUNT queries.\n     */\n\n    public buildDynamicQuery(\n        paginationQuery: PaginationQueryDto,\n        fieldConfigs: Record,\n        baseFields: string[],\n        fromQuery: string,\n        countByField: string = '*'\n    ): {\n        selectQuery: string;\n        countQuery: string;\n    } {\n        let filterQuery = '';\n        let sortByQuery = '';\n        const filterValues: any[] = [];\n        const joinTables: string[] = [];\n        const selectFields: string[] = [];\n\n        const filters = paginationQuery.filters;\n        const sort = paginationQuery.sort;\n\n        const mySet = new Set();\n\n        if (filters && filters.length > 0) {\n            const filterConditions = filters\n                .map(\n                    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                    (filter: { field: string; operator: string; value: string }, index: number) => {\n                        const field = filter.field.toLowerCase();\n                        let alias = `ptbl`; // default alias for the main table\n                        if (fieldConfigs && fieldConfigs[field]) {\n                            const config = fieldConfigs[field];\n                            alias = config.alias();\n\n                            if (!mySet.has(alias)) {\n                                mySet.add(alias);\n                                // joinTables.push(config.joinTable(index));\n                                joinTables.push(config.joinTable(alias));\n                            }\n                            selectFields.push(...config.selectFields(alias));\n                        }\n                        const operator = filter.operator.toUpperCase();\n                        if (operator === 'IN') {\n                            const values = filter.value.split(',').map((val) => `'${val.trim()}'`);\n                            return `${alias}.${filter.field} IN (${values.join(', ')})`;\n                        }\n                        if (operator === 'LIKE') {\n                            return `${alias}.${filter.field} ${filter.operator} '%${filter.value}%'`;\n                        }\n                        // Add the value to the filterValues array for parameterized query\n                        filterValues.push(filter.value);\n\n                        // return `${alias}.${filter.field} ${filter.operator} ?`;\n                        return `${alias}.${filter.field} ${filter.operator} '${filter.value}'`;\n                    }\n                )\n                .join(' AND ');\n\n            filterQuery = `WHERE ${filterConditions}`;\n        }\n\n        if (sort && sort.length > 0) {\n            sortByQuery = `ORDER BY `;\n            sortByQuery += sort\n                .map((sortItem: { field: string; direction: any }) => {\n                    const field = sortItem.field.toLowerCase();\n                    let alias = `ptbl`; // default alias for the main table\n\n                    if (fieldConfigs && fieldConfigs[field]) {\n                        const config = fieldConfigs[field];\n                        alias = config.alias(); // Use index 0 since sorting doesn't require multiple aliases\n                    }\n\n                    return `${alias}.${sortItem.field} ${sortItem.direction}`;\n                })\n                .join(', ');\n        }\n\n        const selectedFields = selectFields.length > 0 ? `${', '}${selectFields.join(', ')}` : [];\n\n        // return { filterQuery, filterValues, joinTables, selectFields: selectedFields, sortByQuery };\n\n        const { selectQuery, countQuery } = this.queryStatements(\n            baseFields,\n            selectedFields,\n            fromQuery,\n            joinTables,\n            filterQuery,\n            sortByQuery,\n            countByField\n        );\n\n        return { selectQuery, countQuery };\n    }\n\n    /**\n     * Constructs SELECT and COUNT SQL queries based on the provided parameters.\n     *\n     * @param {string[]} baseFields - The base fields to include in the SELECT clause.\n     * @param {string | string[]} selectFields - Additional fields to include in the SELECT clause.\n     * @param {string} fromQuery - The base FROM clause for the query.\n     * @param {string[]} joinTables - JOIN clauses to include in the query.\n     * @param {string} filterQuery - The WHERE clause for filtering.\n     * @param {string} sortByQuery - The ORDER BY clause for sorting.\n     * @param {string} [countByField='*'] - The field to use for counting records in the count query.\n     *\n     * @returns {{\n     *     selectQuery: string;\n     *     countQuery: string;\n     * }} - An object containing the constructed SELECT and COUNT queries.\n     */\n\n    public queryStatements(\n        baseFields: string[],\n        selectFields: string | string[],\n        fromQuery: string,\n        joinTables: string[],\n        filterQuery: string,\n        sortByQuery: string,\n        countByField: string = '*'\n    ): {\n        selectQuery: string;\n        countQuery: string;\n    } {\n        const selectQuery = `SELECT ${baseFields.join(', ')} ${selectFields} ${fromQuery} ${joinTables.join(' ')} ${filterQuery} ${sortByQuery}`;\n        const countQuery = `SELECT count(${countByField}) ${fromQuery} ${joinTables.join(' ')} ${filterQuery}`;\n\n        return { selectQuery, countQuery };\n    }\n\n    public formatValue(value: any): string {\n        if (Array.isArray(value)) {\n            const formattedArray = value.map((v) => `${v.replace(/'/g, \"''\")}`).join(', ');\n            return `'{${formattedArray}}'`;\n        } else if (typeof value === 'string') {\n            return `'${value.replace(/'/g, \"''\")}'`;\n        } else if (value === null || value === undefined) {\n            return 'NULL';\n        } else {\n            return `${value}`; // For numbers and other types\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChangelog\n[1.0.1] - 2024-07-01\nBug Fixes\n\nconfig: Fixed issue with configuration\ndeps: Updated dependencies\n\n[1.0.0] - 2024-06-25\nFeatures\n\nstart: Initial release\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"contributing.html":{"url":"contributing.html","title":"getting-started - contributing","body":"\n                   \n\n2. CONTRIBUTING.md\nGuidelines for contributing to your project.\nExample:\nExample :# Contributing to Project Name\n\nWe welcome contributions from the community. Please follow these guidelines to ensure a smooth process for everyone.\n\n## How to Contribute\n\n### Reporting Bugs\nIf you find a bug, please open an issue on GitHub and include as much information as possible.\n\n### Suggesting Features\nWe welcome feature requests! Please open an issue on GitHub and describe the feature in detail.\n\n### Code Contributions\n1. Fork the repository.\n2. Create a new branch (`git checkout -b feature-name`).\n3. Make your changes.\n4. Commit your changes (`git commit -m 'Add feature'`).\n5. Push to the branch (`git push origin feature-name`).\n6. Open a pull request on GitHub.\n\n## Code Style\nPlease adhere to the code style used in the project. We use [tool/linter] for code formatting and linting.\n\n## Running Tests\nEnsure that all tests pass before submitting a pull request. Run tests with:\n```sh\nyarn test\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                prisma/data/countries-currencies-timezones.ts\n            \n            variable\n            countries\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/data/countries-dummy.ts\n            \n            variable\n            countries\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/data/countries-dummy.ts\n            \n            variable\n            countriesjson\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/data/countries-dummy.ts\n            \n            variable\n            countriesjson1\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/data/countries-dummy.ts\n            \n            variable\n            countriesList\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/data/countries-dummy.ts\n            \n            variable\n            currencies\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/seed.ts\n            \n            variable\n            prisma\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/seed.ts\n            \n            variable\n            seed\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/seed1.ts\n            \n            function\n            main\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/seed1.ts\n            \n            variable\n            prisma\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/app.module.ts\n            \n            variable\n            ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/helper/helper.module.ts\n            \n            variable\n            providers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/helper/services/comman.query.ts\n            \n            class\n            CommonQuery1\n            \n                81 %\n                (9/11)\n            \n        \n        \n            \n                \n                src/common/helper/services/comman.query.ts\n            \n            class\n            CommonQuery5\n            \n                50 %\n                (5/10)\n            \n        \n        \n            \n                \n                src/common/helper/services/comman.query.ts\n            \n            interface\n            QueryConfig\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/helper/services/config.service.ts\n            \n            class\n            ConfigService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/helper/services/config.service.ts\n            \n            class\n            EnvVarAppConfigValidator\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/common/helper/services/pagination.service.ts\n            \n            injectable\n            PaginationService\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/common/helper/services/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/common/helper/services/util.service.ts\n            \n            class\n            UtilsService\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/config/app.config.ts\n            \n            class\n            EnvironmentVariablesValidator\n            \n                10 %\n                (1/10)\n            \n        \n        \n            \n                \n                src/config/database.config.ts\n            \n            class\n            EnvironmentVariablesValidator\n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                src/config/file.config.ts\n            \n            class\n            EnvironmentVariablesValidator\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/config/logger.config.ts\n            \n            class\n            EnvironmentVariablesValidator\n            \n                8 %\n                (1/12)\n            \n        \n        \n            \n                \n                src/config/logger.config.ts\n            \n            variable\n            getBooleanEnvVar\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/core.constant.ts\n            \n            variable\n            HTTP_STATUS_MESSAGES\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/constants/core.constant.ts\n            \n            variable\n            PUBLIC_ROUTE_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/constants/core.constant.ts\n            \n            variable\n            RESPONSE_SERIALIZATION_META_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/decorators/number.string.validator.ts\n            \n            function\n            IsNumberStringOrNumber\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/decorators/public.request.decorator.ts\n            \n            variable\n            PublicRoute\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/decorators/swagger.schema.ts\n            \n            variable\n            ApiFile\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/decorators/swagger.schema.ts\n            \n            variable\n            ApiMultiFile\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/decorators/transforms.decorator.ts\n            \n            function\n            ToNumber\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/exceptions/file-not-image.exception.ts\n            \n            class\n            FileNotImageException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/core/exceptions/http-error.filter.ts\n            \n            class\n            HttpErrorFilter\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/core/exceptions/query.ts\n            \n            class\n            Query\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/core/exceptions/user-not-found.exception.ts\n            \n            class\n            UserNotFoundException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/core/filters/all-exceptions.filter.ts\n            \n            class\n            AllExceptionsFilter\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/core/filters/bad-request.filter.ts\n            \n            class\n            BadRequestExceptionFilter\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/core/filters/constraint-errors.ts\n            \n            variable\n            constraintErrors\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/filters/http-exception.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/core/filters/prisma-exception.filter.ts\n            \n            class\n            PrismaClientExceptionFilter\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/core/filters/query-failed.filter.ts\n            \n            class\n            QueryFailedFilter\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/core/filters/query.ts\n            \n            class\n            Query\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/core/interfaces/app.interfaces.ts\n            \n            interface\n            IAppConfig\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/core/interfaces/aws.interfaces.ts\n            \n            interface\n            IAwsConfig\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/core/interfaces/file.interfaces.ts\n            \n            interface\n            IFileConfig\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/core/interfaces/jwt.interfaces.ts\n            \n            interface\n            IJWTConfig\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/core/interfaces/node-emailer.interfaces.ts\n            \n            interface\n            INodeEmailerConfig\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/core/interfaces/postgres.interfaces.ts\n            \n            interface\n            IPostgreSQLConfig\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/core/interfaces/sendgrid.interfaces.ts\n            \n            interface\n            ISendGridConfig\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/interfaces/sms.interfaces.ts\n            \n            interface\n            ISMSConfig\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/interfaces/upload-file.interfaces.ts\n            \n            interface\n            IUploadFileConfig\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/core/validators/field.validator.ts\n            \n            function\n            IsValidField\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/validators/filter.validator.ts\n            \n            injectable\n            CommaSeparated\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/core/validators/filter.validator.ts\n            \n            injectable\n            SortBy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/countries/countries.controller.ts\n            \n            controller\n            CountriesController\n            \n                40 %\n                (2/5)\n            \n        \n        \n            \n                \n                src/modules/countries/countries.service.ts\n            \n            injectable\n            CountriesService\n            \n                62 %\n                (5/8)\n            \n        \n        \n            \n                \n                src/modules/countries/dto/country.ts\n            \n            class\n            Country\n            \n                100 %\n                (15/15)\n            \n        \n        \n            \n                \n                src/modules/countries/dto/create.dto.ts\n            \n            class\n            CreateCountryDto\n            \n                91 %\n                (11/12)\n            \n        \n        \n            \n                \n                src/modules/countries/dto/query-country.dto-remove.ts\n            \n            class\n            FilterCountryDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/countries/dto/query-country.dto-remove.ts\n            \n            class\n            QueryCountryDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/countries/dto/query-country.dto-remove.ts\n            \n            class\n            SortCountryDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/countries/dto/update.dto.ts\n            \n            class\n            UpdateDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/countries/query.ts\n            \n            class\n            Query\n            \n                62 %\n                (5/8)\n            \n        \n        \n            \n                \n                src/modules/currencies/currencies.controller.ts\n            \n            controller\n            CurrenciesController\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/modules/currencies/currencies.controller.ts\n            \n            variable\n            modules\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/currencies/currencies.service.ts\n            \n            injectable\n            CurrenciesService\n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                src/modules/currencies/dto/create.dto.ts\n            \n            class\n            CreateDto\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/modules/currencies/dto/currency.ts\n            \n            class\n            Currency\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/modules/currencies/dto/update.dto.ts\n            \n            class\n            UpdateDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/currencies/query.ts\n            \n            class\n            Query\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/modules/files/domain/file.ts\n            \n            class\n            FileType\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/files/files.module.ts\n            \n            variable\n            infrastructureUploaderModule\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/files/files.service.ts\n            \n            injectable\n            FilesService\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/files/infrastructure/uploader/local/dto/file-response.dto.ts\n            \n            class\n            FileResponseDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/modules/files/infrastructure/uploader/local/files.controller.ts\n            \n            controller\n            FilesLocalController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/files/infrastructure/uploader/local/files.service.ts\n            \n            injectable\n            FilesLocalService\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/modules/files/infrastructure/uploader/s3-presigned/dto/file-response.dto.ts\n            \n            class\n            FileResponseDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/files/infrastructure/uploader/s3-presigned/dto/file.dto.ts\n            \n            class\n            FileUploadDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/files/infrastructure/uploader/s3-presigned/files.controller.ts\n            \n            controller\n            FilesS3PresignedController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/files/infrastructure/uploader/s3-presigned/files.service.ts\n            \n            injectable\n            FilesS3PresignedService\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/modules/files/infrastructure/uploader/s3/dto/file-response.dto.ts\n            \n            class\n            FileResponseDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/modules/files/infrastructure/uploader/s3/files.controller.ts\n            \n            controller\n            FilesS3Controller\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/modules/files/infrastructure/uploader/s3/files.service.ts\n            \n            injectable\n            FilesS3Service\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/modules/home/home.controller.ts\n            \n            controller\n            HomeController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/modules/home/home.service.ts\n            \n            injectable\n            HomeService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/master/address_type/address_type.controller.ts\n            \n            controller\n            AddressTypeController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/master/address_type/address_type.service.ts\n            \n            injectable\n            AddressTypeService\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                src/modules/master/address_type/dto/address_type.ts\n            \n            class\n            AddressType\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/modules/master/address_type/dto/create.dto.ts\n            \n            class\n            AddresTypeDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/modules/master/address_type/dto/update.dto.ts\n            \n            class\n            UpdateDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/master/address_type/query.ts\n            \n            class\n            Query\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/modules/master/banks/bank.controller.ts\n            \n            controller\n            BankController\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/modules/master/banks/bank.service.ts\n            \n            injectable\n            BankService\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                src/modules/master/banks/dto/bank.dto.ts\n            \n            class\n            Banks\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/modules/master/banks/dto/create.dto.ts\n            \n            class\n            BankDto\n            \n                88 %\n                (8/9)\n            \n        \n        \n            \n                \n                src/modules/master/banks/dto/update.dto.ts\n            \n            class\n            UpdateDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/master/banks/query.ts\n            \n            class\n            Query\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/modules/master/city_mas/cities.controller.ts\n            \n            controller\n            CityController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/master/city_mas/cities.service.ts\n            \n            injectable\n            CityService\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                src/modules/master/city_mas/dto/cities.dto.ts\n            \n            class\n            Cities\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/modules/master/city_mas/dto/create.dto.ts\n            \n            class\n            CityDto\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/modules/master/city_mas/dto/update.dto.ts\n            \n            class\n            UpdateDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/master/city_mas/query.ts\n            \n            class\n            Query\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/modules/master/country_mas/country_mas.controller.ts\n            \n            controller\n            CountryController\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/modules/master/country_mas/country_mas.controller.ts\n            \n            variable\n            modules\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/master/country_mas/country_mas.service.ts\n            \n            injectable\n            CountriesService\n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                src/modules/master/country_mas/dto/country_mas.dto.ts\n            \n            class\n            CountryMas\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/modules/master/country_mas/dto/create.dto.ts\n            \n            class\n            CountryDto\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/modules/master/country_mas/dto/update.dto.ts\n            \n            class\n            UpdateDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/master/country_mas/query.ts\n            \n            class\n            Query\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/modules/master/document_groups/document_grp.controller.ts\n            \n            controller\n            DocumentGroupController\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/modules/master/document_groups/document_grp.service.ts\n            \n            injectable\n            DocumentGroupService\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                src/modules/master/document_groups/dto/create.dto.ts\n            \n            class\n            DocumentGroupDto\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/modules/master/document_groups/dto/document_grp.dto.ts\n            \n            class\n            DocumentGroup\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/modules/master/document_groups/dto/update.dto.ts\n            \n            class\n            UpdateDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/master/document_groups/query.ts\n            \n            class\n            Query\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/modules/master/documents/documents.controller.ts\n            \n            controller\n            DocumentController\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/modules/master/documents/documents.service.ts\n            \n            injectable\n            DocumentService\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                src/modules/master/documents/dto/create.dto.ts\n            \n            class\n            DocumentDto\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/modules/master/documents/dto/documents.dto.ts\n            \n            class\n            Document\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/modules/master/documents/dto/update.dto.ts\n            \n            class\n            UpdateDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/master/documents/query.ts\n            \n            class\n            Query\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/modules/master/state_mas/dto/create.dto.ts\n            \n            class\n            StateDto\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/modules/master/state_mas/dto/state.dto.ts\n            \n            class\n            State\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/modules/master/state_mas/dto/update.dto.ts\n            \n            class\n            UpdateDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/master/state_mas/query.ts\n            \n            class\n            Query\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/modules/master/state_mas/state.controller.ts\n            \n            controller\n            StateController\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/modules/master/state_mas/state.service.ts\n            \n            injectable\n            StateService\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                src/providers/dynamic-query.service-to-be-remove.ts\n            \n            class\n            DynamicQueryBuilder\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/providers/dynamic-query.service-to-be-remove.ts\n            \n            interface\n            QueryOptions\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/providers/file-upload.service.ts\n            \n            variable\n            copyFile\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/providers/file-upload.service.ts\n            \n            variable\n            editFileName\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/providers/file-upload.service.ts\n            \n            variable\n            fileName\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/providers/file-upload.service.ts\n            \n            variable\n            filesRoot\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/providers/file-upload.service.ts\n            \n            variable\n            fsRoot\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/providers/file-upload.service.ts\n            \n            variable\n            imageFileFilter\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/providers/file-upload.service.ts\n            \n            variable\n            multiFileDestDir\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/providers/file-upload.service.ts\n            \n            variable\n            profileDestDir\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/providers/file-upload.service.ts\n            \n            variable\n            removeFile\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/swagger.ts\n            \n            function\n            Unnamed function\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/deep-resolver.ts\n            \n            function\n            deepResolvePromises\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/dto/pagination-response.dto.ts\n            \n            class\n            PaginationResponseDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/utils/dto/pagination-response.dto.ts\n            \n            function\n            PaginationResponse\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/dto/pagination.dto.ts\n            \n            class\n            FilterQueryDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/utils/dto/pagination.dto.ts\n            \n            class\n            PaginationQueryDto\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/utils/dto/pagination.dto.ts\n            \n            class\n            SortByDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/utils/dto/pagination.meta.dto.ts\n            \n            class\n            PaginationMetaDto\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/utils/dto/pagination.meta.dto.ts\n            \n            interface\n            IPageMetaDtoParameters\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/utils/serializer.interceptor.ts\n            \n            injectable\n            ResolvePromisesInterceptor\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/utils/transformers/lower-case.transformer.ts\n            \n            variable\n            lowerCaseTransformer\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/transformers/upper-case.transformer.ts\n            \n            variable\n            upperCaseTransformer\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/types/pagination-options.ts\n            \n            interface\n            IPaginationFieldConfig\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/utils/validate-config.ts\n            \n            function\n            validateConfig\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @aws-sdk/client-s3 : ^3.609.0\n        \n            @aws-sdk/s3-request-presigner : ^3.613.0\n        \n            @express-rate-limit/tsconfig : ^1.0.2\n        \n            @infineit/winston-logger : ^1.0.23\n        \n            @nestjs/axios : ^3.0.2\n        \n            @nestjs/common : ^10.3.9\n        \n            @nestjs/config : ^3.2.2\n        \n            @nestjs/core : ^10.3.9\n        \n            @nestjs/platform-express : ^10.3.9\n        \n            @nestjs/swagger : ^7.3.1\n        \n            @nestjs/terminus : ^10.2.3\n        \n            @prisma/client : ^5.17.0\n        \n            axios : ^1.7.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            compression : ^1.7.4\n        \n            exonerate : ^1.1.0\n        \n            express : ^4.19.2\n        \n            express-rate-limit : ^7.4.0\n        \n            helmet : ^7.1.0\n        \n            install : ^0.13.0\n        \n            multer : ^1.4.5-lts.1\n        \n            multer-s3 : ^3.0.1\n        \n            nestjs-pino : ^4.1.0\n        \n            npm : ^10.8.3\n        \n            pg : ^8.12.0\n        \n            pino-pretty : ^11.2.2\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Environment   (src/.../app.config.ts)\n                        \n                        \n                            Environment   (src/.../logger.config.ts)\n                        \n                        \n                            FileDriver   (src/.../file-config.type.ts)\n                        \n                        \n                            PaginationType   (src/.../pagination.dto.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/app.config.ts\n    \n        \n            \n                \n                    \n                        \n                        Environment\n                    \n                \n                        \n                            \n                                 Development\n                            \n                        \n                        \n                            \n                                Value : development\n                            \n                        \n                        \n                            \n                                 Production\n                            \n                        \n                        \n                            \n                                Value : production\n                            \n                        \n                        \n                            \n                                 Staging\n                            \n                        \n                        \n                            \n                                Value : staging\n                            \n                        \n                        \n                            \n                                 Test\n                            \n                        \n                        \n                            \n                                Value : testing\n                            \n                        \n            \n        \n\n    src/config/logger.config.ts\n    \n        \n            \n                \n                    \n                        \n                        Environment\n                    \n                \n                        \n                            \n                                 Development\n                            \n                        \n                        \n                            \n                                Value : development\n                            \n                        \n                        \n                            \n                                 Production\n                            \n                        \n                        \n                            \n                                Value : production\n                            \n                        \n                        \n                            \n                                 Staging\n                            \n                        \n                        \n                            \n                                Value : staging\n                            \n                        \n                        \n                            \n                                 Test\n                            \n                        \n                        \n                            \n                                Value : testing\n                            \n                        \n            \n        \n\n    src/config/type/file-config.type.ts\n    \n        \n            \n                \n                    \n                        \n                        FileDriver\n                    \n                \n                    \n                        \n                            Enum representing the available file storage drivers.\n\n                        \n                    \n                        \n                            \n                                 LOCAL\n                            \n                        \n                        \n                            \n                                Value : local\n                            \n                        \n                        \n                            \n                                 S3\n                            \n                        \n                        \n                            \n                                Value : s3\n                            \n                        \n                        \n                            \n                                 S3_PRESIGNED\n                            \n                        \n                        \n                            \n                                Value : s3-presigned\n                            \n                        \n            \n        \n\n    src/utils/dto/pagination.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        PaginationType\n                    \n                \n                    \n                        \n                            Enum representing different pagination types.\n\n                        \n                    \n                        \n                            \n                                 NONE\n                            \n                        \n                        \n                            \n                                Value : no\n                            \n                        \n                        \n                            \n                                 INFINITY\n                            \n                        \n                        \n                            \n                                Value : infinity\n                            \n                        \n                        \n                            \n                                 PAGINATE\n                            \n                        \n                        \n                            \n                                Value : paginate\n                            \n                        \n                        \n                            \n                                 ALL\n                            \n                        \n                        \n                            \n                                Value : all\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            deepResolvePromises   (src/.../deep-resolver.ts)\n                        \n                        \n                            IsNumberStringOrNumber   (src/.../number.string.validator.ts)\n                        \n                        \n                            IsValidField   (src/.../field.validator.ts)\n                        \n                        \n                            main   (prisma/.../seed1.ts)\n                        \n                        \n                            PaginationResponse   (src/.../pagination-response.dto.ts)\n                        \n                        \n                            ToNumber   (src/.../transforms.decorator.ts)\n                        \n                        \n                            Unnamed function   (src/.../swagger.ts)\n                        \n                        \n                            validateConfig   (src/.../validate-config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                        Initializes and starts the NestJS application.\nConfigures global settings, middleware, and exception handling.\nSets up Swagger documentation if in development, staging, or testing environments.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves when the server starts.\n\n                            \n                \n            \n        \n    \n    src/utils/deep-resolver.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        deepResolvePromises\n                        \n                    \n                \n            \n            \n                \ndeepResolvePromises(input)\n                \n            \n\n\n\n\n            \n                \n                        Recursively resolves all nested promises in an object or array.\nThis function takes an input that can be a promise, an array, an object, or a primitive value,\nand recursively resolves any promises contained within. It supports nested structures and\npreserves the original structure of the input while resolving promises.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                input\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe input to process, which may include promises.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/core/decorators/number.string.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsNumberStringOrNumber\n                        \n                    \n                \n            \n            \n                \nIsNumberStringOrNumber(validationOptions?: ValidationOptions)\n                \n            \n\n\n\n\n            \n                \n                        Custom decorator that checks if a value is a number or a numeric string,\nand if it is greater than or equal to 1.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                validationOptions\n                                            \n                                                        ValidationOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptions used to pass to validation decorators.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/core/validators/field.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsValidField\n                        \n                    \n                \n            \n            \n                \nIsValidField(entity: any, validationOptions?: ValidationOptions)\n                \n            \n\n\n\n\n            \n                \n                        Custom decorator to validate if a field is a valid key of the provided entity class.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                entity\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe class constructor of the entity to check against.\n\n\n                                            \n                                        \n                                        \n                                                validationOptions\n                                            \n                                                        ValidationOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional validation options.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    prisma/seed1.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        main\n                        \n                    \n                \n            \n            \n                \nmain()\n                \n            \n\n\n\n\n        \n    \n    src/utils/dto/pagination-response.dto.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PaginationResponse\n                        \n                    \n                \n            \n            \n                \nPaginationResponse(classReference: Type)\n                \n            \n\n\n\n\n            \n                \n                        Creates a pagination response DTO class with specified data type.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                classReference\n                                            \n                                                        Type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe class reference for the data type.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/core/decorators/transforms.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ToNumber\n                        \n                    \n                \n            \n            \n                \nToNumber()\n                \n            \n\n\n\n\n            \n                \n                        Decorator that converts a string number or number to an integer.\n\n\n                        \n                            Returns :         void\n\n                        \n                            \n                                \nA property decorator function.\n\n\n                            \n                \n            \n        \n    \n    src/swagger.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Unnamed function\n                        \n                    \n                \n            \n            \n                \nUnnamed function(app: INestApplication)\n                \n            \n\n\n\n\n            \n                \n                        Configures and sets up Swagger documentation for the NestJS application.\nThis function creates and configures Swagger documentation based on application configuration.\nIt sets up two separate Swagger documents: one for the main application modules and another\nfor common modules. It also configures various Swagger UI options.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                app\n                                            \n                                                        INestApplication\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe NestJS application instance.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/utils/validate-config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        validateConfig\n                        \n                    \n                \n            \n            \n                \nvalidateConfig(config: Record, envVariablesClass: ClassConstructor)\n                \n            \n\n\n\n\n            \n                \n                        Validates and transforms a configuration object based on a class schema.\nThis function uses class-transformer to transform a plain object into an instance of a class\nand class-validator to validate the instance. If validation fails, it throws an error with\ndetailed information about the validation errors.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                        Record\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe configuration object to be validated.\n\n\n                                            \n                                        \n                                        \n                                                envVariablesClass\n                                            \n                                                        ClassConstructor\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe class constructor used for transforming and validating the configuration.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nNestJS Starter Boilerplate\nIntroduction\nIntroducing the NestJS boilerplate - a great way to get started on your next Node.js project! It's built using the latest version of NestJS, which is a powerful and flexible framework for creating efficient and scalable server-side applications. The boilerplate includes TypeScript, PostgreSQL, and JWT authentication right out of the box, so you don't have to worry about setting those up yourself.\nOther awesome features include configuration support with Dotenv, Prisma for interacting with databases, Swagger for API documentation, and Docker Compose for container orchestration. Plus, the boilerplate also comes with pre-configured linting tools and secure HTTP headers with Helmet.\nGetting started is easy - just clone the repository, install the dependencies, and you're ready to start building your next great idea!\n🚀 Features\n\n📱 NestJS — latest version\n🎉 TypeScript - Type checking\n⚙️ Dotenv - Supports environment variables\n🗝 Authentication - JWT, RSA256\n🏬 Authorization - RBAC, CBAC\n🏪 Prisma - Database ORM\n🏪 PostgreSQL - Open-Source Relational Database\n🧠 Configuration - Single config for all\n📃 Swagger - API Documentation\n🐳 Docker Compose - Container Orchestration\n🔐 Helmet - secure HTTP headers\n📏 ESLint — Pluggable JavaScript linter\n💖 Prettier - Opinionated Code Formatter\n✨ Commitlint - Lint your conventional commits\n🕵️‍♂️ Code Scanning - Code scanning with CodeQL\n\nGetting Started\nPrerequisites\nEnsure you have the following installed:\n\nNode.js (20+)\nYarn or npm (yarn recomandation)\nDocker (if applicable)\n\nInstallation\n\nClone the repository:Example :git clone https://github.com/dharmesh--patel/nestjs-starter.git\ncd yourproject\n\nVisual Studio Code Extensions\nExample :- ESLint - `dbaeumer.vscode-eslint` - Dirk Baeumer\n\n- Prettier - Code formatter by `esbenp.prettier-vscode` - Esben Petersen\n \n- Prisma - `Prisma.prisma` - prisma.io\n\n- Dockfile - `foxundermoon.shell-format` - foxundermoon\n\n- markdown - `yzhang.markdown-all-in-one` - Yu Zhang\n\n- To open the command pallette, \n  you can use Command + Shift + P on Mac or Control + Shift + P on Windows. \n  In the command pallette search format, then choose Format Document.Installation\nExample :$ yarnRunning Server\nDevelopment / Staging / Production\nExample :# development\n$ yarn start\n\n# staging\n$ yarn staging\n\n# production\n$ yarn productionBuild\nExample :yarn buildTests\nExample :# unit tests\n$ yarn test\n\n# e2e tests\n$ yarn test:e2e\n\n# test coverage\n$ yarn test:covDatabase Migration Development\nExample :   # Change in database file (it will create migration file in prisma/migration)\n   $ yarn migrationDocker Container and Database Migration for Staging/Production\nExample :   # To run docker file run script (it will create docker container run update database)\n   $ bash ./start.sh staging/productionDocker Container down\nExample :   # To run docker file run script (it will create docker container run update database)\n   $ bash ./stop.sh staging/productionRunning all services on Docker\nExample :docker-compose up --buildRun only database and redis services on Docker\nExample :docker-compose up postgres redisSwagger Documentation\n\nSwagger documentation endpoint will be running at  /docs .\n\nK8s Deployment Local\nExample :# first start minikube\nminikube start\n\n# deployment\nkubectl apply -f k8s/\n\n# get endpoint of k8s cluster\nminikube service nestjs-starter-serviceCommit Message Guidelines\n[optional scope]: \n[optional body]\n[optional footer(s)]\nType: The type of change (e.g., feat, fix, docs, style, refactor, test, chore).\nScope: The scope of the change (e.g., core, api, config), which is optional.\nDescription: A short, imperative summary of the change.\nBody: Detailed explanation of the change, which is optional.\nFooter: Any footer notes, such as breaking changes or issues closed, which is optional.\ngit commit -m \"feat(api): add new endpoint for user registration\"\ngit commit -m \"fix(core): handle edge case in data processing\"\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nLicense\nNest is MIT licensed.\nAuthor\n🇮🇳 Dharmesh Patel \nGithub\nLinkedin\nInstagram\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2024 Dharmesh Patel\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ApiModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        BankModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CityModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CountriesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CountryMasModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CurrenciesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DocumentGroupModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DocumentModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FilesLocalModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FilesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FilesS3Module\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FilesS3PresignedModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HelperModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HomeModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StateModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ApiModule\n\n\n\ncluster_ApiModule_imports\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_BankModule\n\n\n\ncluster_BankModule_exports\n\n\n\ncluster_BankModule_providers\n\n\n\ncluster_CityModule\n\n\n\ncluster_CityModule_exports\n\n\n\ncluster_CityModule_providers\n\n\n\ncluster_CountriesModule\n\n\n\ncluster_CountriesModule_exports\n\n\n\ncluster_CountriesModule_providers\n\n\n\ncluster_CurrenciesModule\n\n\n\ncluster_CurrenciesModule_providers\n\n\n\ncluster_DocumentGroupModule\n\n\n\ncluster_DocumentGroupModule_exports\n\n\n\ncluster_DocumentGroupModule_providers\n\n\n\ncluster_DocumentModule\n\n\n\ncluster_DocumentModule_exports\n\n\n\ncluster_DocumentModule_providers\n\n\n\ncluster_FilesLocalModule\n\n\n\ncluster_FilesLocalModule_exports\n\n\n\ncluster_FilesLocalModule_providers\n\n\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_imports\n\n\n\ncluster_FilesModule_exports\n\n\n\ncluster_FilesModule_providers\n\n\n\ncluster_FilesS3Module\n\n\n\ncluster_FilesS3Module_exports\n\n\n\ncluster_FilesS3Module_providers\n\n\n\ncluster_FilesS3PresignedModule\n\n\n\ncluster_FilesS3PresignedModule_exports\n\n\n\ncluster_FilesS3PresignedModule_providers\n\n\n\ncluster_HelperModule\n\n\n\ncluster_HelperModule_exports\n\n\n\ncluster_HelperModule_providers\n\n\n\ncluster_HomeModule\n\n\n\ncluster_HomeModule_providers\n\n\n\ncluster_StateModule\n\n\n\ncluster_StateModule_exports\n\n\n\ncluster_StateModule_providers\n\n\n\n\nBankModule\n\nBankModule\n\n\n\nApiModule\n\nApiModule\n\nApiModule -->\n\nBankModule->ApiModule\n\n\n\n\n\nBankService \n\nBankService \n\nBankService  -->\n\nBankModule->BankService \n\n\n\n\n\nCityModule\n\nCityModule\n\nApiModule -->\n\nCityModule->ApiModule\n\n\n\n\n\nCityService \n\nCityService \n\nCityService  -->\n\nCityModule->CityService \n\n\n\n\n\nCountriesModule\n\nCountriesModule\n\nApiModule -->\n\nCountriesModule->ApiModule\n\n\n\n\n\nCountriesService \n\nCountriesService \n\nCountriesService  -->\n\nCountriesModule->CountriesService \n\n\n\n\n\nCountryMasModule\n\nCountryMasModule\n\nApiModule -->\n\nCountryMasModule->ApiModule\n\n\n\nCountriesService  -->\n\nCountryMasModule->CountriesService \n\n\n\n\n\nCurrenciesModule\n\nCurrenciesModule\n\nApiModule -->\n\nCurrenciesModule->ApiModule\n\n\n\n\n\nDocumentGroupModule\n\nDocumentGroupModule\n\nApiModule -->\n\nDocumentGroupModule->ApiModule\n\n\n\n\n\nDocumentGroupService \n\nDocumentGroupService \n\nDocumentGroupService  -->\n\nDocumentGroupModule->DocumentGroupService \n\n\n\n\n\nDocumentModule\n\nDocumentModule\n\nApiModule -->\n\nDocumentModule->ApiModule\n\n\n\n\n\nDocumentService \n\nDocumentService \n\nDocumentService  -->\n\nDocumentModule->DocumentService \n\n\n\n\n\nFilesModule\n\nFilesModule\n\nApiModule -->\n\nFilesModule->ApiModule\n\n\n\n\n\nFilesService \n\nFilesService \n\nFilesService  -->\n\nFilesModule->FilesService \n\n\n\n\n\nHomeModule\n\nHomeModule\n\nApiModule -->\n\nHomeModule->ApiModule\n\n\n\n\n\nStateModule\n\nStateModule\n\nApiModule -->\n\nStateModule->ApiModule\n\n\n\n\n\nStateService \n\nStateService \n\nStateService  -->\n\nStateModule->StateService \n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nApiModule->AppModule\n\n\n\n\n\nHelperModule\n\nHelperModule\n\nAppModule -->\n\nHelperModule->AppModule\n\n\n\n\n\nCommonQuery5 \n\nCommonQuery5 \n\nCommonQuery5  -->\n\nHelperModule->CommonQuery5 \n\n\n\n\n\nPaginationService \n\nPaginationService \n\nPaginationService  -->\n\nHelperModule->PaginationService \n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nHelperModule->PrismaService \n\n\n\n\n\nUtilsService \n\nUtilsService \n\nUtilsService  -->\n\nHelperModule->UtilsService \n\n\n\n\n\nBankService\n\nBankService\n\nBankModule -->\n\nBankService->BankModule\n\n\n\n\n\nCityService\n\nCityService\n\nCityModule -->\n\nCityService->CityModule\n\n\n\n\n\nCountriesService\n\nCountriesService\n\nCountriesModule -->\n\nCountriesService->CountriesModule\n\n\n\nCountryMasModule -->\n\nCountriesService->CountryMasModule\n\n\n\n\n\nCurrenciesService\n\nCurrenciesService\n\nCurrenciesModule -->\n\nCurrenciesService->CurrenciesModule\n\n\n\n\n\nDocumentGroupService\n\nDocumentGroupService\n\nDocumentGroupModule -->\n\nDocumentGroupService->DocumentGroupModule\n\n\n\n\n\nDocumentService\n\nDocumentService\n\nDocumentModule -->\n\nDocumentService->DocumentModule\n\n\n\n\n\nFilesLocalService \n\nFilesLocalService \n\n\n\nFilesLocalModule\n\nFilesLocalModule\n\nFilesLocalService  -->\n\nFilesLocalModule->FilesLocalService \n\n\n\n\n\nFilesLocalService\n\nFilesLocalService\n\nFilesLocalModule -->\n\nFilesLocalService->FilesLocalModule\n\n\n\n\n\nFilesS3Module\n\nFilesS3Module\n\nFilesModule -->\n\nFilesS3Module->FilesModule\n\n\n\n\n\nFilesS3Service \n\nFilesS3Service \n\nFilesS3Service  -->\n\nFilesS3Module->FilesS3Service \n\n\n\n\n\nFilesS3PresignedModule\n\nFilesS3PresignedModule\n\nFilesModule -->\n\nFilesS3PresignedModule->FilesModule\n\n\n\n\n\nFilesS3PresignedService \n\nFilesS3PresignedService \n\nFilesS3PresignedService  -->\n\nFilesS3PresignedModule->FilesS3PresignedService \n\n\n\n\n\nFilesService\n\nFilesService\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\nFilesS3Service\n\nFilesS3Service\n\nFilesS3Module -->\n\nFilesS3Service->FilesS3Module\n\n\n\n\n\nFilesS3PresignedService\n\nFilesS3PresignedService\n\nFilesS3PresignedModule -->\n\nFilesS3PresignedService->FilesS3PresignedModule\n\n\n\n\n\nPaginationService\n\nPaginationService\n\nHelperModule -->\n\nPaginationService->HelperModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nHelperModule -->\n\nPrismaService->HelperModule\n\n\n\n\n\nHomeService\n\nHomeService\n\nHomeModule -->\n\nHomeService->HomeModule\n\n\n\n\n\nStateService\n\nStateService\n\nStateModule -->\n\nStateService->StateModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        16 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    14 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    19 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    69 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    13 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.0.0\n        \n            Description : Nest TypeScript starter repository\n        \n            Homepage : https://github.com/dharmesh-r-patel/nestjs-starter.git#readme\n        \n            Bugs : https://github.com/dharmesh-r-patel/nestjs-starter.git/issues\n        \n            License : MIT\n        \n            Repository : git+https://github.com/dharmesh-r-patel/nestjs-starter.git\n        \n            Author : Dharmesh Patel\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AllConfigType   (src/.../config.type.ts)\n                        \n                        \n                            AppConfig   (src/.../app-config.type.ts)\n                        \n                        \n                            DatabaseConfig   (src/.../database-config.type.ts)\n                        \n                        \n                            DeepPartial   (src/.../deep-partial.type.ts)\n                        \n                        \n                            FileConfig   (src/.../file-config.type.ts)\n                        \n                        \n                            LoggerConfig   (src/.../logger-config.type.ts)\n                        \n                        \n                            MaybeType   (src/.../maybe.type.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/type/config.type.ts\n    \n    \n        \n            \n                \n                    \n                    AllConfigType\n                \n            \n            \n                \n                    Aggregated configuration type for the entire application.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/config/type/app-config.type.ts\n    \n    \n        \n            \n                \n                    \n                    AppConfig\n                \n            \n            \n                \n                    Configuration settings for the application.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/config/type/database-config.type.ts\n    \n    \n        \n            \n                \n                    \n                    DatabaseConfig\n                \n            \n            \n                \n                    Configuration settings for database connectivity.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/utils/types/deep-partial.type.ts\n    \n    \n        \n            \n                \n                    \n                    DeepPartial\n                \n            \n            \n                \n                    A utility type that recursively makes all properties of a given type T optional.\nThis allows for partial objects to be deeply nested within the original type T.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/config/type/file-config.type.ts\n    \n    \n        \n            \n                \n                    \n                    FileConfig\n                \n            \n            \n                \n                    Configuration settings for file storage.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/config/type/logger-config.type.ts\n    \n    \n        \n            \n                \n                    \n                    LoggerConfig\n                \n            \n            \n                \n                    Configuration settings for the application.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/utils/types/maybe.type.ts\n    \n    \n        \n            \n                \n                    \n                    MaybeType\n                \n            \n            \n                \n                    A utility type that represents a type T that may be either of type T or undefined.\nThis is useful for cases where a value may or may not be present.\n\n                \n            \n            \n                \n                        T | undefined\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
