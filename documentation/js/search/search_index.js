var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AllExceptionsFilter.html",[0,0.167,1,3.394]],["body/classes/AllExceptionsFilter.html",[0,0.25,1,5.953,2,0.985,3,0.175,4,0.16,5,0.116,6,6.565,7,4.328,8,0.533,9,4.376,10,4.371,11,3.437,12,4.386,13,2.87,14,5.13,15,3.91,16,5.13,17,0.372,18,1.06,19,3.527,20,6.788,21,1.665,22,1.802,23,3.924,24,0.934,25,4.941,26,2.981,27,3.922,28,1.436,29,0.012,30,0.963,31,0.508,32,1.128,33,2.143,34,3.182,35,5.629,36,4.941,37,4.116,38,4.134,39,4.998,40,4.941,41,4.116,42,2.491,43,4.825,44,2.332,45,5.078,46,4.376,47,4.116,48,2.825,49,2.647,50,3.371,51,1.046,52,2.725,53,0.508,54,4.116,55,2.496,56,0.956,57,3.181,58,2.496,59,0.175,60,1.64,61,3.924,62,5.6,63,4.941,64,4.328,65,1.692,66,3.181,67,3.181,68,3.181,69,3.382,70,2.332,71,3.924,72,3.622,73,3.622,74,3.622,75,3.181,76,3.622,77,1.287,78,3.924,79,1.925,80,3.382,81,2.138,82,4.941,83,4.328,84,3.382,85,1.862,86,3.924,87,0.008,88,0.008]],["title/modules/ApiModule.html",[89,0.754,90,2.925]],["body/modules/ApiModule.html",[0,0.303,3,0.173,4,0.159,5,0.176,8,0.478,9,5.108,11,3.619,29,0.012,44,2.315,47,4.087,53,0.578,56,0.945,57,3.146,59,0.173,79,2.474,85,2.813,87,0.008,88,0.008,89,1.492,90,5.884,91,3.23,92,2.114,93,2.469,94,2.469,95,2.194,96,2.96,97,2.469,98,4.281,99,4.281,100,5.524,101,5.524,102,5.426,103,5.426,104,3.207,105,2.469,106,2.114,107,4.887,108,6.348,109,6.348,110,5.472,111,4.087,112,3.673,113,3.116,114,3.31,115,5.561,116,4.345,117,5.042,118,5.561,119,6.348,120,3.078,121,2.713,122,5.813,123,3.866,124,5.561,125,4.887,126,4.654,127,4.887,128,4.887,129,4.887,130,4.887,131,4.887,132,4.887,133,1.783,134,5.108,135,2.194,136,2.37,137,3.881,138,6.348,139,6.348,140,3.345,141,4.281]],["title/controllers/AppController.html",[142,1.665,143,3.133]],["body/controllers/AppController.html",[0,0.245,3,0.247,4,0.105,5,0.133,8,0.47,13,1.453,17,0.244,19,3.124,21,1.242,22,1.181,24,0.628,26,1.509,27,1.636,29,0.012,30,0.488,44,1.74,46,3.876,47,3.071,49,2.612,51,1.322,53,0.499,56,0.626,59,0.115,60,1.103,65,0.706,70,2.839,77,1.735,79,1.262,81,3.118,85,2.845,87,0.006,88,0.006,89,0.571,95,2.542,112,2.76,113,1.991,114,1.991,120,1.57,121,1.632,133,1.181,142,2.596,143,5.283,144,1.352,145,2.836,146,1.581,147,6.599,148,6.158,149,2.905,150,1.74,151,2.746,152,4.178,153,2.515,154,4.152,155,4.152,156,3.975,157,2.913,158,4.581,159,2.45,160,6.249,161,6.662,162,1.318,163,3.238,164,3.238,165,5.011,166,5.473,167,4.77,168,4.761,169,5.473,170,2.043,171,6.662,172,3.277,173,2.515,174,3.448,175,3.805,176,4.77,177,3.238,178,7.549,179,4.769,180,1.009,181,2.571,182,4.77,183,1.972,184,0.95,185,4.77,186,6.662,187,3.238,188,2.571,189,3.238,190,2.216,191,4.178,192,3.238,193,2.084,194,3.238,195,2.836,196,1.873,197,1.707,198,3.238,199,1.305,200,1.859,201,3.238,202,2.571,203,2.571,204,3.238,205,3.876,206,1.798,207,4.498,208,2.905,209,3.788,210,3.497,211,3.238,212,2.571,213,3.238,214,0.951,215,3.238,216,3.238,217,2.374,218,1.453,219,3.238,220,2.374,221,3.238,222,3.238,223,4.77,224,3.238,225,3.238,226,3.238,227,0.895,228,3.238,229,3.238,230,3.238,231,3.238,232,3.238,233,3.238,234,3.238,235,3.238,236,4.77,237,4.178,238,3.238,239,4.77,240,3.238,241,7.549,242,3.238,243,7.395,244,7.395,245,7.395,246,6.249,247,3.238,248,5.663,249,5.663,250,5.663,251,5.663,252,5.663,253,5.663,254,5.663,255,3.646,256,7.206,257,4.77,258,2.084,259,3.238,260,3.238,261,4.77,262,3.238,263,4.77,264,3.238,265,1.972,266,6.249,267,6.249,268,3.238,269,4.77,270,3.238,271,4.77,272,3.238]],["title/modules/AppModule.html",[89,0.754,255,2.751]],["body/modules/AppModule.html",[0,0.306,3,0.179,4,0.163,5,0.169,8,0.487,29,0.012,44,2.754,47,4.169,53,0.614,56,0.975,59,0.179,65,1.099,87,0.009,88,0.009,89,1.411,90,5.471,91,2.987,92,2.181,93,2.546,94,2.546,95,2.262,96,3.019,97,2.546,104,3.271,105,2.546,106,2.181,114,2.703,115,5.672,117,5.143,123,3.944,133,1.838,140,3.449,143,5.246,144,2.703,147,5.143,154,3.695,155,4.748,156,3.947,157,3.019,188,5.143,190,3.449,199,2.611,255,5.467,273,4.415,274,4.415,275,4.869,276,4.415,277,5.143,278,5.672,279,3.271,280,2.441,281,3.944,282,4.169,283,5.143,284,4.003,285,2.444,286,6.476,287,4.748,288,6.476,289,5.04,290,5.04,291,5.04,292,4.003,293,4.169,294,4.415,295,5.143,296,5.04,297,3.944,298,4.415,299,5.143,300,5.04,301,5.04,302,5.04,303,5.246,304,4.003,305,5.04,306,5.04,307,1.671,308,5.04,309,5.04,310,5.04,311,5.04,312,5.04,313,5.04]],["title/classes/BadRequestExceptionFilter.html",[0,0.167,314,3.394]],["body/classes/BadRequestExceptionFilter.html",[0,0.247,2,0.782,3,0.139,4,0.127,5,0.092,8,0.513,10,3.785,11,2.656,12,3.96,13,2.458,15,3.479,16,4.671,17,0.295,18,0.908,19,3.021,20,6.578,21,1.426,22,1.432,23,3.117,24,0.899,26,2.553,27,3.627,28,1.417,29,0.012,30,0.95,31,0.489,32,1.113,33,1.907,34,2.831,35,5.009,37,3.526,38,3.765,39,4.622,41,3.526,42,2.134,43,4.394,44,1.998,45,4.349,46,3.748,47,3.526,48,2.377,49,2.411,50,2.888,51,1.335,52,2.165,53,0.558,55,1.983,56,0.759,57,2.527,58,1.983,59,0.139,60,1.579,61,3.117,65,1.765,66,2.527,67,2.527,68,2.527,69,2.686,71,3.117,72,2.878,75,3.526,77,1.777,80,3.748,85,2.064,87,0.007,88,0.007,113,1.639,120,1.903,180,0.831,205,4.317,209,6.428,314,5.421,315,6.288,316,3.438,317,2.888,318,5.477,319,5.477,320,3.925,321,3.925,322,5.477,323,7.631,324,3.925,325,2.888,326,3.335,327,3.921,328,3.921,329,6.826,330,2.458,331,5.477,332,3.925,333,3.438,334,1.386,335,2.271,336,2.271,337,5.525,338,3.438,339,2.117,340,3.925,341,3.925,342,3.925,343,3.925,344,3.438,345,3.925,346,3.925,347,3.925,348,5.477,349,3.925,350,3.925,351,3.925,352,2.165,353,3.117,354,3.438,355,3.438,356,3.925,357,1.83,358,2.271,359,3.925,360,3.925,361,3.925,362,3.526,363,7.784,364,4.349,365,5.421,366,3.438,367,5.421,368,3.925,369,4.797,370,5.477,371,4.349,372,3.438,373,2.391,374,3.438,375,3.438,376,3.438,377,3.438,378,3.438,379,3.438,380,3.925,381,3.438,382,3.438,383,3.925,384,3.925,385,3.925,386,2.37,387,3.925]],["title/injectables/CommaSeparated.html",[388,1.417,389,3.133]],["body/injectables/CommaSeparated.html",[0,0.29,3,0.152,4,0.139,5,0.101,8,0.497,15,3.905,17,0.322,21,1.513,24,0.765,28,1.305,29,0.012,30,1.066,31,0.416,32,1.026,51,1.682,53,0.416,56,0.828,59,0.251,60,1.713,65,1.544,81,3.063,85,2.669,87,0.008,88,0.008,159,2.515,210,4.261,214,1.411,307,2.348,317,3.48,327,4.118,334,2.501,386,2.856,388,2.188,389,5.191,390,2.075,391,3.399,392,5.242,393,1.129,394,4.916,395,6.202,396,6.202,397,4.097,398,4.558,399,5.091,400,3.577,401,5.091,402,7.201,403,4.28,404,2.819,405,6.961,406,5.067,407,5.091,408,4.28,409,3.819,410,5.242,411,2.672,412,5.091,413,5.242,414,4.509,415,5.242,416,3.946,417,5.781,418,6.485,419,3.206,420,3.363,421,2.936,422,3.363,423,2.427,424,4.616,425,4.616,426,4.616,427,5.091,428,3.749,429,3.749,430,3.749,431,3.749,432,3.749,433,4.026,434,5.028,435,3.54,436,4.02,437,2.929,438,2.929,439,3.749,440,2.929,441,2.929,442,3.749,443,2.257,444,3.749,445,3.749,446,3.749,447,2.606,448,5.091,449,2.606,450,3.749,451,1.995,452,3.749,453,3.749,454,3.749,455,3.749,456,3.749,457,3.749,458,3.749,459,3.749,460,2.755]],["title/classes/ConfigService.html",[0,0.167,461,2.159]],["body/classes/ConfigService.html",[0,0.257,2,0.623,3,0.111,4,0.101,5,0.074,17,0.235,19,4.125,21,1.21,22,2.023,24,0.906,28,1.246,29,0.012,30,0.925,31,0.44,32,0.979,38,1.723,51,1.174,53,0.566,59,0.165,65,1.339,79,1.81,87,0.006,88,0.006,157,1.457,200,1.218,214,1.602,227,1.533,287,3.406,293,2.012,297,1.903,303,2.291,307,1.54,334,1.103,393,1.127,414,2.83,416,2.802,419,1.723,420,1.808,421,1.578,422,1.808,423,1.304,461,2.802,462,2.481,463,4.646,464,4.646,465,4.646,466,5.223,467,4.858,468,3.125,469,4.07,470,3.125,471,2.09,472,4.07,473,3.125,474,4.07,475,3.125,476,3.125,477,3.125,478,3.125,479,3.125,480,1.808,481,3.406,482,3.183,483,2.976,484,2.291,485,4.405,486,1.903,487,1.808,488,2.991,489,2.737,490,3.18,491,2.737,492,3.18,493,2.737,494,3.18,495,2.737,496,3.18,497,2.737,498,3.18,499,2.737,500,2.737,501,2.138,502,2.737,503,3.18,504,2.737,505,3.18,506,2.737,507,3.18,508,2.737,509,2.737,510,1.808,511,2.012,512,2.45,513,3.406,514,2.138,515,2.291,516,2.481,517,3.69,518,2.481,519,2.481,520,2.481,521,4.07,522,2.481,523,2.481,524,4.502,525,4.502,526,4.877,527,2.481,528,2.481,529,2.481,530,2.481,531,2.737,532,4.07,533,2.991,534,2.737,535,4.07,536,1.903,537,2.737,538,2.737,539,4.858,540,1.903,541,2.737,542,2.737,543,1.648,544,2.737,545,2.737,546,2.737,547,2.737,548,2.481,549,2.315,550,2.737,551,2.737,552,2.737,553,1.903,554,2.737,555,2.737,556,4.07,557,2.737,558,4.07,559,2.737,560,3.18,561,2.737,562,2.481,563,2.737,564,2.481,565,2.737,566,2.737,567,2.737,568,2.737,569,2.481,570,2.737,571,2.737,572,2.737,573,2.737,574,2.991,575,2.737,576,2.291,577,2.481,578,2.481,579,2.291,580,2.737,581,2.291,582,2.737,583,2.737,584,2.138,585,2.737,586,2.737,587,2.737,588,2.481,589,2.737,590,2.481,591,2.737,592,2.481,593,2.737,594,2.481,595,2.737,596,2.481,597,2.737,598,2.481,599,2.737,600,2.481,601,2.737,602,2.481,603,2.737,604,2.481,605,2.737,606,2.737,607,2.737,608,2.737,609,2.737,610,2.737,611,2.737,612,2.737,613,2.737,614,2.291,615,2.737,616,2.481,617,2.737,618,2.481,619,2.737,620,2.481,621,2.737,622,2.481,623,2.737,624,2.481,625,2.737,626,2.737,627,2.481,628,2.737,629,2.481,630,2.737,631,2.481,632,2.737,633,2.481,634,2.737,635,2.737,636,2.481,637,2.737,638,2.481,639,2.737,640,2.481,641,2.737,642,2.481,643,2.737,644,2.481,645,2.737,646,2.481,647,2.737,648,2.737,649,2.481,650,2.737,651,2.481,652,2.737,653,2.481,654,2.737,655,2.737,656,2.481,657,2.737,658,2.481,659,2.737,660,2.481,661,2.737,662,2.481,663,2.737,664,2.481,665,2.737,666,2.138,667,2.737,668,1.808,669,2.737,670,1.808,671,2.737,672,2.291,673,2.737,674,2.291,675,2.737,676,2.291,677,2.481,678,2.481]],["title/controllers/CountriesController.html",[142,1.665,679,3.133]],["body/controllers/CountriesController.html",[0,0.209,3,0.085,4,0.078,5,0.111,8,0.59,11,1.834,17,0.18,21,0.985,24,0.703,28,1.389,29,0.012,30,1.011,31,0.553,32,0.942,42,1.474,49,1.336,50,1.994,51,1.421,53,0.598,55,2.696,56,1.032,59,0.189,60,1.43,65,1.268,70,0.872,77,1.222,87,0.005,88,0.005,89,0.422,113,1.579,114,1.579,121,1.294,133,0.872,135,3.748,142,2.617,144,0.998,150,1.38,151,2.588,159,3.304,162,1.474,165,2.435,168,2.435,170,1.474,174,3.627,175,2.304,180,1.308,183,3.25,184,1.565,206,2.011,207,3.727,214,1.291,218,3.298,325,1.26,330,1.698,339,2.174,358,2.189,373,2.304,386,1.034,393,1.029,397,2.189,416,1.911,549,1.579,679,5.069,680,2.094,681,1.38,682,5.296,683,3.944,684,4.238,685,1.698,686,3.019,687,3.541,688,4.617,689,3.704,690,1.898,691,3.979,692,2.39,693,2.39,694,2.858,695,1.474,696,2.588,697,3.004,698,1.898,699,2.39,700,3.912,701,2.094,702,3.004,703,4.91,704,2.39,705,3.004,706,3.004,707,2.094,708,3.353,709,2.39,710,2.39,711,2.39,712,3.004,713,2.773,714,3.25,715,6.183,716,2.858,717,2.905,718,1.898,719,4.313,720,2.39,721,2.094,722,2.39,723,4.533,724,1.525,725,4.674,726,2.589,727,3.313,728,4.693,729,6.328,730,4.111,731,1.752,732,1.752,733,3.25,734,2.304,735,5.387,736,4.674,737,2.39,738,3.004,739,2.094,740,5.336,741,2.588,742,2.39,743,2.39,744,5.672,745,2.39,746,2.094,747,3.313,748,3.765,749,2.39,750,2.39,751,2.094,752,2.39,753,2.094,754,2.39,755,2.39,756,1.636,757,2.39,758,2.39,759,2.39,760,2.39,761,2.39,762,2.094,763,2.39,764,2.39,765,2.39,766,4.693,767,4.693,768,4.693,769,5.814,770,4.693,771,4.693,772,3.743,773,4.693,774,3.212,775,4.693,776,3.782,777,3.782,778,3.123,779,3.782,780,1.377,781,3.577,782,3.782,783,1.525,784,4.674,785,3.782,786,3.782,787,3.782,788,3.782,789,3.782,790,3.782,791,3.441,792,3.782,793,2.39,794,2.773,795,3.022,796,2.39,797,2.39,798,2.589,799,1.752,800,2.086,801,1.752,802,3.782,803,1.752,804,2.39]],["title/modules/CountriesModule.html",[89,0.754,100,2.925]],["body/modules/CountriesModule.html",[0,0.223,3,0.202,4,0.185,5,0.178,8,0.526,29,0.012,53,0.565,56,1.102,59,0.202,87,0.009,88,0.009,89,1.392,91,2.378,92,2.464,93,2.877,94,2.877,95,2.557,96,3.528,97,3.823,100,5.882,104,3.533,105,2.877,106,2.464,114,2.919,121,2.392,133,2.077,135,3.139,144,3.295,146,2.319,150,2.551,339,2.154,679,5.938,681,2.551,682,5.127,735,6.371,736,4.989,805,4.989,806,4.989,807,4.989,808,5.696,809,6.125,810,6.125,811,2.725,812,4.502,813,5.127,814,4.502,815,5.696]],["title/classes/Country.html",[0,0.167,135,1.918]],["body/classes/Country.html",[0,0.275,2,0.597,3,0.106,4,0.097,5,0.127,8,0.339,17,0.225,18,0.997,24,1.042,29,0.012,30,1.18,31,0.62,33,2.186,44,1.643,53,0.215,59,0.106,77,1.409,87,0.006,88,0.006,89,0.529,118,3.944,120,2.184,121,1.541,133,1.093,135,3.823,136,3.505,140,3.082,162,2.187,170,2.418,173,3.172,180,0.953,184,0.879,197,2.374,218,2.021,227,1.495,279,2.275,357,3.37,393,1.198,411,2.206,443,2.374,451,2.1,681,1.643,685,2.021,695,1.872,700,3.966,780,1.765,816,2.625,817,2.374,818,3.082,819,2.743,820,3.576,821,3.082,822,2.484,823,4.503,824,4.925,825,4.777,826,4.503,827,2.899,828,2.1,829,2.606,830,2.374,831,6.015,832,4.503,833,5.58,834,4.117,835,5.58,836,6.155,837,3.082,838,4.503,839,5.539,840,3.576,841,2.021,842,3.944,843,5.41,844,4.739,845,4.296,846,4.296,847,6.154,848,5.41,849,5.151,850,5.41,851,5.415,852,5.41,853,2.997,854,4.503,855,4.739,856,2.997,857,4.739,858,2.997,859,3.944,860,5.379,861,4.296,862,4.503,863,6.015,864,2.997,865,4.296,866,2.997,867,3.944,868,3.944,869,4.739,870,4.739,871,4.739,872,4.739,873,4.739,874,2.997,875,2.899,876,2.899,877,2.997,878,5.269,879,5.269,880,4.739,881,2.997,882,2.484,883,4.739,884,2.997,885,5.41,886,2.997,887,6.015,888,4.503,889,2.997,890,4.503,891,2.997,892,4.296,893,2.997,894,4.503,895,5.41,896,2.997,897,2.997]],["title/classes/CreateCountryDto.html",[0,0.167,691,2.925]],["body/classes/CreateCountryDto.html",[0,0.307,2,0.667,3,0.119,4,0.109,5,0.136,8,0.368,17,0.252,18,1.053,24,1.033,29,0.012,30,1.097,31,0.615,32,0.863,33,1.478,53,0.455,59,0.119,77,1.758,87,0.006,88,0.006,89,0.591,133,1.221,135,3.772,136,2.371,153,2.578,162,2.212,170,2.4,180,1.035,184,0.982,279,2.47,307,1.621,326,2.977,327,3.718,334,2.039,352,2.696,357,3.48,393,1.195,441,3.346,451,2.279,483,3.392,681,1.783,691,3.346,695,1.949,700,4.233,751,5.562,780,1.863,817,2.578,824,4.688,827,3.147,828,2.279,833,5.363,834,3.346,835,5.363,836,3.882,845,4.586,846,4.586,855,5.058,857,5.058,859,4.282,865,5.6,867,5.562,868,4.282,869,5.058,870,5.058,871,5.058,872,5.058,873,5.058,875,4.088,876,4.088,878,5.562,879,5.562,880,5.058,882,2.696,883,6.177,898,2.932,899,3.867,900,2.371,901,5.562,902,3.147,903,4.282,904,2.115,905,4.282,906,2.829,907,2.8,908,3.584,909,4.233,910,5.058,911,5.058,912,5.058,913,7.052,914,3.348,915,3.348,916,3.348,917,2.932,918,3.348,919,3.348,920,5.774,921,5.774,922,5.774,923,5.774,924,5.774,925,3.348,926,3.348,927,3.348,928,3.348,929,3.348,930,4.889,931,3.348,932,3.348,933,4.889,934,3.348,935,3.802,936,3.882,937,1.765,938,5.562,939,5.366,940,2.932,941,2.659,942,3.348,943,2.932,944,4.282,945,3.348,946,2.932,947,2.659]],["title/classes/CreateDto.html",[0,0.167,694,2.603]],["body/classes/CreateDto.html",[0,0.312,2,0.723,3,0.129,4,0.118,5,0.142,8,0.623,17,0.273,18,1.093,24,0.983,29,0.012,30,1.2,31,0.596,33,2.192,53,0.472,59,0.129,77,1.349,87,0.007,88,0.007,89,0.64,112,3.814,133,1.323,136,4.183,153,2.732,162,2.146,170,2.375,180,1.096,184,1.064,206,2.927,227,2.225,279,2.617,326,3.155,327,3.822,334,2.134,352,2.858,357,3.479,386,2.614,393,1.148,441,3.546,451,2.817,483,3.136,487,2.099,514,3.546,681,1.89,694,4.415,695,2.003,783,2.657,817,2.732,827,3.335,828,2.415,849,5.844,860,5.757,861,4.799,882,3.636,899,4.014,900,2.512,901,5.773,902,3.335,903,4.538,904,2.242,905,4.538,906,2.998,907,2.93,908,3.798,935,3.7,937,1.913,938,6.683,939,4.961,940,6.983,941,2.881,943,3.178,944,3.178,946,3.178,948,3.178,949,4.799,950,4.799,951,5.926,952,4.799,953,3.628,954,5.293,955,3.628,956,5.181,957,7.249,958,6.349,959,5.181,960,5.773,961,5.773,962,3.628,963,5.181,964,6.591,965,3.628,966,5.773,967,5.293,968,3.628,969,3.628,970,4.538,971,3.628,972,4.511,973,3.628,974,3.628,975,5.773,976,3.628,977,3.496,978,3.628,979,5.181,980,3.628,981,3.628]],["title/controllers/CurrenciesController.html",[142,1.665,982,3.133]],["body/controllers/CurrenciesController.html",[0,0.143,3,0.129,4,0.118,5,0.143,8,0.623,17,0.274,21,1.719,24,0.869,28,1.63,29,0.012,30,1.093,31,0.572,32,1.165,42,2.573,51,1.616,53,0.547,55,1.84,56,0.704,59,0.129,60,1.679,65,1.522,70,2.208,77,1.577,87,0.007,88,0.007,89,0.643,91,2.168,113,3.03,114,2.168,121,1.777,133,1.328,136,4.154,142,2.024,144,1.52,146,1.722,149,4.021,151,2.519,153,2.739,159,3.486,162,1.824,168,3.344,174,3.757,180,1.536,183,2.218,184,1.068,206,1.372,207,5.243,214,1.316,218,3.648,339,1.879,358,3.005,373,3.163,393,1.074,397,3.503,549,2.528,681,1.895,684,4.809,686,3.623,687,4.549,688,4.125,689,4.349,690,2.892,694,4.651,695,2.005,696,2.519,697,5.243,698,2.892,701,3.19,702,2.892,703,5.543,705,4.125,706,4.125,707,3.19,708,3.385,714,3.163,716,2.218,717,2.62,718,2.892,719,4.858,721,3.19,723,5.32,724,2.094,725,3.19,726,3.555,727,4.55,729,5.783,730,5.304,731,2.67,732,2.67,733,2.218,734,2.218,738,2.892,739,3.19,741,1.766,744,5.783,746,3.19,747,4.55,748,4.021,753,3.19,756,2.492,762,3.19,814,3.344,821,3.555,825,4.125,909,4.84,982,5.32,983,3.19,984,5.075,985,5.194,986,4.55,987,4.494,988,3.163,989,4.55,990,3.641,991,3.641,992,3.641,993,3.641,994,3.641,995,3.641,996,3.163,997,3.641,998,3.641,999,3.808,1000,3.19,1001,3.19,1002,3.641,1003,3.641,1004,3.641,1005,3.641,1006,3.641,1007,3.641,1008,3.19,1009,3.641,1010,3.641,1011,3.641,1012,3.641,1013,3.641,1014,3.641,1015,3.641,1016,3.641]],["title/modules/CurrenciesModule.html",[89,0.754,101,2.925]],["body/modules/CurrenciesModule.html",[0,0.227,3,0.206,4,0.188,5,0.18,8,0.532,29,0.012,53,0.569,56,1.121,59,0.206,87,0.009,88,0.009,89,1.401,91,2.419,92,2.507,93,2.927,94,2.927,95,2.601,96,3.795,97,2.927,101,5.867,104,3.57,105,2.927,106,2.507,114,2.95,121,2.716,122,5.181,133,2.113,134,4.836,136,3.427,142,2.754,144,2.95,200,2.754,339,2.171,681,2.577,809,6.19,810,6.19,812,4.549,982,5.59,984,4.549,987,5.33,1000,5.075,1017,5.075,1018,5.075,1019,5.794,1020,7.067,1021,5.794]],["title/injectables/CurrenciesService.html",[388,1.417,987,2.751]],["body/injectables/CurrenciesService.html",[0,0.242,3,0.097,4,0.089,5,0.12,8,0.512,13,1.885,17,0.206,18,0.696,21,1.612,22,1.532,24,0.897,26,2.676,27,2.122,28,1.578,29,0.012,30,1.058,31,0.488,32,1.153,51,1.557,53,0.536,54,4.888,55,1.381,56,0.529,59,0.097,60,1.702,65,1.725,70,0.997,73,3.75,77,1.977,81,3.04,85,1.928,87,0.006,88,0.006,89,1.013,114,1.754,121,1.437,133,0.997,136,4.056,146,1.393,148,3.079,150,1.532,156,3.755,157,2.676,159,3.395,166,3.679,168,2.704,172,3.321,174,3.658,180,1.441,190,1.871,200,2.738,205,4.659,206,2.566,208,3.115,214,1.234,218,3.644,279,2.122,339,2.213,352,3.166,357,3.048,358,3.583,386,1.183,388,1.393,390,1.326,393,1.059,397,3.321,460,2.704,681,1.532,683,3.495,684,2.172,686,2.887,687,3.771,688,3.336,689,4.057,690,3.336,694,4.388,695,1.941,696,2.037,697,3.336,698,3.336,703,3.336,705,3.336,706,4.062,708,3.003,714,3.495,716,1.665,717,2.483,718,3.336,723,4.207,724,2.062,732,2.005,733,1.665,734,1.665,738,2.172,748,4.279,756,2.875,803,4.207,811,2.236,814,2.704,821,2.875,822,2.317,899,2.558,900,1.326,904,1.183,984,4.523,986,3.679,987,4.523,996,2.558,1001,2.395,1022,2.395,1023,3.336,1024,2.558,1025,3.679,1026,3.079,1027,4.2,1028,1.885,1029,3.679,1030,3.166,1031,2.215,1032,4.2,1033,2.734,1034,4.523,1035,4.388,1036,4.2,1037,3.679,1038,2.875,1039,3.336,1040,3.079,1041,2.875,1042,2.734,1043,2.734,1044,4.2,1045,4.2,1046,2.734,1047,5.027,1048,4.2,1049,2.734,1050,5.726,1051,5.424,1052,2.734,1053,3.679,1054,2.395,1055,2.395,1056,2.734,1057,2.734,1058,1.871,1059,2.172,1060,1.508,1061,5.115,1062,5.739,1063,5.115,1064,5.115,1065,4.48,1066,2.172,1067,2.395,1068,2.734,1069,2.734,1070,4.523,1071,2.734,1072,3.336,1073,4.2,1074,2.734,1075,2.734,1076,2.734,1077,5.115,1078,5.115,1079,5.115,1080,4.2,1081,2.734,1082,2.395,1083,2.734,1084,2.734,1085,2.734,1086,2.734,1087,2.734,1088,2.734,1089,3.679,1090,4.48,1091,2.734,1092,4.918,1093,2.734,1094,4.48,1095,4.062,1096,4.558,1097,2.734,1098,2.395,1099,2.734,1100,3.336,1101,3.75,1102,4.558,1103,4.062,1104,2.734,1105,2.215,1106,2.395,1107,3.336,1108,2.172,1109,2.734,1110,2.734,1111,2.734,1112,2.734,1113,2.734,1114,2.734]],["title/classes/Currency.html",[0,0.167,136,2.072]],["body/classes/Currency.html",[0,0.302,2,0.75,3,0.133,4,0.122,5,0.145,8,0.626,17,0.283,18,1.216,24,1.014,29,0.012,30,1.247,31,0.593,32,0.938,33,2.218,53,0.381,59,0.133,87,0.007,88,0.007,89,0.664,133,1.372,136,4.234,153,3.532,162,2.239,170,2.382,180,1.417,184,1.103,196,3.075,197,2.802,218,2.766,227,2.193,279,2.685,307,1.762,357,3.651,386,2.666,393,1.16,449,4.834,451,2.873,681,1.938,695,1.851,817,2.802,818,4.584,819,3.236,820,4.22,822,2.931,837,3.637,840,4.22,849,6.069,860,6.304,861,5.611,875,3.421,876,3.421,902,3.421,907,1.823,917,3.294,935,3.734,936,4.22,947,2.986,949,4.894,950,4.894,951,6.219,952,4.894,954,6.189,960,6.424,961,6.424,966,6.424,967,6.189,970,4.655,975,6.424,1115,3.294,1116,5.314,1117,5.314,1118,5.314,1119,6.604,1120,3.76,1121,3.76,1122,3.76,1123,5.314,1124,4.655,1125,5.314,1126,3.76,1127,3.76,1128,3.76,1129,3.76,1130,3.76]],["title/classes/DynamicQueryBuilder.html",[0,0.167,1131,2.925]],["body/classes/DynamicQueryBuilder.html",[0,0.218,2,0.514,3,0.091,4,0.084,5,0.061,8,0.453,17,0.501,21,1.045,24,0.732,28,1.249,29,0.012,30,1.204,31,0.597,32,1.176,33,1.49,51,1.458,53,0.185,59,0.197,60,1.286,65,1.812,70,1.797,87,0.005,88,0.005,180,1.702,214,1.492,227,0.712,258,3.172,335,1.491,336,1.491,339,2.396,393,1.09,397,1.491,411,2.718,449,3.387,471,2.822,683,1.569,687,4.407,689,4.186,724,1.618,780,1.631,811,1.004,841,3.093,900,3.095,1030,4.62,1031,2.598,1040,2.941,1041,1.764,1060,4.461,1105,3.513,1131,4.56,1132,4.786,1133,4.418,1134,1.659,1135,3.514,1136,4.012,1137,4.012,1138,4.012,1139,4.012,1140,3.514,1141,5.687,1142,2.577,1143,5.472,1144,3.341,1145,4.56,1146,3.514,1147,2.577,1148,4.311,1149,3.514,1150,2.577,1151,3.514,1152,2.577,1153,1.177,1154,3.579,1155,6.338,1156,6.338,1157,4.489,1158,1.889,1159,3.887,1160,2.213,1161,2.257,1162,5.051,1163,3.186,1164,4.786,1165,1.569,1166,4.315,1167,4.416,1168,1.889,1169,4.315,1170,2.257,1171,4.315,1172,1.889,1173,2.257,1174,1.889,1175,1.889,1176,2.257,1177,1.889,1178,5.836,1179,4.315,1180,2.851,1181,4.315,1182,1.889,1183,2.257,1184,1.569,1185,4.416,1186,4.315,1187,3.514,1188,3.806,1189,3.514,1190,3.186,1191,3.514,1192,3.514,1193,3.514,1194,5.59,1195,4.315,1196,4.871,1197,4.871,1198,3.514,1199,3.514,1200,2.257,1201,1.764,1202,2.257,1203,2.257,1204,2.257,1205,2.257,1206,2.257,1207,2.257,1208,2.257,1209,4.315,1210,2.257,1211,2.941,1212,2.257]],["title/classes/EnvVarAppConfigValidator.html",[0,0.167,513,3.133]],["body/classes/EnvVarAppConfigValidator.html",[0,0.259,2,0.634,3,0.113,4,0.103,5,0.075,8,0.239,17,0.239,18,0.781,19,3.092,22,1.16,24,0.816,29,0.012,30,0.479,31,0.474,38,1.755,53,0.568,59,0.167,65,1.351,79,1.835,87,0.006,88,0.006,157,1.483,162,1.712,200,1.835,214,1.607,227,1.549,287,3.452,293,2.048,297,1.937,303,2.332,307,1.561,334,1.124,393,1.106,414,1.937,416,2.832,419,1.755,420,1.841,421,1.607,422,1.841,423,1.328,461,2.379,462,2.527,466,4.848,467,2.787,469,2.787,472,2.787,474,2.787,480,1.841,481,3.452,482,3.207,483,2.996,484,2.332,485,4.452,486,1.937,487,1.841,488,3.031,489,2.787,490,3.222,491,2.787,492,3.222,493,2.787,494,3.222,495,2.787,496,3.222,497,2.787,498,3.222,499,2.787,500,2.787,501,2.177,502,2.787,503,3.222,504,2.787,505,3.222,506,2.787,507,3.222,508,2.787,509,2.787,510,1.841,511,2.048,512,2.956,513,4.109,514,2.177,515,2.332,516,4.452,517,3.739,518,4.452,519,4.452,520,4.452,521,4.124,522,2.527,523,2.527,524,4.542,525,4.542,526,4.92,527,2.527,528,2.527,529,2.527,530,2.527,531,2.787,532,4.124,533,3.031,534,2.787,535,4.124,536,1.937,537,2.787,538,2.787,539,4.91,540,1.937,541,2.787,542,2.787,543,1.677,544,2.787,545,2.787,546,2.787,547,2.787,548,2.527,549,2.34,550,2.787,551,2.787,552,2.787,553,1.937,554,2.787,555,2.787,556,4.124,557,2.787,558,4.124,559,2.787,560,3.222,561,2.787,562,2.527,563,2.787,564,2.527,565,2.787,566,2.787,567,2.787,568,2.787,569,2.527,570,2.787,571,2.787,572,2.787,573,2.787,574,3.031,575,2.787,576,2.332,577,2.527,578,2.527,579,2.332,580,2.787,581,2.332,582,2.787,583,2.787,584,2.177,585,2.787,586,2.787,587,2.787,588,2.527,589,2.787,590,2.527,591,2.787,592,2.527,593,2.787,594,2.527,595,2.787,596,2.527,597,2.787,598,2.527,599,2.787,600,2.527,601,2.787,602,2.527,603,2.787,604,2.527,605,2.787,606,2.787,607,2.787,608,2.787,609,2.787,610,2.787,611,2.787,612,2.787,613,2.787,614,2.332,615,2.787,616,2.527,617,2.787,618,2.527,619,2.787,620,2.527,621,2.787,622,2.527,623,2.787,624,2.527,625,2.787,626,2.787,627,2.527,628,2.787,629,2.527,630,2.787,631,2.527,632,2.787,633,2.527,634,2.787,635,2.787,636,2.527,637,2.787,638,2.527,639,2.787,640,2.527,641,2.787,642,2.527,643,2.787,644,2.527,645,2.787,646,2.527,647,2.787,648,2.787,649,2.527,650,2.787,651,2.527,652,2.787,653,2.527,654,2.787,655,2.787,656,2.527,657,2.787,658,2.527,659,2.787,660,2.527,661,2.787,662,2.527,663,2.787,664,2.527,665,2.787,666,2.177,667,2.787,668,1.841,669,2.787,670,1.841,671,2.787,672,2.332,673,2.787,674,2.332,675,2.787,676,2.332,677,2.527,678,2.527,1213,2.332,1214,3.181,1215,2.787,1216,3.181,1217,4.124,1218,4.124,1219,3.181,1220,3.181]],["title/classes/EnvironmentVariablesValidator.html",[0,0.167,1221,2.357]],["body/classes/EnvironmentVariablesValidator.html",[0,0.31,2,0.896,3,0.159,4,0.146,5,0.106,8,0.509,17,0.338,18,0.996,24,1.072,29,0.012,30,0.677,31,0.583,44,2.191,51,1.271,53,0.518,59,0.24,87,0.008,88,0.008,120,2.18,162,2.291,180,0.951,193,2.894,199,1.812,214,0.896,227,1.66,280,2.722,281,4.717,282,4.356,285,2.18,293,4.65,304,3.569,327,2.37,334,2.39,393,1.151,400,3.035,404,2.913,409,2.601,416,3.035,466,3.295,480,2.601,481,4.404,482,3.987,483,3.351,485,5.374,486,2.737,487,2.601,510,2.601,511,2.894,512,2.37,514,3.076,515,3.295,516,5.374,517,4.771,518,5.374,519,5.374,520,5.374,533,3.868,536,3.659,553,4.121,560,3.076,574,2.894,576,3.295,577,3.569,578,3.569,579,3.295,581,3.295,584,3.076,780,1.319,783,2.422,841,2.017,1028,3.037,1213,5.519,1215,3.937,1217,5.262,1218,5.262,1221,4.152,1222,3.569,1223,6.767,1224,6.767,1225,6.767,1226,6.767,1227,5.927,1228,4.495,1229,4.495,1230,4.495,1231,4.495,1232,4.495,1233,4.495,1234,4.495,1235,4.495,1236,3.937,1237,4.495,1238,3.295,1239,3.937,1240,2.894,1241,2.894,1242,3.076,1243,3.295,1244,3.937,1245,3.076,1246,3.295,1247,2.017,1248,4.495,1249,4.495,1250,3.295,1251,4.495,1252,4.495,1253,3.937,1254,4.495,1255,3.937,1256,4.495,1257,4.495,1258,4.495,1259,4.495,1260,4.495,1261,4.495,1262,4.495,1263,4.495,1264,4.495]],["title/classes/EnvironmentVariablesValidator-1.html",[0,0.14,780,1.051,1221,1.976]],["body/classes/EnvironmentVariablesValidator-1.html",[0,0.283,2,0.655,3,0.117,4,0.107,5,0.158,8,0.247,17,0.247,18,0.799,19,1.812,24,1.051,29,0.012,30,0.86,31,0.608,38,3.15,44,1.758,51,1.02,53,0.451,59,0.203,79,2.73,87,0.006,88,0.006,157,3.683,158,4.613,162,2.24,180,0.695,199,1.324,214,0.655,217,3.535,227,2.052,280,2.372,281,3.832,282,3.677,283,3.829,285,1.593,295,4.997,307,1.894,327,1.732,334,2.017,386,2.086,393,1.15,400,2.436,404,2.338,409,1.901,414,4.614,471,2.153,481,4.187,482,3.601,483,3.452,484,2.408,486,2.001,487,1.901,510,1.901,511,2.115,512,1.732,514,2.248,515,2.408,524,5.135,560,3.909,562,2.609,564,4.536,569,4.536,574,2.115,783,2.303,841,2.164,904,3.418,1028,2.564,1154,3.719,1213,4.187,1221,4.551,1238,2.408,1240,2.115,1245,2.248,1246,2.408,1247,1.475,1265,2.877,1266,5.712,1267,5.712,1268,5.712,1269,5.712,1270,5.712,1271,5.712,1272,7.978,1273,5.003,1274,5.712,1275,5.003,1276,5.003,1277,5.003,1278,5.003,1279,3.285,1280,7.703,1281,5.712,1282,6.292,1283,3.285,1284,3.285,1285,5.712,1286,3.285,1287,6.136,1288,4.821,1289,4.821,1290,4.821,1291,3.285,1292,4.821,1293,3.285,1294,3.478,1295,3.104,1296,6.136,1297,3.285,1298,3.285,1299,3.15,1300,4.821,1301,4.821,1302,7.048,1303,3.305,1304,3.285,1305,3.285,1306,3.285,1307,3.104,1308,3.285,1309,3.285,1310,3.285,1311,3.285,1312,4.223,1313,4.821,1314,3.285,1315,5.512,1316,3.285,1317,7.005,1318,2.609,1319,3.285,1320,3.285,1321,3.285,1322,3.285,1323,3.285,1324,3.285,1325,3.285,1326,3.285,1327,3.285,1328,3.285,1329,3.285,1330,3.285,1331,3.285,1332,4.223,1333,3.285,1334,3.285,1335,3.285,1336,4.821,1337,3.285,1338,3.285,1339,3.285,1340,3.285,1341,3.285,1342,3.285,1343,3.285,1344,3.285]],["title/classes/EnvironmentVariablesValidator-2.html",[0,0.14,451,1.67,1221,1.976]],["body/classes/EnvironmentVariablesValidator-2.html",[0,0.28,2,0.773,3,0.138,4,0.126,5,0.196,8,0.292,17,0.292,18,0.9,24,0.976,29,0.012,30,0.818,31,0.584,51,1.15,53,0.487,59,0.222,87,0.007,88,0.007,121,1.859,162,2.047,180,0.821,199,1.564,214,0.773,218,2.438,227,1.732,280,2.792,281,4.136,282,4.035,285,1.881,297,4.354,327,2.046,334,1.37,393,1.111,400,2.744,404,3.293,409,2.245,449,3.308,471,2.559,480,2.245,482,3.04,483,3.457,484,2.844,488,4.77,510,2.245,511,2.498,512,2.046,522,3.081,523,4.978,524,4.979,525,4.979,526,5.393,527,4.978,528,4.978,529,4.978,530,4.978,543,3.906,549,2.268,574,2.498,614,3.983,666,5.527,668,2.245,670,2.245,672,2.844,674,2.844,676,3.983,677,4.314,678,3.081,696,3.764,783,2.19,841,2.438,1028,3.54,1154,3.454,1213,2.844,1221,4.455,1238,3.983,1240,2.498,1245,2.655,1246,2.844,1247,1.742,1296,5.948,1303,2.245,1307,3.497,1318,3.081,1345,3.398,1346,4.213,1347,6.268,1348,3.88,1349,5.393,1350,4.313,1351,4.491,1352,3.88,1353,3.497,1354,3.88,1355,3.718,1356,3.88,1357,3.88,1358,3.88,1359,4.314,1360,3.143,1361,3.143,1362,4.758,1363,3.88,1364,3.497,1365,4.758,1366,2.864,1367,4.758,1368,3.081,1369,3.88,1370,3.398,1371,6.268,1372,4.314,1373,3.88,1374,3.88,1375,3.88,1376,3.88,1377,3.88,1378,5.432,1379,5.432]],["title/classes/EnvironmentVariablesValidator-3.html",[0,0.14,882,1.976,1221,1.976]],["body/classes/EnvironmentVariablesValidator-3.html",[0,0.307,2,0.863,3,0.208,4,0.14,5,0.102,8,0.326,17,0.326,18,0.971,24,1.085,29,0.012,31,0.59,44,1.579,46,2.964,51,1.24,53,0.51,59,0.236,65,1.277,85,1.632,87,0.008,88,0.008,120,2.1,162,2.308,179,2.964,180,0.916,199,1.746,214,1.168,280,2.681,281,4.666,282,4.275,285,2.1,299,5.65,304,3.439,307,1.436,327,2.283,334,2.345,393,1.139,400,2.96,404,2.841,409,2.506,411,2.004,414,4.973,416,3.755,466,3.175,471,1.632,480,2.506,482,4.025,483,3.39,510,2.506,511,2.788,512,2.283,533,3.772,536,3.568,548,3.439,553,4.044,574,2.788,841,1.944,1028,2.981,1221,4.1,1227,5.816,1236,3.793,1238,3.175,1240,2.788,1241,2.788,1242,2.964,1243,3.175,1244,3.793,1245,2.964,1246,3.175,1247,1.944,1250,3.175,1315,6.511,1380,3.439,1381,6.64,1382,6.64,1383,6.64,1384,6.64,1385,6.64,1386,6.64,1387,6.64,1388,6.64,1389,6.64,1390,6.64,1391,7.662,1392,4.33,1393,7.115,1394,4.33,1395,4.33,1396,4.33,1397,4.33,1398,4.33,1399,4.33,1400,4.33,1401,4.33,1402,4.33,1403,4.33,1404,4.33,1405,3.793,1406,5.859,1407,4.33,1408,4.33,1409,4.33,1410,4.33,1411,4.33,1412,4.33,1413,4.33,1414,4.33,1415,4.33,1416,4.33,1417,4.33,1418,4.33,1419,4.33,1420,4.33,1421,4.33,1422,4.33,1423,4.33,1424,4.33,1425,4.33,1426,4.33,1427,4.33,1428,4.33,1429,4.33]],["title/classes/FileNotImageException.html",[0,0.167,1430,3.394]],["body/classes/FileNotImageException.html",[0,0.289,2,1.077,3,0.192,4,0.175,5,0.182,8,0.556,10,3.897,22,1.971,24,0.712,26,3.156,27,3.42,28,1.214,29,0.012,30,0.814,31,0.387,32,1.408,43,3.48,53,0.53,56,1.045,59,0.192,60,1.566,77,1.763,81,3.573,85,3.216,87,0.009,88,0.009,150,2.469,170,2.042,199,2.179,209,6.336,317,4.085,357,3.156,393,1.138,423,2.826,1070,3.48,1366,3.569,1430,6.464,1431,5.93,1432,4.734,1433,6.77,1434,7.392,1435,5.405,1436,6.77,1437,4.759,1438,6.77,1439,5.405,1440,4.963,1441,1.909,1442,2.731,1443,3.127,1444,5.405,1445,5.405,1446,5.405,1447,5.405]],["title/classes/FileResponseDto.html",[0,0.167,1448,2.253]],["body/classes/FileResponseDto.html",[0,0.225,2,1.147,3,0.204,4,0.187,5,0.199,8,0.529,17,0.433,18,1.166,24,0.758,29,0.012,31,0.545,49,2.485,53,0.504,59,0.204,79,2.742,87,0.009,88,0.009,162,1.59,169,6.163,170,1.944,173,3.71,180,1.489,184,1.688,218,3.158,702,5.588,817,3.71,828,2.682,839,4.815,851,3.937,1443,4.071,1448,4.283,1449,6.163,1450,3.703,1451,5.588,1452,4.559,1453,5.039,1454,5.588,1455,5.588,1456,5.588,1457,5.588,1458,5.588,1459,6.163,1460,6.163,1461,3.703]],["title/classes/FileResponseDto-1.html",[0,0.14,780,1.051,1448,1.888]],["body/classes/FileResponseDto-1.html",[0,0.297,2,1.016,3,0.181,4,0.165,5,0.204,8,0.491,17,0.383,18,1.081,24,0.859,29,0.012,31,0.575,33,2.293,34,3.404,49,2.678,53,0.467,59,0.181,79,2.955,84,4.464,87,0.009,88,0.009,162,1.802,170,2.095,184,1.495,218,2.928,393,1.068,435,3.973,685,2.928,811,2.955,817,3.439,818,4.464,822,4.183,828,3.041,839,4.923,851,4.464,906,3.774,1299,4.423,1346,3.439,1351,3.774,1448,4.133,1450,3.282,1452,4.423,1453,4.465,1461,3.282,1462,4.631,1463,6.301,1464,4.883,1465,6.523,1466,6.523,1467,6.301,1468,5.714,1469,6.523,1470,6.523,1471,5.097,1472,3.774,1473,6.523,1474,6.523,1475,6.523,1476,6.523,1477,6.523,1478,6.523]],["title/classes/FileResponseDto-2.html",[0,0.14,451,1.67,1448,1.888]],["body/classes/FileResponseDto-2.html",[0,0.208,2,1.058,3,0.188,4,0.172,5,0.2,8,0.551,17,0.399,18,1.215,24,0.699,29,0.012,31,0.525,33,2.023,34,3.561,47,3.416,49,2.363,53,0.479,59,0.188,79,2.999,87,0.009,88,0.009,120,3.732,162,1.849,170,1.849,173,2.797,180,1.416,184,1.556,196,3.871,197,3.528,218,3.003,435,4.075,685,3.29,695,1.849,817,3.864,822,2.926,827,4.308,828,3.699,829,3.871,830,2.797,837,5.016,839,5.267,851,3.631,876,3.416,988,4.075,1180,3.871,1443,4.241,1448,3.864,1450,3.416,1452,4.537,1454,5.314,1455,5.314,1456,5.314,1457,5.314,1458,5.314,1461,3.416,1468,4.647,1479,5.861,1480,6.691,1481,5.314,1482,5.861,1483,6.691,1484,5.306,1485,5.861]],["title/classes/FileType.html",[0,0.167,1452,2.357]],["body/classes/FileType.html",[0,0.315,2,0.844,3,0.15,4,0.137,5,0.203,8,0.434,17,0.319,18,0.957,24,0.76,29,0.012,31,0.545,33,1.745,34,3.164,48,1.596,53,0.576,59,0.15,65,1.258,77,1.503,79,3.133,87,0.008,88,0.008,89,0.747,120,2.798,133,1.545,150,2.105,153,3.043,162,1.948,170,2.191,184,1.926,197,3.043,214,1.309,218,2.947,280,2.657,293,4.226,294,3.709,297,4.828,298,3.709,307,1.913,334,1.496,393,1.108,411,2.412,471,1.596,488,2.726,543,3.043,666,5.209,668,2.45,670,2.45,681,2.105,817,3.043,822,3.183,829,3.339,839,3.949,851,2.898,875,4.538,876,4.538,907,3.183,908,4.231,935,2.798,937,3.043,947,4.583,1028,2.59,1119,3.709,1239,3.709,1240,3.715,1299,4.198,1350,3.561,1351,3.339,1353,2.726,1355,2.898,1361,3.339,1368,3.363,1372,3.363,1452,4.198,1454,5.213,1455,5.213,1456,5.213,1457,5.213,1458,4.583,1485,5.055,1486,3.709,1487,7.05,1488,4.583,1489,3.561,1490,4.235,1491,4.235,1492,4.235,1493,4.235,1494,5.055,1495,5.055,1496,5.055,1497,5.055,1498,5.055,1499,5.771,1500,4.231,1501,5.055,1502,4.231,1503,2.898,1504,3.709,1505,3.363,1506,3.363,1507,5.055,1508,5.055,1509,4.235,1510,4.235,1511,4.235,1512,4.235,1513,3.105,1514,4.235,1515,4.235,1516,4.583,1517,4.235,1518,4.235,1519,3.363,1520,3.709]],["title/classes/FileUploadDto.html",[0,0.167,1521,2.925]],["body/classes/FileUploadDto.html",[0,0.313,2,1.08,3,0.192,4,0.176,5,0.195,8,0.51,17,0.408,18,1.286,24,0.893,29,0.012,30,1.168,31,0.556,33,2.05,53,0.486,59,0.192,87,0.009,88,0.009,162,1.874,170,2.251,180,1.435,184,1.59,227,2.045,279,3.426,334,1.914,393,1.009,400,3.426,483,2.934,681,2.473,695,2.143,696,3.288,811,2.642,827,4.366,828,3.161,935,3.589,977,3.924,1364,4.993,1367,5.94,1443,3.924,1462,4.764,1464,4.13,1472,3.924,1481,5.385,1521,5.464,1522,4.747,1523,3.924,1524,6.781,1525,6.781,1526,5.426,1527,5.877,1528,5.385,1529,5.42,1530,5.42,1531,6.482,1532,5.42,1533,5.42,1534,7.401]],["title/controllers/FilesLocalController.html",[142,1.665,1535,3.133]],["body/controllers/FilesLocalController.html",[0,0.173,3,0.157,4,0.143,5,0.203,8,0.54,17,0.332,18,0.732,21,1.546,24,0.782,28,1.333,29,0.012,30,0.894,31,0.536,32,1.048,49,2.864,51,1.518,53,0.581,54,3.822,56,0.854,58,2.231,59,0.157,60,1.552,79,3.003,85,2.237,87,0.008,88,0.008,114,2.478,121,2.031,142,2.613,144,1.843,146,1.968,149,3.616,150,2.165,159,2.902,162,1.64,165,3.822,173,3.13,174,2.768,180,0.935,183,2.689,184,1.295,206,1.664,208,3.616,214,1.183,277,3.507,358,2.555,393,0.977,435,2.689,695,1.64,726,4.063,733,2.689,741,2.141,811,2.313,999,4.352,1065,5.2,1144,2.879,1294,2.689,1346,4.152,1361,4.631,1366,3.13,1443,3.435,1448,3.782,1464,4.084,1472,3.435,1523,3.435,1526,3.237,1535,5.486,1536,3.868,1537,4.715,1538,5.326,1539,4.715,1540,4.416,1541,5.937,1542,4.416,1543,4.715,1544,5.937,1545,5.937,1546,3.507,1547,5.874,1548,3.507,1549,4.416,1550,3.868,1551,3.868,1552,4.416,1553,3.868,1554,5.2,1555,3.868,1556,3.022,1557,5.2,1558,3.868,1559,5.937,1560,5.937,1561,3.237,1562,5.326,1563,5.2,1564,5.874,1565,5.2,1566,4.352,1567,3.507,1568,3.507,1569,3.507,1570,3.822,1571,2.689,1572,3.507,1573,2.555,1574,4.416,1575,3.868,1576,3.868,1577,4.416,1578,3.868,1579,3.868,1580,4.416,1581,4.416,1582,3.507,1583,3.868,1584,3.507,1585,4.416,1586,4.416]],["title/modules/FilesLocalModule.html",[89,0.754,1587,2.925]],["body/modules/FilesLocalModule.html",[0,0.208,3,0.188,4,0.172,5,0.2,8,0.504,13,3.456,29,0.012,33,1.606,53,0.525,56,1.027,59,0.188,87,0.009,88,0.009,89,1.359,91,3.061,92,2.299,93,2.684,94,2.684,95,2.385,96,3.778,97,3.705,104,3.383,105,2.684,106,2.299,114,2.796,116,4.583,121,2.634,134,5.019,140,3.636,144,3.061,146,2.22,149,3.235,151,2.576,200,2.07,352,2.93,397,4.243,811,3.206,812,4.311,830,2.801,1024,3.235,1026,3.895,1028,3.006,1346,4.06,1361,4.689,1366,3.531,1441,1.876,1472,3.074,1523,3.074,1535,5.376,1570,5.53,1571,3.235,1587,5.79,1588,4.653,1589,4.653,1590,4.653,1591,5.313,1592,5.866,1593,6.697,1594,4.219,1595,4.219,1596,5.313,1597,4.653,1598,5.313,1599,3.42,1600,4.653,1601,5.313]],["title/injectables/FilesLocalService.html",[388,1.417,1570,2.751]],["body/injectables/FilesLocalService.html",[0,0.193,3,0.175,4,0.16,5,0.206,8,0.533,17,0.371,21,1.663,22,1.8,24,0.841,28,1.435,29,0.012,30,0.962,31,0.458,32,1.127,42,2.489,49,2.256,51,1.586,53,0.537,55,2.493,56,0.954,59,0.175,60,1.142,70,1.8,77,1.285,79,2.76,87,0.008,88,0.008,121,2.186,146,2.484,150,2.33,159,3.065,170,2.07,173,4.192,174,3.493,175,3.891,180,1.352,200,1.923,206,1.86,208,3.006,214,0.984,218,3.18,285,2.393,307,1.636,328,2.602,388,2.118,390,2.393,461,4.016,686,2.978,741,2.393,811,2.489,812,4.113,904,2.135,1066,5.95,1070,3.177,1144,3.098,1346,3.369,1361,3.697,1451,5.074,1452,2.722,1459,5.596,1460,5.596,1461,3.177,1547,6.205,1570,4.996,1602,4.323,1603,4.684,1604,5.074,1605,3.618,1606,4.935,1607,5.074,1608,4.935,1609,7.084,1610,5.626,1611,3.177,1612,3.377,1613,3.919,1614,3.919,1615,4.323,1616,3.177,1617,4.935]],["title/modules/FilesModule.html",[89,0.754,102,2.925]],["body/modules/FilesModule.html",[0,0.267,3,0.162,4,0.148,5,0.198,8,0.457,29,0.012,33,1.837,53,0.558,56,0.884,59,0.162,65,1.325,87,0.008,88,0.008,89,1.486,91,3.316,92,1.978,93,2.309,94,2.309,95,2.052,96,3.629,97,3.674,102,5.817,104,3.069,105,2.309,106,1.978,114,2.536,123,4.61,133,1.667,134,4.158,146,2.014,150,2.216,280,2.853,297,4.429,330,3.063,353,3.63,460,3.911,525,3.351,681,2.489,712,4.825,811,2.367,821,4.158,830,3.203,989,5.322,1303,3.948,1312,5.322,1346,3.834,1350,3.674,1351,3.515,1359,4.825,1361,3.515,1366,3.834,1370,4.004,1372,3.63,1489,3.447,1508,5.322,1571,2.784,1573,4.937,1587,4.67,1600,5.322,1618,4.004,1619,4.004,1620,4.004,1621,4.004,1622,5.436,1623,5.436,1624,4.004,1625,4.682,1626,6.076,1627,6.076,1628,7.57,1629,4.825,1630,6.076,1631,6.076,1632,4.571,1633,4.571,1634,4.571,1635,4.571,1636,6.631,1637,4.004,1638,4.571,1639,4.571,1640,4.571,1641,4.004,1642,3.128]],["title/controllers/FilesS3Controller.html",[142,1.665,1643,3.133]],["body/controllers/FilesS3Controller.html",[0,0.155,3,0.14,4,0.128,5,0.205,8,0.476,13,2.47,17,0.297,18,1.049,21,1.648,22,1.442,24,0.521,28,0.888,29,0.012,30,0.595,31,0.586,32,0.697,34,3.23,42,2.668,48,2.386,49,2.418,51,1.165,53,0.548,56,0.764,58,1.997,59,0.14,60,1.273,79,2.668,87,0.007,88,0.007,113,2.858,114,1.65,120,3.32,121,2.342,142,2.904,144,1.65,146,1.825,150,2.309,151,3.32,159,2.739,162,1.521,165,5.02,174,3.192,175,2.407,180,1.34,183,2.407,184,1.159,193,2.544,195,5.545,197,3.61,200,1.54,206,1.49,212,4.37,214,0.788,279,2.78,317,2.902,373,3.351,393,0.863,435,3.856,543,2.902,681,2.007,695,1.989,726,4.333,733,2.407,741,1.917,780,1.159,811,2.467,842,4.82,999,5.019,1028,2.47,1180,3.184,1294,4.383,1350,4.001,1359,4.37,1360,2.287,1366,4.372,1443,4.164,1448,3.61,1451,4.37,1464,4.169,1472,3.184,1523,4.766,1539,5.028,1546,3.139,1548,3.139,1550,3.462,1551,3.462,1553,3.462,1554,3.462,1555,5.545,1556,2.705,1557,5.996,1558,3.462,1562,5.716,1563,4.82,1569,3.139,1571,2.407,1572,5.028,1573,3.184,1575,4.82,1576,4.82,1578,5.545,1579,5.545,1583,3.462,1584,3.139,1643,5.276,1644,3.462,1645,5.503,1646,5.503,1647,5.503,1648,4.37,1649,5.503,1650,5.503,1651,6.331,1652,4.82,1653,4.82,1654,5.503,1655,6.331,1656,5.503,1657,5.996,1658,3.952,1659,3.952,1660,4.076]],["title/modules/FilesS3Module.html",[89,0.754,1622,2.925]],["body/modules/FilesS3Module.html",[0,0.17,3,0.154,4,0.14,5,0.2,8,0.441,13,2.63,29,0.012,42,2.283,44,2.137,48,1.632,53,0.595,56,0.837,58,2.188,59,0.154,65,0.944,77,1.128,87,0.008,88,0.008,89,1.255,91,2.772,92,1.874,93,2.188,94,2.188,95,1.944,96,3.317,97,3.594,104,2.96,105,2.188,106,1.874,111,3.772,112,3.39,113,2.446,121,2.004,123,4.044,144,2.772,146,1.943,150,2.137,151,2.841,181,3.439,200,2.283,214,0.863,275,2.637,280,2.208,284,5.65,285,2.1,292,3.439,307,2.465,352,3.924,393,0.59,440,2.964,461,3.755,471,1.632,543,3.501,668,2.506,670,2.506,681,2.137,713,4.295,724,1.746,811,2.283,996,3.568,1028,2.63,1303,3.39,1346,3.501,1349,4.653,1350,4.22,1353,2.788,1355,2.964,1366,3.751,1464,4.333,1502,4.295,1503,2.964,1513,3.175,1527,3.439,1543,4.653,1556,2.964,1561,5.45,1566,4.295,1567,3.439,1568,3.439,1571,2.637,1582,3.439,1594,3.439,1603,4.295,1604,4.653,1611,2.788,1612,2.964,1616,4.786,1622,5.588,1629,4.653,1643,5.45,1660,5.458,1661,3.793,1662,3.793,1663,3.793,1664,4.33,1665,5.617,1666,5.859,1667,5.132,1668,5.816,1669,5.132,1670,5.859,1671,3.439,1672,3.439,1673,3.439,1674,5.132,1675,3.439,1676,3.793,1677,3.793,1678,3.439,1679,3.439,1680,3.439,1681,4.33,1682,3.793,1683,3.793,1684,5.132,1685,3.793,1686,3.793,1687,3.793,1688,4.33,1689,4.33]],["title/controllers/FilesS3PresignedController.html",[142,1.665,1690,3.133]],["body/controllers/FilesS3PresignedController.html",[0,0.163,3,0.148,4,0.135,5,0.204,8,0.527,17,0.314,21,1.488,24,0.752,28,1.283,29,0.012,30,0.86,31,0.467,32,1.008,42,2.226,48,2.153,49,2.474,51,1.483,53,0.526,56,0.807,59,0.148,60,1.621,62,5.005,65,0.91,79,2.86,87,0.008,88,0.008,89,0.736,113,2.385,142,2.226,144,2.385,146,1.894,149,3.48,151,3.398,159,3.279,162,1.579,170,1.936,180,1.483,183,2.542,184,1.224,193,2.687,206,1.573,214,1.139,227,1.8,339,1.188,373,3.968,393,0.888,471,2.766,685,2.565,695,1.936,726,4.459,733,2.542,741,2.024,748,2.542,780,1.224,811,2.226,892,4.538,999,4.189,1037,5.005,1144,3.398,1299,4.551,1350,4.096,1351,4.774,1353,3.678,1366,3.013,1443,3.306,1448,3.694,1462,4.194,1464,4.267,1472,3.306,1519,5.828,1521,4.795,1523,4.246,1537,5.564,1538,4.538,1539,4.538,1546,3.314,1548,3.314,1569,3.314,1571,2.542,1572,3.314,1573,2.415,1584,3.314,1604,4.538,1690,5.688,1691,3.655,1692,5.714,1693,6.018,1694,5.564,1695,3.678,1696,5.714,1697,4.173,1698,5.714,1699,4.173,1700,3.678,1701,5.714,1702,5.714,1703,5.005,1704,5.005,1705,4.173,1706,4.173,1707,5.714,1708,5.714,1709,5.714,1710,5.714,1711,3.655,1712,3.678,1713,4.173,1714,4.173,1715,4.173,1716,4.173,1717,4.173]],["title/modules/FilesS3PresignedModule.html",[89,0.754,1623,2.925]],["body/modules/FilesS3PresignedModule.html",[0,0.17,3,0.154,4,0.141,5,0.192,8,0.441,19,2.391,29,0.012,42,2.285,48,1.634,53,0.595,56,0.838,58,2.19,59,0.154,65,0.945,77,1.129,87,0.008,88,0.008,89,1.352,91,1.81,92,2.875,93,2.19,94,2.19,95,1.946,96,3.319,97,3.356,104,2.962,105,2.19,106,1.876,111,3.775,112,3.393,113,2.448,121,2.006,123,4.046,142,2.774,144,2.774,146,2.36,150,2.796,151,2.843,181,3.443,200,2.774,202,4.656,214,0.864,275,2.64,280,2.21,284,5.653,285,2.102,292,3.443,307,2.203,352,3.234,393,0.591,440,2.967,461,3.757,471,1.634,543,3.503,668,2.508,670,2.508,724,1.748,812,3.775,813,4.298,814,3.775,1024,3.571,1028,2.632,1303,3.393,1346,3.503,1350,4.299,1351,4.435,1353,4.277,1355,2.967,1366,4.041,1441,2.071,1462,2.791,1502,4.298,1503,2.967,1513,3.178,1556,2.967,1561,5.452,1566,4.298,1567,3.443,1568,3.443,1571,2.64,1582,3.443,1594,3.443,1611,2.791,1612,2.967,1616,4.277,1623,5.589,1629,4.656,1665,4.298,1668,5.82,1671,3.443,1672,3.443,1673,3.443,1674,5.136,1675,3.443,1676,3.797,1677,3.797,1678,3.443,1679,3.443,1680,3.443,1682,3.797,1683,3.797,1684,5.136,1685,3.797,1686,3.797,1687,3.797,1690,5.452,1693,4.656,1694,6.087,1695,3.775,1712,5.409,1718,3.797,1719,3.797,1720,3.797,1721,4.335,1722,5.863,1723,5.863,1724,5.136,1725,5.863,1726,4.335,1727,3.797]],["title/injectables/FilesS3PresignedService.html",[388,1.417,1712,2.751]],["body/injectables/FilesS3PresignedService.html",[0,0.138,3,0.125,4,0.114,5,0.203,8,0.489,17,0.265,18,0.84,21,1.692,22,1.283,24,0.856,26,2.362,28,1.334,29,0.012,30,0.894,31,0.493,32,1.048,34,2.917,42,1.974,48,1.326,49,2.295,51,1.375,53,0.542,55,1.777,56,0.68,59,0.125,60,1.374,65,1.706,70,1.848,75,2.264,77,1.868,79,2.532,81,1.522,85,1.326,87,0.007,88,0.007,89,0.621,121,1.733,146,1.68,159,3.104,170,1.795,174,3.029,180,1.072,205,4.064,206,1.326,208,3.086,214,1.01,227,1.641,285,1.706,307,2.378,328,2.672,386,1.522,388,1.68,390,1.706,393,0.886,461,3.735,471,2.986,543,2.672,668,2.035,670,2.035,685,2.274,686,2.362,695,1.903,741,1.706,748,4.502,811,1.974,892,4.024,899,3.086,904,1.522,1028,2.274,1050,3.081,1070,3.823,1144,3.151,1160,2.795,1299,4.548,1307,2.264,1350,4.044,1351,4.818,1353,4.183,1355,2.407,1364,3.262,1365,3.081,1366,2.672,1452,1.94,1461,2.264,1462,4.434,1464,3.957,1467,5.202,1472,3.76,1501,4.438,1502,4.764,1503,2.407,1504,3.081,1505,2.793,1506,2.793,1513,2.579,1516,5.16,1519,5.697,1520,5.202,1521,4.447,1526,3.715,1527,4.024,1531,4.438,1537,5.697,1538,4.024,1543,4.024,1605,2.579,1607,4.024,1610,5.16,1613,4.024,1614,2.793,1616,4.618,1671,2.793,1672,2.793,1673,2.793,1675,2.793,1678,2.793,1679,2.793,1680,2.793,1693,5.697,1694,5.697,1695,3.262,1700,3.262,1703,4.438,1704,4.438,1711,3.081,1712,4.434,1728,3.081,1729,5.067,1730,5.067,1731,3.517,1732,5.067,1733,5.067,1734,5.067,1735,3.517,1736,5.067,1737,5.939,1738,5.067,1739,3.517,1740,3.517,1741,3.517,1742,3.517,1743,3.517,1744,5.067,1745,3.517,1746,3.517,1747,4.024,1748,3.517,1749,5.067,1750,3.517,1751,5.067,1752,5.067,1753,3.517]],["title/injectables/FilesS3Service.html",[388,1.417,1660,2.751]],["body/injectables/FilesS3Service.html",[0,0.273,3,0.17,4,0.155,5,0.204,8,0.557,10,3.303,17,0.36,21,2.001,22,2.803,24,0.825,28,1.407,29,0.012,30,0.721,31,0.343,32,0.845,34,3.76,42,2.886,48,2.791,51,1.627,52,2.641,53,0.449,55,2.419,56,0.926,59,0.17,60,1.615,70,1.747,77,1.247,79,1.866,87,0.008,88,0.008,146,2.077,150,2.285,159,3.021,162,1.323,174,3.745,175,4.252,180,1.478,200,1.866,208,4.51,214,1.392,279,3.165,328,2.525,388,2.455,390,2.322,409,3.625,471,1.805,543,3.303,685,2.149,686,3.255,811,2.441,830,2.525,904,2.71,1066,5.881,1070,3.083,1144,3.386,1160,2.641,1350,3.527,1360,2.771,1443,4.768,1452,2.641,1461,3.083,1481,3.803,1482,5.487,1523,4.562,1592,5.487,1603,4.593,1607,4.975,1610,5.881,1613,3.803,1614,3.803,1657,6.732,1660,4.948,1754,4.194,1755,4.593,1756,6.487,1757,6.264,1758,6.264,1759,6.982,1760,4.788,1761,4.788,1762,4.788]],["title/injectables/FilesService.html",[388,1.417,1573,2.473]],["body/injectables/FilesService.html",[0,0.3,3,0.209,4,0.191,5,0.201,8,0.536,21,1.856,29,0.012,44,2.6,53,0.421,56,1.137,59,0.209,87,0.009,88,0.009,89,1.037,114,2.976,116,4.879,121,2.439,122,5.226,133,2.144,134,4.879,150,2.91,199,2.874,200,3.109,388,2.645,390,2.851,681,2.6,811,2.778,814,4.59,830,3.759,1024,4.342,1472,4.125,1489,3.601,1523,4.125,1573,4.807,1597,6.244,1755,5.226,1763,5.149,1764,6.244,1765,6.244,1766,7.129,1767,7.129,1768,7.129]],["title/classes/FilterCountryDto.html",[0,0.167,1769,2.925]],["body/classes/FilterCountryDto.html",[0,0.315,2,1.104,3,0.197,4,0.18,5,0.13,29,0.012,31,0.587,53,0.56,59,0.265,87,0.009,88,0.009,135,3.355,184,1.625,214,1.104,227,1.899,307,1.836,325,2.921,334,1.956,393,1.065,411,2.87,443,2.921,482,3.897,483,3.234,549,2.87,724,2.771,772,3.566,774,3.791,778,2.798,780,1.625,781,2.798,783,2.233,800,3.055,907,2.686,935,3.624,937,4.237,977,4.325,1134,3.566,1769,5.348,1770,4.061,1771,4.432,1772,3.566,1773,4.812,1774,5.115,1775,4.399,1776,3.566,1777,3.791,1778,5.459,1779,4.399,1780,4.425,1781,4.399]],["title/classes/FilterQueryDto.html",[0,0.167,795,2.751]],["body/classes/FilterQueryDto.html",[0,0.296,2,0.316,3,0.056,4,0.051,5,0.037,8,0.489,11,2.762,17,0.265,18,0.447,24,0.463,28,0.79,29,0.012,30,1.08,31,0.593,50,2.19,53,0.53,56,0.306,59,0.265,65,0.588,70,0.578,81,2.016,87,0.004,88,0.004,89,0.476,135,1.865,162,1.148,170,2.13,180,1.205,184,1.219,196,1.56,199,0.638,206,1.91,214,1.184,220,1.976,227,2.152,265,2.143,307,2.472,317,0.835,325,3.571,330,1.865,334,1.467,339,1.326,393,1.107,394,1.735,400,1.362,404,2.259,411,2.482,416,3.767,419,1.487,420,1.56,421,1.362,422,1.56,423,1.125,433,3.632,434,2.266,436,0.964,437,3.898,438,3.188,443,3.132,471,1.016,480,0.916,482,3.553,483,3.104,486,1.642,487,1.56,540,0.964,549,2.116,686,0.738,695,0.972,696,3.694,708,2.881,717,2.193,724,2.181,778,3.421,780,1.805,781,3.108,783,2.296,791,3.716,794,2.58,795,5.101,798,2.843,799,1.161,800,3.585,801,1.161,819,1.642,824,1.735,828,1.937,829,0.916,834,1.084,900,1.307,902,1.019,906,0.916,907,1.707,935,4.006,937,3.003,939,3.898,977,2.036,996,1.642,1060,1.487,1154,2.868,1241,2.674,1247,2.091,1294,1.642,1307,1.735,1441,0.952,1528,2.795,1625,1.019,1771,3.665,1772,1.735,1773,4.184,1776,1.735,1780,2.999,1782,1.084,1783,4.51,1784,1.583,1785,1.583,1786,1.583,1787,1.583,1788,1.583,1789,1.583,1790,2.141,1791,1.257,1792,1.084,1793,1.257,1794,3.702,1795,2.795,1796,3.702,1797,2.795,1798,1.257,1799,2.143,1800,3.046,1801,1.161,1802,2.266,1803,1.845,1804,1.976,1805,1.845,1806,1.257,1807,1.257,1808,1.257,1809,3.299,1810,2.141,1811,0.916,1812,1.084,1813,1.976,1814,2.141,1815,2.141,1816,1.257,1817,2.141,1818,1.976,1819,4.21,1820,1.257,1821,2.141,1822,2.141,1823,1.257,1824,1.257,1825,1.257,1826,2.674,1827,1.257,1828,1.257,1829,2.141,1830,2.266,1831,1.257,1832,5.162,1833,1.257,1834,1.257,1835,1.257,1836,2.141,1837,1.257,1838,1.257,1839,1.257,1840,1.257,1841,2.141,1842,2.141,1843,1.257,1844,1.257,1845,1.257,1846,1.845,1847,1.257,1848,2.141,1849,1.257,1850,3.299,1851,1.257,1852,1.257,1853,1.257,1854,1.257,1855,2.141,1856,2.141,1857,2.141,1858,2.141,1859,2.795,1860,2.141,1861,2.141,1862,1.161,1863,3.188,1864,3.7,1865,3.7,1866,2.141,1867,2.141,1868,1.257,1869,1.257,1870,1.257,1871,1.257]],["title/modules/HelperModule.html",[89,0.754,275,2.603]],["body/modules/HelperModule.html",[0,0.282,3,0.158,4,0.144,5,0.105,8,0.449,9,5.284,29,0.012,44,2.623,53,0.601,56,1.153,59,0.255,65,0.969,87,0.008,88,0.008,89,1.501,91,3.131,92,1.923,93,2.245,94,2.245,95,1.995,96,3.858,97,4.102,104,3.012,105,2.245,106,1.923,113,2.489,123,4.568,144,2.489,146,1.977,151,2.892,156,4.749,170,1.859,190,4.081,275,5.198,423,2.489,461,3.633,813,5.66,1034,5.453,1035,5.04,1038,4.081,1054,3.893,1055,3.893,1441,2.106,1507,5.223,1599,4.629,1637,5.223,1642,4.081,1872,3.893,1873,3.893,1874,3.893,1875,3.893,1876,5.223,1877,5.963,1878,5.963,1879,5.963,1880,5.223,1881,5.963,1882,8.276,1883,5.223,1884,5.223,1885,3.893,1886,3.893,1887,3.893,1888,5.963,1889,4.445,1890,6.729,1891,4.445,1892,6.729,1893,4.445]],["title/controllers/HomeController.html",[142,1.665,1894,3.133]],["body/controllers/HomeController.html",[0,0.312,3,0.19,4,0.174,5,0.174,8,0.507,13,2.41,17,0.404,21,1.755,24,0.707,29,0.012,33,1.623,42,3.012,44,2.964,51,1.636,53,0.528,56,1.038,59,0.19,60,1.242,77,1.398,87,0.009,88,0.009,89,0.947,110,4.942,113,3.227,114,2.814,121,2.724,133,1.958,137,6.323,142,3.012,144,2.241,149,4.488,150,2.459,151,3.94,153,3.555,162,1.484,165,4.34,180,1.56,183,3.27,184,1.575,200,2.872,214,1.07,277,5.354,352,4.065,681,2.459,685,3.469,741,2.604,812,4.34,988,4.106,1026,5.402,1158,4.942,1180,3.901,1595,5.354,1894,6.046,1895,4.703,1896,5.126,1897,6.77,1898,5.369,1899,4.703,1900,5.369,1901,3.674,1902,5.369]],["title/modules/HomeModule.html",[89,0.754,103,2.925]],["body/modules/HomeModule.html",[0,0.313,3,0.194,4,0.177,5,0.175,8,0.513,29,0.012,42,2.656,44,2.837,48,2.569,53,0.532,56,1.057,59,0.194,87,0.009,88,0.009,89,1.44,91,2.281,92,2.364,93,2.76,94,2.76,95,2.452,96,3.463,97,2.76,103,5.815,104,3.443,105,2.76,106,2.364,110,5.702,114,3.247,121,2.792,122,4.997,123,3.328,133,1.993,137,6.646,142,2.895,144,2.845,149,4.151,150,2.837,151,2.65,200,2.895,352,4.097,681,2.486,988,3.328,1026,5.446,1180,3.161,1595,4.339,1665,4.997,1894,5.446,1896,5.254,1899,4.786,1903,4.786,1904,4.786,1905,5.464,1906,6.816,1907,5.464]],["title/injectables/HomeService.html",[388,1.417,1896,2.751]],["body/injectables/HomeService.html",[0,0.308,3,0.183,4,0.167,5,0.17,8,0.605,17,0.388,21,1.983,22,1.881,24,0.865,28,1.158,29,0.012,30,1.147,31,0.369,32,0.91,33,1.987,44,3.018,51,1.612,53,0.518,56,0.997,59,0.183,60,1.193,77,1.711,87,0.009,88,0.009,89,0.91,114,2.743,120,3.186,133,1.881,146,2.179,152,5.756,180,1.665,200,2.561,214,1.028,280,3.173,285,2.5,307,2.525,388,2.179,390,2.5,461,4.253,584,3.529,681,2.397,685,3.61,741,2.5,841,2.949,1024,4.638,1028,2.949,1047,5.756,1144,3.186,1250,4.817,1253,4.516,1349,5.218,1605,3.78,1611,3.319,1612,3.529,1615,4.516,1616,4.903,1896,5.326,1897,6.671,1901,4.497,1908,4.516,1909,5.156,1910,5.156,1911,6.671,1912,5.156,1913,5.156,1914,5.156]],["title/classes/HttpErrorFilter.html",[0,0.167,126,3.133]],["body/classes/HttpErrorFilter.html",[0,0.258,2,0.852,3,0.152,4,0.139,5,0.101,8,0.496,9,3.975,10,4.117,11,3.199,12,4.082,14,2.926,15,3.639,16,5.224,17,0.322,21,1.512,24,0.563,28,0.96,29,0.012,30,0.644,31,0.306,32,0.754,37,3.739,38,4.21,39,4.764,41,2.752,42,2.263,43,3.739,48,2.789,49,2.051,51,0.905,52,2.358,53,0.547,54,4.764,55,2.16,56,0.827,59,0.234,60,1.344,65,1.792,66,2.752,67,2.752,68,2.752,69,2.926,70,2.784,72,4.258,73,4.836,74,3.134,76,4.836,77,1.718,79,1.666,80,4.843,81,2.854,83,5.778,84,4.515,85,2.994,86,3.395,87,0.008,88,0.008,89,0.754,96,2.708,113,3.09,124,5.088,126,5.596,140,3.975,141,5.088,170,1.823,173,3.732,179,2.926,180,1.229,255,3.739,326,2.604,328,3.063,335,2.474,336,2.474,339,2.015,357,1.993,362,2.752,364,5.239,365,4.613,367,4.613,369,3.745,371,5.239,372,3.745,373,2.604,374,3.745,375,3.745,376,3.745,377,3.745,378,3.745,379,3.745,381,5.088,382,3.745,423,2.425,685,2.607,724,1.724,830,3.063,1144,2.817,1160,2.358,1299,3.204,1360,4.282,1915,5.088,1916,3.745,1917,5.088,1918,5.808,1919,5.808,1920,4.275,1921,4.275,1922,4.613,1923,4.275,1924,4.275,1925,4.275,1926,3.395,1927,4.275,1928,3.745,1929,3.745,1930,4.275,1931,4.275]],["title/classes/HttpExceptionFilter.html",[0,0.167,1932,3.394]],["body/classes/HttpExceptionFilter.html",[0,0.259,2,1.04,3,0.185,4,0.169,5,0.123,8,0.498,10,4.373,11,3.828,12,4.011,13,2.971,14,4.53,15,4.011,16,5.234,17,0.392,21,1.724,24,0.687,28,1.172,29,0.012,30,0.785,31,0.374,32,0.92,37,4.262,38,4.449,39,5.082,41,4.262,42,2.579,44,2.414,48,3.04,49,2.929,50,3.49,51,1.104,52,2.877,53,0.474,54,5.275,56,1.009,58,2.635,59,0.235,60,1.531,64,4.569,65,1.668,66,3.358,67,3.358,68,3.358,69,3.57,70,2.79,72,3.824,75,3.358,76,5.331,77,1.358,78,4.143,79,2.834,80,3.57,85,2.495,87,0.009,88,0.009,113,3.367,150,2.414,199,2.669,326,4.658,357,3.086,406,4.53,1154,2.432,1500,4.853,1932,6.074,1933,5.798,1934,4.143,1935,6.62,1936,5.216,1937,5.216,1938,5.216,1939,4.143]],["title/interfaces/IAppConfig.html",[490,2.925,1153,1.254]],["body/interfaces/IAppConfig.html",[3,0.184,4,0.168,5,0.122,8,0.39,17,0.39,18,1.093,29,0.012,30,1.213,31,0.611,32,1.346,33,1.993,44,3.136,59,0.234,87,0.009,88,0.009,120,3.197,227,2.108,280,2.485,393,1.19,490,5.722,560,5.511,576,5.594,579,5.594,581,5.594,584,5.222,837,4.512,1153,2.238,1154,3.754,1303,3.814,1441,2.328,1442,3.33,1496,5.774,1497,6.683,1911,5.774,1940,2.416,1941,4.54,1942,6.593,1943,5.236,1944,6.593,1945,6.593]],["title/interfaces/IAwsConfig.html",[492,2.925,1153,1.254]],["body/interfaces/IAwsConfig.html",[3,0.21,4,0.192,5,0.139,17,0.445,18,1.186,29,0.012,31,0.613,59,0.21,87,0.009,88,0.009,393,1.21,492,4.896,588,6.348,590,6.348,592,6.348,594,6.348,596,6.348,598,6.348,600,6.348,602,6.348,604,6.348,1153,1.735,1441,2.088,1442,2.987,1940,2.757,1946,5.179]],["title/interfaces/IFileConfig.html",[494,2.925,1153,1.254]],["body/interfaces/IFileConfig.html",[3,0.208,4,0.19,5,0.138,17,0.442,18,1.181,29,0.012,31,0.595,32,1.496,53,0.421,59,0.208,87,0.009,88,0.009,227,2.203,393,1.194,488,5.133,494,4.875,666,5.457,668,4.614,670,4.614,672,5.846,674,5.846,676,5.846,1153,1.722,1240,3.779,1364,3.779,1368,4.662,1441,2.073,1442,2.965,1862,4.303,1940,2.737,1947,5.141,1948,5.87,1949,7.123,1950,5.87,1951,5.87]],["title/interfaces/IJWTConfig.html",[496,2.925,1153,1.254]],["body/interfaces/IJWTConfig.html",[3,0.218,4,0.2,5,0.145,17,0.463,18,1.215,29,0.011,31,0.602,59,0.218,87,0.01,88,0.01,227,2.32,393,1.188,496,5.017,614,5.94,616,6.434,618,6.434,620,6.434,622,6.434,624,6.434,1153,1.806,1441,2.174,1442,3.11,1940,2.87,1952,5.393]],["title/interfaces/INodeEmailerConfig.html",[498,2.925,1153,1.254]],["body/interfaces/INodeEmailerConfig.html",[3,0.218,4,0.199,5,0.145,17,0.462,18,1.214,29,0.011,31,0.601,59,0.218,87,0.01,88,0.01,227,2.161,393,1.196,498,5.012,636,6.431,638,6.431,640,6.431,642,6.431,644,6.431,646,6.431,1153,1.804,1441,2.171,1442,3.106,1940,2.866,1953,5.385,1954,5.385]],["title/interfaces/IPageMetaDtoParameters.html",[1153,1.254,1955,3.133]],["body/interfaces/IPageMetaDtoParameters.html",[0,0.202,3,0.128,4,0.117,5,0.085,17,0.523,18,0.855,22,1.315,26,1.681,27,1.821,28,0.81,29,0.012,31,0.576,32,0.91,33,1.09,34,2.315,53,0.37,59,0.183,60,0.834,65,1.516,87,0.007,88,0.007,106,1.56,111,2.321,146,1.195,170,2.318,184,1.058,206,2.922,227,2.386,330,2.95,386,3.009,398,2.321,447,2.196,451,2.807,460,2.321,685,1.618,686,1.681,695,0.996,696,1.748,708,3.76,714,2.196,717,3.009,734,2.196,778,4.201,780,2.36,781,1.821,783,2.804,882,3.321,899,2.196,900,2.92,972,4.121,988,2.196,1153,1.058,1295,4.231,1364,3.32,1489,1.821,1599,2.321,1747,2.863,1771,4.339,1811,2.086,1812,2.468,1830,4.657,1846,4.121,1922,5.915,1940,1.681,1955,4.818,1956,2.863,1957,6.336,1958,5.684,1959,3.877,1960,3.158,1961,2.863,1962,3.158,1963,4.782,1964,6.158,1965,5.684,1966,5.915,1967,6.247,1968,4.415,1969,5.915,1970,5.745,1971,5.522,1972,4.096,1973,5.522,1974,4.782,1975,6.049,1976,4.415,1977,4.415,1978,5.274,1979,5.522,1980,2.863,1981,5.274,1982,3.158,1983,3.158,1984,2.863,1985,3.158,1986,3.158,1987,4.518,1988,3.158,1989,3.158,1990,3.158,1991,3.158,1992,3.158,1993,3.158,1994,3.158,1995,3.158,1996,3.158,1997,3.158,1998,3.158,1999,3.158,2000,3.158,2001,2.863,2002,3.158,2003,3.158,2004,3.158,2005,3.158,2006,3.158,2007,3.158,2008,3.158,2009,3.158,2010,3.158,2011,3.158,2012,3.158]],["title/interfaces/IPaginationFieldConfig.html",[1058,2.925,1153,1.254]],["body/interfaces/IPaginationFieldConfig.html",[3,0.199,4,0.182,5,0.132,8,0.422,17,0.422,18,1.149,29,0.012,31,0.563,51,1.739,59,0.199,60,1.299,87,0.009,88,0.009,117,5.506,146,1.862,330,3.376,339,1.599,393,1.12,433,3.965,717,3.398,822,3.098,904,3,1031,3.965,1058,4.745,1101,5.757,1105,3.965,1153,2.206,1157,5.071,1159,4.58,1165,4.58,1247,3.776,1489,3.502,1695,3.616,1940,2.618,1961,4.46,2013,4.919,2014,4.919,2015,4.919,2016,5.616,2017,5.616,2018,7.575,2019,4.919,2020,7.853,2021,6.587]],["title/interfaces/IPostgreSQLConfig.html",[501,2.925,1153,1.254]],["body/interfaces/IPostgreSQLConfig.html",[3,0.213,4,0.194,5,0.141,17,0.451,18,1.196,29,0.011,31,0.61,59,0.213,87,0.01,88,0.01,393,1.208,501,4.936,1153,1.758,1273,7.033,1275,7.033,1276,7.033,1277,7.033,1278,7.033,1441,2.116,1442,3.027,1940,2.794,2022,5.249,2023,8.03,2024,8.03,2025,8.03]],["title/interfaces/ISMSConfig.html",[505,2.925,1153,1.254]],["body/interfaces/ISMSConfig.html",[3,0.228,4,0.208,5,0.151,17,0.483,18,1.246,29,0.011,31,0.571,59,0.228,87,0.01,88,0.01,393,1.18,505,5.143,649,6.523,651,6.523,653,6.523,1153,1.884,1441,2.268,1442,3.244,1940,2.994,2026,5.625]],["title/interfaces/ISendGridConfig.html",[503,2.925,1153,1.254]],["body/interfaces/ISendGridConfig.html",[3,0.225,4,0.205,5,0.149,17,0.476,18,1.235,29,0.011,31,0.586,59,0.225,87,0.01,88,0.01,393,1.191,503,5.1,627,6.493,629,6.493,631,6.493,633,6.493,1153,1.857,1441,2.236,1442,3.198,1940,2.952,2027,5.545]],["title/interfaces/IUploadFileConfig.html",[507,2.925,1153,1.254]],["body/interfaces/IUploadFileConfig.html",[3,0.221,4,0.202,5,0.147,17,0.469,18,1.224,29,0.011,31,0.595,59,0.221,87,0.01,88,0.01,227,2.174,393,1.189,507,5.053,656,6.46,658,6.46,660,6.46,662,6.46,664,6.46,1153,1.829,1441,2.201,1442,3.149,1940,2.906,2028,5.46,2029,5.46]],["title/classes/PaginationMetaDto.html",[0,0.167,1959,2.751]],["body/classes/PaginationMetaDto.html",[0,0.211,2,0.595,3,0.106,4,0.097,5,0.07,8,0.225,17,0.528,18,0.744,22,1.638,24,0.991,26,2.094,27,2.269,28,1.009,29,0.012,30,0.45,31,0.586,32,0.527,33,1.358,34,2.423,53,0.322,59,0.159,60,0.691,65,1.404,87,0.006,88,0.006,106,1.292,111,2.891,146,1.489,162,2.041,170,2.375,184,0.876,206,3.174,227,2.399,330,3.036,386,2.926,398,2.891,447,1.818,451,2.799,460,2.891,549,1.246,685,2.016,686,1.392,695,1.241,696,1.448,708,2.911,714,2.735,717,3.196,734,1.818,778,4.243,780,2.34,781,1.508,783,2.829,882,3.312,899,1.818,900,2.617,972,4.109,988,2.735,1153,0.876,1295,4.145,1364,3.865,1489,2.269,1599,2.891,1747,3.566,1771,4.151,1811,1.728,1812,3.073,1830,4.756,1846,4.629,1922,5.977,1955,4.72,1956,2.371,1957,4.728,1958,5.416,1959,4.354,1960,3.933,1961,3.566,1962,3.933,1963,5.113,1964,6.15,1965,5.797,1966,5.977,1967,6.219,1968,4.72,1969,5.977,1970,5.867,1971,5.734,1972,4.287,1973,5.734,1974,5.113,1975,6.15,1976,4.402,1977,4.402,1978,5.925,1979,5.372,1980,3.566,1981,5.639,1982,3.933,1983,3.933,1984,2.371,1985,2.615,1986,2.615,1987,3.933,1988,2.615,1989,2.615,1990,2.615,1991,2.615,1992,2.615,1993,2.615,1994,2.615,1995,2.615,1996,2.615,1997,2.615,1998,2.615,1999,2.615,2000,2.615,2001,2.371,2002,2.615,2003,2.615,2004,2.615,2005,2.615,2006,2.615,2007,2.615,2008,2.615,2009,2.615,2010,2.615,2011,2.615,2012,2.615,2030,2.986,2031,4.491,2032,6.47,2033,2.986,2034,2.986,2035,2.986,2036,2.986,2037,2.986,2038,2.986,2039,2.986,2040,2.986]],["title/classes/PaginationQueryDto.html",[0,0.167,708,2.072]],["body/classes/PaginationQueryDto.html",[0,0.294,2,0.303,3,0.054,4,0.049,5,0.036,8,0.503,11,2.406,17,0.257,18,0.432,24,0.599,28,0.767,29,0.012,30,1.069,31,0.595,32,0.987,50,2.616,53,0.525,56,0.294,59,0.262,65,0.568,70,0.555,81,1.969,87,0.003,88,0.003,89,0.46,135,1.816,162,1.371,170,2.137,180,1.184,184,1.187,196,1.508,199,0.614,206,2.416,214,1.164,220,1.91,227,2.184,265,2.081,307,2.451,317,0.802,325,3.745,330,2.227,334,1.429,339,1.51,393,1.104,394,1.677,400,1.316,404,2.833,411,2.399,416,3.792,419,1.437,420,1.508,421,1.316,422,1.508,423,1.088,433,3.38,434,2.2,436,0.927,437,3.828,438,3.114,443,3.08,471,0.982,480,0.881,482,3.52,483,3.073,486,1.587,487,1.508,540,0.927,549,2.071,686,0.709,695,0.944,696,3.689,708,2.937,717,2.774,724,2.355,778,3.702,780,1.881,781,3.313,783,2.355,791,3.637,794,2.505,795,5.069,798,3.396,799,1.116,800,3.815,801,1.116,819,1.587,824,0.98,828,1.887,829,0.881,834,1.041,900,1.657,902,0.98,906,0.881,907,1.657,935,3.988,937,2.95,939,3.828,977,1.977,996,0.927,1060,1.885,1154,2.824,1241,2.929,1247,2.042,1294,1.587,1307,2.2,1441,0.537,1625,0.98,1771,3.617,1772,1.677,1773,4.127,1776,1.677,1780,2.929,1782,1.041,1783,3.889,1790,2.069,1791,1.209,1792,1.041,1793,1.209,1794,3.63,1795,2.714,1796,3.63,1797,2.714,1798,1.209,1799,2.081,1800,3.637,1801,1.116,1802,2.605,1803,1.783,1804,2.967,1805,2.77,1806,2.069,1807,1.209,1808,1.209,1809,3.94,1810,2.069,1811,1.508,1812,1.783,1813,2.505,1814,2.069,1815,2.069,1816,1.209,1817,2.069,1818,2.505,1819,4.274,1820,1.209,1821,2.069,1822,2.069,1823,1.209,1824,1.209,1825,1.209,1826,2.605,1827,1.209,1828,1.209,1829,2.069,1830,2.2,1831,1.209,1832,5.091,1833,1.209,1834,1.209,1835,1.209,1836,2.069,1837,1.209,1838,1.209,1839,1.209,1840,1.209,1841,2.069,1842,2.069,1843,1.209,1844,1.209,1845,1.209,1846,1.783,1847,1.209,1848,2.069,1849,1.209,1850,3.214,1851,1.209,1852,1.209,1853,1.209,1854,1.209,1855,2.069,1856,2.069,1857,2.069,1858,2.069,1859,2.714,1860,2.069,1861,2.069,1862,1.116,1863,3.114,1864,3.614,1865,3.614,1866,2.069,1867,2.069,1868,1.209,1869,1.209,1870,1.209,1871,1.209,2041,2.606,2042,1.522,2043,2.282,2044,2.282,2045,1.522,2046,3.417,2047,1.522,2048,1.522,2049,1.522,2050,1.522,2051,1.522,2052,1.522,2053,1.522,2054,1.522]],["title/classes/PaginationResponseDto.html",[0,0.167,716,2.603]],["body/classes/PaginationResponseDto.html",[0,0.311,2,0.907,3,0.161,4,0.148,5,0.107,8,0.512,17,0.342,18,1.004,24,0.897,26,2.122,29,0.012,30,0.685,31,0.62,32,1.281,34,3.056,49,2.745,51,0.963,53,0.488,56,0.88,59,0.258,60,1.053,87,0.008,88,0.008,170,1.674,184,1.335,206,2.283,214,0.907,307,1.509,330,3.056,339,1.724,386,1.969,411,1.557,414,4.734,416,2.299,421,3.44,433,3.828,451,2.122,695,2.296,714,4.604,716,4.604,717,3.641,778,3.44,780,1.997,783,1.835,828,3.384,882,2.51,906,2.633,935,2.937,972,3.114,988,3.689,1154,3.624,1247,2.043,1450,2.929,1599,4.383,1652,5.964,1771,3.756,1802,2.929,1805,5.173,1826,5.108,1958,3.336,1959,5.108,1963,3.614,1964,3.614,1965,3.336,1966,3.614,1967,3.614,1968,4.441,1969,3.614,1970,3.614,1971,3.614,1973,3.614,1974,3.614,1975,3.614,1976,3.336,1977,3.336,2055,5.765,2056,6.621,2057,4.55,2058,4.55,2059,4.55,2060,3.986,2061,6.057,2062,5.306,2063,5.306,2064,3.986,2065,3.986,2066,4.55,2067,4.81,2068,6.057,2069,4.55,2070,4.55,2071,4.55]],["title/injectables/PaginationService.html",[388,1.417,1034,2.751]],["body/injectables/PaginationService.html",[0,0.157,3,0.091,4,0.083,5,0.061,8,0.301,13,1.798,17,0.193,21,1.043,22,0.938,24,0.528,28,1.352,29,0.012,30,0.603,31,0.353,32,0.707,34,1.798,51,0.544,53,0.528,56,0.775,59,0.142,65,1.848,77,1.446,87,0.005,88,0.005,146,1.328,156,3.517,157,1.868,159,2.403,168,2.579,170,1.36,172,2.847,174,2.294,190,2.742,200,1.561,206,1.51,214,1.41,325,3.362,339,1.815,354,3.509,386,2.403,388,1.842,390,1.247,393,1.004,423,1.672,440,3.368,549,2.319,695,2.068,708,3.507,714,3.383,716,2.44,717,3.437,732,2.937,733,2.44,734,2.44,741,1.943,748,4.055,778,3.574,780,1.766,781,4.013,783,1.615,800,2.714,803,5.684,830,2.112,841,2.493,847,6.453,904,1.733,1030,2.21,1031,2.929,1034,4.105,1059,2.043,1060,1.419,1092,4.781,1095,3.908,1096,5.064,1100,3.908,1101,3.608,1102,6.094,1103,3.182,1105,3.946,1107,3.182,1108,5.288,1158,2.937,1165,3.667,1185,2.043,1295,1.656,1360,3.214,1489,2.024,1603,2.937,1625,2.579,1756,3.509,1777,1.76,1802,3.576,1803,4.95,1805,3.802,1826,1.656,1830,4.433,1887,2.253,1901,2.742,1958,2.937,1959,3.576,1979,2.043,2056,4.866,2060,3.509,2072,2.253,2073,4.006,2074,4.006,2075,4.006,2076,4.006,2077,2.937,2078,4.006,2079,4.006,2080,5.555,2081,2.572,2082,2.572,2083,2.572,2084,2.572,2085,6.658,2086,6.377,2087,4.921,2088,6.02,2089,5.555,2090,4.921,2091,4.006,2092,4.006,2093,4.006,2094,4.006,2095,2.572,2096,6.658,2097,3.509,2098,6.886,2099,3.509,2100,4.866,2101,4.006,2102,3.509,2103,4.866,2104,4.006,2105,3.509,2106,5.555,2107,3.509,2108,4.921,2109,6.02,2110,2.572,2111,4.006,2112,2.572,2113,2.572,2114,2.572,2115,4.006,2116,4.006,2117,2.572,2118,2.572,2119,2.572,2120,2.253,2121,2.572,2122,2.572]],["title/classes/PrismaClientExceptionFilter.html",[0,0.167,2123,3.133]],["body/classes/PrismaClientExceptionFilter.html",[0,0.23,2,0.864,3,0.154,4,0.141,5,0.102,8,0.441,10,4.132,11,3.452,12,3.665,13,2.632,14,4.013,17,0.326,21,1.527,24,0.571,28,0.974,29,0.012,30,0.653,31,0.42,32,0.765,37,4.277,38,4.397,39,4.934,41,3.775,42,2.285,48,2.683,49,2.853,50,3.092,51,0.917,52,2.391,53,0.51,55,2.19,56,0.838,57,2.791,58,2.19,59,0.208,60,1.356,65,1.797,66,3.775,67,3.775,68,3.775,70,2.979,74,3.178,75,4.787,76,3.178,77,1.129,78,3.443,81,3.533,85,3.045,86,3.443,87,0.008,88,0.008,116,4.013,150,2.139,172,4.674,265,3.571,326,4.335,328,3.092,357,3.098,358,3.393,404,2.843,406,4.013,411,1.483,696,2.843,713,5.745,825,4.656,875,2.791,904,1.876,958,3.797,1072,3.443,1082,5.82,1089,3.797,1154,2.021,1168,4.298,1437,3.775,1489,3.596,1500,4.298,1811,3.393,1813,3.178,1926,4.656,1934,3.443,1939,5.653,2123,5.218,2124,5.136,2125,5.863,2126,6.644,2127,6.235,2128,4.335,2129,6.644,2130,3.178,2131,3.797,2132,4.335,2133,4.335,2134,4.335,2135,3.797,2136,6.235,2137,3.797,2138,5.136,2139,5.82,2140,7.436,2141,4.335,2142,5.136,2143,4.335,2144,4.335,2145,4.335,2146,5.863,2147,5.136,2148,5.863,2149,4.335,2150,4.335]],["title/injectables/PrismaService.html",[156,2.357,388,1.417]],["body/injectables/PrismaService.html",[0,0.246,3,0.116,4,0.106,5,0.077,8,0.504,12,1.808,15,3.146,17,0.247,21,1.253,22,1.195,24,0.922,26,2.244,27,2.431,28,1.281,29,0.012,30,0.859,31,0.409,32,1.336,33,1.455,42,1.875,51,1.629,52,1.808,53,0.518,56,0.634,59,0.171,60,1.549,65,1.46,70,1.755,71,4.991,87,0.006,88,0.006,89,1.109,112,1.896,146,1.596,147,5.558,148,4.608,154,2.402,155,3.528,156,4.177,157,3.681,158,5.131,159,3.529,168,4.956,172,4.568,173,2.538,174,3.845,180,1.531,200,2.449,203,3.822,206,1.235,214,1.395,237,5.505,280,1.814,283,3.822,285,1.589,307,1.087,330,2.16,335,1.896,336,1.896,339,2.307,355,2.87,358,2.785,362,2.11,388,1.596,390,1.589,393,1.011,404,1.589,411,1.951,433,2.538,461,3.825,471,1.235,695,2.279,724,2.822,741,1.589,748,3.828,780,0.961,811,2.449,814,3.098,1024,2.931,1029,5.505,1031,2.538,1144,2.334,1145,2.931,1148,1.996,1159,4.262,1188,3.294,1201,2.243,1247,2.56,1299,1.808,1360,2.785,1437,4.31,1605,2.402,1611,2.11,1612,2.243,1616,2.11,1886,2.87,1984,4.529,2077,3.528,2120,2.87,2130,2.402,2151,2.87,2152,6.999,2153,4.813,2154,4.813,2155,6.999,2156,4.813,2157,4.813,2158,4.813,2159,5.703,2160,5.703,2161,6.285,2162,7.234,2163,7.234,2164,3.277,2165,3.277,2166,3.277,2167,4.813,2168,5.703,2169,4.215,2170,4.813,2171,3.277,2172,5.703,2173,3.277,2174,6.285,2175,5.703,2176,4.813,2177,3.277,2178,4.813,2179,4.813,2180,3.277,2181,4.813,2182,4.813,2183,3.277,2184,4.813,2185,4.813,2186,3.277,2187,3.277,2188,3.277,2189,3.277,2190,3.277,2191,3.277,2192,3.277,2193,3.277,2194,5.703,2195,3.277,2196,4.813,2197,3.277,2198,3.277,2199,3.277,2200,3.277,2201,4.813,2202,4.813,2203,4.813,2204,4.813,2205,4.813,2206,3.277,2207,3.277,2208,2.87,2209,3.277,2210,3.277,2211,3.277,2212,3.277,2213,4.813,2214,3.277,2215,2.87,2216,3.277]],["title/classes/Query.html",[0,0.167,339,1.217]],["body/classes/Query.html",[0,0.244,2,0.948,3,0.169,4,0.154,5,0.112,8,0.469,12,2.623,17,0.358,21,1.624,24,0.626,28,1.068,29,0.012,30,1.185,31,0.529,32,0.839,33,1.885,48,3.022,49,2.457,51,1.472,59,0.169,60,1.774,65,1.517,77,1.238,85,3.191,87,0.008,88,0.008,89,1.353,113,3.083,170,1.314,173,3.669,180,1.472,214,1.387,339,2.41,362,3.061,393,1.178,423,1.985,695,2.174,798,5.054,829,4.026,841,2.134,1030,4.615,1067,4.165,1105,2.507,1145,4.498,1148,4.498,1157,4.237,1247,2.799,1299,4.341,1360,4.553,1700,3.061,1901,4.267,2217,4.165,2218,4.755,2219,4.165,2220,4.755,2221,4.165,2222,4.755,2223,4.755,2224,4.755,2225,4.755,2226,4.755,2227,4.755,2228,4.755,2229,4.755,2230,4.755,2231,4.755,2232,4.755,2233,6.235,2234,6.235,2235,6.717,2236,6.717,2237,4.755,2238,5.462,2239,5.462,2240,7.386,2241,4.165,2242,4.165,2243,5.462,2244,5.462,2245,4.165,2246,4.165,2247,4.165,2248,4.165,2249,4.165]],["title/classes/Query-1.html",[0,0.14,339,1.02,780,1.051]],["body/classes/Query-1.html",[0,0.255,2,1.011,3,0.18,4,0.165,5,0.119,8,0.489,12,2.798,17,0.382,21,1.693,24,0.668,28,1.139,29,0.012,30,1.14,31,0.542,32,0.895,48,2.451,49,2.296,51,1.376,59,0.18,60,1.811,65,1.106,85,3.219,87,0.009,88,0.009,89,1.381,121,1.735,173,3.428,180,1.376,214,1.43,328,3.428,339,2.371,362,3.265,393,1.169,695,2.163,841,2.277,1030,4.491,1031,2.674,1038,3.471,1105,2.674,1144,3.153,1145,4.371,1148,3.96,1154,2.365,1299,4.417,1360,4.633,1488,6.011,1695,3.265,1700,4.186,2219,6.286,2235,6.855,2236,6.855,2238,6.63,2239,5.695,2241,6.286,2243,5.695,2244,5.695,2245,4.442,2246,4.442,2247,4.442,2248,4.442,2249,4.442,2250,4.442,2251,6.502,2252,5.072]],["title/classes/Query-2.html",[0,0.14,339,1.02,451,1.67]],["body/classes/Query-2.html",[0,0.123,2,0.626,3,0.111,4,0.102,5,0.074,17,0.236,18,1.215,21,1.214,22,1.145,24,0.94,28,1.249,29,0.012,30,1.278,31,0.576,32,0.981,51,1.636,53,0.334,59,0.111,60,1.287,65,1.787,70,2.399,77,1.214,87,0.006,88,0.006,135,3.583,157,2.87,159,1.358,174,1.464,180,1.751,206,1.183,214,1.615,218,3.47,258,3.58,280,2.762,335,1.816,336,1.816,339,2.421,393,1.104,398,2.021,411,2.441,471,2.32,549,1.946,682,5.231,683,3.749,687,4.464,689,4.438,695,1.288,700,5.798,724,1.88,741,1.522,780,2.022,824,3.001,833,3.703,835,3.703,836,2.493,841,2.763,844,2.75,845,3.703,846,4.417,909,3.418,910,4.084,911,4.084,912,4.084,984,2.021,1008,2.75,1028,2.093,1030,4.544,1035,4.197,1105,3.246,1145,4.767,1148,4.708,1165,3.749,1172,2.301,1174,4.513,1175,2.301,1177,2.301,1180,3.805,1182,3.418,1184,1.912,1188,2.148,1201,2.148,1211,2.301,1700,4.905,1799,1.912,2253,2.75,2254,4.084,2255,6.577,2256,4.084,2257,3.139,2258,3.139,2259,3.139,2260,4.662,2261,3.139,2262,3.139,2263,4.084,2264,3.139,2265,3.139,2266,3.139,2267,3.139,2268,3.139,2269,6.249,2270,4.084,2271,2.75,2272,4.084,2273,4.662,2274,4.662,2275,4.662,2276,3.139,2277,3.139,2278,3.139,2279,2.493,2280,4.662,2281,3.703,2282,3.139,2283,3.139,2284,3.139,2285,4.662,2286,3.139,2287,3.139,2288,3.139,2289,3.139,2290,2.75,2291,4.084,2292,2.75,2293,2.75,2294,2.75,2295,3.139,2296,2.75,2297,3.139,2298,3.139,2299,3.139,2300,3.139,2301,3.139,2302,3.139,2303,3.139,2304,3.139,2305,3.139,2306,3.139,2307,3.139,2308,3.139,2309,3.139,2310,3.139,2311,2.493,2312,3.139,2313,3.139,2314,3.139,2315,3.139,2316,2.75,2317,3.139,2318,2.75,2319,3.139,2320,3.139,2321,2.75,2322,4.084,2323,2.75,2324,2.75,2325,2.75]],["title/classes/Query-3.html",[0,0.14,339,1.02,882,1.976]],["body/classes/Query-3.html",[0,0.255,2,0.539,3,0.096,4,0.088,5,0.12,8,0.382,17,0.203,18,1.216,21,1.695,24,0.893,28,0.608,29,0.012,30,1.214,31,0.566,32,0.896,51,1.641,53,0.364,59,0.148,60,0.964,65,1.735,70,2.248,77,1.323,87,0.006,88,0.006,89,0.477,121,1.425,133,0.987,136,3.797,146,2.158,153,2.196,157,1.942,180,1.763,205,1.851,214,1.586,218,3.703,258,2.682,279,2.104,280,2.764,330,1.87,335,2.41,336,3.302,339,2.407,357,3.576,393,1.104,411,2.227,471,2.556,681,1.519,683,3.475,687,4.264,689,4.116,695,1.151,717,2.469,756,2.851,780,1.989,811,1.623,830,2.196,841,2.561,849,3.724,904,1.802,909,5.265,936,3.308,949,4.034,950,4.034,951,4.034,952,4.034,984,5.084,1023,3.308,1024,2.537,1025,3.649,1030,4.633,1031,3.692,1098,3.649,1105,2.196,1131,2.851,1133,1.983,1141,3.905,1145,4.769,1148,4.264,1157,3.094,1159,3.475,1162,3.054,1164,2.148,1167,3.308,1172,1.983,1174,1.983,1175,1.983,1177,1.983,1180,2.939,1182,1.983,1184,1.647,1201,2.851,1211,1.983,1440,1.983,1648,5.169,1695,2.682,1700,4.721,1811,2.41,2019,5.701,2021,3.649,2142,3.649,2169,3.649,2242,3.649,2254,5.398,2269,5.701,2270,4.45,2271,3.649,2272,3.649,2279,2.148,2281,2.148,2290,2.369,2291,3.649,2292,2.369,2293,2.369,2294,2.369,2296,2.369,2311,3.308,2316,3.649,2318,2.369,2326,2.369,2327,4.166,2328,4.166,2329,4.166,2330,3.649,2331,5.08,2332,6.162,2333,6.162,2334,2.705,2335,4.166,2336,2.705,2337,3.649,2338,2.705,2339,2.705,2340,2.705,2341,2.705,2342,4.166,2343,2.705,2344,5.706,2345,5.08,2346,2.705,2347,2.705,2348,2.705,2349,2.705,2350,2.705,2351,4.166,2352,2.705,2353,4.166,2354,4.166,2355,4.166,2356,4.166,2357,4.166,2358,3.649,2359,2.705,2360,2.705,2361,2.705,2362,2.705,2363,2.705,2364,2.705,2365,2.705,2366,2.705,2367,2.705,2368,2.705,2369,2.705,2370,2.705]],["title/classes/QueryCountryDto.html",[0,0.167,772,2.751]],["body/classes/QueryCountryDto.html",[0,0.306,2,1.002,3,0.178,4,0.163,5,0.118,17,0.378,18,1.072,24,0.994,29,0.012,31,0.601,32,1.452,53,0.541,59,0.254,87,0.009,88,0.009,135,3.208,162,2.085,184,1.475,214,1.002,227,2.085,307,1.667,325,3.768,334,1.776,393,1.028,411,2.816,443,2.651,482,3.785,483,3.092,549,2.699,724,3.042,772,4.162,774,5.341,778,3.61,780,1.475,781,3.61,783,2.027,800,3.942,907,2.438,935,3.466,937,4.115,977,4.135,1134,3.237,1769,5.163,1770,5.722,1771,4.305,1772,3.237,1773,4.601,1774,5.163,1775,3.993,1776,3.237,1777,3.441,1778,5.135,1779,3.993,1780,4.162,1781,3.993,2032,5.663,2043,4.404,2044,4.404,2371,6.466,2372,5.027,2373,5.027,2374,6.466,2375,6.466,2376,5.027,2377,5.027,2378,5.027]],["title/classes/QueryFailedFilter.html",[0,0.167,2379,3.394]],["body/classes/QueryFailedFilter.html",[0,0.246,2,0.775,3,0.138,4,0.126,5,0.092,8,0.472,10,4.094,11,3.469,12,3.946,13,1.745,14,3.723,15,3.749,16,5.314,17,0.292,18,0.902,19,3,20,6.568,21,1.416,22,1.418,23,3.087,24,0.826,26,2.536,27,3.614,28,1.222,29,0.012,30,0.819,31,0.513,32,0.96,33,1.897,34,2.817,35,4.983,37,4.04,38,4.198,39,4.899,41,3.502,42,2.12,43,3.502,48,2.365,49,2.823,50,2.868,51,0.823,52,2.144,53,0.584,54,2.503,55,2.748,56,1.052,57,2.503,58,2.748,59,0.223,60,1.452,61,3.087,65,1.791,66,3.502,67,3.502,68,3.502,69,2.66,70,2.479,73,3.988,74,2.85,75,3.502,77,1.416,80,4.294,81,3.095,85,2.794,87,0.007,88,0.007,113,1.623,116,2.66,121,1.861,150,1.984,157,3.727,172,3.147,179,2.66,326,4.139,328,2.868,333,3.405,335,2.249,336,2.249,337,4.765,338,3.405,339,2.3,362,2.503,364,3.087,365,4.32,366,3.405,367,4.32,371,4.983,406,3.723,875,2.503,1031,2.868,1072,3.087,1154,2.536,1489,2.748,1500,3.988,1926,3.087,1928,4.765,1929,4.765,1939,4.32,2123,2.85,2127,3.405,2130,2.85,2131,3.405,2135,3.405,2137,3.405,2138,5.953,2139,6.266,2281,3.087,2379,6.044,2380,5.953,2381,3.405,2382,5.44,2383,3.887,2384,3.887,2385,3.887,2386,5.44,2387,3.887,2388,3.887,2389,3.405,2390,3.887,2391,3.887,2392,5.44,2393,3.887,2394,3.887,2395,3.887,2396,3.887,2397,3.887,2398,3.887,2399,3.887,2400,3.887]],["title/interfaces/QueryOptions.html",[1141,2.925,1153,1.254]],["body/interfaces/QueryOptions.html",[0,0.193,3,0.091,4,0.084,5,0.061,8,0.194,17,0.501,18,0.665,29,0.012,30,1.143,31,0.603,32,1.434,33,1.49,51,1.177,53,0.185,59,0.197,60,1.286,65,1.812,70,1.797,87,0.005,88,0.005,180,1.585,214,1.513,227,0.712,258,3.172,335,1.491,336,1.491,339,2.379,393,1.147,397,2.321,411,2.718,449,4.196,471,2.822,683,1.569,687,4.407,689,4.235,724,1.618,780,1.631,811,1.563,841,3.309,900,3.631,1030,4.483,1031,2.598,1040,1.889,1041,2.746,1060,4.235,1105,3.513,1131,4.367,1132,2.047,1133,1.889,1134,1.659,1135,2.257,1140,2.257,1141,5.535,1143,4.416,1144,2.696,1145,4.196,1146,2.257,1148,4.407,1149,2.257,1151,2.257,1153,1.177,1154,3.579,1155,6.647,1156,6.647,1157,4.723,1158,2.941,1159,4.489,1160,3.067,1161,3.514,1162,5.563,1163,4.416,1164,5.472,1165,2.443,1166,5.59,1167,5.291,1168,2.941,1169,4.871,1170,3.514,1171,5.59,1172,1.889,1173,2.257,1174,1.889,1175,1.889,1176,2.257,1177,1.889,1178,5.836,1179,4.315,1180,2.851,1181,4.315,1182,1.889,1183,2.257,1184,1.569,1185,4.416,1186,4.315,1187,3.514,1188,3.806,1189,3.514,1190,3.186,1191,3.514,1192,3.514,1193,3.514,1194,5.59,1195,4.315,1196,4.871,1197,4.871,1198,3.514,1199,3.514,1200,2.257,1201,1.764,1202,2.257,1203,2.257,1204,2.257,1205,2.257,1206,2.257,1207,2.257,1208,2.257,1209,4.315,1210,2.257,1211,2.941,1212,2.257,1940,1.201]],["title/injectables/ResolvePromisesInterceptor.html",[388,1.417,2401,3.394]],["body/injectables/ResolvePromisesInterceptor.html",[0,0.257,3,0.183,4,0.167,5,0.121,8,0.494,13,2.949,15,3.624,17,0.388,21,1.711,24,0.679,28,1.158,29,0.012,30,0.776,31,0.369,32,0.91,33,1.987,44,2.397,45,5.218,46,5.212,48,3.031,49,2.922,51,1.391,53,0.546,56,0.997,59,0.233,60,1.52,87,0.009,88,0.009,153,3.465,175,4.638,199,2.649,214,1.028,388,2.179,390,2.5,421,3.847,447,4.002,695,2.286,713,4.817,1247,2.949,1642,5.212,1765,5.756,2401,5.744,2402,4.516,2403,7.616,2404,6.387,2405,7.247,2406,6.571,2407,7.616,2408,5.756,2409,6.571,2410,5.744,2411,5.218,2412,5.756,2413,6.571,2414,6.571,2415,7.866,2416,7.866,2417,5.156,2418,6.571,2419,6.571,2420,8.042,2421,6.571,2422,7.233,2423,4.516,2424,4.516,2425,5.156,2426,5.156,2427,5.156,2428,5.156,2429,5.156]],["title/injectables/SortBy.html",[388,1.417,436,2.603]],["body/injectables/SortBy.html",[0,0.29,3,0.152,4,0.139,5,0.101,8,0.496,15,3.904,17,0.322,21,1.512,24,0.765,28,1.304,29,0.012,30,1.066,31,0.416,32,1.025,51,1.681,53,0.416,56,0.827,59,0.251,60,1.712,65,1.543,81,3.062,85,2.667,87,0.008,88,0.008,159,2.513,210,4.258,214,1.411,307,2.347,317,3.478,327,4.117,334,2.499,386,2.854,388,2.187,389,4.836,390,2.073,391,3.395,392,5.239,393,1.129,394,4.764,395,5.088,396,5.088,397,3.361,398,3.739,399,5.088,400,3.575,401,5.088,402,7.2,404,2.817,405,6.959,406,5.065,407,3.745,409,3.817,410,5.239,411,2.718,412,3.745,413,5.239,414,4.507,415,5.239,416,3.945,417,5.778,418,6.482,419,3.204,420,3.361,421,2.934,422,3.361,423,2.425,424,4.613,425,4.613,426,4.613,427,5.088,428,3.745,429,3.745,430,3.745,431,3.745,432,5.088,433,4.189,434,5.244,435,4.31,436,4.31,437,3.975,438,3.975,439,5.088,440,2.926,441,2.926,442,3.745,443,2.254,444,3.745,445,3.745,446,3.745,447,2.604,448,5.088,449,2.604,450,3.745,451,1.993,452,3.745,453,3.745,454,3.745,455,3.745,456,3.745,457,3.745,458,3.745,459,3.745,460,2.752,2430,4.275,2431,4.275]],["title/classes/SortByDto.html",[0,0.167,1819,2.925]],["body/classes/SortByDto.html",[0,0.297,2,0.317,3,0.056,4,0.052,5,0.037,8,0.49,11,2.264,17,0.265,18,0.448,24,0.356,28,0.607,29,0.012,30,1.081,31,0.592,50,2.196,53,0.53,56,0.307,59,0.265,65,0.589,70,0.58,81,2.197,87,0.004,88,0.004,89,0.477,135,1.869,162,0.975,170,2.131,180,1.207,184,1.222,196,1.564,199,0.641,206,1.914,214,1.186,220,1.982,227,2.153,265,2.536,307,2.474,317,0.838,325,3.575,330,1.869,334,1.471,339,1.185,393,1.104,394,1.741,400,1.366,404,2.264,411,2.395,416,3.77,419,1.491,420,1.564,421,1.366,422,1.564,423,1.129,433,3.636,434,3.269,436,0.968,437,4.216,438,3.708,443,3.137,471,1.019,480,0.919,482,3.556,483,3.107,486,1.647,487,1.564,540,0.968,549,2.12,686,0.741,695,0.975,696,3.672,708,2.885,717,2.197,724,2.185,778,3.425,780,1.807,781,3.112,783,2.3,791,3.723,794,2.587,795,5.083,798,2.85,799,1.165,800,3.74,801,1.165,819,1.647,824,1.023,828,1.941,829,0.919,834,1.087,900,1.311,902,1.023,906,0.919,907,1.711,935,4.007,937,3.008,939,3.904,977,2.042,996,0.968,1060,1.946,1154,2.872,1241,2.681,1247,2.095,1294,1.647,1307,1.741,1441,0.561,1528,1.262,1625,1.023,1771,3.669,1772,1.741,1773,4.189,1776,1.741,1780,3.005,1782,1.087,1783,4.182,1790,2.147,1791,1.262,1792,1.087,1793,1.262,1794,3.708,1795,2.802,1796,3.708,1797,2.802,1798,1.262,1799,2.149,1800,3.053,1801,1.165,1802,2.272,1803,1.85,1804,1.982,1805,1.85,1806,1.262,1807,1.262,1808,1.262,1809,3.307,1810,2.147,1811,0.919,1812,1.087,1813,1.982,1814,2.147,1815,2.147,1816,1.262,1817,2.147,1818,2.587,1819,4.342,1820,1.262,1821,2.147,1822,2.147,1823,1.262,1824,1.262,1825,1.262,1826,2.681,1827,2.147,1828,2.147,1829,2.147,1830,2.272,1831,1.262,1832,5.168,1833,1.262,1834,1.262,1835,1.262,1836,2.147,1837,1.262,1838,1.262,1839,1.262,1840,1.262,1841,2.147,1842,2.147,1843,1.262,1844,1.262,1845,1.262,1846,1.85,1847,1.262,1848,2.147,1849,1.262,1850,3.307,1851,1.262,1852,1.262,1853,1.262,1854,1.262,1855,2.147,1856,2.147,1857,2.147,1858,2.147,1859,2.802,1860,2.147,1861,2.147,1862,1.165,1863,3.195,1864,3.707,1865,3.707,1866,2.147,1867,2.147,1868,1.262,1869,1.262,1870,1.262,1871,1.262,2432,1.589,2433,1.589,2434,1.392,2435,1.589]],["title/classes/SortCountryDto.html",[0,0.167,1774,2.925]],["body/classes/SortCountryDto.html",[0,0.312,2,1.069,3,0.19,4,0.174,5,0.126,17,0.403,18,1.117,24,0.887,29,0.012,31,0.591,53,0.554,59,0.261,87,0.009,88,0.009,135,3.306,162,1.861,184,1.573,214,1.069,227,1.861,307,1.778,325,2.827,334,1.894,393,1.085,411,2.853,443,2.827,482,3.86,483,3.186,549,2.812,724,2.716,772,3.452,774,5.04,778,2.709,780,1.573,781,2.709,783,2.162,800,2.958,907,2.6,935,3.571,937,4.197,977,4.261,1134,3.452,1769,5.04,1770,5.399,1771,4.39,1772,3.452,1773,4.741,1774,5.287,1775,5.849,1776,3.452,1777,5.04,1778,5.349,1779,4.258,1780,4.336,1781,4.258,2434,4.697,2436,5.362,2437,5.362,2438,5.362]],["title/classes/UpdateDto.html",[0,0.167,719,2.603]],["body/classes/UpdateDto.html",[0,0.259,2,1.32,3,0.235,4,0.215,5,0.156,29,0.011,53,0.548,59,0.235,87,0.01,88,0.01,184,1.943,691,4.532,719,4.659,1437,4.925,2439,5.801,2440,7.65,2441,5.801,2442,5.801]],["title/classes/UpdateDto-1.html",[0,0.14,719,2.181,780,1.051]],["body/classes/UpdateDto-1.html",[0,0.333,2,1.132,3,0.201,4,0.184,5,0.178,8,0.525,18,1.157,29,0.012,32,1.391,33,2.384,53,0.5,59,0.201,87,0.009,88,0.009,89,1.002,133,2.072,136,3.823,180,1.477,681,2.546,689,4.349,694,4.929,695,2.179,696,3.385,719,5.018,756,5.396,817,3.681,818,4.777,819,4.802,827,4.494,828,3.255,840,5.544,1023,5.544,1053,6.115,1159,4.251,1168,5.118,1437,5.076,1799,3.459,1884,6.115,2441,4.975,2442,4.975,2443,4.975,2444,6.981,2445,6.115,2446,6.981,2447,6.115,2448,6.981,2449,5.68]],["title/classes/UserNotFoundException.html",[0,0.167,2450,3.394]],["body/classes/UserNotFoundException.html",[0,0.221,2,1.127,3,0.201,4,0.183,5,0.133,8,0.568,10,3.978,22,2.063,24,0.745,26,3.246,27,3.517,28,1.27,29,0.012,30,0.852,31,0.405,32,1.331,43,3.641,53,0.405,56,1.094,59,0.201,60,1.308,77,2.05,81,3.264,85,3.143,87,0.009,88,0.009,170,1.924,199,2.807,217,5.531,317,3.671,328,3.671,358,4.365,393,1.073,423,2.907,904,3.013,1070,5.068,1362,4.954,1437,5.204,1440,4.146,1441,1.997,1442,2.857,2450,6.537,2451,6.099,2452,4.954,2453,8.231,2454,6.963,2455,5.656,2456,6.963,2457,5.656,2458,5.656,2459,5.656]],["title/classes/UtilsService.html",[0,0.167,1035,2.603]],["body/classes/UtilsService.html",[0,0.17,2,0.57,3,0.101,4,0.093,5,0.067,8,0.442,11,1.386,17,0.395,19,4.025,21,1.529,24,0.692,28,1.553,29,0.012,30,0.792,31,0.453,32,0.928,51,1.337,53,0.311,59,0.154,60,1.774,65,1.762,77,0.744,87,0.006,88,0.006,146,1.441,170,1.201,180,1.408,214,1.508,227,0.79,258,1.84,280,2.213,325,3.331,330,1.283,339,2.253,386,2.541,393,1.194,398,1.84,404,2.848,411,2.497,419,1.577,420,1.654,421,1.444,422,1.654,423,1.193,424,2.27,425,2.27,426,2.27,433,4.044,434,1.84,443,2.291,512,2.291,549,1.193,708,3.063,717,2.878,724,1.752,734,1.741,800,2.9,803,3.854,822,3.669,841,1.283,900,2.848,904,1.88,996,4.051,1030,3.669,1031,4.044,1035,4.211,1038,2.974,1040,4.305,1041,2.974,1058,1.956,1059,2.27,1060,2.9,1090,6.241,1092,6.008,1094,5.827,1095,5.91,1096,5.91,1100,5.491,1101,5.069,1102,5.91,1103,5.91,1105,4.262,1106,2.504,1107,3.451,1108,6.091,1143,3.451,1144,3.226,1157,3.577,1159,4.339,1160,3.93,1163,3.451,1165,4.211,1184,1.741,1188,1.956,1190,4.175,1441,2.231,1489,2.967,1495,4.605,1648,5.658,1777,3.598,1783,3.854,1799,1.741,1811,3.398,1818,5.35,1901,2.974,1917,3.806,2018,6.241,2097,2.504,2099,2.504,2100,3.806,2102,2.504,2103,2.504,2105,2.504,2107,3.806,2256,3.806,2263,3.806,2279,2.27,2321,2.504,2322,3.806,2323,2.504,2324,2.504,2325,2.504,2330,3.806,2358,3.806,2424,2.504,2460,2.504,2461,5.257,2462,5.257,2463,2.859,2464,7.298,2465,2.859,2466,4.605,2467,7.842,2468,5.873,2469,3.806,2470,2.859,2471,2.859,2472,2.859,2473,5.257,2474,2.859,2475,2.859,2476,2.859,2477,2.859,2478,3.806,2479,5.873,2480,4.345,2481,2.859,2482,2.859,2483,2.859,2484,2.859,2485,2.859,2486,2.859,2487,5.257,2488,2.859,2489,2.859,2490,2.859,2491,2.859,2492,2.859,2493,2.859,2494,2.859,2495,2.859,2496,2.504,2497,2.859,2498,2.859,2499,5.257,2500,2.859,2501,2.859,2502,2.859]],["title/changelog.html",[2503,2.451,2504,2.451,2505,3.137]],["body/changelog.html",[29,0.01,87,0.01,88,0.01,92,2.875,280,2.504,512,3.503,723,4.871,1295,4.277,2505,5.82,2506,6.644,2507,6.714,2508,6.644,2509,6.644,2510,5.82,2511,6.644,2512,6.644,2513,5.82,2514,6.644,2515,5.82,2516,6.644,2517,6.644,2518,5.277,2519,6.644,2520,6.644]],["title/contributing.html",[2503,2.451,2504,2.451,2521,3.137]],["body/contributing.html",[29,0.011,30,1.144,33,1.737,48,2.649,77,1.496,87,0.009,88,0.009,110,5.953,151,2.786,170,1.942,357,3.69,447,4.281,451,3.277,683,3.498,685,2.578,686,2.678,780,1.685,820,4.562,882,3.168,972,3.931,1160,3.168,1184,3.498,1242,3.931,1441,2.029,1755,4.211,1863,4.811,1883,5.031,1943,4.562,1976,4.211,1977,4.211,2067,4.562,2408,5.031,2510,5.031,2513,6.157,2518,4.562,2521,6.157,2522,5.744,2523,6.157,2524,6.654,2525,7.03,2526,7.03,2527,5.744,2528,6.933,2529,5.744,2530,5.744,2531,5.744,2532,5.744,2533,5.744,2534,5.031,2535,6.654,2536,6.654,2537,5.744,2538,5.744,2539,5.744,2540,5.744,2541,5.744,2542,4.562,2543,7.03,2544,6.654,2545,5.744,2546,5.744,2547,6.157,2548,6.157,2549,5.031,2550,7.03,2551,5.744,2552,7.03,2553,5.744,2554,5.744,2555,5.744,2556,5.031,2557,6.654,2558,5.744,2559,5.031,2560,5.744,2561,5.031]],["title/coverage.html",[2562,4.612]],["body/coverage.html",[0,0.338,1,2.462,5,0.073,6,2.716,7,2.716,29,0.012,31,0.222,77,0.807,87,0.006,88,0.006,91,1.294,95,1.392,96,1.446,126,2.273,135,1.392,136,1.504,142,2.769,143,2.273,145,2.716,156,1.71,172,1.794,191,2.716,197,1.635,276,2.716,303,2.273,314,2.462,315,2.716,316,2.716,339,1.742,386,3.658,388,2.588,389,2.273,391,3.669,436,1.888,461,1.566,462,3.669,490,2.122,492,2.122,494,2.122,496,2.122,498,2.122,501,2.122,503,2.122,505,2.122,507,2.122,510,1.794,513,2.273,679,2.273,680,2.716,682,3.387,691,2.122,694,1.888,708,1.504,716,1.888,719,2.813,731,2.273,735,2.273,772,1.996,774,3.778,783,1.25,784,2.716,795,1.996,816,2.716,865,2.462,876,1.996,898,2.716,941,2.462,948,2.716,982,2.273,983,4.046,984,2.974,987,1.996,1022,2.716,1034,1.996,1035,1.888,1058,2.122,1115,2.716,1131,2.122,1132,3.669,1133,3.387,1134,4.212,1141,2.122,1153,2.29,1157,1.888,1221,3.375,1222,2.462,1247,3.35,1265,2.716,1318,6.772,1332,7.711,1345,2.716,1380,3.669,1405,2.716,1430,2.462,1431,2.716,1432,2.716,1448,2.911,1449,2.716,1450,4.212,1452,1.71,1462,3.939,1463,2.716,1479,2.716,1486,2.716,1521,2.122,1522,2.716,1526,2.273,1535,2.273,1536,2.716,1562,2.462,1564,2.716,1565,2.716,1566,2.273,1570,1.996,1573,1.794,1602,2.716,1624,2.716,1636,2.716,1643,2.273,1644,2.716,1660,1.996,1690,2.273,1691,2.716,1712,1.996,1728,2.716,1754,2.716,1763,2.716,1769,2.122,1770,4.048,1774,2.122,1782,3.778,1792,2.122,1794,2.122,1796,2.122,1819,2.122,1875,2.716,1894,2.273,1895,2.716,1896,1.996,1908,2.716,1915,2.716,1916,2.716,1932,2.462,1933,2.716,1934,3.669,1941,2.716,1946,2.716,1947,2.716,1952,2.716,1953,2.716,1954,2.716,1955,2.273,1956,3.669,1959,1.996,1968,2.273,1972,2.462,2013,2.716,2014,2.716,2022,2.716,2026,2.716,2027,2.716,2028,2.716,2029,2.716,2055,3.669,2072,2.716,2123,2.273,2124,2.716,2151,2.716,2217,2.716,2250,2.716,2253,2.716,2326,2.716,2379,2.462,2380,2.716,2381,2.716,2389,2.716,2401,2.462,2402,2.716,2410,2.462,2439,2.716,2443,2.716,2450,2.462,2451,2.716,2452,2.716,2460,2.716,2562,2.462,2563,3.101,2564,6.86,2565,3.101,2566,8.028,2567,6.543,2568,3.101,2569,3.101,2570,3.101,2571,4.619,2572,3.101,2573,7.597,2574,5.521,2575,4.046,2576,4.619,2577,3.101,2578,3.101,2579,5.521,2580,3.101,2581,3.101,2582,3.101,2583,3.101,2584,3.101,2585,5.521,2586,3.101,2587,8.475,2588,3.101,2589,3.101,2590,2.716,2591,3.101,2592,4.619,2593,3.101,2594,2.716,2595,7.71,2596,6.543,2597,4.619,2598,3.101,2599,3.101,2600,3.101,2601,5.521,2602,3.101,2603,4.619,2604,3.101,2605,2.716,2606,2.716,2607,3.101,2608,3.101,2609,3.101,2610,4.619,2611,4.619,2612,3.101,2613,3.101,2614,3.101,2615,3.101,2616,3.101,2617,4.619,2618,3.101,2619,4.619,2620,4.619,2621,3.101,2622,3.101,2623,4.619,2624,7.463,2625,7.463,2626,3.101,2627,3.101,2628,3.101,2629,3.101,2630,3.101,2631,2.716,2632,2.716,2633,2.716,2634,2.716,2635,3.101,2636,3.101,2637,4.619,2638,3.101,2639,3.101,2640,2.716,2641,2.716,2642,3.101]],["title/dependencies.html",[92,2.221,2643,3.137]],["body/dependencies.html",[0,0.279,29,0.012,34,2.631,48,2.209,56,1.134,57,3.773,58,4.026,87,0.009,88,0.009,92,2.536,154,4.297,179,4.011,184,1.72,188,4.655,199,2.363,285,2.842,334,2.07,543,3.752,781,2.961,907,2.842,1350,3.595,1503,4.011,1505,4.655,1506,4.655,1556,4.011,1561,5.217,1885,5.134,2130,4.297,2423,5.134,2644,5.861,2645,5.861,2646,7.117,2647,5.861,2648,5.861,2649,5.861,2650,5.861,2651,7.664,2652,5.861,2653,5.861,2654,5.861,2655,5.861,2656,5.861,2657,5.861,2658,5.861,2659,5.861,2660,5.861,2661,5.861,2662,5.861,2663,5.861,2664,5.134,2665,5.861,2666,5.134,2667,5.861,2668,5.861,2669,5.861,2670,5.861,2671,7.117,2672,5.861,2673,5.134,2674,5.861,2675,5.861,2676,5.861,2677,5.861,2678,5.861,2679,5.861,2680,5.861,2681,5.861]],["title/miscellaneous/enumerations.html",[2682,2.306,2683,4.496]],["body/miscellaneous/enumerations.html",[5,0.141,17,0.449,29,0.012,87,0.01,88,0.01,281,4.885,411,2.995,488,4.635,533,5.164,536,4.885,553,4.885,717,2.585,829,4.166,1222,4.745,1241,4.635,1242,4.927,1243,5.278,1346,3.15,1350,3.904,1351,3.457,1361,4.166,1380,4.745,1498,5.233,1599,3.846,1625,3.846,1782,4.089,1799,3.638,1800,5.278,1801,4.38,1802,4.635,1803,4.927,2682,3.846,2683,5.233,2684,5.974,2685,5.974,2686,5.233,2687,6.306,2688,5.974,2689,5.233,2690,5.974]],["title/miscellaneous/functions.html",[1039,4.076,2682,2.306]],["body/miscellaneous/functions.html",[0,0.32,8,0.586,9,3.128,10,2.41,17,0.344,22,2.216,26,2.833,27,3.447,28,1.748,29,0.011,30,1.172,31,0.585,32,1.401,33,1.837,44,2.761,49,1.614,51,1.286,52,2.521,84,3.128,85,1.723,87,0.008,88,0.008,91,2.536,95,3.063,111,4.393,112,3.948,148,3.351,150,1.667,153,2.41,155,3.351,162,1.263,174,3.182,175,4.156,180,1.602,196,4.38,197,3.598,199,2.751,208,2.784,210,3.351,212,5.775,227,1.886,265,2.784,280,2.741,317,3.203,327,3.834,328,2.41,330,2.727,334,1.614,393,0.828,394,2.943,400,3.069,409,2.645,411,2.079,413,3.63,433,2.41,441,4.977,471,1.723,510,3.515,512,2.41,536,2.784,553,2.784,685,2.052,695,1.679,717,1.978,731,4.454,780,1.341,818,3.128,819,4.156,821,3.128,828,2.131,837,3.128,900,2.946,904,1.978,906,2.645,907,2.217,908,3.351,937,2.41,1039,3.63,1060,3.764,1124,4.004,1160,2.521,1243,3.351,1247,3.494,1250,3.351,1294,2.784,1303,2.645,1440,4.454,1450,3.911,1489,3.069,1494,4.004,1642,3.128,1653,4.004,1665,5.331,1667,4.004,1755,3.351,1792,4.158,1794,4.158,1796,4.67,1876,4.004,2055,3.63,2062,4.004,2063,4.004,2064,4.004,2065,4.004,2067,3.63,2077,3.351,2404,4.825,2405,6.37,2410,4.825,2411,4.825,2412,4.004,2478,4.004,2590,4.004,2594,4.004,2605,4.004,2606,4.004,2631,4.004,2632,5.977,2633,4.004,2634,5.322,2640,4.004,2641,5.322,2682,2.943,2691,4.571,2692,4.004,2693,4.571,2694,4.571,2695,4.571,2696,4.571,2697,4.571,2698,4.571,2699,4.571,2700,6.076,2701,4.571,2702,4.571,2703,4.571,2704,4.571,2705,4.571,2706,4.004,2707,4.571,2708,4.571,2709,7.943,2710,4.571,2711,4.571,2712,4.571,2713,4.571,2714,4.571,2715,4.571,2716,4.571,2717,4.571,2718,6.076,2719,4.571,2720,4.571,2721,4.571,2722,4.571,2723,4.571,2724,6.076,2725,6.076,2726,4.004,2727,4.571]],["title/index.html",[17,0.269,2503,2.451,2504,2.451]],["body/index.html",[4,0.173,5,0.158,8,0.284,13,1.696,29,0.012,31,0.443,32,1.296,77,0.984,81,1.635,84,3.649,87,0.007,88,0.007,92,1.635,106,1.635,112,3.575,113,2.226,120,2.996,157,3.52,165,3.978,170,2.22,172,3.575,193,3.432,196,3.575,197,3.539,199,2.854,200,1.472,202,3,203,3,217,2.77,265,2.301,278,3.309,279,1.909,280,2.009,281,2.301,282,2.432,287,3.909,353,3,357,3.3,373,3.247,392,3,419,3.408,421,2.693,423,2.226,435,3.763,447,2.301,449,3.247,512,2.811,533,3.432,536,3.763,540,3.763,553,3.763,686,2.881,689,2.941,695,1.044,813,3.909,830,1.992,899,2.301,1028,1.696,1041,2.586,1160,2.084,1165,2.301,1184,2.301,1242,4.228,1245,2.586,1255,4.67,1295,4.321,1302,4.67,1361,2.186,1441,1.334,1516,4.907,1669,3.309,1724,3.309,1727,3.309,1764,3.309,1804,2.77,1863,2.586,1943,3,1980,3,2001,3,2077,2.77,2136,3.309,2147,3.309,2208,6.2,2215,3.309,2221,3.309,2337,3.309,2466,3.309,2503,3.649,2504,4.228,2518,4.234,2523,3.309,2524,4.67,2528,3.309,2535,5.412,2536,3.309,2542,3,2544,5.412,2547,3.309,2548,4.67,2549,4.67,2556,3.309,2557,4.67,2559,6.434,2561,6.96,2562,3,2575,3.309,2664,4.67,2666,3.309,2673,3.309,2726,3.309,2728,4.67,2729,6.712,2730,3.778,2731,3.778,2732,5.332,2733,3.778,2734,5.332,2735,3.778,2736,5.332,2737,3.778,2738,3.778,2739,3.778,2740,3.778,2741,3.778,2742,3.778,2743,5.332,2744,5.332,2745,3.778,2746,3.778,2747,3.778,2748,3.778,2749,3.778,2750,3.778,2751,3.778,2752,3.778,2753,3.778,2754,8.035,2755,6.712,2756,7.346,2757,5.332,2758,3.778,2759,3.778,2760,3.778,2761,3.778,2762,5.332,2763,5.332,2764,3.778,2765,6.179,2766,3.778,2767,3.778,2768,3.778,2769,3.778,2770,3.778,2771,3.778,2772,3.778,2773,3.778,2774,3.778,2775,3.778,2776,3.778,2777,5.332,2778,3.778,2779,5.332,2780,3.778,2781,3.778,2782,3.778,2783,3.778,2784,5.332,2785,3.778,2786,3.778,2787,3.309,2788,3.778,2789,3.778,2790,3.778,2791,3.778,2792,3.778,2793,3.309,2794,3.309,2795,3.309,2796,3.778,2797,3.778,2798,3.778,2799,3.778,2800,3.778,2801,3.778,2802,3.778,2803,3.778,2804,3.778,2805,3.778,2806,3.778,2807,3.778,2808,3.778,2809,3.778,2810,3.778,2811,3.778,2812,3.778,2813,3.778,2814,3.778,2815,3.778,2816,3.778,2817,5.332,2818,5.332,2819,5.332,2820,3.778,2821,3.778,2822,3.778,2823,3.778,2824,3.778,2825,3.778,2826,3.778,2827,3.778,2828,3.778,2829,3.778,2830,3.778,2831,6.179,2832,3.778,2833,3.778,2834,3.778,2835,5.332,2836,5.332,2837,3.778,2838,3.778,2839,3.778,2840,3.778,2841,3.778,2842,3.778,2843,3.778,2844,3.778,2845,6.179,2846,5.332,2847,6.179,2848,3.778,2849,3.778,2850,3.778,2851,3.778,2852,6.179,2853,3.778,2854,3.778,2855,3.778,2856,3.778,2857,3.778,2858,3.778,2859,3.778,2860,3.778,2861,3.778,2862,5.332,2863,3.778,2864,3.778,2865,3.778,2866,3.778,2867,3.778,2868,3.778,2869,3.778,2870,4.67,2871,4.234,2872,5.332,2873,3.778,2874,3.778,2875,3.778,2876,3.778,2877,3.778,2878,3.778,2879,2.77,2880,3.309,2881,3,2882,3,2883,3.778,2884,3.778]],["title/license.html",[2503,2.451,2504,2.451,2879,2.626]],["body/license.html",[29,0.01,58,3.005,87,0.01,88,0.01,106,2.573,158,4.36,197,3.136,415,4.724,822,3.96,904,2.573,1162,4.36,1287,5.21,1441,2.536,1488,4.724,1523,3.441,1641,5.21,1880,6.755,2015,5.21,2311,4.724,2507,5.21,2787,5.21,2871,4.724,2879,4.36,2881,4.724,2882,4.724,2885,7.713,2886,7.18,2887,5.948,2888,5.948,2889,5.948,2890,5.948,2891,5.948,2892,5.948,2893,7.18,2894,8.559,2895,5.948,2896,5.948,2897,5.948,2898,5.948,2899,5.948,2900,5.948,2901,5.948,2902,5.948,2903,5.948,2904,5.948,2905,5.948,2906,7.18,2907,5.948,2908,5.948,2909,5.948,2910,5.948,2911,5.948,2912,7.18,2913,7.18,2914,5.948,2915,5.948,2916,5.948,2917,5.948,2918,5.948,2919,5.948,2920,5.948,2921,5.948,2922,5.948,2923,5.948,2924,5.948,2925,5.948,2926,5.948,2927,5.948,2928,5.948,2929,5.948,2930,5.948,2931,5.948,2932,5.948,2933,5.948,2934,5.948,2935,5.948,2936,5.948]],["title/modules.html",[91,2.424]],["body/modules.html",[29,0.01,87,0.01,88,0.01,90,4.34,91,2.647,100,4.34,101,4.34,102,4.34,103,4.34,255,4.082,275,3.862,540,5.289,1587,4.34,1622,4.34,1623,4.34,2937,8.684,2938,8.684,2939,8.684]],["title/overview.html",[2940,5.086]],["body/overview.html",[2,1.02,29,0.012,87,0.009,88,0.009,89,0.903,90,5.792,91,2.136,92,2.214,93,2.585,94,2.585,95,2.297,96,2.386,97,2.585,98,4.482,99,4.482,100,5.493,101,5.371,102,5.755,103,5.371,104,3.303,105,2.585,106,2.214,144,2.136,156,4.5,255,5.167,273,4.482,274,4.482,275,5.121,390,2.481,735,5.981,783,2.063,805,4.482,806,4.482,807,4.482,987,4.639,1017,4.482,1018,4.482,1034,5.252,1035,4.625,1570,5.252,1573,4.721,1587,5.371,1588,4.482,1589,4.482,1590,4.482,1618,4.482,1619,4.482,1620,4.482,1621,4.482,1622,5.493,1623,5.493,1660,5.252,1661,4.482,1662,4.482,1663,4.482,1712,5.252,1718,4.482,1719,4.482,1720,4.482,1872,4.482,1873,4.482,1874,4.482,1896,4.639,1903,4.482,1904,4.482,1940,2.386,1965,3.751,2940,4.482,2941,6.539,2942,5.117]],["title/properties.html",[18,0.851,2643,3.137]],["body/properties.html",[8,0.489,18,1.078,29,0.011,87,0.01,88,0.01,193,4.188,344,7.015,423,2.716,2515,5.698,2534,5.698,2542,6.013,2728,5.698,2793,6.632,2794,7.015,2795,5.698,2870,5.698,2871,5.166,2879,4.769,2880,5.698,2881,5.166,2882,5.166,2943,6.505,2944,6.505,2945,6.505,2946,6.505]],["title/miscellaneous/typealiases.html",[2682,2.306,2947,5.133]],["body/miscellaneous/typealiases.html",[5,0.138,17,0.44,18,0.97,29,0.01,31,0.623,32,1.033,44,2.793,50,3.086,87,0.009,88,0.009,157,2.729,280,3.076,293,4.577,295,5.647,297,4.33,299,5.647,410,4.648,411,2.002,549,2.968,712,4.648,817,3.086,1038,4.866,1051,6.228,1303,4.609,1346,3.086,1611,4.577,1642,4.005,1826,5.255,2404,4.648,2411,4.648,2445,5.127,2447,5.127,2469,7.15,2496,5.127,2682,3.768,2686,5.127,2687,7.424,2689,5.127,2692,5.127,2706,5.127,2948,5.853,2949,5.853,2950,5.853,2951,7.11,2952,5.853,2953,7.11,2954,5.853,2955,5.853,2956,5.853,2957,5.853,2958,5.853,2959,5.853,2960,5.853,2961,5.853,2962,5.853,2963,5.853,2964,5.853,2965,5.853,2966,5.853,2967,5.853]]],"invertedIndex":[["",{"_index":29,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UpdateDto.html":{},"classes/UpdateDto-1.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"changelog.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":386,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"controllers/CountriesController.html":{},"classes/CreateDto.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"injectables/FilesS3PresignedService.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"injectables/SortBy.html":{},"classes/UtilsService.html":{},"coverage.html":{}}}],["0.13.0",{"_index":2667,"title":{},"body":{"dependencies.html":{}}}],["0.14.1",{"_index":2659,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":2680,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":2658,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":2566,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":2600,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":2614,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":2603,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":2574,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":2604,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":2601,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":2602,"title":{},"body":{"coverage.html":{}}}],["01",{"_index":2509,"title":{},"body":{"changelog.html":{}}}],["06",{"_index":2516,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":2508,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":780,"title":{"classes/EnvironmentVariablesValidator-1.html":{},"classes/FileResponseDto-1.html":{},"classes/Query-1.html":{},"classes/UpdateDto-1.html":{}},"body":{"controllers/CountriesController.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvironmentVariablesValidator.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/QueryCountryDto.html":{},"interfaces/QueryOptions.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["1.0.0",{"_index":2515,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["1.0.1",{"_index":2506,"title":{},"body":{"changelog.html":{}}}],["1.0.2",{"_index":2648,"title":{},"body":{"dependencies.html":{}}}],["1.0.23",{"_index":2649,"title":{},"body":{"dependencies.html":{}}}],["1.4.5",{"_index":2668,"title":{},"body":{"dependencies.html":{}}}],["1.7.2",{"_index":2657,"title":{},"body":{"dependencies.html":{}}}],["1.7.4",{"_index":2661,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":2587,"title":{},"body":{"coverage.html":{}}}],["1/10",{"_index":2582,"title":{},"body":{"coverage.html":{}}}],["1/12",{"_index":2584,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":2622,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":2578,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":2576,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":783,"title":{},"body":{"controllers/CountriesController.html":{},"classes/CreateDto.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"coverage.html":{},"overview.html":{}}}],["10.2.3",{"_index":2654,"title":{},"body":{"dependencies.html":{}}}],["10.3.9",{"_index":2651,"title":{},"body":{"dependencies.html":{}}}],["10.8.3",{"_index":2674,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":1332,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"coverage.html":{}}}],["10})@isoptional()@isnumberstringornumber()@tonumber()@min(10)@max(500",{"_index":2047,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["11.2.2",{"_index":2678,"title":{},"body":{"dependencies.html":{}}}],["11/11",{"_index":2623,"title":{},"body":{"coverage.html":{}}}],["11/12",{"_index":2613,"title":{},"body":{"coverage.html":{}}}],["12",{"_index":2941,"title":{},"body":{"overview.html":{}}}],["120",{"_index":260,"title":{},"body":{"controllers/AppController.html":{}}}],["123",{"_index":223,"title":{},"body":{"controllers/AppController.html":{}}}],["123456",{"_index":1733,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["123e4567",{"_index":869,"title":{},"body":{"classes/Country.html":{},"classes/CreateCountryDto.html":{}}}],["127",{"_index":1211,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"interfaces/QueryOptions.html":{}}}],["12d3",{"_index":871,"title":{},"body":{"classes/Country.html":{},"classes/CreateCountryDto.html":{}}}],["138723",{"_index":1534,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["138723})@isnumber",{"_index":1532,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["14/14",{"_index":2583,"title":{},"body":{"coverage.html":{}}}],["15/15",{"_index":2612,"title":{},"body":{"coverage.html":{}}}],["1b3fd064",{"_index":249,"title":{},"body":{"controllers/AppController.html":{}}}],["1})@isoptional()@isnumberstringornumber()@tonumber()@min(1",{"_index":2049,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["2",{"_index":451,"title":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileResponseDto-2.html":{},"classes/Query-2.html":{}},"body":{"injectables/CommaSeparated.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/Currency.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/SortBy.html":{},"contributing.html":{}}}],["2/2",{"_index":2595,"title":{},"body":{"coverage.html":{}}}],["2/3",{"_index":2620,"title":{},"body":{"coverage.html":{}}}],["2/5",{"_index":2608,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":2575,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["2023",{"_index":230,"title":{},"body":{"controllers/AppController.html":{}}}],["2024",{"_index":2507,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["2027",{"_index":232,"title":{},"body":{"controllers/AppController.html":{}}}],["234",{"_index":234,"title":{},"body":{"controllers/AppController.html":{}}}],["25",{"_index":2517,"title":{},"body":{"changelog.html":{}}}],["270",{"_index":888,"title":{},"body":{"classes/Country.html":{}}}],["2bed",{"_index":250,"title":{},"body":{"controllers/AppController.html":{}}}],["3",{"_index":882,"title":{"classes/EnvironmentVariablesValidator-3.html":{},"classes/Query-3.html":{}},"body":{"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"contributing.html":{}}}],["3.0.1",{"_index":2670,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":2650,"title":{},"body":{"dependencies.html":{}}}],["3.2.2",{"_index":2652,"title":{},"body":{"dependencies.html":{}}}],["3.609.0",{"_index":2644,"title":{},"body":{"dependencies.html":{}}}],["3.613.0",{"_index":2645,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":2573,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":2581,"title":{},"body":{"coverage.html":{}}}],["3/5",{"_index":2621,"title":{},"body":{"coverage.html":{}}}],["3000",{"_index":1263,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["3166",{"_index":878,"title":{},"body":{"classes/Country.html":{},"classes/CreateCountryDto.html":{}}}],["33",{"_index":2577,"title":{},"body":{"coverage.html":{}}}],["330",{"_index":897,"title":{},"body":{"classes/Country.html":{}}}],["3600",{"_index":1520,"title":{},"body":{"classes/FileType.html":{},"injectables/FilesS3PresignedService.html":{}}}],["383e6490f5d5",{"_index":924,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["39",{"_index":2942,"title":{},"body":{"overview.html":{}}}],["3a25",{"_index":1455,"title":{},"body":{"classes/FileResponseDto.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{}}}],["4",{"_index":1976,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"contributing.html":{}}}],["4.1.0",{"_index":2672,"title":{},"body":{"dependencies.html":{}}}],["4.19.2",{"_index":2662,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":2596,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":2607,"title":{},"body":{"coverage.html":{}}}],["424a",{"_index":922,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["426614174000",{"_index":873,"title":{},"body":{"classes/Country.html":{},"classes/CreateCountryDto.html":{}}}],["4adb",{"_index":1456,"title":{},"body":{"classes/FileResponseDto.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{}}}],["4bb4",{"_index":251,"title":{},"body":{"controllers/AppController.html":{}}}],["5",{"_index":1977,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"contributing.html":{}}}],["5.17.0",{"_index":2655,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":2597,"title":{},"body":{"coverage.html":{}}}],["5/8",{"_index":2611,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":784,"title":{},"body":{"controllers/CountriesController.html":{},"coverage.html":{}}}],["500",{"_index":1813,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/SortByDto.html":{}}}],["5242880",{"_index":677,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["5432",{"_index":1324,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["544",{"_index":235,"title":{},"body":{"controllers/AppController.html":{}}}],["5:30",{"_index":885,"title":{},"body":{"classes/Country.html":{}}}],["5mb",{"_index":678,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["6",{"_index":972,"title":{},"body":{"classes/CreateDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"contributing.html":{}}}],["6/6",{"_index":2635,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":1972,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"coverage.html":{}}}],["62",{"_index":2610,"title":{},"body":{"coverage.html":{}}}],["65535",{"_index":1313,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["66",{"_index":2619,"title":{},"body":{"coverage.html":{}}}],["6b64",{"_index":921,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["7",{"_index":1965,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"overview.html":{}}}],["7.1.0",{"_index":2665,"title":{},"body":{"dependencies.html":{}}}],["7.3.1",{"_index":2653,"title":{},"body":{"dependencies.html":{}}}],["7.4.0",{"_index":2663,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":2681,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":2579,"title":{},"body":{"coverage.html":{}}}],["7/8",{"_index":2616,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":2580,"title":{},"body":{"coverage.html":{}}}],["76",{"_index":1974,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{}}}],["77",{"_index":1963,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{}}}],["8",{"_index":1968,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"coverage.html":{}}}],["8.12.0",{"_index":2676,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":2617,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":964,"title":{},"body":{"classes/CreateDto.html":{}}}],["80d3aa38",{"_index":920,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["87",{"_index":2615,"title":{},"body":{"coverage.html":{}}}],["9/9",{"_index":2618,"title":{},"body":{"coverage.html":{}}}],["91",{"_index":865,"title":{},"body":{"classes/Country.html":{},"classes/CreateCountryDto.html":{},"coverage.html":{}}}],["9]+(,[0",{"_index":428,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["9]+)*$/.test(propertyvalue",{"_index":429,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["_",{"_index":335,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/DynamicQueryBuilder.html":{},"classes/HttpErrorFilter.html":{},"injectables/PrismaService.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{}}}],["_.clone(errorresponse",{"_index":1930,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["_.clone(r",{"_index":380,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["_.clone(request.body",{"_index":374,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{}}}],["_.clone(request.header",{"_index":376,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{}}}],["_.get(where",{"_index":2270,"title":{},"body":{"classes/Query-2.html":{},"classes/Query-3.html":{}}}],["_.isarray(r.message",{"_index":346,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["_.isempty(rows",{"_index":2206,"title":{},"body":{"injectables/PrismaService.html":{}}}],["_.keys(conds",{"_index":1175,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"interfaces/QueryOptions.html":{}}}],["_.mapkeys(where",{"_index":2293,"title":{},"body":{"classes/Query-2.html":{},"classes/Query-3.html":{}}}],["_.pick(values",{"_index":1173,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["_.pick(where",{"_index":2272,"title":{},"body":{"classes/Query-2.html":{},"classes/Query-3.html":{}}}],["_.unset(where",{"_index":2290,"title":{},"body":{"classes/Query-2.html":{},"classes/Query-3.html":{}}}],["_.values(conds",{"_index":1177,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"interfaces/QueryOptions.html":{}}}],["_validationfilter",{"_index":319,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["_validationfilter(validationerrors",{"_index":322,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["a456",{"_index":872,"title":{},"body":{"classes/Country.html":{},"classes/CreateCountryDto.html":{}}}],["a5f3686b1b53",{"_index":253,"title":{},"body":{"controllers/AppController.html":{}}}],["a95b",{"_index":923,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["a9c6",{"_index":1457,"title":{},"body":{"classes/FileResponseDto.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{}}}],["abbr",{"_index":843,"title":{},"body":{"classes/Country.html":{}}}],["abbreviation",{"_index":854,"title":{},"body":{"classes/Country.html":{}}}],["abc",{"_index":1849,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["abc123",{"_index":1469,"title":{},"body":{"classes/FileResponseDto-1.html":{}}}],["above",{"_index":2911,"title":{},"body":{"license.html":{}}}],["abstract",{"_index":2066,"title":{},"body":{"classes/PaginationResponseDto.html":{}}}],["access",{"_index":1349,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"modules/FilesS3Module.html":{},"injectables/HomeService.html":{}}}],["accessing",{"_index":1500,"title":{},"body":{"classes/FileType.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["accesskeyid",{"_index":668,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"interfaces/IFileConfig.html":{}}}],["accessors",{"_index":465,"title":{},"body":{"classes/ConfigService.html":{}}}],["acl",{"_index":1726,"title":{},"body":{"modules/FilesS3PresignedModule.html":{}}}],["action",{"_index":2933,"title":{},"body":{"license.html":{}}}],["actions",{"_index":2175,"title":{},"body":{"injectables/PrismaService.html":{}}}],["add",{"_index":1184,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{},"contributing.html":{},"index.html":{}}}],["addhttpqueryerror",{"_index":2233,"title":{},"body":{"classes/Query.html":{}}}],["addhttpqueryerror(module",{"_index":2234,"title":{},"body":{"classes/Query.html":{}}}],["adding",{"_index":1189,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["additional",{"_index":1917,"title":{},"body":{"classes/HttpErrorFilter.html":{},"classes/UtilsService.html":{}}}],["addqueryerror",{"_index":2241,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["addqueryerror(module",{"_index":2251,"title":{},"body":{"classes/Query-1.html":{}}}],["address",{"_index":222,"title":{},"body":{"controllers/AppController.html":{}}}],["adhere",{"_index":2553,"title":{},"body":{"contributing.html":{}}}],["adheres",{"_index":905,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{}}}],["admin",{"_index":568,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["against",{"_index":2714,"title":{},"body":{"miscellaneous/functions.html":{}}}],["age",{"_index":1825,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["aggregate",{"_index":119,"title":{},"body":{"modules/ApiModule.html":{}}}],["aggregated",{"_index":2956,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["aggregates",{"_index":108,"title":{},"body":{"modules/ApiModule.html":{}}}],["algorithm",{"_index":616,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IJWTConfig.html":{}}}],["alias",{"_index":2018,"title":{},"body":{"interfaces/IPaginationFieldConfig.html":{},"classes/UtilsService.html":{}}}],["aliases",{"_index":2496,"title":{},"body":{"classes/UtilsService.html":{},"miscellaneous/typealiases.html":{}}}],["alias}.${filter.field",{"_index":2487,"title":{},"body":{"classes/UtilsService.html":{}}}],["alias}.${sortitem.field",{"_index":2497,"title":{},"body":{"classes/UtilsService.html":{}}}],["allconfigtype",{"_index":1611,"title":{},"body":{"injectables/FilesLocalService.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/HomeService.html":{},"injectables/PrismaService.html":{},"miscellaneous/typealiases.html":{}}}],["allexceptionsfilter",{"_index":1,"title":{"classes/AllExceptionsFilter.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["allow",{"_index":1507,"title":{},"body":{"classes/FileType.html":{},"modules/HelperModule.html":{}}}],["allowed",{"_index":1365,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"injectables/FilesS3PresignedService.html":{}}}],["allowedkeys",{"_index":2269,"title":{},"body":{"classes/Query-2.html":{},"classes/Query-3.html":{}}}],["allowedkeys.join",{"_index":2271,"title":{},"body":{"classes/Query-2.html":{},"classes/Query-3.html":{}}}],["allowing",{"_index":2446,"title":{},"body":{"classes/UpdateDto-1.html":{}}}],["allows",{"_index":712,"title":{},"body":{"controllers/CountriesController.html":{},"modules/FilesModule.html":{},"miscellaneous/typealiases.html":{}}}],["along",{"_index":1020,"title":{},"body":{"modules/CurrenciesModule.html":{}}}],["alpha",{"_index":879,"title":{},"body":{"classes/Country.html":{},"classes/CreateCountryDto.html":{}}}],["already",{"_index":1062,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["amazing",{"_index":2876,"title":{},"body":{"index.html":{}}}],["amazon",{"_index":1693,"title":{},"body":{"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["and/or",{"_index":2904,"title":{},"body":{"license.html":{}}}],["annotated",{"_index":838,"title":{},"body":{"classes/Country.html":{}}}],["another",{"_index":2721,"title":{},"body":{"miscellaneous/functions.html":{}}}],["any).message",{"_index":82,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["api",{"_index":120,"title":{},"body":{"modules/ApiModule.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/Country.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"controllers/FilesS3Controller.html":{},"injectables/HomeService.html":{},"interfaces/IAppConfig.html":{},"index.html":{}}}],["api/v1/uploads/example",{"_index":1459,"title":{},"body":{"classes/FileResponseDto.html":{},"injectables/FilesLocalService.html":{}}}],["api_key",{"_index":651,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/ISMSConfig.html":{}}}],["api_prefix",{"_index":520,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{}}}],["apibody",{"_index":1557,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["apiconsumes",{"_index":1558,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["apiconsumes('multipart/form",{"_index":1578,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["apicreatedresponse",{"_index":999,"title":{},"body":{"controllers/CurrenciesController.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{}}}],["apicreatedresponse({type",{"_index":1548,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{}}}],["apiexcludeendpoint",{"_index":1559,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["apiextramodels",{"_index":1842,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["apiextramodels(filterdto",{"_index":1861,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["apiextramodels(filterquerydto",{"_index":1845,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["apifile",{"_index":1562,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"coverage.html":{}}}],["apifilterquery",{"_index":792,"title":{},"body":{"controllers/CountriesController.html":{}}}],["apifilterquery('filters",{"_index":802,"title":{},"body":{"controllers/CountriesController.html":{}}}],["apifilterquery(fieldname",{"_index":1859,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["apimodule",{"_index":90,"title":{"modules/ApiModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["apimultifile",{"_index":2593,"title":{},"body":{"coverage.html":{}}}],["apinestedquery",{"_index":796,"title":{},"body":{"controllers/CountriesController.html":{}}}],["apiokresponse",{"_index":729,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{}}}],["apiparam",{"_index":730,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{}}}],["apiprefix",{"_index":584,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"injectables/HomeService.html":{},"interfaces/IAppConfig.html":{}}}],["apiproperty",{"_index":935,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{}}}],["apiproperty()@isstring",{"_index":2434,"title":{},"body":{"classes/SortByDto.html":{},"classes/SortCountryDto.html":{}}}],["apiproperty()@type(undefined)@isstring",{"_index":2437,"title":{},"body":{"classes/SortCountryDto.html":{}}}],["apiproperty({example",{"_index":1528,"title":{},"body":{"classes/FileUploadDto.html":{},"classes/FilterQueryDto.html":{},"classes/SortByDto.html":{}}}],["apiproperty({type",{"_index":1119,"title":{},"body":{"classes/Currency.html":{},"classes/FileType.html":{}}}],["apipropertyoptional",{"_index":1771,"title":{},"body":{"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{}}}],["apipropertyoptional()@transform",{"_index":2374,"title":{},"body":{"classes/QueryCountryDto.html":{}}}],["apipropertyoptional({description",{"_index":2046,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["apipropertyoptional({name",{"_index":2041,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["apipropertyoptional({type",{"_index":2032,"title":{},"body":{"classes/PaginationMetaDto.html":{},"classes/QueryCountryDto.html":{}}}],["apiquery",{"_index":791,"title":{},"body":{"controllers/CountriesController.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["apiresponseproperty",{"_index":839,"title":{},"body":{"classes/Country.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{}}}],["apiresponseproperty({type",{"_index":851,"title":{},"body":{"classes/Country.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{}}}],["apitags",{"_index":183,"title":{},"body":{"controllers/AppController.html":{},"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"controllers/HomeController.html":{}}}],["apitags('countries",{"_index":740,"title":{},"body":{"controllers/CountriesController.html":{}}}],["apitags('currencies",{"_index":1002,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["apitags('files",{"_index":1572,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{}}}],["apitags('health",{"_index":194,"title":{},"body":{"controllers/AppController.html":{}}}],["apitags('home",{"_index":1900,"title":{},"body":{"controllers/HomeController.html":{}}}],["app",{"_index":1250,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"injectables/HomeService.html":{},"miscellaneous/functions.html":{}}}],["app.controller",{"_index":302,"title":{},"body":{"modules/AppModule.html":{}}}],["app/common/helper/services/util.service",{"_index":2267,"title":{},"body":{"classes/Query-2.html":{}}}],["app/utils/transformers/upper",{"_index":942,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["app_description",{"_index":1223,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["app_filter",{"_index":124,"title":{},"body":{"modules/ApiModule.html":{},"classes/HttpErrorFilter.html":{}}}],["app_name",{"_index":1224,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["app_port",{"_index":516,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{}}}],["app_prefix",{"_index":1225,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["app_version",{"_index":1226,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["appconfig",{"_index":293,"title":{},"body":{"modules/AppModule.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/FileType.html":{},"miscellaneous/typealiases.html":{}}}],["appconfig).backenddomain",{"_index":1509,"title":{},"body":{"classes/FileType.html":{}}}],["appcontroller",{"_index":143,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appinfo",{"_index":1897,"title":{},"body":{"controllers/HomeController.html":{},"injectables/HomeService.html":{}}}],["applicable",{"_index":2790,"title":{},"body":{"index.html":{}}}],["application",{"_index":44,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/Country.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"modules/FilesS3Module.html":{},"injectables/FilesService.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"injectables/ResolvePromisesInterceptor.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["application's",{"_index":152,"title":{},"body":{"controllers/AppController.html":{},"injectables/HomeService.html":{}}}],["applications",{"_index":2742,"title":{},"body":{"index.html":{}}}],["applies",{"_index":1656,"title":{},"body":{"controllers/FilesS3Controller.html":{}}}],["apply",{"_index":1804,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"index.html":{}}}],["applydecorators",{"_index":1850,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["appmodule",{"_index":255,"title":{"modules/AppModule.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/HttpErrorFilter.html":{},"modules.html":{},"overview.html":{}}}],["appprefix",{"_index":1253,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"injectables/HomeService.html":{}}}],["appropriate",{"_index":989,"title":{},"body":{"controllers/CurrenciesController.html":{},"modules/FilesModule.html":{}}}],["area",{"_index":1210,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["args",{"_index":405,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["args.property",{"_index":431,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["arguments",{"_index":406,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"injectables/SortBy.html":{}}}],["argumentshost",{"_index":39,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["arising",{"_index":2935,"title":{},"body":{"license.html":{}}}],["array",{"_index":330,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"controllers/CountriesController.html":{},"modules/FilesModule.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PrismaService.html":{},"classes/Query-3.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{}}}],["array.from(array(endpage",{"_index":2002,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["array.isarray(value",{"_index":2321,"title":{},"body":{"classes/Query-2.html":{},"classes/UtilsService.html":{}}}],["asas",{"_index":1609,"title":{},"body":{"injectables/FilesLocalService.html":{}}}],["asc",{"_index":437,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{}}}],["asc'})@isstring()@matches(/^(asc|desc|asc|desc",{"_index":2432,"title":{},"body":{"classes/SortByDto.html":{}}}],["asc1",{"_index":1848,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["ascending",{"_index":1827,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["asc|desc|asc|desc|asc|desc",{"_index":458,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["asia",{"_index":857,"title":{},"body":{"classes/Country.html":{},"classes/CreateCountryDto.html":{}}}],["asia/mumbai",{"_index":895,"title":{},"body":{"classes/Country.html":{}}}],["associated",{"_index":1488,"title":{},"body":{"classes/FileType.html":{},"classes/Query-1.html":{},"license.html":{}}}],["async",{"_index":159,"title":{},"body":{"controllers/AppController.html":{},"injectables/CommaSeparated.html":{},"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query-2.html":{},"injectables/SortBy.html":{}}}],["asynchronously",{"_index":1725,"title":{},"body":{"modules/FilesS3PresignedModule.html":{}}}],["attributes",{"_index":826,"title":{},"body":{"classes/Country.html":{}}}],["audience",{"_index":620,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IJWTConfig.html":{}}}],["authentication",{"_index":2744,"title":{},"body":{"index.html":{}}}],["author",{"_index":2880,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authorization",{"_index":2770,"title":{},"body":{"index.html":{}}}],["authors",{"_index":2927,"title":{},"body":{"license.html":{}}}],["authsource",{"_index":567,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["automatic",{"_index":1854,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["available",{"_index":1599,"title":{},"body":{"modules/FilesLocalModule.html":{},"modules/HelperModule.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"miscellaneous/enumerations.html":{}}}],["await",{"_index":748,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{}}}],["awesome",{"_index":2752,"title":{},"body":{"index.html":{}}}],["aws",{"_index":543,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"dependencies.html":{}}}],["aws_access_key_id",{"_index":527,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["aws_default_s3_bucket",{"_index":529,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["aws_s3_access_key_id",{"_index":588,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IAwsConfig.html":{}}}],["aws_s3_bucket_name",{"_index":592,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IAwsConfig.html":{}}}],["aws_s3_companion_secret",{"_index":602,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IAwsConfig.html":{}}}],["aws_s3_default_region",{"_index":594,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IAwsConfig.html":{}}}],["aws_s3_endpoint",{"_index":598,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IAwsConfig.html":{}}}],["aws_s3_region",{"_index":530,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["aws_s3_secret_access_key",{"_index":590,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IAwsConfig.html":{}}}],["aws_s3_server_host",{"_index":600,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IAwsConfig.html":{}}}],["aws_s3_temp_directory",{"_index":596,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IAwsConfig.html":{}}}],["aws_secret_access_key",{"_index":528,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["awsdefaults3bucket",{"_index":672,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"interfaces/IFileConfig.html":{}}}],["awss3config",{"_index":587,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["awss3region",{"_index":674,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"interfaces/IFileConfig.html":{}}}],["axios",{"_index":2656,"title":{},"body":{"dependencies.html":{}}}],["b",{"_index":2546,"title":{},"body":{"contributing.html":{}}}],["b3af",{"_index":252,"title":{},"body":{"controllers/AppController.html":{}}}],["backend",{"_index":1496,"title":{},"body":{"classes/FileType.html":{},"interfaces/IAppConfig.html":{}}}],["backend_domain",{"_index":519,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{}}}],["backenddomain",{"_index":581,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"interfaces/IAppConfig.html":{}}}],["backers",{"_index":2877,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":209,"title":{},"body":{"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/FileNotImageException.html":{}}}],["badrequestexceptionfilter",{"_index":314,"title":{"classes/BadRequestExceptionFilter.html":{}},"body":{"classes/BadRequestExceptionFilter.html":{},"coverage.html":{}}}],["baeumer",{"_index":2803,"title":{},"body":{"index.html":{}}}],["bar",{"_index":241,"title":{},"body":{"controllers/AppController.html":{}}}],["base",{"_index":1648,"title":{},"body":{"controllers/FilesS3Controller.html":{},"classes/Query-3.html":{},"classes/UtilsService.html":{}}}],["base64",{"_index":1708,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["based",{"_index":1489,"title":{},"body":{"classes/FileType.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/PaginationMetaDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{}}}],["baseexceptionfilter",{"_index":2129,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["basefields",{"_index":1090,"title":{},"body":{"injectables/CurrenciesService.html":{},"classes/UtilsService.html":{}}}],["basefields.join",{"_index":1106,"title":{},"body":{"injectables/CurrenciesService.html":{},"classes/UtilsService.html":{}}}],["basequery",{"_index":2114,"title":{},"body":{"injectables/PaginationService.html":{}}}],["bash",{"_index":2836,"title":{},"body":{"index.html":{}}}],["baz",{"_index":244,"title":{},"body":{"controllers/AppController.html":{}}}],["be123892",{"_index":228,"title":{},"body":{"controllers/AppController.html":{}}}],["before",{"_index":2408,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{},"contributing.html":{}}}],["between",{"_index":1312,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"modules/FilesModule.html":{}}}],["bignumberstrings",{"_index":573,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["binary",{"_index":1579,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["blank",{"_index":2209,"title":{},"body":{"injectables/PrismaService.html":{}}}],["body",{"_index":373,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"classes/HttpErrorFilter.html":{},"index.html":{}}}],["boilerplate",{"_index":2729,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":414,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/PaginationResponseDto.html":{},"injectables/SortBy.html":{}}}],["boolean(this.get(key",{"_index":551,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["bootstrap",{"_index":95,"title":{},"body":{"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/CountriesModule.html":{},"modules/CurrenciesModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["boundary",{"_index":1858,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["box",{"_index":2746,"title":{},"body":{"index.html":{}}}],["branch",{"_index":2543,"title":{},"body":{"contributing.html":{}}}],["break",{"_index":2140,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["breaking",{"_index":2864,"title":{},"body":{"index.html":{}}}],["browse",{"_index":2939,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2937,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":1353,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["bucket.s3.amazonaws.com/unique",{"_index":1477,"title":{},"body":{"classes/FileResponseDto-1.html":{}}}],["buffer",{"_index":1949,"title":{},"body":{"interfaces/IFileConfig.html":{}}}],["bug",{"_index":2510,"title":{},"body":{"changelog.html":{},"contributing.html":{}}}],["bugs",{"_index":2534,"title":{},"body":{"contributing.html":{},"properties.html":{}}}],["build",{"_index":1135,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["builddeletequery",{"_index":1136,"title":{},"body":{"classes/DynamicQueryBuilder.html":{}}}],["builddeletequery(options",{"_index":1140,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["builddynamicquery",{"_index":2461,"title":{},"body":{"classes/UtilsService.html":{}}}],["builddynamicquery(paginationquery",{"_index":2463,"title":{},"body":{"classes/UtilsService.html":{}}}],["builder",{"_index":2218,"title":{},"body":{"classes/Query.html":{}}}],["building",{"_index":1041,"title":{},"body":{"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{},"index.html":{}}}],["buildinsertquery",{"_index":1137,"title":{},"body":{"classes/DynamicQueryBuilder.html":{}}}],["buildinsertquery(options",{"_index":1146,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["buildrun",{"_index":2841,"title":{},"body":{"index.html":{}}}],["builds",{"_index":1143,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{}}}],["buildselectquery",{"_index":1138,"title":{},"body":{"classes/DynamicQueryBuilder.html":{}}}],["buildselectquery(options",{"_index":1149,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["buildtests",{"_index":2826,"title":{},"body":{"index.html":{}}}],["buildupdatequery",{"_index":1139,"title":{},"body":{"classes/DynamicQueryBuilder.html":{}}}],["buildupdatequery(options",{"_index":1151,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["built",{"_index":2466,"title":{},"body":{"classes/UtilsService.html":{},"index.html":{}}}],["bundles",{"_index":809,"title":{},"body":{"modules/CountriesModule.html":{},"modules/CurrenciesModule.html":{}}}],["business",{"_index":1026,"title":{},"body":{"injectables/CurrenciesService.html":{},"modules/FilesLocalModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{}}}],["bytes",{"_index":1367,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileUploadDto.html":{}}}],["c",{"_index":2311,"title":{},"body":{"classes/Query-2.html":{},"classes/Query-3.html":{},"license.html":{}}}],["c.capital",{"_index":2303,"title":{},"body":{"classes/Query-2.html":{}}}],["c.code",{"_index":2345,"title":{},"body":{"classes/Query-3.html":{}}}],["c.continent",{"_index":2302,"title":{},"body":{"classes/Query-2.html":{}}}],["c.decimal_digits",{"_index":2349,"title":{},"body":{"classes/Query-3.html":{}}}],["c.dial_code",{"_index":2301,"title":{},"body":{"classes/Query-2.html":{}}}],["c.id_country='${id",{"_index":2317,"title":{},"body":{"classes/Query-2.html":{}}}],["c.id_currency",{"_index":2344,"title":{},"body":{"classes/Query-3.html":{}}}],["c.iso",{"_index":2297,"title":{},"body":{"classes/Query-2.html":{}}}],["c.iso3",{"_index":2299,"title":{},"body":{"classes/Query-2.html":{}}}],["c.name",{"_index":2296,"title":{},"body":{"classes/Query-2.html":{},"classes/Query-3.html":{}}}],["c.name_plural",{"_index":2346,"title":{},"body":{"classes/Query-3.html":{}}}],["c.nice_name",{"_index":2298,"title":{},"body":{"classes/Query-2.html":{}}}],["c.num_code",{"_index":2300,"title":{},"body":{"classes/Query-2.html":{}}}],["c.rounding",{"_index":2350,"title":{},"body":{"classes/Query-3.html":{}}}],["c.status",{"_index":2316,"title":{},"body":{"classes/Query-2.html":{},"classes/Query-3.html":{}}}],["c.symbol",{"_index":2347,"title":{},"body":{"classes/Query-3.html":{}}}],["c.symbol_native",{"_index":2348,"title":{},"body":{"classes/Query-3.html":{}}}],["ca",{"_index":1281,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["calculate",{"_index":1987,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["callback",{"_index":1684,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["called",{"_index":237,"title":{},"body":{"controllers/AppController.html":{},"injectables/PrismaService.html":{}}}],["callhandler",{"_index":2416,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["cantuploadfiletype",{"_index":1743,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["capabilities",{"_index":2075,"title":{},"body":{"injectables/PaginationService.html":{}}}],["capital",{"_index":833,"title":{},"body":{"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/Query-2.html":{}}}],["case",{"_index":2136,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"index.html":{}}}],["case.transformer",{"_index":943,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{}}}],["case.transformer.ts",{"_index":2637,"title":{},"body":{"coverage.html":{}}}],["cases",{"_index":2966,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["catch",{"_index":12,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/QueryFailedFilter.html":{}}}],["catch(badrequestexception",{"_index":340,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["catch(exception",{"_index":37,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["catch(httpexception",{"_index":1937,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catch(prisma.prismaclientknownrequesterror",{"_index":2131,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["catch(queryfailederror",{"_index":2390,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["catches",{"_index":41,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["cause",{"_index":2148,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["caused",{"_index":2239,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["cbac",{"_index":2772,"title":{},"body":{"index.html":{}}}],["cbcfa8b8",{"_index":1454,"title":{},"body":{"classes/FileResponseDto.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{}}}],["cd",{"_index":2796,"title":{},"body":{"index.html":{}}}],["cert",{"_index":1343,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["certificate",{"_index":1282,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["certificates",{"_index":1290,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["change",{"_index":2208,"title":{},"body":{"injectables/PrismaService.html":{},"index.html":{}}}],["changelog",{"_index":2505,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["changes",{"_index":2547,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["characters",{"_index":957,"title":{},"body":{"classes/CreateDto.html":{}}}],["charge",{"_index":2890,"title":{},"body":{"license.html":{}}}],["check",{"_index":148,"title":{},"body":{"controllers/AppController.html":{},"injectables/CurrenciesService.html":{},"injectables/PrismaService.html":{},"miscellaneous/functions.html":{}}}],["checking",{"_index":392,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{},"index.html":{}}}],["checkout",{"_index":2545,"title":{},"body":{"contributing.html":{}}}],["checks",{"_index":155,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/PrismaService.html":{},"miscellaneous/functions.html":{}}}],["choice",{"_index":1638,"title":{},"body":{"modules/FilesModule.html":{}}}],["choose",{"_index":2822,"title":{},"body":{"index.html":{}}}],["chore",{"_index":2857,"title":{},"body":{"index.html":{}}}],["city",{"_index":834,"title":{},"body":{"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["claim",{"_index":2930,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/ConfigService.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UpdateDto.html":{},"classes/UpdateDto-1.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UpdateDto.html":{},"classes/UpdateDto-1.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["classconstructor",{"_index":2725,"title":{},"body":{"miscellaneous/functions.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/ConfigService.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UpdateDto.html":{},"classes/UpdateDto-1.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"overview.html":{}}}],["classreference",{"_index":2063,"title":{},"body":{"classes/PaginationResponseDto.html":{},"miscellaneous/functions.html":{}}}],["clause",{"_index":2467,"title":{},"body":{"classes/UtilsService.html":{}}}],["clauses",{"_index":1163,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{}}}],["client",{"_index":713,"title":{},"body":{"controllers/CountriesController.html":{},"modules/FilesS3Module.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/ResolvePromisesInterceptor.html":{}}}],["clone",{"_index":2765,"title":{},"body":{"index.html":{}}}],["closed",{"_index":2866,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":1473,"title":{},"body":{"classes/FileResponseDto-1.html":{}}}],["cluster",{"_index":2850,"title":{},"body":{"index.html":{}}}],["cluster_apimodule",{"_index":98,"title":{},"body":{"modules/ApiModule.html":{},"overview.html":{}}}],["cluster_apimodule_imports",{"_index":99,"title":{},"body":{"modules/ApiModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":273,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":274,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_countriesmodule",{"_index":805,"title":{},"body":{"modules/CountriesModule.html":{},"overview.html":{}}}],["cluster_countriesmodule_exports",{"_index":806,"title":{},"body":{"modules/CountriesModule.html":{},"overview.html":{}}}],["cluster_countriesmodule_providers",{"_index":807,"title":{},"body":{"modules/CountriesModule.html":{},"overview.html":{}}}],["cluster_currenciesmodule",{"_index":1017,"title":{},"body":{"modules/CurrenciesModule.html":{},"overview.html":{}}}],["cluster_currenciesmodule_providers",{"_index":1018,"title":{},"body":{"modules/CurrenciesModule.html":{},"overview.html":{}}}],["cluster_fileslocalmodule",{"_index":1588,"title":{},"body":{"modules/FilesLocalModule.html":{},"overview.html":{}}}],["cluster_fileslocalmodule_exports",{"_index":1590,"title":{},"body":{"modules/FilesLocalModule.html":{},"overview.html":{}}}],["cluster_fileslocalmodule_providers",{"_index":1589,"title":{},"body":{"modules/FilesLocalModule.html":{},"overview.html":{}}}],["cluster_filesmodule",{"_index":1618,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_filesmodule_exports",{"_index":1621,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_filesmodule_imports",{"_index":1620,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_filesmodule_providers",{"_index":1619,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_filess3module",{"_index":1661,"title":{},"body":{"modules/FilesS3Module.html":{},"overview.html":{}}}],["cluster_filess3module_exports",{"_index":1662,"title":{},"body":{"modules/FilesS3Module.html":{},"overview.html":{}}}],["cluster_filess3module_providers",{"_index":1663,"title":{},"body":{"modules/FilesS3Module.html":{},"overview.html":{}}}],["cluster_filess3presignedmodule",{"_index":1718,"title":{},"body":{"modules/FilesS3PresignedModule.html":{},"overview.html":{}}}],["cluster_filess3presignedmodule_exports",{"_index":1719,"title":{},"body":{"modules/FilesS3PresignedModule.html":{},"overview.html":{}}}],["cluster_filess3presignedmodule_providers",{"_index":1720,"title":{},"body":{"modules/FilesS3PresignedModule.html":{},"overview.html":{}}}],["cluster_helpermodule",{"_index":1872,"title":{},"body":{"modules/HelperModule.html":{},"overview.html":{}}}],["cluster_helpermodule_exports",{"_index":1873,"title":{},"body":{"modules/HelperModule.html":{},"overview.html":{}}}],["cluster_helpermodule_providers",{"_index":1874,"title":{},"body":{"modules/HelperModule.html":{},"overview.html":{}}}],["cluster_homemodule",{"_index":1903,"title":{},"body":{"modules/HomeModule.html":{},"overview.html":{}}}],["cluster_homemodule_providers",{"_index":1904,"title":{},"body":{"modules/HomeModule.html":{},"overview.html":{}}}],["code",{"_index":357,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/FileNotImageException.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/Query-3.html":{},"contributing.html":{},"index.html":{}}}],["codeql",{"_index":2785,"title":{},"body":{"index.html":{}}}],["codes",{"_index":825,"title":{},"body":{"classes/Country.html":{},"controllers/CurrenciesController.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["column",{"_index":2142,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"classes/Query-3.html":{}}}],["column_name",{"_index":2144,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["columns",{"_index":1161,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["column’s",{"_index":2143,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["combines",{"_index":1852,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["comes",{"_index":2759,"title":{},"body":{"index.html":{}}}],["comma",{"_index":395,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["command",{"_index":1516,"title":{},"body":{"classes/FileType.html":{},"injectables/FilesS3PresignedService.html":{},"index.html":{}}}],["commaseparated",{"_index":389,"title":{"injectables/CommaSeparated.html":{}},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{},"coverage.html":{}}}],["commit",{"_index":2548,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["commitlint",{"_index":2780,"title":{},"body":{"index.html":{}}}],["commits",{"_index":2783,"title":{},"body":{"index.html":{}}}],["common",{"_index":1876,"title":{},"body":{"modules/HelperModule.html":{},"miscellaneous/functions.html":{}}}],["common/helper/helper.module",{"_index":292,"title":{},"body":{"modules/AppModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["common/helper/services/config.service",{"_index":1675,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["common/shared/services/pgsql.service",{"_index":338,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["community",{"_index":2527,"title":{},"body":{"contributing.html":{}}}],["components",{"_index":1592,"title":{},"body":{"modules/FilesLocalModule.html":{},"injectables/FilesS3Service.html":{}}}],["compose",{"_index":2755,"title":{},"body":{"index.html":{}}}],["compression",{"_index":2660,"title":{},"body":{"dependencies.html":{}}}],["conditionally",{"_index":1627,"title":{},"body":{"modules/FilesModule.html":{}}}],["conditions",{"_index":1162,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/Query-3.html":{},"interfaces/QueryOptions.html":{},"license.html":{}}}],["conditions[key",{"_index":1187,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["conds",{"_index":1172,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"interfaces/QueryOptions.html":{}}}],["config",{"_index":512,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/UtilsService.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["config.alias",{"_index":2480,"title":{},"body":{"classes/UtilsService.html":{}}}],["config.ts",{"_index":2641,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["config.type",{"_index":1240,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileType.html":{},"interfaces/IFileConfig.html":{}}}],["config.type.ts",{"_index":2687,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["config/app.config",{"_index":294,"title":{},"body":{"modules/AppModule.html":{},"classes/FileType.html":{}}}],["config/database.config",{"_index":296,"title":{},"body":{"modules/AppModule.html":{}}}],["config/file.config",{"_index":298,"title":{},"body":{"modules/AppModule.html":{},"classes/FileType.html":{}}}],["config/logger.config",{"_index":300,"title":{},"body":{"modules/AppModule.html":{}}}],["config/type/app",{"_index":1239,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"classes/FileType.html":{}}}],["config/type/config.type",{"_index":1612,"title":{},"body":{"injectables/FilesLocalService.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/HomeService.html":{},"injectables/PrismaService.html":{}}}],["config/type/file",{"_index":1368,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"interfaces/IFileConfig.html":{}}}],["config/type/logger",{"_index":1404,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["configmodule",{"_index":284,"title":{},"body":{"modules/AppModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["configmodule.forroot",{"_index":305,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":461,"title":{"classes/ConfigService.html":{}},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"injectables/FilesLocalService.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"modules/HelperModule.html":{},"injectables/HomeService.html":{},"injectables/PrismaService.html":{},"coverage.html":{}}}],["configservice.get('database.url",{"_index":2189,"title":{},"body":{"injectables/PrismaService.html":{}}}],["configservice.get('file.awss3region",{"_index":1678,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["configservice.get('file.maxfilesize",{"_index":1689,"title":{},"body":{"modules/FilesS3Module.html":{}}}],["configservice.getorthrow('file.accesskeyid",{"_index":1679,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["configservice.getorthrow('file.awsdefaults3bucket",{"_index":1681,"title":{},"body":{"modules/FilesS3Module.html":{}}}],["configservice.getorthrow('file.secretaccesskey",{"_index":1680,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["configservice.prismaconfig",{"_index":2190,"title":{},"body":{"injectables/PrismaService.html":{}}}],["configuration",{"_index":280,"title":{},"body":{"modules/AppModule.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileType.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/HomeService.html":{},"interfaces/IAppConfig.html":{},"injectables/PrismaService.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/UtilsService.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["configurations",{"_index":1722,"title":{},"body":{"modules/FilesS3PresignedModule.html":{}}}],["configure",{"_index":1116,"title":{},"body":{"classes/Currency.html":{}}}],["configured",{"_index":1724,"title":{},"body":{"modules/FilesS3PresignedModule.html":{},"index.html":{}}}],["configures",{"_index":1665,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HomeModule.html":{},"miscellaneous/functions.html":{}}}],["configuring",{"_index":117,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"interfaces/IPaginationFieldConfig.html":{}}}],["connection",{"_index":158,"title":{},"body":{"controllers/AppController.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"injectables/PrismaService.html":{},"license.html":{}}}],["connections",{"_index":283,"title":{},"body":{"modules/AppModule.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"injectables/PrismaService.html":{}}}],["connectivity",{"_index":2960,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["connects",{"_index":2185,"title":{},"body":{"injectables/PrismaService.html":{}}}],["console.log",{"_index":1370,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"modules/FilesModule.html":{}}}],["console.log('____________________________________",{"_index":2108,"title":{},"body":{"injectables/PaginationService.html":{}}}],["console.log('all",{"_index":63,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["console.log('bad",{"_index":341,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["console.log('data",{"_index":2117,"title":{},"body":{"injectables/PaginationService.html":{}}}],["console.log('dattttttttttttttttttttttttt",{"_index":2090,"title":{},"body":{"injectables/PaginationService.html":{}}}],["console.log('delete",{"_index":2319,"title":{},"body":{"classes/Query-2.html":{}}}],["console.log('finalcountquery",{"_index":2118,"title":{},"body":{"injectables/PaginationService.html":{}}}],["console.log('formated",{"_index":2278,"title":{},"body":{"classes/Query-2.html":{}}}],["console.log('hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhha",{"_index":777,"title":{},"body":{"controllers/CountriesController.html":{}}}],["console.log('hiii",{"_index":2096,"title":{},"body":{"injectables/PaginationService.html":{}}}],["console.log('http",{"_index":1938,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["console.log('keys",{"_index":2276,"title":{},"body":{"classes/Query-2.html":{}}}],["console.log('prisma",{"_index":2132,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["console.log('qqqqqqqqqqqqqq",{"_index":2352,"title":{},"body":{"classes/Query-3.html":{}}}],["console.log('qqqqqqqqqqqqqqqqqqqq",{"_index":1212,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["console.log('query",{"_index":2281,"title":{},"body":{"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/QueryFailedFilter.html":{}}}],["console.log('resultttttttttttttttttttt",{"_index":2212,"title":{},"body":{"injectables/PrismaService.html":{}}}],["console.log('update",{"_index":1008,"title":{},"body":{"controllers/CurrenciesController.html":{},"classes/Query-2.html":{}}}],["console.log('values",{"_index":2277,"title":{},"body":{"classes/Query-2.html":{}}}],["console.log(e",{"_index":2216,"title":{},"body":{"injectables/PrismaService.html":{}}}],["console.log(offset",{"_index":2119,"title":{},"body":{"injectables/PaginationService.html":{}}}],["console.log(sqlquery",{"_index":2230,"title":{},"body":{"classes/Query.html":{}}}],["console_print",{"_index":1423,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["const",{"_index":65,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileType.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{}}}],["constraint",{"_index":2138,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["constrainterrors",{"_index":2389,"title":{},"body":{"classes/QueryFailedFilter.html":{},"coverage.html":{}}}],["constrainterrors[exception.constraint",{"_index":2393,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["constructed",{"_index":1495,"title":{},"body":{"classes/FileType.html":{},"classes/UtilsService.html":{}}}],["constructing",{"_index":1961,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/PaginationMetaDto.html":{}}}],["construction",{"_index":2330,"title":{},"body":{"classes/Query-3.html":{},"classes/UtilsService.html":{}}}],["constructor",{"_index":22,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/ConfigService.html":{},"injectables/CurrenciesService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/FileNotImageException.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/HomeService.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query-2.html":{},"classes/QueryFailedFilter.html":{},"classes/UserNotFoundException.html":{},"miscellaneous/functions.html":{}}}],["constructor(configservice",{"_index":1605,"title":{},"body":{"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/HomeService.html":{},"injectables/PrismaService.html":{}}}],["constructor(error",{"_index":2456,"title":{},"body":{"classes/UserNotFoundException.html":{}}}],["constructor(message",{"_index":1438,"title":{},"body":{"classes/FileNotImageException.html":{}}}],["constructor(paginationservice",{"_index":1033,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["constructor(prisma",{"_index":2081,"title":{},"body":{"injectables/PaginationService.html":{}}}],["constructor(private",{"_index":741,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"controllers/HomeController.html":{},"injectables/HomeService.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query-2.html":{}}}],["constructor(public",{"_index":61,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["constructor(reflector",{"_index":23,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["constructor(undefined",{"_index":2030,"title":{},"body":{"classes/PaginationMetaDto.html":{}}}],["constructor(utilsservice",{"_index":2257,"title":{},"body":{"classes/Query-2.html":{}}}],["constructs",{"_index":1901,"title":{},"body":{"controllers/HomeController.html":{},"injectables/HomeService.html":{},"injectables/PaginationService.html":{},"classes/Query.html":{},"classes/UtilsService.html":{}}}],["consumes",{"_index":1575,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["contain",{"_index":1596,"title":{},"body":{"modules/FilesLocalModule.html":{}}}],["contained",{"_index":2062,"title":{},"body":{"classes/PaginationResponseDto.html":{},"miscellaneous/functions.html":{}}}],["container",{"_index":2756,"title":{},"body":{"index.html":{}}}],["containing",{"_index":1144,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"injectables/PrismaService.html":{},"classes/Query-1.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{}}}],["contains",{"_index":47,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/FileResponseDto-2.html":{}}}],["contentlength",{"_index":1750,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["contenttype",{"_index":1682,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["context",{"_index":46,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"injectables/ResolvePromisesInterceptor.html":{}}}],["contextmodule",{"_index":288,"title":{},"body":{"modules/AppModule.html":{}}}],["continent",{"_index":835,"title":{},"body":{"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/Query-2.html":{}}}],["contract",{"_index":2015,"title":{},"body":{"interfaces/IPaginationFieldConfig.html":{},"license.html":{}}}],["contribute",{"_index":2532,"title":{},"body":{"contributing.html":{}}}],["contributing",{"_index":2521,"title":{"contributing.html":{}},"body":{"contributing.html":{}}}],["contributing.md",{"_index":2522,"title":{},"body":{"contributing.html":{}}}],["contributions",{"_index":2526,"title":{},"body":{"contributing.html":{}}}],["control",{"_index":2001,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"index.html":{}}}],["controller",{"_index":142,"title":{"controllers/AppController.html":{},"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"controllers/HomeController.html":{}},"body":{"controllers/AppController.html":{},"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"coverage.html":{}}}],["controllers",{"_index":144,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"overview.html":{}}}],["controls",{"_index":1978,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["conventional",{"_index":2782,"title":{},"body":{"index.html":{}}}],["converts",{"_index":2715,"title":{},"body":{"miscellaneous/functions.html":{}}}],["coords",{"_index":1847,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["copies",{"_index":2906,"title":{},"body":{"license.html":{}}}],["copy",{"_index":2893,"title":{},"body":{"license.html":{}}}],["copyfile",{"_index":2626,"title":{},"body":{"coverage.html":{}}}],["copyright",{"_index":2885,"title":{},"body":{"license.html":{}}}],["core",{"_index":278,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["core/enum/file.type",{"_index":489,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["core/exceptions/http",{"_index":127,"title":{},"body":{"modules/ApiModule.html":{}}}],["core/interfaces/app.interfaces",{"_index":491,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["core/interfaces/aws.interfaces",{"_index":493,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["core/interfaces/file.interfaces",{"_index":495,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["core/interfaces/jwt.interfaces",{"_index":497,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["core/interfaces/node",{"_index":499,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["core/interfaces/postgres.interfaces",{"_index":502,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["core/interfaces/sendgrid.interfaces",{"_index":504,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["core/interfaces/sms.interfaces",{"_index":506,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["core/interfaces/upload",{"_index":508,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["core/validators/field.validator",{"_index":1793,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["correct",{"_index":432,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["correlationid",{"_index":248,"title":{},"body":{"controllers/AppController.html":{}}}],["corresponding",{"_index":2076,"title":{},"body":{"injectables/PaginationService.html":{}}}],["count",{"_index":1108,"title":{},"body":{"injectables/CurrenciesService.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["count(${countbyfield",{"_index":2502,"title":{},"body":{"classes/UtilsService.html":{}}}],["countbyfield",{"_index":2464,"title":{},"body":{"classes/UtilsService.html":{}}}],["countfilterquery",{"_index":2115,"title":{},"body":{"injectables/PaginationService.html":{}}}],["counting",{"_index":2468,"title":{},"body":{"classes/UtilsService.html":{}}}],["countquery",{"_index":1096,"title":{},"body":{"injectables/CurrenciesService.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["countries",{"_index":682,"title":{},"body":{"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"classes/Query-2.html":{},"coverage.html":{}}}],["countries.controller",{"_index":815,"title":{},"body":{"modules/CountriesModule.html":{}}}],["countries.service",{"_index":736,"title":{},"body":{"controllers/CountriesController.html":{},"modules/CountriesModule.html":{}}}],["countries/countries.module",{"_index":129,"title":{},"body":{"modules/ApiModule.html":{}}}],["countriescontroller",{"_index":679,"title":{"controllers/CountriesController.html":{}},"body":{"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"coverage.html":{}}}],["countriesjson",{"_index":2568,"title":{},"body":{"coverage.html":{}}}],["countriesjson1",{"_index":2569,"title":{},"body":{"coverage.html":{}}}],["countrieslist",{"_index":2570,"title":{},"body":{"coverage.html":{}}}],["countriesmodule",{"_index":100,"title":{"modules/CountriesModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/CountriesModule.html":{},"modules.html":{},"overview.html":{}}}],["countriesservice",{"_index":735,"title":{},"body":{"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"coverage.html":{},"overview.html":{}}}],["country",{"_index":135,"title":{"classes/Country.html":{}},"body":{"modules/ApiModule.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/Query-2.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"coverage.html":{}}}],["country's",{"_index":831,"title":{},"body":{"classes/Country.html":{}}}],["country.dto",{"_index":774,"title":{},"body":{"controllers/CountriesController.html":{},"classes/FilterCountryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortCountryDto.html":{},"coverage.html":{}}}],["country/create",{"_index":750,"title":{},"body":{"controllers/CountriesController.html":{}}}],["country_name",{"_index":1843,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["countrydto",{"_index":751,"title":{},"body":{"controllers/CountriesController.html":{},"classes/CreateCountryDto.html":{}}}],["coverage",{"_index":2562,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["cr",{"_index":2312,"title":{},"body":{"classes/Query-2.html":{}}}],["cr.id_currency=c.id_currency",{"_index":2313,"title":{},"body":{"classes/Query-2.html":{}}}],["cr.name",{"_index":2305,"title":{},"body":{"classes/Query-2.html":{}}}],["cr.symbol",{"_index":2304,"title":{},"body":{"classes/Query-2.html":{}}}],["create",{"_index":686,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"contributing.html":{},"index.html":{}}}],["create(@body",{"_index":753,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{}}}],["create(createdto",{"_index":690,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{}}}],["create(file",{"_index":1607,"title":{},"body":{"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{}}}],["create.dto",{"_index":2442,"title":{},"body":{"classes/UpdateDto.html":{},"classes/UpdateDto-1.html":{}}}],["createcountrydto",{"_index":691,"title":{"classes/CreateCountryDto.html":{}},"body":{"controllers/CountriesController.html":{},"classes/CreateCountryDto.html":{},"classes/UpdateDto.html":{},"coverage.html":{}}}],["created",{"_index":697,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{}}}],["createdto",{"_index":694,"title":{"classes/CreateDto.html":{}},"body":{"controllers/CountriesController.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/UpdateDto-1.html":{},"coverage.html":{}}}],["creates",{"_index":26,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CurrenciesService.html":{},"classes/FileNotImageException.html":{},"injectables/FilesS3PresignedService.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PrismaService.html":{},"classes/QueryFailedFilter.html":{},"classes/UserNotFoundException.html":{},"miscellaneous/functions.html":{}}}],["creating",{"_index":899,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"injectables/CurrenciesService.html":{},"injectables/FilesS3PresignedService.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"index.html":{}}}],["creation",{"_index":1066,"title":{},"body":{"injectables/CurrenciesService.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3Service.html":{}}}],["credentials",{"_index":1513,"title":{},"body":{"classes/FileType.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["ctx",{"_index":66,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["ctx.getrequest",{"_index":69,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["ctx.getresponse",{"_index":68,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["currencies",{"_index":984,"title":{},"body":{"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"coverage.html":{}}}],["currencies.controller",{"_index":1021,"title":{},"body":{"modules/CurrenciesModule.html":{}}}],["currencies.service",{"_index":1000,"title":{},"body":{"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{}}}],["currencies/:id_currency",{"_index":1005,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["currencies/currencies.module",{"_index":130,"title":{},"body":{"modules/ApiModule.html":{}}}],["currenciescontroller",{"_index":982,"title":{"controllers/CurrenciesController.html":{}},"body":{"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"coverage.html":{}}}],["currenciesmodule",{"_index":101,"title":{"modules/CurrenciesModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/CurrenciesModule.html":{},"modules.html":{},"overview.html":{}}}],["currenciesservice",{"_index":987,"title":{"injectables/CurrenciesService.html":{}},"body":{"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"coverage.html":{},"overview.html":{}}}],["currency",{"_index":136,"title":{"classes/Currency.html":{}},"body":{"modules/ApiModule.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/Query-3.html":{},"classes/UpdateDto-1.html":{},"coverage.html":{}}}],["currency_name",{"_index":844,"title":{},"body":{"classes/Country.html":{},"classes/Query-2.html":{}}}],["current",{"_index":1922,"title":{},"body":{"classes/HttpErrorFilter.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["currentpage",{"_index":1964,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{}}}],["custom",{"_index":317,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/FileNotImageException.html":{},"controllers/FilesS3Controller.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UserNotFoundException.html":{},"miscellaneous/functions.html":{}}}],["damages",{"_index":2931,"title":{},"body":{"license.html":{}}}],["data",{"_index":695,"title":{},"body":{"controllers/CountriesController.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/FileResponseDto-2.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"injectables/ResolvePromisesInterceptor.html":{},"classes/SortByDto.html":{},"classes/UpdateDto-1.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["data')@apibody({schema",{"_index":1550,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["data.length",{"_index":2094,"title":{},"body":{"injectables/PaginationService.html":{}}}],["data=null",{"_index":2195,"title":{},"body":{"injectables/PrismaService.html":{}}}],["data[key",{"_index":2284,"title":{},"body":{"classes/Query-2.html":{}}}],["database",{"_index":157,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/ConfigService.html":{},"injectables/CurrenciesService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/QueryFailedFilter.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["database_ca",{"_index":1266,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["database_cert",{"_index":1267,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["database_key",{"_index":1268,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["database_log_level",{"_index":1417,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["database_reject_unauthorized",{"_index":1269,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["database_ssl_enabled",{"_index":1270,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["database_storage",{"_index":1415,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["database_synchronize",{"_index":1271,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["database_url",{"_index":1272,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["databaseconfig",{"_index":295,"title":{},"body":{"modules/AppModule.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"miscellaneous/typealiases.html":{}}}],["databases",{"_index":2753,"title":{},"body":{"index.html":{}}}],["dataquery",{"_index":2085,"title":{},"body":{"injectables/PaginationService.html":{}}}],["datasources",{"_index":2188,"title":{},"body":{"injectables/PrismaService.html":{}}}],["date().toisostring",{"_index":78,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["date().tolocaletimestring",{"_index":1925,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["db",{"_index":355,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"injectables/PrismaService.html":{}}}],["dbaeumer.vscode",{"_index":2801,"title":{},"body":{"index.html":{}}}],["dbconfig",{"_index":556,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["deal",{"_index":2895,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":2936,"title":{},"body":{"license.html":{}}}],["debug",{"_index":246,"title":{},"body":{"controllers/AppController.html":{}}}],["decimal",{"_index":960,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{}}}],["decimal_digits",{"_index":949,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/Query-3.html":{}}}],["declarations",{"_index":94,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/CountriesModule.html":{},"modules/CurrenciesModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{},"overview.html":{}}}],["declaring",{"_index":1906,"title":{},"body":{"modules/HomeModule.html":{}}}],["decorates",{"_index":198,"title":{},"body":{"controllers/AppController.html":{}}}],["decorator",{"_index":212,"title":{},"body":{"controllers/AppController.html":{},"controllers/FilesS3Controller.html":{},"miscellaneous/functions.html":{}}}],["decorators",{"_index":162,"title":{},"body":{"controllers/AppController.html":{},"controllers/CountriesController.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"classes/Currency.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3Service.html":{},"classes/FilterQueryDto.html":{},"controllers/HomeController.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"miscellaneous/functions.html":{}}}],["decorators/api",{"_index":797,"title":{},"body":{"controllers/CountriesController.html":{}}}],["decorators/api.filter.query",{"_index":793,"title":{},"body":{"controllers/CountriesController.html":{}}}],["decorators/number.string.validator",{"_index":1795,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["decorators/swagger.schema",{"_index":1563,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["decorators/transforms.decorator",{"_index":1797,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["deep",{"_index":2426,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["deeply",{"_index":2962,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["deepobject",{"_index":1864,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["deeppartial",{"_index":1051,"title":{},"body":{"injectables/CurrenciesService.html":{},"miscellaneous/typealiases.html":{}}}],["deepresolvepromises",{"_index":2410,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["deepresolvepromises(data",{"_index":2429,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["deepresolvepromises(input",{"_index":2702,"title":{},"body":{"miscellaneous/functions.html":{}}}],["default",{"_index":404,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{}}}],["defaultmessage",{"_index":399,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["defaultmessage(args",{"_index":401,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["defaultvalue",{"_index":1406,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["define",{"_index":840,"title":{},"body":{"classes/Country.html":{},"classes/Currency.html":{},"classes/UpdateDto-1.html":{}}}],["defined",{"_index":24,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/FilterQueryDto.html":{},"controllers/HomeController.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{}}}],["defines",{"_index":681,"title":{},"body":{"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"injectables/FilesService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/Query-3.html":{},"classes/UpdateDto-1.html":{}}}],["delete",{"_index":687,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"interfaces/QueryOptions.html":{}}}],["delete(@param('id_country",{"_index":763,"title":{},"body":{"controllers/CountriesController.html":{}}}],["delete(@param('id_currency",{"_index":1015,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["delete(`${modules}/:id_currency",{"_index":1014,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["delete(`deletebyid/:id_country",{"_index":761,"title":{},"body":{"controllers/CountriesController.html":{}}}],["delete(deletebyid/:id_country)@httpcode(httpstatus.ok)@apiparam({name",{"_index":699,"title":{},"body":{"controllers/CountriesController.html":{}}}],["delete(id",{"_index":698,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{}}}],["delete(key",{"_index":2367,"title":{},"body":{"classes/Query-3.html":{}}}],["delete(undefined)@httpcode(httpstatus.ok)@apiparam({name",{"_index":992,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["deletebyid/:id_country",{"_index":760,"title":{},"body":{"controllers/CountriesController.html":{}}}],["deleted",{"_index":703,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{}}}],["deleted[0]?.deletedid",{"_index":1111,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["deletedid",{"_index":2318,"title":{},"body":{"classes/Query-2.html":{},"classes/Query-3.html":{}}}],["deleteid",{"_index":2369,"title":{},"body":{"classes/Query-3.html":{}}}],["deleteoptions",{"_index":2368,"title":{},"body":{"classes/Query-3.html":{}}}],["deletes",{"_index":1044,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["deletetype",{"_index":1171,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["deleting",{"_index":1025,"title":{},"body":{"injectables/CurrenciesService.html":{},"classes/Query-3.html":{}}}],["deletion",{"_index":706,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{}}}],["delhi",{"_index":855,"title":{},"body":{"classes/Country.html":{},"classes/CreateCountryDto.html":{}}}],["dependencies",{"_index":92,"title":{"dependencies.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/CountriesModule.html":{},"modules/CurrenciesModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{},"changelog.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["depends",{"_index":2146,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["deployment",{"_index":2846,"title":{},"body":{"index.html":{}}}],["deps",{"_index":2514,"title":{},"body":{"changelog.html":{}}}],["desc",{"_index":438,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{}}}],["descending",{"_index":1828,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["describe",{"_index":820,"title":{},"body":{"classes/Country.html":{},"classes/Currency.html":{},"contributing.html":{}}}],["description",{"_index":8,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-3.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UpdateDto-1.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["descriptive",{"_index":894,"title":{},"body":{"classes/Country.html":{}}}],["designed",{"_index":1765,"title":{},"body":{"injectables/FilesService.html":{},"injectables/ResolvePromisesInterceptor.html":{}}}],["destination",{"_index":1581,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["destroyed",{"_index":2181,"title":{},"body":{"injectables/PrismaService.html":{}}}],["detail",{"_index":2540,"title":{},"body":{"contributing.html":{}}}],["detailed",{"_index":2726,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["details",{"_index":173,"title":{},"body":{"controllers/AppController.html":{},"classes/Country.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-2.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"classes/HttpErrorFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{}}}],["determined",{"_index":1639,"title":{},"body":{"modules/FilesModule.html":{}}}],["development",{"_index":553,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["dharmesh",{"_index":2881,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["dial",{"_index":832,"title":{},"body":{"classes/Country.html":{}}}],["dial_code",{"_index":845,"title":{},"body":{"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/Query-2.html":{}}}],["dialing",{"_index":868,"title":{},"body":{"classes/Country.html":{},"classes/CreateCountryDto.html":{}}}],["different",{"_index":1625,"title":{},"body":{"modules/FilesModule.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/SortByDto.html":{},"miscellaneous/enumerations.html":{}}}],["digits",{"_index":961,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{}}}],["direction",{"_index":434,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{}}}],["directionregex",{"_index":457,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["directory",{"_index":1945,"title":{},"body":{"interfaces/IAppConfig.html":{}}}],["dirk",{"_index":2802,"title":{},"body":{"index.html":{}}}],["disable",{"_index":420,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{}}}],["disconnects",{"_index":2182,"title":{},"body":{"injectables/PrismaService.html":{}}}],["diskstorage",{"_index":1560,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["display",{"_index":1983,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["distribute",{"_index":2902,"title":{},"body":{"license.html":{}}}],["docker",{"_index":2754,"title":{},"body":{"index.html":{}}}],["dockfile",{"_index":2810,"title":{},"body":{"index.html":{}}}],["docs",{"_index":1255,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"index.html":{}}}],["document",{"_index":1525,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["document.installation",{"_index":2823,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":197,"title":{},"body":{"controllers/AppController.html":{},"classes/Country.html":{},"classes/Currency.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"controllers/FilesS3Controller.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{}}}],["documented",{"_index":1117,"title":{},"body":{"classes/Currency.html":{}}}],["documents",{"_index":1653,"title":{},"body":{"controllers/FilesS3Controller.html":{},"miscellaneous/functions.html":{}}}],["doe",{"_index":221,"title":{},"body":{"controllers/AppController.html":{}}}],["doesn't",{"_index":2493,"title":{},"body":{"classes/UtilsService.html":{}}}],["dollar",{"_index":862,"title":{},"body":{"classes/Country.html":{}}}],["domain",{"_index":1497,"title":{},"body":{"classes/FileType.html":{},"interfaces/IAppConfig.html":{}}}],["domain/country",{"_index":771,"title":{},"body":{"controllers/CountriesController.html":{}}}],["domain/file",{"_index":1461,"title":{},"body":{"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{}}}],["don't",{"_index":2747,"title":{},"body":{"index.html":{}}}],["dotenv",{"_index":287,"title":{},"body":{"modules/AppModule.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"index.html":{}}}],["dotenv.config",{"_index":532,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["down",{"_index":2215,"title":{},"body":{"injectables/PrismaService.html":{},"index.html":{}}}],["download",{"_index":1538,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{}}}],["download(@param('path",{"_index":1585,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["download(path",{"_index":1540,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["downloaded",{"_index":1544,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["downloading",{"_index":1537,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{}}}],["downloads",{"_index":1543,"title":{},"body":{"controllers/FilesLocalController.html":{},"modules/FilesS3Module.html":{},"injectables/FilesS3PresignedService.html":{}}}],["driver",{"_index":666,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"interfaces/IFileConfig.html":{}}}],["drivers",{"_index":2690,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["dto",{"_index":828,"title":{},"body":{"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileUploadDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"classes/SortByDto.html":{},"classes/UpdateDto-1.html":{},"miscellaneous/functions.html":{}}}],["dto/country",{"_index":737,"title":{},"body":{"controllers/CountriesController.html":{}}}],["dto/create.dto",{"_index":738,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{}}}],["dto/currency",{"_index":1001,"title":{},"body":{"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{}}}],["dto/file",{"_index":1569,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{}}}],["dto/file.dto",{"_index":1711,"title":{},"body":{"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{}}}],["dto/query",{"_index":773,"title":{},"body":{"controllers/CountriesController.html":{}}}],["dto/update.dto",{"_index":739,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{}}}],["dummy.ts",{"_index":2567,"title":{},"body":{"coverage.html":{}}}],["duplicate",{"_index":1068,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["duration",{"_index":1419,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["duration_log_level",{"_index":1421,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["durationms",{"_index":259,"title":{},"body":{"controllers/AppController.html":{}}}],["during",{"_index":1065,"title":{},"body":{"injectables/CurrenciesService.html":{},"controllers/FilesLocalController.html":{}}}],["dx",{"_index":1831,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["dynamic",{"_index":1040,"title":{},"body":{"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{}}}],["dynamically",{"_index":1190,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{}}}],["dynamicquerybuilder",{"_index":1131,"title":{"classes/DynamicQueryBuilder.html":{}},"body":{"classes/DynamicQueryBuilder.html":{},"classes/Query-3.html":{},"interfaces/QueryOptions.html":{},"coverage.html":{}}}],["e",{"_index":2214,"title":{},"body":{"injectables/PrismaService.html":{}}}],["e.g",{"_index":449,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"interfaces/QueryOptions.html":{},"injectables/SortBy.html":{},"index.html":{}}}],["e2e",{"_index":2828,"title":{},"body":{"index.html":{}}}],["e325f0d0f3ae",{"_index":1458,"title":{},"body":{"classes/FileResponseDto.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{}}}],["e325f0d0f3ae'})@allow",{"_index":1490,"title":{},"body":{"classes/FileType.html":{}}}],["e89b",{"_index":870,"title":{},"body":{"classes/Country.html":{},"classes/CreateCountryDto.html":{}}}],["each",{"_index":443,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/Country.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UtilsService.html":{}}}],["easy",{"_index":2764,"title":{},"body":{"index.html":{}}}],["edge",{"_index":2869,"title":{},"body":{"index.html":{}}}],["editfilename",{"_index":1565,"title":{},"body":{"controllers/FilesLocalController.html":{},"coverage.html":{}}}],["efficient",{"_index":2739,"title":{},"body":{"index.html":{}}}],["emailer.interfaces",{"_index":500,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["emailer.interfaces.ts",{"_index":1954,"title":{},"body":{"interfaces/INodeEmailerConfig.html":{},"coverage.html":{}}}],["emergency",{"_index":271,"title":{},"body":{"controllers/AppController.html":{}}}],["emits",{"_index":2421,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["enable",{"_index":1292,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["encapsulate",{"_index":1480,"title":{},"body":{"classes/FileResponseDto-2.html":{}}}],["encoded",{"_index":1709,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["encoding",{"_index":1948,"title":{},"body":{"interfaces/IFileConfig.html":{}}}],["encryptionservice",{"_index":1890,"title":{},"body":{"modules/HelperModule.html":{}}}],["end",{"_index":1979,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"injectables/PaginationService.html":{}}}],["endindex",{"_index":1973,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{}}}],["endpage",{"_index":1970,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{}}}],["endpoint",{"_index":165,"title":{},"body":{"controllers/AppController.html":{},"controllers/CountriesController.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/HomeController.html":{},"index.html":{}}}],["endpoints",{"_index":149,"title":{},"body":{"controllers/AppController.html":{},"controllers/CurrenciesController.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"controllers/FilesS3PresignedController.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{}}}],["ensure",{"_index":447,"title":{},"body":{"injectables/CommaSeparated.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"contributing.html":{},"index.html":{}}}],["ensures",{"_index":903,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{}}}],["entire",{"_index":2957,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["entities",{"_index":571,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["entity",{"_index":819,"title":{},"body":{"classes/Country.html":{},"classes/Currency.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"classes/UpdateDto-1.html":{},"miscellaneous/functions.html":{}}}],["enum",{"_index":1241,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"miscellaneous/enumerations.html":{}}}],["enumerations",{"_index":2683,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":303,"title":{},"body":{"modules/AppModule.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"coverage.html":{}}}],["env.${env",{"_index":310,"title":{},"body":{"modules/AppModule.html":{}}}],["env.${nodeenv",{"_index":534,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["env.development",{"_index":537,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["env.staging",{"_index":535,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["envfilepath",{"_index":309,"title":{},"body":{"modules/AppModule.html":{}}}],["environment",{"_index":281,"title":{},"body":{"modules/AppModule.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["environments",{"_index":2701,"title":{},"body":{"miscellaneous/functions.html":{}}}],["environmentvariablesvalidator",{"_index":1221,"title":{"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{}},"body":{"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"coverage.html":{}}}],["envname",{"_index":544,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["envvalues.database_url",{"_index":1317,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["envvalues.database_url)@isstring",{"_index":1297,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["envvarappconfigvalidator",{"_index":513,"title":{"classes/EnvVarAppConfigValidator.html":{}},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"coverage.html":{}}}],["envvarfileconfigvalidator",{"_index":521,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["envvariablesclass",{"_index":2724,"title":{},"body":{"miscellaneous/functions.html":{}}}],["equal",{"_index":2712,"title":{},"body":{"miscellaneous/functions.html":{}}}],["erro",{"_index":356,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["error",{"_index":85,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"injectables/CurrenciesService.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesS3PresignedService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/QueryFailedFilter.html":{},"injectables/SortBy.html":{},"classes/UserNotFoundException.html":{},"miscellaneous/functions.html":{}}}],["error('hello",{"_index":266,"title":{},"body":{"controllers/AppController.html":{}}}],["error.filter",{"_index":128,"title":{},"body":{"modules/ApiModule.html":{}}}],["error.filter.ts",{"_index":1916,"title":{},"body":{"classes/HttpErrorFilter.html":{},"coverage.html":{}}}],["error.filter.ts:50",{"_index":1921,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["errormessage",{"_index":2392,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["errormessages",{"_index":383,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["errorresponse",{"_index":74,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["errors",{"_index":328,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/HttpErrorFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/Query-1.html":{},"classes/QueryFailedFilter.html":{},"classes/UserNotFoundException.html":{},"miscellaneous/functions.html":{}}}],["errors.ts",{"_index":2599,"title":{},"body":{"coverage.html":{}}}],["esben",{"_index":2806,"title":{},"body":{"index.html":{}}}],["esbenp.prettier",{"_index":2804,"title":{},"body":{"index.html":{}}}],["escapes",{"_index":2220,"title":{},"body":{"classes/Query.html":{}}}],["escaping",{"_index":2157,"title":{},"body":{"injectables/PrismaService.html":{}}}],["escvalue",{"_index":2200,"title":{},"body":{"injectables/PrismaService.html":{}}}],["escvalue.replace(/'/g",{"_index":2202,"title":{},"body":{"injectables/PrismaService.html":{}}}],["eslint",{"_index":419,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{},"index.html":{}}}],["eslint/ban",{"_index":1855,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["eslint/explicit",{"_index":1857,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["eslint/no",{"_index":424,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{},"classes/UtilsService.html":{}}}],["eslint/prefer",{"_index":557,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["etc",{"_index":863,"title":{},"body":{"classes/Country.html":{}}}],["event",{"_index":2926,"title":{},"body":{"license.html":{}}}],["everyone",{"_index":2531,"title":{},"body":{"contributing.html":{}}}],["example",{"_index":170,"title":{},"body":{"controllers/AppController.html":{},"controllers/CountriesController.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"classes/HttpErrorFilter.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/Query.html":{},"classes/SortByDto.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"contributing.html":{},"index.html":{}}}],["exceeds",{"_index":1741,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["exception",{"_index":10,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/FileNotImageException.html":{},"injectables/FilesS3Service.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"classes/UserNotFoundException.html":{},"miscellaneous/functions.html":{}}}],["exception.code",{"_index":2135,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["exception.constraint",{"_index":2394,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["exception.constraint.startswith('uq",{"_index":2395,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["exception.filter.ts",{"_index":1934,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:27",{"_index":1936,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts:30",{"_index":2128,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["exception.getresponse",{"_index":345,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["exception.getstatus",{"_index":72,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exception.message",{"_index":1926,"title":{},"body":{"classes/HttpErrorFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["exception.message.replace(/\\n/g",{"_index":2133,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["exception.query",{"_index":2397,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["exception.sqlmessage",{"_index":2396,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["exception.stack",{"_index":381,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{}}}],["exceptionfilter",{"_index":16,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["exceptions",{"_index":14,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["exceptions.filter.ts",{"_index":7,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["exceptions.filter.ts:47",{"_index":25,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exceptions.filter.ts:54",{"_index":36,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exceptions.filter.ts:63",{"_index":40,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exclude",{"_index":936,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/Currency.html":{},"classes/Query-3.html":{}}}],["exclude({toplainonly",{"_index":917,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/Currency.html":{}}}],["excluded",{"_index":1123,"title":{},"body":{"classes/Currency.html":{}}}],["executerawquery",{"_index":2159,"title":{},"body":{"injectables/PrismaService.html":{}}}],["executerawquery(query",{"_index":2193,"title":{},"body":{"injectables/PrismaService.html":{}}}],["executerawquery(queryobj",{"_index":2165,"title":{},"body":{"injectables/PrismaService.html":{}}}],["executes",{"_index":2155,"title":{},"body":{"injectables/PrismaService.html":{}}}],["executetransaction",{"_index":2160,"title":{},"body":{"injectables/PrismaService.html":{}}}],["executetransaction(actions",{"_index":2171,"title":{},"body":{"injectables/PrismaService.html":{}}}],["executing",{"_index":2178,"title":{},"body":{"injectables/PrismaService.html":{}}}],["execution",{"_index":45,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/ResolvePromisesInterceptor.html":{}}}],["executioncontext",{"_index":2415,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["exeption",{"_index":64,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exist",{"_index":1071,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["existing",{"_index":756,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/Query-3.html":{},"classes/UpdateDto-1.html":{}}}],["exists",{"_index":1063,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["expected",{"_index":1654,"title":{},"body":{"controllers/FilesS3Controller.html":{}}}],["expiration",{"_index":1703,"title":{},"body":{"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{}}}],["expirationtime",{"_index":624,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IJWTConfig.html":{}}}],["expires",{"_index":231,"title":{},"body":{"controllers/AppController.html":{}}}],["expiresin",{"_index":1519,"title":{},"body":{"classes/FileType.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{}}}],["expiresinseconds",{"_index":622,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IJWTConfig.html":{}}}],["explanation",{"_index":2861,"title":{},"body":{"index.html":{}}}],["explode",{"_index":1865,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["export",{"_index":59,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UpdateDto.html":{},"classes/UpdateDto-1.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{}}}],["exported",{"_index":1600,"title":{},"body":{"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{}}}],["exports",{"_index":97,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/CountriesModule.html":{},"modules/CurrenciesModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{},"overview.html":{}}}],["exposes",{"_index":1670,"title":{},"body":{"modules/FilesS3Module.html":{}}}],["exposing",{"_index":985,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["express",{"_index":58,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"dependencies.html":{},"license.html":{}}}],["express.multer.file",{"_index":1547,"title":{},"body":{"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{}}}],["express.multers3.file",{"_index":1657,"title":{},"body":{"controllers/FilesS3Controller.html":{},"injectables/FilesS3Service.html":{}}}],["expression",{"_index":453,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["extending",{"_index":1444,"title":{},"body":{"classes/FileNotImageException.html":{}}}],["extends",{"_index":1437,"title":{},"body":{"classes/FileNotImageException.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/UpdateDto.html":{},"classes/UpdateDto-1.html":{},"classes/UserNotFoundException.html":{}}}],["extensions",{"_index":2800,"title":{},"body":{"index.html":{}}}],["f",{"_index":2849,"title":{},"body":{"index.html":{}}}],["fail",{"_index":2391,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["failed",{"_index":2139,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["failed.filter.ts",{"_index":2381,"title":{},"body":{"classes/QueryFailedFilter.html":{},"coverage.html":{}}}],["failed.filter.ts:26",{"_index":2383,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["failed.filter.ts:34",{"_index":2384,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["failed.filter.ts:45",{"_index":2385,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["fails",{"_index":210,"title":{},"body":{"controllers/AppController.html":{},"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{},"miscellaneous/functions.html":{}}}],["failure",{"_index":2386,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["failures",{"_index":2382,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["false",{"_index":416,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{}}}],["false})@isoptional",{"_index":1218,"title":{},"body":{"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{}}}],["fatal",{"_index":269,"title":{},"body":{"controllers/AppController.html":{}}}],["feat",{"_index":2854,"title":{},"body":{"index.html":{}}}],["feat(api",{"_index":2867,"title":{},"body":{"index.html":{}}}],["feature",{"_index":110,"title":{},"body":{"modules/ApiModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"contributing.html":{}}}],["features",{"_index":2518,"title":{},"body":{"changelog.html":{},"contributing.html":{},"index.html":{}}}],["fetch",{"_index":354,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"injectables/PaginationService.html":{}}}],["field",{"_index":433,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PrismaService.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{}}}],["field\":\"name\",\"direction\":\"asc",{"_index":1820,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["field\":\"name\",\"direction\":\"asc\"},{\"field\":\"age\",\"direction\":\"desc",{"_index":801,"title":{},"body":{"controllers/CountriesController.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["field\":\"name\",\"direction\":\"asc\"}]'})@isoptional()@transform",{"_index":2053,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["field\":\"name\",\"operator\":\"=\",\"value\":\"in",{"_index":1816,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["field\":\"name\",\"operator\":\"=\",\"value\":\"in\"}]'})@isoptional()@transform",{"_index":2042,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["field\":\"name\",\"operator\":\"like\",\"value\":\"john\"},{\"field\":\"age\",\"operator\":\">\",\"value\":\"30",{"_index":799,"title":{},"body":{"controllers/CountriesController.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["fieldconfigs",{"_index":1094,"title":{},"body":{"injectables/CurrenciesService.html":{},"classes/UtilsService.html":{}}}],["fieldconfigs[field",{"_index":2479,"title":{},"body":{"classes/UtilsService.html":{}}}],["fieldname",{"_index":1862,"title":{},"body":{"classes/FilterQueryDto.html":{},"interfaces/IFileConfig.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["fieldname}[${index",{"_index":1868,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["fieldname}[${index}].field",{"_index":1869,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["fieldname}[${index}].operator",{"_index":1870,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["fieldname}[${index}].value",{"_index":1871,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["fieldregex",{"_index":455,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["fields",{"_index":1159,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/IPaginationFieldConfig.html":{},"injectables/PrismaService.html":{},"classes/Query-3.html":{},"interfaces/QueryOptions.html":{},"classes/UpdateDto-1.html":{},"classes/UtilsService.html":{}}}],["fields.includes(key",{"_index":2199,"title":{},"body":{"injectables/PrismaService.html":{}}}],["fields.join",{"_index":1200,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["fil",{"_index":343,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UpdateDto.html":{},"classes/UpdateDto-1.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["file's",{"_index":1481,"title":{},"body":{"classes/FileResponseDto-2.html":{},"classes/FileUploadDto.html":{},"injectables/FilesS3Service.html":{}}}],["file.filename.match(/\\.(jpg|jpeg|png|gif)$/i",{"_index":1742,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["file.filesize",{"_index":1744,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["file.interfaces",{"_index":509,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["file.interfaces.ts",{"_index":2029,"title":{},"body":{"interfaces/IUploadFileConfig.html":{},"coverage.html":{}}}],["file.jpg",{"_index":1460,"title":{},"body":{"classes/FileResponseDto.html":{},"injectables/FilesLocalService.html":{}}}],["file.key",{"_index":1762,"title":{},"body":{"injectables/FilesS3Service.html":{}}}],["file_driver",{"_index":523,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["file_upload_destination",{"_index":658,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IUploadFileConfig.html":{}}}],["fileconfig",{"_index":297,"title":{},"body":{"modules/AppModule.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"modules/FilesModule.html":{},"miscellaneous/typealiases.html":{}}}],["fileconfig).accesskeyid",{"_index":1514,"title":{},"body":{"classes/FileType.html":{}}}],["fileconfig).awsdefaults3bucket",{"_index":1517,"title":{},"body":{"classes/FileType.html":{}}}],["fileconfig).awss3region",{"_index":1512,"title":{},"body":{"classes/FileType.html":{}}}],["fileconfig).driver",{"_index":1508,"title":{},"body":{"classes/FileType.html":{},"modules/FilesModule.html":{}}}],["fileconfig).secretaccesskey",{"_index":1515,"title":{},"body":{"classes/FileType.html":{}}}],["filedriver",{"_index":488,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"interfaces/IFileConfig.html":{},"miscellaneous/enumerations.html":{}}}],["filedriver.local",{"_index":1372,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"modules/FilesModule.html":{}}}],["filedriver.s3",{"_index":525,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"modules/FilesModule.html":{}}}],["filedriver.s3].includes",{"_index":1511,"title":{},"body":{"classes/FileType.html":{}}}],["filedriver.s3_presigned",{"_index":1510,"title":{},"body":{"classes/FileType.html":{}}}],["filedriver.s3_presigned].includes(envvalues.file_driver",{"_index":526,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["filefilter",{"_index":1582,"title":{},"body":{"controllers/FilesLocalController.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["fileinterceptor",{"_index":1555,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["fileinterceptor('file",{"_index":1580,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["filename",{"_index":1526,"title":{},"body":{"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesS3PresignedService.html":{},"coverage.html":{}}}],["filenotimageexception",{"_index":1430,"title":{"classes/FileNotImageException.html":{}},"body":{"classes/FileNotImageException.html":{},"coverage.html":{}}}],["filenotimageexception('custom",{"_index":1436,"title":{},"body":{"classes/FileNotImageException.html":{}}}],["fileoverview",{"_index":133,"title":{},"body":{"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/FileType.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/Query-3.html":{},"classes/UpdateDto-1.html":{}}}],["fileresponsedto",{"_index":1448,"title":{"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{}},"body":{"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"coverage.html":{}}}],["fileresponsedto})@post('upload')@apiconsumes('multipart/form",{"_index":1549,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["fileresponsedto})@post('v1/upload",{"_index":1705,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["fileresponsedto})@post('v1/upload/s3')@apiconsumes('multipart/form",{"_index":1658,"title":{},"body":{"controllers/FilesS3Controller.html":{}}}],["files",{"_index":1523,"title":{},"body":{"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"license.html":{}}}],["files.controller",{"_index":1594,"title":{},"body":{"modules/FilesLocalModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["files.service",{"_index":1571,"title":{},"body":{"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{}}}],["files/example.jpg",{"_index":1470,"title":{},"body":{"classes/FileResponseDto-1.html":{}}}],["files/files.module",{"_index":131,"title":{},"body":{"modules/ApiModule.html":{}}}],["files/v1/download/{key}?expiresin=3600",{"_index":1701,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["files/v1/upload",{"_index":1707,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["filesize",{"_index":1527,"title":{},"body":{"classes/FileUploadDto.html":{},"modules/FilesS3Module.html":{},"injectables/FilesS3PresignedService.html":{}}}],["fileslocalcontroller",{"_index":1535,"title":{"controllers/FilesLocalController.html":{}},"body":{"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"coverage.html":{}}}],["fileslocalmodule",{"_index":1587,"title":{"modules/FilesLocalModule.html":{}},"body":{"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules.html":{},"overview.html":{}}}],["fileslocalservice",{"_index":1570,"title":{"injectables/FilesLocalService.html":{}},"body":{"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"coverage.html":{},"overview.html":{}}}],["filesmodule",{"_index":102,"title":{"modules/FilesModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/FilesModule.html":{},"modules.html":{},"overview.html":{}}}],["filesroot",{"_index":1564,"title":{},"body":{"controllers/FilesLocalController.html":{},"coverage.html":{}}}],["filess3controller",{"_index":1643,"title":{"controllers/FilesS3Controller.html":{}},"body":{"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"coverage.html":{}}}],["filess3module",{"_index":1622,"title":{"modules/FilesS3Module.html":{}},"body":{"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules.html":{},"overview.html":{}}}],["filess3presignedcontroller",{"_index":1690,"title":{"controllers/FilesS3PresignedController.html":{}},"body":{"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"coverage.html":{}}}],["filess3presignedmodule",{"_index":1623,"title":{"modules/FilesS3PresignedModule.html":{}},"body":{"modules/FilesModule.html":{},"modules/FilesS3PresignedModule.html":{},"modules.html":{},"overview.html":{}}}],["filess3presignedservice",{"_index":1712,"title":{"injectables/FilesS3PresignedService.html":{}},"body":{"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"coverage.html":{},"overview.html":{}}}],["filess3service",{"_index":1660,"title":{"injectables/FilesS3Service.html":{}},"body":{"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"injectables/FilesS3Service.html":{},"coverage.html":{},"overview.html":{}}}],["filesservice",{"_index":1573,"title":{"injectables/FilesService.html":{}},"body":{"controllers/FilesLocalController.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesService.html":{},"coverage.html":{},"overview.html":{}}}],["filetype",{"_index":1452,"title":{"classes/FileType.html":{}},"body":{"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"coverage.html":{}}}],["fileuploaddto",{"_index":1521,"title":{"classes/FileUploadDto.html":{}},"body":{"classes/FileUploadDto.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"coverage.html":{}}}],["filter",{"_index":11,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/CountriesController.html":{},"classes/FilterQueryDto.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PaginationQueryDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{}}}],["filter.field",{"_index":2106,"title":{},"body":{"injectables/PaginationService.html":{}}}],["filter.field.tolowercase",{"_index":2477,"title":{},"body":{"classes/UtilsService.html":{}}}],["filter.operator",{"_index":2107,"title":{},"body":{"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["filter.operator.touppercase",{"_index":2102,"title":{},"body":{"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["filter.value",{"_index":2103,"title":{},"body":{"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["filter.value.split(',').map((val",{"_index":2486,"title":{},"body":{"classes/UtilsService.html":{}}}],["filterconditions",{"_index":2100,"title":{},"body":{"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["filtercountrydto",{"_index":1769,"title":{"classes/FilterCountryDto.html":{}},"body":{"classes/FilterCountryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortCountryDto.html":{},"coverage.html":{}}}],["filterdto",{"_index":1860,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["filtering",{"_index":996,"title":{},"body":{"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"modules/FilesS3Module.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{}}}],["filteroptions",{"_index":786,"title":{},"body":{"controllers/CountriesController.html":{}}}],["filterquery",{"_index":1102,"title":{},"body":{"injectables/CurrenciesService.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["filterquerydto",{"_index":795,"title":{"classes/FilterQueryDto.html":{}},"body":{"controllers/CountriesController.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"coverage.html":{}}}],["filters",{"_index":325,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"controllers/CountriesController.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UtilsService.html":{}}}],["filters.length",{"_index":2099,"title":{},"body":{"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["filters[name]=something",{"_index":1853,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["filtervalues",{"_index":2473,"title":{},"body":{"classes/UtilsService.html":{}}}],["filtervalues.push(filter.value",{"_index":2489,"title":{},"body":{"classes/UtilsService.html":{}}}],["finalcountquery",{"_index":2116,"title":{},"body":{"injectables/PaginationService.html":{}}}],["find",{"_index":683,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"interfaces/QueryOptions.html":{},"contributing.html":{}}}],["findall",{"_index":688,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{}}}],["findall(@query",{"_index":746,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{}}}],["findall(paginationquery",{"_index":1045,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["findall(query",{"_index":707,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{}}}],["findby(key",{"_index":2361,"title":{},"body":{"classes/Query-3.html":{}}}],["findbycode",{"_index":2331,"title":{},"body":{"classes/Query-3.html":{}}}],["findbycode(id",{"_index":2335,"title":{},"body":{"classes/Query-3.html":{}}}],["findbyid",{"_index":2254,"title":{},"body":{"classes/Query-2.html":{},"classes/Query-3.html":{}}}],["findbyid(id",{"_index":2260,"title":{},"body":{"classes/Query-2.html":{}}}],["findbyname",{"_index":2255,"title":{},"body":{"classes/Query-2.html":{}}}],["finde",{"_index":2268,"title":{},"body":{"classes/Query-2.html":{}}}],["findone",{"_index":1032,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["findone(id",{"_index":1048,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["first",{"_index":1980,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"index.html":{}}}],["fitness",{"_index":2922,"title":{},"body":{"license.html":{}}}],["fix",{"_index":2855,"title":{},"body":{"index.html":{}}}],["fix(core",{"_index":2868,"title":{},"body":{"index.html":{}}}],["fixed",{"_index":2512,"title":{},"body":{"changelog.html":{}}}],["fixes",{"_index":2511,"title":{},"body":{"changelog.html":{}}}],["flexible",{"_index":2738,"title":{},"body":{"index.html":{}}}],["follow",{"_index":2529,"title":{},"body":{"contributing.html":{}}}],["following",{"_index":2787,"title":{},"body":{"index.html":{},"license.html":{}}}],["foo",{"_index":243,"title":{},"body":{"controllers/AppController.html":{}}}],["footer",{"_index":2862,"title":{},"body":{"index.html":{}}}],["footer(s",{"_index":2853,"title":{},"body":{"index.html":{}}}],["fork",{"_index":2541,"title":{},"body":{"contributing.html":{}}}],["format",{"_index":435,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"injectables/SortBy.html":{},"index.html":{}}}],["formats",{"_index":326,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["formatted",{"_index":331,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["formattedarray",{"_index":2322,"title":{},"body":{"classes/Query-2.html":{},"classes/UtilsService.html":{}}}],["formatter",{"_index":2779,"title":{},"body":{"index.html":{}}}],["formatting",{"_index":2555,"title":{},"body":{"contributing.html":{}}}],["formatvalue",{"_index":2256,"title":{},"body":{"classes/Query-2.html":{},"classes/UtilsService.html":{}}}],["formatvalue(value",{"_index":2263,"title":{},"body":{"classes/Query-2.html":{},"classes/UtilsService.html":{}}}],["found",{"_index":358,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/FilesLocalController.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/UserNotFoundException.html":{}}}],["found.exception.ts",{"_index":2452,"title":{},"body":{"classes/UserNotFoundException.html":{},"coverage.html":{}}}],["found.exception.ts:20",{"_index":2457,"title":{},"body":{"classes/UserNotFoundException.html":{}}}],["foxundermoon",{"_index":2812,"title":{},"body":{"index.html":{}}}],["foxundermoon.shell",{"_index":2811,"title":{},"body":{"index.html":{}}}],["framework",{"_index":1764,"title":{},"body":{"injectables/FilesService.html":{},"index.html":{}}}],["free",{"_index":2889,"title":{},"body":{"license.html":{}}}],["from_email",{"_index":629,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/ISendGridConfig.html":{}}}],["fromquery",{"_index":1092,"title":{},"body":{"injectables/CurrenciesService.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["frontend",{"_index":1942,"title":{},"body":{"interfaces/IAppConfig.html":{}}}],["frontend_domain",{"_index":518,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{}}}],["frontenddomain",{"_index":579,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"interfaces/IAppConfig.html":{}}}],["fsroot",{"_index":2627,"title":{},"body":{"coverage.html":{}}}],["fully",{"_index":2406,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["function",{"_index":1247,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"injectables/ResolvePromisesInterceptor.html":{},"classes/SortByDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["function(app",{"_index":2717,"title":{},"body":{"miscellaneous/functions.html":{}}}],["functionalities",{"_index":122,"title":{},"body":{"modules/ApiModule.html":{},"modules/CurrenciesModule.html":{},"injectables/FilesService.html":{},"modules/HomeModule.html":{}}}],["functionality",{"_index":1603,"title":{},"body":{"injectables/FilesLocalService.html":{},"modules/FilesS3Module.html":{},"injectables/FilesS3Service.html":{},"injectables/PaginationService.html":{}}}],["functions",{"_index":1039,"title":{"miscellaneous/functions.html":{}},"body":{"injectables/CurrenciesService.html":{},"miscellaneous/functions.html":{}}}],["furnished",{"_index":2909,"title":{},"body":{"license.html":{}}}],["generate",{"_index":2169,"title":{},"body":{"injectables/PrismaService.html":{},"classes/Query-3.html":{}}}],["generated",{"_index":1499,"title":{},"body":{"classes/FileType.html":{}}}],["generatepresignedurl",{"_index":1729,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["generatepresignedurl(key",{"_index":1734,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["generates",{"_index":1700,"title":{},"body":{"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{}}}],["generating",{"_index":1695,"title":{},"body":{"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/Query-1.html":{},"classes/Query-3.html":{}}}],["generation",{"_index":1037,"title":{},"body":{"injectables/CurrenciesService.html":{},"controllers/FilesS3PresignedController.html":{}}}],["generator.util",{"_index":1673,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["get('/health",{"_index":211,"title":{},"body":{"controllers/AppController.html":{}}}],["get('/health')@healthcheck",{"_index":163,"title":{},"body":{"controllers/AppController.html":{}}}],["get('/log",{"_index":176,"title":{},"body":{"controllers/AppController.html":{}}}],["get('findall",{"_index":743,"title":{},"body":{"controllers/CountriesController.html":{}}}],["get('findall')@httpcode(httpstatus.ok)@apiokresponse({type",{"_index":709,"title":{},"body":{"controllers/CountriesController.html":{}}}],["get('local/download/:path",{"_index":1541,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["get('v1/countries",{"_index":775,"title":{},"body":{"controllers/CountriesController.html":{}}}],["get('v1/country",{"_index":765,"title":{},"body":{"controllers/CountriesController.html":{}}}],["get('v1/download/:key",{"_index":1698,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["get(`${modules",{"_index":1010,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["get(key",{"_index":469,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["get(undefined)@httpcode(httpstatus.ok)@apiokresponse({type",{"_index":994,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["get_all",{"_index":747,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{}}}],["getboolean",{"_index":463,"title":{},"body":{"classes/ConfigService.html":{}}}],["getboolean(key",{"_index":472,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["getbooleanenvvar",{"_index":1405,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{},"coverage.html":{}}}],["getbooleanenvvar('logger_console_print",{"_index":1424,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["getbooleanenvvar('logger_database_storage",{"_index":1416,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["getbooleanenvvar('logger_duration",{"_index":1420,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["getbooleanenvvar('logger_log_in_file",{"_index":1426,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["getdownloadurl",{"_index":1696,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["getdownloadurl(@param('key",{"_index":1715,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["getdownloadurl(key",{"_index":1697,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["gethealth",{"_index":160,"title":{},"body":{"controllers/AppController.html":{}}}],["gethello",{"_index":161,"title":{},"body":{"controllers/AppController.html":{}}}],["getnodeenv",{"_index":476,"title":{},"body":{"classes/ConfigService.html":{}}}],["getnumber",{"_index":464,"title":{},"body":{"classes/ConfigService.html":{}}}],["getnumber(key",{"_index":474,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["getobjectcommand",{"_index":1501,"title":{},"body":{"classes/FileType.html":{},"injectables/FilesS3PresignedService.html":{}}}],["getprismaconfig",{"_index":478,"title":{},"body":{"classes/ConfigService.html":{}}}],["getschemapath",{"_index":1851,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["getschemapath(filterdto",{"_index":1867,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["getsignedurl",{"_index":1504,"title":{},"body":{"classes/FileType.html":{},"injectables/FilesS3PresignedService.html":{}}}],["getsignedurl(s3",{"_index":1518,"title":{},"body":{"classes/FileType.html":{}}}],["getsignedurl(this.s3",{"_index":1752,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["getting",{"_index":2503,"title":{"changelog.html":{},"contributing.html":{},"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["git",{"_index":2544,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["git+https://github.com/dharmesh",{"_index":2946,"title":{},"body":{"properties.html":{}}}],["github",{"_index":2536,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["given",{"_index":410,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{},"miscellaneous/typealiases.html":{}}}],["global",{"_index":9,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"modules/HelperModule.html":{},"classes/HttpErrorFilter.html":{},"miscellaneous/functions.html":{}}}],["granted",{"_index":2888,"title":{},"body":{"license.html":{}}}],["great",{"_index":2732,"title":{},"body":{"index.html":{}}}],["greater",{"_index":2711,"title":{},"body":{"miscellaneous/functions.html":{}}}],["grouped",{"_index":1645,"title":{},"body":{"controllers/FilesS3Controller.html":{}}}],["grow",{"_index":2873,"title":{},"body":{"index.html":{}}}],["guidelines",{"_index":2523,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["handle",{"_index":13,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CurrenciesService.html":{},"modules/FilesLocalModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/HomeController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResolvePromisesInterceptor.html":{},"index.html":{}}}],["handled",{"_index":2016,"title":{},"body":{"interfaces/IPaginationFieldConfig.html":{}}}],["handler",{"_index":2419,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["handles",{"_index":42,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/QueryFailedFilter.html":{}}}],["handling",{"_index":150,"title":{},"body":{"controllers/AppController.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CurrenciesService.html":{},"classes/FileNotImageException.html":{},"classes/FileType.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"miscellaneous/functions.html":{}}}],["hard",{"_index":1170,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["has_next_page",{"_index":1805,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/SortByDto.html":{}}}],["header",{"_index":375,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{}}}],["headers",{"_index":2763,"title":{},"body":{"index.html":{}}}],["health",{"_index":147,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/PrismaService.html":{}}}],["healthcheck",{"_index":185,"title":{},"body":{"controllers/AppController.html":{}}}],["healthcheckservice",{"_index":186,"title":{},"body":{"controllers/AppController.html":{}}}],["healthindicatorresult",{"_index":2186,"title":{},"body":{"injectables/PrismaService.html":{}}}],["helmet",{"_index":2664,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["helper",{"_index":1113,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["helpermodule",{"_index":275,"title":{"modules/HelperModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules.html":{},"overview.html":{}}}],["helps",{"_index":1960,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["here",{"_index":353,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"modules/FilesModule.html":{},"index.html":{}}}],["hereby",{"_index":2887,"title":{},"body":{"license.html":{}}}],["hi",{"_index":2110,"title":{},"body":{"injectables/PaginationService.html":{}}}],["holders",{"_index":2928,"title":{},"body":{"license.html":{}}}],["home",{"_index":137,"title":{},"body":{"modules/ApiModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{}}}],["home.controller",{"_index":1907,"title":{},"body":{"modules/HomeModule.html":{}}}],["home.service",{"_index":1899,"title":{},"body":{"controllers/HomeController.html":{},"modules/HomeModule.html":{}}}],["home/home.module",{"_index":132,"title":{},"body":{"modules/ApiModule.html":{}}}],["homecontroller",{"_index":1894,"title":{"controllers/HomeController.html":{}},"body":{"controllers/HomeController.html":{},"modules/HomeModule.html":{},"coverage.html":{}}}],["homemodule",{"_index":103,"title":{"modules/HomeModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/HomeModule.html":{},"modules.html":{},"overview.html":{}}}],["homepage",{"_index":2943,"title":{},"body":{"properties.html":{}}}],["homeservice",{"_index":1896,"title":{"injectables/HomeService.html":{}},"body":{"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"coverage.html":{},"overview.html":{}}}],["host",{"_index":38,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["host.switchtohttp",{"_index":67,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["http",{"_index":113,"title":{},"body":{"modules/ApiModule.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/Query.html":{},"classes/QueryFailedFilter.html":{},"index.html":{}}}],["http://localhost",{"_index":1258,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["http_status_messages",{"_index":2586,"title":{},"body":{"coverage.html":{}}}],["httpcode",{"_index":725,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{}}}],["httpcode(httpstatus.ok",{"_index":744,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{}}}],["httperrorfilter",{"_index":126,"title":{"classes/HttpErrorFilter.html":{}},"body":{"modules/ApiModule.html":{},"classes/HttpErrorFilter.html":{},"coverage.html":{}}}],["httpexception",{"_index":54,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/CurrenciesService.html":{},"controllers/FilesLocalController.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["httpexceptionfilter",{"_index":1932,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["httpmodule",{"_index":1882,"title":{},"body":{"modules/HelperModule.html":{}}}],["https://example",{"_index":1476,"title":{},"body":{"classes/FileResponseDto-1.html":{}}}],["https://example.com/path/to/file.jpg",{"_index":1485,"title":{},"body":{"classes/FileResponseDto-2.html":{},"classes/FileType.html":{}}}],["https://example.com/path/to/file.jpg'})@transform",{"_index":1492,"title":{},"body":{"classes/FileType.html":{}}}],["https://github.com/dharmesh",{"_index":2793,"title":{},"body":{"index.html":{},"properties.html":{}}}],["https://hooks.slack.com/services/xxxxxxxxx/xxxxxxxxx/xxxxxxxxxxxxxxxxxxxxxxxx",{"_index":1429,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["https://s3.amazonaws.com/bucket/path/to/file?signature",{"_index":1702,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["httpstatus",{"_index":55,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/HttpErrorFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["httpstatus.bad_request",{"_index":1082,"title":{},"body":{"injectables/CurrenciesService.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["httpstatus.conflict",{"_index":1072,"title":{},"body":{"injectables/CurrenciesService.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["httpstatus.internal_server_error",{"_index":73,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/CurrenciesService.html":{},"classes/HttpErrorFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["httpstatus.not_found",{"_index":1089,"title":{},"body":{"injectables/CurrenciesService.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["httpstatus.ok",{"_index":762,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{}}}],["httpstatus.payload_too_large",{"_index":1746,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["httpstatus.unprocessable_entity",{"_index":1613,"title":{},"body":{"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{}}}],["iappconfig",{"_index":490,"title":{"interfaces/IAppConfig.html":{}},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IAppConfig.html":{},"coverage.html":{}}}],["iawsconfig",{"_index":492,"title":{"interfaces/IAwsConfig.html":{}},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IAwsConfig.html":{},"coverage.html":{}}}],["id",{"_index":218,"title":{},"body":{"controllers/AppController.html":{},"controllers/CountriesController.html":{},"classes/Country.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"injectables/FilesLocalService.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{}}}],["id_country",{"_index":700,"title":{},"body":{"controllers/CountriesController.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/Query-2.html":{}}}],["id_currency",{"_index":909,"title":{},"body":{"classes/CreateCountryDto.html":{},"controllers/CurrenciesController.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{}}}],["id_timezone",{"_index":910,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/Query-2.html":{}}}],["idarea",{"_index":1209,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["idea",{"_index":2768,"title":{},"body":{"index.html":{}}}],["identification",{"_index":823,"title":{},"body":{"classes/Country.html":{}}}],["identifier",{"_index":876,"title":{},"body":{"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/Currency.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"coverage.html":{}}}],["ifieldconfig",{"_index":2095,"title":{},"body":{"injectables/PaginationService.html":{}}}],["ifileconfig",{"_index":494,"title":{"interfaces/IFileConfig.html":{}},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IFileConfig.html":{},"coverage.html":{}}}],["ijwtconfig",{"_index":496,"title":{"interfaces/IJWTConfig.html":{}},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IJWTConfig.html":{},"coverage.html":{}}}],["image",{"_index":1434,"title":{},"body":{"classes/FileNotImageException.html":{}}}],["image.exception.ts",{"_index":1432,"title":{},"body":{"classes/FileNotImageException.html":{},"coverage.html":{}}}],["image.exception.ts:20",{"_index":1439,"title":{},"body":{"classes/FileNotImageException.html":{}}}],["image.jpg",{"_index":1531,"title":{},"body":{"classes/FileUploadDto.html":{},"injectables/FilesS3PresignedService.html":{}}}],["image.jpg'})@isstring",{"_index":1529,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["imagefilefilter",{"_index":1566,"title":{},"body":{"controllers/FilesLocalController.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"coverage.html":{}}}],["imaginary",{"_index":224,"title":{},"body":{"controllers/AppController.html":{}}}],["imperative",{"_index":2859,"title":{},"body":{"index.html":{}}}],["implemented",{"_index":1767,"title":{},"body":{"injectables/FilesService.html":{}}}],["implements",{"_index":15,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{}}}],["implied",{"_index":2918,"title":{},"body":{"license.html":{}}}],["import",{"_index":53,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IFileConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UpdateDto.html":{},"classes/UpdateDto-1.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{}}}],["imported",{"_index":1637,"title":{},"body":{"modules/FilesModule.html":{},"modules/HelperModule.html":{}}}],["importing",{"_index":115,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{}}}],["imports",{"_index":123,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{}}}],["in'})@isnotempty()@isstring",{"_index":1788,"title":{},"body":{"classes/FilterQueryDto.html":{}}}],["include",{"_index":1160,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/HttpErrorFilter.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{},"contributing.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["included",{"_index":1641,"title":{},"body":{"modules/FilesModule.html":{},"license.html":{}}}],["includes",{"_index":279,"title":{},"body":{"modules/AppModule.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/FileUploadDto.html":{},"controllers/FilesS3Controller.html":{},"injectables/FilesS3Service.html":{},"classes/Query-3.html":{},"index.html":{}}}],["including",{"_index":822,"title":{},"body":{"classes/Country.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/UtilsService.html":{},"license.html":{}}}],["inclusion",{"_index":1483,"title":{},"body":{"classes/FileResponseDto-2.html":{}}}],["incoming",{"_index":1595,"title":{},"body":{"modules/FilesLocalModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{}}}],["ind",{"_index":880,"title":{},"body":{"classes/Country.html":{},"classes/CreateCountryDto.html":{}}}],["index",{"_index":17,"title":{"index.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/FilterQueryDto.html":{},"controllers/HomeController.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UtilsService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["indexes",{"_index":1996,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["india",{"_index":883,"title":{},"body":{"classes/Country.html":{},"classes/CreateCountryDto.html":{}}}],["indian",{"_index":860,"title":{},"body":{"classes/Country.html":{},"classes/CreateDto.html":{},"classes/Currency.html":{}}}],["indicate",{"_index":213,"title":{},"body":{"controllers/AppController.html":{}}}],["indicates",{"_index":1652,"title":{},"body":{"controllers/FilesS3Controller.html":{},"classes/PaginationResponseDto.html":{}}}],["indicating",{"_index":705,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{}}}],["individual",{"_index":1301,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["inestapplication",{"_index":2718,"title":{},"body":{"miscellaneous/functions.html":{}}}],["infer",{"_index":1616,"title":{},"body":{"injectables/FilesLocalService.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/HomeService.html":{},"injectables/PrismaService.html":{}}}],["infineit/winston",{"_index":188,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"dependencies.html":{}}}],["infinity",{"_index":1802,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/SortByDto.html":{},"miscellaneous/enumerations.html":{}}}],["infinitypagination",{"_index":769,"title":{},"body":{"controllers/CountriesController.html":{}}}],["infinitypaginationresponse",{"_index":766,"title":{},"body":{"controllers/CountriesController.html":{}}}],["infinitypaginationresponse(country",{"_index":776,"title":{},"body":{"controllers/CountriesController.html":{}}}],["infinitypaginationresponsedto",{"_index":767,"title":{},"body":{"controllers/CountriesController.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UpdateDto.html":{},"classes/UpdateDto-1.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{}}}],["information",{"_index":685,"title":{},"body":{"controllers/CountriesController.html":{},"classes/Country.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"controllers/HomeController.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["infrastructure",{"_index":1626,"title":{},"body":{"modules/FilesModule.html":{}}}],["infrastructure/uploader/local/files.module",{"_index":1632,"title":{},"body":{"modules/FilesModule.html":{}}}],["infrastructure/uploader/s3",{"_index":1634,"title":{},"body":{"modules/FilesModule.html":{}}}],["infrastructure/uploader/s3/files.module",{"_index":1633,"title":{},"body":{"modules/FilesModule.html":{}}}],["infrastructureuploadermodule",{"_index":1636,"title":{},"body":{"modules/FilesModule.html":{},"coverage.html":{}}}],["inherits",{"_index":2444,"title":{},"body":{"classes/UpdateDto-1.html":{}}}],["initial",{"_index":2519,"title":{},"body":{"changelog.html":{}}}],["initialization",{"_index":2153,"title":{},"body":{"injectables/PrismaService.html":{}}}],["initialized",{"_index":2184,"title":{},"body":{"injectables/PrismaService.html":{}}}],["initializes",{"_index":2699,"title":{},"body":{"miscellaneous/functions.html":{}}}],["inject",{"_index":181,"title":{},"body":{"controllers/AppController.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["inject(loggerkey",{"_index":204,"title":{},"body":{"controllers/AppController.html":{}}}],["injectable",{"_index":388,"title":{"injectables/CommaSeparated.html":{},"injectables/CurrenciesService.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"injectables/HomeService.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{}},"body":{"injectables/CommaSeparated.html":{},"injectables/CurrenciesService.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"injectables/HomeService.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"coverage.html":{}}}],["injectables",{"_index":390,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/CurrenciesService.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"injectables/HomeService.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"overview.html":{}}}],["injected",{"_index":1759,"title":{},"body":{"injectables/FilesS3Service.html":{}}}],["injection",{"_index":2223,"title":{},"body":{"classes/Query.html":{}}}],["inodeemailerconfig",{"_index":498,"title":{"interfaces/INodeEmailerConfig.html":{}},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/INodeEmailerConfig.html":{},"coverage.html":{}}}],["input",{"_index":441,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"injectables/SortBy.html":{},"miscellaneous/functions.html":{}}}],["inr",{"_index":954,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{}}}],["insert",{"_index":1148,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"interfaces/QueryOptions.html":{}}}],["insert(values",{"_index":2364,"title":{},"body":{"classes/Query-3.html":{}}}],["inserted",{"_index":1073,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["inserted.insertid",{"_index":1075,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["insertid",{"_index":2351,"title":{},"body":{"classes/Query-3.html":{}}}],["insertid,name",{"_index":2280,"title":{},"body":{"classes/Query-2.html":{}}}],["inserting",{"_index":2242,"title":{},"body":{"classes/Query.html":{},"classes/Query-3.html":{}}}],["insertoptions",{"_index":2365,"title":{},"body":{"classes/Query-3.html":{}}}],["instagram",{"_index":2884,"title":{},"body":{"index.html":{}}}],["install",{"_index":2666,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["installation",{"_index":2791,"title":{},"body":{"index.html":{}}}],["installed",{"_index":2788,"title":{},"body":{"index.html":{}}}],["instance",{"_index":27,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CurrenciesService.html":{},"classes/FileNotImageException.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"injectables/PrismaService.html":{},"classes/QueryFailedFilter.html":{},"classes/UserNotFoundException.html":{},"miscellaneous/functions.html":{}}}],["instanceof",{"_index":71,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/PrismaService.html":{}}}],["instances",{"_index":1935,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["instantiated",{"_index":1640,"title":{},"body":{"modules/FilesModule.html":{}}}],["integer",{"_index":2716,"title":{},"body":{"miscellaneous/functions.html":{}}}],["integrates",{"_index":1629,"title":{},"body":{"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["integration",{"_index":1666,"title":{},"body":{"modules/FilesS3Module.html":{}}}],["interact",{"_index":986,"title":{},"body":{"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{}}}],["interacting",{"_index":202,"title":{},"body":{"controllers/AppController.html":{},"modules/FilesS3PresignedModule.html":{},"index.html":{}}}],["interactions",{"_index":1723,"title":{},"body":{"modules/FilesS3PresignedModule.html":{}}}],["interacts",{"_index":1027,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["intercept",{"_index":2413,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["intercept(context",{"_index":2414,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["interceptor",{"_index":2403,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["intercepts",{"_index":2418,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["interface",{"_index":1153,"title":{"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"interfaces/QueryOptions.html":{}},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"interfaces/QueryOptions.html":{},"coverage.html":{}}}],["interfaces",{"_index":1940,"title":{},"body":{"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"interfaces/QueryOptions.html":{},"overview.html":{}}}],["internal",{"_index":83,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpErrorFilter.html":{}}}],["international",{"_index":867,"title":{},"body":{"classes/Country.html":{},"classes/CreateCountryDto.html":{}}}],["introducing",{"_index":2731,"title":{},"body":{"index.html":{}}}],["introduction",{"_index":2730,"title":{},"body":{"index.html":{}}}],["invalid",{"_index":430,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["involving",{"_index":1692,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["ipagemetadtoparameters",{"_index":1955,"title":{"interfaces/IPageMetaDtoParameters.html":{}},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"coverage.html":{}}}],["ipaginationfieldconfig",{"_index":1058,"title":{"interfaces/IPaginationFieldConfig.html":{}},"body":{"injectables/CurrenciesService.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/UtilsService.html":{},"coverage.html":{}}}],["ipostgresqlconfig",{"_index":501,"title":{"interfaces/IPostgreSQLConfig.html":{}},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IPostgreSQLConfig.html":{},"coverage.html":{}}}],["isarray",{"_index":1832,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["isboolean",{"_index":1315,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-3.html":{}}}],["isboolean()@isoptional",{"_index":1285,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["isdefined",{"_index":938,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{}}}],["isdefined()@isnotempty()@isstring()@apiproperty({type",{"_index":930,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["isdefined()@isnotempty()@isstring()@maxlength(10)@apiproperty({type",{"_index":974,"title":{},"body":{"classes/CreateDto.html":{}}}],["isdefined()@isnotempty()@isstring()@maxlength(6)@apiproperty({type",{"_index":971,"title":{},"body":{"classes/CreateDto.html":{}}}],["isdefined()@isnotempty()@isstring()@maxlength(80)@apiproperty({type",{"_index":963,"title":{},"body":{"classes/CreateDto.html":{}}}],["isdefined()@type(undefined)@isnumber()@min(0)@apiproperty({type",{"_index":959,"title":{},"body":{"classes/CreateDto.html":{}}}],["isendgridconfig",{"_index":503,"title":{"interfaces/ISendGridConfig.html":{}},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/ISendGridConfig.html":{},"coverage.html":{}}}],["isenum",{"_index":480,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["isenum(environment",{"_index":1244,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-3.html":{}}}],["isenum(environment)@isoptional",{"_index":1236,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-3.html":{}}}],["isenum(filedriver",{"_index":522,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["isenum(filedriver)@isoptional",{"_index":1357,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["isenum(paginationtype",{"_index":1808,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["isglobal",{"_index":306,"title":{},"body":{"modules/AppModule.html":{}}}],["ishealthy",{"_index":2161,"title":{},"body":{"injectables/PrismaService.html":{}}}],["isin",{"_index":1791,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["isin(abc(x",{"_index":1823,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["isint",{"_index":481,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{}}}],["isint()@isoptional",{"_index":1305,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["isint()@min(0)@max(65535",{"_index":1310,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["isint()@min(0)@max(65535)@isoptional",{"_index":1215,"title":{},"body":{"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{}}}],["ismsconfig",{"_index":505,"title":{"interfaces/ISMSConfig.html":{}},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/ISMSConfig.html":{},"coverage.html":{}}}],["isn't",{"_index":1989,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["isnan(numbervalue",{"_index":1838,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["isnotempty",{"_index":939,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["isnotempty()@isstring",{"_index":1786,"title":{},"body":{"classes/FilterQueryDto.html":{}}}],["isnotempty()@isstring()@apiproperty({type",{"_index":913,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["isnumber",{"_index":977,"title":{},"body":{"classes/CreateDto.html":{},"classes/FileUploadDto.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{}}}],["isnumber()@isoptional",{"_index":2375,"title":{},"body":{"classes/QueryCountryDto.html":{}}}],["isnumberstringornumber",{"_index":1794,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["isnumberstringornumber(validationoptions",{"_index":2708,"title":{},"body":{"miscellaneous/functions.html":{}}}],["iso",{"_index":824,"title":{},"body":{"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/Query-2.html":{},"classes/SortByDto.html":{}}}],["iso3",{"_index":846,"title":{},"body":{"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/Query-2.html":{}}}],["isoptional",{"_index":482,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{}}}],["isoptional()@isboolean",{"_index":1393,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["isoptional()@isstring",{"_index":1391,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["isstring",{"_index":483,"title":{},"body":{"classes/ConfigService.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileUploadDto.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{}}}],["isstring()@isoptional",{"_index":1213,"title":{},"body":{"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["issue",{"_index":2513,"title":{},"body":{"changelog.html":{},"contributing.html":{}}}],["issued",{"_index":229,"title":{},"body":{"controllers/AppController.html":{}}}],["issuer",{"_index":618,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IJWTConfig.html":{}}}],["issues",{"_index":2865,"title":{},"body":{"index.html":{}}}],["ist",{"_index":852,"title":{},"body":{"classes/Country.html":{}}}],["isurl",{"_index":485,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{}}}],["isurl({require_tld",{"_index":1217,"title":{},"body":{"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{}}}],["isvalid",{"_index":427,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["isvalidfield",{"_index":1792,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["isvalidfield(entity",{"_index":2713,"title":{},"body":{"miscellaneous/functions.html":{}}}],["it's",{"_index":2735,"title":{},"body":{"index.html":{}}}],["item",{"_index":1981,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["items",{"_index":1846,"title":{},"body":{"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["iterate",{"_index":459,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["iuploadfileconfig",{"_index":507,"title":{"interfaces/IUploadFileConfig.html":{}},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IUploadFileConfig.html":{},"coverage.html":{}}}],["javascript",{"_index":2775,"title":{},"body":{"index.html":{}}}],["john",{"_index":220,"title":{},"body":{"controllers/AppController.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["johndoe",{"_index":219,"title":{},"body":{"controllers/AppController.html":{}}}],["join",{"_index":1165,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/IPaginationFieldConfig.html":{},"injectables/PaginationService.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{},"index.html":{}}}],["joinclause",{"_index":1197,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["joinquery",{"_index":2098,"title":{},"body":{"injectables/PaginationService.html":{}}}],["joins",{"_index":1166,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["joins.join",{"_index":1199,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["joins.length",{"_index":1198,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["jointable",{"_index":2020,"title":{},"body":{"interfaces/IPaginationFieldConfig.html":{}}}],["jointables",{"_index":1100,"title":{},"body":{"injectables/CurrenciesService.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["jointables.join",{"_index":1107,"title":{},"body":{"injectables/CurrenciesService.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["jointables.push(config.jointable(alias",{"_index":2484,"title":{},"body":{"classes/UtilsService.html":{}}}],["jointables.push(config.jointable(index",{"_index":2483,"title":{},"body":{"classes/UtilsService.html":{}}}],["json",{"_index":798,"title":{},"body":{"controllers/CountriesController.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/Query.html":{},"classes/SortByDto.html":{}}}],["json.parse(value",{"_index":1780,"title":{},"body":{"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{}}}],["json.stringify(_.clone(errorresponse",{"_index":2398,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["json.stringify(_.clone(r",{"_index":368,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["json.stringify(_.clone(request.body",{"_index":366,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["json.stringify(errorresponse",{"_index":1929,"title":{},"body":{"classes/HttpErrorFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["json.stringify(reqstrobj",{"_index":377,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{}}}],["json.stringify(requestdata",{"_index":2228,"title":{},"body":{"classes/Query.html":{}}}],["json.stringify(responsedata",{"_index":2229,"title":{},"body":{"classes/Query.html":{}}}],["json.stringify(resstrobj",{"_index":382,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{}}}],["jwt",{"_index":2743,"title":{},"body":{"index.html":{}}}],["jwtconfig",{"_index":613,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["jwtservice",{"_index":1888,"title":{},"body":{"modules/HelperModule.html":{}}}],["k8s",{"_index":2845,"title":{},"body":{"index.html":{}}}],["key",{"_index":471,"title":{},"body":{"classes/ConfigService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileType.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PrismaService.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"interfaces/QueryOptions.html":{},"classes/SortByDto.html":{},"miscellaneous/functions.html":{}}}],["key?awsaccesskeyid=access_key&expires=expiration_time&signature=signature",{"_index":1478,"title":{},"body":{"classes/FileResponseDto-1.html":{}}}],["keyof",{"_index":1776,"title":{},"body":{"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{}}}],["keys",{"_index":1174,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"interfaces/QueryOptions.html":{}}}],["keys.join",{"_index":1182,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"interfaces/QueryOptions.html":{}}}],["keys.map((key",{"_index":2274,"title":{},"body":{"classes/Query-2.html":{}}}],["kind",{"_index":2917,"title":{},"body":{"license.html":{}}}],["known",{"_index":2125,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["kubectl",{"_index":2848,"title":{},"body":{"index.html":{}}}],["large",{"_index":1747,"title":{},"body":{"injectables/FilesS3PresignedService.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["last",{"_index":1982,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["lastkey",{"_index":2291,"title":{},"body":{"classes/Query-2.html":{},"classes/Query-3.html":{}}}],["latest",{"_index":2736,"title":{},"body":{"index.html":{}}}],["legend",{"_index":93,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/CountriesModule.html":{},"modules/CurrenciesModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{},"overview.html":{}}}],["liability",{"_index":2932,"title":{},"body":{"license.html":{}}}],["liable",{"_index":2929,"title":{},"body":{"license.html":{}}}],["library",{"_index":2328,"title":{},"body":{"classes/Query-3.html":{}}}],["license",{"_index":2879,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["licensed",{"_index":2872,"title":{},"body":{"index.html":{}}}],["limit",{"_index":781,"title":{},"body":{"controllers/CountriesController.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"dependencies.html":{}}}],["limit/tsconfig",{"_index":2647,"title":{},"body":{"dependencies.html":{}}}],["limitation",{"_index":2897,"title":{},"body":{"license.html":{}}}],["limited",{"_index":2919,"title":{},"body":{"license.html":{}}}],["limits",{"_index":1688,"title":{},"body":{"modules/FilesS3Module.html":{}}}],["line",{"_index":422,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{}}}],["linkedin",{"_index":2883,"title":{},"body":{"index.html":{}}}],["lint",{"_index":2781,"title":{},"body":{"index.html":{}}}],["linter",{"_index":2776,"title":{},"body":{"index.html":{}}}],["linting",{"_index":2556,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["list",{"_index":397,"title":{},"body":{"injectables/CommaSeparated.html":{},"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"modules/FilesLocalModule.html":{},"interfaces/QueryOptions.html":{},"injectables/SortBy.html":{}}}],["literal",{"_index":2469,"title":{},"body":{"classes/UtilsService.html":{},"miscellaneous/typealiases.html":{}}}],["load",{"_index":308,"title":{},"body":{"modules/AppModule.html":{}}}],["local",{"_index":1361,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["located",{"_index":859,"title":{},"body":{"classes/Country.html":{},"classes/CreateCountryDto.html":{}}}],["location",{"_index":1475,"title":{},"body":{"classes/FileResponseDto-1.html":{}}}],["lodash",{"_index":336,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/DynamicQueryBuilder.html":{},"classes/HttpErrorFilter.html":{},"injectables/PrismaService.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{}}}],["log",{"_index":178,"title":{},"body":{"controllers/AppController.html":{}}}],["log_in_file",{"_index":1425,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["logger",{"_index":179,"title":{},"body":{"controllers/AppController.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/HttpErrorFilter.html":{},"classes/QueryFailedFilter.html":{},"dependencies.html":{}}}],["logger.error",{"_index":1928,"title":{},"body":{"classes/HttpErrorFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["logger.error(`${request.method",{"_index":1927,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["logger/context/infrastructure/nestjs/contextmodule",{"_index":289,"title":{},"body":{"modules/AppModule.html":{}}}],["logger/logger/domain/logger",{"_index":189,"title":{},"body":{"controllers/AppController.html":{}}}],["logger/logger/infrastructure/nestjs/loggermodule",{"_index":291,"title":{},"body":{"modules/AppModule.html":{}}}],["logger_app",{"_index":1381,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["logger_console_print",{"_index":1382,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["logger_context",{"_index":1383,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["logger_database_storage",{"_index":1384,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["logger_duration",{"_index":1385,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["logger_duration_log_level",{"_index":1386,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["logger_log_in_file",{"_index":1387,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["logger_log_level",{"_index":1388,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["logger_organization",{"_index":1389,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["logger_slack_inc_webhook_url",{"_index":1390,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["loggerconfig",{"_index":299,"title":{},"body":{"modules/AppModule.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"miscellaneous/typealiases.html":{}}}],["loggerkey",{"_index":187,"title":{},"body":{"controllers/AppController.html":{}}}],["loggermodule",{"_index":290,"title":{},"body":{"modules/AppModule.html":{}}}],["loggermodule.forroot(prismaservice",{"_index":311,"title":{},"body":{"modules/AppModule.html":{}}}],["logging",{"_index":2219,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["logic",{"_index":352,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"injectables/CurrenciesService.html":{},"modules/FilesLocalModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{}}}],["logs",{"_index":1918,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["long",{"_index":958,"title":{},"body":{"classes/CreateDto.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["lowercasetransformer",{"_index":2638,"title":{},"body":{"coverage.html":{}}}],["lts.1",{"_index":2669,"title":{},"body":{"dependencies.html":{}}}],["m",{"_index":2549,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["mac",{"_index":2820,"title":{},"body":{"index.html":{}}}],["made",{"_index":1598,"title":{},"body":{"modules/FilesLocalModule.html":{}}}],["main",{"_index":2478,"title":{},"body":{"classes/UtilsService.html":{},"miscellaneous/functions.html":{}}}],["make",{"_index":1883,"title":{},"body":{"modules/HelperModule.html":{},"contributing.html":{}}}],["makes",{"_index":2445,"title":{},"body":{"classes/UpdateDto-1.html":{},"miscellaneous/typealiases.html":{}}}],["making",{"_index":1884,"title":{},"body":{"modules/HelperModule.html":{},"classes/UpdateDto-1.html":{}}}],["manage",{"_index":814,"title":{},"body":{"modules/CountriesModule.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesService.html":{},"injectables/PrismaService.html":{}}}],["management",{"_index":2327,"title":{},"body":{"classes/Query-3.html":{}}}],["manages",{"_index":1604,"title":{},"body":{"injectables/FilesLocalService.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{}}}],["managing",{"_index":134,"title":{},"body":{"modules/ApiModule.html":{},"modules/CurrenciesModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{}}}],["manipulation",{"_index":2329,"title":{},"body":{"classes/Query-3.html":{}}}],["map",{"_index":2424,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{},"classes/UtilsService.html":{}}}],["map((filter",{"_index":2101,"title":{},"body":{"injectables/PaginationService.html":{}}}],["map((key",{"_index":2286,"title":{},"body":{"classes/Query-2.html":{}}}],["map((s",{"_index":2112,"title":{},"body":{"injectables/PaginationService.html":{}}}],["map((sortitem",{"_index":2491,"title":{},"body":{"classes/UtilsService.html":{}}}],["map((val",{"_index":2104,"title":{},"body":{"injectables/PaginationService.html":{}}}],["markdown",{"_index":2813,"title":{},"body":{"index.html":{}}}],["marked",{"_index":1877,"title":{},"body":{"modules/HelperModule.html":{}}}],["marks",{"_index":1482,"title":{},"body":{"classes/FileResponseDto-2.html":{},"injectables/FilesS3Service.html":{}}}],["match",{"_index":454,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["matches",{"_index":1790,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["matches(/^(asc|desc|asc|desc",{"_index":1829,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["matching",{"_index":88,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UpdateDto.html":{},"classes/UpdateDto-1.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"changelog.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["math.ceil(totalitems",{"_index":1988,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["math.min(startindex",{"_index":1997,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["max",{"_index":486,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["max(500",{"_index":1815,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["max(65535",{"_index":515,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{}}}],["max_file_size",{"_index":1347,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["max_upload_file_size",{"_index":660,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IUploadFileConfig.html":{}}}],["maxconnections",{"_index":1329,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["maxfilesize",{"_index":676,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"interfaces/IFileConfig.html":{}}}],["maximum",{"_index":1307,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"injectables/FilesS3PresignedService.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["maxlength",{"_index":940,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{}}}],["maxlength(10",{"_index":981,"title":{},"body":{"classes/CreateDto.html":{}}}],["maxlength(2",{"_index":945,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["maxlength(3",{"_index":946,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{}}}],["maxlength(6",{"_index":980,"title":{},"body":{"classes/CreateDto.html":{}}}],["maxlength(80",{"_index":979,"title":{},"body":{"classes/CreateDto.html":{}}}],["maxpages",{"_index":1957,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["maxpagesaftercurrentpage",{"_index":1995,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["maxpagesbeforecurrentpage",{"_index":1994,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["maybetype",{"_index":2953,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["meaning",{"_index":1878,"title":{},"body":{"modules/HelperModule.html":{}}}],["memberof",{"_index":1154,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FilterQueryDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/Query-1.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"classes/SortByDto.html":{}}}],["merchantability",{"_index":2921,"title":{},"body":{"license.html":{}}}],["merge",{"_index":2900,"title":{},"body":{"license.html":{}}}],["message",{"_index":81,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/CommaSeparated.html":{},"injectables/CurrenciesService.html":{},"classes/FileNotImageException.html":{},"injectables/FilesS3PresignedService.html":{},"classes/FilterQueryDto.html":{},"classes/HttpErrorFilter.html":{},"classes/PaginationQueryDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UserNotFoundException.html":{},"index.html":{}}}],["message');example",{"_index":2455,"title":{},"body":{"classes/UserNotFoundException.html":{}}}],["meta",{"_index":2056,"title":{},"body":{"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{}}}],["metadata",{"_index":34,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"controllers/FilesS3Controller.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/QueryFailedFilter.html":{},"dependencies.html":{}}}],["metapage",{"_index":2086,"title":{},"body":{"injectables/PaginationService.html":{}}}],["method",{"_index":1360,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"controllers/FilesS3Controller.html":{},"injectables/FilesS3Service.html":{},"classes/HttpErrorFilter.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{}}}],["methods",{"_index":21,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"controllers/HomeController.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/UtilsService.html":{}}}],["method},${url},${reqdata},${resdata",{"_index":2249,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["middle",{"_index":1993,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["middleware",{"_index":1667,"title":{},"body":{"modules/FilesS3Module.html":{},"miscellaneous/functions.html":{}}}],["migration",{"_index":2831,"title":{},"body":{"index.html":{}}}],["migrationdocker",{"_index":2833,"title":{},"body":{"index.html":{}}}],["mimetype",{"_index":1950,"title":{},"body":{"interfaces/IFileConfig.html":{}}}],["min",{"_index":487,"title":{},"body":{"classes/ConfigService.html":{},"classes/CreateDto.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["min(0",{"_index":514,"title":{},"body":{"classes/ConfigService.html":{},"classes/CreateDto.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{}}}],["min(1",{"_index":1810,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["min(10",{"_index":1814,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["minikube",{"_index":2847,"title":{},"body":{"index.html":{}}}],["minimum",{"_index":1809,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["minutes",{"_index":890,"title":{},"body":{"classes/Country.html":{}}}],["miscellaneous",{"_index":2682,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["mit",{"_index":2871,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["modify",{"_index":2899,"title":{},"body":{"license.html":{}}}],["module",{"_index":89,"title":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/CountriesModule.html":{},"modules/CurrenciesModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{}},"body":{"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/FileType.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesService.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/PaginationQueryDto.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-3.html":{},"classes/SortByDto.html":{},"classes/UpdateDto-1.html":{},"overview.html":{}}}],["module,method,url,req,response",{"_index":2247,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["modules",{"_index":91,"title":{"modules.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/CountriesModule.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"modules.html":{},"overview.html":{}}}],["modules/api.module",{"_index":301,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/countries/dto/country",{"_index":1798,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["module}','${method}','${url}','${reqescvalue}','${resescvalue",{"_index":2248,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["more",{"_index":2147,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"index.html":{}}}],["much",{"_index":2537,"title":{},"body":{"contributing.html":{}}}],["multer",{"_index":1561,"title":{},"body":{"controllers/FilesLocalController.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"dependencies.html":{}}}],["multermodule",{"_index":1668,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["multermodule.registerasync",{"_index":1676,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["multers3",{"_index":1674,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["multers3.auto_content_type",{"_index":1683,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["multifiledestdir",{"_index":2628,"title":{},"body":{"coverage.html":{}}}],["multiline",{"_index":541,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["multipart/form",{"_index":1576,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["multiple",{"_index":2495,"title":{},"body":{"classes/UtilsService.html":{}}}],["multiple_file_path",{"_index":664,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IUploadFileConfig.html":{}}}],["multiplestatements",{"_index":570,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["my_table",{"_index":2080,"title":{},"body":{"injectables/PaginationService.html":{}}}],["mycontext",{"_index":1413,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["myset",{"_index":2476,"title":{},"body":{"classes/UtilsService.html":{}}}],["myset.add(alias",{"_index":2482,"title":{},"body":{"classes/UtilsService.html":{}}}],["myset.has(alias",{"_index":2481,"title":{},"body":{"classes/UtilsService.html":{}}}],["mysql",{"_index":558,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["n",{"_index":539,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["name",{"_index":30,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileNotImageException.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/FilterQueryDto.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["name_plural",{"_index":950,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/Query-3.html":{}}}],["names",{"_index":2021,"title":{},"body":{"interfaces/IPaginationFieldConfig.html":{},"classes/Query-3.html":{}}}],["native",{"_index":975,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{}}}],["navigate",{"_index":1962,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["near",{"_index":1991,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["necessary",{"_index":812,"title":{},"body":{"modules/CountriesModule.html":{},"modules/CurrenciesModule.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesS3PresignedModule.html":{},"controllers/HomeController.html":{}}}],["needing",{"_index":1881,"title":{},"body":{"modules/HelperModule.html":{}}}],["nest",{"_index":2870,"title":{},"body":{"index.html":{},"properties.html":{}}}],["nested",{"_index":2404,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["nestederrormessage",{"_index":387,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["nestinterceptor",{"_index":2422,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["nestjs",{"_index":199,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"injectables/FilesService.html":{},"classes/FilterQueryDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/PaginationQueryDto.html":{},"injectables/ResolvePromisesInterceptor.html":{},"classes/SortByDto.html":{},"classes/UserNotFoundException.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["nestjs/axios",{"_index":1885,"title":{},"body":{"modules/HelperModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":56,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/FileNotImageException.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UserNotFoundException.html":{},"dependencies.html":{}}}],["nestjs/common/utils/random",{"_index":1672,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["nestjs/config",{"_index":285,"title":{},"body":{"modules/AppModule.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"injectables/FilesLocalService.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/HomeService.html":{},"injectables/PrismaService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":57,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":1889,"title":{},"body":{"modules/HelperModule.html":{}}}],["nestjs/mapped",{"_index":2449,"title":{},"body":{"classes/UpdateDto-1.html":{}}}],["nestjs/platform",{"_index":1556,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":184,"title":{},"body":{"controllers/AppController.html":{},"controllers/CountriesController.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"classes/Currency.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"controllers/HomeController.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UpdateDto.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":154,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/PrismaService.html":{},"dependencies.html":{}}}],["new",{"_index":77,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/CountriesController.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/FileNotImageException.html":{},"classes/FileType.html":{},"injectables/FilesLocalService.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"controllers/HomeController.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/Query.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/QueryFailedFilter.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"contributing.html":{},"coverage.html":{},"index.html":{}}}],["newobj",{"_index":2196,"title":{},"body":{"injectables/PrismaService.html":{}}}],["newobj[key",{"_index":2201,"title":{},"body":{"injectables/PrismaService.html":{}}}],["next",{"_index":421,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{},"index.html":{}}}],["next.handle().pipe(map((data",{"_index":2428,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["ng",{"_index":1998,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["nice",{"_index":933,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["nice_name",{"_index":911,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/Query-2.html":{}}}],["node.js",{"_index":2734,"title":{},"body":{"index.html":{}}}],["node_emailer_from_email",{"_index":644,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/INodeEmailerConfig.html":{}}}],["node_emailer_host",{"_index":636,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/INodeEmailerConfig.html":{}}}],["node_emailer_password",{"_index":642,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/INodeEmailerConfig.html":{}}}],["node_emailer_port",{"_index":638,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/INodeEmailerConfig.html":{}}}],["node_emailer_to_email",{"_index":646,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/INodeEmailerConfig.html":{}}}],["node_emailer_user",{"_index":640,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/INodeEmailerConfig.html":{}}}],["node_env",{"_index":1227,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-3.html":{}}}],["nodeemailerconfig",{"_index":635,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["nodeenv",{"_index":466,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-3.html":{}}}],["non",{"_index":1433,"title":{},"body":{"classes/FileNotImageException.html":{}}}],["none",{"_index":1801,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"miscellaneous/enumerations.html":{}}}],["noninfringement",{"_index":2925,"title":{},"body":{"license.html":{}}}],["notes",{"_index":2863,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":2453,"title":{},"body":{"classes/UserNotFoundException.html":{}}}],["nothing",{"_index":1080,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["notice",{"_index":2912,"title":{},"body":{"license.html":{}}}],["npm",{"_index":2673,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["null",{"_index":724,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/HttpErrorFilter.html":{},"classes/PaginationQueryDto.html":{},"injectables/PrismaService.html":{},"classes/Query-2.html":{},"classes/QueryCountryDto.html":{},"interfaces/QueryOptions.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UtilsService.html":{}}}],["num_code",{"_index":912,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/Query-2.html":{}}}],["number",{"_index":227,"title":{},"body":{"controllers/AppController.html":{},"classes/ConfigService.html":{},"classes/Country.html":{},"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileUploadDto.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"interfaces/IAppConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"interfaces/QueryOptions.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{}}}],["number(strippedvalue",{"_index":1837,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["number(this.get(key",{"_index":550,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["number(total[0].count",{"_index":2093,"title":{},"body":{"injectables/PaginationService.html":{}}}],["number(value",{"_index":1778,"title":{},"body":{"classes/FilterCountryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortCountryDto.html":{}}}],["numbers",{"_index":398,"title":{},"body":{"injectables/CommaSeparated.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/Query-2.html":{},"injectables/SortBy.html":{},"classes/UtilsService.html":{}}}],["numbervalue",{"_index":1836,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["numeric",{"_index":2710,"title":{},"body":{"miscellaneous/functions.html":{}}}],["o",{"_index":240,"title":{},"body":{"controllers/AppController.html":{}}}],["object",{"_index":180,"title":{},"body":{"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/CountriesController.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-2.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/FilterQueryDto.html":{},"controllers/HomeController.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/PaginationQueryDto.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"interfaces/QueryOptions.html":{},"classes/SortByDto.html":{},"classes/UpdateDto-1.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{}}}],["object.assign",{"_index":2197,"title":{},"body":{"injectables/PrismaService.html":{}}}],["object.defineproperty(pagination",{"_index":2069,"title":{},"body":{"classes/PaginationResponseDto.html":{}}}],["object.entries(newobj",{"_index":2198,"title":{},"body":{"injectables/PrismaService.html":{}}}],["object.keys(conditions).map",{"_index":1204,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["object.keys(conditions).map((key",{"_index":1186,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["object.keys(data).filter((key",{"_index":2283,"title":{},"body":{"classes/Query-2.html":{}}}],["object.keys(optionalconditions).foreach((key",{"_index":1191,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["object.keys(payload).length",{"_index":1081,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["object.keys(process.env",{"_index":545,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["object.keys(values).length",{"_index":1205,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["object.keys(values).map((key",{"_index":1203,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["object.keys(where)[object.keys(where).length",{"_index":2292,"title":{},"body":{"classes/Query-2.html":{},"classes/Query-3.html":{}}}],["object.values(conditions",{"_index":1208,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["object.values(values",{"_index":1207,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["objects",{"_index":50,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/CountriesController.html":{},"classes/FilterQueryDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/PaginationQueryDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"classes/SortByDto.html":{},"miscellaneous/typealiases.html":{}}}],["observable",{"_index":2420,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["obtaining",{"_index":2892,"title":{},"body":{"license.html":{}}}],["occurred",{"_index":2238,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["occurs",{"_index":1064,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["offset",{"_index":847,"title":{},"body":{"classes/Country.html":{},"injectables/PaginationService.html":{}}}],["offset_in_minutes",{"_index":848,"title":{},"body":{"classes/Country.html":{}}}],["ok",{"_index":171,"title":{},"body":{"controllers/AppController.html":{}}}],["one",{"_index":265,"title":{},"body":{"controllers/AppController.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/SortByDto.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["onmoduledestroy",{"_index":2162,"title":{},"body":{"injectables/PrismaService.html":{}}}],["onmoduleinit",{"_index":2163,"title":{},"body":{"injectables/PrismaService.html":{}}}],["open",{"_index":2535,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["operation",{"_index":1168,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/PrismaClientExceptionFilter.html":{},"interfaces/QueryOptions.html":{},"classes/UpdateDto-1.html":{}}}],["operations",{"_index":811,"title":{},"body":{"modules/CountriesModule.html":{},"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/FileResponseDto-1.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"injectables/PrismaService.html":{},"classes/Query-3.html":{},"interfaces/QueryOptions.html":{}}}],["operator",{"_index":1783,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{}}}],["opinionated",{"_index":2778,"title":{},"body":{"index.html":{}}}],["optional",{"_index":32,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"classes/CreateCountryDto.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/FileNotImageException.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/UpdateDto-1.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["optionalconditions",{"_index":1164,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/Query-3.html":{},"interfaces/QueryOptions.html":{}}}],["optionalconditions[key",{"_index":1192,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["options",{"_index":1060,"title":{},"body":{"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"interfaces/QueryOptions.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{}}}],["options.ts",{"_index":2014,"title":{},"body":{"interfaces/IPaginationFieldConfig.html":{},"coverage.html":{}}}],["orchestration",{"_index":2757,"title":{},"body":{"index.html":{}}}],["order",{"_index":1777,"title":{},"body":{"classes/FilterCountryDto.html":{},"injectables/PaginationService.html":{},"classes/QueryCountryDto.html":{},"classes/SortCountryDto.html":{},"classes/UtilsService.html":{}}}],["orderby",{"_index":1775,"title":{},"body":{"classes/FilterCountryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortCountryDto.html":{}}}],["org",{"_index":1411,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["organization",{"_index":1409,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["origin",{"_index":2551,"title":{},"body":{"contributing.html":{}}}],["original",{"_index":2706,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["originalname",{"_index":1951,"title":{},"body":{"interfaces/IFileConfig.html":{}}}],["orm",{"_index":203,"title":{},"body":{"controllers/AppController.html":{},"injectables/PrismaService.html":{},"index.html":{}}}],["otherwise",{"_index":415,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{},"license.html":{}}}],["out",{"_index":106,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/CountriesModule.html":{},"modules/CurrenciesModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["outputs",{"_index":2231,"title":{},"body":{"classes/Query.html":{}}}],["overrides",{"_index":1300,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["overview",{"_index":2940,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":2819,"title":{},"body":{"index.html":{}}}],["p2000",{"_index":2141,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["p2002",{"_index":2137,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["p2010",{"_index":2149,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["p2025",{"_index":2145,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["package",{"_index":2643,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":778,"title":{},"body":{"controllers/CountriesController.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{}}}],["pager",{"_index":2000,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["pages",{"_index":1975,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{}}}],["pagesize",{"_index":1966,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{}}}],["paginate",{"_index":1803,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/SortByDto.html":{},"miscellaneous/enumerations.html":{}}}],["paginate(only",{"_index":1806,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["paginate(selectquery",{"_index":2083,"title":{},"body":{"injectables/PaginationService.html":{}}}],["paginated",{"_index":714,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{}}}],["paginatedresultdto",{"_index":794,"title":{},"body":{"controllers/CountriesController.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["pagination",{"_index":717,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/Query-3.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["pagination${classreference.name}responsedto",{"_index":2071,"title":{},"body":{"classes/PaginationResponseDto.html":{}}}],["paginationmetadto",{"_index":1959,"title":{"classes/PaginationMetaDto.html":{}},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"coverage.html":{}}}],["paginationoptions",{"_index":790,"title":{},"body":{"controllers/CountriesController.html":{}}}],["paginationquery",{"_index":803,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CurrenciesService.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["paginationquery.filters",{"_index":2474,"title":{},"body":{"classes/UtilsService.html":{}}}],["paginationquery.sort",{"_index":2475,"title":{},"body":{"classes/UtilsService.html":{}}}],["paginationquerydto",{"_index":708,"title":{"classes/PaginationQueryDto.html":{}},"body":{"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{},"coverage.html":{}}}],["paginationquerydto.limit",{"_index":1985,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["paginationquerydto.page",{"_index":1986,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["paginationresponse",{"_index":731,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["paginationresponse(classreference",{"_index":2065,"title":{},"body":{"classes/PaginationResponseDto.html":{},"miscellaneous/functions.html":{}}}],["paginationresponse(country",{"_index":745,"title":{},"body":{"controllers/CountriesController.html":{}}}],["paginationresponse(currency",{"_index":1011,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["paginationresponsedto",{"_index":716,"title":{"classes/PaginationResponseDto.html":{}},"body":{"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"coverage.html":{}}}],["paginationservice",{"_index":1034,"title":{"injectables/PaginationService.html":{}},"body":{"injectables/CurrenciesService.html":{},"modules/HelperModule.html":{},"injectables/PaginationService.html":{},"coverage.html":{},"overview.html":{}}}],["paginationservice.paginate",{"_index":2079,"title":{},"body":{"injectables/PaginationService.html":{}}}],["paginationtype",{"_index":1800,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"miscellaneous/enumerations.html":{}}}],["paginationtype.all",{"_index":1807,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["pair",{"_index":444,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["pairs",{"_index":448,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["pallette",{"_index":2817,"title":{},"body":{"index.html":{}}}],["param",{"_index":60,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/FileNotImageException.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"controllers/HomeController.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{}}}],["param('id_country",{"_index":758,"title":{},"body":{"controllers/CountriesController.html":{}}}],["param('id_currency",{"_index":1007,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["parameter",{"_index":2156,"title":{},"body":{"injectables/PrismaService.html":{}}}],["parameterized",{"_index":2488,"title":{},"body":{"classes/UtilsService.html":{}}}],["parameters",{"_index":28,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/FileNotImageException.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/FilterQueryDto.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":1984,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"injectables/PrismaService.html":{}}}],["parseint(process.env.app_port",{"_index":1260,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["parseint(process.env.max_file_size",{"_index":1379,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["parseint(process.env.port",{"_index":1262,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["parseint(process.env.postgres_max_connections",{"_index":1331,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["parseint(process.env.postgres_pool_timeout",{"_index":1335,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["parseint(process.env.postgres_port",{"_index":1323,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["parseuuidpipe",{"_index":728,"title":{},"body":{"controllers/CountriesController.html":{}}}],["partial",{"_index":2447,"title":{},"body":{"classes/UpdateDto-1.html":{},"miscellaneous/typealiases.html":{}}}],["partial.type",{"_index":1057,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["partial.type.ts",{"_index":2951,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["partialtype",{"_index":2441,"title":{},"body":{"classes/UpdateDto.html":{},"classes/UpdateDto-1.html":{}}}],["partialtype(createcountrydto",{"_index":2440,"title":{},"body":{"classes/UpdateDto.html":{}}}],["partialtype(createdto",{"_index":2448,"title":{},"body":{"classes/UpdateDto-1.html":{}}}],["particular",{"_index":2923,"title":{},"body":{"license.html":{}}}],["particularly",{"_index":1919,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["parts",{"_index":445,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["parts.length",{"_index":450,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["pass",{"_index":2067,"title":{},"body":{"classes/PaginationResponseDto.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["passport",{"_index":226,"title":{},"body":{"controllers/AppController.html":{}}}],["password",{"_index":564,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{}}}],["patch",{"_index":727,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{}}}],["patch('updatebyid/:id_country",{"_index":757,"title":{},"body":{"controllers/CountriesController.html":{}}}],["patch('updatebyid/:id_country')@httpcode(httpstatus.ok)@apiparam({name",{"_index":720,"title":{},"body":{"controllers/CountriesController.html":{}}}],["patch(`${modules}/:id_currency",{"_index":1006,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["patch(undefined)@httpcode(httpstatus.ok)@apiparam({name",{"_index":997,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["patel",{"_index":2882,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["patel/nestjs",{"_index":2794,"title":{},"body":{"index.html":{},"properties.html":{}}}],["path",{"_index":79,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["path/to/exception",{"_index":1445,"title":{},"body":{"classes/FileNotImageException.html":{}}}],["path/to/exception';throw",{"_index":1435,"title":{},"body":{"classes/FileNotImageException.html":{}}}],["path/to/filter",{"_index":1924,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["path/to/filter';@module",{"_index":1920,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["paths",{"_index":1487,"title":{},"body":{"classes/FileType.html":{}}}],["payload",{"_index":1050,"title":{},"body":{"injectables/CurrenciesService.html":{},"injectables/FilesS3PresignedService.html":{}}}],["payload.code",{"_index":1083,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["payload.id",{"_index":1085,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["payloadtoolargeexception",{"_index":1737,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["per",{"_index":1812,"title":{},"body":{"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["perform",{"_index":1158,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"controllers/HomeController.html":{},"injectables/PaginationService.html":{},"interfaces/QueryOptions.html":{}}}],["performing",{"_index":201,"title":{},"body":{"controllers/AppController.html":{}}}],["performs",{"_index":166,"title":{},"body":{"controllers/AppController.html":{},"injectables/CurrenciesService.html":{}}}],["permission",{"_index":2886,"title":{},"body":{"license.html":{}}}],["permit",{"_index":2907,"title":{},"body":{"license.html":{}}}],["person",{"_index":2891,"title":{},"body":{"license.html":{}}}],["persons",{"_index":2908,"title":{},"body":{"license.html":{}}}],["petersen",{"_index":2807,"title":{},"body":{"index.html":{}}}],["pg",{"_index":2675,"title":{},"body":{"dependencies.html":{}}}],["pgbasequery",{"_index":2332,"title":{},"body":{"classes/Query-3.html":{}}}],["pgbaseselectfield",{"_index":2333,"title":{},"body":{"classes/Query-3.html":{}}}],["pgsqlservice",{"_index":337,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["phone",{"_index":233,"title":{},"body":{"controllers/AppController.html":{}}}],["pino",{"_index":2671,"title":{},"body":{"dependencies.html":{}}}],["plain",{"_index":1124,"title":{},"body":{"classes/Currency.html":{},"miscellaneous/functions.html":{}}}],["plaintoinstance",{"_index":1772,"title":{},"body":{"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{}}}],["plaintoinstance(filtercountrydto",{"_index":1779,"title":{},"body":{"classes/FilterCountryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortCountryDto.html":{}}}],["plaintoinstance(filterquerydto",{"_index":1817,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["plaintoinstance(sortbydto",{"_index":1821,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["plaintoinstance(sortcountrydto",{"_index":1781,"title":{},"body":{"classes/FilterCountryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortCountryDto.html":{}}}],["plaintoinstance(sortuserdto",{"_index":1840,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["please",{"_index":2528,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["pluggable",{"_index":2774,"title":{},"body":{"index.html":{}}}],["plural",{"_index":966,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{}}}],["plus",{"_index":2758,"title":{},"body":{"index.html":{}}}],["pooltimeout",{"_index":1333,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["pop",{"_index":1686,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["port",{"_index":560,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"interfaces/IAppConfig.html":{}}}],["portions",{"_index":2915,"title":{},"body":{"license.html":{}}}],["possible",{"_index":2538,"title":{},"body":{"contributing.html":{}}}],["post",{"_index":726,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{}}}],["post('create",{"_index":752,"title":{},"body":{"controllers/CountriesController.html":{}}}],["post('create')@httpcode(httpstatus.ok)@apiokresponse({type",{"_index":692,"title":{},"body":{"controllers/CountriesController.html":{}}}],["post('upload",{"_index":1577,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["post('v1/upload",{"_index":1713,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["post('v1/upload/s3",{"_index":1651,"title":{},"body":{"controllers/FilesS3Controller.html":{}}}],["post(`${modules",{"_index":1003,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["post(undefined)@httpcode(httpstatus.ok)@apicreatedresponse({type",{"_index":990,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["postgres",{"_index":2843,"title":{},"body":{"index.html":{}}}],["postgres_connection_limit",{"_index":2023,"title":{},"body":{"interfaces/IPostgreSQLConfig.html":{}}}],["postgres_host",{"_index":1273,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"interfaces/IPostgreSQLConfig.html":{}}}],["postgres_max_connections",{"_index":1274,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["postgres_name",{"_index":1275,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"interfaces/IPostgreSQLConfig.html":{}}}],["postgres_password",{"_index":1276,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"interfaces/IPostgreSQLConfig.html":{}}}],["postgres_pool_timeout",{"_index":2024,"title":{},"body":{"interfaces/IPostgreSQLConfig.html":{}}}],["postgres_port",{"_index":1277,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"interfaces/IPostgreSQLConfig.html":{}}}],["postgres_schema",{"_index":2025,"title":{},"body":{"interfaces/IPostgreSQLConfig.html":{}}}],["postgres_user",{"_index":1278,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"interfaces/IPostgreSQLConfig.html":{}}}],["postgresql",{"_index":1302,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"index.html":{}}}],["postgresql://${process.env.postgres_user}:${process.env.postgres_password}@${process.env.postgres_host}:${process.env.postgres_port}/${process.env.postgres_name}?connection_limit=${process.env.postgres_max_connections}&pool_timeout=${process.env.postgres_pool_timeout}&schema=${process.env.postgres_schema",{"_index":1320,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["postgresql://${this.get('postgres_user')}:${this.get('postgres_password')}@${this.get('postgres_host')}:${this.get('postgres_port')}/${this.get('postgres_name')}?connection_limit=${this.get('postgres_connection_limit')}&pool_timeout=${this.get('postgres_pool_timeout')}&schema=${this.get('postgres_schema",{"_index":586,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["powerful",{"_index":2737,"title":{},"body":{"index.html":{}}}],["pre",{"_index":2760,"title":{},"body":{"index.html":{}}}],["precision",{"_index":970,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{}}}],["prefix",{"_index":1911,"title":{},"body":{"injectables/HomeService.html":{},"interfaces/IAppConfig.html":{}}}],["prerequisites",{"_index":2786,"title":{},"body":{"index.html":{}}}],["presence",{"_index":1757,"title":{},"body":{"injectables/FilesS3Service.html":{}}}],["present",{"_index":2967,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["preserves",{"_index":2705,"title":{},"body":{"miscellaneous/functions.html":{}}}],["presigned",{"_index":1351,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileResponseDto-1.html":{},"classes/FileType.html":{},"modules/FilesModule.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"miscellaneous/enumerations.html":{}}}],["presigned/dto/file",{"_index":1463,"title":{},"body":{"classes/FileResponseDto-1.html":{},"coverage.html":{}}}],["presigned/dto/file.dto.ts",{"_index":1522,"title":{},"body":{"classes/FileUploadDto.html":{},"coverage.html":{}}}],["presigned/dto/file.dto.ts:23",{"_index":1530,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["presigned/dto/file.dto.ts:35",{"_index":1533,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["presigned/files.controller.ts",{"_index":1691,"title":{},"body":{"controllers/FilesS3PresignedController.html":{},"coverage.html":{}}}],["presigned/files.controller.ts:49",{"_index":1706,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["presigned/files.controller.ts:69",{"_index":1699,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["presigned/files.module",{"_index":1635,"title":{},"body":{"modules/FilesModule.html":{}}}],["presigned/files.module.ts",{"_index":1721,"title":{},"body":{"modules/FilesS3PresignedModule.html":{}}}],["presigned/files.service.ts",{"_index":1728,"title":{},"body":{"injectables/FilesS3PresignedService.html":{},"coverage.html":{}}}],["presigned/files.service.ts:128",{"_index":1735,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["presigned/files.service.ts:26",{"_index":1730,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["presigned/files.service.ts:59",{"_index":1731,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["presigner",{"_index":1506,"title":{},"body":{"classes/FileType.html":{},"injectables/FilesS3PresignedService.html":{},"dependencies.html":{}}}],["prettier",{"_index":2777,"title":{},"body":{"index.html":{}}}],["pretty",{"_index":2677,"title":{},"body":{"dependencies.html":{}}}],["prevent",{"_index":1067,"title":{},"body":{"injectables/CurrenciesService.html":{},"classes/Query.html":{}}}],["primitive",{"_index":2704,"title":{},"body":{"miscellaneous/functions.html":{}}}],["prisma",{"_index":172,"title":{},"body":{"controllers/AppController.html":{},"injectables/CurrenciesService.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/QueryFailedFilter.html":{},"coverage.html":{},"index.html":{}}}],["prisma's",{"_index":2074,"title":{},"body":{"injectables/PaginationService.html":{}}}],["prisma.io",{"_index":2809,"title":{},"body":{"index.html":{}}}],["prisma.prisma",{"_index":2808,"title":{},"body":{"index.html":{}}}],["prisma.prismaclientknownrequesterror",{"_index":2127,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["prisma.transactionclient",{"_index":2172,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prisma/client",{"_index":2130,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/QueryFailedFilter.html":{},"dependencies.html":{}}}],["prisma/data/countries",{"_index":2564,"title":{},"body":{"coverage.html":{}}}],["prisma/migration",{"_index":2832,"title":{},"body":{"index.html":{}}}],["prisma/seed.ts",{"_index":2571,"title":{},"body":{"coverage.html":{}}}],["prisma_client",{"_index":312,"title":{},"body":{"modules/AppModule.html":{}}}],["prismaclient",{"_index":2152,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismaclientexceptionfilter",{"_index":2123,"title":{"classes/PrismaClientExceptionFilter.html":{}},"body":{"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"coverage.html":{}}}],["prismaclientknownrequesterror",{"_index":2126,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["prismaconfig",{"_index":467,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["prismaservice",{"_index":156,"title":{"injectables/PrismaService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/CurrenciesService.html":{},"modules/HelperModule.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":205,"title":{},"body":{"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CurrenciesService.html":{},"injectables/FilesS3PresignedService.html":{},"classes/Query-3.html":{}}}],["process",{"_index":1755,"title":{},"body":{"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["process.cwd",{"_index":578,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{}}}],["process.env",{"_index":1373,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["process.env.api_prefix",{"_index":1264,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["process.env.app_description",{"_index":1251,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["process.env.app_name",{"_index":1249,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["process.env.app_port",{"_index":1259,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["process.env.app_prefix",{"_index":1254,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["process.env.app_version",{"_index":1252,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["process.env.aws_access_key_id",{"_index":1374,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["process.env.aws_default_s3_bucket",{"_index":1376,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["process.env.aws_s3_region",{"_index":1377,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["process.env.aws_secret_access_key",{"_index":1375,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["process.env.backend_domain",{"_index":1257,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["process.env.database_ca",{"_index":1341,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.database_cert",{"_index":1344,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.database_key",{"_index":1342,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.database_reject_unauthorized",{"_index":1340,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.database_ssl_enabled",{"_index":1338,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.database_synchronize",{"_index":1328,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.file_driver",{"_index":1371,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["process.env.frontend_domain",{"_index":1256,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["process.env.logger_app",{"_index":1414,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["process.env.logger_context",{"_index":1412,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["process.env.logger_duration_log_level",{"_index":1422,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["process.env.logger_log_level",{"_index":1418,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["process.env.logger_organization",{"_index":1410,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["process.env.logger_slack_inc_webhook_url",{"_index":1428,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["process.env.max_file_size",{"_index":1378,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["process.env.node_env",{"_index":304,"title":{},"body":{"modules/AppModule.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-3.html":{}}}],["process.env.port",{"_index":1261,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["process.env.postgres_host",{"_index":1321,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.postgres_max_connections",{"_index":1330,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.postgres_name",{"_index":1326,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.postgres_password",{"_index":1325,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.postgres_pool_timeout",{"_index":1334,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.postgres_port",{"_index":1322,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.postgres_schema",{"_index":1336,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.postgres_user",{"_index":1327,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.pwd",{"_index":577,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{}}}],["process.env[envname",{"_index":546,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["process.env[envname].replace(/\\\\n/g",{"_index":547,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["process.env[key",{"_index":548,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-3.html":{}}}],["processed",{"_index":1451,"title":{},"body":{"classes/FileResponseDto.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{}}}],["processing",{"_index":1669,"title":{},"body":{"modules/FilesS3Module.html":{},"index.html":{}}}],["production",{"_index":533,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["productionbuild",{"_index":2825,"title":{},"body":{"index.html":{}}}],["profile_pic_file_path",{"_index":662,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IUploadFileConfig.html":{}}}],["profiledestdir",{"_index":2629,"title":{},"body":{"coverage.html":{}}}],["project",{"_index":2524,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["promise",{"_index":174,"title":{},"body":{"controllers/AppController.html":{},"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query-2.html":{},"miscellaneous/functions.html":{}}}],["promise.all",{"_index":2091,"title":{},"body":{"injectables/PaginationService.html":{}}}],["promise.resolve",{"_index":2213,"title":{},"body":{"injectables/PrismaService.html":{}}}],["promises",{"_index":2405,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{},"miscellaneous/functions.html":{}}}],["properties",{"_index":18,"title":{"properties.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"injectables/FilesS3PresignedService.html":{},"classes/FilterQueryDto.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UpdateDto-1.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["property",{"_index":837,"title":{},"body":{"classes/Country.html":{},"classes/Currency.html":{},"classes/FileResponseDto-2.html":{},"interfaces/IAppConfig.html":{},"miscellaneous/functions.html":{}}}],["propertyvalue",{"_index":412,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["props",{"_index":256,"title":{},"body":{"controllers/AppController.html":{}}}],["provide",{"_index":140,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"classes/Country.html":{},"modules/FilesLocalModule.html":{},"classes/HttpErrorFilter.html":{}}}],["provided",{"_index":904,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"injectables/CurrenciesService.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"interfaces/IPaginationFieldConfig.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/Query-3.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["provider",{"_index":1758,"title":{},"body":{"injectables/FilesS3Service.html":{}}}],["providers",{"_index":96,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/CountriesModule.html":{},"modules/CurrenciesModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{},"classes/HttpErrorFilter.html":{},"coverage.html":{},"overview.html":{}}}],["providers/dynamic",{"_index":2359,"title":{},"body":{"classes/Query-3.html":{}}}],["providers/file",{"_index":1567,"title":{},"body":{"controllers/FilesLocalController.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["provides",{"_index":146,"title":{},"body":{"controllers/AppController.html":{},"modules/CountriesModule.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"modules/HelperModule.html":{},"injectables/HomeService.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/PaginationMetaDto.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query-3.html":{},"classes/UtilsService.html":{}}}],["ptbl",{"_index":2358,"title":{},"body":{"classes/Query-3.html":{},"classes/UtilsService.html":{}}}],["ptbl.code",{"_index":2353,"title":{},"body":{"classes/Query-3.html":{}}}],["ptbl.decimal_digits",{"_index":2356,"title":{},"body":{"classes/Query-3.html":{}}}],["ptbl.id_currency",{"_index":1098,"title":{},"body":{"injectables/CurrenciesService.html":{},"classes/Query-3.html":{}}}],["ptbl.name",{"_index":2354,"title":{},"body":{"classes/Query-3.html":{}}}],["ptbl.rounding",{"_index":2357,"title":{},"body":{"classes/Query-3.html":{}}}],["ptbl.symbol",{"_index":2355,"title":{},"body":{"classes/Query-3.html":{}}}],["public",{"_index":19,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"modules/FilesS3PresignedModule.html":{},"classes/QueryFailedFilter.html":{},"classes/UtilsService.html":{}}}],["public_route_key",{"_index":2588,"title":{},"body":{"coverage.html":{}}}],["publicroute",{"_index":191,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["publish",{"_index":2901,"title":{},"body":{"license.html":{}}}],["pull",{"_index":2552,"title":{},"body":{"contributing.html":{}}}],["purpose",{"_index":2924,"title":{},"body":{"license.html":{}}}],["purposes",{"_index":842,"title":{},"body":{"classes/Country.html":{},"controllers/FilesS3Controller.html":{}}}],["push",{"_index":2550,"title":{},"body":{"contributing.html":{}}}],["put",{"_index":351,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["putobjectcommand",{"_index":1738,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["q",{"_index":2295,"title":{},"body":{"classes/Query-2.html":{}}}],["qq",{"_index":2320,"title":{},"body":{"classes/Query-2.html":{}}}],["qr_image",{"_index":607,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["qr_image_path",{"_index":609,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["qr_image_path_salt",{"_index":611,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["qrconfig",{"_index":606,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["queries",{"_index":1031,"title":{},"body":{"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"interfaces/IPaginationFieldConfig.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query-1.html":{},"classes/Query-3.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{}}}],["query",{"_index":339,"title":{"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{}},"body":{"classes/BadRequestExceptionFilter.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"controllers/FilesS3PresignedController.html":{},"classes/FilterQueryDto.html":{},"classes/HttpErrorFilter.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{},"coverage.html":{}}}],["query('expiresin",{"_index":1716,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["query.addhttpqueryerror",{"_index":2225,"title":{},"body":{"classes/Query.html":{}}}],["query.addhttpqueryerror(\"httperror",{"_index":1931,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["query.addqueryerror(\"badrequest",{"_index":370,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["query.service",{"_index":1133,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/Query-3.html":{},"interfaces/QueryOptions.html":{},"coverage.html":{}}}],["query?.filters",{"_index":787,"title":{},"body":{"controllers/CountriesController.html":{}}}],["query?.limit",{"_index":782,"title":{},"body":{"controllers/CountriesController.html":{}}}],["query?.page",{"_index":779,"title":{},"body":{"controllers/CountriesController.html":{}}}],["query?.sort",{"_index":789,"title":{},"body":{"controllers/CountriesController.html":{}}}],["querybuilder",{"_index":2360,"title":{},"body":{"classes/Query-3.html":{}}}],["querycountrydto",{"_index":772,"title":{"classes/QueryCountryDto.html":{}},"body":{"controllers/CountriesController.html":{},"classes/FilterCountryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortCountryDto.html":{},"coverage.html":{}}}],["queryfailederror",{"_index":2387,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["queryfailedfilter",{"_index":2379,"title":{"classes/QueryFailedFilter.html":{}},"body":{"classes/QueryFailedFilter.html":{},"coverage.html":{}}}],["queryname",{"_index":1155,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["queryobj",{"_index":2168,"title":{},"body":{"injectables/PrismaService.html":{}}}],["queryobj.syntax",{"_index":2203,"title":{},"body":{"injectables/PrismaService.html":{}}}],["queryobj.type",{"_index":2205,"title":{},"body":{"injectables/PrismaService.html":{}}}],["queryoptions",{"_index":1141,"title":{"interfaces/QueryOptions.html":{}},"body":{"classes/DynamicQueryBuilder.html":{},"classes/Query-3.html":{},"interfaces/QueryOptions.html":{},"coverage.html":{}}}],["querystatements",{"_index":2462,"title":{},"body":{"classes/UtilsService.html":{}}}],["querystatements(basefields",{"_index":2471,"title":{},"body":{"classes/UtilsService.html":{}}}],["querytype",{"_index":1156,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["quotes",{"_index":2222,"title":{},"body":{"classes/Query.html":{}}}],["qux",{"_index":245,"title":{},"body":{"controllers/AppController.html":{}}}],["r",{"_index":344,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"properties.html":{}}}],["r.error",{"_index":349,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["r.message",{"_index":348,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["r.message[0",{"_index":347,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["r.statuscode",{"_index":359,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["randomstringgenerator",{"_index":1671,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["randomstringgenerator()}.${file.filename.split('.').pop()?.tolowercase",{"_index":1748,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["randomstringgenerator()}.${file.originalname",{"_index":1685,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["range",{"_index":1990,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["rate",{"_index":2646,"title":{},"body":{"dependencies.html":{}}}],["raw",{"_index":1029,"title":{},"body":{"injectables/CurrenciesService.html":{},"injectables/PrismaService.html":{}}}],["rbac",{"_index":2771,"title":{},"body":{"index.html":{}}}],["read",{"_index":1727,"title":{},"body":{"modules/FilesS3PresignedModule.html":{},"index.html":{}}}],["readonly",{"_index":206,"title":{},"body":{"controllers/AppController.html":{},"controllers/CountriesController.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query-2.html":{},"classes/SortByDto.html":{}}}],["ready",{"_index":2767,"title":{},"body":{"index.html":{}}}],["receive",{"_index":2068,"title":{},"body":{"classes/PaginationResponseDto.html":{}}}],["recomandation",{"_index":2789,"title":{},"body":{"index.html":{}}}],["record",{"_index":900,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"interfaces/QueryOptions.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{}}}],["records",{"_index":1811,"title":{},"body":{"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/Query-3.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{}}}],["recursively",{"_index":2411,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["redis",{"_index":2842,"title":{},"body":{"index.html":{}}}],["redisswagger",{"_index":2844,"title":{},"body":{"index.html":{}}}],["ref",{"_index":1866,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["refactor",{"_index":2856,"title":{},"body":{"index.html":{}}}],["reference",{"_index":2064,"title":{},"body":{"classes/PaginationResponseDto.html":{},"miscellaneous/functions.html":{}}}],["reflect",{"_index":2679,"title":{},"body":{"dependencies.html":{}}}],["reflection",{"_index":35,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["reflector",{"_index":20,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["region",{"_index":1355,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["registeras",{"_index":1238,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{}}}],["registeras('app",{"_index":1248,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["registeras('database",{"_index":1319,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["registeras('file",{"_index":1369,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["registeras('logger",{"_index":1408,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["registers",{"_index":1246,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{}}}],["registration",{"_index":1245,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"index.html":{}}}],["regular",{"_index":452,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["reject",{"_index":1288,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["rejectunauthorized",{"_index":1339,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["related",{"_index":121,"title":{},"body":{"modules/ApiModule.html":{},"controllers/AppController.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"classes/Country.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"classes/Query-1.html":{},"classes/Query-3.html":{},"classes/QueryFailedFilter.html":{}}}],["relational",{"_index":2773,"title":{},"body":{"index.html":{}}}],["release",{"_index":2520,"title":{},"body":{"changelog.html":{}}}],["relevant",{"_index":1468,"title":{},"body":{"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{}}}],["remarks",{"_index":1887,"title":{},"body":{"modules/HelperModule.html":{},"injectables/PaginationService.html":{}}}],["remove.ts",{"_index":1134,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/FilterCountryDto.html":{},"classes/QueryCountryDto.html":{},"interfaces/QueryOptions.html":{},"classes/SortCountryDto.html":{},"coverage.html":{}}}],["remove.ts:116",{"_index":1147,"title":{},"body":{"classes/DynamicQueryBuilder.html":{}}}],["remove.ts:14",{"_index":2438,"title":{},"body":{"classes/SortCountryDto.html":{}}}],["remove.ts:145",{"_index":1150,"title":{},"body":{"classes/DynamicQueryBuilder.html":{}}}],["remove.ts:18",{"_index":2436,"title":{},"body":{"classes/SortCountryDto.html":{}}}],["remove.ts:195",{"_index":1152,"title":{},"body":{"classes/DynamicQueryBuilder.html":{}}}],["remove.ts:235",{"_index":1142,"title":{},"body":{"classes/DynamicQueryBuilder.html":{}}}],["remove.ts:26",{"_index":2377,"title":{},"body":{"classes/QueryCountryDto.html":{}}}],["remove.ts:32",{"_index":2376,"title":{},"body":{"classes/QueryCountryDto.html":{}}}],["remove.ts:41",{"_index":2373,"title":{},"body":{"classes/QueryCountryDto.html":{}}}],["remove.ts:50",{"_index":2378,"title":{},"body":{"classes/QueryCountryDto.html":{}}}],["removefile",{"_index":2630,"title":{},"body":{"coverage.html":{}}}],["repeat",{"_index":1999,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["replace",{"_index":538,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["reporting",{"_index":2533,"title":{},"body":{"contributing.html":{}}}],["repository",{"_index":2542,"title":{},"body":{"contributing.html":{},"index.html":{},"properties.html":{}}}],["repository:example",{"_index":2792,"title":{},"body":{"index.html":{}}}],["representation",{"_index":1125,"title":{},"body":{"classes/Currency.html":{}}}],["representing",{"_index":829,"title":{},"body":{"classes/Country.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/Query.html":{},"classes/SortByDto.html":{},"miscellaneous/enumerations.html":{}}}],["represents",{"_index":817,"title":{},"body":{"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/UpdateDto-1.html":{},"miscellaneous/typealiases.html":{}}}],["reqdata",{"_index":2235,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["reqescvalue",{"_index":2243,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["reqescvalue.replace(/'/g",{"_index":2245,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["reqstr",{"_index":365,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["reqstrobj",{"_index":372,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{}}}],["request",{"_index":48,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/FileType.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"modules/HomeModule.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResolvePromisesInterceptor.html":{},"contributing.html":{},"dependencies.html":{}}}],["request.filter.ts",{"_index":316,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"coverage.html":{}}}],["request.filter.ts:27",{"_index":320,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["request.filter.ts:34",{"_index":321,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["request.filter.ts:43",{"_index":332,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["request.filter.ts:93",{"_index":324,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["request.method",{"_index":371,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["request.url",{"_index":80,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["requested",{"_index":2458,"title":{},"body":{"classes/UserNotFoundException.html":{}}}],["requests",{"_index":151,"title":{},"body":{"controllers/AppController.html":{},"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"modules/FilesLocalModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"contributing.html":{}}}],["require",{"_index":2494,"title":{},"body":{"classes/UtilsService.html":{}}}],["require_tld",{"_index":517,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{}}}],["required",{"_index":696,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileUploadDto.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/SortByDto.html":{},"classes/UpdateDto-1.html":{}}}],["requirements",{"_index":1768,"title":{},"body":{"injectables/FilesService.html":{}}}],["requrest",{"_index":342,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["res",{"_index":379,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{}}}],["resdata",{"_index":2236,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["resescvalue",{"_index":2244,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["resescvalue.replace(/'/g",{"_index":2246,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["reset",{"_index":105,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/CountriesModule.html":{},"modules/CurrenciesModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{},"overview.html":{}}}],["resolved",{"_index":2407,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["resolvepromisesinterceptor",{"_index":2401,"title":{"injectables/ResolvePromisesInterceptor.html":{}},"body":{"injectables/ResolvePromisesInterceptor.html":{},"coverage.html":{}}}],["resolver",{"_index":2427,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["resolver.ts",{"_index":2634,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["resolves",{"_index":175,"title":{},"body":{"controllers/AppController.html":{},"controllers/CountriesController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"injectables/FilesS3Service.html":{},"injectables/ResolvePromisesInterceptor.html":{},"miscellaneous/functions.html":{}}}],["resolving",{"_index":2707,"title":{},"body":{"miscellaneous/functions.html":{}}}],["response",{"_index":49,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/CountriesController.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PaginationResponseDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResolvePromisesInterceptor.html":{},"miscellaneous/functions.html":{}}}],["response.dto",{"_index":733,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/PaginationService.html":{}}}],["response.dto.ts",{"_index":1450,"title":{},"body":{"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/PaginationResponseDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["response.dto.ts:21",{"_index":2057,"title":{},"body":{"classes/PaginationResponseDto.html":{}}}],["response.dto.ts:27",{"_index":1453,"title":{},"body":{"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{}}}],["response.dto.ts:30",{"_index":2059,"title":{},"body":{"classes/PaginationResponseDto.html":{}}}],["response.dto.ts:34",{"_index":1484,"title":{},"body":{"classes/FileResponseDto-2.html":{}}}],["response.dto.ts:39",{"_index":2058,"title":{},"body":{"classes/PaginationResponseDto.html":{}}}],["response.dto.ts:41",{"_index":1471,"title":{},"body":{"classes/FileResponseDto-1.html":{}}}],["response.sendfile(path",{"_index":1586,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["response.status(status).json",{"_index":1939,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["response.status(status).json(errorresponse",{"_index":86,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["response.status(statuscode).json(r",{"_index":361,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["response_serialization_meta_key",{"_index":2589,"title":{},"body":{"coverage.html":{}}}],["responses",{"_index":988,"title":{},"body":{"controllers/CurrenciesController.html":{},"classes/FileResponseDto-2.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{}}}],["responsible",{"_index":114,"title":{},"body":{"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"injectables/FilesService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{}}}],["resstr",{"_index":367,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["resstrobj",{"_index":378,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{}}}],["restriction",{"_index":2896,"title":{},"body":{"license.html":{}}}],["result",{"_index":168,"title":{},"body":{"controllers/AppController.html":{},"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{}}}],["results",{"_index":87,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UpdateDto.html":{},"classes/UpdateDto-1.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"changelog.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["retrieval",{"_index":1756,"title":{},"body":{"injectables/FilesS3Service.html":{},"injectables/PaginationService.html":{}}}],["retrievals",{"_index":1593,"title":{},"body":{"modules/FilesLocalModule.html":{}}}],["retrieve",{"_index":684,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{}}}],["retrieves",{"_index":1047,"title":{},"body":{"injectables/CurrenciesService.html":{},"injectables/HomeService.html":{}}}],["retrieving",{"_index":1024,"title":{},"body":{"injectables/CurrenciesService.html":{},"modules/FilesLocalModule.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesService.html":{},"injectables/HomeService.html":{},"injectables/PrismaService.html":{},"classes/Query-3.html":{}}}],["return",{"_index":214,"title":{},"body":{"controllers/AppController.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileType.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"controllers/HomeController.html":{},"injectables/HomeService.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/QueryCountryDto.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UtilsService.html":{}}}],["returned",{"_index":169,"title":{},"body":{"controllers/AppController.html":{},"classes/FileResponseDto.html":{}}}],["returning",{"_index":1180,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/FileResponseDto-2.html":{},"controllers/FilesS3Controller.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"interfaces/QueryOptions.html":{}}}],["returningclause",{"_index":1178,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["returningfields",{"_index":1167,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/Query-3.html":{},"interfaces/QueryOptions.html":{}}}],["returningfields.join",{"_index":1181,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["returningfields.length",{"_index":1179,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["returns",{"_index":51,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"controllers/HomeController.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{}}}],["right",{"_index":2745,"title":{},"body":{"index.html":{}}}],["rights",{"_index":2898,"title":{},"body":{"license.html":{}}}],["root",{"_index":277,"title":{},"body":{"modules/AppModule.html":{},"controllers/FilesLocalController.html":{},"controllers/HomeController.html":{}}}],["rounding",{"_index":951,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/Query-3.html":{}}}],["route",{"_index":207,"title":{},"body":{"controllers/AppController.html":{},"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{}}}],["routermodule",{"_index":125,"title":{},"body":{"modules/ApiModule.html":{}}}],["routermodule.register",{"_index":138,"title":{},"body":{"modules/ApiModule.html":{}}}],["rows",{"_index":2204,"title":{},"body":{"injectables/PrismaService.html":{}}}],["rows[0",{"_index":2207,"title":{},"body":{"injectables/PrismaService.html":{}}}],["rsa256",{"_index":2769,"title":{},"body":{"index.html":{}}}],["rules",{"_index":901,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{}}}],["run",{"_index":2559,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["running",{"_index":1943,"title":{},"body":{"interfaces/IAppConfig.html":{},"contributing.html":{},"index.html":{}}}],["rupee",{"_index":861,"title":{},"body":{"classes/Country.html":{},"classes/CreateDto.html":{},"classes/Currency.html":{}}}],["rupees",{"_index":967,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{}}}],["rxjs",{"_index":2423,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":2425,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["s",{"_index":239,"title":{},"body":{"controllers/AppController.html":{}}}],["s.trim",{"_index":2113,"title":{},"body":{"injectables/PaginationService.html":{}}}],["s3",{"_index":1350,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["s3://bucket/path/to/file",{"_index":1710,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["s3_presigned",{"_index":1498,"title":{},"body":{"classes/FileType.html":{},"miscellaneous/enumerations.html":{}}}],["s3client",{"_index":1502,"title":{},"body":{"classes/FileType.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["sanitization",{"_index":2167,"title":{},"body":{"injectables/PrismaService.html":{}}}],["sanitized",{"_index":2170,"title":{},"body":{"injectables/PrismaService.html":{}}}],["scalable",{"_index":2740,"title":{},"body":{"index.html":{}}}],["scanning",{"_index":2784,"title":{},"body":{"index.html":{}}}],["schema",{"_index":1294,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"miscellaneous/functions.html":{}}}],["scope",{"_index":2852,"title":{},"body":{"index.html":{}}}],["script",{"_index":2835,"title":{},"body":{"index.html":{}}}],["sdk/client",{"_index":1503,"title":{},"body":{"classes/FileType.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"dependencies.html":{}}}],["sdk/s3",{"_index":1505,"title":{},"body":{"classes/FileType.html":{},"injectables/FilesS3PresignedService.html":{},"dependencies.html":{}}}],["search",{"_index":2337,"title":{},"body":{"classes/Query-3.html":{},"index.html":{}}}],["seconds",{"_index":1704,"title":{},"body":{"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{}}}],["secret",{"_index":614,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"interfaces/IJWTConfig.html":{}}}],["secretaccesskey",{"_index":670,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"interfaces/IFileConfig.html":{}}}],["secure",{"_index":2762,"title":{},"body":{"index.html":{}}}],["securely",{"_index":1474,"title":{},"body":{"classes/FileResponseDto-1.html":{}}}],["see",{"_index":715,"title":{},"body":{"controllers/CountriesController.html":{}}}],["seed",{"_index":2572,"title":{},"body":{"coverage.html":{}}}],["select",{"_index":1105,"title":{},"body":{"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"interfaces/IPaginationFieldConfig.html":{},"injectables/PaginationService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{}}}],["select_one",{"_index":1201,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"injectables/PrismaService.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"interfaces/QueryOptions.html":{}}}],["selected",{"_index":2342,"title":{},"body":{"classes/Query-3.html":{}}}],["selectedfields",{"_index":2499,"title":{},"body":{"classes/UtilsService.html":{}}}],["selectfields",{"_index":1101,"title":{},"body":{"injectables/CurrenciesService.html":{},"interfaces/IPaginationFieldConfig.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["selectfields.join",{"_index":2097,"title":{},"body":{"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["selectfields.length",{"_index":2500,"title":{},"body":{"classes/UtilsService.html":{}}}],["selectfields.push(...config.selectfields(alias",{"_index":2485,"title":{},"body":{"classes/UtilsService.html":{}}}],["selectfile",{"_index":1614,"title":{},"body":{"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{}}}],["selecting",{"_index":2019,"title":{},"body":{"interfaces/IPaginationFieldConfig.html":{},"classes/Query-3.html":{}}}],["selectoptions",{"_index":2362,"title":{},"body":{"classes/Query-3.html":{}}}],["selectquery",{"_index":1095,"title":{},"body":{"injectables/CurrenciesService.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["sell",{"_index":2905,"title":{},"body":{"license.html":{}}}],["sender_id",{"_index":653,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/ISMSConfig.html":{}}}],["sendgrid_api_key",{"_index":627,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/ISendGridConfig.html":{}}}],["sendgridconfig",{"_index":626,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["sent",{"_index":2409,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["separate",{"_index":2720,"title":{},"body":{"miscellaneous/functions.html":{}}}],["separated",{"_index":396,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["serialized",{"_index":2240,"title":{},"body":{"classes/Query.html":{}}}],["server",{"_index":84,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/FileResponseDto-1.html":{},"classes/HttpErrorFilter.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["serves",{"_index":118,"title":{},"body":{"modules/ApiModule.html":{},"classes/Country.html":{}}}],["service",{"_index":200,"title":{},"body":{"controllers/AppController.html":{},"classes/ConfigService.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/EnvVarAppConfigValidator.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"index.html":{}}}],["service's",{"_index":1766,"title":{},"body":{"injectables/FilesService.html":{}}}],["servicecommit",{"_index":2851,"title":{},"body":{"index.html":{}}}],["services",{"_index":813,"title":{},"body":{"modules/CountriesModule.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"index.html":{}}}],["services/config.service",{"_index":1886,"title":{},"body":{"modules/HelperModule.html":{},"injectables/PrismaService.html":{}}}],["services/encryption.service",{"_index":1891,"title":{},"body":{"modules/HelperModule.html":{}}}],["services/pagination.service",{"_index":1054,"title":{},"body":{"injectables/CurrenciesService.html":{},"modules/HelperModule.html":{}}}],["services/prisma.service",{"_index":190,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/CurrenciesService.html":{},"modules/HelperModule.html":{},"injectables/PaginationService.html":{}}}],["services/task.service",{"_index":1893,"title":{},"body":{"modules/HelperModule.html":{}}}],["services/util.service",{"_index":1055,"title":{},"body":{"injectables/CurrenciesService.html":{},"modules/HelperModule.html":{}}}],["set",{"_index":258,"title":{},"body":{"controllers/AppController.html":{},"classes/DynamicQueryBuilder.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{}}}],["setclauses",{"_index":1202,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["setclauses.join",{"_index":1206,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["setcolumnwithvalue",{"_index":2285,"title":{},"body":{"classes/Query-2.html":{}}}],["sets",{"_index":111,"title":{},"body":{"modules/ApiModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"miscellaneous/functions.html":{}}}],["setting",{"_index":2749,"title":{},"body":{"index.html":{}}}],["settings",{"_index":1303,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"interfaces/IAppConfig.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["several",{"_index":109,"title":{},"body":{"modules/ApiModule.html":{}}}],["sh",{"_index":2560,"title":{},"body":{"contributing.html":{}}}],["shall",{"_index":2913,"title":{},"body":{"license.html":{}}}],["shared/services/sql.service",{"_index":1923,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["shift",{"_index":2818,"title":{},"body":{"index.html":{}}}],["short",{"_index":2858,"title":{},"body":{"index.html":{}}}],["side",{"_index":2741,"title":{},"body":{"index.html":{}}}],["signed",{"_index":1465,"title":{},"body":{"classes/FileResponseDto-1.html":{}}}],["signedurl",{"_index":1751,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["simple",{"_index":2179,"title":{},"body":{"injectables/PrismaService.html":{}}}],["single",{"_index":2221,"title":{},"body":{"classes/Query.html":{},"index.html":{}}}],["size",{"_index":1364,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileUploadDto.html":{},"injectables/FilesS3PresignedService.html":{},"interfaces/IFileConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["slack_webhook",{"_index":1427,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["smooth",{"_index":2530,"title":{},"body":{"contributing.html":{}}}],["sms_provider_name",{"_index":649,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/ISMSConfig.html":{}}}],["smsconfig",{"_index":648,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["soft",{"_index":1169,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["software",{"_index":2894,"title":{},"body":{"license.html":{}}}],["solutions",{"_index":1631,"title":{},"body":{"modules/FilesModule.html":{}}}],["something",{"_index":1077,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["somewhere",{"_index":1992,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["sort",{"_index":800,"title":{},"body":{"controllers/CountriesController.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UtilsService.html":{}}}],["sort.length",{"_index":2490,"title":{},"body":{"classes/UtilsService.html":{}}}],["sortby",{"_index":436,"title":{"injectables/SortBy.html":{}},"body":{"injectables/CommaSeparated.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"coverage.html":{}}}],["sortbydto",{"_index":1819,"title":{"classes/SortByDto.html":{}},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"coverage.html":{}}}],["sortbyquery",{"_index":1103,"title":{},"body":{"injectables/CurrenciesService.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["sortconditions",{"_index":2111,"title":{},"body":{"injectables/PaginationService.html":{}}}],["sortcountrydto",{"_index":1774,"title":{"classes/SortCountryDto.html":{}},"body":{"classes/FilterCountryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortCountryDto.html":{},"coverage.html":{}}}],["sorting",{"_index":1818,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{}}}],["sortitem.direction",{"_index":2498,"title":{},"body":{"classes/UtilsService.html":{}}}],["sortitem.field.tolowercase",{"_index":2492,"title":{},"body":{"classes/UtilsService.html":{}}}],["sortoptions",{"_index":788,"title":{},"body":{"controllers/CountriesController.html":{}}}],["sortquery",{"_index":2109,"title":{},"body":{"injectables/PaginationService.html":{}}}],["sortuserdto",{"_index":1841,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UpdateDto.html":{},"classes/UpdateDto-1.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"index.html":{}}}],["sourceclass",{"_index":254,"title":{},"body":{"controllers/AppController.html":{}}}],["spaces",{"_index":442,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["specific",{"_index":116,"title":{},"body":{"modules/ApiModule.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesService.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["specifically",{"_index":318,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["specified",{"_index":906,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"classes/SortByDto.html":{},"miscellaneous/functions.html":{}}}],["specifies",{"_index":1359,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{}}}],["specify",{"_index":1524,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["specifying",{"_index":2017,"title":{},"body":{"interfaces/IPaginationFieldConfig.html":{}}}],["split",{"_index":440,"title":{},"body":{"injectables/CommaSeparated.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/PaginationService.html":{},"injectables/SortBy.html":{}}}],["sponsors",{"_index":2875,"title":{},"body":{"index.html":{}}}],["sql",{"_index":1030,"title":{},"body":{"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"injectables/PaginationService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{}}}],["sqlquery",{"_index":2224,"title":{},"body":{"classes/Query.html":{}}}],["sqlservice",{"_index":364,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["sqlservice.run",{"_index":369,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{}}}],["sqlservice.run(query.addqueryerror(\"dbquery",{"_index":2399,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["src/**/**.entity{.ts,.js",{"_index":572,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["src/.../app",{"_index":2949,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../app.config.ts",{"_index":2684,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../config.type.ts",{"_index":2948,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../database",{"_index":2950,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../deep",{"_index":2692,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../field.validator.ts",{"_index":2694,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../file",{"_index":2686,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../logger",{"_index":2952,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../logger.config.ts",{"_index":2685,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":2691,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../maybe.type.ts",{"_index":2954,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../number.string.validator.ts",{"_index":2693,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../pagination",{"_index":2695,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../pagination.dto.ts",{"_index":2688,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../swagger.ts",{"_index":2697,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../transforms.decorator.ts",{"_index":2696,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../validate",{"_index":2698,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app/app.controller.ts",{"_index":145,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app/app.controller.ts:66",{"_index":164,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app/app.controller.ts:91",{"_index":177,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app/app.module.ts",{"_index":276,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{}}}],["src/common/helper/helper.module.ts",{"_index":1875,"title":{},"body":{"modules/HelperModule.html":{},"coverage.html":{}}}],["src/common/helper/services/config.service.ts",{"_index":462,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"coverage.html":{}}}],["src/common/helper/services/config.service.ts:101",{"_index":473,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/common/helper/services/config.service.ts:105",{"_index":477,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/common/helper/services/config.service.ts:139",{"_index":479,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/common/helper/services/config.service.ts:28",{"_index":1216,"title":{},"body":{"classes/EnvVarAppConfigValidator.html":{}}}],["src/common/helper/services/config.service.ts:32",{"_index":1220,"title":{},"body":{"classes/EnvVarAppConfigValidator.html":{}}}],["src/common/helper/services/config.service.ts:36",{"_index":1219,"title":{},"body":{"classes/EnvVarAppConfigValidator.html":{}}}],["src/common/helper/services/config.service.ts:40",{"_index":1214,"title":{},"body":{"classes/EnvVarAppConfigValidator.html":{}}}],["src/common/helper/services/config.service.ts:72",{"_index":468,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/common/helper/services/config.service.ts:93",{"_index":470,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/common/helper/services/config.service.ts:97",{"_index":475,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/common/helper/services/pagination.service.ts",{"_index":2072,"title":{},"body":{"injectables/PaginationService.html":{},"coverage.html":{}}}],["src/common/helper/services/pagination.service.ts:36",{"_index":2082,"title":{},"body":{"injectables/PaginationService.html":{}}}],["src/common/helper/services/pagination.service.ts:39",{"_index":2084,"title":{},"body":{"injectables/PaginationService.html":{}}}],["src/common/helper/services/prisma.service.ts",{"_index":2151,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/common/helper/services/prisma.service.ts:129",{"_index":2173,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/common/helper/services/prisma.service.ts:141",{"_index":2177,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/common/helper/services/prisma.service.ts:28",{"_index":2164,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/common/helper/services/prisma.service.ts:51",{"_index":2183,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/common/helper/services/prisma.service.ts:61",{"_index":2180,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/common/helper/services/prisma.service.ts:79",{"_index":2166,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/common/helper/services/util.service.ts",{"_index":2460,"title":{},"body":{"classes/UtilsService.html":{},"coverage.html":{}}}],["src/common/helper/services/util.service.ts:136",{"_index":2472,"title":{},"body":{"classes/UtilsService.html":{}}}],["src/common/helper/services/util.service.ts:154",{"_index":2470,"title":{},"body":{"classes/UtilsService.html":{}}}],["src/common/helper/services/util.service.ts:29",{"_index":2465,"title":{},"body":{"classes/UtilsService.html":{}}}],["src/config/app.config.ts",{"_index":1222,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/config/app.config.ts:25",{"_index":1237,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["src/config/app.config.ts:29",{"_index":1230,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["src/config/app.config.ts:33",{"_index":1229,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["src/config/app.config.ts:37",{"_index":1233,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["src/config/app.config.ts:41",{"_index":1232,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["src/config/app.config.ts:47",{"_index":1231,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["src/config/app.config.ts:51",{"_index":1235,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["src/config/app.config.ts:55",{"_index":1234,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["src/config/app.config.ts:59",{"_index":1228,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["src/config/database.config.ts",{"_index":1265,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"coverage.html":{}}}],["src/config/database.config.ts:106",{"_index":1306,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/database.config.ts:117",{"_index":1291,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/database.config.ts:128",{"_index":1286,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/database.config.ts:139",{"_index":1279,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/database.config.ts:150",{"_index":1284,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/database.config.ts:161",{"_index":1283,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/database.config.ts:26",{"_index":1298,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/database.config.ts:37",{"_index":1304,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/database.config.ts:51",{"_index":1311,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/database.config.ts:62",{"_index":1309,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/database.config.ts:73",{"_index":1308,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/database.config.ts:84",{"_index":1314,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/database.config.ts:95",{"_index":1293,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/file.config.ts",{"_index":1345,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"coverage.html":{}}}],["src/config/file.config.ts:25",{"_index":1358,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["src/config/file.config.ts:38",{"_index":1348,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["src/config/file.config.ts:51",{"_index":1356,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["src/config/file.config.ts:64",{"_index":1352,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["src/config/file.config.ts:77",{"_index":1354,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["src/config/file.config.ts:88",{"_index":1363,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["src/config/logger.config.ts",{"_index":1380,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/config/logger.config.ts:30",{"_index":1403,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["src/config/logger.config.ts:34",{"_index":1401,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["src/config/logger.config.ts:38",{"_index":1395,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["src/config/logger.config.ts:42",{"_index":1392,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["src/config/logger.config.ts:46",{"_index":1396,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["src/config/logger.config.ts:50",{"_index":1400,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["src/config/logger.config.ts:54",{"_index":1397,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["src/config/logger.config.ts:58",{"_index":1398,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["src/config/logger.config.ts:62",{"_index":1394,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["src/config/logger.config.ts:66",{"_index":1399,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["src/config/logger.config.ts:70",{"_index":1402,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["src/config/type/app",{"_index":2958,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/config/type/config.type.ts",{"_index":2955,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/config/type/database",{"_index":2959,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/config/type/file",{"_index":2689,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/config/type/logger",{"_index":2963,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/core/constants/core.constant.ts",{"_index":2585,"title":{},"body":{"coverage.html":{}}}],["src/core/decorators/number.string.validator.ts",{"_index":2590,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/decorators/public.request.decorator",{"_index":192,"title":{},"body":{"controllers/AppController.html":{}}}],["src/core/decorators/public.request.decorator.ts",{"_index":2591,"title":{},"body":{"coverage.html":{}}}],["src/core/decorators/swagger.schema.ts",{"_index":2592,"title":{},"body":{"coverage.html":{}}}],["src/core/decorators/transforms.decorator.ts",{"_index":2594,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/exceptions/file",{"_index":1431,"title":{},"body":{"classes/FileNotImageException.html":{},"coverage.html":{}}}],["src/core/exceptions/http",{"_index":1915,"title":{},"body":{"classes/HttpErrorFilter.html":{},"coverage.html":{}}}],["src/core/exceptions/query.ts",{"_index":2217,"title":{},"body":{"classes/Query.html":{},"coverage.html":{}}}],["src/core/exceptions/query.ts:36",{"_index":2237,"title":{},"body":{"classes/Query.html":{}}}],["src/core/exceptions/user",{"_index":2451,"title":{},"body":{"classes/UserNotFoundException.html":{},"coverage.html":{}}}],["src/core/filters/all",{"_index":6,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["src/core/filters/bad",{"_index":315,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"coverage.html":{}}}],["src/core/filters/constraint",{"_index":2598,"title":{},"body":{"coverage.html":{}}}],["src/core/filters/http",{"_index":1933,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/core/filters/prisma",{"_index":2124,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"coverage.html":{}}}],["src/core/filters/query",{"_index":2380,"title":{},"body":{"classes/QueryFailedFilter.html":{},"coverage.html":{}}}],["src/core/filters/query.ts",{"_index":2250,"title":{},"body":{"classes/Query-1.html":{},"coverage.html":{}}}],["src/core/filters/query.ts:24",{"_index":2252,"title":{},"body":{"classes/Query-1.html":{}}}],["src/core/interfaces/app.interfaces.ts",{"_index":1941,"title":{},"body":{"interfaces/IAppConfig.html":{},"coverage.html":{}}}],["src/core/interfaces/aws.interfaces.ts",{"_index":1946,"title":{},"body":{"interfaces/IAwsConfig.html":{},"coverage.html":{}}}],["src/core/interfaces/file.interfaces.ts",{"_index":1947,"title":{},"body":{"interfaces/IFileConfig.html":{},"coverage.html":{}}}],["src/core/interfaces/jwt.interfaces.ts",{"_index":1952,"title":{},"body":{"interfaces/IJWTConfig.html":{},"coverage.html":{}}}],["src/core/interfaces/node",{"_index":1953,"title":{},"body":{"interfaces/INodeEmailerConfig.html":{},"coverage.html":{}}}],["src/core/interfaces/postgres.interfaces.ts",{"_index":2022,"title":{},"body":{"interfaces/IPostgreSQLConfig.html":{},"coverage.html":{}}}],["src/core/interfaces/sendgrid.interfaces.ts",{"_index":2027,"title":{},"body":{"interfaces/ISendGridConfig.html":{},"coverage.html":{}}}],["src/core/interfaces/sms.interfaces.ts",{"_index":2026,"title":{},"body":{"interfaces/ISMSConfig.html":{},"coverage.html":{}}}],["src/core/interfaces/upload",{"_index":2028,"title":{},"body":{"interfaces/IUploadFileConfig.html":{},"coverage.html":{}}}],["src/core/validators/field.validator.ts",{"_index":2605,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/validators/filter.validator.ts",{"_index":391,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{},"coverage.html":{}}}],["src/core/validators/filter.validator.ts:101",{"_index":2430,"title":{},"body":{"injectables/SortBy.html":{}}}],["src/core/validators/filter.validator.ts:28",{"_index":408,"title":{},"body":{"injectables/CommaSeparated.html":{}}}],["src/core/validators/filter.validator.ts:47",{"_index":403,"title":{},"body":{"injectables/CommaSeparated.html":{}}}],["src/core/validators/filter.validator.ts:71",{"_index":2431,"title":{},"body":{"injectables/SortBy.html":{}}}],["src/main.ts",{"_index":2606,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/api.module.ts",{"_index":107,"title":{},"body":{"modules/ApiModule.html":{}}}],["src/modules/countries/countries.controller.ts",{"_index":680,"title":{},"body":{"controllers/CountriesController.html":{},"coverage.html":{}}}],["src/modules/countries/countries.controller.ts:114",{"_index":704,"title":{},"body":{"controllers/CountriesController.html":{}}}],["src/modules/countries/countries.controller.ts:58",{"_index":710,"title":{},"body":{"controllers/CountriesController.html":{}}}],["src/modules/countries/countries.controller.ts:74",{"_index":693,"title":{},"body":{"controllers/CountriesController.html":{}}}],["src/modules/countries/countries.controller.ts:93",{"_index":722,"title":{},"body":{"controllers/CountriesController.html":{}}}],["src/modules/countries/countries.module.ts",{"_index":808,"title":{},"body":{"modules/CountriesModule.html":{}}}],["src/modules/countries/countries.service.ts",{"_index":2609,"title":{},"body":{"coverage.html":{}}}],["src/modules/countries/dto/country.ts",{"_index":816,"title":{},"body":{"classes/Country.html":{},"coverage.html":{}}}],["src/modules/countries/dto/country.ts:107",{"_index":858,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:120",{"_index":891,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:133",{"_index":864,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:146",{"_index":896,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:159",{"_index":886,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:172",{"_index":889,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:185",{"_index":853,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:198",{"_index":893,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:29",{"_index":874,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:42",{"_index":884,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:55",{"_index":877,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:68",{"_index":881,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:81",{"_index":866,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:94",{"_index":856,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/create.dto.ts",{"_index":898,"title":{},"body":{"classes/CreateCountryDto.html":{},"coverage.html":{}}}],["src/modules/countries/dto/create.dto.ts:110",{"_index":916,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["src/modules/countries/dto/create.dto.ts:125",{"_index":915,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["src/modules/countries/dto/create.dto.ts:140",{"_index":914,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["src/modules/countries/dto/create.dto.ts:155",{"_index":919,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["src/modules/countries/dto/create.dto.ts:170",{"_index":925,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["src/modules/countries/dto/create.dto.ts:173",{"_index":918,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["src/modules/countries/dto/create.dto.ts:34",{"_index":931,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["src/modules/countries/dto/create.dto.ts:51",{"_index":927,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["src/modules/countries/dto/create.dto.ts:66",{"_index":932,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["src/modules/countries/dto/create.dto.ts:82",{"_index":929,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["src/modules/countries/dto/create.dto.ts:96",{"_index":934,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["src/modules/countries/dto/query",{"_index":1770,"title":{},"body":{"classes/FilterCountryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortCountryDto.html":{},"coverage.html":{}}}],["src/modules/countries/dto/update.dto.ts",{"_index":2439,"title":{},"body":{"classes/UpdateDto.html":{},"coverage.html":{}}}],["src/modules/countries/query.ts",{"_index":2253,"title":{},"body":{"classes/Query-2.html":{},"coverage.html":{}}}],["src/modules/countries/query.ts:115",{"_index":2261,"title":{},"body":{"classes/Query-2.html":{}}}],["src/modules/countries/query.ts:13",{"_index":2262,"title":{},"body":{"classes/Query-2.html":{}}}],["src/modules/countries/query.ts:148",{"_index":2259,"title":{},"body":{"classes/Query-2.html":{}}}],["src/modules/countries/query.ts:159",{"_index":2264,"title":{},"body":{"classes/Query-2.html":{}}}],["src/modules/countries/query.ts:31",{"_index":2265,"title":{},"body":{"classes/Query-2.html":{}}}],["src/modules/countries/query.ts:5",{"_index":2258,"title":{},"body":{"classes/Query-2.html":{}}}],["src/modules/countries/query.ts:76",{"_index":2266,"title":{},"body":{"classes/Query-2.html":{}}}],["src/modules/currencies/currencies.controller.ts",{"_index":983,"title":{},"body":{"controllers/CurrenciesController.html":{},"coverage.html":{}}}],["src/modules/currencies/currencies.controller.ts:113",{"_index":993,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["src/modules/currencies/currencies.controller.ts:54",{"_index":991,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["src/modules/currencies/currencies.controller.ts:74",{"_index":998,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["src/modules/currencies/currencies.controller.ts:93",{"_index":995,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["src/modules/currencies/currencies.module.ts",{"_index":1019,"title":{},"body":{"modules/CurrenciesModule.html":{}}}],["src/modules/currencies/currencies.service.ts",{"_index":1022,"title":{},"body":{"injectables/CurrenciesService.html":{},"coverage.html":{}}}],["src/modules/currencies/currencies.service.ts:136",{"_index":1046,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["src/modules/currencies/currencies.service.ts:175",{"_index":1043,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["src/modules/currencies/currencies.service.ts:201",{"_index":1049,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["src/modules/currencies/currencies.service.ts:27",{"_index":1036,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["src/modules/currencies/currencies.service.ts:53",{"_index":1042,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["src/modules/currencies/currencies.service.ts:86",{"_index":1052,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["src/modules/currencies/dto/create.dto.ts",{"_index":948,"title":{},"body":{"classes/CreateDto.html":{},"coverage.html":{}}}],["src/modules/currencies/dto/create.dto.ts:106",{"_index":976,"title":{},"body":{"classes/CreateDto.html":{}}}],["src/modules/currencies/dto/create.dto.ts:122",{"_index":962,"title":{},"body":{"classes/CreateDto.html":{}}}],["src/modules/currencies/dto/create.dto.ts:138",{"_index":969,"title":{},"body":{"classes/CreateDto.html":{}}}],["src/modules/currencies/dto/create.dto.ts:38",{"_index":955,"title":{},"body":{"classes/CreateDto.html":{}}}],["src/modules/currencies/dto/create.dto.ts:55",{"_index":965,"title":{},"body":{"classes/CreateDto.html":{}}}],["src/modules/currencies/dto/create.dto.ts:72",{"_index":968,"title":{},"body":{"classes/CreateDto.html":{}}}],["src/modules/currencies/dto/create.dto.ts:89",{"_index":973,"title":{},"body":{"classes/CreateDto.html":{}}}],["src/modules/currencies/dto/currency.ts",{"_index":1115,"title":{},"body":{"classes/Currency.html":{},"coverage.html":{}}}],["src/modules/currencies/dto/currency.ts:100",{"_index":1128,"title":{},"body":{"classes/Currency.html":{}}}],["src/modules/currencies/dto/currency.ts:108",{"_index":1122,"title":{},"body":{"classes/Currency.html":{}}}],["src/modules/currencies/dto/currency.ts:28",{"_index":1120,"title":{},"body":{"classes/Currency.html":{}}}],["src/modules/currencies/dto/currency.ts:40",{"_index":1126,"title":{},"body":{"classes/Currency.html":{}}}],["src/modules/currencies/dto/currency.ts:52",{"_index":1127,"title":{},"body":{"classes/Currency.html":{}}}],["src/modules/currencies/dto/currency.ts:64",{"_index":1129,"title":{},"body":{"classes/Currency.html":{}}}],["src/modules/currencies/dto/currency.ts:76",{"_index":1130,"title":{},"body":{"classes/Currency.html":{}}}],["src/modules/currencies/dto/currency.ts:88",{"_index":1121,"title":{},"body":{"classes/Currency.html":{}}}],["src/modules/currencies/dto/update.dto.ts",{"_index":2443,"title":{},"body":{"classes/UpdateDto-1.html":{},"coverage.html":{}}}],["src/modules/currencies/query.ts",{"_index":2326,"title":{},"body":{"classes/Query-3.html":{},"coverage.html":{}}}],["src/modules/currencies/query.ts:100",{"_index":2343,"title":{},"body":{"classes/Query-3.html":{}}}],["src/modules/currencies/query.ts:139",{"_index":2334,"title":{},"body":{"classes/Query-3.html":{}}}],["src/modules/currencies/query.ts:156",{"_index":2341,"title":{},"body":{"classes/Query-3.html":{}}}],["src/modules/currencies/query.ts:172",{"_index":2340,"title":{},"body":{"classes/Query-3.html":{}}}],["src/modules/currencies/query.ts:21",{"_index":2338,"title":{},"body":{"classes/Query-3.html":{}}}],["src/modules/currencies/query.ts:49",{"_index":2336,"title":{},"body":{"classes/Query-3.html":{}}}],["src/modules/currencies/query.ts:71",{"_index":2339,"title":{},"body":{"classes/Query-3.html":{}}}],["src/modules/files/domain/file.ts",{"_index":1486,"title":{},"body":{"classes/FileType.html":{},"coverage.html":{}}}],["src/modules/files/domain/file.ts:35",{"_index":1491,"title":{},"body":{"classes/FileType.html":{}}}],["src/modules/files/domain/file.ts:81",{"_index":1493,"title":{},"body":{"classes/FileType.html":{}}}],["src/modules/files/files.module.ts",{"_index":1624,"title":{},"body":{"modules/FilesModule.html":{},"coverage.html":{}}}],["src/modules/files/files.service.ts",{"_index":1763,"title":{},"body":{"injectables/FilesService.html":{},"coverage.html":{}}}],["src/modules/files/infrastructure/uploader/local/dto/file",{"_index":1449,"title":{},"body":{"classes/FileResponseDto.html":{},"coverage.html":{}}}],["src/modules/files/infrastructure/uploader/local/files.controller.ts",{"_index":1536,"title":{},"body":{"controllers/FilesLocalController.html":{},"coverage.html":{}}}],["src/modules/files/infrastructure/uploader/local/files.controller.ts:79",{"_index":1552,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["src/modules/files/infrastructure/uploader/local/files.controller.ts:96",{"_index":1542,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["src/modules/files/infrastructure/uploader/local/files.module.ts",{"_index":1591,"title":{},"body":{"modules/FilesLocalModule.html":{}}}],["src/modules/files/infrastructure/uploader/local/files.service.ts",{"_index":1602,"title":{},"body":{"injectables/FilesLocalService.html":{},"coverage.html":{}}}],["src/modules/files/infrastructure/uploader/local/files.service.ts:16",{"_index":1606,"title":{},"body":{"injectables/FilesLocalService.html":{}}}],["src/modules/files/infrastructure/uploader/local/files.service.ts:37",{"_index":1608,"title":{},"body":{"injectables/FilesLocalService.html":{}}}],["src/modules/files/infrastructure/uploader/s3",{"_index":1462,"title":{},"body":{"classes/FileResponseDto-1.html":{},"classes/FileUploadDto.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"coverage.html":{}}}],["src/modules/files/infrastructure/uploader/s3/dto/file",{"_index":1479,"title":{},"body":{"classes/FileResponseDto-2.html":{},"coverage.html":{}}}],["src/modules/files/infrastructure/uploader/s3/files.controller.ts",{"_index":1644,"title":{},"body":{"controllers/FilesS3Controller.html":{},"coverage.html":{}}}],["src/modules/files/infrastructure/uploader/s3/files.controller.ts:74",{"_index":1659,"title":{},"body":{"controllers/FilesS3Controller.html":{}}}],["src/modules/files/infrastructure/uploader/s3/files.module.ts",{"_index":1664,"title":{},"body":{"modules/FilesS3Module.html":{}}}],["src/modules/files/infrastructure/uploader/s3/files.service.ts",{"_index":1754,"title":{},"body":{"injectables/FilesS3Service.html":{},"coverage.html":{}}}],["src/modules/files/infrastructure/uploader/s3/files.service.ts:29",{"_index":1760,"title":{},"body":{"injectables/FilesS3Service.html":{}}}],["src/modules/files/infrastructure/uploader/s3/files.service.ts:40",{"_index":1761,"title":{},"body":{"injectables/FilesS3Service.html":{}}}],["src/modules/home/home.controller.ts",{"_index":1895,"title":{},"body":{"controllers/HomeController.html":{},"coverage.html":{}}}],["src/modules/home/home.controller.ts:30",{"_index":1898,"title":{},"body":{"controllers/HomeController.html":{}}}],["src/modules/home/home.module.ts",{"_index":1905,"title":{},"body":{"modules/HomeModule.html":{}}}],["src/modules/home/home.service.ts",{"_index":1908,"title":{},"body":{"injectables/HomeService.html":{},"coverage.html":{}}}],["src/modules/home/home.service.ts:15",{"_index":1909,"title":{},"body":{"injectables/HomeService.html":{}}}],["src/modules/home/home.service.ts:26",{"_index":1910,"title":{},"body":{"injectables/HomeService.html":{}}}],["src/providers/dynamic",{"_index":1132,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{},"coverage.html":{}}}],["src/providers/file",{"_index":2624,"title":{},"body":{"coverage.html":{}}}],["src/swagger.ts",{"_index":2631,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/deep",{"_index":2633,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/dto/pagination",{"_index":2055,"title":{},"body":{"classes/PaginationResponseDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/dto/pagination.dto.ts",{"_index":1782,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/utils/dto/pagination.dto.ts:119",{"_index":2045,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["src/utils/dto/pagination.dto.ts:141",{"_index":2054,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["src/utils/dto/pagination.dto.ts:160",{"_index":1785,"title":{},"body":{"classes/FilterQueryDto.html":{}}}],["src/utils/dto/pagination.dto.ts:172",{"_index":1787,"title":{},"body":{"classes/FilterQueryDto.html":{}}}],["src/utils/dto/pagination.dto.ts:184",{"_index":1789,"title":{},"body":{"classes/FilterQueryDto.html":{}}}],["src/utils/dto/pagination.dto.ts:214",{"_index":2435,"title":{},"body":{"classes/SortByDto.html":{}}}],["src/utils/dto/pagination.dto.ts:228",{"_index":2433,"title":{},"body":{"classes/SortByDto.html":{}}}],["src/utils/dto/pagination.dto.ts:59",{"_index":2052,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["src/utils/dto/pagination.dto.ts:77",{"_index":2050,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["src/utils/dto/pagination.dto.ts:97",{"_index":2048,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["src/utils/dto/pagination.meta.dto.ts",{"_index":1956,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"coverage.html":{}}}],["src/utils/dto/pagination.meta.dto.ts:101",{"_index":2035,"title":{},"body":{"classes/PaginationMetaDto.html":{}}}],["src/utils/dto/pagination.meta.dto.ts:113",{"_index":2037,"title":{},"body":{"classes/PaginationMetaDto.html":{}}}],["src/utils/dto/pagination.meta.dto.ts:125",{"_index":2034,"title":{},"body":{"classes/PaginationMetaDto.html":{}}}],["src/utils/dto/pagination.meta.dto.ts:137",{"_index":2031,"title":{},"body":{"classes/PaginationMetaDto.html":{}}}],["src/utils/dto/pagination.meta.dto.ts:41",{"_index":2039,"title":{},"body":{"classes/PaginationMetaDto.html":{}}}],["src/utils/dto/pagination.meta.dto.ts:53",{"_index":2033,"title":{},"body":{"classes/PaginationMetaDto.html":{}}}],["src/utils/dto/pagination.meta.dto.ts:65",{"_index":2036,"title":{},"body":{"classes/PaginationMetaDto.html":{}}}],["src/utils/dto/pagination.meta.dto.ts:77",{"_index":2040,"title":{},"body":{"classes/PaginationMetaDto.html":{}}}],["src/utils/dto/pagination.meta.dto.ts:89",{"_index":2038,"title":{},"body":{"classes/PaginationMetaDto.html":{}}}],["src/utils/serializer.interceptor.ts",{"_index":2402,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{},"coverage.html":{}}}],["src/utils/serializer.interceptor.ts:30",{"_index":2417,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["src/utils/transformers/lower",{"_index":2636,"title":{},"body":{"coverage.html":{}}}],["src/utils/transformers/upper",{"_index":2639,"title":{},"body":{"coverage.html":{}}}],["src/utils/types/deep",{"_index":2961,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/utils/types/maybe.type.ts",{"_index":2964,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/utils/types/pagination",{"_index":2013,"title":{},"body":{"interfaces/IPaginationFieldConfig.html":{},"coverage.html":{}}}],["src/utils/validate",{"_index":2640,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["ssl",{"_index":1280,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["sslenabled",{"_index":1337,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["stack",{"_index":261,"title":{},"body":{"controllers/AppController.html":{}}}],["staging",{"_index":536,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["staging/production",{"_index":2834,"title":{},"body":{"index.html":{}}}],["staging/productiondocker",{"_index":2838,"title":{},"body":{"index.html":{}}}],["staging/productionrunning",{"_index":2840,"title":{},"body":{"index.html":{}}}],["standardize",{"_index":1466,"title":{},"body":{"classes/FileResponseDto-1.html":{}}}],["start",{"_index":1295,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"injectables/PaginationService.html":{},"changelog.html":{},"index.html":{}}}],["start.sh",{"_index":2837,"title":{},"body":{"index.html":{}}}],["started",{"_index":2504,"title":{"changelog.html":{},"contributing.html":{},"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["starter",{"_index":2728,"title":{},"body":{"index.html":{},"properties.html":{}}}],["starter.git",{"_index":2795,"title":{},"body":{"index.html":{},"properties.html":{}}}],["starter.git#readme",{"_index":2944,"title":{},"body":{"properties.html":{}}}],["starter.git/issues",{"_index":2945,"title":{},"body":{"properties.html":{}}}],["startindex",{"_index":1971,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{}}}],["startpage",{"_index":1969,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{}}}],["startpage).keys()).map((i",{"_index":2003,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["starts",{"_index":2700,"title":{},"body":{"miscellaneous/functions.html":{}}}],["statements",{"_index":2563,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":70,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/FilterQueryDto.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PaginationQueryDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"classes/SortByDto.html":{}}}],["status_codes",{"_index":333,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["status_codes[status",{"_index":2400,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["status_codes[statuscode",{"_index":360,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["statuscode",{"_index":75,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/FilesS3PresignedService.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["stop.sh",{"_index":2839,"title":{},"body":{"index.html":{}}}],["storage",{"_index":1346,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileResponseDto-1.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["strategies",{"_index":2078,"title":{},"body":{"injectables/PaginationService.html":{}}}],["stream",{"_index":1545,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["street",{"_index":225,"title":{},"body":{"controllers/AppController.html":{}}}],["strict",{"_index":1442,"title":{},"body":{"classes/FileNotImageException.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/UserNotFoundException.html":{}}}],["string",{"_index":393,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto-1.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/QueryCountryDto.html":{},"interfaces/QueryOptions.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{}}}],["string(value).replace(/['\"]+/g",{"_index":1835,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["stringexample",{"_index":2232,"title":{},"body":{"classes/Query.html":{}}}],["strings",{"_index":542,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["string})@apiokresponse({status",{"_index":701,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{}}}],["string})@apiokresponse({type",{"_index":721,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{}}}],["string})@isoptional()@transform",{"_index":2371,"title":{},"body":{"classes/QueryCountryDto.html":{}}}],["strippedvalue",{"_index":1834,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["structure",{"_index":818,"title":{},"body":{"classes/Country.html":{},"classes/Currency.html":{},"classes/FileResponseDto-1.html":{},"classes/UpdateDto-1.html":{},"miscellaneous/functions.html":{}}}],["structures",{"_index":2412,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{},"miscellaneous/functions.html":{}}}],["studio",{"_index":2799,"title":{},"body":{"index.html":{}}}],["style",{"_index":1863,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"contributing.html":{},"index.html":{}}}],["subject",{"_index":2910,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":2903,"title":{},"body":{"license.html":{}}}],["submitting",{"_index":2558,"title":{},"body":{"contributing.html":{}}}],["substantial",{"_index":2914,"title":{},"body":{"license.html":{}}}],["success",{"_index":1112,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["successful",{"_index":1650,"title":{},"body":{"controllers/FilesS3Controller.html":{}}}],["successfully",{"_index":702,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"classes/FileResponseDto.html":{}}}],["such",{"_index":830,"title":{},"body":{"classes/Country.html":{},"classes/FileResponseDto-2.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/HttpErrorFilter.html":{},"injectables/PaginationService.html":{},"classes/Query-3.html":{},"index.html":{}}}],["suggesting",{"_index":2539,"title":{},"body":{"contributing.html":{}}}],["summary",{"_index":2860,"title":{},"body":{"index.html":{}}}],["super",{"_index":2187,"title":{},"body":{"injectables/PrismaService.html":{}}}],["super('error.file.not_image",{"_index":1447,"title":{},"body":{"classes/FileNotImageException.html":{}}}],["super('error.user_not_found",{"_index":2459,"title":{},"body":{"classes/UserNotFoundException.html":{}}}],["super(message",{"_index":1446,"title":{},"body":{"classes/FileNotImageException.html":{}}}],["super.catch(exception",{"_index":2150,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["support",{"_index":540,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"index.html":{},"modules.html":{}}}],["supports",{"_index":2077,"title":{},"body":{"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["svg",{"_index":2938,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":196,"title":{},"body":{"controllers/AppController.html":{},"classes/Currency.html":{},"classes/FileResponseDto-2.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["switch",{"_index":2134,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["switching",{"_index":1630,"title":{},"body":{"modules/FilesModule.html":{}}}],["symbol",{"_index":849,"title":{},"body":{"classes/Country.html":{},"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/Query-3.html":{}}}],["symbol_native",{"_index":952,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/Query-3.html":{}}}],["synchronize",{"_index":569,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{}}}],["syntax",{"_index":1145,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"interfaces/QueryOptions.html":{}}}],["system",{"_index":1362,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/UserNotFoundException.html":{}}}],["t",{"_index":1826,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/SortByDto.html":{},"miscellaneous/typealiases.html":{}}}],["table",{"_index":1157,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/Query.html":{},"classes/Query-3.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2642,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":1647,"title":{},"body":{"controllers/FilesS3Controller.html":{}}}],["tags",{"_index":195,"title":{},"body":{"controllers/AppController.html":{},"controllers/FilesS3Controller.html":{}}}],["takes",{"_index":2703,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tasks",{"_index":1597,"title":{},"body":{"modules/FilesLocalModule.html":{},"injectables/FilesService.html":{}}}],["taskservice",{"_index":1892,"title":{},"body":{"modules/HelperModule.html":{}}}],["teardown",{"_index":2154,"title":{},"body":{"injectables/PrismaService.html":{}}}],["temp_file_upload_url",{"_index":656,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IUploadFileConfig.html":{}}}],["template",{"_index":2061,"title":{},"body":{"classes/PaginationResponseDto.html":{}}}],["terminusmodule",{"_index":286,"title":{},"body":{"modules/AppModule.html":{}}}],["test",{"_index":1242,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"contributing.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["test:covdatabase",{"_index":2830,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":2829,"title":{},"body":{"index.html":{}}}],["testing",{"_index":1243,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["tests",{"_index":2557,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["texposedaccountinfo",{"_index":1824,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["text",{"_index":850,"title":{},"body":{"classes/Country.html":{}}}],["thanks",{"_index":2874,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":2191,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$disconnect",{"_index":2192,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$queryraw`select",{"_index":2211,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$queryrawunsafe(query",{"_index":2194,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$transaction(actions",{"_index":2210,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this._validationfilter(validationerrors",{"_index":350,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["this.configservice.get('app.apiprefix",{"_index":1615,"title":{},"body":{"injectables/FilesLocalService.html":{},"injectables/HomeService.html":{}}}],["this.configservice.get('app.appprefix",{"_index":1914,"title":{},"body":{"injectables/HomeService.html":{}}}],["this.configservice.get('app.description",{"_index":1913,"title":{},"body":{"injectables/HomeService.html":{}}}],["this.configservice.get('app.name",{"_index":1912,"title":{},"body":{"injectables/HomeService.html":{}}}],["this.configservice.get('file.maxfilesize",{"_index":1745,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["this.configservice.getorthrow('file.awsdefaults3bucket",{"_index":1749,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["this.countriesservice.create(createdto",{"_index":754,"title":{},"body":{"controllers/CountriesController.html":{}}}],["this.countriesservice.delete(id",{"_index":764,"title":{},"body":{"controllers/CountriesController.html":{}}}],["this.countriesservice.findall(paginationquery",{"_index":804,"title":{},"body":{"controllers/CountriesController.html":{}}}],["this.countriesservice.findall(query",{"_index":749,"title":{},"body":{"controllers/CountriesController.html":{}}}],["this.countriesservice.findmanywithpagination",{"_index":785,"title":{},"body":{"controllers/CountriesController.html":{}}}],["this.countriesservice.update(id",{"_index":759,"title":{},"body":{"controllers/CountriesController.html":{}}}],["this.create",{"_index":1732,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["this.currenciesservice.create(createdto",{"_index":1004,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["this.currenciesservice.delete(id",{"_index":1016,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["this.currenciesservice.findall(query",{"_index":1012,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["this.currenciesservice.update(id",{"_index":1009,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["this.currentpage",{"_index":2005,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["this.endindex",{"_index":2011,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["this.endpage",{"_index":2009,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["this.filerepository.create",{"_index":1753,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["this.filesservice.create(file",{"_index":1584,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{}}}],["this.filesservice.generatepresignedurl(key",{"_index":1717,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["this.findone(id",{"_index":1088,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["this.findone(inserted.insertid",{"_index":1076,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["this.formatvalue(conds[key])).join",{"_index":2275,"title":{},"body":{"classes/Query-2.html":{}}}],["this.formatvalue(data[key",{"_index":2287,"title":{},"body":{"classes/Query-2.html":{}}}],["this.formatvalue(id",{"_index":2288,"title":{},"body":{"classes/Query-2.html":{}}}],["this.generatepresignedurl('path/to/file",{"_index":1736,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["this.get(\"database_host",{"_index":559,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get(\"database_pass",{"_index":565,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get(\"database_schema",{"_index":566,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get(\"database_user",{"_index":563,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('api_key",{"_index":652,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('api_prefix",{"_index":585,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('app_name",{"_index":575,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_access_key_id",{"_index":669,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_default_s3_bucket",{"_index":673,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_s3_access_key_id",{"_index":589,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_s3_bucket_name",{"_index":593,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_s3_companion_secret",{"_index":603,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_s3_default_region",{"_index":595,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_s3_endpoint",{"_index":599,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_s3_region",{"_index":675,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_s3_secret_access_key",{"_index":591,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_s3_server_host",{"_index":601,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_s3_temp_directory",{"_index":597,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_secret_access_key",{"_index":671,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('backend_domain",{"_index":582,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('file_driver",{"_index":667,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('file_upload_destination",{"_index":659,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('from_email",{"_index":630,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('frontend_domain",{"_index":580,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('jwt_algorithm",{"_index":617,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('jwt_audience",{"_index":621,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('jwt_issuer",{"_index":619,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('jwt_secret_key",{"_index":615,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('multiple_file_path",{"_index":665,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('node_emailer_from_email",{"_index":645,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('node_emailer_host",{"_index":637,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('node_emailer_password",{"_index":643,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('node_emailer_to_email",{"_index":647,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('node_emailer_user",{"_index":641,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('node_env",{"_index":552,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('profile_pic_file_path",{"_index":663,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('qr_image",{"_index":608,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('qr_image_path",{"_index":610,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('qr_image_path_salt",{"_index":612,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('sender_id",{"_index":654,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('sendgrid_api_key",{"_index":628,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('sms_provider_name",{"_index":650,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('temp_file_upload_url",{"_index":657,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('to_email",{"_index":632,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('tus_storage_driver",{"_index":605,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('welcome_email",{"_index":634,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.getnumber(\"database_port",{"_index":561,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.getnumber('jwt_expiration_time",{"_index":625,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.getnumber('jwt_expires_in_seconds",{"_index":623,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.getnumber('max_upload_file_size",{"_index":661,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.getnumber('node_emailer_port",{"_index":639,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.getnumber('port",{"_index":583,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.healthcheckservice.check",{"_index":215,"title":{},"body":{"controllers/AppController.html":{}}}],["this.logger.debug",{"_index":247,"title":{},"body":{"controllers/AppController.html":{}}}],["this.logger.debug('foo",{"_index":238,"title":{},"body":{"controllers/AppController.html":{}}}],["this.logger.emergency('i",{"_index":272,"title":{},"body":{"controllers/AppController.html":{}}}],["this.logger.error('i",{"_index":268,"title":{},"body":{"controllers/AppController.html":{}}}],["this.logger.fatal('i",{"_index":270,"title":{},"body":{"controllers/AppController.html":{}}}],["this.logger.info('i",{"_index":257,"title":{},"body":{"controllers/AppController.html":{}}}],["this.logger.log('hello",{"_index":236,"title":{},"body":{"controllers/AppController.html":{}}}],["this.logger.verbose",{"_index":242,"title":{},"body":{"controllers/AppController.html":{}}}],["this.logger.warn('i",{"_index":264,"title":{},"body":{"controllers/AppController.html":{}}}],["this.module",{"_index":1061,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["this.nodeenv",{"_index":531,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.pages",{"_index":2012,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["this.pagesize",{"_index":2006,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["this.paginationservice.paginate(selectquery",{"_index":1099,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["this.prisma.$queryrawunsafe(countquery",{"_index":2089,"title":{},"body":{"injectables/PaginationService.html":{}}}],["this.prisma.$queryrawunsafe(dataquery",{"_index":2088,"title":{},"body":{"injectables/PaginationService.html":{}}}],["this.prisma.$queryrawunsafe(finalcountquery",{"_index":2121,"title":{},"body":{"injectables/PaginationService.html":{}}}],["this.prisma.$transaction",{"_index":2087,"title":{},"body":{"injectables/PaginationService.html":{}}}],["this.prisma.executerawquery(this.query.delete",{"_index":1110,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["this.prisma.executerawquery(this.query.findbycode",{"_index":1069,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["this.prisma.executerawquery(this.query.findbycode(id",{"_index":1084,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["this.prisma.executerawquery(this.query.findbyid",{"_index":1114,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["this.prisma.executerawquery(this.query.insert",{"_index":1074,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["this.prisma.executerawquery(this.query.update",{"_index":1086,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["this.prismaservice.ishealthy",{"_index":216,"title":{},"body":{"controllers/AppController.html":{}}}],["this.query.pgbasequery",{"_index":1093,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["this.query.pgbaseselectfield",{"_index":1091,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["this.querybuilder.builddeletequery(deleteoptions",{"_index":2370,"title":{},"body":{"classes/Query-3.html":{}}}],["this.querybuilder.buildinsertquery(insertoptions",{"_index":2366,"title":{},"body":{"classes/Query-3.html":{}}}],["this.querybuilder.buildselectquery(selectoptions",{"_index":2363,"title":{},"body":{"classes/Query-3.html":{}}}],["this.querystatements",{"_index":2501,"title":{},"body":{"classes/UtilsService.html":{}}}],["this.s3",{"_index":1739,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["this.service.appinfo",{"_index":1902,"title":{},"body":{"controllers/HomeController.html":{}}}],["this.startindex",{"_index":2010,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["this.startpage",{"_index":2008,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["this.totalitems",{"_index":2004,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["this.totalpages",{"_index":2007,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["this.utilsservice.builddynamicquery",{"_index":1097,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["this.utilsservice.builddynamicquery(paginationquery",{"_index":1104,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["this.utilsservice.querystatements",{"_index":1109,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["those",{"_index":2750,"title":{},"body":{"index.html":{}}}],["through",{"_index":460,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/CurrenciesService.html":{},"modules/FilesModule.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"injectables/SortBy.html":{}}}],["throughout",{"_index":1879,"title":{},"body":{"modules/HelperModule.html":{}}}],["throw",{"_index":1070,"title":{},"body":{"injectables/CurrenciesService.html":{},"classes/FileNotImageException.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/UserNotFoundException.html":{}}}],["thrown",{"_index":43,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/FileNotImageException.html":{},"classes/HttpErrorFilter.html":{},"classes/QueryFailedFilter.html":{},"classes/UserNotFoundException.html":{}}}],["throws",{"_index":208,"title":{},"body":{"controllers/AppController.html":{},"injectables/CurrenciesService.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"miscellaneous/functions.html":{}}}],["time",{"_index":892,"title":{},"body":{"classes/Country.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{}}}],["timestamp",{"_index":76,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["timezone",{"_index":836,"title":{},"body":{"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/Query-2.html":{}}}],["timezones.ts",{"_index":2565,"title":{},"body":{"coverage.html":{}}}],["to_email",{"_index":631,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/ISendGridConfig.html":{}}}],["together",{"_index":810,"title":{},"body":{"modules/CountriesModule.html":{},"modules/CurrenciesModule.html":{}}}],["tolowercase",{"_index":1687,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["tonumber",{"_index":1796,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["tool/linter",{"_index":2554,"title":{},"body":{"contributing.html":{}}}],["tools",{"_index":2761,"title":{},"body":{"index.html":{}}}],["toplainonly",{"_index":947,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/Currency.html":{},"classes/FileType.html":{}}}],["tort",{"_index":2934,"title":{},"body":{"license.html":{}}}],["total",{"_index":1830,"title":{},"body":{"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/SortByDto.html":{}}}],["total[0",{"_index":2092,"title":{},"body":{"injectables/PaginationService.html":{}}}],["total[0].count",{"_index":2122,"title":{},"body":{"injectables/PaginationService.html":{}}}],["totalitems",{"_index":1958,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{}}}],["totalpages",{"_index":1967,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{}}}],["trace",{"_index":262,"title":{},"body":{"controllers/AppController.html":{}}}],["transaction",{"_index":2174,"title":{},"body":{"injectables/PrismaService.html":{}}}],["transactional",{"_index":2176,"title":{},"body":{"injectables/PrismaService.html":{}}}],["transactions",{"_index":2158,"title":{},"body":{"injectables/PrismaService.html":{}}}],["transfer",{"_index":827,"title":{},"body":{"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/FileResponseDto-2.html":{},"classes/FileUploadDto.html":{},"classes/UpdateDto-1.html":{}}}],["transform",{"_index":937,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/FileType.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"miscellaneous/functions.html":{}}}],["transform(uppercasetransformer",{"_index":944,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{}}}],["transform(uppercasetransformer)@isdefined()@isnotempty()@isstring()@maxlength(2)@apiproperty({type",{"_index":926,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["transform(uppercasetransformer)@isdefined()@isnotempty()@isstring()@maxlength(3)@apiproperty({type",{"_index":953,"title":{},"body":{"classes/CreateDto.html":{}}}],["transform(uppercasetransformer)@isnotempty()@isstring()@maxlength(3)@apiproperty({type",{"_index":928,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["transformation",{"_index":902,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["transformed",{"_index":1118,"title":{},"body":{"classes/Currency.html":{}}}],["transformer",{"_index":907,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/FileType.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["transforming",{"_index":908,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/FileType.html":{},"miscellaneous/functions.html":{}}}],["transforms",{"_index":1494,"title":{},"body":{"classes/FileType.html":{},"miscellaneous/functions.html":{}}}],["true",{"_index":307,"title":{},"body":{"modules/AppModule.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"classes/CreateCountryDto.html":{},"classes/Currency.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileType.html":{},"injectables/FilesLocalService.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"injectables/HomeService.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PrismaService.html":{},"classes/QueryCountryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{}}}],["true})@isnotempty()@isstring",{"_index":1784,"title":{},"body":{"classes/FilterQueryDto.html":{}}}],["true})@type(undefined",{"_index":2044,"title":{},"body":{"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{}}}],["try",{"_index":362,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/QueryFailedFilter.html":{}}}],["tus_storage_driver",{"_index":604,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IAwsConfig.html":{}}}],["two",{"_index":2719,"title":{},"body":{"miscellaneous/functions.html":{}}}],["type",{"_index":31,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["type/database",{"_index":1316,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["typealiases",{"_index":2947,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":1188,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"injectables/PrismaService.html":{},"classes/Query-2.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{}}}],["typeorm",{"_index":2388,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["typeormconfig",{"_index":554,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["typeormmoduleoptions",{"_index":555,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["types",{"_index":1799,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/Query-2.html":{},"classes/SortByDto.html":{},"classes/UpdateDto-1.html":{},"classes/UtilsService.html":{},"miscellaneous/enumerations.html":{}}}],["types,@typescript",{"_index":1856,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["typescript",{"_index":423,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/FileNotImageException.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"classes/HttpErrorFilter.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/Query.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"index.html":{},"properties.html":{}}}],["tz",{"_index":2314,"title":{},"body":{"classes/Query-2.html":{}}}],["tz.abbr",{"_index":2309,"title":{},"body":{"classes/Query-2.html":{}}}],["tz.id_timezone=c.id_timezone",{"_index":2315,"title":{},"body":{"classes/Query-2.html":{}}}],["tz.offset",{"_index":2307,"title":{},"body":{"classes/Query-2.html":{}}}],["tz.offset_in_minutes",{"_index":2308,"title":{},"body":{"classes/Query-2.html":{}}}],["tz.text",{"_index":2310,"title":{},"body":{"classes/Query-2.html":{}}}],["tz.value",{"_index":2306,"title":{},"body":{"classes/Query-2.html":{}}}],["ui",{"_index":2722,"title":{},"body":{"miscellaneous/functions.html":{}}}],["unauthorized",{"_index":1289,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["undefined",{"_index":549,"title":{},"body":{"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/Query-2.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UtilsService.html":{},"miscellaneous/typealiases.html":{}}}],["undefined})@apifile()@useinterceptors(undefined",{"_index":1551,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["undefined})@isenum(paginationtype)@isoptional",{"_index":2051,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["under",{"_index":1646,"title":{},"body":{"controllers/FilesS3Controller.html":{}}}],["unique",{"_index":875,"title":{},"body":{"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/Currency.html":{},"classes/FileType.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["unit",{"_index":2827,"title":{},"body":{"index.html":{}}}],["united",{"_index":1844,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["unknown",{"_index":62,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/FilesS3PresignedController.html":{}}}],["unnamed",{"_index":2632,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["unprocessableentityexception",{"_index":1610,"title":{},"body":{"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{}}}],["unsupported",{"_index":1740,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["unused",{"_index":425,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{},"classes/UtilsService.html":{}}}],["up",{"_index":112,"title":{},"body":{"modules/ApiModule.html":{},"controllers/AppController.html":{},"classes/CreateDto.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/PrismaService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["upadetid",{"_index":2289,"title":{},"body":{"classes/Query-2.html":{}}}],["update",{"_index":689,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"interfaces/QueryOptions.html":{},"classes/UpdateDto-1.html":{},"index.html":{}}}],["update(id",{"_index":718,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{}}}],["update1(id",{"_index":2282,"title":{},"body":{"classes/Query-2.html":{}}}],["updatebyid/:id_country",{"_index":755,"title":{},"body":{"controllers/CountriesController.html":{}}}],["updated",{"_index":723,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"changelog.html":{}}}],["updated[0]?.updatedid",{"_index":1087,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["updatedid",{"_index":2294,"title":{},"body":{"classes/Query-2.html":{},"classes/Query-3.html":{}}}],["updatedto",{"_index":719,"title":{"classes/UpdateDto.html":{},"classes/UpdateDto-1.html":{}},"body":{"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"classes/UpdateDto.html":{},"classes/UpdateDto-1.html":{},"coverage.html":{}}}],["updates",{"_index":1053,"title":{},"body":{"injectables/CurrenciesService.html":{},"classes/UpdateDto-1.html":{}}}],["updating",{"_index":1023,"title":{},"body":{"injectables/CurrenciesService.html":{},"classes/Query-3.html":{},"classes/UpdateDto-1.html":{}}}],["upload",{"_index":1464,"title":{},"body":{"classes/FileResponseDto-1.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{}}}],["upload.service",{"_index":1568,"title":{},"body":{"controllers/FilesLocalController.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["upload.service.ts",{"_index":2625,"title":{},"body":{"coverage.html":{}}}],["uploaded",{"_index":1443,"title":{},"body":{"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-2.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3Service.html":{}}}],["uploadedfile",{"_index":1553,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["uploader",{"_index":1628,"title":{},"body":{"modules/FilesModule.html":{}}}],["uploadfile",{"_index":1539,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{}}}],["uploadfile(@body",{"_index":1714,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["uploadfile(@uploadedfile",{"_index":1583,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["uploadfile(file",{"_index":1546,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{}}}],["uploadfileconfig",{"_index":655,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["uploading",{"_index":1472,"title":{},"body":{"classes/FileResponseDto-1.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesService.html":{}}}],["uploads",{"_index":1366,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileNotImageException.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["uploadsignedurl",{"_index":1467,"title":{},"body":{"classes/FileResponseDto-1.html":{},"injectables/FilesS3PresignedService.html":{}}}],["uppercase",{"_index":956,"title":{},"body":{"classes/CreateDto.html":{}}}],["uppercasetransformer",{"_index":941,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"coverage.html":{}}}],["url",{"_index":1299,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"classes/FileResponseDto-1.html":{},"classes/FileType.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"classes/HttpErrorFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{}}}],["urls",{"_index":1694,"title":{},"body":{"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["use",{"_index":1441,"title":{},"body":{"classes/FileNotImageException.html":{},"modules/FilesLocalModule.html":{},"modules/FilesS3PresignedModule.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"contributing.html":{},"index.html":{},"license.html":{}}}],["useclass",{"_index":141,"title":{},"body":{"modules/ApiModule.html":{},"classes/HttpErrorFilter.html":{}}}],["used",{"_index":33,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/DynamicQueryBuilder.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"controllers/HomeController.html":{},"injectables/HomeService.html":{},"interfaces/IAppConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"classes/UpdateDto-1.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["useexisting",{"_index":313,"title":{},"body":{"modules/AppModule.html":{}}}],["usefactory",{"_index":1677,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["useful",{"_index":2965,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["useinterceptors",{"_index":1554,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["useinterceptors(fileinterceptor('file",{"_index":1655,"title":{},"body":{"controllers/FilesS3Controller.html":{}}}],["user",{"_index":217,"title":{},"body":{"controllers/AppController.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/UserNotFoundException.html":{},"index.html":{}}}],["usermodule",{"_index":2226,"title":{},"body":{"classes/Query.html":{}}}],["username",{"_index":562,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{}}}],["usernotfoundexception",{"_index":2450,"title":{"classes/UserNotFoundException.html":{}},"body":{"classes/UserNotFoundException.html":{},"coverage.html":{}}}],["usernotfoundexception('specific",{"_index":2454,"title":{},"body":{"classes/UserNotFoundException.html":{}}}],["users",{"_index":2227,"title":{},"body":{"classes/Query.html":{}}}],["uses",{"_index":153,"title":{},"body":{"controllers/AppController.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"classes/Currency.html":{},"classes/FileType.html":{},"controllers/HomeController.html":{},"classes/Query-3.html":{},"injectables/ResolvePromisesInterceptor.html":{},"miscellaneous/functions.html":{}}}],["using",{"_index":1028,"title":{},"body":{"injectables/CurrenciesService.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileType.html":{},"modules/FilesLocalModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/HomeService.html":{},"classes/Query-2.html":{},"index.html":{}}}],["utc",{"_index":887,"title":{},"body":{"classes/Country.html":{}}}],["utility",{"_index":1038,"title":{},"body":{"injectables/CurrenciesService.html":{},"modules/HelperModule.html":{},"classes/Query-1.html":{},"classes/UtilsService.html":{},"miscellaneous/typealiases.html":{}}}],["utilize",{"_index":1601,"title":{},"body":{"modules/FilesLocalModule.html":{}}}],["utilizes",{"_index":2073,"title":{},"body":{"injectables/PaginationService.html":{}}}],["utils/dto/infinity",{"_index":768,"title":{},"body":{"controllers/CountriesController.html":{}}}],["utils/dto/pagination",{"_index":732,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"injectables/PaginationService.html":{}}}],["utils/dto/pagination.dto",{"_index":734,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["utils/dto/pagination.meta.dto",{"_index":2060,"title":{},"body":{"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{}}}],["utils/infinity",{"_index":770,"title":{},"body":{"controllers/CountriesController.html":{}}}],["utils/transformers/upper",{"_index":978,"title":{},"body":{"classes/CreateDto.html":{}}}],["utils/types/deep",{"_index":1056,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["utils/types/pagination",{"_index":1059,"title":{},"body":{"injectables/CurrenciesService.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["utils/validate",{"_index":511,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{}}}],["utilsservice",{"_index":1035,"title":{"classes/UtilsService.html":{}},"body":{"injectables/CurrenciesService.html":{},"modules/HelperModule.html":{},"classes/Query-2.html":{},"classes/UtilsService.html":{},"coverage.html":{},"overview.html":{}}}],["v.replace(/'/g",{"_index":2324,"title":{},"body":{"classes/Query-2.html":{},"classes/UtilsService.html":{}}}],["v1",{"_index":139,"title":{},"body":{"modules/ApiModule.html":{}}}],["v1/${file.path",{"_index":1617,"title":{},"body":{"injectables/FilesLocalService.html":{}}}],["v1/countries?page=1&limit=10",{"_index":742,"title":{},"body":{"controllers/CountriesController.html":{}}}],["v1/countries?page=1&limit=10this",{"_index":711,"title":{},"body":{"controllers/CountriesController.html":{}}}],["v1/currencies/:id_currency",{"_index":1013,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["v1/upload",{"_index":1574,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["v1/upload/s3",{"_index":1649,"title":{},"body":{"controllers/FilesS3Controller.html":{}}}],["val.trim",{"_index":2105,"title":{},"body":{"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["valid",{"_index":394,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"miscellaneous/functions.html":{}}}],["validate",{"_index":400,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileUploadDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"miscellaneous/functions.html":{}}}],["validate(isvalidfield",{"_index":1822,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["validate(propertyvalue",{"_index":407,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["validate(sortby",{"_index":1839,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["validate(value",{"_index":439,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["validateconfig",{"_index":510,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["validateconfig(config",{"_index":2723,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validateconfig(process.env",{"_index":574,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{}}}],["validated",{"_index":413,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{},"miscellaneous/functions.html":{}}}],["validateif",{"_index":484,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["validateif((envvalues",{"_index":524,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["validateif(envvalues",{"_index":1296,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["validatenested",{"_index":1773,"title":{},"body":{"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{}}}],["validatenested()@type(undefined",{"_index":2372,"title":{},"body":{"classes/QueryCountryDto.html":{}}}],["validatenested({each",{"_index":2043,"title":{},"body":{"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{}}}],["validates",{"_index":409,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"injectables/FilesS3Service.html":{},"injectables/SortBy.html":{},"miscellaneous/functions.html":{}}}],["validating",{"_index":2727,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validation",{"_index":327,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"injectables/SortBy.html":{},"miscellaneous/functions.html":{}}}],["validationarguments",{"_index":402,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["validationerror",{"_index":323,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["validationerror.children",{"_index":384,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["validationerror.children.length",{"_index":385,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["validationerrors",{"_index":329,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["validationoptions",{"_index":2709,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validator",{"_index":334,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["validatorconstraint",{"_index":417,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["validatorconstraintinterface",{"_index":418,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["validators/filter.validator",{"_index":1833,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["vals",{"_index":1176,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["vals.join",{"_index":1183,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["value",{"_index":411,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/Country.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileType.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/QueryCountryDto.html":{},"interfaces/QueryOptions.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UtilsService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["value.map((v",{"_index":2323,"title":{},"body":{"classes/Query-2.html":{},"classes/UtilsService.html":{}}}],["value.replace(/'/g",{"_index":2325,"title":{},"body":{"classes/Query-2.html":{},"classes/UtilsService.html":{}}}],["value.split",{"_index":446,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["value.tolowercase",{"_index":1407,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["values",{"_index":841,"title":{},"body":{"classes/Country.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"injectables/HomeService.html":{},"injectables/PaginationService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{}}}],["values.join",{"_index":2279,"title":{},"body":{"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/UtilsService.html":{}}}],["values1",{"_index":2273,"title":{},"body":{"classes/Query-2.html":{}}}],["var",{"_index":363,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["variable",{"_index":1318,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"coverage.html":{}}}],["variables",{"_index":282,"title":{},"body":{"modules/AppModule.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"index.html":{}}}],["various",{"_index":821,"title":{},"body":{"classes/Country.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"modules/FilesModule.html":{},"miscellaneous/functions.html":{}}}],["vars",{"_index":426,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{},"classes/UtilsService.html":{}}}],["verifying",{"_index":167,"title":{},"body":{"controllers/AppController.html":{}}}],["version",{"_index":193,"title":{},"body":{"controllers/AppController.html":{},"classes/EnvironmentVariablesValidator.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"index.html":{},"properties.html":{}}}],["version_neutral",{"_index":182,"title":{},"body":{"controllers/AppController.html":{}}}],["visual",{"_index":2798,"title":{},"body":{"index.html":{}}}],["void",{"_index":52,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/FilesS3Service.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/QueryFailedFilter.html":{},"miscellaneous/functions.html":{}}}],["vscode",{"_index":2805,"title":{},"body":{"index.html":{}}}],["w",{"_index":456,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["warn",{"_index":263,"title":{},"body":{"controllers/AppController.html":{}}}],["warranties",{"_index":2920,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":2916,"title":{},"body":{"license.html":{}}}],["way",{"_index":2733,"title":{},"body":{"index.html":{}}}],["welcome",{"_index":2525,"title":{},"body":{"contributing.html":{}}}],["welcome_email",{"_index":633,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/ISendGridConfig.html":{}}}],["went",{"_index":1078,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["whereclause",{"_index":1194,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["whereclauses",{"_index":1185,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"injectables/PaginationService.html":{},"interfaces/QueryOptions.html":{}}}],["whereclauses.join",{"_index":1196,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["whereclauses.length",{"_index":1195,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["whereclauses.push",{"_index":1193,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["whether",{"_index":1287,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"license.html":{}}}],["windows",{"_index":2821,"title":{},"body":{"index.html":{}}}],["within",{"_index":1642,"title":{},"body":{"modules/FilesModule.html":{},"modules/HelperModule.html":{},"injectables/ResolvePromisesInterceptor.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["without",{"_index":1880,"title":{},"body":{"modules/HelperModule.html":{},"license.html":{}}}],["working",{"_index":1944,"title":{},"body":{"interfaces/IAppConfig.html":{}}}],["workingdirectory",{"_index":576,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"interfaces/IAppConfig.html":{}}}],["world",{"_index":267,"title":{},"body":{"controllers/AppController.html":{}}}],["worry",{"_index":2748,"title":{},"body":{"index.html":{}}}],["writable",{"_index":2070,"title":{},"body":{"classes/PaginationResponseDto.html":{}}}],["wrong",{"_index":1079,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["x",{"_index":2120,"title":{},"body":{"injectables/PaginationService.html":{},"injectables/PrismaService.html":{}}}],["yarn",{"_index":2561,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["yarnrunning",{"_index":2824,"title":{},"body":{"index.html":{}}}],["yes",{"_index":1440,"title":{},"body":{"classes/FileNotImageException.html":{},"classes/Query-3.html":{},"classes/UserNotFoundException.html":{},"miscellaneous/functions.html":{}}}],["you'd",{"_index":2878,"title":{},"body":{"index.html":{}}}],["you're",{"_index":2766,"title":{},"body":{"index.html":{}}}],["yourproject",{"_index":2797,"title":{},"body":{"index.html":{}}}],["yourself",{"_index":2751,"title":{},"body":{"index.html":{}}}],["yu",{"_index":2815,"title":{},"body":{"index.html":{}}}],["yzhang.markdown",{"_index":2814,"title":{},"body":{"index.html":{}}}],["zhang",{"_index":2816,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":104,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/CountriesModule.html":{},"modules/CurrenciesModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AllExceptionsFilter.html":{"url":"classes/AllExceptionsFilter.html","title":"class - AllExceptionsFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllExceptionsFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/all-exceptions.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                A global exception filter to catch and handle all exceptions.\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                reflector\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/all-exceptions.filter.ts:47\n                            \n                        \n\n                \n                    \n                            Creates an instance of AllExceptionsFilter.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe reflector instance used for metadata reflection.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        reflector\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Reflector\n\n                    \n                \n                    \n                        \n                                Defined in src/core/filters/all-exceptions.filter.ts:54\n                        \n                    \n\n            \n                \n                    \nThe reflector instance used for metadata reflection.\n\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/filters/all-exceptions.filter.ts:63\n                        \n                    \n\n\n            \n                \n                        Catches and handles exceptions thrown by the application.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe exception that was thrown.\n\n\n                                            \n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe execution context that contains request and response objects.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ExceptionFilter, Catch, ArgumentsHost, HttpException, HttpStatus } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n\nimport { Request, Response } from 'express';\n\n/**\n * A global exception filter to catch and handle all exceptions.\n *\n * @class\n * @implements {ExceptionFilter}\n */\n\n@Catch()\nexport class AllExceptionsFilter implements ExceptionFilter {\n    /**\n     * Creates an instance of AllExceptionsFilter.\n     *\n     * @param {Reflector} reflector - The reflector instance used for metadata reflection.\n     */\n\n    constructor(public reflector: Reflector) {}\n\n    /**\n     * Catches and handles exceptions thrown by the application.\n     *\n     * @param {unknown} exception - The exception that was thrown.\n     * @param {ArgumentsHost} host - The execution context that contains request and response objects.\n     */\n\n    catch(exception: unknown, host: ArgumentsHost) {\n        console.log('ALL EXEPTION from filter', exception);\n        const ctx = host.switchToHttp();\n        const response = ctx.getResponse();\n        const request = ctx.getRequest();\n        const status =\n            exception instanceof HttpException\n                ? exception.getStatus()\n                : HttpStatus.INTERNAL_SERVER_ERROR;\n\n        const errorResponse = {\n            statusCode: status,\n            timestamp: new Date().toISOString(),\n            path: request.url,\n            message: (exception as any).message || 'Internal server error',\n        };\n\n        response.status(status).json(errorResponse);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ApiModule.html":{"url":"modules/ApiModule.html","title":"module - ApiModule","body":"\n                   \n\n\n\n\n    Modules\n    ApiModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ApiModule\n\n\n\ncluster_ApiModule_imports\n\n\n\n\nCountriesModule\n\nCountriesModule\n\n\n\nApiModule\n\nApiModule\n\nApiModule -->\n\nCountriesModule->ApiModule\n\n\n\n\n\nCurrenciesModule\n\nCurrenciesModule\n\nApiModule -->\n\nCurrenciesModule->ApiModule\n\n\n\n\n\nFilesModule\n\nFilesModule\n\nApiModule -->\n\nFilesModule->ApiModule\n\n\n\n\n\nHomeModule\n\nHomeModule\n\nApiModule -->\n\nHomeModule->ApiModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/api.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            This file contains the ApiModule class, which aggregates several feature modules and sets up a global HTTP error filter.\nThe ApiModule class is responsible for importing feature-specific modules and configuring a global HTTP error filter.\nIt serves as an aggregate module for the API-related functionalities of the application.\n\n        \n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            CountriesModule\n                        \n                        \n                            CurrenciesModule\n                        \n                        \n                            FilesModule\n                        \n                        \n                            HomeModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { APP_FILTER, RouterModule } from '@nestjs/core';\n\nimport { HttpErrorFilter } from '@core/exceptions/http-error.filter';\n\nimport { CountriesModule } from './countries/countries.module';\nimport { CurrenciesModule } from './currencies/currencies.module';\nimport { FilesModule } from './files/files.module';\nimport { HomeModule } from './home/home.module';\n\n/**\n * @fileoverview\n * This file contains the `ApiModule` class, which aggregates several feature modules and sets up a global HTTP error filter.\n *\n * @module\n * @description\n * The `ApiModule` class is responsible for importing feature-specific modules and configuring a global HTTP error filter.\n * It serves as an aggregate module for the API-related functionalities of the application.\n */\n\n@Module({\n    imports: [\n        /**\n         * Module responsible for managing country-related functionalities.\n         */\n        CountriesModule,\n\n        /**\n         * Module responsible for managing currency-related functionalities.\n         */\n        CurrenciesModule,\n\n        /**\n         * Module responsible for managing file-related functionalities.\n         */\n        FilesModule,\n\n        /**\n         * Module responsible for managing home-related functionalities.\n         */\n        HomeModule,\n        RouterModule.register([\n            {\n                path: 'v1',\n                module: CountriesModule,\n            },\n        ]),\n        RouterModule.register([\n            {\n                path: 'v1',\n                module: CurrenciesModule,\n            },\n        ]),\n    ],\n    providers: [\n        {\n            provide: APP_FILTER,\n            useClass: HttpErrorFilter,\n        },\n    ],\n})\nexport class ApiModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/app.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                This file contains the AppController class, which provides health check endpoints for the application.\nThe AppController is responsible for handling HTTP requests related to the application's health status.\nIt uses @nestjs/terminus for health checks and PrismaService to check the database connection status.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Public\n                                    Async\n                                getHealth\n                            \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Async\n                        getHealth\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHealth()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/health')@HealthCheck()\n                \n            \n\n                    \n                        \n                            Defined in src/app/app.controller.ts:66\n                        \n                    \n\n\n            \n                \n                        Health check endpoint.\nThis endpoint performs a health check by verifying the status of the database connection.\nThe result of the health check is returned in the response.\nExample :// Example response\n{\n  \"status\": \"ok\",\n  \"info\": {\n    \"prisma\": \"up\"\n  },\n  \"error\": {},\n  \"details\": {}\n}\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves with the health check result.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/log')\n                \n            \n\n                    \n                        \n                            Defined in src/app/app.controller.ts:91\n                        \n                    \n\n\n            \n                \n                        Log check endpoint.\nThis endpoint performs a log check.\nThe result of the log check is returned in the response.\nExample :// Example response\n{\n  \"logger\": {\n    \"status\": \"ok\"\n  },\n}\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                A promise that resolves with the log check result.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Inject } from '@nestjs/common'; // VERSION_NEUTRAL\nimport { ApiTags } from '@nestjs/swagger';\nimport { HealthCheck, HealthCheckService } from '@nestjs/terminus';\n\nimport Logger, { LoggerKey } from '@infineit/winston-logger/logger/domain/logger';\n\nimport { PrismaService } from '@services/prisma.service';\n// import { PublicRoute } from 'src/core/decorators/public.request.decorator';\n\n// @Controller({\n//     version: VERSION_NEUTRAL,\n//     path: '/',\n// })\n\n/**\n * @fileoverview\n * This file contains the `AppController` class, which provides health check endpoints for the application.\n *\n * @module\n * @description\n * The `AppController` is responsible for handling HTTP requests related to the application's health status.\n * It uses `@nestjs/terminus` for health checks and `PrismaService` to check the database connection status.\n */\n\n@ApiTags('Health') // Tags the controller for Swagger API documentation\n@Controller() // Decorates the class as a NestJS controller\nexport class AppController {\n    /**\n     * Creates an instance of `AppController`.\n     *\n     * @param {HealthCheckService} healthCheckService - Service for performing health checks.\n     * @param {PrismaService} prismaService - Service for interacting with the Prisma ORM.\n     */\n    constructor(\n        @Inject(LoggerKey) private logger: Logger,\n        private readonly healthCheckService: HealthCheckService,\n        private readonly prismaService: PrismaService\n    ) {}\n\n    /**\n     * Health check endpoint.\n     *\n     * @route GET /health\n     * @returns {Promise} A promise that resolves with the health check result.\n     * @throws {BadRequestException} If the health check fails.\n     *\n     * @description\n     * This endpoint performs a health check by verifying the status of the database connection.\n     * The result of the health check is returned in the response.\n     *\n     * @example\n     * // Example response\n     * {\n     *   \"status\": \"ok\",\n     *   \"info\": {\n     *     \"prisma\": \"up\"\n     *   },\n     *   \"error\": {},\n     *   \"details\": {}\n     * }\n     */\n\n    @Get('/health') // Route to handle GET requests at /health\n    @HealthCheck() // Decorator to indicate that this is a health check endpoint\n    // @PublicRoute()\n    public async getHealth(): Promise {\n        return this.healthCheckService.check([() => this.prismaService.isHealthy()]);\n    }\n\n    /**\n     * Log check endpoint.\n     *\n     * @route GET /log\n     * @returns {Promise} A promise that resolves with the log check result.\n     * @throws {BadRequestException} If the health check fails.\n     *\n     * @description\n     * This endpoint performs a log check.\n     * The result of the log check is returned in the response.\n     *\n     * @example\n     * // Example response\n     * {\n     *   \"logger\": {\n     *     \"status\": \"ok\"\n     *   },\n     * }\n     */\n\n    @Get('/log')\n    getHello(): object {\n        // const user = {\n        //     id: 'johndoe',\n        //     name: 'John Doe',\n        //     address: '123 Imaginary Street',\n        //     passport: {\n        //         number: 'BE123892',\n        //         issued: 2023,\n        //         expires: 2027,\n        //     },\n        //     phone: '123-234-544',\n        // };\n        // this.logger.log('Hello endpoint called');\n        // this.logger.log('Hello endpoint called');\n        // this.logger.debug('foo %s %o', 'bar');\n        // this.logger.verbose({ foo: 'bar' }, 'baz %s', 'qux');\n        // Debug\n        // Debug\n        this.logger.debug(\n            'I am a debug message!',\n            {\n                context: 'Bootstrap',\n                correlationId: '1b3fd064-2bed-4bb4-b3af-a5f3686b1b53',\n                sourceClass: 'AppModule',\n                props: {\n                    foo: 'bar-debug',\n                    baz: 'qux',\n                },\n            },\n            'getHello'\n        );\n\n        // // Info\n        // this.logger.info('I am an info message!', {\n        //     props: {\n        //         foo: 'bar',\n        //         baz: 'qux',\n        //     },\n        // });\n\n        this.logger.info('I am an info message should be set!', {\n            context: 'Bootstrap',\n            correlationId: '1b3fd064-2bed-4bb4-b3af-a5f3686b1b53',\n            sourceClass: 'AppModule',\n            // durationMs: 120,\n            // stack: 'Error stack trace',\n            props: { foo: 'bar', baz: 'qux' },\n        });\n\n        // Warn\n        this.logger.warn('I am a warn message! new one', {\n            context: 'Bootstrap',\n            correlationId: '1b3fd064-2bed-4bb4-b3af-a5f3686b1b53',\n            sourceClass: 'AppModule',\n            props: {\n                foo: 'bar',\n                baz: 'qux',\n            },\n            error: new Error('Hello World!'),\n        });\n\n        // Error\n        this.logger.error('I am an error message!', {\n            props: {\n                foo: 'bar',\n                baz: 'qux',\n            },\n            error: new Error('Hello World!'),\n        });\n\n        // Fatal\n        this.logger.fatal('I am a fatal message!', {\n            props: {\n                foo: 'bar',\n                baz: 'qux',\n            },\n            error: new Error('Hello World!'),\n        });\n\n        // Emergency\n        this.logger.emergency('I am an emergency message!', {\n            props: {\n                foo: 'bar',\n                baz: 'qux',\n            },\n            error: new Error('Hello World!'),\n        });\n\n        return {\n            logger: {\n                status: 'ok',\n            },\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nApiModule\n\nApiModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nApiModule->AppModule\n\n\n\n\n\nHelperModule\n\nHelperModule\n\nAppModule -->\n\nHelperModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            This file contains the AppModule class, which is the root module of the NestJS application.\nThe AppModule class is responsible for importing and configuring the core modules of the application.\nIt includes configuration for environment variables, database connections, and health checks.\n\n        \n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ApiModule\n                        \n                        \n                            HelperModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { TerminusModule } from '@nestjs/terminus';\n\n// import * as dotenv from 'dotenv';\nimport { ContextModule } from '@infineit/winston-logger/context/infrastructure/nestjs/contextModule';\nimport { LoggerModule } from '@infineit/winston-logger/logger/infrastructure/nestjs/loggerModule';\n\nimport { HelperModule } from '@common/helper/helper.module';\nimport appConfig from '@config/app.config';\nimport databaseConfig from '@config/database.config';\nimport fileConfig from '@config/file.config';\nimport loggerConfig from '@config/logger.config';\nimport { PrismaService } from '@services/prisma.service';\n\nimport { ApiModule } from '../modules/api.module';\n\nimport { AppController } from './app.controller';\n\nconst ENV = process.env.NODE_ENV;\n\n/**\n * @fileoverview\n * This file contains the `AppModule` class, which is the root module of the NestJS application.\n *\n * @module\n * @description\n * The `AppModule` class is responsible for importing and configuring the core modules of the application.\n * It includes configuration for environment variables, database connections, and health checks.\n */\n\n@Module({\n    controllers: [AppController],\n    imports: [\n        ConfigModule.forRoot({\n            isGlobal: true,\n            load: [appConfig, databaseConfig, fileConfig, loggerConfig],\n            envFilePath: !ENV ? '.env' : `.env.${ENV}`,\n        }),\n        ApiModule,\n        TerminusModule,\n        HelperModule,\n        LoggerModule.forRoot(PrismaService),\n        ContextModule,\n    ],\n    // providers: [\n    //     PrismaService,\n    //     {\n    //         provide: 'PRISMA_CLIENT',\n    //         useExisting: PrismaService,\n    //     },\n    // ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BadRequestExceptionFilter.html":{"url":"classes/BadRequestExceptionFilter.html","title":"class - BadRequestExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BadRequestExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/bad-request.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                A custom exception filter to handle BadRequestException specifically.\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                reflector\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _validationFilter\n                            \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/bad-request.filter.ts:27\n                            \n                        \n\n                \n                    \n                            Creates an instance of BadRequestExceptionFilter.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe reflector instance used for metadata reflection.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        reflector\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Reflector\n\n                    \n                \n                    \n                        \n                                Defined in src/core/filters/bad-request.filter.ts:34\n                        \n                    \n\n            \n                \n                    \nThe reflector instance used for metadata reflection.\n\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _validationFilter\n                        \n                    \n                \n            \n            \n                \n                        \n                    _validationFilter(validationErrors: ValidationError[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/filters/bad-request.filter.ts:93\n                        \n                    \n\n\n            \n                \n                        Filters and formats validation errors.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                validationErrors\n                                            \n                                                        ValidationError[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nArray of validation errors.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                Formatted validation errors.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: BadRequestException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/filters/bad-request.filter.ts:43\n                        \n                    \n\n\n            \n                \n                        Catches and handles BadRequestException thrown by the application.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                        BadRequestException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe BadRequestException that was thrown.\n\n\n                                            \n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe execution context that contains request and response objects.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { STATUS_CODES } from 'http';\n\nimport {\n    ArgumentsHost,\n    BadRequestException,\n    Catch,\n    ExceptionFilter,\n    // HttpStatus,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n\nimport { ValidationError } from 'class-validator';\nimport { Response } from 'express';\nimport * as _ from 'lodash';\n\n// import { PgSQLService } from \"../common/shared/services/pgsql.service\";\n// import { Query } from './query';\n\n/**\n * A custom exception filter to handle BadRequestException specifically.\n *\n * @class\n * @implements {ExceptionFilter}\n */\n\n@Catch(BadRequestException)\nexport class BadRequestExceptionFilter implements ExceptionFilter {\n    /**\n     * Creates an instance of BadRequestExceptionFilter.\n     *\n     * @param {Reflector} reflector - The reflector instance used for metadata reflection.\n     */\n\n    constructor(public reflector: Reflector) {}\n\n    /**\n     * Catches and handles BadRequestException thrown by the application.\n     *\n     * @param {BadRequestException} exception - The BadRequestException that was thrown.\n     * @param {ArgumentsHost} host - The execution context that contains request and response objects.\n     */\n\n    catch(exception: BadRequestException, host: ArgumentsHost) {\n        console.log('BAD REQUREST from fil');\n        const ctx = host.switchToHttp();\n        const response = ctx.getResponse();\n        // const request = ctx.getRequest();\n        const statusCode = exception.getStatus();\n        const r = exception.getResponse();\n\n        if (_.isArray(r.message) && r.message[0] instanceof ValidationError) {\n            const validationErrors = r.message;\n            r.error = this._validationFilter(validationErrors);\n        }\n\n        //put api logic here to fetch from db is erro code found\n        r.statusCode = statusCode;\n        r.message = STATUS_CODES[statusCode];\n\n        response.status(statusCode).json(r);\n\n        // try {\n        //   var sqlService = new PgSQLService();\n        //   var query = new Query();\n        //   var reqstr = JSON.stringify(_.clone(request.body));\n        //   var resstr = JSON.stringify(_.clone(r));\n        //   sqlService.run(\n        //     query.addQueryError(\"BadRequest\", request.method, request.url, reqstr, resstr)\n        //   );\n        // } catch (error) {}\n\n        // try {\n        //   var sqlService = new PgSQLService();\n        //   var query = new Query();\n        //   const reqstrobj = { body: _.clone(request.body), header: _.clone(request.header) };\n        //   var reqstr = JSON.stringify(reqstrobj);\n\n        //   const resstrobj = { res: _.clone(r), exception: exception.stack };\n        //   var resstr = JSON.stringify(resstrobj);\n        //   sqlService.run(\n        //     query.addQueryError(\"BadRequest\", request.method, request.url, reqstr, resstr)\n        //   );\n        // } catch (error) {}\n    }\n\n    /**\n     * Filters and formats validation errors.\n     *\n     * @param {ValidationError[]} validationErrors - Array of validation errors.\n     * @returns {object} Formatted validation errors.\n     */\n\n    private _validationFilter(validationErrors: ValidationError[]) {\n        const errorMessages = {};\n\n        for (const validationError of validationErrors) {\n            if (validationError.children && validationError.children.length > 0) {\n                const nestedErrorMessage = {};\n                for (let i = 0; i \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CommaSeparated.html":{"url":"injectables/CommaSeparated.html","title":"injectable - CommaSeparated","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CommaSeparated\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/filter.validator.ts\n        \n\n\n            \n                Description\n            \n            \n                Custom validator for checking if a string is a valid comma-separated list of numbers.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/validators/filter.validator.ts:47\n                        \n                    \n\n\n            \n                \n                        Default error message when validation fails.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe validation arguments.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \nThe error message.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(propertyValue: string, args: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/validators/filter.validator.ts:28\n                        \n                    \n\n\n            \n                \n                        Validates if the given value is a comma-separated list of numbers.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                propertyValue\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe value to be validated.\n\n\n                                            \n                                        \n                                        \n                                                args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe validation arguments.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \nReturns true if valid; otherwise, false.\n\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\nimport {\n    ValidatorConstraint,\n    ValidatorConstraintInterface,\n    ValidationArguments,\n} from 'class-validator';\n\n/**\n * Custom validator for checking if a string is a valid comma-separated list of numbers.\n *\n * @export\n * @class CommaSeparated\n * @implements {ValidatorConstraintInterface}\n */\n@Injectable()\n@ValidatorConstraint({ name: 'CommaSeparated', async: false })\nexport class CommaSeparated implements ValidatorConstraintInterface {\n    /**\n     * Validates if the given value is a comma-separated list of numbers.\n     *\n     * @param {string} propertyValue - The value to be validated.\n     * @param {ValidationArguments} args - The validation arguments.\n     * @returns {boolean} - Returns true if valid; otherwise, false.\n     */\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    validate(propertyValue: string, args: ValidationArguments): boolean {\n        //\n        //\n        const isValid = /^[0-9]+(,[0-9]+)*$/.test(propertyValue);\n\n        if (isValid) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Default error message when validation fails.\n     *\n     * @param {ValidationArguments} args - The validation arguments.\n     * @returns {string} - The error message.\n     */\n\n    defaultMessage(args: ValidationArguments): string {\n        return `Invalid ${args.property}`;\n    }\n}\n\n/**\n * Custom validator for checking if a string is in the correct \"field direction\" format.\n *\n * @export\n * @class SortBy\n * @implements {ValidatorConstraintInterface}\n */\n@Injectable()\n@ValidatorConstraint({ name: 'SortBy', async: false })\nexport class SortBy implements ValidatorConstraintInterface {\n    /**\n     * Validates if the given value is in the format of \"field direction\" where direction is \"ASC\" or \"DESC\".\n     *\n     * @param {string} value - The value to be validated.\n     * @param {ValidationArguments} args - The validation arguments.\n     * @returns {boolean} - Returns true if valid; otherwise, false.\n     */\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    validate(value: string, args: ValidationArguments): boolean {\n        // Split the input by spaces and validate each pair\n        const parts = value.split(' ');\n\n        // Ensure pairs of field direction (e.g., field direction, field direction, ...)\n        if (parts.length % 2 !== 0) {\n            return false;\n        }\n\n        // Regular expression to match valid field direction\n        const fieldRegex = /^[\\w]+$/;\n        const directionRegex = /^(ASC|DESC|asc|desc|Asc|Desc)$/;\n\n        // Iterate through pairs and validate\n        for (let i = 0; i \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConfigService.html":{"url":"classes/ConfigService.html","title":"class - ConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/helper/services/config.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                get\n                            \n                            \n                                    Public\n                                getBoolean\n                            \n                            \n                                    Public\n                                getNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    nodeEnv\n                                \n                                \n                                    prismaConfig\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/helper/services/config.service.ts:72\n                            \n                        \n\n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        get\n                        \n                    \n                \n            \n            \n                \n                        \n                    get(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/helper/services/config.service.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getBoolean\n                        \n                    \n                \n            \n            \n                \n                        \n                    getBoolean(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/helper/services/config.service.ts:101\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getNumber\n                        \n                    \n                \n            \n            \n                \n                        \n                    getNumber(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/helper/services/config.service.ts:97\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        nodeEnv\n                    \n                \n\n                \n                    \n                        getnodeEnv()\n                    \n                \n                            \n                                \n                                    Defined in src/common/helper/services/config.service.ts:105\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        prismaConfig\n                    \n                \n\n                \n                    \n                        getprismaConfig()\n                    \n                \n                            \n                                \n                                    Defined in src/common/helper/services/config.service.ts:139\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { IsEnum, IsInt, IsOptional, IsString, ValidateIf, IsUrl, Max, Min } from 'class-validator';\nimport * as dotenv from 'dotenv';\n\n// import { FileDriver } from '../../../core/enum/file.type';\nimport { IAppConfig } from '../../../core/interfaces/app.interfaces';\nimport { IAwsConfig } from '../../../core/interfaces/aws.interfaces';\nimport { IFileConfig } from '../../../core/interfaces/file.interfaces';\nimport { IJWTConfig } from '../../../core/interfaces/jwt.interfaces';\nimport { INodeEmailerConfig } from '../../../core/interfaces/node-emailer.interfaces';\n// import { IPostgreSQLConfig } from '../../../core/interfaces/postgres.interfaces';\nimport { ISendGridConfig } from '../../../core/interfaces/sendgrid.interfaces';\nimport { ISMSConfig } from '../../../core/interfaces/sms.interfaces';\nimport { IUploadFileConfig } from '../../../core/interfaces/upload-file.interfaces';\nimport validateConfig from '../../../utils/validate-config';\n\n/**\n * Config service\n * @export\n * @class ConfigService\n */\n\nclass EnvVarAppConfigValidator {\n    @IsInt()\n    @Min(0)\n    @Max(65535)\n    @IsOptional()\n    APP_PORT: number;\n\n    @IsUrl({ require_tld: false })\n    @IsOptional()\n    FRONTEND_DOMAIN: string;\n\n    @IsUrl({ require_tld: false })\n    @IsOptional()\n    BACKEND_DOMAIN: string;\n\n    @IsString()\n    @IsOptional()\n    API_PREFIX: string;\n}\n\n// class EnvVarFileConfigValidator {\n//     // @IsEnum(FileDriver)\n//     // FILE_DRIVER: FileDriver;\n\n//     // @ValidateIf((envValues) =>\n//     //     [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n//     // )\n//     // @IsString()\n//     // AWS_ACCESS_KEY_ID: string;\n\n//     // @ValidateIf((envValues) =>\n//     //     [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n//     // )\n//     // @IsString()\n//     // AWS_SECRET_ACCESS_KEY: string;\n\n//     // @ValidateIf((envValues) =>\n//     //     [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n//     // )\n//     // @IsString()\n//     // AWS_DEFAULT_S3_BUCKET: string;\n\n//     // @ValidateIf((envValues) =>\n//     //     [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n//     // )\n//     @IsString()\n//     AWS_S3_REGION: string;\n// }\n\nexport class ConfigService {\n    constructor() {\n        const nodeEnv = this.nodeEnv;\n        // dotenv.config({\n        //   path: nodeEnv === \"production\" ? \".env\" : `.env.${nodeEnv}`,\n        // });\n        dotenv.config({\n            path:\n                nodeEnv === 'production'\n                    ? '.env.staging'\n                    : nodeEnv === 'staging'\n                      ? '.env.staging'\n                      : '.env.development',\n        });\n\n        // // Replace \\\\n with \\n to support multiline strings in AWS\n        // for (const envName of Object.keys(process.env)) {\n        //   process.env[envName] = process.env[envName].replace(/\\\\n/g, \"\\n\");\n        // }\n    }\n\n    public get(key: string): string {\n        return process.env[key] || 'undefined';\n    }\n\n    public getNumber(key: string): number {\n        return Number(this.get(key));\n    }\n\n    public getBoolean(key: string): boolean {\n        return Boolean(this.get(key));\n    }\n\n    get nodeEnv(): string {\n        return this.get('NODE_ENV') || 'development';\n    }\n\n    // get typeOrmConfig(): TypeOrmModuleOptions {\n    //   const dbConfig = {\n    //     // eslint-disable-next-line @typescript-eslint/prefer-as-const\n    //     type: \"mysql\" as \"mysql\",\n    //     host: this.get(\"DATABASE_HOST\"),\n    //     port: this.getNumber(\"DATABASE_PORT\"),\n    //     username: this.get(\"DATABASE_USER\"),\n    //     password: this.get(\"DATABASE_PASS\"),\n    //     database: this.get(\"DATABASE_SCHEMA\"),\n    //     authSource: \"admin\",\n    //     synchronize: true,\n    //     multipleStatements: true,\n    //     entities: [\"src/**/**.entity{.ts,.js}\"],\n    //     bigNumberStrings: false,\n    //   };\n    //   return dbConfig;\n    // }\n\n    // get appConfig(): IAppConfig {\n    //     validateConfig(process.env, EnvVarAppConfigValidator);\n    //     return {\n    //         name: this.get('APP_NAME') || '',\n    //         workingDirectory: process.env.PWD || process.cwd(),\n    //         frontendDomain: this.get('FRONTEND_DOMAIN') || '',\n    //         backendDomain: this.get('BACKEND_DOMAIN') || '',\n    //         port: this.getNumber('PORT'),\n    //         apiPrefix: this.get('API_PREFIX') || '',\n    //     };\n    // }\n\n    get prismaConfig(): string {\n        return `postgresql://${this.get('POSTGRES_USER')}:${this.get('POSTGRES_PASSWORD')}@${this.get('POSTGRES_HOST')}:${this.get('POSTGRES_PORT')}/${this.get('POSTGRES_NAME')}?connection_limit=${this.get('POSTGRES_CONNECTION_LIMIT')}&pool_timeout=${this.get('POSTGRES_POOL_TIMEOUT')}&schema=${this.get('POSTGRES_SCHEMA')}`;\n    }\n\n    // get awsS3Config(): IAwsConfig {\n    //     return {\n    //         AWS_S3_ACCESS_KEY_ID: this.get('AWS_S3_ACCESS_KEY_ID'),\n    //         AWS_S3_SECRET_ACCESS_KEY: this.get('AWS_S3_SECRET_ACCESS_KEY'),\n    //         AWS_S3_BUCKET_NAME: this.get('AWS_S3_BUCKET_NAME'),\n    //         AWS_S3_DEFAULT_REGION: this.get('AWS_S3_DEFAULT_REGION'),\n    //         AWS_S3_TEMP_DIRECTORY: this.get('AWS_S3_TEMP_DIRECTORY'),\n    //         AWS_S3_ENDPOINT: this.get('AWS_S3_ENDPOINT'),\n    //         AWS_S3_SERVER_HOST: this.get('AWS_S3_SERVER_HOST'),\n    //         AWS_S3_COMPANION_SECRET: this.get('AWS_S3_COMPANION_SECRET'),\n    //         TUS_STORAGE_DRIVER: this.get('TUS_STORAGE_DRIVER'),\n    //     };\n    // }\n\n    // get qrConfig() {\n    //     return {\n    //         QR_IMAGE: this.get('QR_IMAGE') || '',\n    //         QR_IMAGE_PATH: this.get('QR_IMAGE_PATH') || '',\n    //         QR_IMAGE_PATH_SALT: this.get('QR_IMAGE_PATH_SALT') || '',\n    //     };\n    // }\n\n    // get jwtConfig(): IJWTConfig {\n    //     return {\n    //         secret: this.get('JWT_SECRET_KEY'),\n    //         algorithm: this.get('JWT_ALGORITHM'),\n    //         issuer: this.get('JWT_ISSUER'),\n    //         audience: this.get('JWT_AUDIENCE'),\n    //         expiresInSeconds: this.getNumber('JWT_EXPIRES_IN_SECONDS'),\n    //         expirationTime: this.getNumber('JWT_EXPIRATION_TIME'),\n    //     };\n    // }\n\n    // get sendgridConfig(): ISendGridConfig {\n    //     return {\n    //         SENDGRID_API_KEY: this.get('SENDGRID_API_KEY'),\n    //         FROM_EMAIL: this.get('FROM_EMAIL'),\n    //         TO_EMAIL: this.get('TO_EMAIL'),\n    //         WELCOME_EMAIL: this.get('WELCOME_EMAIL'),\n    //     };\n    // }\n\n    // get nodeemailerConfig(): INodeEmailerConfig {\n    //     return {\n    //         NODE_EMAILER_HOST: this.get('NODE_EMAILER_HOST'),\n    //         NODE_EMAILER_PORT: this.getNumber('NODE_EMAILER_PORT'),\n    //         NODE_EMAILER_USER: this.get('NODE_EMAILER_USER'),\n    //         NODE_EMAILER_PASSWORD: this.get('NODE_EMAILER_PASSWORD'),\n    //         NODE_EMAILER_FROM_EMAIL: this.get('NODE_EMAILER_FROM_EMAIL'),\n    //         NODE_EMAILER_TO_EMAIL: this.get('NODE_EMAILER_TO_EMAIL'),\n    //     };\n    // }\n\n    // get smsConfig(): ISMSConfig {\n    //     return {\n    //         SMS_PROVIDER_NAME: this.get('SMS_PROVIDER_NAME'),\n    //         API_KEY: this.get('API_KEY'),\n    //         SENDER_ID: this.get('SENDER_ID'),\n    //     };\n    // }\n\n    // get uploadFileConfig(): IUploadFileConfig {\n    //     return {\n    //         TEMP_FILE_UPLOAD_URL: this.get('TEMP_FILE_UPLOAD_URL'),\n    //         FILE_UPLOAD_DESTINATION: this.get('FILE_UPLOAD_DESTINATION'),\n    //         MAX_UPLOAD_FILE_SIZE: this.getNumber('MAX_UPLOAD_FILE_SIZE'),\n    //         PROFILE_PIC_FILE_PATH: this.get('PROFILE_PIC_FILE_PATH'),\n    //         MULTIPLE_FILE_PATH: this.get('MULTIPLE_FILE_PATH'),\n    //     };\n    // }\n\n    // get fileConfig(): IFileConfig {\n    //     // validateConfig(process.env, EnvVarFileConfigValidator);\n    //     return {\n    //         driver: (this.get('FILE_DRIVER') as any | undefined) ?? undefined,\n    //         accessKeyId: this.get('AWS_ACCESS_KEY_ID'),\n    //         secretAccessKey: this.get('AWS_SECRET_ACCESS_KEY'),\n    //         awsDefaultS3Bucket: this.get('AWS_DEFAULT_S3_BUCKET'),\n    //         awsS3Region: this.get('AWS_S3_REGION'),\n    //         maxFileSize: 5242880, // 5mb\n    //     };\n    // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CountriesController.html":{"url":"controllers/CountriesController.html","title":"controller - CountriesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CountriesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/countries/countries.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                This file defines the CountriesController, which handles HTTP requests related to countries.\nThe CountriesController is responsible for handling requests to find and retrieve country information.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createDto: CreateCountryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create')@HttpCode(HttpStatus.OK)@ApiOkResponse({type: Country, description: 'Create Country'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/countries/countries.controller.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createDto\n                                            \n                                                            CreateCountryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data required to create a new country.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The created country object.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(deletebyid/:id_country)@HttpCode(HttpStatus.OK)@ApiParam({name: 'id_country', type: String})@ApiOkResponse({status: undefined, description: Country has been successfully deleted.})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/countries/countries.controller.ts:114\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the country to be deleted.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                An object indicating the deletion result.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(query: PaginationQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('findall')@HttpCode(HttpStatus.OK)@ApiOkResponse({type: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/countries/countries.controller.ts:58\n                        \n                    \n\n\n            \n                \n                        Find all countries\nExample :GET /v1/countries?page=1&limit=10This endpoint allows the client to retrieve a paginated list of countries.\nSee PaginationQueryDto\nSee PaginationResponseDto\nSee Country\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe pagination query parameters.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                A promise that resolves to a paginated response of countries.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateDto: UpdateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('updatebyid/:id_country')@HttpCode(HttpStatus.OK)@ApiParam({name: 'id_country', type: String})@ApiOkResponse({type: Country, description: 'Update Country'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/countries/countries.controller.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the Country to be updated.\n\n\n                                            \n                                        \n                                        \n                                                updateDto\n                                            \n                                                            UpdateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data to update the Country with.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The updated Country object or null if not found.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Get,\n    Query,\n    HttpStatus,\n    HttpCode,\n    Post,\n    Body,\n    Patch,\n    Param,\n    ParseUUIDPipe,\n    Delete,\n} from '@nestjs/common';\nimport { ApiTags, ApiOkResponse, ApiParam } from '@nestjs/swagger';\n\nimport { PaginationResponse, PaginationResponseDto } from '@utils/dto/pagination-response.dto';\nimport { PaginationQueryDto } from '@utils/dto/pagination.dto';\n\nimport { CountriesService } from './countries.service';\nimport { Country } from './dto/country';\n//import { CreateCountryDto } from './dto/create.dto';\nimport { CreateCountryDto } from './dto/create.dto';\nimport { UpdateDto } from './dto/update.dto';\n\n/**\n * @fileoverview\n * This file defines the `CountriesController`, which handles HTTP requests related to countries.\n *\n * @module\n * @description\n * The `CountriesController` is responsible for handling requests to find and retrieve country information.\n */\n@ApiTags('Countries')\n@Controller()\nexport class CountriesController {\n    constructor(private readonly countriesService: CountriesService) {}\n\n    /***\n     * Find all countries\n     *\n     * @param {PaginationQueryDto} query - The pagination query parameters.\n     * @returns {Promise>} A promise that resolves to a paginated response of countries.\n     *\n     * @example\n     * GET /v1/countries?page=1&limit=10\n     *\n     * @description\n     * This endpoint allows the client to retrieve a paginated list of countries.\n     *\n     * @see PaginationQueryDto\n     * @see PaginationResponseDto\n     * @see Country\n     */\n\n    @Get('findall')\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ type: PaginationResponse(Country) })\n    async findAll(@Query() query: PaginationQueryDto): Promise> {\n        const get_all = await this.countriesService.findAll(query);\n\n        return get_all;\n    }\n\n    /**\n     * @route POST /country/create\n     * @description Create a new country.\n     * @param {CountryDto} createDto - The data required to create a new country.\n     * @returns {Promise} The created country object.\n     */\n\n    @Post('create')\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ type: Country, description: 'Create Country' })\n    async create(@Body() createDto: CreateCountryDto): Promise {\n        return await this.countriesService.create(createDto);\n    }\n\n    /**\n     * @route PATCH /updatebyid/:id_country\n     * @description Update an existing Country by its ID.\n     * @param {string} id - The ID of the Country to be updated.\n     * @param {UpdateDto} updateDto - The data to update the Country with.\n     * @returns {Promise} The updated Country object or null if not found.\n     */\n\n    @Patch('updatebyid/:id_country')\n    @HttpCode(HttpStatus.OK)\n    @ApiParam({ name: 'id_country', type: String })\n    @ApiOkResponse({\n        type: Country,\n        description: 'Update Country',\n    })\n    async update(\n        @Param('id_country', ParseUUIDPipe) id: string,\n        @Body() updateDto: UpdateDto\n    ): Promise {\n        const updated = await this.countriesService.update(id, updateDto);\n        return updated;\n    }\n    /**\n     * @route DELETE /deletebyid/:id_country\n     * @description Delete a country by its ID.\n     * @param {string} id - The ID of the country to be deleted.\n     * @returns {Promise} An object indicating the deletion result.\n     */\n\n    @Delete(`deletebyid/:id_country`)\n    @HttpCode(HttpStatus.OK)\n    @ApiParam({ name: 'id_country', type: String })\n    @ApiOkResponse({\n        status: HttpStatus.OK,\n        description: `Country has been successfully deleted.`,\n    })\n    async delete(@Param('id_country', ParseUUIDPipe) id: string): Promise {\n        const deleted = await this.countriesService.delete(id);\n        return deleted;\n    }\n\n    // @Get('v1/country')\n}\n\n// import { Controller, Get, Query, HttpStatus, HttpCode } from '@nestjs/common';\n// import { ApiTags, ApiOkResponse } from '@nestjs/swagger';\n\n// import {\n//     InfinityPaginationResponse,\n//     InfinityPaginationResponseDto,\n// } from '@utils/dto/infinity-pagination-response.dto';\n// import { infinityPagination } from '@utils/infinity-pagination';\n\n// import { CountriesService } from './countries.service';\n// import { Country } from './domain/country';\n// import { QueryCountryDto } from './dto/query-country.dto';\n\n// @ApiTags('Countries')\n// @Controller()\n// export class CountriesController {\n//     constructor(private readonly countriesService: CountriesService) {}\n\n//     /***\n//      * Find all countries\n//      */\n\n//     @Get('v1/countries')\n//     @HttpCode(HttpStatus.OK)\n//     @ApiOkResponse({\n//         type: InfinityPaginationResponse(Country),\n//     })\n//     async findAll(\n//         @Query() query: QueryCountryDto\n//     ): Promise> {\n//         console.log('HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHA');\n//         const page = query?.page ?? 1;\n//         let limit = query?.limit ?? 10;\n//         if (limit > 50) {\n//             limit = 50;\n//         }\n\n//         return infinityPagination(\n//             await this.countriesService.findManyWithPagination({\n//                 filterOptions: query?.filters,\n//                 sortOptions: query?.sort,\n//                 paginationOptions: {\n//                     page,\n//                     limit,\n//                 },\n//             }),\n//             { page, limit }\n//         );\n//     }\n// }\n\n// import { Controller, Get, Query, HttpStatus, HttpCode } from '@nestjs/common';\n// import { ApiTags, ApiOkResponse, ApiQuery } from '@nestjs/swagger';\n\n// // import {\n// //     InfinityPaginationResponse,\n// //     InfinityPaginationResponseDto,\n// // } from '@utils/dto/infinity-pagination-response.dto';\n// // import { infinityPagination } from '@utils/infinity-pagination';\n\n// import { ApiFilterQuery } from '@decorators/api.filter.query';\n// import {\n//     PaginationQueryDto,\n//     PaginatedResultDto,\n//     FilterQueryDto,\n//     // ApiFilterQuery,\n// } from '@utils/dto/pagination.dto';\n\n// // import { ApiNestedQuery } from '../../decorators/api-filter-query';\n\n// import { CountriesService } from './countries.service';\n// import { Country } from './domain/country';\n// // import { QueryCountryDto } from './dto/query-country.dto';\n\n// @ApiTags('Countries')\n// @Controller()\n// export class CountriesController {\n//     constructor(private readonly countriesService: CountriesService) {}\n\n//     /***\n//      * Find all countries\n//      */\n\n//     @Get('v1/countries')\n//     @HttpCode(HttpStatus.OK)\n//     // @ApiQuery({\n//     //     name: 'filters',\n//     //     required: false,\n//     //     type: String,\n//     //     description: 'Array of filter objects as a JSON string',\n//     //     example:\n//     //         '[{\"field\":\"name\",\"operator\":\"LIKE\",\"value\":\"John\"},{\"field\":\"age\",\"operator\":\">\",\"value\":\"30\"}]',\n//     // })\n//     // @ApiQuery({\n//     //     name: 'sort',\n//     //     required: false,\n//     //     type: String,\n//     //     description: 'Array of sort objects as a JSON string',\n//     //     example: '[{\"field\":\"name\",\"direction\":\"ASC\"},{\"field\":\"age\",\"direction\":\"DESC\"}]',\n//     // })\n//     // @ApiFilterQuery('filters', FilterQueryDto, 0)\n//     // @ApiFilterQuery('filters', FilterQueryDto, 1)\n//     @ApiOkResponse({ type: PaginatedResultDto })\n//     async findAll(\n//         @Query() paginationQuery: PaginationQueryDto\n//     ): Promise> {\n//         return this.countriesService.findAll(paginationQuery);\n//     }\n// }\n\n// // import { Controller, Get, Query, HttpStatus, HttpCode } from '@nestjs/common';\n// // import { ApiTags, ApiOkResponse } from '@nestjs/swagger';\n\n// // import {\n// //     InfinityPaginationResponse,\n// //     InfinityPaginationResponseDto,\n// // } from '@utils/dto/infinity-pagination-response.dto';\n// // import { infinityPagination } from '@utils/infinity-pagination';\n\n// // import { CountriesService } from './countries.service';\n// // import { Country } from './domain/country';\n// // import { QueryCountryDto } from './dto/query-country.dto';\n\n// // @ApiTags('Countries')\n// // @Controller()\n// // export class CountriesController {\n// //     constructor(private readonly countriesService: CountriesService) {}\n\n// //     /***\n// //      * Find all countries\n// //      */\n\n// //     @Get('v1/countries')\n// //     @HttpCode(HttpStatus.OK)\n// //     @ApiOkResponse({\n// //         type: InfinityPaginationResponse(Country),\n// //     })\n// //     async findAll(\n// //         @Query() query: QueryCountryDto\n// //     ): Promise> {\n// //         console.log('HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHA');\n// //         const page = query?.page ?? 1;\n// //         let limit = query?.limit ?? 10;\n// //         if (limit > 50) {\n// //             limit = 50;\n// //         }\n\n// //         return infinityPagination(\n// //             await this.countriesService.findManyWithPagination({\n// //                 filterOptions: query?.filters,\n// //                 sortOptions: query?.sort,\n// //                 paginationOptions: {\n// //                     page,\n// //                     limit,\n// //                 },\n// //             }),\n// //             { page, limit }\n// //         );\n// //     }\n// // }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CountriesModule.html":{"url":"modules/CountriesModule.html","title":"module - CountriesModule","body":"\n                   \n\n\n\n\n    Modules\n    CountriesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CountriesModule\n\n\n\ncluster_CountriesModule_exports\n\n\n\ncluster_CountriesModule_providers\n\n\n\n\nCountriesService \n\nCountriesService \n\n\n\nCountriesModule\n\nCountriesModule\n\nCountriesService  -->\n\nCountriesModule->CountriesService \n\n\n\n\n\nCountriesService\n\nCountriesService\n\nCountriesModule -->\n\nCountriesService->CountriesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/countries/countries.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            This file defines the CountriesModule, which bundles the CountriesController and CountriesService together.\nThe CountriesModule is responsible for handling country-related operations. It provides the necessary controllers and services to manage countries.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CountriesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CountriesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CountriesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { CountriesController } from './countries.controller';\nimport { CountriesService } from './countries.service';\nimport { Query } from './query';\n\n/**\n * @fileoverview\n * This file defines the `CountriesModule`, which bundles the `CountriesController` and `CountriesService` together.\n *\n * @module\n * @description\n * The `CountriesModule` is responsible for handling country-related operations. It provides the necessary controllers and services to manage countries.\n */\n@Module({\n    controllers: [CountriesController],\n    providers: [CountriesService, Query],\n    exports: [CountriesService],\n})\nexport class CountriesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Country.html":{"url":"classes/Country.html","title":"class - Country","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Country\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/countries/dto/country.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the Country class, which represents the data structure of a country\nentity used in the application. The Country class is used to describe various details\nabout a country, including its identification, name, ISO codes, and other related attributes.\nThe Country class serves as a Data Transfer Object (DTO) for representing country data.\nIt includes properties such as the country's ID, name, ISO codes, dial code, capital city,\ncontinent, currency details, and timezone information. Each property is annotated with @ApiResponseProperty\nto define its type and provide example values for API documentation purposes.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                abbr\n                            \n                            \n                                    \n                                capital\n                            \n                            \n                                    \n                                continent\n                            \n                            \n                                    \n                                currency_name\n                            \n                            \n                                    \n                                dial_code\n                            \n                            \n                                    \n                                id_country\n                            \n                            \n                                    \n                                iso\n                            \n                            \n                                    \n                                iso3\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                offset\n                            \n                            \n                                    \n                                offset_in_minutes\n                            \n                            \n                                    \n                                symbol\n                            \n                            \n                                    \n                                text\n                            \n                            \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        abbr\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'IST'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:185\n                        \n                    \n\n            \n                \n                    The abbreviation for the timezone.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        capital\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'New Delhi'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:94\n                        \n                    \n\n            \n                \n                    The capital city of the country.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        continent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'Asia'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:107\n                        \n                    \n\n            \n                \n                    The continent where the country is located.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        currency_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'Indian Rupee, US Dollar etc'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:133\n                        \n                    \n\n            \n                \n                    The name of the currency used in the country.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        dial_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: '91'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:81\n                        \n                    \n\n            \n                \n                    The international dialing code for the country.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id_country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: '123e4567-e89b-12d3-a456-426614174000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:29\n                        \n                    \n\n            \n                \n                    The unique identifier for the country.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        iso\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'IN'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:55\n                        \n                    \n\n            \n                \n                    The ISO 3166-1 alpha-2 code of the country.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        iso3\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'IND'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:68\n                        \n                    \n\n            \n                \n                    The ISO 3166-1 alpha-3 code of the country.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'India'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:42\n                        \n                    \n\n            \n                \n                    The name of the country.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        offset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: '+5:30'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:159\n                        \n                    \n\n            \n                \n                    The timezone offset from UTC.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        offset_in_minutes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: '270'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:172\n                        \n                    \n\n            \n                \n                    The timezone offset in minutes from UTC.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        symbol\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'currency symbol ₹, $ etc'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:120\n                        \n                    \n\n            \n                \n                    The symbol used for the country's currency.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'Indian Time'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:198\n                        \n                    \n\n            \n                \n                    The descriptive name of the timezone.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'Asia/Mumbai'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:146\n                        \n                    \n\n            \n                \n                    The timezone value of the country.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiResponseProperty } from '@nestjs/swagger';\n\n/**\n * @fileoverview\n * This file defines the `Country` class, which represents the data structure of a country\n * entity used in the application. The `Country` class is used to describe various details\n * about a country, including its identification, name, ISO codes, and other related attributes.\n *\n * @module\n * @description\n * The `Country` class serves as a Data Transfer Object (DTO) for representing country data.\n * It includes properties such as the country's ID, name, ISO codes, dial code, capital city,\n * continent, currency details, and timezone information. Each property is annotated with `@ApiResponseProperty`\n * to define its type and provide example values for API documentation purposes.\n */\n\nexport class Country {\n    /**\n     * The unique identifier for the country.\n     *\n     * @type {string}\n     * @example '123e4567-e89b-12d3-a456-426614174000'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: '123e4567-e89b-12d3-a456-426614174000',\n    })\n    id_country: string;\n\n    /**\n     * The name of the country.\n     *\n     * @type {string}\n     * @example 'India'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: 'India',\n    })\n    name: string;\n\n    /**\n     * The ISO 3166-1 alpha-2 code of the country.\n     *\n     * @type {string}\n     * @example 'IN'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: 'IN',\n    })\n    iso: string;\n\n    /**\n     * The ISO 3166-1 alpha-3 code of the country.\n     *\n     * @type {string}\n     * @example 'IND'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: 'IND',\n    })\n    iso3: string;\n\n    /**\n     * The international dialing code for the country.\n     *\n     * @type {string}\n     * @example '91'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: '91',\n    })\n    dial_code: string;\n\n    /**\n     * The capital city of the country.\n     *\n     * @type {string}\n     * @example 'New Delhi'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: 'New Delhi',\n    })\n    capital: string;\n\n    /**\n     * The continent where the country is located.\n     *\n     * @type {string}\n     * @example 'Asia'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: 'Asia',\n    })\n    continent: string;\n\n    /**\n     * The symbol used for the country's currency.\n     *\n     * @type {string}\n     * @example '₹'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: 'currency symbol ₹, $ etc',\n    })\n    symbol: string;\n\n    /**\n     * The name of the currency used in the country.\n     *\n     * @type {string}\n     * @example 'Indian Rupee'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: 'Indian Rupee, US Dollar etc',\n    })\n    currency_name: string;\n\n    /**\n     * The timezone value of the country.\n     *\n     * @type {string}\n     * @example 'Asia/Mumbai'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: 'Asia/Mumbai',\n    })\n    value: string;\n\n    /**\n     * The timezone offset from UTC.\n     *\n     * @type {string}\n     * @example '+5:30'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: '+5:30',\n    })\n    offset: string;\n\n    /**\n     * The timezone offset in minutes from UTC.\n     *\n     * @type {number}\n     * @example 330\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: '270',\n    })\n    offset_in_minutes: number;\n\n    /**\n     * The abbreviation for the timezone.\n     *\n     * @type {string}\n     * @example 'IST'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: 'IST',\n    })\n    abbr: string;\n\n    /**\n     * The descriptive name of the timezone.\n     *\n     * @type {string}\n     * @example 'Indian Time'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: 'Indian Time',\n    })\n    text: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCountryDto.html":{"url":"classes/CreateCountryDto.html","title":"class - CreateCountryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCountryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/countries/dto/create.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the CountryDto class, which represents the data transfer object (DTO)\nused for creating a new Country record. It includes validation rules and transformation logic\nfor the properties of the Country.\nThe CountryDto class ensures that the data provided for creating a Country adheres to\nspecified validation rules and formats. It uses decorators from class-validator for validation\nand class-transformer for transforming input data.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                capital\n                            \n                            \n                                    \n                                    \n                                    \n                                continent\n                            \n                            \n                                    \n                                    \n                                    \n                                dial_code\n                            \n                            \n                                    \n                                    Optional\n                                id_country\n                            \n                            \n                                    \n                                    \n                                    \n                                id_currency\n                            \n                            \n                                    \n                                    \n                                    \n                                id_timezone\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                iso\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                iso3\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                nice_name\n                            \n                            \n                                    \n                                    \n                                    \n                                num_code\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        capital\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({type: String, example: 'New Delhi'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/create.dto.ts:140\n                        \n                    \n\n            \n                \n                    The capital city of the country.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        continent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({type: String, example: 'Asia'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/create.dto.ts:125\n                        \n                    \n\n            \n                \n                    The continent where the country is located.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        dial_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({type: String, example: '91'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/create.dto.ts:110\n                        \n                    \n\n            \n                \n                    The international dialing code for the country.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        id_country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude({toPlainOnly: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/create.dto.ts:173\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id_currency\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({type: String, example: '123e4567-e89b-12d3-a456-426614174000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/create.dto.ts:155\n                        \n                    \n\n            \n                \n                    The unique identifier for the currency.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id_timezone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({type: String, example: '80d3aa38-6b64-424a-a95b-383e6490f5d5'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/create.dto.ts:170\n                        \n                    \n\n            \n                \n                    The unique identifier for the timezone.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        iso\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Transform(upperCaseTransformer)@IsDefined()@IsNotEmpty()@IsString()@MaxLength(2)@ApiProperty({type: String, example: 'IN'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/create.dto.ts:51\n                        \n                    \n\n            \n                \n                    The ISO 3166-1 alpha-2 code of the country.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        iso3\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Transform(upperCaseTransformer)@IsNotEmpty()@IsString()@MaxLength(3)@ApiProperty({type: String, example: 'IND'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/create.dto.ts:82\n                        \n                    \n\n            \n                \n                    The ISO 3166-1 alpha-3 code of the country.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@ApiProperty({type: String, example: 'India'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/create.dto.ts:34\n                        \n                    \n\n            \n                \n                    The name of the country.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        nice_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@ApiProperty({type: String, example: 'India'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/create.dto.ts:66\n                        \n                    \n\n            \n                \n                    The nice name of the country.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        num_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({type: String, example: '91'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/create.dto.ts:96\n                        \n                    \n\n            \n                \n                    The international  code for the country.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nimport { Exclude, Transform } from 'class-transformer';\nimport { IsDefined, IsNotEmpty, IsString, MaxLength } from 'class-validator';\n\nimport { upperCaseTransformer } from '@app/utils/transformers/upper-case.transformer';\n\n/**\n * @fileoverview\n * This file defines the `CountryDto` class, which represents the data transfer object (DTO)\n * used for creating a new Country record. It includes validation rules and transformation logic\n * for the properties of the Country.\n *\n * @module\n * @description\n * The `CountryDto` class ensures that the data provided for creating a Country adheres to\n * specified validation rules and formats. It uses decorators from `class-validator` for validation\n * and `class-transformer` for transforming input data.\n */\nexport class CreateCountryDto {\n    /**\n     * The name of the country.\n     *\n     * @type {string}\n     * @example 'India'\n     */\n    @IsDefined()\n    @IsNotEmpty()\n    @IsString()\n    @ApiProperty({\n        type: String,\n        example: 'India',\n    })\n    name: string;\n\n    /**\n     * The ISO 3166-1 alpha-2 code of the country.\n     *\n     * @type {string}\n     * @example 'IN'\n     */\n    @Transform(upperCaseTransformer)\n    @IsDefined()\n    @IsNotEmpty()\n    @IsString()\n    @MaxLength(2)\n    @ApiProperty({\n        type: String,\n        example: 'IN',\n    })\n    iso: string;\n\n    /**\n     * The nice name of the country.\n     *\n     * @type {string}\n     * @example 'India'\n     */\n    @IsDefined()\n    @IsNotEmpty()\n    @IsString()\n    @ApiProperty({\n        type: String,\n        example: 'India',\n    })\n    nice_name: string;\n\n    /**\n     * The ISO 3166-1 alpha-3 code of the country.\n     *\n     * @type {string}\n     * @example 'IND'\n     */\n    @Transform(upperCaseTransformer)\n    @IsNotEmpty()\n    @IsString()\n    @MaxLength(3)\n    @ApiProperty({\n        type: String,\n        example: 'IND',\n    })\n    iso3: string;\n\n    /**\n     * The international  code for the country.\n     *\n     * @type {string}\n     * @example '91'\n     */\n    @IsNotEmpty()\n    @IsString()\n    @ApiProperty({\n        type: String,\n        example: '91',\n    })\n    num_code: string;\n\n    /**\n     * The international dialing code for the country.\n     *\n     * @type {string}\n     * @example '91'\n     */\n    @IsNotEmpty()\n    @IsString()\n    @ApiProperty({\n        type: String,\n        example: '91',\n    })\n    dial_code: string;\n\n    /**\n     * The continent where the country is located.\n     *\n     * @type {string}\n     * @example 'Asia'\n     */\n\n    @IsNotEmpty()\n    @IsString()\n    @ApiProperty({\n        type: String,\n        example: 'Asia',\n    })\n    continent: string;\n\n    /**\n     * The capital city of the country.\n     *\n     * @type {string}\n     * @example 'New Delhi'\n     */\n\n    @IsNotEmpty()\n    @IsString()\n    @ApiProperty({\n        type: String,\n        example: 'New Delhi',\n    })\n    capital: string;\n\n    /**\n     * The unique identifier for the currency.\n     *\n     * @type {string}\n     * @example '123e4567-e89b-12d3-a456-426614174000'\n     */\n\n    @IsNotEmpty()\n    @IsString()\n    @ApiProperty({\n        type: String,\n        example: '123e4567-e89b-12d3-a456-426614174000',\n    })\n    id_currency: string;\n\n    /**\n     * The unique identifier for the timezone.\n     *\n     * @type {string}\n     * @example '80d3aa38-6b64-424a-a95b-383e6490f5d5'\n     */\n\n    @IsNotEmpty()\n    @IsString()\n    @ApiProperty({\n        type: String,\n        example: '80d3aa38-6b64-424a-a95b-383e6490f5d5',\n    })\n    id_timezone: string;\n\n    @Exclude({ toPlainOnly: true })\n    id_country?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateDto.html":{"url":"classes/CreateDto.html","title":"class - CreateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/currencies/dto/create.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the CreateDto class, which represents the data transfer object (DTO)\nused for creating a new currency record. It includes validation rules and transformation logic\nfor the properties of the currency.\nThe CreateDto class ensures that the data provided for creating a currency adheres to\nspecified validation rules and formats. It uses decorators from class-validator for validation\nand class-transformer for transforming input data.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                code\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                decimal_digits\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name_plural\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                rounding\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                symbol\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                symbol_native\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Readonly\n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Transform(upperCaseTransformer)@IsDefined()@IsNotEmpty()@IsString()@MaxLength(3)@ApiProperty({type: String, description: 'Currency Code', example: 'INR', maxLength: 3})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/create.dto.ts:38\n                        \n                    \n\n            \n                \n                    Currency code, which must be uppercase and 3 characters long.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Readonly\n                        decimal_digits\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@Type(undefined)@IsNumber()@Min(0)@ApiProperty({type: Number, description: 'Decimal digits', example: '2'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/create.dto.ts:122\n                        \n                    \n\n            \n                \n                    Number of decimal digits used for the currency.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@MaxLength(80)@ApiProperty({type: String, description: 'name of currency', example: 'Indian Rupee', maxLength: 80})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/create.dto.ts:55\n                        \n                    \n\n            \n                \n                    Name of the currency.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name_plural\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@MaxLength(80)@ApiProperty({type: String, description: 'plural name of currency', example: 'Indian rupees', maxLength: 80})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/create.dto.ts:72\n                        \n                    \n\n            \n                \n                    Plural name of the currency.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Readonly\n                        rounding\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@Type(undefined)@IsNumber()@Min(0)@ApiProperty({type: Number, description: 'Rounding', example: '0'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/create.dto.ts:138\n                        \n                    \n\n            \n                \n                    Rounding precision used for the currency.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        symbol\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@MaxLength(6)@ApiProperty({type: String, description: 'Symbol of currency', example: '₹', maxLength: 6})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/create.dto.ts:89\n                        \n                    \n\n            \n                \n                    Symbol of the currency, which can be up to 6 characters long.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        symbol_native\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@MaxLength(10)@ApiProperty({type: String, description: 'native symbol of currency', example: '₹', maxLength: 10})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/create.dto.ts:106\n                        \n                    \n\n            \n                \n                    Native symbol of the currency, which can be up to 10 characters long.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nimport { Transform, Type } from 'class-transformer';\nimport { IsDefined, IsNotEmpty, IsNumber, IsString, Min, MaxLength } from 'class-validator';\n\nimport { upperCaseTransformer } from '@utils/transformers/upper-case.transformer';\n\n/**\n * @fileoverview\n * This file defines the `CreateDto` class, which represents the data transfer object (DTO)\n * used for creating a new currency record. It includes validation rules and transformation logic\n * for the properties of the currency.\n *\n * @module\n * @description\n * The `CreateDto` class ensures that the data provided for creating a currency adheres to\n * specified validation rules and formats. It uses decorators from `class-validator` for validation\n * and `class-transformer` for transforming input data.\n */\n\nexport class CreateDto {\n    /**\n     * Currency code, which must be uppercase and 3 characters long.\n     * @example 'INR'\n     */\n\n    @Transform(upperCaseTransformer)\n    @IsDefined()\n    @IsNotEmpty()\n    @IsString()\n    @MaxLength(3)\n    @ApiProperty({\n        type: String,\n        description: 'Currency Code',\n        example: 'INR',\n        maxLength: 3,\n    })\n    readonly code: string;\n\n    /**\n     * Name of the currency.\n     * @example 'Indian Rupee'\n     */\n\n    @IsDefined()\n    @IsNotEmpty()\n    @IsString()\n    @MaxLength(80)\n    @ApiProperty({\n        type: String,\n        description: 'name of currency',\n        example: 'Indian Rupee',\n        maxLength: 80,\n    })\n    name: string;\n\n    /**\n     * Plural name of the currency.\n     * @example 'Indian rupees'\n     */\n\n    @IsDefined()\n    @IsNotEmpty()\n    @IsString()\n    @MaxLength(80)\n    @ApiProperty({\n        type: String,\n        description: 'plural name of currency',\n        example: 'Indian rupees',\n        maxLength: 80,\n    })\n    name_plural: string;\n\n    /**\n     * Symbol of the currency, which can be up to 6 characters long.\n     * @example '₹'\n     */\n\n    @IsDefined()\n    @IsNotEmpty()\n    @IsString()\n    @MaxLength(6)\n    @ApiProperty({\n        type: String,\n        description: 'Symbol of currency',\n        example: '₹',\n        maxLength: 6,\n    })\n    symbol: string;\n\n    /**\n     * Native symbol of the currency, which can be up to 10 characters long.\n     * @example '₹'\n     */\n\n    @IsDefined()\n    @IsNotEmpty()\n    @IsString()\n    @MaxLength(10)\n    @ApiProperty({\n        type: String,\n        description: 'native symbol of currency',\n        example: '₹',\n        maxLength: 10,\n    })\n    symbol_native: string;\n\n    /**\n     * Number of decimal digits used for the currency.\n     * @example 2\n     */\n\n    @IsDefined()\n    @Type(() => Number)\n    @IsNumber()\n    @Min(0)\n    @ApiProperty({\n        type: Number,\n        description: 'Decimal digits',\n        example: '2',\n    })\n    readonly decimal_digits: number;\n\n    /**\n     * Rounding precision used for the currency.\n     * @example 0\n     */\n\n    @IsDefined()\n    @Type(() => Number)\n    @IsNumber()\n    @Min(0)\n    @ApiProperty({\n        type: Number,\n        description: 'Rounding',\n        example: '0',\n    })\n    readonly rounding: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CurrenciesController.html":{"url":"controllers/CurrenciesController.html","title":"controller - CurrenciesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CurrenciesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/currencies/currencies.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                This file defines the CurrenciesController, which handles HTTP requests related to currencies.\nIt provides endpoints to create, update, retrieve, and delete currencies.\nThe CurrenciesController is responsible for exposing endpoints that interact with the CurrenciesService.\nIt uses various HTTP methods to manage currency data and handles responses with appropriate HTTP status codes.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createDto: CreateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(undefined)@HttpCode(HttpStatus.OK)@ApiCreatedResponse({type: Currency, description: 'Create currency'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/currencies/currencies.controller.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createDto\n                                            \n                                                            CreateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data required to create a new currency.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The created currency object.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(undefined)@HttpCode(HttpStatus.OK)@ApiParam({name: 'id_currency', type: String})@ApiOkResponse({status: undefined, description: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/currencies/currencies.controller.ts:113\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the currency to be deleted.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                An object indicating the deletion result.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(query: PaginationQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(undefined)@HttpCode(HttpStatus.OK)@ApiOkResponse({type: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/currencies/currencies.controller.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe pagination and filtering parameters.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                A paginated list of currencies.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateDto: UpdateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(undefined)@HttpCode(HttpStatus.OK)@ApiParam({name: 'id_currency', type: String})@ApiOkResponse({type: Currency, description: 'Update Currency'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/currencies/currencies.controller.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the currency to be updated.\n\n\n                                            \n                                        \n                                        \n                                                updateDto\n                                            \n                                                            UpdateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data to update the currency with.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The updated currency object or null if not found.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    HttpCode,\n    HttpStatus,\n    Param,\n    Patch,\n    Post,\n    Query,\n} from '@nestjs/common';\nimport { ApiTags, ApiOkResponse, ApiCreatedResponse, ApiParam } from '@nestjs/swagger';\n\nimport { PaginationResponse, PaginationResponseDto } from '@utils/dto/pagination-response.dto';\nimport { PaginationQueryDto } from '@utils/dto/pagination.dto';\n\nimport { CurrenciesService } from './currencies.service';\nimport { CreateDto } from './dto/create.dto';\nimport { Currency } from './dto/currency';\nimport { UpdateDto } from './dto/update.dto';\n\nconst modules = 'currencies';\n\n/**\n * @fileoverview\n * This file defines the `CurrenciesController`, which handles HTTP requests related to currencies.\n * It provides endpoints to create, update, retrieve, and delete currencies.\n *\n * @module\n * @description\n * The `CurrenciesController` is responsible for exposing endpoints that interact with the `CurrenciesService`.\n * It uses various HTTP methods to manage currency data and handles responses with appropriate HTTP status codes.\n */\n\n@ApiTags('Currencies')\n@Controller()\nexport class CurrenciesController {\n    constructor(private readonly currenciesService: CurrenciesService) {}\n\n    /**\n     * @route POST /currencies\n     * @description Create a new currency.\n     * @param {CreateDto} createDto - The data required to create a new currency.\n     * @returns {Promise} The created currency object.\n     */\n\n    @Post(`${modules}`)\n    @HttpCode(HttpStatus.OK)\n    @ApiCreatedResponse({\n        type: Currency,\n        description: 'Create currency',\n    })\n    async create(@Body() createDto: CreateDto): Promise {\n        const created = await this.currenciesService.create(createDto);\n        return created;\n    }\n\n    /**\n     * @route PATCH /currencies/:id_currency\n     * @description Update an existing currency by its ID.\n     * @param {string} id - The ID of the currency to be updated.\n     * @param {UpdateDto} updateDto - The data to update the currency with.\n     * @returns {Promise} The updated currency object or null if not found.\n     */\n\n    @Patch(`${modules}/:id_currency`)\n    @HttpCode(HttpStatus.OK)\n    @ApiParam({ name: 'id_currency', type: String })\n    @ApiOkResponse({\n        type: Currency,\n        description: 'Update Currency',\n    })\n    async update(\n        @Param('id_currency') id: string,\n        @Body() updateDto: UpdateDto\n    ): Promise {\n        console.log('UPDATE', id, updateDto);\n        const updated = await this.currenciesService.update(id, updateDto);\n        return updated;\n    }\n\n    /**\n     * @route GET /currencies\n     * @description Retrieve a list of currencies with pagination.\n     * @param {PaginationQueryDto} query - The pagination and filtering parameters.\n     * @returns {Promise>} A paginated list of currencies.\n     */\n\n    @Get(`${modules}`)\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ type: PaginationResponse(Currency) })\n    async findAll(@Query() query: PaginationQueryDto): Promise> {\n        const get_all = await this.currenciesService.findAll(query);\n\n        return get_all;\n    }\n\n    /**\n     * @route DELETE /v1/currencies/:id_currency\n     * @description Delete a currency by its ID.\n     * @param {string} id - The ID of the currency to be deleted.\n     * @returns {Promise} An object indicating the deletion result.\n     */\n\n    @Delete(`${modules}/:id_currency`)\n    @HttpCode(HttpStatus.OK)\n    @ApiParam({ name: 'id_currency', type: String })\n    @ApiOkResponse({\n        status: HttpStatus.OK,\n        description: `${modules} has been successfully deleted.`,\n    })\n    async delete(@Param('id_currency') id: string): Promise {\n        const deleted = await this.currenciesService.delete(id);\n\n        return deleted;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CurrenciesModule.html":{"url":"modules/CurrenciesModule.html","title":"module - CurrenciesModule","body":"\n                   \n\n\n\n\n    Modules\n    CurrenciesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CurrenciesModule\n\n\n\ncluster_CurrenciesModule_providers\n\n\n\n\nCurrenciesService\n\nCurrenciesService\n\n\n\nCurrenciesModule\n\nCurrenciesModule\n\nCurrenciesModule -->\n\nCurrenciesService->CurrenciesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/currencies/currencies.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            This file defines the CurrenciesModule, which is responsible for managing currency-related functionalities.\nThe CurrenciesModule bundles together the controller and service related to currencies,\nalong with any other necessary providers.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CurrenciesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CurrenciesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { CurrenciesController } from './currencies.controller';\nimport { CurrenciesService } from './currencies.service';\nimport { Query } from './query';\n\n/**\n * @fileoverview\n * This file defines the `CurrenciesModule`, which is responsible for managing currency-related functionalities.\n *\n * @module\n * @description\n * The `CurrenciesModule` bundles together the controller and service related to currencies,\n * along with any other necessary providers.\n */\n@Module({\n    controllers: [CurrenciesController],\n    providers: [CurrenciesService, Query],\n})\nexport class CurrenciesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CurrenciesService.html":{"url":"injectables/CurrenciesService.html","title":"injectable - CurrenciesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CurrenciesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/currencies/currencies.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the CurrenciesService class, which provides methods to manage currency data.\nIt includes operations for creating, updating, retrieving, and deleting currencies.\nThe CurrenciesService class is responsible for handling business logic related to currencies.\nIt interacts with the database through the PrismaService and performs various operations using raw SQL queries.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                MODULE\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(paginationService: PaginationService, prisma: PrismaService, query: Query, utilsService: UtilsService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/currencies/currencies.service.ts:27\n                            \n                        \n\n                \n                    \n                            Creates an instance of CurrenciesService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        paginationService\n                                                  \n                                                        \n                                                                        PaginationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to handle pagination logic.\n\n\n                                                        \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to interact with the database.\n\n\n                                                        \n                                                \n                                                \n                                                        query\n                                                  \n                                                        \n                                                                        Query\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for SQL query generation.\n\n\n                                                        \n                                                \n                                                \n                                                        utilsService\n                                                  \n                                                        \n                                                                        UtilsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for utility functions, including dynamic query building.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createDto: CreateDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/currencies/currencies.service.ts:53\n                        \n                    \n\n\n            \n                \n                        Creates a new currency.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createDto\n                                            \n                                                            CreateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nData required to create a new currency.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The created currency object.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/currencies/currencies.service.ts:175\n                        \n                    \n\n\n            \n                \n                        Deletes a currency by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the currency to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                An object indicating the result of the deletion.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(paginationQuery: PaginationQueryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/currencies/currencies.service.ts:136\n                        \n                    \n\n\n            \n                \n                        Retrieves a paginated list of currencies.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                paginationQuery\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nPagination and filtering parameters.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                A paginated list of currencies.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/currencies/currencies.service.ts:201\n                        \n                    \n\n\n            \n                \n                        Retrieves a currency by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, payload: DeepPartial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/currencies/currencies.service.ts:86\n                        \n                    \n\n\n            \n                \n                        Updates an existing currency by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the currency to update.\n\n\n                                            \n                                        \n                                        \n                                                payload\n                                            \n                                                            DeepPartial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nData to update the currency with.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The updated currency object or null if not found.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        MODULE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/currencies.service.ts:27\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, HttpException, HttpStatus } from '@nestjs/common';\n\nimport { PaginationService } from '@services/pagination.service';\nimport { PrismaService } from '@services/prisma.service';\nimport { UtilsService } from '@services/util.service';\nimport { PaginationResponseDto } from '@utils/dto/pagination-response.dto';\nimport { PaginationQueryDto } from '@utils/dto/pagination.dto';\nimport { DeepPartial } from '@utils/types/deep-partial.type';\nimport { IPaginationFieldConfig } from '@utils/types/pagination-options';\n\nimport { CreateDto } from './dto/create.dto';\nimport { Currency } from './dto/currency';\nimport { Query } from './query';\n\n/**\n * @fileoverview\n * This file defines the `CurrenciesService` class, which provides methods to manage currency data.\n * It includes operations for creating, updating, retrieving, and deleting currencies.\n *\n * @module\n * @description\n * The `CurrenciesService` class is responsible for handling business logic related to currencies.\n * It interacts with the database through the `PrismaService` and performs various operations using raw SQL queries.\n */\n@Injectable()\nexport class CurrenciesService {\n    private readonly MODULE: string;\n\n    /**\n     * Creates an instance of `CurrenciesService`.\n     * @param {PaginationService} paginationService - Service to handle pagination logic.\n     * @param {PrismaService} prisma - Service to interact with the database.\n     * @param {Query} query - Service for SQL query generation.\n     * @param {UtilsService} utilsService - Service for utility functions, including dynamic query building.\n     */\n\n    constructor(\n        private readonly paginationService: PaginationService,\n        private readonly prisma: PrismaService,\n        private readonly query: Query,\n        private readonly utilsService: UtilsService\n    ) {\n        this.MODULE = 'currency';\n    }\n\n    /**\n     * Creates a new currency.\n     * @param {CreateDto} createDto - Data required to create a new currency.\n     * @returns {Promise} The created currency object.\n     * @throws {HttpException} If the currency code already exists or if an error occurs during creation.\n     */\n\n    async create(createDto: CreateDto): Promise {\n        // Check Code for prevent duplicate\n        const find = await this.prisma.executeRawQuery(this.query.findByCode(), createDto);\n\n        if (find) {\n            throw new HttpException({ message: 'CODE ALREADY EXIST' }, HttpStatus.CONFLICT);\n        }\n\n        // Create\n        const inserted = await this.prisma.executeRawQuery(this.query.insert(), createDto, [\n            'name',\n        ]);\n\n        if (inserted && inserted.insertid) {\n            const get = await this.findOne(inserted.insertid);\n\n            return get as any;\n        } else {\n            throw new HttpException(\n                { message: 'Something went wrong' },\n                HttpStatus.INTERNAL_SERVER_ERROR\n            );\n        }\n    }\n\n    /**\n     * Updates an existing currency by its ID.\n     * @param {string} id - The ID of the currency to update.\n     * @param {DeepPartial} payload - Data to update the currency with.\n     * @returns {Promise} The updated currency object or null if not found.\n     * @throws {HttpException} If nothing to update is provided, if the code already exists, or if an error occurs during the update.\n     */\n\n    async update(id: string, payload: DeepPartial): Promise {\n        if (Object.keys(payload).length === 0) {\n            throw new HttpException(\n                {\n                    message: 'Nothing to be update!',\n                },\n                HttpStatus.BAD_REQUEST\n            );\n        }\n        if (payload.code) {\n            // Check Code\n\n            const find = await this.prisma.executeRawQuery(this.query.findByCode(id), payload);\n\n            if (find) {\n                throw new HttpException(\n                    {\n                        message: 'Code already exists!',\n                    },\n                    HttpStatus.CONFLICT\n                );\n            }\n        }\n\n        payload.id = id;\n\n        // Update\n        const updated = await this.prisma.executeRawQuery(this.query.update(), payload, ['name']);\n\n        if (!updated) {\n            throw new HttpException(\n                { message: 'Something went wrong' },\n                HttpStatus.INTERNAL_SERVER_ERROR\n            );\n        }\n\n        if (updated[0]?.updatedid) {\n            const get = await this.findOne(id);\n            return get;\n        } else {\n            throw new HttpException({ message: `${this.MODULE} not found` }, HttpStatus.NOT_FOUND);\n        }\n    }\n\n    /**\n     * Retrieves a paginated list of currencies.\n     * @param {PaginationQueryDto} paginationQuery - Pagination and filtering parameters.\n     * @returns {Promise>} A paginated list of currencies.\n     */\n\n    async findAll(paginationQuery: PaginationQueryDto): Promise> {\n        const baseFields = this.query.pgBaseSelectField();\n        const fromQuery = this.query.pgBaseQuery();\n\n        const fieldConfigs: Record = null;\n\n        const { selectQuery, countQuery } = this.utilsService.buildDynamicQuery(\n            paginationQuery,\n            fieldConfigs,\n            baseFields,\n            fromQuery,\n            'ptbl.id_currency'\n        );\n\n        return this.paginationService.paginate(selectQuery, countQuery, paginationQuery);\n\n        // const { joinTables, selectFields, filterQuery, sortByQuery } =\n        //     this.utilsService.buildDynamicQuery(paginationQuery, fieldConfigs);\n\n        // const selectQuery = `SELECT ${baseFields.join(', ')} ${selectFields} ${fromQuery} ${joinTables.join(' ')} ${filterQuery} ${sortByQuery}`;\n        // const countQuery = `SELECT count(*) ${fromQuery} ${joinTables.join(' ')} ${filterQuery}`;\n\n        // const { selectQuery, countQuery } = this.utilsService.queryStatements(\n        //     baseFields,\n        //     selectFields,\n        //     fromQuery,\n        //     joinTables,\n        //     filterQuery,\n        //     sortByQuery\n        // );\n    }\n\n    /**\n     * Deletes a currency by its ID.\n     * @param {string} id - The ID of the currency to delete.\n     * @returns {Promise} An object indicating the result of the deletion.\n     * @throws {HttpException} If an error occurs during deletion or if the currency is not found.\n     */\n\n    async delete(id: string): Promise {\n        // Delete\n        const deleted = await this.prisma.executeRawQuery(this.query.delete(), id);\n\n        if (!deleted) {\n            throw new HttpException(\n                { message: 'Something went wrong' },\n                HttpStatus.INTERNAL_SERVER_ERROR\n            );\n        }\n\n        if (deleted[0]?.deletedid) {\n            return { status: 'success' };\n        } else {\n            throw new HttpException({ message: `${this.MODULE} not found` }, HttpStatus.NOT_FOUND);\n        }\n    }\n\n    /*** HELPER METHODS */\n\n    /**\n     * Retrieves a currency by its ID.\n     * @param {string} id - The ID of the currency to retrieve.\n     * @returns {Promise} The currency object.\n     */\n\n    async findOne(id: string): Promise {\n        // Get\n        const data = await this.prisma.executeRawQuery(this.query.findById(), { id });\n\n        return data;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Currency.html":{"url":"classes/Currency.html","title":"class - Currency","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Currency\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/currencies/dto/currency.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the Currency class, which represents the data structure of a currency entity.\nIt includes properties that describe the currency and uses decorators for Swagger documentation\nand data transformation.\nThe Currency class is used to define the structure of a currency object, including its code, name,\nplural name, symbol, native symbol, decimal digits, and rounding. The class also uses decorators\nto configure how the properties should be documented and transformed.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                code\n                            \n                            \n                                    \n                                decimal_digits\n                            \n                            \n                                    \n                                    Optional\n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                name_plural\n                            \n                            \n                                    \n                                rounding\n                            \n                            \n                                    \n                                symbol\n                            \n                            \n                                    \n                                symbol_native\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'Currency Code', example: 'INR'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/currency.ts:28\n                        \n                    \n\n            \n                \n                    The code of the currency (e.g., 'INR').\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        decimal_digits\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: 'Decimal digits', example: '2'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/currency.ts:88\n                        \n                    \n\n            \n                \n                    The number of decimal digits used for the currency.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude({toPlainOnly: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/currency.ts:108\n                        \n                    \n\n            \n                \n                    The unique identifier for the currency.\nThis property is excluded from the plain representation of the object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'name of currency', example: 'Indian Rupee'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/currency.ts:40\n                        \n                    \n\n            \n                \n                    The name of the currency (e.g., 'Indian Rupee').\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name_plural\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'plural name of currency', example: 'Indian rupees'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/currency.ts:52\n                        \n                    \n\n            \n                \n                    The plural name of the currency (e.g., 'Indian rupees').\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        rounding\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: 'Rounding', example: '0'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/currency.ts:100\n                        \n                    \n\n            \n                \n                    The rounding precision used for the currency.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        symbol\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'Symbol of currency', example: '₹'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/currency.ts:64\n                        \n                    \n\n            \n                \n                    The symbol  of the currency (e.g., '₹').\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        symbol_native\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'native symbol of currency', example: '₹'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/currency.ts:76\n                        \n                    \n\n            \n                \n                    The native symbol of the currency (e.g., '₹').\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nimport { Exclude } from 'class-transformer';\n\n/**\n * @fileoverview\n * This file defines the `Currency` class, which represents the data structure of a currency entity.\n * It includes properties that describe the currency and uses decorators for Swagger documentation\n * and data transformation.\n *\n * @module\n * @description\n * The `Currency` class is used to define the structure of a currency object, including its code, name,\n * plural name, symbol, native symbol, decimal digits, and rounding. The class also uses decorators\n * to configure how the properties should be documented and transformed.\n */\nexport class Currency {\n    /**\n     * The code of the currency (e.g., 'INR').\n     * @example 'INR'\n     */\n\n    @ApiProperty({\n        type: String,\n        description: 'Currency Code',\n        example: 'INR',\n    })\n    code: string;\n\n    /**\n     * The name of the currency (e.g., 'Indian Rupee').\n     * @example 'Indian Rupee'\n     */\n\n    @ApiProperty({\n        type: String,\n        description: 'name of currency',\n        example: 'Indian Rupee',\n    })\n    name: string;\n\n    /**\n     * The plural name of the currency (e.g., 'Indian rupees').\n     * @example 'Indian rupees'\n     */\n\n    @ApiProperty({\n        type: String,\n        description: 'plural name of currency',\n        example: 'Indian rupees',\n    })\n    name_plural: string;\n\n    /**\n     * The symbol  of the currency (e.g., '₹').\n     * @example '₹'\n     */\n\n    @ApiProperty({\n        type: String,\n        description: 'Symbol of currency',\n        example: '₹',\n    })\n    symbol: string;\n\n    /**\n     * The native symbol of the currency (e.g., '₹').\n     * @example '₹'\n     */\n\n    @ApiProperty({\n        type: String,\n        description: 'native symbol of currency',\n        example: '₹',\n    })\n    symbol_native: string;\n\n    /**\n     * The number of decimal digits used for the currency.\n     * @example 2\n     */\n\n    @ApiProperty({\n        type: Number,\n        description: 'Decimal digits',\n        example: '2',\n    })\n    decimal_digits: number;\n\n    /**\n     * The rounding precision used for the currency.\n     * @example 0\n     */\n\n    @ApiProperty({\n        type: Number,\n        description: 'Rounding',\n        example: '0',\n    })\n    rounding: number;\n\n    /**\n     * The unique identifier for the currency.\n     * This property is excluded from the plain representation of the object.\n     */\n\n    @Exclude({ toPlainOnly: true })\n    id?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DynamicQueryBuilder.html":{"url":"classes/DynamicQueryBuilder.html","title":"class - DynamicQueryBuilder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DynamicQueryBuilder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/providers/dynamic-query.service-to-be-remove.ts\n        \n\n\n            \n                Description\n            \n            \n                Class to build dynamic SQL queries.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                buildDeleteQuery\n                            \n                            \n                                buildInsertQuery\n                            \n                            \n                                buildSelectQuery\n                            \n                            \n                                buildUpdateQuery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        buildDeleteQuery\n                        \n                    \n                \n            \n            \n                \nbuildDeleteQuery(options: QueryOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/providers/dynamic-query.service-to-be-remove.ts:235\n                        \n                    \n\n\n            \n                \n                        Builds a DELETE SQL query.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                            QueryOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nOptions for the DELETE query.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         object\n\n                        \n                            \n                                \nAn object containing the query name, type, and the SQL syntax.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildInsertQuery\n                        \n                    \n                \n            \n            \n                \nbuildInsertQuery(options: QueryOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/providers/dynamic-query.service-to-be-remove.ts:116\n                        \n                    \n\n\n            \n                \n                        Builds an INSERT SQL query.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                            QueryOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nOptions for the INSERT query.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         object\n\n                        \n                            \n                                \nAn object containing the query name, type, and the SQL syntax.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildSelectQuery\n                        \n                    \n                \n            \n            \n                \nbuildSelectQuery(options: QueryOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/providers/dynamic-query.service-to-be-remove.ts:145\n                        \n                    \n\n\n            \n                \n                        Builds a SELECT SQL query.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                            QueryOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nOptions for the SELECT query.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         object\n\n                        \n                            \n                                \nAn object containing the query name, type, and the SQL syntax.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildUpdateQuery\n                        \n                    \n                \n            \n            \n                \nbuildUpdateQuery(options: QueryOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/providers/dynamic-query.service-to-be-remove.ts:195\n                        \n                    \n\n\n            \n                \n                        Builds an UPDATE SQL query.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                            QueryOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nOptions for the UPDATE query.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         object\n\n                        \n                            \n                                \nAn object containing the query name, type, SQL syntax, and values to be used.\n\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as _ from 'lodash';\n\n/**\n * Options for building queries.\n *\n * @export\n * @interface QueryOptions\n */\n\nexport interface QueryOptions {\n    /**\n     * Name of the query.\n     *\n     * @type {string}\n     * @memberof QueryOptions\n     */\n\n    queryName?: string;\n\n    /**\n     * Type of the query (e.g., INSERT, SELECT, UPDATE, DELETE).\n     *\n     * @type {string}\n     * @memberof QueryOptions\n     */\n\n    queryType?: string;\n\n    /**\n     * Name of the table to perform the query on.\n     *\n     * @type {string}\n     * @memberof QueryOptions\n     */\n\n    table: string;\n\n    /**\n     * List of fields to include in the query (e.g., columns for SELECT, INSERT, or UPDATE).\n     *\n     * @type {string[]}\n     * @memberof QueryOptions\n     */\n\n    fields?: string[];\n\n    /**\n     * Values to be used in the query (e.g., for INSERT or UPDATE operations).\n     *\n     * @type {Record}\n     * @memberof QueryOptions\n     */\n\n    values?: Record;\n\n    /**\n     * Conditions for the query (e.g., WHERE clauses).\n     *\n     * @type {Record}\n     * @memberof QueryOptions\n     */\n\n    conditions?: Record;\n\n    /**\n     * Optional conditions for the query.\n     *\n     * @type {Record}\n     * @memberof QueryOptions\n     */\n\n    optionalConditions?: Record;\n\n    /**\n     * Join clauses to include in the query.\n     *\n     * @type {string[]}\n     * @memberof QueryOptions\n     */\n\n    joins?: string[];\n\n    /**\n     * Fields to return from the query.\n     *\n     * @type {string[]}\n     * @memberof QueryOptions\n     */\n\n    returningFields?: string[];\n\n    /**\n     * Type of delete operation ('soft' or 'hard').\n     *\n     * @type {string}\n     * @memberof QueryOptions\n     */\n    deleteType?: string;\n}\n\n/**\n * Class to build dynamic SQL queries.\n *\n * @export\n * @class DynamicQueryBuilder\n */\nexport class DynamicQueryBuilder {\n    /**\n     * Builds an INSERT SQL query.\n     *\n     * @param {QueryOptions} options - Options for the INSERT query.\n     * @returns {object} - An object containing the query name, type, and the SQL syntax.\n     * @memberof DynamicQueryBuilder\n     */\n\n    buildInsertQuery(options: QueryOptions): object {\n        const { queryName, queryType, fields, table, values = {}, returningFields = [] } = options;\n        const conds = _.pick(values, fields);\n        const keys = _.keys(conds);\n        const vals = _.values(conds);\n\n        const returningClause = returningFields.length\n            ? `RETURNING ${returningFields.join(', ')}`\n            : '';\n\n        const sql = `INSERT INTO ${table} (${keys.join()}) VALUES ('${vals.join(\"','\")}') ${returningClause};`;\n\n        return {\n            name: queryName ? queryName : 'add',\n            type: queryType ? queryType : 'INSERT',\n            syntax: () => {\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Builds a SELECT SQL query.\n     *\n     * @param {QueryOptions} options - Options for the SELECT query.\n     * @returns {object} - An object containing the query name, type, and the SQL syntax.\n     * @memberof DynamicQueryBuilder\n     */\n\n    buildSelectQuery(options: QueryOptions): object {\n        const {\n            queryName,\n            queryType,\n            table,\n            fields = ['*'],\n            conditions = {},\n            joins = [],\n            optionalConditions = null,\n        } = options;\n\n        const whereClauses = Object.keys(conditions).map((key) => {\n            const value = conditions[key];\n            return typeof value === 'string' ? `${key} = '${value}'` : `${key} = ${value}`;\n        });\n\n        if (optionalConditions) {\n            // Adding optional conditions dynamically\n            Object.keys(optionalConditions).forEach((key) => {\n                const value = optionalConditions[key];\n                if (value) {\n                    whereClauses.push(\n                        typeof value === 'string' ? `${key} != '${value}'` : `${key} != ${value}`\n                    );\n                }\n            });\n        }\n\n        const whereClause = whereClauses.length ? `WHERE ${whereClauses.join(' AND ')}` : '';\n        const joinClause = joins.length ? joins.join(' ') : '';\n\n        const sql = `SELECT ${fields.join(', ')} FROM ${table} ${joinClause} ${whereClause}`;\n\n        return {\n            name: queryName ? queryName : 'find',\n            type: queryType ? queryType : 'SELECT_ONE',\n            syntax: () => {\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Builds an UPDATE SQL query.\n     *\n     * @param {QueryOptions} options - Options for the UPDATE query.\n     * @returns {object} - An object containing the query name, type, SQL syntax, and values to be used.\n     * @memberof DynamicQueryBuilder\n     */\n\n    buildUpdateQuery(options: QueryOptions): object {\n        const { table, values = {}, conditions = {}, returningFields = [] } = options;\n\n        const setClauses = Object.keys(values).map((key, index) => `${key} = $${index + 1}`);\n        const whereClauses = Object.keys(conditions).map(\n            (key, index) => `${key} = $${index + Object.keys(values).length + 1}`\n        );\n\n        const returningClause = returningFields.length\n            ? `RETURNING ${returningFields.join(', ')}`\n            : '';\n\n        const sql = `UPDATE ${table} SET ${setClauses.join(', ')} WHERE ${whereClauses.join(' AND ')} ${returningClause};`;\n\n        return {\n            name: 'update',\n            type: 'UPDATE',\n            sql,\n            values: [...Object.values(values), ...Object.values(conditions)],\n        };\n    }\n\n    //     return {\n    //   name: `delete`,\n    //   type: `UPDATE`,\n    //   syntax: (idArea: number) => {\n    //     const sql = `UPDATE Area SET Status = 127 WHERE Status = 1 AND idArea = ${idArea}`;\n\n    //     return sql;\n    //   },\n    // };\n\n    /**\n     * Builds a DELETE SQL query.\n     *\n     * @param {QueryOptions} options - Options for the DELETE query.\n     * @returns {object} - An object containing the query name, type, and the SQL syntax.\n     * @memberof DynamicQueryBuilder\n     */\n\n    buildDeleteQuery(options: QueryOptions): object {\n        const {\n            queryName,\n            queryType,\n            table,\n            conditions = {},\n            optionalConditions = null,\n            joins = [],\n            returningFields = [],\n            deleteType = 'soft',\n        } = options;\n\n        const whereClauses = Object.keys(conditions).map((key) => {\n            const value = conditions[key];\n            return typeof value === 'string' ? `${key} = '${value}'` : `${key} = ${value}`;\n        });\n\n        if (optionalConditions) {\n            // Adding optional conditions dynamically\n            Object.keys(optionalConditions).forEach((key) => {\n                const value = optionalConditions[key];\n                if (value) {\n                    whereClauses.push(\n                        typeof value === 'string' ? `${key} != '${value}'` : `${key} != ${value}`\n                    );\n                }\n            });\n        }\n\n        const whereClause = whereClauses.length ? `WHERE ${whereClauses.join(' AND ')}` : '';\n        const joinClause = joins.length ? joins.join(' ') : '';\n\n        // const whereClauses = Object.keys(conditions).map((key, index) => `${key} = $${index + 1}`);\n        // const whereClause = whereClauses.length ? `WHERE ${whereClauses.join(' AND ')}` : '';\n\n        const returningClause = returningFields.length\n            ? `RETURNING ${returningFields.join(', ')}`\n            : '';\n\n        let sql: string;\n        if (deleteType === 'soft') {\n            sql = `UPDATE ${table} SET status = 127 ${whereClause} ${returningClause};`;\n        } else {\n            sql = `DELETE FROM ${table} ${joinClause} ${whereClause} ${returningClause};`;\n        }\n\n        console.log('QQQQQQQQQQQQQQQQQQQQ', sql);\n\n        return {\n            name: queryName ? queryName : 'delete',\n            type: queryType ? queryType : 'DELETE',\n            syntax: () => {\n                return sql;\n            },\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EnvVarAppConfigValidator.html":{"url":"classes/EnvVarAppConfigValidator.html","title":"class - EnvVarAppConfigValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EnvVarAppConfigValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/helper/services/config.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Config service\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                API_PREFIX\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                APP_PORT\n                            \n                            \n                                    \n                                    \n                                BACKEND_DOMAIN\n                            \n                            \n                                    \n                                    \n                                FRONTEND_DOMAIN\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        API_PREFIX\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/helper/services/config.service.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        APP_PORT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@Min(0)@Max(65535)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/helper/services/config.service.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        BACKEND_DOMAIN\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUrl({require_tld: false})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/helper/services/config.service.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        FRONTEND_DOMAIN\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUrl({require_tld: false})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/helper/services/config.service.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsInt, IsOptional, IsString, ValidateIf, IsUrl, Max, Min } from 'class-validator';\nimport * as dotenv from 'dotenv';\n\n// import { FileDriver } from '../../../core/enum/file.type';\nimport { IAppConfig } from '../../../core/interfaces/app.interfaces';\nimport { IAwsConfig } from '../../../core/interfaces/aws.interfaces';\nimport { IFileConfig } from '../../../core/interfaces/file.interfaces';\nimport { IJWTConfig } from '../../../core/interfaces/jwt.interfaces';\nimport { INodeEmailerConfig } from '../../../core/interfaces/node-emailer.interfaces';\n// import { IPostgreSQLConfig } from '../../../core/interfaces/postgres.interfaces';\nimport { ISendGridConfig } from '../../../core/interfaces/sendgrid.interfaces';\nimport { ISMSConfig } from '../../../core/interfaces/sms.interfaces';\nimport { IUploadFileConfig } from '../../../core/interfaces/upload-file.interfaces';\nimport validateConfig from '../../../utils/validate-config';\n\n/**\n * Config service\n * @export\n * @class ConfigService\n */\n\nclass EnvVarAppConfigValidator {\n    @IsInt()\n    @Min(0)\n    @Max(65535)\n    @IsOptional()\n    APP_PORT: number;\n\n    @IsUrl({ require_tld: false })\n    @IsOptional()\n    FRONTEND_DOMAIN: string;\n\n    @IsUrl({ require_tld: false })\n    @IsOptional()\n    BACKEND_DOMAIN: string;\n\n    @IsString()\n    @IsOptional()\n    API_PREFIX: string;\n}\n\n// class EnvVarFileConfigValidator {\n//     // @IsEnum(FileDriver)\n//     // FILE_DRIVER: FileDriver;\n\n//     // @ValidateIf((envValues) =>\n//     //     [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n//     // )\n//     // @IsString()\n//     // AWS_ACCESS_KEY_ID: string;\n\n//     // @ValidateIf((envValues) =>\n//     //     [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n//     // )\n//     // @IsString()\n//     // AWS_SECRET_ACCESS_KEY: string;\n\n//     // @ValidateIf((envValues) =>\n//     //     [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n//     // )\n//     // @IsString()\n//     // AWS_DEFAULT_S3_BUCKET: string;\n\n//     // @ValidateIf((envValues) =>\n//     //     [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n//     // )\n//     @IsString()\n//     AWS_S3_REGION: string;\n// }\n\nexport class ConfigService {\n    constructor() {\n        const nodeEnv = this.nodeEnv;\n        // dotenv.config({\n        //   path: nodeEnv === \"production\" ? \".env\" : `.env.${nodeEnv}`,\n        // });\n        dotenv.config({\n            path:\n                nodeEnv === 'production'\n                    ? '.env.staging'\n                    : nodeEnv === 'staging'\n                      ? '.env.staging'\n                      : '.env.development',\n        });\n\n        // // Replace \\\\n with \\n to support multiline strings in AWS\n        // for (const envName of Object.keys(process.env)) {\n        //   process.env[envName] = process.env[envName].replace(/\\\\n/g, \"\\n\");\n        // }\n    }\n\n    public get(key: string): string {\n        return process.env[key] || 'undefined';\n    }\n\n    public getNumber(key: string): number {\n        return Number(this.get(key));\n    }\n\n    public getBoolean(key: string): boolean {\n        return Boolean(this.get(key));\n    }\n\n    get nodeEnv(): string {\n        return this.get('NODE_ENV') || 'development';\n    }\n\n    // get typeOrmConfig(): TypeOrmModuleOptions {\n    //   const dbConfig = {\n    //     // eslint-disable-next-line @typescript-eslint/prefer-as-const\n    //     type: \"mysql\" as \"mysql\",\n    //     host: this.get(\"DATABASE_HOST\"),\n    //     port: this.getNumber(\"DATABASE_PORT\"),\n    //     username: this.get(\"DATABASE_USER\"),\n    //     password: this.get(\"DATABASE_PASS\"),\n    //     database: this.get(\"DATABASE_SCHEMA\"),\n    //     authSource: \"admin\",\n    //     synchronize: true,\n    //     multipleStatements: true,\n    //     entities: [\"src/**/**.entity{.ts,.js}\"],\n    //     bigNumberStrings: false,\n    //   };\n    //   return dbConfig;\n    // }\n\n    // get appConfig(): IAppConfig {\n    //     validateConfig(process.env, EnvVarAppConfigValidator);\n    //     return {\n    //         name: this.get('APP_NAME') || '',\n    //         workingDirectory: process.env.PWD || process.cwd(),\n    //         frontendDomain: this.get('FRONTEND_DOMAIN') || '',\n    //         backendDomain: this.get('BACKEND_DOMAIN') || '',\n    //         port: this.getNumber('PORT'),\n    //         apiPrefix: this.get('API_PREFIX') || '',\n    //     };\n    // }\n\n    get prismaConfig(): string {\n        return `postgresql://${this.get('POSTGRES_USER')}:${this.get('POSTGRES_PASSWORD')}@${this.get('POSTGRES_HOST')}:${this.get('POSTGRES_PORT')}/${this.get('POSTGRES_NAME')}?connection_limit=${this.get('POSTGRES_CONNECTION_LIMIT')}&pool_timeout=${this.get('POSTGRES_POOL_TIMEOUT')}&schema=${this.get('POSTGRES_SCHEMA')}`;\n    }\n\n    // get awsS3Config(): IAwsConfig {\n    //     return {\n    //         AWS_S3_ACCESS_KEY_ID: this.get('AWS_S3_ACCESS_KEY_ID'),\n    //         AWS_S3_SECRET_ACCESS_KEY: this.get('AWS_S3_SECRET_ACCESS_KEY'),\n    //         AWS_S3_BUCKET_NAME: this.get('AWS_S3_BUCKET_NAME'),\n    //         AWS_S3_DEFAULT_REGION: this.get('AWS_S3_DEFAULT_REGION'),\n    //         AWS_S3_TEMP_DIRECTORY: this.get('AWS_S3_TEMP_DIRECTORY'),\n    //         AWS_S3_ENDPOINT: this.get('AWS_S3_ENDPOINT'),\n    //         AWS_S3_SERVER_HOST: this.get('AWS_S3_SERVER_HOST'),\n    //         AWS_S3_COMPANION_SECRET: this.get('AWS_S3_COMPANION_SECRET'),\n    //         TUS_STORAGE_DRIVER: this.get('TUS_STORAGE_DRIVER'),\n    //     };\n    // }\n\n    // get qrConfig() {\n    //     return {\n    //         QR_IMAGE: this.get('QR_IMAGE') || '',\n    //         QR_IMAGE_PATH: this.get('QR_IMAGE_PATH') || '',\n    //         QR_IMAGE_PATH_SALT: this.get('QR_IMAGE_PATH_SALT') || '',\n    //     };\n    // }\n\n    // get jwtConfig(): IJWTConfig {\n    //     return {\n    //         secret: this.get('JWT_SECRET_KEY'),\n    //         algorithm: this.get('JWT_ALGORITHM'),\n    //         issuer: this.get('JWT_ISSUER'),\n    //         audience: this.get('JWT_AUDIENCE'),\n    //         expiresInSeconds: this.getNumber('JWT_EXPIRES_IN_SECONDS'),\n    //         expirationTime: this.getNumber('JWT_EXPIRATION_TIME'),\n    //     };\n    // }\n\n    // get sendgridConfig(): ISendGridConfig {\n    //     return {\n    //         SENDGRID_API_KEY: this.get('SENDGRID_API_KEY'),\n    //         FROM_EMAIL: this.get('FROM_EMAIL'),\n    //         TO_EMAIL: this.get('TO_EMAIL'),\n    //         WELCOME_EMAIL: this.get('WELCOME_EMAIL'),\n    //     };\n    // }\n\n    // get nodeemailerConfig(): INodeEmailerConfig {\n    //     return {\n    //         NODE_EMAILER_HOST: this.get('NODE_EMAILER_HOST'),\n    //         NODE_EMAILER_PORT: this.getNumber('NODE_EMAILER_PORT'),\n    //         NODE_EMAILER_USER: this.get('NODE_EMAILER_USER'),\n    //         NODE_EMAILER_PASSWORD: this.get('NODE_EMAILER_PASSWORD'),\n    //         NODE_EMAILER_FROM_EMAIL: this.get('NODE_EMAILER_FROM_EMAIL'),\n    //         NODE_EMAILER_TO_EMAIL: this.get('NODE_EMAILER_TO_EMAIL'),\n    //     };\n    // }\n\n    // get smsConfig(): ISMSConfig {\n    //     return {\n    //         SMS_PROVIDER_NAME: this.get('SMS_PROVIDER_NAME'),\n    //         API_KEY: this.get('API_KEY'),\n    //         SENDER_ID: this.get('SENDER_ID'),\n    //     };\n    // }\n\n    // get uploadFileConfig(): IUploadFileConfig {\n    //     return {\n    //         TEMP_FILE_UPLOAD_URL: this.get('TEMP_FILE_UPLOAD_URL'),\n    //         FILE_UPLOAD_DESTINATION: this.get('FILE_UPLOAD_DESTINATION'),\n    //         MAX_UPLOAD_FILE_SIZE: this.getNumber('MAX_UPLOAD_FILE_SIZE'),\n    //         PROFILE_PIC_FILE_PATH: this.get('PROFILE_PIC_FILE_PATH'),\n    //         MULTIPLE_FILE_PATH: this.get('MULTIPLE_FILE_PATH'),\n    //     };\n    // }\n\n    // get fileConfig(): IFileConfig {\n    //     // validateConfig(process.env, EnvVarFileConfigValidator);\n    //     return {\n    //         driver: (this.get('FILE_DRIVER') as any | undefined) ?? undefined,\n    //         accessKeyId: this.get('AWS_ACCESS_KEY_ID'),\n    //         secretAccessKey: this.get('AWS_SECRET_ACCESS_KEY'),\n    //         awsDefaultS3Bucket: this.get('AWS_DEFAULT_S3_BUCKET'),\n    //         awsS3Region: this.get('AWS_S3_REGION'),\n    //         maxFileSize: 5242880, // 5mb\n    //     };\n    // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EnvironmentVariablesValidator.html":{"url":"classes/EnvironmentVariablesValidator.html","title":"class - EnvironmentVariablesValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EnvironmentVariablesValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/app.config.ts\n        \n\n\n            \n                Description\n            \n            \n                Class to validate environment variables using class-validator decorators.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                API_PREFIX\n                            \n                            \n                                    \n                                    \n                                APP_DESCRIPTION\n                            \n                            \n                                    \n                                    \n                                APP_NAME\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                APP_PORT\n                            \n                            \n                                    \n                                    \n                                APP_PREFIX\n                            \n                            \n                                    \n                                    \n                                APP_VERSION\n                            \n                            \n                                    \n                                    \n                                BACKEND_DOMAIN\n                            \n                            \n                                    \n                                    \n                                FRONTEND_DOMAIN\n                            \n                            \n                                    \n                                    \n                                NODE_ENV\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        API_PREFIX\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/app.config.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        APP_DESCRIPTION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/app.config.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        APP_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/app.config.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        APP_PORT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@Min(0)@Max(65535)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/app.config.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        APP_PREFIX\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/app.config.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        APP_VERSION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/app.config.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        BACKEND_DOMAIN\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUrl({require_tld: false})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/app.config.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        FRONTEND_DOMAIN\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUrl({require_tld: false})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/app.config.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        NODE_ENV\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Environment\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(Environment)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/app.config.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { registerAs } from '@nestjs/config';\n\nimport { IsEnum, IsInt, IsOptional, IsString, IsUrl, Max, Min } from 'class-validator';\n\nimport { AppConfig } from '@config/type/app-config.type';\nimport validateConfig from '@utils/validate-config';\n\nenum Environment {\n    Development = 'development',\n    Production = 'production',\n    Staging = 'staging',\n    Test = 'testing',\n}\n\n/**\n * Class to validate environment variables using class-validator decorators.\n *\n * @export\n * @class EnvironmentVariablesValidator\n */\n\nclass EnvironmentVariablesValidator {\n    @IsEnum(Environment)\n    @IsOptional()\n    NODE_ENV: Environment;\n\n    @IsString()\n    @IsOptional()\n    APP_NAME: string;\n\n    @IsString()\n    @IsOptional()\n    APP_DESCRIPTION: string;\n\n    @IsString()\n    @IsOptional()\n    APP_VERSION: string;\n\n    @IsString()\n    @IsOptional()\n    APP_PREFIX: string;\n\n    @IsInt()\n    @Min(0)\n    @Max(65535)\n    @IsOptional()\n    APP_PORT: number;\n\n    @IsUrl({ require_tld: false })\n    @IsOptional()\n    FRONTEND_DOMAIN: string;\n\n    @IsUrl({ require_tld: false })\n    @IsOptional()\n    BACKEND_DOMAIN: string;\n\n    @IsString()\n    @IsOptional()\n    API_PREFIX: string;\n}\n\n/**\n * Configuration registration and validation.\n *\n * Registers the configuration with NestJS and validates the environment variables\n * using `EnvironmentVariablesValidator`. Returns an `AppConfig` object with default values\n * for the application configuration.\n *\n * @export\n * @function\n * @returns {AppConfig} The application configuration.\n */\n\nexport default registerAs('app', (): AppConfig => {\n    validateConfig(process.env, EnvironmentVariablesValidator);\n\n    return {\n        nodeEnv: process.env.NODE_ENV || 'development',\n        name: process.env.APP_NAME || 'app',\n        description: process.env.APP_DESCRIPTION || 'description',\n        version: process.env.APP_VERSION || '1',\n        appPrefix: process.env.APP_PREFIX || 'docs',\n        workingDirectory: process.env.PWD || process.cwd(),\n        frontendDomain: process.env.FRONTEND_DOMAIN,\n        backendDomain: process.env.BACKEND_DOMAIN ?? 'http://localhost',\n        port: process.env.APP_PORT\n            ? parseInt(process.env.APP_PORT, 10)\n            : process.env.PORT\n              ? parseInt(process.env.PORT, 10)\n              : 3000,\n        apiPrefix: process.env.API_PREFIX || 'api',\n    };\n});\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EnvironmentVariablesValidator-1.html":{"url":"classes/EnvironmentVariablesValidator-1.html","title":"class - EnvironmentVariablesValidator-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EnvironmentVariablesValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/database.config.ts\n        \n\n\n            \n                Description\n            \n            \n                Class to validate environment variables using class-validator decorators.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                DATABASE_CA\n                            \n                            \n                                    \n                                    \n                                DATABASE_CERT\n                            \n                            \n                                    \n                                    \n                                DATABASE_KEY\n                            \n                            \n                                    \n                                    \n                                DATABASE_REJECT_UNAUTHORIZED\n                            \n                            \n                                    \n                                    \n                                DATABASE_SSL_ENABLED\n                            \n                            \n                                    \n                                    \n                                DATABASE_SYNCHRONIZE\n                            \n                            \n                                    \n                                    \n                                DATABASE_URL\n                            \n                            \n                                    \n                                    \n                                POSTGRES_HOST\n                            \n                            \n                                    \n                                    \n                                POSTGRES_MAX_CONNECTIONS\n                            \n                            \n                                    \n                                    \n                                POSTGRES_NAME\n                            \n                            \n                                    \n                                    \n                                POSTGRES_PASSWORD\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                POSTGRES_PORT\n                            \n                            \n                                    \n                                    \n                                POSTGRES_USER\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        DATABASE_CA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:139\n                        \n                    \n\n            \n                \n                    Path to the SSL CA certificate.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        DATABASE_CERT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:161\n                        \n                    \n\n            \n                \n                    Path to the SSL certificate file.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        DATABASE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:150\n                        \n                    \n\n            \n                \n                    Path to the SSL key file.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        DATABASE_REJECT_UNAUTHORIZED\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:128\n                        \n                    \n\n            \n                \n                    Whether to reject unauthorized SSL certificates.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        DATABASE_SSL_ENABLED\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:117\n                        \n                    \n\n            \n                \n                    Whether to enable SSL for the database connection.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        DATABASE_SYNCHRONIZE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:95\n                        \n                    \n\n            \n                \n                    Whether to synchronize the database schema on every application start.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        DATABASE_URL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateIf(envValues => envValues.DATABASE_URL)@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:26\n                        \n                    \n\n            \n                \n                    URL for the database connection. Overrides individual PostgreSQL settings if provided.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        POSTGRES_HOST\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateIf(envValues => )@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:37\n                        \n                    \n\n            \n                \n                    PostgreSQL host if DATABASE_URL is not provided.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        POSTGRES_MAX_CONNECTIONS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:106\n                        \n                    \n\n            \n                \n                    Maximum number of PostgreSQL connections.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        POSTGRES_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateIf(envValues => )@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:73\n                        \n                    \n\n            \n                \n                    PostgreSQL database name if DATABASE_URL is not provided.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        POSTGRES_PASSWORD\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateIf(envValues => )@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:62\n                        \n                    \n\n            \n                \n                    PostgreSQL password if DATABASE_URL is not provided.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        POSTGRES_PORT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateIf(envValues => )@IsInt()@Min(0)@Max(65535)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:51\n                        \n                    \n\n            \n                \n                    PostgreSQL port if DATABASE_URL is not provided.\nMust be between 0 and 65535.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        POSTGRES_USER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateIf(envValues => )@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:84\n                        \n                    \n\n            \n                \n                    PostgreSQL user if DATABASE_URL is not provided.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { registerAs } from '@nestjs/config';\n\nimport { IsOptional, IsInt, Min, Max, IsString, ValidateIf, IsBoolean } from 'class-validator';\n\nimport validateConfig from '@utils/validate-config';\n\nimport { DatabaseConfig } from './type/database-config.type';\n\n/**\n * Class to validate environment variables using class-validator decorators.\n *\n * @export\n * @class EnvironmentVariablesValidator\n */\n\nclass EnvironmentVariablesValidator {\n    /**\n     * URL for the database connection. Overrides individual PostgreSQL settings if provided.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @ValidateIf((envValues) => envValues.DATABASE_URL)\n    @IsString()\n    DATABASE_URL: string;\n\n    /**\n     * PostgreSQL host if `DATABASE_URL` is not provided.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @ValidateIf((envValues) => !envValues.DATABASE_URL)\n    @IsString()\n    POSTGRES_HOST: string;\n\n    /**\n     * PostgreSQL port if `DATABASE_URL` is not provided.\n     * Must be between 0 and 65535.\n     *\n     * @type {number}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @ValidateIf((envValues) => !envValues.DATABASE_URL)\n    @IsInt()\n    @Min(0)\n    @Max(65535)\n    POSTGRES_PORT: number;\n\n    /**\n     * PostgreSQL password if `DATABASE_URL` is not provided.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @ValidateIf((envValues) => !envValues.DATABASE_URL)\n    @IsString()\n    POSTGRES_PASSWORD: string;\n\n    /**\n     * PostgreSQL database name if `DATABASE_URL` is not provided.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @ValidateIf((envValues) => !envValues.DATABASE_URL)\n    @IsString()\n    POSTGRES_NAME: string;\n\n    /**\n     * PostgreSQL user if `DATABASE_URL` is not provided.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @ValidateIf((envValues) => !envValues.DATABASE_URL)\n    @IsString()\n    POSTGRES_USER: string;\n\n    /**\n     * Whether to synchronize the database schema on every application start.\n     *\n     * @type {boolean}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @IsBoolean()\n    @IsOptional()\n    DATABASE_SYNCHRONIZE: boolean;\n\n    /**\n     * Maximum number of PostgreSQL connections.\n     *\n     * @type {number}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @IsInt()\n    @IsOptional()\n    POSTGRES_MAX_CONNECTIONS: number;\n\n    /**\n     * Whether to enable SSL for the database connection.\n     *\n     * @type {boolean}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @IsBoolean()\n    @IsOptional()\n    DATABASE_SSL_ENABLED: boolean;\n\n    /**\n     * Whether to reject unauthorized SSL certificates.\n     *\n     * @type {boolean}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @IsBoolean()\n    @IsOptional()\n    DATABASE_REJECT_UNAUTHORIZED: boolean;\n\n    /**\n     * Path to the SSL CA certificate.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @IsString()\n    @IsOptional()\n    DATABASE_CA: string;\n\n    /**\n     * Path to the SSL key file.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @IsString()\n    @IsOptional()\n    DATABASE_KEY: string;\n\n    /**\n     * Path to the SSL certificate file.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @IsString()\n    @IsOptional()\n    DATABASE_CERT: string;\n}\n\n/**\n * Configuration registration and validation for database settings.\n *\n * Registers the database configuration with NestJS and validates the environment variables\n * using `EnvironmentVariablesValidator`. Returns a `DatabaseConfig` object with default values\n * and environment variable values for the database configuration.\n *\n * @export\n * @function\n * @returns {DatabaseConfig} The database configuration.\n */\n\nexport default registerAs('database', (): DatabaseConfig => {\n    validateConfig(process.env, EnvironmentVariablesValidator);\n\n    return {\n        url: `postgresql://${process.env.POSTGRES_USER}:${process.env.POSTGRES_PASSWORD}@${process.env.POSTGRES_HOST}:${process.env.POSTGRES_PORT}/${process.env.POSTGRES_NAME}?connection_limit=${process.env.POSTGRES_MAX_CONNECTIONS}&pool_timeout=${process.env.POSTGRES_POOL_TIMEOUT}&schema=${process.env.POSTGRES_SCHEMA}`,\n        host: process.env.POSTGRES_HOST,\n        port: process.env.POSTGRES_PORT ? parseInt(process.env.POSTGRES_PORT, 10) : 5432,\n        password: process.env.POSTGRES_PASSWORD,\n        name: process.env.POSTGRES_NAME,\n        username: process.env.POSTGRES_USER,\n        synchronize: process.env.DATABASE_SYNCHRONIZE === 'true',\n        maxConnections: process.env.POSTGRES_MAX_CONNECTIONS\n            ? parseInt(process.env.POSTGRES_MAX_CONNECTIONS, 10)\n            : 100,\n        poolTimeout: process.env.POSTGRES_POOL_TIMEOUT\n            ? parseInt(process.env.POSTGRES_POOL_TIMEOUT, 10)\n            : 100,\n        schema: process.env.POSTGRES_SCHEMA ? process.env.POSTGRES_SCHEMA : 'public',\n        sslEnabled: process.env.DATABASE_SSL_ENABLED === 'true',\n        rejectUnauthorized: process.env.DATABASE_REJECT_UNAUTHORIZED === 'true',\n        ca: process.env.DATABASE_CA,\n        key: process.env.DATABASE_KEY,\n        cert: process.env.DATABASE_CERT,\n    };\n});\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EnvironmentVariablesValidator-2.html":{"url":"classes/EnvironmentVariablesValidator-2.html","title":"class - EnvironmentVariablesValidator-2","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EnvironmentVariablesValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/file.config.ts\n        \n\n\n            \n                Description\n            \n            \n                Class to validate environment variables related to file storage configuration.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                AWS_ACCESS_KEY_ID\n                            \n                            \n                                    \n                                    \n                                AWS_DEFAULT_S3_BUCKET\n                            \n                            \n                                    \n                                    \n                                AWS_S3_REGION\n                            \n                            \n                                    \n                                    \n                                AWS_SECRET_ACCESS_KEY\n                            \n                            \n                                    \n                                    \n                                FILE_DRIVER\n                            \n                            \n                                    \n                                    \n                                MAX_FILE_SIZE\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        AWS_ACCESS_KEY_ID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateIf(envValues => )@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/file.config.ts:38\n                        \n                    \n\n            \n                \n                    AWS access key ID, required if using S3 or presigned S3 driver.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        AWS_DEFAULT_S3_BUCKET\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateIf(envValues => )@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/file.config.ts:64\n                        \n                    \n\n            \n                \n                    Default S3 bucket name, required if using S3 or presigned S3 driver.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        AWS_S3_REGION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateIf(envValues => )@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/file.config.ts:77\n                        \n                    \n\n            \n                \n                    AWS S3 region, required if using S3 or presigned S3 driver.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        AWS_SECRET_ACCESS_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateIf(envValues => )@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/file.config.ts:51\n                        \n                    \n\n            \n                \n                    AWS secret access key, required if using S3 or presigned S3 driver.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        FILE_DRIVER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FileDriver\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(FileDriver)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/file.config.ts:25\n                        \n                    \n\n            \n                \n                    Driver for file storage. Specifies the method of file storage, e.g., local file system or S3.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        MAX_FILE_SIZE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/file.config.ts:88\n                        \n                    \n\n            \n                \n                    Maximum file size allowed for uploads, in bytes.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { registerAs } from '@nestjs/config';\n\nimport { IsEnum, IsString, ValidateIf, IsOptional } from 'class-validator';\n\nimport { FileDriver, FileConfig } from '@config/type/file-config.type';\nimport validateConfig from '@utils/validate-config';\n\n/**\n * Class to validate environment variables related to file storage configuration.\n *\n * @export\n * @class EnvironmentVariablesValidator\n */\n\nclass EnvironmentVariablesValidator {\n    /**\n     * Driver for file storage. Specifies the method of file storage, e.g., local file system or S3.\n     *\n     * @type {FileDriver}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @IsEnum(FileDriver)\n    @IsOptional()\n    FILE_DRIVER: FileDriver;\n\n    /**\n     * AWS access key ID, required if using S3 or presigned S3 driver.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @ValidateIf((envValues) =>\n        [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n    )\n    @IsString()\n    AWS_ACCESS_KEY_ID: string;\n\n    /**\n     * AWS secret access key, required if using S3 or presigned S3 driver.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @ValidateIf((envValues) =>\n        [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n    )\n    @IsString()\n    AWS_SECRET_ACCESS_KEY: string;\n\n    /**\n     * Default S3 bucket name, required if using S3 or presigned S3 driver.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @ValidateIf((envValues) =>\n        [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n    )\n    @IsString()\n    AWS_DEFAULT_S3_BUCKET: string;\n\n    /**\n     * AWS S3 region, required if using S3 or presigned S3 driver.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @ValidateIf((envValues) =>\n        [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n    )\n    @IsString()\n    AWS_S3_REGION: string;\n\n    /**\n     * Maximum file size allowed for uploads, in bytes.\n     *\n     * @type {number}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @IsString()\n    @IsOptional()\n    MAX_FILE_SIZE: number;\n}\n\n/**\n * Configuration registration and validation for file storage settings.\n *\n * Registers the file storage configuration with NestJS and validates the environment variables\n * using `EnvironmentVariablesValidator`. Returns a `FileConfig` object with default values\n * and environment variable values for file storage configuration.\n *\n * @export\n * @function\n * @returns {FileConfig} The file storage configuration.\n */\n\nexport default registerAs('file', (): FileConfig => {\n    validateConfig(process.env, EnvironmentVariablesValidator);\n\n    // console.log(\n    //     'registerAS fileconfig',\n    //     (process.env.FILE_DRIVER as FileDriver | undefined) ?? FileDriver.LOCAL,\n    //     process.env.FILE_DRIVER,\n    //     process.env\n    // );\n\n    return {\n        driver: (process.env.FILE_DRIVER as FileDriver | undefined) ?? FileDriver.LOCAL,\n        accessKeyId: process.env.AWS_ACCESS_KEY_ID,\n        secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,\n        awsDefaultS3Bucket: process.env.AWS_DEFAULT_S3_BUCKET,\n        awsS3Region: process.env.AWS_S3_REGION,\n        maxFileSize: process.env.MAX_FILE_SIZE\n            ? parseInt(process.env.MAX_FILE_SIZE, 10)\n            : process.env.MAX_FILE_SIZE\n              ? parseInt(process.env.MAX_FILE_SIZE, 10)\n              : 5242880,\n        // maxFileSize: 5242880, // 5mb\n    };\n});\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EnvironmentVariablesValidator-3.html":{"url":"classes/EnvironmentVariablesValidator-3.html","title":"class - EnvironmentVariablesValidator-3","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EnvironmentVariablesValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/logger.config.ts\n        \n\n\n            \n                Description\n            \n            \n                Class to validate environment variables using class-validator decorators.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                LOGGER_APP\n                            \n                            \n                                    \n                                    \n                                LOGGER_CONSOLE_PRINT\n                            \n                            \n                                    \n                                    \n                                LOGGER_CONTEXT\n                            \n                            \n                                    \n                                    \n                                LOGGER_DATABASE_STORAGE\n                            \n                            \n                                    \n                                    \n                                LOGGER_DURATION\n                            \n                            \n                                    \n                                    \n                                LOGGER_DURATION_LOG_LEVEL\n                            \n                            \n                                    \n                                    \n                                LOGGER_LOG_IN_FILE\n                            \n                            \n                                    \n                                    \n                                LOGGER_LOG_LEVEL\n                            \n                            \n                                    \n                                    \n                                LOGGER_ORGANIZATION\n                            \n                            \n                                    \n                                    \n                                LOGGER_SLACK_INC_WEBHOOK_URL\n                            \n                            \n                                    \n                                    \n                                NODE_ENV\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        LOGGER_APP\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/logger.config.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        LOGGER_CONSOLE_PRINT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/logger.config.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        LOGGER_CONTEXT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/logger.config.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        LOGGER_DATABASE_STORAGE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/logger.config.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        LOGGER_DURATION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/logger.config.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        LOGGER_DURATION_LOG_LEVEL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/logger.config.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        LOGGER_LOG_IN_FILE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/logger.config.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        LOGGER_LOG_LEVEL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/logger.config.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        LOGGER_ORGANIZATION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/logger.config.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        LOGGER_SLACK_INC_WEBHOOK_URL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/logger.config.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        NODE_ENV\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Environment\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(Environment)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/logger.config.ts:30\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { registerAs } from '@nestjs/config';\n\nimport { IsEnum, IsString, IsOptional, IsBoolean } from 'class-validator';\n\nimport { LoggerConfig } from '@config/type/logger-config.type';\nimport validateConfig from '@utils/validate-config';\n\nconst getBooleanEnvVar = (key: string, defaultValue: boolean = false): boolean => {\n    const value = process.env[key];\n    return value ? value.toLowerCase() === 'true' : defaultValue;\n};\n\nenum Environment {\n    Development = 'development',\n    Production = 'production',\n    Staging = 'staging',\n    Test = 'testing',\n}\n\n/**\n * Class to validate environment variables using class-validator decorators.\n *\n * @export\n * @class EnvironmentVariablesValidator\n */\n\nclass EnvironmentVariablesValidator {\n    @IsEnum(Environment)\n    @IsOptional()\n    NODE_ENV: Environment;\n\n    @IsOptional()\n    @IsString()\n    LOGGER_ORGANIZATION: string;\n\n    @IsOptional()\n    @IsString()\n    LOGGER_CONTEXT: string;\n\n    @IsOptional()\n    @IsString()\n    LOGGER_APP: string;\n\n    @IsOptional()\n    @IsBoolean()\n    LOGGER_DATABASE_STORAGE: boolean;\n\n    @IsOptional()\n    @IsString()\n    LOGGER_LOG_LEVEL: string;\n\n    @IsOptional()\n    @IsBoolean()\n    LOGGER_DURATION: boolean;\n\n    @IsOptional()\n    @IsString()\n    LOGGER_DURATION_LOG_LEVEL: string;\n\n    @IsOptional()\n    @IsBoolean()\n    LOGGER_CONSOLE_PRINT: boolean;\n\n    @IsOptional()\n    @IsBoolean()\n    LOGGER_LOG_IN_FILE: boolean;\n\n    @IsOptional()\n    @IsString()\n    LOGGER_SLACK_INC_WEBHOOK_URL: string;\n}\n\n/**\n * Configuration registration and validation.\n *\n * Registers the configuration with NestJS and validates the environment variables\n * using `EnvironmentVariablesValidator`. Returns an `LoggerConfig` object with default values\n * for the application configuration.\n *\n * @export\n * @function\n * @returns {LoggerConfig} The logger configuration.\n */\n\nexport default registerAs('logger', (): LoggerConfig => {\n    validateConfig(process.env, EnvironmentVariablesValidator);\n\n    return {\n        nodeEnv: process.env.NODE_ENV || 'development',\n        organization: process.env.LOGGER_ORGANIZATION || 'org',\n        context: process.env.LOGGER_CONTEXT || 'mycontext',\n        app: process.env.LOGGER_APP || 'api',\n        database_storage: getBooleanEnvVar('LOGGER_DATABASE_STORAGE', false),\n        database_log_level: process.env.LOGGER_LOG_LEVEL || 'error',\n        duration: getBooleanEnvVar('LOGGER_DURATION', false),\n        duration_log_level: process.env.LOGGER_DURATION_LOG_LEVEL || 'info',\n        console_print: getBooleanEnvVar('LOGGER_CONSOLE_PRINT', false),\n        log_in_file: getBooleanEnvVar('LOGGER_LOG_IN_FILE', false),\n        slack_webhook:\n            process.env.LOGGER_SLACK_INC_WEBHOOK_URL ||\n            'https://hooks.slack.com/services/XXXXXXXXX/XXXXXXXXX/XXXXXXXXXXXXXXXXXXXXXXXX',\n    };\n});\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileNotImageException.html":{"url":"classes/FileNotImageException.html","title":"class - FileNotImageException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileNotImageException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/exceptions/file-not-image.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Exception class for handling non-image file uploads.\nExample :```typescript\nimport { FileNotImageException } from './path/to/exception';throw new FileNotImageException('Custom error message');\nExample :\n            \n\n            \n                Extends\n            \n            \n                        BadRequestException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message?: string | any, error?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/exceptions/file-not-image.exception.ts:20\n                            \n                        \n\n                \n                    \n                            Creates an instance of FileNotImageException.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                    string | any\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                \nOptional custom error message.\n\n\n                                                        \n                                                \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                \nOptional custom error code.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        'use strict';\n\nimport { BadRequestException } from '@nestjs/common';\n\n/**\n * Exception class for handling non-image file uploads.\n *\n * @description This exception is thrown when a file that is not an image is uploaded, extending the `BadRequestException` from NestJS.\n *\n * @example\n * ```typescript\n * import { FileNotImageException } from './path/to/exception';\n *\n * throw new FileNotImageException('Custom error message');\n * ```\n *\n * @extends {BadRequestException}\n */\n\nexport class FileNotImageException extends BadRequestException {\n    /**\n     * Creates an instance of FileNotImageException.\n     *\n     * @param {string | any} [message] - Optional custom error message.\n     * @param {string} [error] - Optional custom error code.\n     */\n\n    constructor(message?: string | any, error?: string) {\n        if (message) {\n            super(message, error);\n        } else {\n            super('error.file.not_image');\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileResponseDto.html":{"url":"classes/FileResponseDto.html","title":"class - FileResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/local/dto/file-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                The FileResponseDto represents the response object returned when a file is successfully uploaded or processed.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                file\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        file\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FileType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: () => FileType})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/infrastructure/uploader/local/dto/file-response.dto.ts:27\n                        \n                    \n\n            \n                \n                    The file details.\nExample :{\n  id: 'cbcfa8b8-3a25-4adb-a9c6-e325f0d0f3ae',\n  path: '/api/v1/uploads/example-file.jpg'\n}\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiResponseProperty } from '@nestjs/swagger';\n\nimport { FileType } from '../../../../domain/file';\n\n/**\n * @dto FileResponseDto\n *\n * @description\n * The `FileResponseDto` represents the response object returned when a file is successfully uploaded or processed.\n */\nexport class FileResponseDto {\n    /**\n     * The file details.\n     *\n     * @type {FileType}\n     *\n     * @example\n     * {\n     *   id: 'cbcfa8b8-3a25-4adb-a9c6-e325f0d0f3ae',\n     *   path: '/api/v1/uploads/example-file.jpg'\n     * }\n     */\n\n    @ApiResponseProperty({\n        type: () => FileType,\n    })\n    file: FileType;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileResponseDto-1.html":{"url":"classes/FileResponseDto-1.html","title":"class - FileResponseDto-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/s3-presigned/dto/file-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                The FileResponseDto class represents the response structure for file operations, including the file metadata and upload signed URL. This DTO is used to standardize the response format for file upload operations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                file\n                            \n                            \n                                    \n                                uploadSignedUrl\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        file\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FileType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: () => FileType})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/infrastructure/uploader/s3-presigned/dto/file-response.dto.ts:27\n                        \n                    \n\n            \n                \n                    The metadata of the file, including its path and other relevant information.\nExample :{\n  id: 'abc123',\n  path: '/files/example.jpg'\n}\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        uploadSignedUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/infrastructure/uploader/s3-presigned/dto/file-response.dto.ts:41\n                        \n                    \n\n            \n                \n                    The presigned URL for uploading the file to the server or cloud storage.\nThis URL is used to securely upload the file to the specified location.\nExample :'https://example-bucket.s3.amazonaws.com/unique-file-key?AWSAccessKeyId=ACCESS_KEY&Expires=EXPIRATION_TIME&Signature=SIGNATURE'\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiResponseProperty } from '@nestjs/swagger';\n\nimport { FileType } from '../../../../domain/file';\n\n/**\n * @class FileResponseDto\n *\n * @description\n * The `FileResponseDto` class represents the response structure for file operations, including the file metadata and upload signed URL. This DTO is used to standardize the response format for file upload operations.\n */\n\nexport class FileResponseDto {\n    /**\n     * The metadata of the file, including its path and other relevant information.\n     *\n     * @type {FileType}\n     * @example\n     * {\n     *   id: 'abc123',\n     *   path: '/files/example.jpg'\n     * }\n     */\n\n    @ApiResponseProperty({\n        type: () => FileType,\n    })\n    file: FileType;\n\n    /**\n     * The presigned URL for uploading the file to the server or cloud storage.\n     * This URL is used to securely upload the file to the specified location.\n     *\n     * @type {string}\n     * @example\n     * 'https://example-bucket.s3.amazonaws.com/unique-file-key?AWSAccessKeyId=ACCESS_KEY&Expires=EXPIRATION_TIME&Signature=SIGNATURE'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n    })\n    uploadSignedUrl: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileResponseDto-2.html":{"url":"classes/FileResponseDto-2.html","title":"class - FileResponseDto-2","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/s3/dto/file-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data transfer object (DTO) for representing the response format when returning file metadata. This DTO is used to encapsulate the file's information in API responses.\n\n@ApiResponseProperty(): Marks the property for inclusion in Swagger API documentation.\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                file\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        file\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FileType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: () => FileType})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/infrastructure/uploader/s3/dto/file-response.dto.ts:34\n                        \n                    \n\n            \n                \n                    Represents the metadata of the uploaded file.\nExample :{\n    \"id\": \"cbcfa8b8-3a25-4adb-a9c6-e325f0d0f3ae\",\n    \"path\": \"https://example.com/path/to/file.jpg\"\n}\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiResponseProperty } from '@nestjs/swagger';\n\nimport { FileType } from '../../../../domain/file';\n\n/**\n * @dto FileResponseDto\n *\n * @description\n * Data transfer object (DTO) for representing the response format when returning file metadata. This DTO is used to encapsulate the file's information in API responses.\n *\n * @properties\n *\n * @property {FileType} file - Represents the metadata of the uploaded file, including its path and any other relevant information.\n *\n * @decorators\n * - `@ApiResponseProperty()`: Marks the property for inclusion in Swagger API documentation.\n */\nexport class FileResponseDto {\n    /**\n     * Represents the metadata of the uploaded file.\n     *\n     * @type {FileType}\n     * @description Contains details about the file, such as its path and identifier.\n     * @example\n     * {\n     *     \"id\": \"cbcfa8b8-3a25-4adb-a9c6-e325f0d0f3ae\",\n     *     \"path\": \"https://example.com/path/to/file.jpg\"\n     * }\n     */\n\n    @ApiResponseProperty({\n        type: () => FileType,\n    })\n    file: FileType;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileType.html":{"url":"classes/FileType.html","title":"class - FileType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/domain/file.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the FileType class used for representing file metadata and handling file paths.\nThe FileType class represents the metadata associated with a file, including its unique identifier and file path.\nIt uses decorators from @nestjs/swagger for API documentation and class-transformer for transforming file paths based on the file configuration.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                path\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'cbcfa8b8-3a25-4adb-a9c6-e325f0d0f3ae'})@Allow()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/domain/file.ts:35\n                        \n                    \n\n            \n                \n                    The unique identifier for the file.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'https://example.com/path/to/file.jpg'})@Transform( => , {toPlainOnly: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/domain/file.ts:81\n                        \n                    \n\n            \n                \n                    The URL or path of the file. Transforms the file path based on the file driver configuration.\nIf the driver is LOCAL, the URL is constructed using the backend domain.\nIf the driver is S3 or S3_PRESIGNED, a presigned URL is generated for accessing the file.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiResponseProperty } from '@nestjs/swagger';\n\nimport { GetObjectCommand, S3Client } from '@aws-sdk/client-s3';\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner';\nimport { Transform } from 'class-transformer';\nimport { Allow } from 'class-validator';\n\nimport appConfig from '@config/app.config';\nimport fileConfig from '@config/file.config';\nimport { AppConfig } from '@config/type/app-config.type';\nimport { FileConfig, FileDriver } from '@config/type/file-config.type';\n\n/**\n * @fileoverview\n * Defines the `FileType` class used for representing file metadata and handling file paths.\n *\n * @module\n * @description\n * The `FileType` class represents the metadata associated with a file, including its unique identifier and file path.\n * It uses decorators from `@nestjs/swagger` for API documentation and `class-transformer` for transforming file paths based on the file configuration.\n */\nexport class FileType {\n    /**\n     * The unique identifier for the file.\n     *\n     * @example 'cbcfa8b8-3a25-4adb-a9c6-e325f0d0f3ae'\n     * @type {string}\n     */\n\n    @ApiProperty({\n        type: String,\n        example: 'cbcfa8b8-3a25-4adb-a9c6-e325f0d0f3ae',\n    })\n    @Allow()\n    id: string;\n\n    /**\n     * The URL or path of the file. Transforms the file path based on the file driver configuration.\n     * If the driver is LOCAL, the URL is constructed using the backend domain.\n     * If the driver is S3 or S3_PRESIGNED, a presigned URL is generated for accessing the file.\n     *\n     * @example 'https://example.com/path/to/file.jpg'\n     * @type {string}\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: 'https://example.com/path/to/file.jpg',\n    })\n    @Transform(\n        ({ value }) => {\n            if ((fileConfig() as FileConfig).driver === FileDriver.LOCAL) {\n                return (appConfig() as AppConfig).backendDomain + value;\n            } else if (\n                [FileDriver.S3_PRESIGNED, FileDriver.S3].includes(\n                    (fileConfig() as FileConfig).driver\n                )\n            ) {\n                const s3 = new S3Client({\n                    region: (fileConfig() as FileConfig).awsS3Region ?? '',\n                    credentials: {\n                        accessKeyId: (fileConfig() as FileConfig).accessKeyId ?? '',\n                        secretAccessKey: (fileConfig() as FileConfig).secretAccessKey ?? '',\n                    },\n                });\n\n                const command = new GetObjectCommand({\n                    Bucket: (fileConfig() as FileConfig).awsDefaultS3Bucket ?? '',\n                    Key: value,\n                });\n\n                return getSignedUrl(s3, command, { expiresIn: 3600 });\n            }\n\n            return value;\n        },\n        {\n            toPlainOnly: true,\n        }\n    )\n    path: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileUploadDto.html":{"url":"classes/FileUploadDto.html","title":"class - FileUploadDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileUploadDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/s3-presigned/dto/file.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                The FileUploadDto class defines the data transfer object for uploading files. It includes properties to specify the file's name and size. This DTO is used to validate and document the data required for file upload operations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                fileName\n                            \n                            \n                                    \n                                    \n                                fileSize\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        fileName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'image.jpg'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/infrastructure/uploader/s3-presigned/dto/file.dto.ts:23\n                        \n                    \n\n            \n                \n                    The name of the file to be uploaded.\nExample :'image.jpg'\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        fileSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 138723})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/infrastructure/uploader/s3-presigned/dto/file.dto.ts:35\n                        \n                    \n\n            \n                \n                    The size of the file in bytes.\nExample :138723\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nimport { IsNumber, IsString } from 'class-validator';\n\n/**\n * @class FileUploadDto\n *\n * @description\n * The `FileUploadDto` class defines the data transfer object for uploading files. It includes properties to specify the file's name and size. This DTO is used to validate and document the data required for file upload operations.\n */\n\nexport class FileUploadDto {\n    /**\n     * The name of the file to be uploaded.\n     *\n     * @type {string}\n     * @example\n     * 'image.jpg'\n     */\n\n    @ApiProperty({ example: 'image.jpg' })\n    @IsString()\n    fileName: string;\n\n    /**\n     * The size of the file in bytes.\n     *\n     * @type {number}\n     * @example\n     * 138723\n     */\n\n    @ApiProperty({ example: 138723 })\n    @IsNumber()\n    fileSize: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FilesLocalController.html":{"url":"controllers/FilesLocalController.html","title":"controller - FilesLocalController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FilesLocalController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/local/files.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                The FilesLocalController is responsible for handling file operations related to local storage.\nIt provides endpoints for uploading and downloading files.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                download\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        download\n                        \n                    \n                \n            \n            \n                \n                        \n                    download(path: string, response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('local/download/:path')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/files/infrastructure/uploader/local/files.controller.ts:96\n                        \n                    \n\n\n            \n                \n                        Downloads a file from local storage.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                path\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The path to the file to be downloaded.\n\n                                            \n                                        \n                                        \n                                                response\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A file response stream.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiCreatedResponse({type: FileResponseDto})@Post('upload')@ApiConsumes('multipart/form-data')@ApiBody({schema: undefined})@ApiFile()@UseInterceptors(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/files/infrastructure/uploader/local/files.controller.ts:79\n                        \n                    \n\n\n            \n                \n                        Uploads a file to local storage.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The file to be uploaded.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                FileResponseDto The response containing file details after upload.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Get,\n    Param,\n    Post,\n    Response,\n    UploadedFile,\n    UseInterceptors,\n} from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport {\n    ApiBody,\n    ApiConsumes,\n    ApiCreatedResponse,\n    // ApiExcludeEndpoint,\n    ApiTags,\n} from '@nestjs/swagger';\n\nimport { diskStorage } from 'multer';\n\n// import { ApiFile } from '@decorators/swagger.schema';\nimport { ApiFile } from '@decorators/swagger.schema';\nimport { filesRoot, editFileName, imageFileFilter } from '@providers/file-upload.service';\n\nimport { FileResponseDto } from './dto/file-response.dto';\nimport { FilesLocalService } from './files.service';\n\n/**\n * @controller FilesLocalController\n *\n * @description\n * The `FilesLocalController` is responsible for handling file operations related to local storage.\n * It provides endpoints for uploading and downloading files.\n */\n\n@ApiTags('Files')\n@Controller()\nexport class FilesLocalController {\n    constructor(private readonly filesService: FilesLocalService) {}\n\n    /**\n     * Uploads a file to local storage.\n     *\n     * @endpoint POST /v1/upload\n     * @consumes multipart/form-data\n     *\n     * @param file The file to be uploaded.\n     * @returns FileResponseDto The response containing file details after upload.\n     *\n     * @throws { HttpException } If there is an error during file upload.\n     */\n\n    @ApiCreatedResponse({\n        type: FileResponseDto,\n    })\n    @Post('upload')\n    @ApiConsumes('multipart/form-data')\n    @ApiBody({\n        schema: {\n            type: 'object',\n            properties: {\n                file: {\n                    type: 'string',\n                    format: 'binary',\n                },\n            },\n        },\n    })\n    @ApiFile()\n    @UseInterceptors(\n        FileInterceptor('file', {\n            storage: diskStorage({\n                destination: filesRoot() + '/local',\n                filename: editFileName,\n            }),\n            fileFilter: imageFileFilter,\n        })\n    )\n    async uploadFile(@UploadedFile() file: Express.Multer.File): Promise {\n        return this.filesService.create(file);\n    }\n\n    /**\n     * Downloads a file from local storage.\n     *\n     * @endpoint GET /:path\n     *\n     * @param path The path to the file to be downloaded.\n     * @returns A file response stream.\n     *\n     * @throws { HttpException } If the file cannot be found or there is an error during download.\n     */\n\n    @Get('local/download/:path')\n    //@ApiExcludeEndpoint()\n    download(@Param('path') path: string, @Response() response) {\n        return response.sendFile(path, { root: filesRoot() + '/local' });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FilesLocalModule.html":{"url":"modules/FilesLocalModule.html","title":"module - FilesLocalModule","body":"\n                   \n\n\n\n\n    Modules\n    FilesLocalModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FilesLocalModule\n\n\n\ncluster_FilesLocalModule_providers\n\n\n\ncluster_FilesLocalModule_exports\n\n\n\n\nFilesLocalService \n\nFilesLocalService \n\n\n\nFilesLocalModule\n\nFilesLocalModule\n\nFilesLocalService  -->\n\nFilesLocalModule->FilesLocalService \n\n\n\n\n\nFilesLocalService\n\nFilesLocalService\n\nFilesLocalModule -->\n\nFilesLocalService->FilesLocalModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/local/files.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            The FilesLocalModule is responsible for managing file operations using local storage.\nIt provides the necessary components to handle file uploads, retrievals, and other file-related operations specific to local storage.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FilesLocalService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            FilesLocalController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FilesLocalService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { FilesLocalController } from './files.controller';\nimport { FilesLocalService } from './files.service';\n\n/**\n * @module FilesLocalModule\n *\n * @description\n * The `FilesLocalModule` is responsible for managing file operations using local storage.\n * It provides the necessary components to handle file uploads, retrievals, and other file-related operations specific to local storage.\n */\n@Module({\n    /**\n     * The list of controllers that handle incoming requests and provide endpoints related to local file operations.\n     */\n\n    controllers: [FilesLocalController],\n\n    /**\n     * The list of providers that contain the business logic for file operations.\n     * These providers are used to handle file-related tasks such as uploading, retrieving, and managing files.\n     */\n\n    providers: [FilesLocalService],\n\n    /**\n     * The list of providers that are made available for other modules to use.\n     * `FilesLocalService` is exported so that other modules can utilize the service for local file operations.\n     */\n    exports: [FilesLocalService],\n})\nexport class FilesLocalModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FilesLocalService.html":{"url":"injectables/FilesLocalService.html","title":"injectable - FilesLocalService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FilesLocalService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/local/files.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The FilesLocalService provides functionality for handling file operations related to local storage.\nIt manages file creation and provides necessary file details.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/files/infrastructure/uploader/local/files.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(file: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/files/infrastructure/uploader/local/files.service.ts:37\n                        \n                    \n\n\n            \n                \n                        Handles file creation and returns file details.\nExample :// Example response:\n{\n  file: {\n    id: 'asas',\n    path: '/api/v1/uploads/example-file.jpg'\n  }\n}\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The file to be processed.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves to an object containing file details.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpStatus, Injectable, UnprocessableEntityException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\nimport { AllConfigType } from '@config/type/config.type';\n\nimport { FileType } from '../../../domain/file';\n\n/**\n * @service FilesLocalService\n *\n * @description\n * The `FilesLocalService` provides functionality for handling file operations related to local storage.\n * It manages file creation and provides necessary file details.\n */\n@Injectable()\nexport class FilesLocalService {\n    constructor(private readonly configService: ConfigService) {}\n\n    /**\n     * Handles file creation and returns file details.\n     *\n     * @param file The file to be processed.\n     * @returns A promise that resolves to an object containing file details.\n     *\n     * @throws { UnprocessableEntityException } If the file is not provided.\n     *\n     * @example\n     * // Example response:\n     * {\n     *   file: {\n     *     id: 'asas',\n     *     path: '/api/v1/uploads/example-file.jpg'\n     *   }\n     * }\n     */\n\n    async create(file: Express.Multer.File): Promise {\n        if (!file) {\n            throw new UnprocessableEntityException({\n                status: HttpStatus.UNPROCESSABLE_ENTITY,\n                errors: {\n                    file: 'selectFile',\n                },\n            });\n        }\n\n        return {\n            file: {\n                id: 'asas',\n                path: `/${this.configService.get('app.apiPrefix', {\n                    infer: true,\n                })}/v1/${file.path}`,\n            },\n        } as any;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FilesModule.html":{"url":"modules/FilesModule.html","title":"module - FilesModule","body":"\n                   \n\n\n\n\n    Modules\n    FilesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_providers\n\n\n\ncluster_FilesModule_imports\n\n\n\ncluster_FilesModule_exports\n\n\n\n\nFilesS3Module\n\nFilesS3Module\n\n\n\nFilesModule\n\nFilesModule\n\nFilesModule -->\n\nFilesS3Module->FilesModule\n\n\n\n\n\nFilesS3PresignedModule\n\nFilesS3PresignedModule\n\nFilesModule -->\n\nFilesS3PresignedModule->FilesModule\n\n\n\n\n\nFilesService \n\nFilesService \n\nFilesService  -->\n\nFilesModule->FilesService \n\n\n\n\n\nFilesService\n\nFilesService\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/files/files.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            This file defines the FilesModule, which is responsible for managing file uploads\nthrough different infrastructure modules. It conditionally imports the appropriate\nfile uploader module based on configuration settings.\nThe FilesModule class integrates various file uploader modules and provides\nthe FilesService for handling file operations. The module configuration allows\nswitching between different file storage solutions such as local storage, S3, and\nS3 presigned uploads.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FilesService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            FilesS3Module\n                        \n                        \n                            FilesS3PresignedModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FilesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { FilesService } from './files.service';\nimport { FilesLocalModule } from './infrastructure/uploader/local/files.module';\nimport { FilesS3Module } from './infrastructure/uploader/s3/files.module';\nimport { FilesS3PresignedModule } from './infrastructure/uploader/s3-presigned/files.module';\n\n// import { InfrastructureUploaderModule } from './infrastructureUploaderModule';\n\n// const infrastructureUploaderModule =\n//     (fileConfig() as FileConfig).driver === FileDriver.LOCAL\n//         ? FilesLocalModule\n//         : (fileConfig() as FileConfig).driver === FileDriver.S3\n//           ? FilesS3Module\n//           : FilesS3PresignedModule;\n\n// console.log(\n//     '********************************************************************===============================',\n//     fileConfig() as FileConfig\n// );\n\nconst infrastructureUploaderModule = FilesLocalModule;\n\n/**\n * @fileoverview\n * This file defines the `FilesModule`, which is responsible for managing file uploads\n * through different infrastructure modules. It conditionally imports the appropriate\n * file uploader module based on configuration settings.\n *\n * @module\n * @description\n * The `FilesModule` class integrates various file uploader modules and provides\n * the `FilesService` for handling file operations. The module configuration allows\n * switching between different file storage solutions such as local storage, S3, and\n * S3 presigned uploads.\n */\n\n@Module({\n    /**\n     * The `imports` array specifies the modules that are imported into this module.\n     * The choice of uploader module is determined based on the configuration settings.\n     */\n\n    imports: [infrastructureUploaderModule, FilesS3Module, FilesS3PresignedModule],\n\n    /**\n     * The `providers` array defines the providers that are instantiated by this module.\n     * The `FilesService` is included here to be used within this module.\n     */\n\n    providers: [FilesService],\n\n    /**\n     * The `exports` array specifies the providers that are exported from this module.\n     * The `FilesService` is exported so it can be used by other modules.\n     */\n\n    exports: [FilesService],\n})\nexport class FilesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FilesS3Controller.html":{"url":"controllers/FilesS3Controller.html","title":"controller - FilesS3Controller","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FilesS3Controller\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/s3/files.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                The FilesS3Controller handles HTTP requests related to file uploads using AWS S3. It provides an endpoint for uploading files to S3 and returning the file metadata.\n\nFiles: Grouped under the 'Files' tag for API documentation purposes.\n\nfiles: Base path for file-related operations.\n\nv1/upload/s3: Endpoint for file uploads to S3.\n\n\nHandles file upload requests. Files are processed and uploaded to S3. The response includes metadata about the uploaded file.\n\n@ApiTags('Files'): Tags the controller with 'Files' for API documentation.\n@ApiCreatedResponse({ type: FileResponseDto }): Specifies the response type for successful file uploads.\n@Post('v1/upload/s3'): Defines the HTTP POST endpoint for file uploads.\n@ApiConsumes('multipart/form-data'): Indicates that the endpoint consumes 'multipart/form-data' for file uploads.\n@ApiBody({ schema: { type: 'object', properties: { file: { type: 'string', format: 'binary' } } } }): Documents the expected request body schema for file uploads.\n@ApiFile(): Custom decorator for file upload handling.\n@UseInterceptors(FileInterceptor('file')): Applies the FileInterceptor to handle file uploads.\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(file: Express.MulterS3.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiCreatedResponse({type: FileResponseDto})@Post('v1/upload/s3')@ApiConsumes('multipart/form-data')@ApiBody({schema: undefined})@ApiFile()@UseInterceptors(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/files/infrastructure/uploader/s3/files.controller.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.MulterS3.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, UploadedFile, UseInterceptors } from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { ApiBody, ApiConsumes, ApiCreatedResponse, ApiTags } from '@nestjs/swagger';\n\n// import { ApiFile } from '../../../../../decorators/swagger.schema';\nimport { ApiFile } from '@decorators/swagger.schema';\n\nimport { FileResponseDto } from './dto/file-response.dto';\nimport { FilesS3Service } from './files.service';\n\n/**\n * @controller FilesS3Controller\n *\n * @description\n * The `FilesS3Controller` handles HTTP requests related to file uploads using AWS S3. It provides an endpoint for uploading files to S3 and returning the file metadata.\n *\n * @tags\n * - Files: Grouped under the 'Files' tag for API documentation purposes.\n *\n * @path\n * - `files`: Base path for file-related operations.\n * - `v1/upload/s3`: Endpoint for file uploads to S3.\n *\n * @controller\n *\n * @constructor\n * @param {FilesS3Service} filesService - Service responsible for handling file operations with S3.\n *\n * @methods\n *\n * @method uploadFile\n * @description\n * Handles file upload requests. Files are processed and uploaded to S3. The response includes metadata about the uploaded file.\n *\n * @param {Express.MulterS3.File} file - The uploaded file from the request.\n * @returns {Promise} - A promise that resolves to the file metadata.\n *\n * @decorators\n * - `@ApiTags('Files')`: Tags the controller with 'Files' for API documentation.\n * - `@ApiCreatedResponse({ type: FileResponseDto })`: Specifies the response type for successful file uploads.\n * - `@Post('v1/upload/s3')`: Defines the HTTP POST endpoint for file uploads.\n * - `@ApiConsumes('multipart/form-data')`: Indicates that the endpoint consumes 'multipart/form-data' for file uploads.\n * - `@ApiBody({ schema: { type: 'object', properties: { file: { type: 'string', format: 'binary' } } } })`: Documents the expected request body schema for file uploads.\n * - `@ApiFile()`: Custom decorator for file upload handling.\n * - `@UseInterceptors(FileInterceptor('file'))`: Applies the `FileInterceptor` to handle file uploads.\n */\n\n@ApiTags('Files')\n@Controller({\n    path: 'files',\n    version: '1',\n})\nexport class FilesS3Controller {\n    constructor(private readonly filesService: FilesS3Service) {}\n\n    @ApiCreatedResponse({\n        type: FileResponseDto,\n    })\n    @Post('v1/upload/s3')\n    @ApiConsumes('multipart/form-data')\n    @ApiBody({\n        schema: {\n            type: 'object',\n            properties: {\n                file: {\n                    type: 'string',\n                    format: 'binary',\n                },\n            },\n        },\n    })\n    @ApiFile()\n    @UseInterceptors(FileInterceptor('file'))\n    async uploadFile(@UploadedFile() file: Express.MulterS3.File): Promise {\n        return this.filesService.create(file);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FilesS3Module.html":{"url":"modules/FilesS3Module.html","title":"module - FilesS3Module","body":"\n                   \n\n\n\n\n    Modules\n    FilesS3Module\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FilesS3Module\n\n\n\ncluster_FilesS3Module_exports\n\n\n\ncluster_FilesS3Module_providers\n\n\n\n\nFilesS3Service \n\nFilesS3Service \n\n\n\nFilesS3Module\n\nFilesS3Module\n\nFilesS3Service  -->\n\nFilesS3Module->FilesS3Service \n\n\n\n\n\nFilesS3Service\n\nFilesS3Service\n\nFilesS3Module -->\n\nFilesS3Service->FilesS3Module\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/s3/files.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            The FilesS3Module configures the integration with AWS S3 for file upload functionality. It sets up the Multer middleware to handle file uploads, configures the S3 client, and defines the file storage and filtering logic.\n\nMulterModule: Configures Multer for file handling and integrates it with S3.\n\nConfigModule: Provides access to application configuration settings.\n\nFilesS3Service: Handles file upload and processing logic using S3.\n\nFilesS3Controller: Manages HTTP requests related to file uploads and downloads.\n\nFilesS3Service: Exposes the service for file operations to other modules.\n\n\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FilesS3Service\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            FilesS3Controller\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FilesS3Service\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { randomStringGenerator } from '@nestjs/common/utils/random-string-generator.util';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { MulterModule } from '@nestjs/platform-express';\n\nimport { S3Client } from '@aws-sdk/client-s3';\nimport multerS3 from 'multer-s3';\n\n// import { HelperModule } from '../../../../../common/helper/helper.module';\n// import { ConfigService } from '../../../../../common/helper/services/config.service';\nimport { AllConfigType } from '@config/type/config.type';\nimport { imageFileFilter } from '@providers/file-upload.service';\n\nimport { FilesS3Controller } from './files.controller';\nimport { FilesS3Service } from './files.service';\n\n/**\n * @module FilesS3Module\n *\n * @description\n * The `FilesS3Module` configures the integration with AWS S3 for file upload functionality. It sets up the Multer middleware to handle file uploads, configures the S3 client, and defines the file storage and filtering logic.\n *\n * @imports\n * - `MulterModule`: Configures Multer for file handling and integrates it with S3.\n * - `ConfigModule`: Provides access to application configuration settings.\n *\n * @providers\n * - `FilesS3Service`: Handles file upload and processing logic using S3.\n *\n * @controllers\n * - `FilesS3Controller`: Manages HTTP requests related to file uploads and downloads.\n *\n * @exports\n * - `FilesS3Service`: Exposes the service for file operations to other modules.\n */\n\n@Module({\n    imports: [\n        MulterModule.registerAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: (configService: ConfigService) => {\n                const s3 = new S3Client({\n                    region: configService.get('file.awsS3Region', { infer: true }),\n                    credentials: {\n                        accessKeyId: configService.getOrThrow('file.accessKeyId', {\n                            infer: true,\n                        }),\n                        secretAccessKey: configService.getOrThrow('file.secretAccessKey', {\n                            infer: true,\n                        }),\n                    },\n                });\n\n                return {\n                    fileFilter: imageFileFilter,\n                    storage: multerS3({\n                        s3: s3,\n                        bucket: configService.getOrThrow('file.awsDefaultS3Bucket', {\n                            infer: true,\n                        }),\n                        contentType: multerS3.AUTO_CONTENT_TYPE,\n                        key: (request, file, callback) => {\n                            callback(\n                                null,\n                                `${randomStringGenerator()}.${file.originalname\n                                    .split('.')\n                                    .pop()\n                                    ?.toLowerCase()}`\n                            );\n                        },\n                    }),\n                    limits: {\n                        fileSize: configService.get('file.maxFileSize', { infer: true }),\n                    },\n                };\n            },\n        }),\n    ],\n    controllers: [FilesS3Controller],\n    providers: [FilesS3Service],\n    exports: [FilesS3Service],\n})\nexport class FilesS3Module {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FilesS3PresignedController.html":{"url":"controllers/FilesS3PresignedController.html","title":"controller - FilesS3PresignedController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FilesS3PresignedController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/s3-presigned/files.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                The FilesS3PresignedController manages HTTP requests for file operations involving Amazon S3 presigned URLs. It provides endpoints for uploading files and generating presigned URLs for downloading files from S3.\n\nFilesS3PresignedController: Handles file upload and presigned URL generation requests.\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                getDownloadUrl\n                            \n                            \n                                    \n                                    \n                                    Async\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getDownloadUrl\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDownloadUrl(key: string, expiresIn: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('v1/download/:key')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/files/infrastructure/uploader/s3-presigned/files.controller.ts:69\n                        \n                    \n\n\n            \n                \n                        Generates a presigned URL for downloading a file from Amazon S3.\nExample :GET /files/v1/download/{key}?expiresIn=3600\nResponse:\n{\n  \"url\": \"https://s3.amazonaws.com/bucket/path/to/file?signature\"\n}\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe key (path) of the file in the S3 bucket.\n\n\n                                            \n                                        \n                                        \n                                                expiresIn\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe expiration time for the presigned URL in seconds.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An object containing the presigned URL for file download.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(file: FileUploadDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiCreatedResponse({type: FileResponseDto})@Post('v1/upload')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/files/infrastructure/uploader/s3-presigned/files.controller.ts:49\n                        \n                    \n\n\n            \n                \n                        Uploads a file to Amazon S3.\nExample :POST /files/v1/upload\nRequest body:\n{\n  \"file\": \"base64-encoded-file-data\"\n}\nResponse:\n{\n  \"file\": {\n    \"path\": \"s3://bucket/path/to/file\"\n  }\n}\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                            FileUploadDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe file data to upload.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                A FileResponseDto object containing information about the uploaded file.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Post, Query } from '@nestjs/common';\nimport { ApiCreatedResponse, ApiTags } from '@nestjs/swagger';\n\nimport { FileResponseDto } from './dto/file-response.dto';\nimport { FileUploadDto } from './dto/file.dto';\nimport { FilesS3PresignedService } from './files.service';\n\n/**\n * @module FilesS3PresignedController\n *\n * @description\n * The `FilesS3PresignedController` manages HTTP requests for file operations involving Amazon S3 presigned URLs. It provides endpoints for uploading files and generating presigned URLs for downloading files from S3.\n *\n * @controllers\n * - `FilesS3PresignedController`: Handles file upload and presigned URL generation requests.\n */\n@ApiTags('Files')\n@Controller({\n    path: 'files',\n    version: '1',\n})\nexport class FilesS3PresignedController {\n    constructor(private readonly filesService: FilesS3PresignedService) {}\n\n    /**\n     * Uploads a file to Amazon S3.\n     *\n     * @param file - The file data to upload.\n     * @returns A `FileResponseDto` object containing information about the uploaded file.\n     *\n     * @example\n     * POST /files/v1/upload\n     * Request body:\n     * {\n     *   \"file\": \"base64-encoded-file-data\"\n     * }\n     * Response:\n     * {\n     *   \"file\": {\n     *     \"path\": \"s3://bucket/path/to/file\"\n     *   }\n     * }\n     */\n\n    @ApiCreatedResponse({\n        type: FileResponseDto,\n    })\n    @Post('v1/upload')\n    async uploadFile(@Body() file: FileUploadDto) {\n        return this.filesService.create(file);\n    }\n\n    /**\n     * Generates a presigned URL for downloading a file from Amazon S3.\n     *\n     * @param key - The key (path) of the file in the S3 bucket.\n     * @param expiresIn - The expiration time for the presigned URL in seconds.\n     * @returns An object containing the presigned URL for file download.\n     *\n     * @example\n     * GET /files/v1/download/{key}?expiresIn=3600\n     * Response:\n     * {\n     *   \"url\": \"https://s3.amazonaws.com/bucket/path/to/file?signature\"\n     * }\n     */\n\n    @Get('v1/download/:key')\n    async getDownloadUrl(@Param('key') key: string, @Query('expiresIn') expiresIn: number) {\n        const url = await this.filesService.generatePresignedUrl(key, expiresIn);\n        return { url };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FilesS3PresignedModule.html":{"url":"modules/FilesS3PresignedModule.html","title":"module - FilesS3PresignedModule","body":"\n                   \n\n\n\n\n    Modules\n    FilesS3PresignedModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FilesS3PresignedModule\n\n\n\ncluster_FilesS3PresignedModule_exports\n\n\n\ncluster_FilesS3PresignedModule_providers\n\n\n\n\nFilesS3PresignedService \n\nFilesS3PresignedService \n\n\n\nFilesS3PresignedModule\n\nFilesS3PresignedModule\n\nFilesS3PresignedService  -->\n\nFilesS3PresignedModule->FilesS3PresignedService \n\n\n\n\n\nFilesS3PresignedService\n\nFilesS3PresignedService\n\nFilesS3PresignedModule -->\n\nFilesS3PresignedService->FilesS3PresignedModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/s3-presigned/files.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            The FilesS3PresignedModule configures and sets up the module for handling file uploads to an Amazon S3 bucket using presigned URLs. It integrates the necessary dependencies and configurations for Multer to manage file uploads and provides the service and controller for handling S3 interactions.\n\nMulterModule: Configured asynchronously to use multer-s3 for file storage on S3.\n\nConfigModule: Provides configuration services for retrieving AWS S3 settings.\n\nFilesS3PresignedService: Service that handles the logic for interacting with S3 and generating presigned URLs.\n\nFilesS3PresignedController: Controller for handling HTTP requests related to file uploads and presigned URLs.\n\n\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FilesS3PresignedService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            FilesS3PresignedController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FilesS3PresignedService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { randomStringGenerator } from '@nestjs/common/utils/random-string-generator.util';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { MulterModule } from '@nestjs/platform-express';\n\nimport { S3Client } from '@aws-sdk/client-s3';\nimport multerS3 from 'multer-s3';\n\n// import { HelperModule } from '../../../../../common/helper/helper.module';\n// import { ConfigService } from '../../../../../common/helper/services/config.service';\nimport { AllConfigType } from '@config/type/config.type';\n\nimport { imageFileFilter } from '../../../../../providers/file-upload.service';\n\nimport { FilesS3PresignedController } from './files.controller';\nimport { FilesS3PresignedService } from './files.service';\n\n/**\n * @module FilesS3PresignedModule\n *\n * @description\n * The `FilesS3PresignedModule` configures and sets up the module for handling file uploads to an Amazon S3 bucket using presigned URLs. It integrates the necessary dependencies and configurations for Multer to manage file uploads and provides the service and controller for handling S3 interactions.\n *\n * @imports\n * - `MulterModule`: Configured asynchronously to use `multer-s3` for file storage on S3.\n * - `ConfigModule`: Provides configuration services for retrieving AWS S3 settings.\n *\n * @providers\n * - `FilesS3PresignedService`: Service that handles the logic for interacting with S3 and generating presigned URLs.\n *\n * @controllers\n * - `FilesS3PresignedController`: Controller for handling HTTP requests related to file uploads and presigned URLs.\n */\n@Module({\n    imports: [\n        MulterModule.registerAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: (configService: ConfigService) => {\n                const s3 = new S3Client({\n                    region: configService.get('file.awsS3Region', { infer: true }),\n                    credentials: {\n                        accessKeyId: configService.getOrThrow('file.accessKeyId', {\n                            infer: true,\n                        }),\n                        secretAccessKey: configService.getOrThrow('file.secretAccessKey', {\n                            infer: true,\n                        }),\n                    },\n                });\n\n                return {\n                    fileFilter: imageFileFilter,\n                    storage: multerS3({\n                        s3: s3,\n                        bucket: '',\n                        acl: 'public-read',\n                        contentType: multerS3.AUTO_CONTENT_TYPE,\n                        key: (request, file, callback) => {\n                            callback(\n                                null,\n                                `${randomStringGenerator()}.${file.originalname\n                                    .split('.')\n                                    .pop()\n                                    ?.toLowerCase()}`\n                            );\n                        },\n                    }),\n                };\n            },\n        }),\n    ],\n    controllers: [FilesS3PresignedController],\n    providers: [FilesS3PresignedService],\n    exports: [FilesS3PresignedService],\n})\nexport class FilesS3PresignedModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FilesS3PresignedService.html":{"url":"injectables/FilesS3PresignedService.html","title":"injectable - FilesS3PresignedService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FilesS3PresignedService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/s3-presigned/files.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The FilesS3PresignedService handles operations related to file uploads and downloads using Amazon S3 with presigned URLs. It provides methods for creating upload presigned URLs and generating download presigned URLs.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                s3\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                generatePresignedUrl\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/files/infrastructure/uploader/s3-presigned/files.service.ts:26\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(file: FileUploadDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/files/infrastructure/uploader/s3-presigned/files.service.ts:59\n                        \n                    \n\n\n            \n                \n                        Creates a presigned URL for uploading a file to Amazon S3.\nExample :const response = await this.create({\n  fileName: 'image.jpg',\n  fileSize: 123456\n});\n// response will include file metadata and uploadSignedUrl\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                            FileUploadDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe file upload data containing file information.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                An object containing the file metadata and the presigned URL for uploading.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generatePresignedUrl\n                        \n                    \n                \n            \n            \n                \n                        \n                    generatePresignedUrl(key: string, expiresIn: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/files/infrastructure/uploader/s3-presigned/files.service.ts:128\n                        \n                    \n\n\n            \n                \n                        Generates a presigned URL for downloading a file from Amazon S3.\nExample :const url = await this.generatePresignedUrl('path/to/file', 3600);\n// url will be a presigned URL for downloading the file\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe key (path) of the file in the S3 bucket.\n\n\n                                            \n                                        \n                                        \n                                                expiresIn\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe expiration time for the presigned URL in seconds.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                The presigned URL for downloading the file.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        s3\n                        \n                    \n                \n            \n                \n                    \n                        Type :     S3Client\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/files/infrastructure/uploader/s3-presigned/files.service.ts:26\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n    HttpStatus,\n    Injectable,\n    PayloadTooLargeException,\n    UnprocessableEntityException,\n} from '@nestjs/common';\nimport { randomStringGenerator } from '@nestjs/common/utils/random-string-generator.util';\nimport { ConfigService } from '@nestjs/config';\n\nimport { GetObjectCommand, PutObjectCommand, S3Client } from '@aws-sdk/client-s3';\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner';\n\n// import { ConfigService } from '../../../../../common/helper/services/config.service';\nimport { FileType } from '../../../domain/file';\n\nimport { FileUploadDto } from './dto/file.dto';\n\n/**\n * @module FilesS3PresignedService\n *\n * @description\n * The `FilesS3PresignedService` handles operations related to file uploads and downloads using Amazon S3 with presigned URLs. It provides methods for creating upload presigned URLs and generating download presigned URLs.\n */\n@Injectable()\nexport class FilesS3PresignedService {\n    private s3: S3Client;\n\n    constructor(private readonly configService: ConfigService) {\n        this.s3 = new S3Client({\n            region: configService.get('file.awsS3Region', { infer: true }),\n            credentials: {\n                accessKeyId: configService.getOrThrow('file.accessKeyId', {\n                    infer: true,\n                }),\n                secretAccessKey: configService.getOrThrow('file.secretAccessKey', {\n                    infer: true,\n                }),\n            },\n        });\n    }\n\n    /**\n     * Creates a presigned URL for uploading a file to Amazon S3.\n     *\n     * @param file - The file upload data containing file information.\n     * @returns An object containing the file metadata and the presigned URL for uploading.\n     *\n     * @throws {UnprocessableEntityException} If the file is not provided or has an unsupported type.\n     * @throws {PayloadTooLargeException} If the file size exceeds the maximum allowed size.\n     *\n     * @example\n     * const response = await this.create({\n     *   fileName: 'image.jpg',\n     *   fileSize: 123456\n     * });\n     * // response will include file metadata and uploadSignedUrl\n     */\n\n    async create(file: FileUploadDto): Promise {\n        if (!file) {\n            throw new UnprocessableEntityException({\n                status: HttpStatus.UNPROCESSABLE_ENTITY,\n                errors: {\n                    file: 'selectFile',\n                },\n            });\n        }\n\n        if (!file.fileName.match(/\\.(jpg|jpeg|png|gif)$/i)) {\n            throw new UnprocessableEntityException({\n                status: HttpStatus.UNPROCESSABLE_ENTITY,\n                errors: {\n                    file: `cantUploadFileType`,\n                },\n            });\n        }\n\n        if (\n            file.fileSize >\n            (this.configService.get('file.maxFileSize', {\n                infer: true,\n            }) || 0)\n        ) {\n            throw new PayloadTooLargeException({\n                statusCode: HttpStatus.PAYLOAD_TOO_LARGE,\n                error: 'Payload Too Large',\n                message: 'File too large',\n            });\n        }\n\n        const key = `${randomStringGenerator()}.${file.fileName.split('.').pop()?.toLowerCase()}`;\n\n        const command = new PutObjectCommand({\n            Bucket: this.configService.getOrThrow('file.awsDefaultS3Bucket', {\n                infer: true,\n            }),\n            Key: key,\n            ContentLength: file.fileSize,\n        });\n        const signedUrl = await getSignedUrl(this.s3, command, { expiresIn: 3600 });\n\n        // const data = await this.fileRepository.create({\n        //     path: key,\n        // });\n\n        const data = {\n            path: key,\n        } as any;\n\n        return {\n            file: data,\n            uploadSignedUrl: signedUrl,\n        };\n    }\n\n    /**\n     * Generates a presigned URL for downloading a file from Amazon S3.\n     *\n     * @param key - The key (path) of the file in the S3 bucket.\n     * @param expiresIn - The expiration time for the presigned URL in seconds.\n     * @returns The presigned URL for downloading the file.\n     *\n     * @example\n     * const url = await this.generatePresignedUrl('path/to/file', 3600);\n     * // url will be a presigned URL for downloading the file\n     */\n\n    async generatePresignedUrl(key: string, expiresIn: number): Promise {\n        const command = new GetObjectCommand({\n            Bucket: this.configService.getOrThrow('file.awsDefaultS3Bucket', {\n                infer: true,\n            }),\n            Key: key,\n        });\n\n        return await getSignedUrl(this.s3, command, { expiresIn });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FilesS3Service.html":{"url":"injectables/FilesS3Service.html","title":"injectable - FilesS3Service","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FilesS3Service\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/s3/files.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The FilesS3Service provides methods for handling file operations with AWS S3. It includes functionality to process uploaded files and return their metadata.\nHandles the creation and metadata retrieval for uploaded files. It validates the presence of the file and returns its metadata.\n\n@Injectable(): Marks the class as a provider that can be injected into other components.\n\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/modules/files/infrastructure/uploader/s3/files.service.ts:29\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(file: Express.MulterS3.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/files/infrastructure/uploader/s3/files.service.ts:40\n                        \n                    \n\n\n            \n                \n                        Handles the creation and metadata retrieval for uploaded files.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.MulterS3.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe uploaded file from the request.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nA promise that resolves to an object containing the file metadata.\n\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpStatus, Injectable, UnprocessableEntityException } from '@nestjs/common';\n\nimport { FileType } from '../../../domain/file';\n\n/**\n * @service FilesS3Service\n *\n * @description\n * The `FilesS3Service` provides methods for handling file operations with AWS S3. It includes functionality to process uploaded files and return their metadata.\n *\n * @constructor\n * @param {void} - No parameters are injected into the constructor.\n *\n * @methods\n *\n * @method create\n * @description\n * Handles the creation and metadata retrieval for uploaded files. It validates the presence of the file and returns its metadata.\n *\n * @param {Express.MulterS3.File} file - The uploaded file from the request. It should include information such as the file's S3 key.\n * @returns {Promise} - A promise that resolves to an object containing the file metadata.\n *\n * @throws {UnprocessableEntityException} - Throws an exception if the file is not provided in the request.\n *\n * @decorators\n * - `@Injectable()`: Marks the class as a provider that can be injected into other components.\n */\n@Injectable()\nexport class FilesS3Service {\n    constructor() {}\n\n    /**\n     * Handles the creation and metadata retrieval for uploaded files.\n     *\n     * @param {Express.MulterS3.File} file - The uploaded file from the request.\n     * @returns {Promise} - A promise that resolves to an object containing the file metadata.\n     * @throws {UnprocessableEntityException} - Throws an exception if the file is not provided.\n     */\n\n    async create(file: Express.MulterS3.File): Promise {\n        if (!file) {\n            throw new UnprocessableEntityException({\n                status: HttpStatus.UNPROCESSABLE_ENTITY,\n                errors: {\n                    file: 'selectFile',\n                },\n            });\n        }\n\n        return {\n            file: {\n                path: file.key,\n            } as any,\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FilesService.html":{"url":"injectables/FilesService.html","title":"injectable - FilesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FilesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/files.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the FilesService, a service responsible for handling file operations.\nThe FilesService class is an injectable service in the NestJS framework. It is designed\nto manage and process file-related tasks, such as uploading, retrieving, and managing files.\nThe service's methods and functionalities should be implemented based on the specific file\nhandling requirements of the application.\n\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n/**\n * @fileoverview\n * This file defines the `FilesService`, a service responsible for handling file operations.\n *\n * @module\n * @description\n * The `FilesService` class is an injectable service in the NestJS framework. It is designed\n * to manage and process file-related tasks, such as uploading, retrieving, and managing files.\n * The service's methods and functionalities should be implemented based on the specific file\n * handling requirements of the application.\n */\n@Injectable()\nexport class FilesService {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilterCountryDto.html":{"url":"classes/FilterCountryDto.html","title":"class - FilterCountryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilterCountryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/countries/dto/query-country.dto-remove.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nimport { Transform, Type, plainToInstance } from 'class-transformer';\nimport { IsNumber, IsOptional, IsString, ValidateNested } from 'class-validator';\n\nimport { Country } from './country';\n\nexport class FilterCountryDto {}\n\nexport class SortCountryDto {\n    @ApiProperty()\n    @Type(() => String)\n    @IsString()\n    orderBy: keyof Country;\n\n    @ApiProperty()\n    @IsString()\n    order: string;\n}\n\nexport class QueryCountryDto {\n    @ApiPropertyOptional()\n    @Transform(({ value }) => (value ? Number(value) : 1))\n    @IsNumber()\n    @IsOptional()\n    page?: number;\n\n    @ApiPropertyOptional()\n    @Transform(({ value }) => (value ? Number(value) : 10))\n    @IsNumber()\n    @IsOptional()\n    limit?: number;\n\n    @ApiPropertyOptional({ type: String })\n    @IsOptional()\n    @Transform(({ value }) =>\n        value ? plainToInstance(FilterCountryDto, JSON.parse(value)) : undefined\n    )\n    @ValidateNested()\n    @Type(() => FilterCountryDto)\n    filters?: FilterCountryDto | null;\n\n    @ApiPropertyOptional({ type: String })\n    @IsOptional()\n    @Transform(({ value }) => {\n        return value ? plainToInstance(SortCountryDto, JSON.parse(value)) : undefined;\n    })\n    @ValidateNested({ each: true })\n    @Type(() => SortCountryDto)\n    sort?: SortCountryDto[] | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilterQueryDto.html":{"url":"classes/FilterQueryDto.html","title":"class - FilterQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilterQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/dto/pagination.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO class for filter query parameters.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                field\n                            \n                            \n                                    \n                                    \n                                    \n                                operator\n                            \n                            \n                                    \n                                    \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        field\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'iso', required: true})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.dto.ts:160\n                        \n                    \n\n            \n                \n                    The field to filter on.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        operator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '='})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.dto.ts:172\n                        \n                    \n\n            \n                \n                    The operator to use for filtering.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'IN'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.dto.ts:184\n                        \n                    \n\n            \n                \n                    The value to filter by.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nimport { Type, Transform, plainToInstance } from 'class-transformer';\nimport {\n    IsOptional,\n    Min,\n    Max,\n    IsNotEmpty,\n    IsString,\n    ValidateNested,\n    Matches,\n    IsEnum,\n    // Validate,\n    // IsIn,\n} from 'class-validator';\n\n// import { IsValidField } from '@core/validators/field.validator'; // Import the custom validator\nimport { IsNumberStringOrNumber } from '@decorators/number.string.validator';\nimport { ToNumber } from '@decorators/transforms.decorator';\n// import { IsNumberStringOrNumber } from '@decorators/number.string.validator';\n// import { ToNumber } from '@decorators/transforms.decorator';\n// import { Country } from '@modules/countries/dto/country';\n\n/**\n * Enum representing different pagination types.\n *\n * @export\n * @enum {string}\n */\n\nexport enum PaginationType {\n    NONE = 'no',\n    INFINITY = 'infinity',\n    PAGINATE = 'paginate',\n    ALL = 'all',\n}\n\n/**\n * DTO class for pagination query parameters.\n *\n * @export\n */\nexport class PaginationQueryDto {\n    /**\n     * The type of pagination to apply.\n     *\n     * @type {PaginationType}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        description:\n            'Pagination must all (Page and has_next_page), infinity (only has_next_page), paginate(only page)',\n        enum: PaginationType,\n        default: PaginationType.ALL,\n    })\n    @IsEnum(PaginationType)\n    @IsOptional()\n    readonly pagination: PaginationType;\n\n    /**\n     * The page number for pagination.\n     *\n     * @type {number}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        description: 'Page number',\n        minimum: 1,\n        default: 1,\n    })\n    @IsOptional()\n    @IsNumberStringOrNumber()\n    @ToNumber()\n    @Min(1)\n    readonly page?: number;\n\n    /**\n     * The number of records per page.\n     *\n     * @type {number}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        description: 'Record limit',\n        minimum: 1,\n        maximum: 500,\n        default: 10,\n    })\n    @IsOptional()\n    @IsNumberStringOrNumber()\n    @ToNumber()\n    @Min(10)\n    @Max(500)\n    readonly limit?: number = 10;\n\n    /**\n     * Filters to apply to the query.\n     *\n     * @type {FilterQueryDto[] | null}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        name: 'filters',\n        required: false,\n        type: String,\n        description: 'Array of filter objects as a JSON string',\n        example: '[{\"field\":\"name\",\"operator\":\"=\",\"value\":\"IN\"}]',\n    })\n    @IsOptional()\n    @Transform(({ value }) => {\n        return value ? plainToInstance(FilterQueryDto, JSON.parse(value)) : undefined;\n    })\n    @ValidateNested({ each: true })\n    @Type(() => FilterQueryDto)\n    filters?: FilterQueryDto[] | null;\n\n    /**\n     * Sorting options for the query.\n     *\n     * @type {SortByDto[] | null}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        name: 'sort',\n        required: false,\n        type: String,\n        description: 'Array of sort objects as a JSON string',\n        example: '[{\"field\":\"name\",\"direction\":\"ASC\"}]',\n    })\n    @IsOptional()\n    @Transform(({ value }) => {\n        return value ? plainToInstance(SortByDto, JSON.parse(value)) : undefined;\n    })\n    @ValidateNested({ each: true })\n    @Type(() => SortByDto)\n    sort?: SortByDto[] | null;\n}\n\n/**\n * DTO class for filter query parameters.\n *\n * @export\n */\nexport class FilterQueryDto {\n    /**\n     * The field to filter on.\n     *\n     * @type {string}\n     * @memberof FilterQueryDto\n     */\n\n    @ApiProperty({ example: 'iso', required: true })\n    @IsNotEmpty()\n    @IsString()\n    field: string;\n\n    /**\n     * The operator to use for filtering.\n     *\n     * @type {string}\n     * @memberof FilterQueryDto\n     */\n\n    @ApiProperty({ example: '=' })\n    @IsNotEmpty()\n    @IsString()\n    operator: string;\n\n    /**\n     * The value to filter by.\n     *\n     * @type {string}\n     * @memberof FilterQueryDto\n     */\n\n    @ApiProperty({ example: 'IN' })\n    @IsNotEmpty()\n    @IsString()\n    value: string;\n}\n\n/**\n * DTO class for sorting options.\n *\n * @export\n */\nexport class SortByDto {\n    // @ApiProperty({ example: 'name' })\n    // @IsString()\n    // @Validate(IsValidField, [Country], {\n    //     message: 'Field must be a valid key of Country',\n    // })\n    // field: keyof Country;\n    /**\n     * The field to sort by.\n     *\n     * @type {string}\n     * @memberof SortByDto\n     */\n\n    @ApiProperty()\n    @IsString()\n    // @IsIn(abc(x : keyof TExposedAccountInfo), {\n    //     message: 'Field must be one of \"name\", \"age\", or \"status\"',\n    // })\n    // @Validate(IsValidField, [{ entity: () => T }], {\n    //     message: 'Field must be a valid key of the specified entity',\n    // })\n    field: string;\n\n    /**\n     * The direction of the sort (ascending or descending).\n     *\n     * @type {string}\n     * @memberof SortByDto\n     */\n\n    @ApiProperty({ example: 'ASC' })\n    @IsString()\n    @Matches(/^(ASC|DESC|asc|desc)$/, {\n        message: 'operator must be one of ASC, DESC, asc, or desc',\n    })\n    direction: string;\n}\n\n// export class PaginatedResultDto {\n//     @ApiProperty()\n//     data: T[];\n\n//     @ApiProperty()\n//     total: number;\n\n//     @ApiProperty()\n//     page: number;\n\n//     @ApiProperty()\n//     limit: number;\n// }\n\n//DX\n// import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\n// import { Type, Transform, plainToInstance } from 'class-transformer';\n// import {\n//     IsOptional,\n//     Min,\n//     Max,\n//     IsNotEmpty,\n//     IsString,\n//     IsArray,\n//     ValidateNested,\n//     Validate,\n//     Matches,\n// } from 'class-validator';\n\n// import { IsNumberStringOrNumber } from '@decorators/number.string.validator';\n// import { ToNumber } from '@decorators/transforms.decorator';\n// import { SortBy } from '@validators/filter.validator';\n\n// export class FilterQueryDto {\n//     @ApiProperty({ example: 'name', required: true })\n//     @IsNotEmpty()\n//     @IsString()\n//     field: string;\n\n//     @ApiProperty({ example: 'LIKE' })\n//     @IsNotEmpty()\n//     @IsString()\n//     operator: string;\n\n//     @ApiProperty({ example: '%John%' })\n//     @IsNotEmpty()\n//     @IsString()\n//     value: string;\n// }\n\n// export class SortByDto {\n//     @ApiProperty({ example: 'name' })\n//     @IsString()\n//     field: string;\n\n//     @ApiProperty({ example: 'ASC' })\n//     @IsString()\n//     @Matches(/^(ASC|DESC|asc|desc)$/, {\n//         message: 'operator must be one of ASC, DESC, asc, or desc',\n//     })\n//     direction: string;\n// }\n\n// export class PaginationQueryDto {\n//     @ApiPropertyOptional({\n//         description: 'Page number',\n//         minimum: 1,\n//         default: 1,\n//     })\n//     @IsOptional()\n//     @IsNumberStringOrNumber()\n//     @ToNumber()\n//     @Min(1)\n//     // @Transform(({ value }) => {\n//     //     const strippedValue = String(value).replace(/['\"]+/g, '');\n//     //     const numberValue = Number(strippedValue);\n//     //     return isNaN(numberValue) ? 'undefined' : numberValue;\n//     // })\n//     readonly page?: number;\n\n//     @ApiPropertyOptional({\n//         description: 'Record limit',\n//         minimum: 1,\n//         maximum: 500,\n//         default: 10,\n//     })\n//     @IsOptional()\n//     @IsNumberStringOrNumber()\n//     @ToNumber()\n//     @Min(10)\n//     @Max(500)\n//     readonly limit?: number = 10;\n\n//     // @IsOptional()\n//     // @IsArray()\n//     // @ValidateNested({ each: true })\n//     // @Type(() => FilterQueryDto)\n//     // filters?: FilterQueryDto[];\n//     // // filters?: any;\n//     @ApiPropertyOptional({\n//         name: 'filters',\n//         required: false,\n//         type: String,\n//         description: 'Array of filter objects as a JSON string',\n//         example:\n//             '[{\"field\":\"name\",\"operator\":\"LIKE\",\"value\":\"John\"},{\"field\":\"age\",\"operator\":\">\",\"value\":\"30\"}]',\n//     })\n//     @IsOptional()\n//     @Transform(({ value }) => {\n//         return value ? plainToInstance(FilterQueryDto, JSON.parse(value)) : undefined;\n//     })\n//     @ValidateNested({ each: true })\n//     @Type(() => FilterQueryDto)\n//     filters?: FilterQueryDto[] | null;\n\n//     // @ApiPropertyOptional({\n//     //     description: ' Name or City:  ASC or DESC',\n//     //     example: 'name ASC',\n//     // })\n//     // @IsOptional()\n//     // @IsString()\n//     // @Validate(SortBy)\n//     // readonly sort?: string;\n//     // @ApiPropertyOptional({ type: [SortByDto], isArray: true })\n//     // @IsOptional()\n//     // @Transform(({ value }) => {\n//     //     return value ? plainToInstance(SortUserDto, JSON.parse(value)) : undefined;\n//     // })\n//     // @ValidateNested({ each: true })\n//     // @Type(() => SortUserDto)\n//     // sort?: SortUserDto[] | null;\n\n//     @ApiPropertyOptional({\n//         name: 'sort',\n//         required: false,\n//         type: String,\n//         description: 'Array of sort objects as a JSON string',\n//         example: '[{\"field\":\"name\",\"direction\":\"ASC\"},{\"field\":\"age\",\"direction\":\"DESC\"}]',\n//     })\n//     @IsOptional()\n//     @Transform(({ value }) => {\n//         return value ? plainToInstance(SortByDto, JSON.parse(value)) : undefined;\n//     })\n//     @ValidateNested({ each: true })\n//     @Type(() => SortByDto)\n//     sort?: SortByDto[] | null;\n// }\n\n// export class PaginatedResultDto {\n//     @ApiProperty()\n//     data: T[];\n\n//     @ApiProperty()\n//     total: number;\n\n//     @ApiProperty()\n//     page: number;\n\n//     @ApiProperty()\n//     limit: number;\n// }\n\n// // import { ApiProperty, ApiExtraModels } from '@nestjs/swagger';\n\n// // import { Type } from 'class-transformer';\n// // import { IsOptional, IsString, IsArray, ValidateNested, IsNumber } from 'class-validator';\n\n// // // export class FilterQueryDto {\n// // //     @ApiProperty({ example: 'name' })\n// // //     field: string;\n\n// // //     @ApiProperty({ example: 'LIKE' })\n// // //     operator: string;\n\n// // //     @ApiProperty({ example: '%John%' })\n// // //     value: string;\n// // // }\n// // export class FilterQueryDto {\n// //     @ApiProperty({ example: 'country_name' })\n// //     @IsString()\n// //     field: string;\n\n// //     @ApiProperty({ example: 'LIKE' })\n// //     @IsString()\n// //     operator: string;\n\n// //     @ApiProperty({ example: '%United%' })\n// //     @IsString()\n// //     value: string;\n// // }\n// // @ApiExtraModels(FilterQueryDto)\n// // export class PaginationQueryDto {\n// //     @ApiProperty({ example: 1, required: false })\n// //     @IsOptional()\n// //     @IsNumber()\n// //     @Type(() => Number)\n// //     page?: number = 1;\n\n// //     @ApiProperty({ example: 10, required: false })\n// //     @IsOptional()\n// //     @IsNumber()\n// //     @Type(() => Number)\n// //     limit?: number = 10;\n\n// //     // @ApiProperty({\n// //     //     type: [FilterQueryDto],\n// //     //     required: false,\n// //     //     isArray: true,\n// //     // })\n// //     // @Type(() => FilterQueryDto)\n// //     // filters?: FilterQueryDto[];\n// //     @ApiProperty({\n// //         type: FilterQueryDto,\n// //         required: false,\n// //         isArray: true,\n// //     })\n// //     // @IsOptional()\n// //     @IsArray()\n// //     @ValidateNested({ each: true })\n// //     @Type(() => FilterQueryDto)\n// //     filters?: FilterQueryDto[];\n\n// //     // @ApiProperty({\n// //     //     type: [Object],\n// //     //     // items: {\n// //     //     //     type: 'object',\n// //     //     //     items: {\n// //     //     //         type: 'object',\n// //     //     //     },\n// //     //     // },\n// //     // })\n// //     // coords: FilterQueryDto[];\n\n// //     // @ApiProperty({ type: String, required: false })\n// //     // @IsOptional()\n// //     // @IsArray()\n// //     // @ValidateNested({ each: true })\n// //     // @Type(() => FilterQueryDto)\n// //     // filters?: FilterQueryDto[];\n\n// //     @ApiProperty({ example: 'name ASC1', required: false })\n// //     sort?: string;\n// // }\n\n// // // export class PaginationQueryDto {\n// // //     @ApiProperty({ example: 1, required: false })\n// // //     page?: number = 1;\n\n// // //     @ApiProperty({ example: 10, required: false })\n// // //     limit?: number = 10;\n\n// // //     // @ApiProperty({ type: [FilterQueryDto], required: false, isArray: true })\n// // //     // filters?: FilterQueryDto[];\n\n// // //     // @ApiProperty({ type: String, required: false, isArray: true })\n// // //     // filters?: FilterQueryDto[];\n\n// // //     // @ApiProperty({ type: [FilterQueryDto], required: false, isArray: true })\n// // //     // @Type(() => FilterQueryDto)\n// // //     // filters?: FilterQueryDto[];\n\n// // //     @ApiProperty({ type: [FilterQueryDto], required: false })\n// // //     @IsOptional()\n// // //     @IsArray()\n// // //     @ValidateNested({ each: true })\n// // //     @Type(() => FilterQueryDto)\n// // //     filters?: FilterQueryDto[];\n\n// // //     @ApiProperty({ example: 'name ASC1', required: false })\n// // //     sort?: string;\n// // // }\n\n// // export class PaginatedResultDto {\n// //     @ApiProperty()\n// //     data: T[];\n\n// //     @ApiProperty()\n// //     total: number;\n\n// //     @ApiProperty()\n// //     page: number;\n\n// //     @ApiProperty()\n// //     limit: number;\n// // }\n\n// // export class abc {\n// //     @ApiProperty()\n// //     page: number;\n\n// //     @ApiProperty()\n// //     limit: number;\n// // }\n\n// // import { applyDecorators } from '@nestjs/common';\n// // import { ApiProperty, ApiExtraModels, ApiQuery, getSchemaPath } from '@nestjs/swagger';\n\n// // /**\n// //  * Combines Swagger Decorators to create a description for `filters[name]=something`\n// //  *  - has support for swagger\n// //  *  - automatic transformation with nestjs\n// //  */\n// // // // eslint-disable-next-line @typescript-eslint/ban-types,@typescript-eslint/explicit-module-boundary-types\n// // // export function ApiFilterQuery(fieldName: string, filterDto: Function) {\n// // //     return applyDecorators(\n// // //         ApiExtraModels(filterDto),\n// // //         ApiQuery({\n// // //             required: false,\n// // //             name: fieldName,\n// // //             style: 'deepObject',\n// // //             explode: true,\n// // //             type: 'object',\n// // //             schema: {\n// // //                 $ref: getSchemaPath(filterDto),\n// // //             },\n// // //         })\n// // //     );\n// // // }\n// // // eslint-disable-next-line @typescript-eslint/ban-types,@typescript-eslint/explicit-module-boundary-types\n// // export function ApiFilterQuery(fieldName: string, filterDto: Function, index: number) {\n// //     return applyDecorators(\n// //         ApiExtraModels(filterDto),\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}]`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //             schema: {\n// //                 $ref: getSchemaPath(filterDto),\n// //             },\n// //         })\n// //     );\n// // }\n\n// // export function ApiFilterQuery(fieldName: string, index: number) {\n// //     return applyDecorators(\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}].field`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //         }),\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}].operator`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //         }),\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}].value`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //         })\n// //     );\n// // }\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HelperModule.html":{"url":"modules/HelperModule.html","title":"module - HelperModule","body":"\n                   \n\n\n\n\n    Modules\n    HelperModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_HelperModule\n\n\n\ncluster_HelperModule_exports\n\n\n\ncluster_HelperModule_providers\n\n\n\n\nPaginationService \n\nPaginationService \n\n\n\nPrismaService \n\nPrismaService \n\n\n\nUtilsService \n\nUtilsService \n\n\n\nHelperModule\n\nHelperModule\n\nPaginationService  -->\n\nHelperModule->PaginationService \n\n\n\nPrismaService  -->\n\nHelperModule->PrismaService \n\n\n\nUtilsService  -->\n\nHelperModule->UtilsService \n\n\n\n\n\nPaginationService\n\nPaginationService\n\nHelperModule -->\n\nPaginationService->HelperModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nHelperModule -->\n\nPrismaService->HelperModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/helper/helper.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            The HelperModule is a global module that provides common utility services across the application.\nIt is marked as global, meaning its providers are available throughout the application without needing to import the module in other modules.\n\nThe HttpModule is imported to allow services within this module to make HTTP requests.\nThe module exports its services and HttpModule, making them available for use in other modules.\n\nExample :```typescript\n@Module({\n    imports: [HttpModule],\n    providers: [PaginationService, PrismaService, UtilsService],\n    exports: [PaginationService, PrismaService, UtilsService, HttpModule],\n})\nexport class HelperModule {}Example :\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PaginationService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PaginationService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            UtilsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from '@nestjs/axios';\nimport { Global, Module } from '@nestjs/common';\n\n// import { ConfigService } from './services/config.service';\nimport { PaginationService } from './services/pagination.service';\nimport { PrismaService } from './services/prisma.service';\nimport { UtilsService } from './services/util.service';\n\nconst providers = [PaginationService, PrismaService, UtilsService]; // ConfigService,\n\n/**\n * @module HelperModule\n *\n * @description\n * The `HelperModule` is a global module that provides common utility services across the application.\n * It is marked as global, meaning its providers are available throughout the application without needing to import the module in other modules.\n *\n * @remarks\n * - The `HttpModule` is imported to allow services within this module to make HTTP requests.\n * - The module exports its services and `HttpModule`, making them available for use in other modules.\n *\n * @example\n * ```typescript\n * @Module({\n *     imports: [HttpModule],\n *     providers: [PaginationService, PrismaService, UtilsService],\n *     exports: [PaginationService, PrismaService, UtilsService, HttpModule],\n * })\n * export class HelperModule {}\n * ```\n */\n\n@Global()\n@Module({\n    // imports: [],\n    // providers: [ConfigService, PrismaService],\n    // controllers: [],\n    // exports: [ConfigService, PrismaService],\n    providers,\n    imports: [HttpModule],\n    exports: [...providers, HttpModule],\n})\nexport class HelperModule {}\n\n// import { Module } from '@nestjs/common';\n// import { JwtService } from '@nestjs/jwt';\n\n// import { EncryptionService } from './services/encryption.service';\n// import { PrismaService } from './services/prisma.service';\n// import { TaskService } from './services/task.service';\n\n// @Module({\n//   imports: [],\n//   providers: [JwtService, EncryptionService, PrismaService, TaskService],\n//   controllers: [],\n//   exports: [EncryptionService, PrismaService, TaskService],\n// })\n// export class HelperModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HomeController.html":{"url":"controllers/HomeController.html","title":"controller - HomeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HomeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/home/home.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                This file defines the HomeController class, which handles HTTP requests related to the home feature of the application.\nThe HomeController class is responsible for handling incoming HTTP requests and returning responses for the home-related endpoints.\nThis controller uses the HomeService to perform the necessary business logic.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                appInfo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        appInfo\n                        \n                    \n                \n            \n            \n                \n                        \n                    appInfo()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/home/home.controller.ts:30\n                        \n                    \n\n\n            \n                \n                        Handles GET requests to the root endpoint and returns application information.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The application information.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\n\nimport { HomeService } from './home.service';\n\n/**\n * @fileoverview\n * This file defines the `HomeController` class, which handles HTTP requests related to the home feature of the application.\n *\n * @module\n * @description\n * The `HomeController` class is responsible for handling incoming HTTP requests and returning responses for the home-related endpoints.\n * This controller uses the `HomeService` to perform the necessary business logic.\n */\n\n@ApiTags('Home')\n@Controller()\nexport class HomeController {\n    /**\n     * Constructs a new `HomeController`.\n     * @param {HomeService} service - The service used to handle business logic for home-related endpoints.\n     */\n    constructor(private service: HomeService) {}\n\n    /**\n     * Handles GET requests to the root endpoint and returns application information.\n     * @returns {object} The application information.\n     */\n    @Get()\n    appInfo(): object {\n        return this.service.appInfo();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HomeModule.html":{"url":"modules/HomeModule.html","title":"module - HomeModule","body":"\n                   \n\n\n\n\n    Modules\n    HomeModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_HomeModule\n\n\n\ncluster_HomeModule_providers\n\n\n\n\nHomeService\n\nHomeService\n\n\n\nHomeModule\n\nHomeModule\n\nHomeModule -->\n\nHomeService->HomeModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/home/home.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            This file defines the HomeModule class, which is responsible for the home-related functionalities of the application.\nThe HomeModule class configures the home feature of the application by declaring its controller and service.\nThis module handles the business logic and request handling for home-related endpoints.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HomeService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            HomeController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { HomeController } from './home.controller';\nimport { HomeService } from './home.service';\n\n/**\n * @fileoverview\n * This file defines the `HomeModule` class, which is responsible for the home-related functionalities of the application.\n *\n * @module\n * @description\n * The `HomeModule` class configures the home feature of the application by declaring its controller and service.\n * This module handles the business logic and request handling for home-related endpoints.\n */\n\n@Module({\n    imports: [],\n    controllers: [\n        /**\n         * Controller responsible for handling incoming requests and returning responses related to the home feature.\n         */\n        HomeController,\n    ],\n    providers: [\n        /**\n         * Service responsible for handling the business logic related to the home feature.\n         */\n        HomeService,\n    ],\n})\nexport class HomeModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HomeService.html":{"url":"injectables/HomeService.html","title":"injectable - HomeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HomeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/home/home.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the HomeService class, which provides methods for retrieving application information from the configuration.\nThe HomeService class is responsible for retrieving application information from the configuration using the ConfigService.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                appInfo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/home/home.service.ts:15\n                            \n                        \n\n                \n                    \n                            Constructs a new HomeService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe configuration service used to access application configuration values.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        appInfo\n                        \n                    \n                \n            \n            \n                \nappInfo()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/home/home.service.ts:26\n                        \n                    \n\n\n            \n                \n                        Retrieves and returns application information from the configuration.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                An object containing the application's name, description, app prefix, and API prefix.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\nimport { AllConfigType } from '@config/type/config.type';\n\n/**\n * @fileoverview\n * This file defines the `HomeService` class, which provides methods for retrieving application information from the configuration.\n *\n * @module\n * @description\n * The `HomeService` class is responsible for retrieving application information from the configuration using the `ConfigService`.\n */\n@Injectable()\nexport class HomeService {\n    /**\n     * Constructs a new `HomeService`.\n     * @param {ConfigService} configService - The configuration service used to access application configuration values.\n     */\n    constructor(private configService: ConfigService) {}\n\n    /**\n     * Retrieves and returns application information from the configuration.\n     * @returns {object} An object containing the application's name, description, app prefix, and API prefix.\n     */\n    appInfo(): object {\n        return {\n            name: this.configService.get('app.name', { infer: true }),\n            description: this.configService.get('app.description', { infer: true }),\n            appPrefix: this.configService.get('app.appPrefix', { infer: true }),\n            apiPrefix: this.configService.get('app.apiPrefix', { infer: true }),\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpErrorFilter.html":{"url":"classes/HttpErrorFilter.html","title":"class - HttpErrorFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpErrorFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/exceptions/http-error.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                Global HTTP error filter.\nadditional error information such as the HTTP status, timestamp, request URL, method, and message.\nIt logs the error details, particularly for internal server errors.\nExample :```typescript\nimport { HttpErrorFilter } from './path/to/filter';@Module({\n  providers: [\n    {\n      provide: APP_FILTER,\n      useClass: HttpErrorFilter,\n    },\n  ],\n})\nexport class AppModule {}\nExample :\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/exceptions/http-error.filter.ts:50\n                        \n                    \n\n\n            \n                \n                        Method that handles the exception.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                        HttpException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe exception that was thrown.\n\n\n                                            \n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe host object containing the details of the current request.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n    ExceptionFilter,\n    Catch,\n    ArgumentsHost,\n    Logger,\n    HttpException,\n    HttpStatus,\n} from '@nestjs/common';\n\n// import * as _ from 'lodash';\n\n//   import { SQLService } from \"../shared/services/sql.service\";\n\n//   import { Query } from \"./query\";\n\n/**\n * Global HTTP error filter.\n *\n * @description This filter catches all HTTP exceptions and formats the response to include\n * additional error information such as the HTTP status, timestamp, request URL, method, and message.\n * It logs the error details, particularly for internal server errors.\n *\n * @example\n * ```typescript\n * import { HttpErrorFilter } from './path/to/filter';\n *\n * @Module({\n *   providers: [\n *     {\n *       provide: APP_FILTER,\n *       useClass: HttpErrorFilter,\n *     },\n *   ],\n * })\n * export class AppModule {}\n * ```\n *\n * @implements {ExceptionFilter}\n */\n\n@Catch()\nexport class HttpErrorFilter implements ExceptionFilter {\n    /**\n     * Method that handles the exception.\n     *\n     * @param {HttpException} exception - The exception that was thrown.\n     * @param {ArgumentsHost} host - The host object containing the details of the current request.\n     */\n\n    catch(exception: HttpException, host: ArgumentsHost) {\n        const ctx = host.switchToHttp();\n        const response = ctx.getResponse();\n        const request = ctx.getRequest();\n        const status = exception.getStatus\n            ? exception.getStatus()\n            : HttpStatus.INTERNAL_SERVER_ERROR;\n        const errorResponse = {\n            code: status,\n            timestamp: new Date().toLocaleTimeString,\n            path: request.url,\n            method: request.method,\n            message:\n                status !== HttpStatus.INTERNAL_SERVER_ERROR\n                    ? exception.message || null\n                    : 'Internal server error',\n        };\n\n        if (status === HttpStatus.INTERNAL_SERVER_ERROR) {\n            Logger.error(`${request.method} ${request.url}`, exception.stack, 'ExceptionFilter');\n        } else {\n            Logger.error(\n                `${request.method} ${request.url}`,\n                JSON.stringify(errorResponse),\n                'ExceptionFilter'\n            );\n        }\n\n        response.status(status).json(errorResponse);\n\n        //   try {\n        //     const sqlService = new SQLService();\n        //     const query = new Query();\n        //     const reqstrobj = { body: _.clone(request.body), header: _.clone(request.header) };\n        //     const reqstr = JSON.stringify(reqstrobj);\n\n        //     const resstrobj = { res: _.clone(errorResponse), exception: exception.stack };\n        //     const resstr = JSON.stringify(resstrobj);\n        //     sqlService.run(\n        //       query.addHttpQueryError(\"HTTPERROR\", request.method, request.url, reqstr, resstr)\n        //     );\n        //   } catch (error) {}\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/http-exception.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                Exception filter for handling HTTP exceptions in a NestJS application.\nThis filter catches all HttpException instances and formats the response\nwith the status code, timestamp, and request path.\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/filters/http-exception.filter.ts:27\n                        \n                    \n\n\n            \n                \n                        Handles the HTTP exception and formats the error response.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                        HttpException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The HTTP exception to handle.\n\n                                            \n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The arguments host for accessing request and response objects.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ExceptionFilter, Catch, ArgumentsHost, HttpException } from '@nestjs/common';\n\nimport { Request, Response } from 'express';\n\n/**\n * Exception filter for handling HTTP exceptions in a NestJS application.\n *\n * This filter catches all `HttpException` instances and formats the response\n * with the status code, timestamp, and request path.\n *\n * @export\n * @class HttpExceptionFilter\n * @implements {ExceptionFilter}\n */\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n    /**\n     * Handles the HTTP exception and formats the error response.\n     *\n     * @param {HttpException} exception The HTTP exception to handle.\n     * @param {ArgumentsHost} host The arguments host for accessing request and response objects.\n     *\n     * @memberof HttpExceptionFilter\n     */\n\n    catch(exception: HttpException, host: ArgumentsHost) {\n        console.log('HTTP EXEPTION from filter');\n        const ctx = host.switchToHttp();\n        const response = ctx.getResponse();\n        const request = ctx.getRequest();\n        const status = exception.getStatus();\n\n        response.status(status).json({\n            statusCode: status,\n            timestamp: new Date().toISOString(),\n            path: request.url,\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAppConfig.html":{"url":"interfaces/IAppConfig.html","title":"interface - IAppConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IAppConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interfaces/app.interfaces.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration interface for application settings.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            apiPrefix\n                                        \n                                \n                                \n                                        \n                                            backendDomain\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            frontendDomain\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            port\n                                        \n                                \n                                \n                                        \n                                            workingDirectory\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        apiPrefix\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        apiPrefix:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The API prefix used in the application.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        backendDomain\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        backendDomain:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The domain for the backend application.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        frontendDomain\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        frontendDomain:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The domain for the frontend application.\nThis property is optional.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The name of the application.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        port\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        port:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The port on which the application is running.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        workingDirectory\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        workingDirectory:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The working directory of the application.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        'use strict';\n\n'use strict';\n\n/**\n * Configuration interface for application settings.\n *\n * @export\n * @interface IAppConfig\n */\nexport interface IAppConfig {\n    /**\n     * The name of the application.\n     *\n     * @type {string}\n     * @memberof IAppConfig\n     */\n\n    name: string;\n\n    /**\n     * The working directory of the application.\n     *\n     * @type {string}\n     * @memberof IAppConfig\n     */\n\n    workingDirectory: string;\n\n    /**\n     * The domain for the frontend application.\n     * This property is optional.\n     *\n     * @type {string}\n     * @memberof IAppConfig\n     */\n\n    frontendDomain?: string;\n\n    /**\n     * The domain for the backend application.\n     *\n     * @type {string}\n     * @memberof IAppConfig\n     */\n\n    backendDomain: string;\n\n    /**\n     * The port on which the application is running.\n     *\n     * @type {number}\n     * @memberof IAppConfig\n     */\n\n    port: number;\n\n    /**\n     * The API prefix used in the application.\n     *\n     * @type {string}\n     * @memberof IAppConfig\n     */\n\n    apiPrefix: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAwsConfig.html":{"url":"interfaces/IAwsConfig.html","title":"interface - IAwsConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IAwsConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interfaces/aws.interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            AWS_S3_ACCESS_KEY_ID\n                                        \n                                \n                                \n                                        \n                                            AWS_S3_BUCKET_NAME\n                                        \n                                \n                                \n                                        \n                                            AWS_S3_COMPANION_SECRET\n                                        \n                                \n                                \n                                        \n                                            AWS_S3_DEFAULT_REGION\n                                        \n                                \n                                \n                                        \n                                            AWS_S3_ENDPOINT\n                                        \n                                \n                                \n                                        \n                                            AWS_S3_SECRET_ACCESS_KEY\n                                        \n                                \n                                \n                                        \n                                            AWS_S3_SERVER_HOST\n                                        \n                                \n                                \n                                        \n                                            AWS_S3_TEMP_DIRECTORY\n                                        \n                                \n                                \n                                        \n                                            TUS_STORAGE_DRIVER\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        AWS_S3_ACCESS_KEY_ID\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        AWS_S3_ACCESS_KEY_ID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        AWS_S3_BUCKET_NAME\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        AWS_S3_BUCKET_NAME:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        AWS_S3_COMPANION_SECRET\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        AWS_S3_COMPANION_SECRET:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        AWS_S3_DEFAULT_REGION\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        AWS_S3_DEFAULT_REGION:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        AWS_S3_ENDPOINT\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        AWS_S3_ENDPOINT:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        AWS_S3_SECRET_ACCESS_KEY\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        AWS_S3_SECRET_ACCESS_KEY:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        AWS_S3_SERVER_HOST\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        AWS_S3_SERVER_HOST:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        AWS_S3_TEMP_DIRECTORY\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        AWS_S3_TEMP_DIRECTORY:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        TUS_STORAGE_DRIVER\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        TUS_STORAGE_DRIVER:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        'use strict';\n\nexport interface IAwsConfig {\n    AWS_S3_ACCESS_KEY_ID: string;\n    AWS_S3_SECRET_ACCESS_KEY: string;\n    AWS_S3_BUCKET_NAME: string;\n    AWS_S3_DEFAULT_REGION: string;\n    AWS_S3_TEMP_DIRECTORY: string;\n    AWS_S3_ENDPOINT: string;\n\n    AWS_S3_SERVER_HOST: string;\n    AWS_S3_COMPANION_SECRET: string;\n    TUS_STORAGE_DRIVER: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IFileConfig.html":{"url":"interfaces/IFileConfig.html","title":"interface - IFileConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IFileConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interfaces/file.interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            accessKeyId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            awsDefaultS3Bucket\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            awsS3Region\n                                        \n                                \n                                \n                                        \n                                            driver\n                                        \n                                \n                                \n                                        \n                                            maxFileSize\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            secretAccessKey\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accessKeyId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accessKeyId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        awsDefaultS3Bucket\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        awsDefaultS3Bucket:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        awsS3Region\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        awsS3Region:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        driver\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        driver:         FileDriver\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         FileDriver\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxFileSize\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxFileSize:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        secretAccessKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        secretAccessKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        'use strict';\n\nimport { FileDriver } from '@config/type/file-config.type';\nexport interface IFileConfig {\n    driver: FileDriver;\n    accessKeyId?: string;\n    secretAccessKey?: string;\n    awsDefaultS3Bucket?: string;\n    awsS3Region?: string;\n    maxFileSize: number;\n    // encoding: string;\n    // buffer: Buffer;\n    // fieldname: string;\n    // mimetype: string;\n    // originalname: string;\n    // size: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IJWTConfig.html":{"url":"interfaces/IJWTConfig.html","title":"interface - IJWTConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IJWTConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interfaces/jwt.interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            algorithm\n                                        \n                                \n                                \n                                        \n                                            audience\n                                        \n                                \n                                \n                                        \n                                            expirationTime\n                                        \n                                \n                                \n                                        \n                                            expiresInSeconds\n                                        \n                                \n                                \n                                        \n                                            issuer\n                                        \n                                \n                                \n                                        \n                                            secret\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        algorithm\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        algorithm:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        audience\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        audience:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expirationTime\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expirationTime:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expiresInSeconds\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expiresInSeconds:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        issuer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        issuer:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        secret\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        secret:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        'use strict';\n\nexport interface IJWTConfig {\n    secret: string;\n    algorithm: string;\n    expiresInSeconds: number;\n    expirationTime: number;\n    issuer: string;\n    audience: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/INodeEmailerConfig.html":{"url":"interfaces/INodeEmailerConfig.html","title":"interface - INodeEmailerConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  INodeEmailerConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interfaces/node-emailer.interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            NODE_EMAILER_FROM_EMAIL\n                                        \n                                \n                                \n                                        \n                                            NODE_EMAILER_HOST\n                                        \n                                \n                                \n                                        \n                                            NODE_EMAILER_PASSWORD\n                                        \n                                \n                                \n                                        \n                                            NODE_EMAILER_PORT\n                                        \n                                \n                                \n                                        \n                                            NODE_EMAILER_TO_EMAIL\n                                        \n                                \n                                \n                                        \n                                            NODE_EMAILER_USER\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        NODE_EMAILER_FROM_EMAIL\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        NODE_EMAILER_FROM_EMAIL:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        NODE_EMAILER_HOST\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        NODE_EMAILER_HOST:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        NODE_EMAILER_PASSWORD\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        NODE_EMAILER_PASSWORD:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        NODE_EMAILER_PORT\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        NODE_EMAILER_PORT:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        NODE_EMAILER_TO_EMAIL\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        NODE_EMAILER_TO_EMAIL:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        NODE_EMAILER_USER\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        NODE_EMAILER_USER:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        'use strict';\n\nexport interface INodeEmailerConfig {\n    NODE_EMAILER_HOST: string;\n    NODE_EMAILER_PORT: number;\n    NODE_EMAILER_USER: string;\n    NODE_EMAILER_PASSWORD: string;\n    NODE_EMAILER_FROM_EMAIL: string;\n    NODE_EMAILER_TO_EMAIL: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPageMetaDtoParameters.html":{"url":"interfaces/IPageMetaDtoParameters.html","title":"interface - IPageMetaDtoParameters","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPageMetaDtoParameters\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/dto/pagination.meta.dto.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            maxPages\n                                        \n                                \n                                \n                                        \n                                            paginationQueryDto\n                                        \n                                \n                                \n                                        \n                                            totalItems\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        maxPages\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxPages:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        paginationQueryDto\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        paginationQueryDto:         PaginationQueryDto\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PaginationQueryDto\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        totalItems\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        totalItems:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\n\nimport { PaginationQueryDto } from '@utils/dto/pagination.dto';\n\nexport interface IPageMetaDtoParameters {\n    paginationQueryDto: PaginationQueryDto;\n    totalItems: number;\n    maxPages?: number;\n}\n\n/**\n * PaginationMetaDto provides metadata for paginated responses.\n * This class helps in constructing the pagination information that can be used\n * to navigate through large sets of data.\n *\n * @example\n * {\n *   totalItems: 77,\n *   currentPage: 7,\n *   pageSize: 10,\n *   totalPages: 8,\n *   startPage: 1,\n *   endPage: 7,\n *   startIndex: 60,\n *   endIndex: 76,\n *   pages: [1, 2, 3, 4, 5, 6, 7]\n * }\n */\n\nexport class PaginationMetaDto {\n    /**\n     * The total number of items available.\n     *\n     * @example 77\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 77, //  'Total records'\n    })\n    readonly totalItems: number;\n\n    /**\n     * The current page number.\n     *\n     * @example 7\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 7, //  'Current page number',\n    })\n    readonly currentPage: number;\n\n    /**\n     * The number of items per page (page size).\n     *\n     * @example 10\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 10, //  'limit / page record number',\n    })\n    readonly pageSize: number;\n\n    /**\n     * The total number of pages based on total items and page size.\n     *\n     * @example 8\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 8, //  'Total pages',\n    })\n    readonly totalPages: number;\n\n    /**\n     * The start page in the pagination controls.\n     *\n     * @example 1\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 1, //  'Start page',\n    })\n    readonly startPage: number;\n\n    /**\n     * The end page in the pagination controls.\n     *\n     * @example 7\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 7, //  'End page',\n    })\n    readonly endPage: number;\n\n    /**\n     * The index of the first item on the current page.\n     *\n     * @example 60\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 0, //  'Record start index',\n    })\n    readonly startIndex: number;\n\n    /**\n     * The index of the last item on the current page.\n     *\n     * @example 76\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 76, //  'Record end index',\n    })\n    readonly endIndex: number;\n\n    /**\n     * An array of page numbers to display in pagination controls.\n     *\n     * @example [1, 2, 3, 4, 5, 6, 7]\n     */\n\n    @ApiPropertyOptional({\n        type: Array,\n        example: [1, 2, 3, 4, 5, 6, 7], //  'Array of page number',\n    })\n    readonly pages: any;\n\n    /**\n     * Creates an instance of PaginationMetaDto.\n     *\n     * @param {IPageMetaDtoParameters} params - Parameters required for creating pagination metadata.\n     */\n\n    constructor({ paginationQueryDto, totalItems, maxPages = 10 }: IPageMetaDtoParameters) {\n        const pageSize = paginationQueryDto.limit || 10;\n        let currentPage = paginationQueryDto.page || 1;\n\n        // calculate total pages\n\n        const totalPages = Math.ceil(totalItems / pageSize);\n\n        // ensure current page isn't out of range\n        if (currentPage  totalPages) {\n            currentPage = totalPages;\n        }\n\n        let startPage: number, endPage: number;\n\n        if (totalPages = totalPages) {\n                // current page near the end\n                startPage = totalPages - maxPages + 1;\n                endPage = totalPages;\n            } else {\n                // current page somewhere in the middle\n                startPage = currentPage - maxPagesBeforeCurrentPage;\n                endPage = currentPage + maxPagesAfterCurrentPage;\n            }\n        }\n\n        // calculate start and end item indexes\n        const startIndex = (currentPage - 1) * pageSize;\n        const endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\n\n        // create an array of pages to ng-repeat in the pager control\n        const pages = Array.from(Array(endPage + 1 - startPage).keys()).map((i) => startPage + i);\n\n        this.totalItems = totalItems;\n        this.currentPage = currentPage;\n        this.pageSize = pageSize;\n        this.totalPages = totalPages;\n        this.startPage = startPage;\n        this.endPage = endPage;\n        this.startIndex = startIndex > 0 ? startIndex : 0;\n        this.endIndex = endIndex > 0 ? endIndex : 0;\n        this.pages = pages;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPaginationFieldConfig.html":{"url":"interfaces/IPaginationFieldConfig.html","title":"interface - IPaginationFieldConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPaginationFieldConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/types/pagination-options.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for configuring pagination fields in a query.\nThis interface provides a contract for configuring how fields should be handled when constructing\npagination queries, including specifying the table to join, generating an alias, and selecting fields.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            alias\n                                        \n                                \n                                \n                                        \n                                            joinTable\n                                        \n                                \n                                \n                                        \n                                            selectFields\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        alias\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        alias:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A function that returns an alias for the table.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        joinTable\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        joinTable:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The table to join for pagination queries.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectFields\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectFields:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A function that returns an array of field names to select based on the provided alias.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface IPaginationFieldConfig {\n    /**\n     * The table to join for pagination queries.\n     *\n     * @type {any}\n     */\n\n    joinTable: any;\n\n    /**\n     * A function that returns an alias for the table.\n     *\n     * @returns {string} - The alias for the table.\n     */\n\n    alias: () => string;\n\n    /**\n     * A function that returns an array of field names to select based on the provided alias.\n     *\n     * @param {string} alias - The alias for the table.\n     * @returns {string[]} - An array of field names to select.\n     */\n\n    selectFields: (alias: string) => string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPostgreSQLConfig.html":{"url":"interfaces/IPostgreSQLConfig.html","title":"interface - IPostgreSQLConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPostgreSQLConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interfaces/postgres.interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            POSTGRES_CONNECTION_LIMIT\n                                        \n                                \n                                \n                                        \n                                            POSTGRES_HOST\n                                        \n                                \n                                \n                                        \n                                            POSTGRES_NAME\n                                        \n                                \n                                \n                                        \n                                            POSTGRES_PASSWORD\n                                        \n                                \n                                \n                                        \n                                            POSTGRES_POOL_TIMEOUT\n                                        \n                                \n                                \n                                        \n                                            POSTGRES_PORT\n                                        \n                                \n                                \n                                        \n                                            POSTGRES_SCHEMA\n                                        \n                                \n                                \n                                        \n                                            POSTGRES_USER\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        POSTGRES_CONNECTION_LIMIT\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        POSTGRES_CONNECTION_LIMIT:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        POSTGRES_HOST\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        POSTGRES_HOST:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        POSTGRES_NAME\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        POSTGRES_NAME:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        POSTGRES_PASSWORD\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        POSTGRES_PASSWORD:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        POSTGRES_POOL_TIMEOUT\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        POSTGRES_POOL_TIMEOUT:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        POSTGRES_PORT\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        POSTGRES_PORT:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        POSTGRES_SCHEMA\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        POSTGRES_SCHEMA:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        POSTGRES_USER\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        POSTGRES_USER:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        'use strict';\n\nexport interface IPostgreSQLConfig {\n    POSTGRES_HOST: string;\n    POSTGRES_PORT: string;\n    POSTGRES_USER: string;\n    POSTGRES_PASSWORD: string;\n    POSTGRES_NAME: string;\n    POSTGRES_CONNECTION_LIMIT: string;\n    POSTGRES_POOL_TIMEOUT: string;\n    POSTGRES_SCHEMA: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISMSConfig.html":{"url":"interfaces/ISMSConfig.html","title":"interface - ISMSConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ISMSConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interfaces/sms.interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            API_KEY\n                                        \n                                \n                                \n                                        \n                                            SENDER_ID\n                                        \n                                \n                                \n                                        \n                                            SMS_PROVIDER_NAME\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        API_KEY\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        API_KEY:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        SENDER_ID\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        SENDER_ID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        SMS_PROVIDER_NAME\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        SMS_PROVIDER_NAME:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        'use strict';\n\nexport interface ISMSConfig {\n    SMS_PROVIDER_NAME: string;\n    API_KEY: string;\n    SENDER_ID: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISendGridConfig.html":{"url":"interfaces/ISendGridConfig.html","title":"interface - ISendGridConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ISendGridConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interfaces/sendgrid.interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            FROM_EMAIL\n                                        \n                                \n                                \n                                        \n                                            SENDGRID_API_KEY\n                                        \n                                \n                                \n                                        \n                                            TO_EMAIL\n                                        \n                                \n                                \n                                        \n                                            WELCOME_EMAIL\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        FROM_EMAIL\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        FROM_EMAIL:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        SENDGRID_API_KEY\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        SENDGRID_API_KEY:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        TO_EMAIL\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        TO_EMAIL:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        WELCOME_EMAIL\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        WELCOME_EMAIL:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        'use strict';\n\nexport interface ISendGridConfig {\n    SENDGRID_API_KEY: string;\n    FROM_EMAIL: string;\n    TO_EMAIL: string;\n    WELCOME_EMAIL: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUploadFileConfig.html":{"url":"interfaces/IUploadFileConfig.html","title":"interface - IUploadFileConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUploadFileConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interfaces/upload-file.interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            FILE_UPLOAD_DESTINATION\n                                        \n                                \n                                \n                                        \n                                            MAX_UPLOAD_FILE_SIZE\n                                        \n                                \n                                \n                                        \n                                            MULTIPLE_FILE_PATH\n                                        \n                                \n                                \n                                        \n                                            PROFILE_PIC_FILE_PATH\n                                        \n                                \n                                \n                                        \n                                            TEMP_FILE_UPLOAD_URL\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        FILE_UPLOAD_DESTINATION\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        FILE_UPLOAD_DESTINATION:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        MAX_UPLOAD_FILE_SIZE\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        MAX_UPLOAD_FILE_SIZE:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        MULTIPLE_FILE_PATH\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        MULTIPLE_FILE_PATH:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        PROFILE_PIC_FILE_PATH\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        PROFILE_PIC_FILE_PATH:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        TEMP_FILE_UPLOAD_URL\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        TEMP_FILE_UPLOAD_URL:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        'use strict';\n\nexport interface IUploadFileConfig {\n    TEMP_FILE_UPLOAD_URL: string;\n    FILE_UPLOAD_DESTINATION: string;\n    MAX_UPLOAD_FILE_SIZE: number;\n    PROFILE_PIC_FILE_PATH: string;\n    MULTIPLE_FILE_PATH: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationMetaDto.html":{"url":"classes/PaginationMetaDto.html","title":"class - PaginationMetaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationMetaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/dto/pagination.meta.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                PaginationMetaDto provides metadata for paginated responses.\nThis class helps in constructing the pagination information that can be used\nto navigate through large sets of data.\nExample :{\n  totalItems: 77,\n  currentPage: 7,\n  pageSize: 10,\n  totalPages: 8,\n  startPage: 1,\n  endPage: 7,\n  startIndex: 60,\n  endIndex: 76,\n  pages: [1, 2, 3, 4, 5, 6, 7]\n}\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Readonly\n                                currentPage\n                            \n                            \n                                    \n                                    Readonly\n                                endIndex\n                            \n                            \n                                    \n                                    Readonly\n                                endPage\n                            \n                            \n                                    \n                                    Readonly\n                                pages\n                            \n                            \n                                    \n                                    Readonly\n                                pageSize\n                            \n                            \n                                    \n                                    Readonly\n                                startIndex\n                            \n                            \n                                    \n                                    Readonly\n                                startPage\n                            \n                            \n                                    \n                                    Readonly\n                                totalItems\n                            \n                            \n                                    \n                                    Readonly\n                                totalPages\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: IPageMetaDtoParameters)\n                    \n                \n                        \n                            \n                                Defined in src/utils/dto/pagination.meta.dto.ts:137\n                            \n                        \n\n                \n                    \n                            Creates an instance of PaginationMetaDto.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                        IPageMetaDtoParameters\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        currentPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: Number, example: 7})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.meta.dto.ts:53\n                        \n                    \n\n            \n                \n                    The current page number.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        endIndex\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: Number, example: 76})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.meta.dto.ts:125\n                        \n                    \n\n            \n                \n                    The index of the last item on the current page.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        endPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: Number, example: 7})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.meta.dto.ts:101\n                        \n                    \n\n            \n                \n                    The end page in the pagination controls.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        pages\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: Array, example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.meta.dto.ts:137\n                        \n                    \n\n            \n                \n                    An array of page numbers to display in pagination controls.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        pageSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: Number, example: 10})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.meta.dto.ts:65\n                        \n                    \n\n            \n                \n                    The number of items per page (page size).\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        startIndex\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: Number, example: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.meta.dto.ts:113\n                        \n                    \n\n            \n                \n                    The index of the first item on the current page.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        startPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: Number, example: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.meta.dto.ts:89\n                        \n                    \n\n            \n                \n                    The start page in the pagination controls.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        totalItems\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: Number, example: 77})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.meta.dto.ts:41\n                        \n                    \n\n            \n                \n                    The total number of items available.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        totalPages\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: Number, example: 8})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.meta.dto.ts:77\n                        \n                    \n\n            \n                \n                    The total number of pages based on total items and page size.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\n\nimport { PaginationQueryDto } from '@utils/dto/pagination.dto';\n\nexport interface IPageMetaDtoParameters {\n    paginationQueryDto: PaginationQueryDto;\n    totalItems: number;\n    maxPages?: number;\n}\n\n/**\n * PaginationMetaDto provides metadata for paginated responses.\n * This class helps in constructing the pagination information that can be used\n * to navigate through large sets of data.\n *\n * @example\n * {\n *   totalItems: 77,\n *   currentPage: 7,\n *   pageSize: 10,\n *   totalPages: 8,\n *   startPage: 1,\n *   endPage: 7,\n *   startIndex: 60,\n *   endIndex: 76,\n *   pages: [1, 2, 3, 4, 5, 6, 7]\n * }\n */\n\nexport class PaginationMetaDto {\n    /**\n     * The total number of items available.\n     *\n     * @example 77\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 77, //  'Total records'\n    })\n    readonly totalItems: number;\n\n    /**\n     * The current page number.\n     *\n     * @example 7\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 7, //  'Current page number',\n    })\n    readonly currentPage: number;\n\n    /**\n     * The number of items per page (page size).\n     *\n     * @example 10\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 10, //  'limit / page record number',\n    })\n    readonly pageSize: number;\n\n    /**\n     * The total number of pages based on total items and page size.\n     *\n     * @example 8\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 8, //  'Total pages',\n    })\n    readonly totalPages: number;\n\n    /**\n     * The start page in the pagination controls.\n     *\n     * @example 1\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 1, //  'Start page',\n    })\n    readonly startPage: number;\n\n    /**\n     * The end page in the pagination controls.\n     *\n     * @example 7\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 7, //  'End page',\n    })\n    readonly endPage: number;\n\n    /**\n     * The index of the first item on the current page.\n     *\n     * @example 60\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 0, //  'Record start index',\n    })\n    readonly startIndex: number;\n\n    /**\n     * The index of the last item on the current page.\n     *\n     * @example 76\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 76, //  'Record end index',\n    })\n    readonly endIndex: number;\n\n    /**\n     * An array of page numbers to display in pagination controls.\n     *\n     * @example [1, 2, 3, 4, 5, 6, 7]\n     */\n\n    @ApiPropertyOptional({\n        type: Array,\n        example: [1, 2, 3, 4, 5, 6, 7], //  'Array of page number',\n    })\n    readonly pages: any;\n\n    /**\n     * Creates an instance of PaginationMetaDto.\n     *\n     * @param {IPageMetaDtoParameters} params - Parameters required for creating pagination metadata.\n     */\n\n    constructor({ paginationQueryDto, totalItems, maxPages = 10 }: IPageMetaDtoParameters) {\n        const pageSize = paginationQueryDto.limit || 10;\n        let currentPage = paginationQueryDto.page || 1;\n\n        // calculate total pages\n\n        const totalPages = Math.ceil(totalItems / pageSize);\n\n        // ensure current page isn't out of range\n        if (currentPage  totalPages) {\n            currentPage = totalPages;\n        }\n\n        let startPage: number, endPage: number;\n\n        if (totalPages = totalPages) {\n                // current page near the end\n                startPage = totalPages - maxPages + 1;\n                endPage = totalPages;\n            } else {\n                // current page somewhere in the middle\n                startPage = currentPage - maxPagesBeforeCurrentPage;\n                endPage = currentPage + maxPagesAfterCurrentPage;\n            }\n        }\n\n        // calculate start and end item indexes\n        const startIndex = (currentPage - 1) * pageSize;\n        const endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\n\n        // create an array of pages to ng-repeat in the pager control\n        const pages = Array.from(Array(endPage + 1 - startPage).keys()).map((i) => startPage + i);\n\n        this.totalItems = totalItems;\n        this.currentPage = currentPage;\n        this.pageSize = pageSize;\n        this.totalPages = totalPages;\n        this.startPage = startPage;\n        this.endPage = endPage;\n        this.startIndex = startIndex > 0 ? startIndex : 0;\n        this.endIndex = endIndex > 0 ? endIndex : 0;\n        this.pages = pages;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationQueryDto.html":{"url":"classes/PaginationQueryDto.html","title":"class - PaginationQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/dto/pagination.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO class for pagination query parameters.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                filters\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                pagination\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                sort\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        filters\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FilterQueryDto[] | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({name: 'filters', required: false, type: String, description: 'Array of filter objects as a JSON string', example: '[{\"field\":\"name\",\"operator\":\"=\",\"value\":\"IN\"}]'})@IsOptional()@Transform( => )@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.dto.ts:119\n                        \n                    \n\n            \n                \n                    Filters to apply to the query.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Record limit', minimum: 1, maximum: 500, default: 10})@IsOptional()@IsNumberStringOrNumber()@ToNumber()@Min(10)@Max(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.dto.ts:97\n                        \n                    \n\n            \n                \n                    The number of records per page.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Page number', minimum: 1, default: 1})@IsOptional()@IsNumberStringOrNumber()@ToNumber()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.dto.ts:77\n                        \n                    \n\n            \n                \n                    The page number for pagination.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        pagination\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PaginationType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Pagination must all (Page and has_next_page), infinity (only has_next_page), paginate(only page)', enum: PaginationType, default: undefined})@IsEnum(PaginationType)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.dto.ts:59\n                        \n                    \n\n            \n                \n                    The type of pagination to apply.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        sort\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SortByDto[] | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({name: 'sort', required: false, type: String, description: 'Array of sort objects as a JSON string', example: '[{\"field\":\"name\",\"direction\":\"ASC\"}]'})@IsOptional()@Transform( => )@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.dto.ts:141\n                        \n                    \n\n            \n                \n                    Sorting options for the query.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nimport { Type, Transform, plainToInstance } from 'class-transformer';\nimport {\n    IsOptional,\n    Min,\n    Max,\n    IsNotEmpty,\n    IsString,\n    ValidateNested,\n    Matches,\n    IsEnum,\n    // Validate,\n    // IsIn,\n} from 'class-validator';\n\n// import { IsValidField } from '@core/validators/field.validator'; // Import the custom validator\nimport { IsNumberStringOrNumber } from '@decorators/number.string.validator';\nimport { ToNumber } from '@decorators/transforms.decorator';\n// import { IsNumberStringOrNumber } from '@decorators/number.string.validator';\n// import { ToNumber } from '@decorators/transforms.decorator';\n// import { Country } from '@modules/countries/dto/country';\n\n/**\n * Enum representing different pagination types.\n *\n * @export\n * @enum {string}\n */\n\nexport enum PaginationType {\n    NONE = 'no',\n    INFINITY = 'infinity',\n    PAGINATE = 'paginate',\n    ALL = 'all',\n}\n\n/**\n * DTO class for pagination query parameters.\n *\n * @export\n */\nexport class PaginationQueryDto {\n    /**\n     * The type of pagination to apply.\n     *\n     * @type {PaginationType}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        description:\n            'Pagination must all (Page and has_next_page), infinity (only has_next_page), paginate(only page)',\n        enum: PaginationType,\n        default: PaginationType.ALL,\n    })\n    @IsEnum(PaginationType)\n    @IsOptional()\n    readonly pagination: PaginationType;\n\n    /**\n     * The page number for pagination.\n     *\n     * @type {number}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        description: 'Page number',\n        minimum: 1,\n        default: 1,\n    })\n    @IsOptional()\n    @IsNumberStringOrNumber()\n    @ToNumber()\n    @Min(1)\n    readonly page?: number;\n\n    /**\n     * The number of records per page.\n     *\n     * @type {number}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        description: 'Record limit',\n        minimum: 1,\n        maximum: 500,\n        default: 10,\n    })\n    @IsOptional()\n    @IsNumberStringOrNumber()\n    @ToNumber()\n    @Min(10)\n    @Max(500)\n    readonly limit?: number = 10;\n\n    /**\n     * Filters to apply to the query.\n     *\n     * @type {FilterQueryDto[] | null}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        name: 'filters',\n        required: false,\n        type: String,\n        description: 'Array of filter objects as a JSON string',\n        example: '[{\"field\":\"name\",\"operator\":\"=\",\"value\":\"IN\"}]',\n    })\n    @IsOptional()\n    @Transform(({ value }) => {\n        return value ? plainToInstance(FilterQueryDto, JSON.parse(value)) : undefined;\n    })\n    @ValidateNested({ each: true })\n    @Type(() => FilterQueryDto)\n    filters?: FilterQueryDto[] | null;\n\n    /**\n     * Sorting options for the query.\n     *\n     * @type {SortByDto[] | null}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        name: 'sort',\n        required: false,\n        type: String,\n        description: 'Array of sort objects as a JSON string',\n        example: '[{\"field\":\"name\",\"direction\":\"ASC\"}]',\n    })\n    @IsOptional()\n    @Transform(({ value }) => {\n        return value ? plainToInstance(SortByDto, JSON.parse(value)) : undefined;\n    })\n    @ValidateNested({ each: true })\n    @Type(() => SortByDto)\n    sort?: SortByDto[] | null;\n}\n\n/**\n * DTO class for filter query parameters.\n *\n * @export\n */\nexport class FilterQueryDto {\n    /**\n     * The field to filter on.\n     *\n     * @type {string}\n     * @memberof FilterQueryDto\n     */\n\n    @ApiProperty({ example: 'iso', required: true })\n    @IsNotEmpty()\n    @IsString()\n    field: string;\n\n    /**\n     * The operator to use for filtering.\n     *\n     * @type {string}\n     * @memberof FilterQueryDto\n     */\n\n    @ApiProperty({ example: '=' })\n    @IsNotEmpty()\n    @IsString()\n    operator: string;\n\n    /**\n     * The value to filter by.\n     *\n     * @type {string}\n     * @memberof FilterQueryDto\n     */\n\n    @ApiProperty({ example: 'IN' })\n    @IsNotEmpty()\n    @IsString()\n    value: string;\n}\n\n/**\n * DTO class for sorting options.\n *\n * @export\n */\nexport class SortByDto {\n    // @ApiProperty({ example: 'name' })\n    // @IsString()\n    // @Validate(IsValidField, [Country], {\n    //     message: 'Field must be a valid key of Country',\n    // })\n    // field: keyof Country;\n    /**\n     * The field to sort by.\n     *\n     * @type {string}\n     * @memberof SortByDto\n     */\n\n    @ApiProperty()\n    @IsString()\n    // @IsIn(abc(x : keyof TExposedAccountInfo), {\n    //     message: 'Field must be one of \"name\", \"age\", or \"status\"',\n    // })\n    // @Validate(IsValidField, [{ entity: () => T }], {\n    //     message: 'Field must be a valid key of the specified entity',\n    // })\n    field: string;\n\n    /**\n     * The direction of the sort (ascending or descending).\n     *\n     * @type {string}\n     * @memberof SortByDto\n     */\n\n    @ApiProperty({ example: 'ASC' })\n    @IsString()\n    @Matches(/^(ASC|DESC|asc|desc)$/, {\n        message: 'operator must be one of ASC, DESC, asc, or desc',\n    })\n    direction: string;\n}\n\n// export class PaginatedResultDto {\n//     @ApiProperty()\n//     data: T[];\n\n//     @ApiProperty()\n//     total: number;\n\n//     @ApiProperty()\n//     page: number;\n\n//     @ApiProperty()\n//     limit: number;\n// }\n\n//DX\n// import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\n// import { Type, Transform, plainToInstance } from 'class-transformer';\n// import {\n//     IsOptional,\n//     Min,\n//     Max,\n//     IsNotEmpty,\n//     IsString,\n//     IsArray,\n//     ValidateNested,\n//     Validate,\n//     Matches,\n// } from 'class-validator';\n\n// import { IsNumberStringOrNumber } from '@decorators/number.string.validator';\n// import { ToNumber } from '@decorators/transforms.decorator';\n// import { SortBy } from '@validators/filter.validator';\n\n// export class FilterQueryDto {\n//     @ApiProperty({ example: 'name', required: true })\n//     @IsNotEmpty()\n//     @IsString()\n//     field: string;\n\n//     @ApiProperty({ example: 'LIKE' })\n//     @IsNotEmpty()\n//     @IsString()\n//     operator: string;\n\n//     @ApiProperty({ example: '%John%' })\n//     @IsNotEmpty()\n//     @IsString()\n//     value: string;\n// }\n\n// export class SortByDto {\n//     @ApiProperty({ example: 'name' })\n//     @IsString()\n//     field: string;\n\n//     @ApiProperty({ example: 'ASC' })\n//     @IsString()\n//     @Matches(/^(ASC|DESC|asc|desc)$/, {\n//         message: 'operator must be one of ASC, DESC, asc, or desc',\n//     })\n//     direction: string;\n// }\n\n// export class PaginationQueryDto {\n//     @ApiPropertyOptional({\n//         description: 'Page number',\n//         minimum: 1,\n//         default: 1,\n//     })\n//     @IsOptional()\n//     @IsNumberStringOrNumber()\n//     @ToNumber()\n//     @Min(1)\n//     // @Transform(({ value }) => {\n//     //     const strippedValue = String(value).replace(/['\"]+/g, '');\n//     //     const numberValue = Number(strippedValue);\n//     //     return isNaN(numberValue) ? 'undefined' : numberValue;\n//     // })\n//     readonly page?: number;\n\n//     @ApiPropertyOptional({\n//         description: 'Record limit',\n//         minimum: 1,\n//         maximum: 500,\n//         default: 10,\n//     })\n//     @IsOptional()\n//     @IsNumberStringOrNumber()\n//     @ToNumber()\n//     @Min(10)\n//     @Max(500)\n//     readonly limit?: number = 10;\n\n//     // @IsOptional()\n//     // @IsArray()\n//     // @ValidateNested({ each: true })\n//     // @Type(() => FilterQueryDto)\n//     // filters?: FilterQueryDto[];\n//     // // filters?: any;\n//     @ApiPropertyOptional({\n//         name: 'filters',\n//         required: false,\n//         type: String,\n//         description: 'Array of filter objects as a JSON string',\n//         example:\n//             '[{\"field\":\"name\",\"operator\":\"LIKE\",\"value\":\"John\"},{\"field\":\"age\",\"operator\":\">\",\"value\":\"30\"}]',\n//     })\n//     @IsOptional()\n//     @Transform(({ value }) => {\n//         return value ? plainToInstance(FilterQueryDto, JSON.parse(value)) : undefined;\n//     })\n//     @ValidateNested({ each: true })\n//     @Type(() => FilterQueryDto)\n//     filters?: FilterQueryDto[] | null;\n\n//     // @ApiPropertyOptional({\n//     //     description: ' Name or City:  ASC or DESC',\n//     //     example: 'name ASC',\n//     // })\n//     // @IsOptional()\n//     // @IsString()\n//     // @Validate(SortBy)\n//     // readonly sort?: string;\n//     // @ApiPropertyOptional({ type: [SortByDto], isArray: true })\n//     // @IsOptional()\n//     // @Transform(({ value }) => {\n//     //     return value ? plainToInstance(SortUserDto, JSON.parse(value)) : undefined;\n//     // })\n//     // @ValidateNested({ each: true })\n//     // @Type(() => SortUserDto)\n//     // sort?: SortUserDto[] | null;\n\n//     @ApiPropertyOptional({\n//         name: 'sort',\n//         required: false,\n//         type: String,\n//         description: 'Array of sort objects as a JSON string',\n//         example: '[{\"field\":\"name\",\"direction\":\"ASC\"},{\"field\":\"age\",\"direction\":\"DESC\"}]',\n//     })\n//     @IsOptional()\n//     @Transform(({ value }) => {\n//         return value ? plainToInstance(SortByDto, JSON.parse(value)) : undefined;\n//     })\n//     @ValidateNested({ each: true })\n//     @Type(() => SortByDto)\n//     sort?: SortByDto[] | null;\n// }\n\n// export class PaginatedResultDto {\n//     @ApiProperty()\n//     data: T[];\n\n//     @ApiProperty()\n//     total: number;\n\n//     @ApiProperty()\n//     page: number;\n\n//     @ApiProperty()\n//     limit: number;\n// }\n\n// // import { ApiProperty, ApiExtraModels } from '@nestjs/swagger';\n\n// // import { Type } from 'class-transformer';\n// // import { IsOptional, IsString, IsArray, ValidateNested, IsNumber } from 'class-validator';\n\n// // // export class FilterQueryDto {\n// // //     @ApiProperty({ example: 'name' })\n// // //     field: string;\n\n// // //     @ApiProperty({ example: 'LIKE' })\n// // //     operator: string;\n\n// // //     @ApiProperty({ example: '%John%' })\n// // //     value: string;\n// // // }\n// // export class FilterQueryDto {\n// //     @ApiProperty({ example: 'country_name' })\n// //     @IsString()\n// //     field: string;\n\n// //     @ApiProperty({ example: 'LIKE' })\n// //     @IsString()\n// //     operator: string;\n\n// //     @ApiProperty({ example: '%United%' })\n// //     @IsString()\n// //     value: string;\n// // }\n// // @ApiExtraModels(FilterQueryDto)\n// // export class PaginationQueryDto {\n// //     @ApiProperty({ example: 1, required: false })\n// //     @IsOptional()\n// //     @IsNumber()\n// //     @Type(() => Number)\n// //     page?: number = 1;\n\n// //     @ApiProperty({ example: 10, required: false })\n// //     @IsOptional()\n// //     @IsNumber()\n// //     @Type(() => Number)\n// //     limit?: number = 10;\n\n// //     // @ApiProperty({\n// //     //     type: [FilterQueryDto],\n// //     //     required: false,\n// //     //     isArray: true,\n// //     // })\n// //     // @Type(() => FilterQueryDto)\n// //     // filters?: FilterQueryDto[];\n// //     @ApiProperty({\n// //         type: FilterQueryDto,\n// //         required: false,\n// //         isArray: true,\n// //     })\n// //     // @IsOptional()\n// //     @IsArray()\n// //     @ValidateNested({ each: true })\n// //     @Type(() => FilterQueryDto)\n// //     filters?: FilterQueryDto[];\n\n// //     // @ApiProperty({\n// //     //     type: [Object],\n// //     //     // items: {\n// //     //     //     type: 'object',\n// //     //     //     items: {\n// //     //     //         type: 'object',\n// //     //     //     },\n// //     //     // },\n// //     // })\n// //     // coords: FilterQueryDto[];\n\n// //     // @ApiProperty({ type: String, required: false })\n// //     // @IsOptional()\n// //     // @IsArray()\n// //     // @ValidateNested({ each: true })\n// //     // @Type(() => FilterQueryDto)\n// //     // filters?: FilterQueryDto[];\n\n// //     @ApiProperty({ example: 'name ASC1', required: false })\n// //     sort?: string;\n// // }\n\n// // // export class PaginationQueryDto {\n// // //     @ApiProperty({ example: 1, required: false })\n// // //     page?: number = 1;\n\n// // //     @ApiProperty({ example: 10, required: false })\n// // //     limit?: number = 10;\n\n// // //     // @ApiProperty({ type: [FilterQueryDto], required: false, isArray: true })\n// // //     // filters?: FilterQueryDto[];\n\n// // //     // @ApiProperty({ type: String, required: false, isArray: true })\n// // //     // filters?: FilterQueryDto[];\n\n// // //     // @ApiProperty({ type: [FilterQueryDto], required: false, isArray: true })\n// // //     // @Type(() => FilterQueryDto)\n// // //     // filters?: FilterQueryDto[];\n\n// // //     @ApiProperty({ type: [FilterQueryDto], required: false })\n// // //     @IsOptional()\n// // //     @IsArray()\n// // //     @ValidateNested({ each: true })\n// // //     @Type(() => FilterQueryDto)\n// // //     filters?: FilterQueryDto[];\n\n// // //     @ApiProperty({ example: 'name ASC1', required: false })\n// // //     sort?: string;\n// // // }\n\n// // export class PaginatedResultDto {\n// //     @ApiProperty()\n// //     data: T[];\n\n// //     @ApiProperty()\n// //     total: number;\n\n// //     @ApiProperty()\n// //     page: number;\n\n// //     @ApiProperty()\n// //     limit: number;\n// // }\n\n// // export class abc {\n// //     @ApiProperty()\n// //     page: number;\n\n// //     @ApiProperty()\n// //     limit: number;\n// // }\n\n// // import { applyDecorators } from '@nestjs/common';\n// // import { ApiProperty, ApiExtraModels, ApiQuery, getSchemaPath } from '@nestjs/swagger';\n\n// // /**\n// //  * Combines Swagger Decorators to create a description for `filters[name]=something`\n// //  *  - has support for swagger\n// //  *  - automatic transformation with nestjs\n// //  */\n// // // // eslint-disable-next-line @typescript-eslint/ban-types,@typescript-eslint/explicit-module-boundary-types\n// // // export function ApiFilterQuery(fieldName: string, filterDto: Function) {\n// // //     return applyDecorators(\n// // //         ApiExtraModels(filterDto),\n// // //         ApiQuery({\n// // //             required: false,\n// // //             name: fieldName,\n// // //             style: 'deepObject',\n// // //             explode: true,\n// // //             type: 'object',\n// // //             schema: {\n// // //                 $ref: getSchemaPath(filterDto),\n// // //             },\n// // //         })\n// // //     );\n// // // }\n// // // eslint-disable-next-line @typescript-eslint/ban-types,@typescript-eslint/explicit-module-boundary-types\n// // export function ApiFilterQuery(fieldName: string, filterDto: Function, index: number) {\n// //     return applyDecorators(\n// //         ApiExtraModels(filterDto),\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}]`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //             schema: {\n// //                 $ref: getSchemaPath(filterDto),\n// //             },\n// //         })\n// //     );\n// // }\n\n// // export function ApiFilterQuery(fieldName: string, index: number) {\n// //     return applyDecorators(\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}].field`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //         }),\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}].operator`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //         }),\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}].value`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //         })\n// //     );\n// // }\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationResponseDto.html":{"url":"classes/PaginationResponseDto.html","title":"class - PaginationResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/dto/pagination-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO class for paginated responses.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                    Optional\n                                has_next_page\n                            \n                            \n                                    Optional\n                                meta\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T[]\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination-response.dto.ts:21\n                        \n                    \n\n            \n                \n                    The array of paginated data.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        has_next_page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination-response.dto.ts:39\n                        \n                    \n\n            \n                \n                    Indicates if there is a next page available.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        meta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PaginationMetaDto\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination-response.dto.ts:30\n                        \n                    \n\n            \n                \n                    Metadata about the pagination.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from '@nestjs/common';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nimport { PaginationMetaDto } from '@utils/dto/pagination.meta.dto';\n\n/**\n * DTO class for paginated responses.\n *\n * @export\n * @template T - Type of the data contained in the response.\n */\n\nexport class PaginationResponseDto {\n    /**\n     * The array of paginated data.\n     *\n     * @type {T[]}\n     * @memberof PaginationResponseDto\n     */\n\n    data: T[];\n\n    /**\n     * Metadata about the pagination.\n     *\n     * @type {PaginationMetaDto}\n     * @memberof PaginationResponseDto\n     */\n\n    meta?: PaginationMetaDto;\n\n    /**\n     * Indicates if there is a next page available.\n     *\n     * @type {boolean}\n     * @memberof PaginationResponseDto\n     */\n\n    has_next_page?: boolean;\n}\n\n/**\n * Creates a pagination response DTO class with specified data type.\n *\n * @export\n * @template T - Type of the data contained in the response.\n * @param {Type} classReference - The class reference for the data type.\n * @returns {Type} The class type of the pagination response DTO.\n */\n\nexport function PaginationResponse(classReference: Type) {\n    abstract class Pagination {\n        /**\n         * The array of paginated data.\n         *\n         * @type {T[]}\n         * @memberof Pagination\n         */\n\n        @ApiProperty({ type: [classReference] })\n        readonly data!: T[];\n\n        /**\n         * Metadata about the pagination.\n         *\n         * @type {PaginationMetaDto}\n         * @memberof Pagination\n         */\n\n        @ApiPropertyOptional({\n            type: PaginationMetaDto,\n            example: {\n                totalItems: 77,\n                currentPage: 1,\n                pageSize: 10,\n                totalPages: 8,\n                startPage: 1,\n                endPage: 8,\n                startIndex: 0,\n                endIndex: 76,\n                pages: [1, 2, 3, 4, 5, 6, 7],\n            },\n            description:\n                'When you pass `all` or `pagination` in the pagination query field, you will receive the meta field in the response.',\n        })\n        meta?: PaginationMetaDto;\n\n        /**\n         * Indicates if there is a next page available.\n         *\n         * @type {boolean}\n         * @memberof Pagination\n         */\n\n        @ApiPropertyOptional({\n            type: Boolean,\n            example: true,\n            description:\n                'When you pass `all` or `infinity` in the pagination query field, you will receive the has_next_page field in the response.',\n        })\n        readonly has_next_page?: boolean;\n    }\n\n    Object.defineProperty(Pagination, 'name', {\n        writable: false,\n        value: `Pagination${classReference.name}ResponseDto`,\n    });\n\n    return Pagination;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaginationService.html":{"url":"injectables/PaginationService.html","title":"injectable - PaginationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaginationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/helper/services/pagination.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The PaginationService provides functionality to handle pagination for database queries. It utilizes Prisma's query capabilities\nto perform paginated data retrieval based on the provided query parameters.\n\nThe paginate method constructs SQL queries to fetch paginated data and its corresponding metadata.\nThe method supports different pagination strategies such as 'all' and 'infinity'.\n\nExample :```typescript\nconst paginationQuery = new PaginationQueryDto({\n    page: 1,\n    limit: 10,\n    pagination: 'paginate',\n});const result = await paginationService.paginate(\n    'SELECT * FROM my_table',\n    'SELECT COUNT(*) as count FROM my_table',\n    paginationQuery\n);\nExample :\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                paginate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/common/helper/services/pagination.service.ts:36\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        paginate\n                        \n                    \n                \n            \n            \n                \n                        \n                    paginate(selectQuery: string, countQuery: string, paginationQuery: PaginationQueryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/helper/services/pagination.service.ts:39\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                selectQuery\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                countQuery\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                paginationQuery\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\nimport { PrismaService } from '@services/prisma.service';\nimport { PaginationResponseDto } from '@utils/dto/pagination-response.dto';\nimport { PaginationQueryDto } from '@utils/dto/pagination.dto';\nimport { PaginationMetaDto } from '@utils/dto/pagination.meta.dto';\n\n/**\n * @service PaginationService\n *\n * @description\n * The `PaginationService` provides functionality to handle pagination for database queries. It utilizes Prisma's query capabilities\n * to perform paginated data retrieval based on the provided query parameters.\n *\n * @remarks\n * - The `paginate` method constructs SQL queries to fetch paginated data and its corresponding metadata.\n * - The method supports different pagination strategies such as 'all' and 'infinity'.\n *\n * @example\n * ```typescript\n * const paginationQuery = new PaginationQueryDto({\n *     page: 1,\n *     limit: 10,\n *     pagination: 'paginate',\n * });\n *\n * const result = await paginationService.paginate(\n *     'SELECT * FROM my_table',\n *     'SELECT COUNT(*) as count FROM my_table',\n *     paginationQuery\n * );\n * ```\n */\n\n@Injectable()\nexport class PaginationService {\n    constructor(private readonly prisma: PrismaService) {}\n\n    async paginate(\n        selectQuery: string,\n        countQuery: string,\n        paginationQuery: PaginationQueryDto\n    ): Promise> {\n        const { page, limit, pagination } = paginationQuery;\n\n        const offset = (page - 1) * limit;\n\n        const dataQuery = `${selectQuery} LIMIT ${limit} OFFSET ${offset}`;\n\n        const metaPage = pagination === 'all' || pagination === 'paginate';\n\n        // const [data, total] = await this.prisma.$transaction([\n        //     this.prisma.$queryRawUnsafe(dataQuery),\n        //     this.prisma.$queryRawUnsafe(countQuery),\n        // ]);\n\n        // console.log('DATTTTTTTTTTTTTTTTTTTTTTTTT', dataQuery);\n\n        const [data, total] = await Promise.all([\n            this.prisma.$queryRawUnsafe(dataQuery),\n            metaPage\n                ? this.prisma.$queryRawUnsafe(countQuery)\n                : [{ count: 0 }],\n        ]);\n\n        // console.log('DATTTTTTTTTTTTTTTTTTTTTTTTT', total, total[0]);\n\n        const meta = metaPage\n            ? new PaginationMetaDto({\n                  paginationQueryDto: paginationQuery,\n                  totalItems: Number(total[0].count),\n              })\n            : undefined;\n\n        const has_next_page =\n            pagination === 'all' || pagination === 'infinity' ? data.length === limit : undefined;\n\n        return {\n            data,\n            meta,\n            has_next_page,\n        };\n    }\n}\n\n// start\n// import { Injectable } from '@nestjs/common';\n\n// import { PrismaService } from '@services/prisma.service';\n// import { PaginationResponseDto } from '@utils/dto/pagination-response.dto';\n// import { PaginationQueryDto } from '@utils/dto/pagination.dto';\n// import { PaginationMetaDto } from '@utils/dto/pagination.meta.dto';\n// import { IFieldConfig } from '@utils/types/pagination-options';\n\n// @Injectable()\n// export class PaginationService {\n//     constructor(private readonly prisma: PrismaService) {}\n\n//     async paginate(\n//         selectFields: string[],\n//         fromQuery: string,\n//         joinTables: string[] = [],\n//         filterQuery: string,\n//         sortByQuery: string,\n//         paginationQuery: PaginationQueryDto\n//     ): Promise> {\n//         const { page, limit, filters, pagination } = paginationQuery;\n\n//         // console.log('Hiii pagination service', page);\n\n//         // console.log('Hiii selectFields', selectFields);\n//         // console.log('Hiii fromQuery', fromQuery);\n//         // console.log('Hiii joinTables', joinTables);\n//         // console.log('Hiii whereClauses', filterQuery);\n\n//         // console.log('Hiii paginationQuery', paginationQuery);\n\n//         // console.log('Hiii paginationQuery---------------------------------', pagination === 'all');\n\n//         const offset = (page - 1) * limit;\n//         const select = selectFields.join(', ');\n\n//         const joinQuery = joinTables.join(' ');\n\n//         // const filterQuery = '';\n//         // if (filters && filters.length > 0) {\n//         //     const filterConditions = filters\n//         //         .map((filter) => {\n//         //             if (filter.operator.toUpperCase() === 'IN') {\n//         //                 const values = filter.value\n//         //                     .split(',')\n//         //                     .map((val) => `'${val.trim()}'`)\n//         //                     .join(', ');\n//         //                 return `${filter.field} IN (${values})`;\n//         //             }\n//         //             return `${filter.field} ${filter.operator} '${filter.value}'`;\n//         //         })\n//         //         .join(' AND ');\n//         //     filterQuery = `WHERE ${filterConditions}`;\n//         // }\n\n//         // console.log('____________________________________', filterQuery);\n\n//         const dataQuery = `SELECT ${select} ${fromQuery} ${joinQuery} ${filterQuery} ${sortByQuery} LIMIT ${limit} OFFSET ${offset}`;\n//         const countQuery = `SELECT count(*) ${fromQuery} ${joinQuery} ${filterQuery}`;\n\n//         // console.log('____________________________________', dataQuery);\n//         // console.log('____________________________________', countQuery);\n\n//         const metaPage = pagination === 'all' || pagination === 'paginate';\n\n//         // const [data, total] = await this.prisma.$transaction([\n//         //     this.prisma.$queryRawUnsafe(dataQuery),\n//         //     this.prisma.$queryRawUnsafe(countQuery),\n//         // ]);\n\n//         const [data, total] = await Promise.all([\n//             this.prisma.$queryRawUnsafe(dataQuery),\n//             metaPage\n//                 ? this.prisma.$queryRawUnsafe(countQuery)\n//                 : [{ count: 0 }],\n//         ]);\n\n//         // console.log('DATTTTTTTTTTTTTTTTTTTTTTTTT', total, total[0]);\n\n//         const meta = metaPage\n//             ? new PaginationMetaDto({\n//                   paginationQueryDto: paginationQuery,\n//                   totalItems: Number(total[0].count),\n//               })\n//             : undefined;\n\n//         const has_next_page =\n//             pagination === 'all' || pagination === 'infinity' ? data.length === limit : undefined;\n\n//         return {\n//             data,\n//             meta,\n//             has_next_page,\n//         };\n\n//         // const dataQuery = `SELECT ${select} ${joinQuery} ${filterQuery} ${sortQuery} LIMIT ${limit} OFFSET ${offset}`;\n\n//         return 'hi' as any;\n//         // const offset = (page - 1) * limit;\n//         // // const select = selectFields.join(', ');\n\n//         // let filterQuery = '';\n//         // if (filters && filters.length > 0) {\n//         //     const filterConditions = filters\n//         //         .map((filter) => {\n//         //             if (filter.operator.toUpperCase() === 'IN') {\n//         //                 const values = filter.value\n//         //                     .split(',')\n//         //                     .map((val) => `'${val.trim()}'`)\n//         //                     .join(', ');\n//         //                 return `${filter.field} IN (${values})`;\n//         //             }\n//         //             return `${filter.field} ${filter.operator} '${filter.value}'`;\n//         //         })\n//         //         .join(' AND ');\n//         //     filterQuery = `WHERE ${filterConditions}`;\n//         // }\n\n//         // let sortQuery = '';\n//         // // if (sort) {\n//         // //     const sortConditions = sort\n//         // //         .split(',')\n//         // //         .map((s) => s.trim())\n//         // //         .join(', ');\n//         // //     sortQuery = `ORDER BY ${sortConditions}`;\n//         // // }\n\n//         // const joinQuery = joinTables.join(' ');\n\n//         // const dataQuery = `${baseQuery} ${joinQuery} ${filterQuery} ${sortQuery} LIMIT ${limit} OFFSET ${offset}`;\n//         // const countFilterQuery = filterQuery ? filterQuery : '';\n//         // const finalCountQuery = `${countQuery} ${joinQuery} ${countFilterQuery}`;\n//         // console.log('DATA QUERY', dataQuery);\n//         // console.log('finalCountQuery QUERY', finalCountQuery);\n//         // console.log(offset, select, filters, sort, filterQuery, sortQuery, joinQuery);\n//         return 'x' as any;\n//         // const [data, total] = await this.prisma.$transaction([\n//         //     this.prisma.$queryRawUnsafe(dataQuery),\n//         //     this.prisma.$queryRawUnsafe(finalCountQuery),\n//         // ]);\n//         // return {\n//         //     data,\n//         //     total: total[0].count,\n//         //     page,\n//         //     limit,\n//         // };\n//     }\n// }\n// end\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PrismaClientExceptionFilter.html":{"url":"classes/PrismaClientExceptionFilter.html","title":"class - PrismaClientExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PrismaClientExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/prisma-exception.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                Exception filter for handling Prisma Client known request errors.\nThis filter catches PrismaClientKnownRequestError exceptions and formats the\nresponse based on the specific Prisma error codes.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: Prisma.PrismaClientKnownRequestError, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/filters/prisma-exception.filter.ts:30\n                        \n                    \n\n\n            \n                \n                        Handles the Prisma Client exception and formats the error response\nbased on the error code.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                        Prisma.PrismaClientKnownRequestError\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The Prisma Client error to handle.\n\n                                            \n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The arguments host for accessing request and response objects.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ArgumentsHost, Catch, HttpStatus } from '@nestjs/common';\nimport { BaseExceptionFilter } from '@nestjs/core';\n\nimport { Prisma } from '@prisma/client';\nimport { Response } from 'express';\n\n/**\n * Exception filter for handling Prisma Client known request errors.\n *\n * This filter catches `PrismaClientKnownRequestError` exceptions and formats the\n * response based on the specific Prisma error codes.\n *\n * @export\n * @class PrismaClientExceptionFilter\n * @extends {BaseExceptionFilter}\n */\n\n@Catch(Prisma.PrismaClientKnownRequestError)\nexport class PrismaClientExceptionFilter extends BaseExceptionFilter {\n    /**\n     * Handles the Prisma Client exception and formats the error response\n     * based on the error code.\n     *\n     * @param {Prisma.PrismaClientKnownRequestError} exception The Prisma Client error to handle.\n     * @param {ArgumentsHost} host The arguments host for accessing request and response objects.\n     *\n     * @memberof PrismaClientExceptionFilter\n     */\n\n    catch(exception: Prisma.PrismaClientKnownRequestError, host: ArgumentsHost) {\n        console.log('PRISMA CLIENT EXCEPTION', exception.message);\n        const ctx = host.switchToHttp();\n        const response = ctx.getResponse();\n        const message = exception.message.replace(/\\n/g, '');\n        switch (exception.code) {\n            case 'P2002': {\n                // Unique constraint failed on the {constraint}\n                const status = HttpStatus.CONFLICT;\n                response.status(status).json({\n                    statusCode: status,\n                    message: message,\n                });\n                break;\n            }\n            case 'P2000': {\n                // The provided value for the column is too long for the column’s type. Column: {column_name}\n                const status = HttpStatus.BAD_REQUEST;\n                response.status(status).json({\n                    statusCode: status,\n                    message: message,\n                });\n                break;\n            }\n            case 'P2025': {\n                // An operation failed because it depends on one or more records that were required but not found. {cause}\n                const status = HttpStatus.NOT_FOUND;\n                response.status(status).json({\n                    statusCode: status,\n                    message: message,\n                });\n                break;\n            }\n            case 'P2010': {\n                // An operation failed because it depends on one or more records that were required but not found. {cause}\n                const status = HttpStatus.BAD_REQUEST;\n                response.status(status).json({\n                    statusCode: status,\n                    message: message,\n                });\n                break;\n            }\n            default:\n                // default 500 error code\n                super.catch(exception, host);\n                break;\n        }\n    }\n\n    //   catch(exception: PrismaClientKnownRequestError, host: ArgumentsHost) {\n    //     const ctx = host.switchToHttp();\n    //     const response = ctx.getResponse();\n    //     const status = HttpStatus.BAD_REQUEST;\n\n    //     const errorResponse = {\n    //       statusCode: status,\n    //       timestamp: new Date().toISOString(),\n    //       message: exception.message,\n    //     };\n\n    //     response.status(status).json(errorResponse);\n    //   }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/helper/services/prisma.service.ts\n        \n\n\n            \n                Description\n            \n            \n                PrismaService\nPrismaService is a service that extends the PrismaClient class to manage database operations with Prisma ORM. It handles\ninitialization and teardown of database connections, executes raw queries with parameter escaping, supports transactions,\nand provides a health check for the database connection.\n\n            \n\n            \n                Extends\n            \n            \n                        PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                executeRawQuery\n                            \n                            \n                                    Async\n                                executeTransaction\n                            \n                            \n                                    Async\n                                isHealthy\n                            \n                            \n                                    Async\n                                onModuleDestroy\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/common/helper/services/prisma.service.ts:28\n                            \n                        \n\n                \n                    \n                            Creates an instance of PrismaService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe configuration service for retrieving database connection details.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        executeRawQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    executeRawQuery(queryObj: any, data: any, fields: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/helper/services/prisma.service.ts:79\n                        \n                    \n\n\n            \n                \n                        Executes a raw query with optional data and field sanitization.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                queryObj\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    null\n                                            \n\n                                            \n                                                    \nThe query object with a syntax method to generate the query string.\n\n\n                                            \n                                        \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    null\n                                            \n\n                                            \n                                                    \nOptional data to be used in the query.\n\n\n                                            \n                                        \n                                        \n                                                fields\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    []\n                                            \n\n                                            \n                                                    \nOptional fields to be sanitized in the data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe result of the query.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        executeTransaction\n                        \n                    \n                \n            \n            \n                \n                        \n                    executeTransaction(actions: (prisma: Prisma.TransactionClient) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/helper/services/prisma.service.ts:129\n                        \n                    \n\n\n            \n                \n                        Executes a transaction with Prisma.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                actions\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nA function containing the transactional operations.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe result of the transaction.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        isHealthy\n                        \n                    \n                \n            \n            \n                \n                        \n                    isHealthy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/helper/services/prisma.service.ts:141\n                        \n                    \n\n\n            \n                \n                        Checks the health of the Prisma connection by executing a simple query.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe result of the health check.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/helper/services/prisma.service.ts:61\n                        \n                    \n\n\n            \n                \n                        Called when the module is destroyed. Disconnects from the database.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/helper/services/prisma.service.ts:51\n                        \n                    \n\n\n            \n                \n                        Called when the module is initialized. Connects to the database.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit, OnModuleDestroy } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { HealthIndicatorResult } from '@nestjs/terminus';\n\nimport { Prisma, PrismaClient } from '@prisma/client';\nimport * as _ from 'lodash';\n\nimport { AllConfigType } from '@config/type/config.type';\n\n// import { ConfigService } from '../services/config.service';\n\n/**\n * PrismaService\n *\n * @description\n * `PrismaService` is a service that extends the PrismaClient class to manage database operations with Prisma ORM. It handles\n * initialization and teardown of database connections, executes raw queries with parameter escaping, supports transactions,\n * and provides a health check for the database connection.\n *\n * @export\n * @class PrismaService\n * @extends PrismaClient\n * @implements {OnModuleInit}\n * @implements {OnModuleDestroy}\n */\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit, OnModuleDestroy {\n    /**\n     * Creates an instance of PrismaService.\n     *\n     * @param {ConfigService} configService - The configuration service for retrieving database connection details.\n     */\n\n    constructor(private readonly configService: ConfigService) {\n        super({\n            datasources: {\n                db: {\n                    url: configService.get('database.url', { infer: true }), // configService.prismaConfig,\n                },\n            },\n        });\n    }\n\n    /**\n     * Called when the module is initialized. Connects to the database.\n     *\n     * @returns {Promise}\n     */\n\n    async onModuleInit(): Promise {\n        await this.$connect();\n    }\n\n    /**\n     * Called when the module is destroyed. Disconnects from the database.\n     *\n     * @returns {Promise}\n     */\n\n    async onModuleDestroy(): Promise {\n        await this.$disconnect();\n    }\n\n    // async executeRawQuery(query: string, params?: any[]): Promise {\n    //     return this.$queryRawUnsafe(query, ...params);\n    // }\n\n    /**\n     * Executes a raw query with optional data and field sanitization.\n     *\n     * @param {any} queryObj - The query object with a `syntax` method to generate the query string.\n     * @param {any} [data=null] - Optional data to be used in the query.\n     * @param {string[]} [fields=[]] - Optional fields to be sanitized in the data.\n     *\n     * @returns {Promise} - The result of the query.\n     */\n\n    async executeRawQuery(\n        queryObj: any = null,\n        data: any = null,\n        fields: string[] = []\n    ): Promise {\n        const newObj = Object.assign({}, data);\n\n        if (typeof data == 'object' && data instanceof Object && !(data instanceof Array)) {\n            for (const [key, value] of Object.entries(newObj)) {\n                const found = fields.includes(key);\n                if (found) {\n                    const escValue = value as any;\n                    // newObj[key] = escValue.replace(/'/g, \"\\\\'\");\n                    newObj[key] = escValue.replace(/'/g, \"''\");\n                }\n            }\n        }\n\n        let query: string;\n        if (data) {\n            query = queryObj.syntax(\n                typeof data == 'object' && data instanceof Object && !(data instanceof Array)\n                    ? newObj\n                    : data\n            );\n        } else {\n            query = queryObj.syntax();\n        }\n\n        // return this.$queryRawUnsafe(query, ...params);\n        const rows = await this.$queryRawUnsafe(query);\n\n        let result: any;\n        if (queryObj.type == 'SELECT_ONE' || queryObj.type == 'INSERT') {\n            result = !_.isEmpty(rows) ? rows[0] : null; //do not change null to blank object\n        } else {\n            result = rows;\n        }\n\n        return result;\n    }\n\n    /**\n     * Executes a transaction with Prisma.\n     *\n     * @param {(prisma: Prisma.TransactionClient) => Promise} actions - A function containing the transactional operations.\n     *\n     * @returns {Promise} - The result of the transaction.\n     */\n\n    async executeTransaction(\n        actions: (prisma: Prisma.TransactionClient) => Promise\n    ): Promise {\n        return this.$transaction(actions);\n    }\n\n    /**\n     * Checks the health of the Prisma connection by executing a simple query.\n     *\n     * @returns {Promise} - The result of the health check.\n     */\n\n    async isHealthy(): Promise {\n        try {\n            await this.$queryRaw`SELECT 1`;\n            // console.log('RESULTTTTTTTTTTTTTTTTTTTT', x);\n            return Promise.resolve({\n                prisma: {\n                    status: 'up',\n                },\n            });\n        } catch (e) {\n            return Promise.resolve({\n                prisma: {\n                    status: 'down',\n                },\n            });\n            console.log(e);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Query.html":{"url":"classes/Query.html","title":"class - Query","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Query\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/exceptions/query.ts\n        \n\n\n            \n                Description\n            \n            \n                Class representing SQL query builder for error logging.\ninto an Error table. The query escapes single quotes in request and response data\nto prevent SQL injection.\nExample :```typescript\nconst query = new Query();\nconst sqlQuery = query.addHttpQueryError(\n  'UserModule',\n  'GET',\n  '/users',\n  JSON.stringify(requestData),\n  JSON.stringify(responseData)\n).syntax();\nconsole.log(sqlQuery); // Outputs the SQL query stringExample :\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addHttpQueryError\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addHttpQueryError\n                        \n                    \n                \n            \n            \n                \naddHttpQueryError(module: any, method: any, url: any, reqdata: string, resdata: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/exceptions/query.ts:36\n                        \n                    \n\n\n            \n                \n                        Constructs an SQL query to insert HTTP error details into the Error table.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                module\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the module where the error occurred.\n\n\n                                            \n                                        \n                                        \n                                                method\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe HTTP method used in the request.\n\n\n                                            \n                                        \n                                        \n                                                url\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe URL of the request that caused the error.\n\n\n                                            \n                                        \n                                        \n                                                reqdata\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe request data, serialized as a JSON string.\n\n\n                                            \n                                        \n                                        \n                                                resdata\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe response data, serialized as a JSON string.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                An object representing the SQL query with a name, type, and syntax function.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class Query {\n    /**\n     * Constructs an SQL query to insert HTTP error details into the `Error` table.\n     *\n     * @param {string} module - The name of the module where the error occurred.\n     * @param {string} method - The HTTP method used in the request.\n     * @param {string} url - The URL of the request that caused the error.\n     * @param {string} reqdata - The request data, serialized as a JSON string.\n     * @param {string} resdata - The response data, serialized as a JSON string.\n     * @returns {Object} An object representing the SQL query with a `name`, `type`, and `syntax` function.\n     */\n\n    addHttpQueryError(module: any, method: any, url: any, reqdata: string, resdata: string): any {\n        return {\n            name: `addQueryError`,\n            type: `INSERT`,\n            /**\n             * Generates the SQL query string for inserting the error details.\n             *\n             * @returns {string} The SQL query string.\n             */\n\n            syntax: (): string => {\n                //data: any[]\n                try {\n                    let reqescValue = reqdata;\n                    let resescValue = resdata;\n                    reqescValue = reqescValue.replace(/'/g, \"\\\\'\");\n                    resescValue = resescValue.replace(/'/g, \"\\\\'\");\n                    const sql = `INSERT INTO Error (Module,Method,Url,Req,Response) VALUES\n                ('${module}','${method}','${url}','${reqescValue}','${resescValue}');`;\n                    return sql;\n                } catch (error) {\n                    return `Select ${module} ,${method},${url},${reqdata},${resdata}`;\n                }\n            },\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Query-1.html":{"url":"classes/Query-1.html","title":"class - Query-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Query\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/query.ts\n        \n\n\n            \n                Description\n            \n            \n                A utility class for generating SQL queries related to error logging.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addQueryError\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addQueryError\n                        \n                    \n                \n            \n            \n                \naddQueryError(module: any, method: any, url: any, reqdata: string, resdata: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/filters/query.ts:24\n                        \n                    \n\n\n            \n                \n                        Generates an SQL query for logging query errors.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                module\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The module where the error occurred.\n\n                                            \n                                        \n                                        \n                                                method\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The method that caused the error.\n\n                                            \n                                        \n                                        \n                                                url\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The URL where the error occurred.\n\n                                            \n                                        \n                                        \n                                                reqdata\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The request data associated with the error.\n\n                                            \n                                        \n                                        \n                                                resdata\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The response data associated with the error.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { name: string; type: string; syntax: () => string; }\n\n                        \n                            \n                                An object containing the SQL query details.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class Query {\n    /**\n     * Generates an SQL query for logging query errors.\n     *\n     * @param {any} module The module where the error occurred.\n     * @param {any} method The method that caused the error.\n     * @param {any} url The URL where the error occurred.\n     * @param {string} reqdata The request data associated with the error.\n     * @param {string} resdata The response data associated with the error.\n     * @returns {{ name: string, type: string, syntax: () => string }} An object containing the SQL query details.\n     *\n     * @memberof Query\n     */\n\n    addQueryError(module: any, method: any, url: any, reqdata: string, resdata: string) {\n        return {\n            name: `addQueryError`,\n            type: `INSERT`,\n            syntax: () => {\n                // data: any[]\n                try {\n                    let reqescValue = reqdata;\n                    let resescValue = resdata;\n                    reqescValue = reqescValue.replace(/'/g, \"\\\\'\");\n                    resescValue = resescValue.replace(/'/g, \"\\\\'\");\n                    const sql = `INSERT INTO Error (Module,Method,Url,Req,Response) VALUES\n                ('${module}','${method}','${url}','${reqescValue}','${resescValue}');`;\n                    return sql;\n                } catch (error) {\n                    return `Select ${module} ,${method},${url},${reqdata},${resdata}`;\n                }\n            },\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Query-2.html":{"url":"classes/Query-2.html","title":"class - Query-2","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Query\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/countries/query.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                findById\n                            \n                            \n                                findByName\n                            \n                            \n                                formatValue\n                            \n                            \n                                insert\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(utilsService: UtilsService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/countries/query.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        utilsService\n                                                  \n                                                        \n                                                                        UtilsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/countries/query.ts:148\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to delete a Country by its ID.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, and syntax properties.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findById\n                        \n                    \n                \n            \n            \n                \nfindById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/countries/query.ts:115\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to find a Country by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The return select query string .\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByName\n                        \n                    \n                \n            \n            \n                \nfindByName()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/countries/query.ts:13\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to find a Country by its name.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, and syntax properties.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        formatValue\n                        \n                    \n                \n            \n            \n                \nformatValue(value: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/countries/query.ts:159\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        insert\n                        \n                    \n                \n            \n            \n                \ninsert()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/countries/query.ts:31\n                        \n                    \n\n\n            \n                \n                        Generates a SQL insert query to insert new Country in database.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, and syntax properties.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/countries/query.ts:76\n                        \n                    \n\n\n            \n                \n                        Generates a SQL update query to update country .\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, and syntax properties.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import _ from 'lodash';\n\nimport { UtilsService } from '@app/common/helper/services/util.service';\n\nexport class Query {\n    constructor(private readonly utilsService: UtilsService) {}\n\n    /**\n     * Generates a SQL query to find a Country by its name.\n     * @param {string} [name] - using name of country finde data from database.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    findByName(): object {\n        return {\n            name: `findByName`,\n            type: `SELECT_ONE`,\n            syntax: (where: any) => {\n                const allowedKeys = ['id_country', 'name', 'iso3'];\n                const name = _.get(where, 'name');\n\n                return `SELECT ${allowedKeys.join()} FROM countries  WHERE status = 1 AND name = '${name}'`;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL insert query to insert new Country in database.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n\n    insert(): object {\n        return {\n            name: `add`,\n            type: `INSERT`,\n            syntax: (where: any) => {\n                const allowedKeys = [\n                    'name',\n                    'iso',\n                    'nice_name',\n                    'iso3',\n                    'num_code',\n                    'dial_code',\n                    'continent',\n                    'capital',\n                    'id_currency',\n                    'id_timezone',\n                ];\n                const conds = _.pick(where, allowedKeys);\n                const keys = _.keys(conds);\n                const values = _.values(conds);\n                const values1 = keys.map((key) => this.formatValue(conds[key])).join(', ');\n                console.log('keys --' + keys);\n                console.log('values --' + values);\n                console.log('Formated --' + values1);\n                // const query = `INSERT INTO countries  (${keys.join()}) VALUES ('${values.join(\"','\")}') RETURNING id_country as insertid,name;`;\n                const query = `INSERT INTO countries  (${keys.join()}) VALUES (${keys.map((key) => this.formatValue(conds[key])).join(', ')}) RETURNING id_country as insertid,name;`;\n                console.log('Query--- ' + query);\n                return query;\n            },\n        };\n    }\n\n    // async update1(id: string, data: any): Promise {\n    //     const keys = Object.keys(data).filter((key) => data[key] !== undefined);\n    //     const setColumnwithValue = keys\n    //         .map((key) => `${key} = ${this.formatValue(data[key])}`)\n    //         .join(', ');\n    //     return `UPDATE countries SET ${setColumnwithValue} WHERE id_country  = ${this.formatValue(id)} AND status = 1 RETURNING id_country as upadetId ;`;\n    // }\n\n    /**\n     * Generates a SQL update query to update country .\n     * @param {string} [id_country] - using id_country of country to update country in database.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    update(): object {\n        return {\n            name: `update`,\n            type: `UPDATE`,\n            syntax: (where: any) => {\n                let sql = `UPDATE countries SET `;\n                const id = _.get(where, 'id_country');\n                _.unset(where, 'id_country');\n                const allowedKeys = [\n                    'name',\n                    'iso',\n                    'nice_name',\n                    'iso3',\n                    'num_code',\n                    'dial_code',\n                    'continent',\n                    'capital',\n                    'id_currency',\n                    'id_timezone',\n                ];\n                where = _.pick(where, allowedKeys);\n\n                const lastKey = Object.keys(where)[Object.keys(where).length - 1];\n                _.mapKeys(where, (value, key) => {\n                    sql += `${key} = '${value}'`;\n                    sql += lastKey == key ? `` : `, `;\n                });\n                sql += ` WHERE status = 1 AND id_country = '${id}' RETURNING id_country as updatedid, name;`;\n                console.log('update q--' + sql);\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to find a Country by its ID.\n     * @returns {string} The return select query string .\n     */\n\n    findById(id: string): string {\n        const allowedKeys = [\n            'c.name',\n            'c.iso',\n            'c.nice_name',\n            'c.iso3',\n            'c.num_code',\n            'c.dial_code',\n            'c.continent',\n            'c.capital',\n            'cr.symbol',\n            'cr.name as currency_name',\n            'tz.value',\n            'tz.offset',\n            'tz.offset_in_minutes',\n            'tz.abbr',\n            'tz.text',\n        ];\n\n        const query = `SELECT ${allowedKeys} FROM countries as c \n        JOIN currencies AS cr ON cr.id_currency=c.id_currency\n        JOIN timezone AS tz ON tz.id_timezone=c.id_timezone\n        WHERE c.status = 1 AND c.id_country='${id}' `;\n        console.log('Query--' + query);\n        return query;\n    }\n\n    /**\n     * Generates a SQL query to delete a Country by its ID.\n     * @param {string} id - The ID of the Country to delete.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n\n    delete(): object {\n        return {\n            name: `delete`,\n            type: `UPDATE`,\n            syntax: (id: string) => {\n                const sql = `UPDATE countries SET status = 127 WHERE status = 1 AND id_country = '${id}' RETURNING id_country as deletedid, name;`;\n                console.log('delete --QQ ' + sql);\n                return sql;\n            },\n        };\n    }\n    formatValue(value: any): string {\n        if (Array.isArray(value)) {\n            const formattedArray = value.map((v) => `${v.replace(/'/g, \"''\")}`).join(', ');\n            return `'{${formattedArray}}'`;\n        } else if (typeof value === 'string') {\n            return `'${value.replace(/'/g, \"''\")}'`;\n        } else if (value === null || value === undefined) {\n            return 'NULL';\n        } else {\n            return `${value}`; // For numbers and other types\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Query-3.html":{"url":"classes/Query-3.html","title":"class - Query-3","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Query\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/currencies/query.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the Query class, which provides methods for generating SQL queries\nrelated to currency data management.\nThe Query class includes methods to generate SQL queries for operations such as\nretrieving, inserting, updating, and deleting currency records from the database.\nIt uses the lodash library for object manipulation and query construction.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                findByCode\n                            \n                            \n                                findById\n                            \n                            \n                                insert\n                            \n                            \n                                pgBaseQuery\n                            \n                            \n                                pgBaseSelectField\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/currencies/query.ts:139\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to delete a currency by its ID.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, and syntax properties.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByCode\n                        \n                    \n                \n            \n            \n                \nfindByCode(id?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/currencies/query.ts:49\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to find a currency by its code.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional ID to exclude from the search if provided.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, and syntax properties.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findById\n                        \n                    \n                \n            \n            \n                \nfindById()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/currencies/query.ts:21\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to find a currency by its ID.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, and syntax properties.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        insert\n                        \n                    \n                \n            \n            \n                \ninsert()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/currencies/query.ts:71\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to insert a new currency.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, and syntax properties.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pgBaseQuery\n                        \n                    \n                \n            \n            \n                \npgBaseQuery()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/currencies/query.ts:172\n                        \n                    \n\n\n            \n                \n                        Provides the base query for selecting currencies.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                The base query string for selecting currencies.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pgBaseSelectField\n                        \n                    \n                \n            \n            \n                \npgBaseSelectField()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/currencies/query.ts:156\n                        \n                    \n\n\n            \n                \n                        Provides the base fields for selecting currencies in pagination queries.\n\n\n                        \n                            Returns :     string[]\n\n                        \n                            \n                                An array of column names to be selected in pagination queries.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/currencies/query.ts:100\n                        \n                    \n\n\n            \n                \n                        Generates a SQL query to update an existing currency.\n\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                The query configuration object with name, type, and syntax properties.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as _ from 'lodash';\n\n/**\n * @fileoverview\n * This file defines the `Query` class, which provides methods for generating SQL queries\n * related to currency data management.\n *\n * @module\n * @description\n * The `Query` class includes methods to generate SQL queries for operations such as\n * retrieving, inserting, updating, and deleting currency records from the database.\n * It uses the lodash library for object manipulation and query construction.\n */\n\nexport class Query {\n    /**\n     * Generates a SQL query to find a currency by its ID.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n\n    findById(): object {\n        return {\n            name: `findById`,\n            type: `SELECT_ONE`,\n            syntax: (where: any) => {\n                const allowedKeys = [\n                    'c.id_currency',\n                    'c.code',\n                    'c.name',\n                    'c.name_plural',\n                    'c.symbol',\n                    'c.symbol_native',\n                    'c.decimal_digits',\n                    'c.rounding',\n                ];\n                const id = _.get(where, 'id');\n                const sql = `select ${allowedKeys.join()} from currencies c WHERE c.status = 1 AND c.id_currency = '${id}';`;\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to find a currency by its code.\n     * @param {string} [id] - Optional ID to exclude from the search if provided.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n\n    findByCode(id?: string): object {\n        return {\n            name: `findByCode`,\n            type: `SELECT_ONE`,\n            syntax: (where: any) => {\n                const allowedKeys = ['c.id_currency', 'c.code'];\n                const code = _.get(where, 'code');\n\n                let sql = `SELECT ${allowedKeys.join()} FROM currencies c WHERE c.status = 1 AND c.code = '${code}'`;\n                if (id) {\n                    sql += ` AND c.id_currency != '${id}';`;\n                }\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to insert a new currency.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n\n    insert(): object {\n        return {\n            name: `add`,\n            type: `INSERT`,\n            syntax: (where: any) => {\n                const allowedKeys = [\n                    'code',\n                    'name',\n                    'name_plural',\n                    'symbol',\n                    'symbol_native',\n                    'decimal_digits',\n                    'rounding',\n                ];\n                const conds = _.pick(where, allowedKeys);\n                const keys = _.keys(conds);\n                const values = _.values(conds);\n                const sql = `insert into currencies (${keys.join()}) values ('${values.join(\"','\")}') RETURNING id_currency as insertid, code;`;\n                console.log('QUERY', sql);\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to update an existing currency.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n\n    update(): object {\n        return {\n            name: `update`,\n            type: `UPDATE`,\n            syntax: (where: any) => {\n                let sql = `UPDATE currencies SET `;\n                const id = _.get(where, 'id');\n                _.unset(where, 'id');\n                const allowedKeys = [\n                    'code',\n                    'name',\n                    'name_plural',\n                    'symbol',\n                    'symbol_native',\n                    'decimal_digits',\n                    'rounding',\n                ];\n                where = _.pick(where, allowedKeys);\n\n                const lastKey = Object.keys(where)[Object.keys(where).length - 1];\n                _.mapKeys(where, (value, key) => {\n                    sql += `${key} = '${value}'`;\n                    sql += lastKey == key ? `` : `, `;\n                });\n                sql += ` WHERE status = 1 AND id_currency = '${id}' RETURNING id_currency as updatedid, code;`;\n\n                console.log('QQQQQQQQQQQQQQ', sql);\n\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to delete a currency by its ID.\n     * @param {string} id - The ID of the currency to delete.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n\n    delete(): object {\n        return {\n            name: `delete`,\n            type: `UPDATE`,\n            syntax: (id: string) => {\n                const sql = `UPDATE currencies SET status = 127 WHERE status = 1 AND id_currency = '${id}' RETURNING id_currency as deletedid, code;`;\n\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Provides the base fields for selecting currencies in pagination queries.\n     * @returns {string[]} An array of column names to be selected in pagination queries.\n     */\n\n    pgBaseSelectField(): string[] {\n        return [\n            'ptbl.id_currency',\n            'ptbl.code',\n            'ptbl.name',\n            'ptbl.symbol',\n            'ptbl.decimal_digits',\n            'ptbl.rounding',\n        ];\n    }\n\n    /**\n     * Provides the base query for selecting currencies.\n     * @returns {string} The base query string for selecting currencies.\n     */\n\n    pgBaseQuery(): string {\n        return ` FROM currencies ptbl`;\n    }\n}\n\n// import * as _ from 'lodash';\n\n// import { DynamicQueryBuilder, QueryOptions } from '@providers/dynamic-query.service';\n\n// export class Query {\n//     private queryBuilder = new DynamicQueryBuilder();\n\n//     findBy(key: string, value: string, id?: string) {\n//         const selectOptions: QueryOptions = {\n//             table: 'currencies',\n//             fields: ['id_currency', 'code'],\n//             conditions: { status: 1, ...(key && { [key]: value }) },\n//             ...(id && {\n//                 optionalConditions: {\n//                     id_currency: id,\n//                 },\n//             }),\n//         };\n\n//         return this.queryBuilder.buildSelectQuery(selectOptions);\n//     }\n\n//     insert(values: any) {\n//         const insertOptions: QueryOptions = {\n//             table: 'currencies',\n//             fields: [\n//                 'code',\n//                 'name',\n//                 'name_plural',\n//                 'symbol',\n//                 'symbol_native',\n//                 'decimal_digits',\n//                 'rounding',\n//             ],\n//             values: values,\n//             returningFields: ['id_currency as insertid', 'code'],\n//         };\n\n//         return this.queryBuilder.buildInsertQuery(insertOptions);\n//     }\n\n//     delete(key: string, value: string) {\n//         const deleteOptions: QueryOptions = {\n//             table: 'currencies',\n//             conditions: { status: 1, ...(key && { [key]: value }) },\n//             returningFields: ['id_currency as deleteid'],\n//         };\n\n//         return this.queryBuilder.buildDeleteQuery(deleteOptions);\n//     }\n\n//     pgBaseSelectField(): string[] {\n//         return [\n//             'ptbl.id_currency',\n//             'ptbl.code',\n//             'ptbl.name',\n//             'ptbl.symbol',\n//             'ptbl.decimal_digits',\n//             'ptbl.rounding',\n//         ];\n//     }\n\n//     pgBaseQuery() {\n//         return ` FROM currencies ptbl`;\n//     }\n// }\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QueryCountryDto.html":{"url":"classes/QueryCountryDto.html","title":"class - QueryCountryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QueryCountryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/countries/dto/query-country.dto-remove.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                filters\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                sort\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        filters\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FilterCountryDto | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: String})@IsOptional()@Transform( => )@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/query-country.dto-remove.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@Transform( => )@IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/query-country.dto-remove.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@Transform( => )@IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/query-country.dto-remove.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        sort\n                        \n                    \n                \n            \n                \n                    \n                        Type :     SortCountryDto[] | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: String})@IsOptional()@Transform( => )@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/query-country.dto-remove.ts:50\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nimport { Transform, Type, plainToInstance } from 'class-transformer';\nimport { IsNumber, IsOptional, IsString, ValidateNested } from 'class-validator';\n\nimport { Country } from './country';\n\nexport class FilterCountryDto {}\n\nexport class SortCountryDto {\n    @ApiProperty()\n    @Type(() => String)\n    @IsString()\n    orderBy: keyof Country;\n\n    @ApiProperty()\n    @IsString()\n    order: string;\n}\n\nexport class QueryCountryDto {\n    @ApiPropertyOptional()\n    @Transform(({ value }) => (value ? Number(value) : 1))\n    @IsNumber()\n    @IsOptional()\n    page?: number;\n\n    @ApiPropertyOptional()\n    @Transform(({ value }) => (value ? Number(value) : 10))\n    @IsNumber()\n    @IsOptional()\n    limit?: number;\n\n    @ApiPropertyOptional({ type: String })\n    @IsOptional()\n    @Transform(({ value }) =>\n        value ? plainToInstance(FilterCountryDto, JSON.parse(value)) : undefined\n    )\n    @ValidateNested()\n    @Type(() => FilterCountryDto)\n    filters?: FilterCountryDto | null;\n\n    @ApiPropertyOptional({ type: String })\n    @IsOptional()\n    @Transform(({ value }) => {\n        return value ? plainToInstance(SortCountryDto, JSON.parse(value)) : undefined;\n    })\n    @ValidateNested({ each: true })\n    @Type(() => SortCountryDto)\n    sort?: SortCountryDto[] | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QueryFailedFilter.html":{"url":"classes/QueryFailedFilter.html","title":"class - QueryFailedFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QueryFailedFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/query-failed.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                Exception filter for handling database query failures.\nThis filter catches exceptions related to failed database queries and formats\nthe response based on the type of database constraint error.\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                reflector\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/query-failed.filter.ts:26\n                            \n                        \n\n                \n                    \n                            Creates an instance of QueryFailedFilter.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The reflector instance used for metadata reflection.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        reflector\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Reflector\n\n                    \n                \n                    \n                        \n                                Defined in src/core/filters/query-failed.filter.ts:34\n                        \n                    \n\n            \n                \n                    The reflector instance used for metadata reflection.\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: any, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/filters/query-failed.filter.ts:45\n                        \n                    \n\n\n            \n                \n                        Handles the database query failure exception and formats the error response.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The exception thrown by a failed database query.\n\n                                            \n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The arguments host for accessing request and response objects.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { STATUS_CODES } from 'http';\n\nimport { ArgumentsHost, ExceptionFilter, HttpStatus, Logger } from '@nestjs/common'; // Catch\nimport { Reflector } from '@nestjs/core';\n\nimport { Response } from 'express';\n// import { QueryFailedError } from \"typeorm\";\n// import * as _ from 'lodash';\n\n// import { PgSQLService } from \"../common/shared/services/pgsql.service\";\nimport { constraintErrors } from './constraint-errors';\n// import { Query } from './query';\n\n/**\n * Exception filter for handling database query failures.\n *\n * This filter catches exceptions related to failed database queries and formats\n * the response based on the type of database constraint error.\n *\n * @export\n * @class QueryFailedFilter\n * @implements {ExceptionFilter}\n */\n\n// @Catch(QueryFailedError)\nexport class QueryFailedFilter implements ExceptionFilter {\n    /**\n     * Creates an instance of QueryFailedFilter.\n     * @param {Reflector} reflector The reflector instance used for metadata reflection.\n     *\n     * @memberof QueryFailedFilter\n     */\n\n    constructor(public reflector: Reflector) {}\n\n    /**\n     * Handles the database query failure exception and formats the error response.\n     *\n     * @param {any} exception The exception thrown by a failed database query.\n     * @param {ArgumentsHost} host The arguments host for accessing request and response objects.\n     *\n     * @memberof QueryFailedFilter\n     */\n\n    catch(exception: any, host: ArgumentsHost) {\n        console.log('QUERY FAIL from filter');\n        const ctx = host.switchToHttp();\n        const response = ctx.getResponse();\n        const request = ctx.getRequest();\n\n        const errorMessage = constraintErrors[exception.constraint];\n\n        const status =\n            exception.constraint && exception.constraint.startsWith('UQ')\n                ? HttpStatus.CONFLICT\n                : HttpStatus.INTERNAL_SERVER_ERROR;\n\n        const errorResponse = {\n            message: exception.sqlMessage,\n            query: exception.query,\n        };\n\n        try {\n            Logger.error(\n                `${request.method} ${request.url}`,\n                JSON.stringify(errorResponse),\n                'ExceptionFilter'\n            );\n\n            // const sqlService = new PgSQLService();\n            // const query = new Query();\n            // const reqstr = JSON.stringify(_.clone(request.body));\n            // const resstr = JSON.stringify(_.clone(errorResponse));\n            // sqlService.run(query.addQueryError(\"DBQuery\", request.method, request.url, reqstr, resstr));\n        } catch (error) {\n            Logger.error(\n                `${request.method} ${request.url}`,\n                JSON.stringify(errorResponse),\n                'ExceptionFilter'\n            );\n        }\n        response.status(status).json({\n            statusCode: status,\n            error: STATUS_CODES[status],\n            message: errorMessage,\n        });\n    }\n}\n\n// import { ArgumentsHost, Catch, ExceptionFilter, HttpException, HttpStatus } from '@nestjs/common';\n// import { Response } from 'express';\n// import { Prisma } from '@prisma/client';\n\n// @Catch(Prisma.PrismaClientKnownRequestError)\n// export class PrismaClientExceptionFilter implements ExceptionFilter {\n//   catch(exception: Prisma.PrismaClientKnownRequestError, host: ArgumentsHost) {\n//     const ctx = host.switchToHttp();\n//     const response = ctx.getResponse();\n//     const status = HttpStatus.INTERNAL_SERVER_ERROR;\n\n//     let message = exception.message;\n\n//     // Handle specific Prisma errors\n//     if (exception.code === 'P2002') {\n//       message = 'Unique constraint failed';\n//     }\n\n//     response.status(status).json({\n//       statusCode: status,\n//       message,\n//     });\n//   }\n// }\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/QueryOptions.html":{"url":"interfaces/QueryOptions.html","title":"interface - QueryOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  QueryOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/providers/dynamic-query.service-to-be-remove.ts\n        \n\n\n            \n                Description\n            \n            \n                Options for building queries.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            conditions\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            deleteType\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            fields\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            joins\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            optionalConditions\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            queryName\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            queryType\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            returningFields\n                                        \n                                \n                                \n                                        \n                                            table\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            values\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        conditions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        conditions:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Conditions for the query (e.g., WHERE clauses).\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        deleteType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        deleteType:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Type of delete operation ('soft' or 'hard').\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fields\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fields:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    List of fields to include in the query (e.g., columns for SELECT, INSERT, or UPDATE).\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        joins\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        joins:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Join clauses to include in the query.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        optionalConditions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        optionalConditions:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional conditions for the query.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        queryName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        queryName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Name of the query.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        queryType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        queryType:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Type of the query (e.g., INSERT, SELECT, UPDATE, DELETE).\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        returningFields\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        returningFields:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Fields to return from the query.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        table\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        table:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Name of the table to perform the query on.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        values\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        values:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Values to be used in the query (e.g., for INSERT or UPDATE operations).\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import * as _ from 'lodash';\n\n/**\n * Options for building queries.\n *\n * @export\n * @interface QueryOptions\n */\n\nexport interface QueryOptions {\n    /**\n     * Name of the query.\n     *\n     * @type {string}\n     * @memberof QueryOptions\n     */\n\n    queryName?: string;\n\n    /**\n     * Type of the query (e.g., INSERT, SELECT, UPDATE, DELETE).\n     *\n     * @type {string}\n     * @memberof QueryOptions\n     */\n\n    queryType?: string;\n\n    /**\n     * Name of the table to perform the query on.\n     *\n     * @type {string}\n     * @memberof QueryOptions\n     */\n\n    table: string;\n\n    /**\n     * List of fields to include in the query (e.g., columns for SELECT, INSERT, or UPDATE).\n     *\n     * @type {string[]}\n     * @memberof QueryOptions\n     */\n\n    fields?: string[];\n\n    /**\n     * Values to be used in the query (e.g., for INSERT or UPDATE operations).\n     *\n     * @type {Record}\n     * @memberof QueryOptions\n     */\n\n    values?: Record;\n\n    /**\n     * Conditions for the query (e.g., WHERE clauses).\n     *\n     * @type {Record}\n     * @memberof QueryOptions\n     */\n\n    conditions?: Record;\n\n    /**\n     * Optional conditions for the query.\n     *\n     * @type {Record}\n     * @memberof QueryOptions\n     */\n\n    optionalConditions?: Record;\n\n    /**\n     * Join clauses to include in the query.\n     *\n     * @type {string[]}\n     * @memberof QueryOptions\n     */\n\n    joins?: string[];\n\n    /**\n     * Fields to return from the query.\n     *\n     * @type {string[]}\n     * @memberof QueryOptions\n     */\n\n    returningFields?: string[];\n\n    /**\n     * Type of delete operation ('soft' or 'hard').\n     *\n     * @type {string}\n     * @memberof QueryOptions\n     */\n    deleteType?: string;\n}\n\n/**\n * Class to build dynamic SQL queries.\n *\n * @export\n * @class DynamicQueryBuilder\n */\nexport class DynamicQueryBuilder {\n    /**\n     * Builds an INSERT SQL query.\n     *\n     * @param {QueryOptions} options - Options for the INSERT query.\n     * @returns {object} - An object containing the query name, type, and the SQL syntax.\n     * @memberof DynamicQueryBuilder\n     */\n\n    buildInsertQuery(options: QueryOptions): object {\n        const { queryName, queryType, fields, table, values = {}, returningFields = [] } = options;\n        const conds = _.pick(values, fields);\n        const keys = _.keys(conds);\n        const vals = _.values(conds);\n\n        const returningClause = returningFields.length\n            ? `RETURNING ${returningFields.join(', ')}`\n            : '';\n\n        const sql = `INSERT INTO ${table} (${keys.join()}) VALUES ('${vals.join(\"','\")}') ${returningClause};`;\n\n        return {\n            name: queryName ? queryName : 'add',\n            type: queryType ? queryType : 'INSERT',\n            syntax: () => {\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Builds a SELECT SQL query.\n     *\n     * @param {QueryOptions} options - Options for the SELECT query.\n     * @returns {object} - An object containing the query name, type, and the SQL syntax.\n     * @memberof DynamicQueryBuilder\n     */\n\n    buildSelectQuery(options: QueryOptions): object {\n        const {\n            queryName,\n            queryType,\n            table,\n            fields = ['*'],\n            conditions = {},\n            joins = [],\n            optionalConditions = null,\n        } = options;\n\n        const whereClauses = Object.keys(conditions).map((key) => {\n            const value = conditions[key];\n            return typeof value === 'string' ? `${key} = '${value}'` : `${key} = ${value}`;\n        });\n\n        if (optionalConditions) {\n            // Adding optional conditions dynamically\n            Object.keys(optionalConditions).forEach((key) => {\n                const value = optionalConditions[key];\n                if (value) {\n                    whereClauses.push(\n                        typeof value === 'string' ? `${key} != '${value}'` : `${key} != ${value}`\n                    );\n                }\n            });\n        }\n\n        const whereClause = whereClauses.length ? `WHERE ${whereClauses.join(' AND ')}` : '';\n        const joinClause = joins.length ? joins.join(' ') : '';\n\n        const sql = `SELECT ${fields.join(', ')} FROM ${table} ${joinClause} ${whereClause}`;\n\n        return {\n            name: queryName ? queryName : 'find',\n            type: queryType ? queryType : 'SELECT_ONE',\n            syntax: () => {\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Builds an UPDATE SQL query.\n     *\n     * @param {QueryOptions} options - Options for the UPDATE query.\n     * @returns {object} - An object containing the query name, type, SQL syntax, and values to be used.\n     * @memberof DynamicQueryBuilder\n     */\n\n    buildUpdateQuery(options: QueryOptions): object {\n        const { table, values = {}, conditions = {}, returningFields = [] } = options;\n\n        const setClauses = Object.keys(values).map((key, index) => `${key} = $${index + 1}`);\n        const whereClauses = Object.keys(conditions).map(\n            (key, index) => `${key} = $${index + Object.keys(values).length + 1}`\n        );\n\n        const returningClause = returningFields.length\n            ? `RETURNING ${returningFields.join(', ')}`\n            : '';\n\n        const sql = `UPDATE ${table} SET ${setClauses.join(', ')} WHERE ${whereClauses.join(' AND ')} ${returningClause};`;\n\n        return {\n            name: 'update',\n            type: 'UPDATE',\n            sql,\n            values: [...Object.values(values), ...Object.values(conditions)],\n        };\n    }\n\n    //     return {\n    //   name: `delete`,\n    //   type: `UPDATE`,\n    //   syntax: (idArea: number) => {\n    //     const sql = `UPDATE Area SET Status = 127 WHERE Status = 1 AND idArea = ${idArea}`;\n\n    //     return sql;\n    //   },\n    // };\n\n    /**\n     * Builds a DELETE SQL query.\n     *\n     * @param {QueryOptions} options - Options for the DELETE query.\n     * @returns {object} - An object containing the query name, type, and the SQL syntax.\n     * @memberof DynamicQueryBuilder\n     */\n\n    buildDeleteQuery(options: QueryOptions): object {\n        const {\n            queryName,\n            queryType,\n            table,\n            conditions = {},\n            optionalConditions = null,\n            joins = [],\n            returningFields = [],\n            deleteType = 'soft',\n        } = options;\n\n        const whereClauses = Object.keys(conditions).map((key) => {\n            const value = conditions[key];\n            return typeof value === 'string' ? `${key} = '${value}'` : `${key} = ${value}`;\n        });\n\n        if (optionalConditions) {\n            // Adding optional conditions dynamically\n            Object.keys(optionalConditions).forEach((key) => {\n                const value = optionalConditions[key];\n                if (value) {\n                    whereClauses.push(\n                        typeof value === 'string' ? `${key} != '${value}'` : `${key} != ${value}`\n                    );\n                }\n            });\n        }\n\n        const whereClause = whereClauses.length ? `WHERE ${whereClauses.join(' AND ')}` : '';\n        const joinClause = joins.length ? joins.join(' ') : '';\n\n        // const whereClauses = Object.keys(conditions).map((key, index) => `${key} = $${index + 1}`);\n        // const whereClause = whereClauses.length ? `WHERE ${whereClauses.join(' AND ')}` : '';\n\n        const returningClause = returningFields.length\n            ? `RETURNING ${returningFields.join(', ')}`\n            : '';\n\n        let sql: string;\n        if (deleteType === 'soft') {\n            sql = `UPDATE ${table} SET status = 127 ${whereClause} ${returningClause};`;\n        } else {\n            sql = `DELETE FROM ${table} ${joinClause} ${whereClause} ${returningClause};`;\n        }\n\n        console.log('QQQQQQQQQQQQQQQQQQQQ', sql);\n\n        return {\n            name: queryName ? queryName : 'delete',\n            type: queryType ? queryType : 'DELETE',\n            syntax: () => {\n                return sql;\n            },\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ResolvePromisesInterceptor.html":{"url":"injectables/ResolvePromisesInterceptor.html","title":"injectable - ResolvePromisesInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ResolvePromisesInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/serializer.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                Interceptor that resolves all nested promises in the response data.\nThis interceptor is designed to be used within a NestJS application to ensure that any promises\nwithin the response data are fully resolved before the response is sent to the client.\nIt uses the deepResolvePromises function to recursively handle promises in nested structures.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/serializer.interceptor.ts:30\n                        \n                    \n\n\n            \n                \n                        Intercepts the request and resolves nested promises in the response data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe execution context of the request.\n\n\n                                            \n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe handler for the request.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable<>\n\n                        \n                            \n                                \nAn observable that emits the resolved data.\n\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestInterceptor, ExecutionContext, CallHandler } from '@nestjs/common';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport deepResolvePromises from './deep-resolver';\n\n/**\n * Interceptor that resolves all nested promises in the response data.\n *\n * This interceptor is designed to be used within a NestJS application to ensure that any promises\n * within the response data are fully resolved before the response is sent to the client.\n * It uses the `deepResolvePromises` function to recursively handle promises in nested structures.\n *\n * @export\n * @class ResolvePromisesInterceptor\n * @implements {NestInterceptor}\n */\n\n@Injectable()\nexport class ResolvePromisesInterceptor implements NestInterceptor {\n    /**\n     * Intercepts the request and resolves nested promises in the response data.\n     *\n     * @param {ExecutionContext} context - The execution context of the request.\n     * @param {CallHandler} next - The handler for the request.\n     * @returns {Observable} - An observable that emits the resolved data.\n     */\n\n    intercept(context: ExecutionContext, next: CallHandler): Observable {\n        return next.handle().pipe(map((data) => deepResolvePromises(data)));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SortBy.html":{"url":"injectables/SortBy.html","title":"injectable - SortBy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SortBy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/filter.validator.ts\n        \n\n\n            \n                Description\n            \n            \n                Custom validator for checking if a string is in the correct \"field direction\" format.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/validators/filter.validator.ts:101\n                        \n                    \n\n\n            \n                \n                        Default error message when validation fails.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe validation arguments.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \nThe error message.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(value: string, args: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/validators/filter.validator.ts:71\n                        \n                    \n\n\n            \n                \n                        Validates if the given value is in the format of \"field direction\" where direction is \"ASC\" or \"DESC\".\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe value to be validated.\n\n\n                                            \n                                        \n                                        \n                                                args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe validation arguments.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \nReturns true if valid; otherwise, false.\n\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\nimport {\n    ValidatorConstraint,\n    ValidatorConstraintInterface,\n    ValidationArguments,\n} from 'class-validator';\n\n/**\n * Custom validator for checking if a string is a valid comma-separated list of numbers.\n *\n * @export\n * @class CommaSeparated\n * @implements {ValidatorConstraintInterface}\n */\n@Injectable()\n@ValidatorConstraint({ name: 'CommaSeparated', async: false })\nexport class CommaSeparated implements ValidatorConstraintInterface {\n    /**\n     * Validates if the given value is a comma-separated list of numbers.\n     *\n     * @param {string} propertyValue - The value to be validated.\n     * @param {ValidationArguments} args - The validation arguments.\n     * @returns {boolean} - Returns true if valid; otherwise, false.\n     */\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    validate(propertyValue: string, args: ValidationArguments): boolean {\n        //\n        //\n        const isValid = /^[0-9]+(,[0-9]+)*$/.test(propertyValue);\n\n        if (isValid) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Default error message when validation fails.\n     *\n     * @param {ValidationArguments} args - The validation arguments.\n     * @returns {string} - The error message.\n     */\n\n    defaultMessage(args: ValidationArguments): string {\n        return `Invalid ${args.property}`;\n    }\n}\n\n/**\n * Custom validator for checking if a string is in the correct \"field direction\" format.\n *\n * @export\n * @class SortBy\n * @implements {ValidatorConstraintInterface}\n */\n@Injectable()\n@ValidatorConstraint({ name: 'SortBy', async: false })\nexport class SortBy implements ValidatorConstraintInterface {\n    /**\n     * Validates if the given value is in the format of \"field direction\" where direction is \"ASC\" or \"DESC\".\n     *\n     * @param {string} value - The value to be validated.\n     * @param {ValidationArguments} args - The validation arguments.\n     * @returns {boolean} - Returns true if valid; otherwise, false.\n     */\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    validate(value: string, args: ValidationArguments): boolean {\n        // Split the input by spaces and validate each pair\n        const parts = value.split(' ');\n\n        // Ensure pairs of field direction (e.g., field direction, field direction, ...)\n        if (parts.length % 2 !== 0) {\n            return false;\n        }\n\n        // Regular expression to match valid field direction\n        const fieldRegex = /^[\\w]+$/;\n        const directionRegex = /^(ASC|DESC|asc|desc|Asc|Desc)$/;\n\n        // Iterate through pairs and validate\n        for (let i = 0; i \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SortByDto.html":{"url":"classes/SortByDto.html","title":"class - SortByDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SortByDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/dto/pagination.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO class for sorting options.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                direction\n                            \n                            \n                                    \n                                    \n                                field\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        direction\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'ASC'})@IsString()@Matches(/^(ASC|DESC|asc|desc)$/, {message: 'operator must be one of ASC, DESC, asc, or desc'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.dto.ts:228\n                        \n                    \n\n            \n                \n                    The direction of the sort (ascending or descending).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        field\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.dto.ts:214\n                        \n                    \n\n            \n                \n                    The field to sort by.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nimport { Type, Transform, plainToInstance } from 'class-transformer';\nimport {\n    IsOptional,\n    Min,\n    Max,\n    IsNotEmpty,\n    IsString,\n    ValidateNested,\n    Matches,\n    IsEnum,\n    // Validate,\n    // IsIn,\n} from 'class-validator';\n\n// import { IsValidField } from '@core/validators/field.validator'; // Import the custom validator\nimport { IsNumberStringOrNumber } from '@decorators/number.string.validator';\nimport { ToNumber } from '@decorators/transforms.decorator';\n// import { IsNumberStringOrNumber } from '@decorators/number.string.validator';\n// import { ToNumber } from '@decorators/transforms.decorator';\n// import { Country } from '@modules/countries/dto/country';\n\n/**\n * Enum representing different pagination types.\n *\n * @export\n * @enum {string}\n */\n\nexport enum PaginationType {\n    NONE = 'no',\n    INFINITY = 'infinity',\n    PAGINATE = 'paginate',\n    ALL = 'all',\n}\n\n/**\n * DTO class for pagination query parameters.\n *\n * @export\n */\nexport class PaginationQueryDto {\n    /**\n     * The type of pagination to apply.\n     *\n     * @type {PaginationType}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        description:\n            'Pagination must all (Page and has_next_page), infinity (only has_next_page), paginate(only page)',\n        enum: PaginationType,\n        default: PaginationType.ALL,\n    })\n    @IsEnum(PaginationType)\n    @IsOptional()\n    readonly pagination: PaginationType;\n\n    /**\n     * The page number for pagination.\n     *\n     * @type {number}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        description: 'Page number',\n        minimum: 1,\n        default: 1,\n    })\n    @IsOptional()\n    @IsNumberStringOrNumber()\n    @ToNumber()\n    @Min(1)\n    readonly page?: number;\n\n    /**\n     * The number of records per page.\n     *\n     * @type {number}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        description: 'Record limit',\n        minimum: 1,\n        maximum: 500,\n        default: 10,\n    })\n    @IsOptional()\n    @IsNumberStringOrNumber()\n    @ToNumber()\n    @Min(10)\n    @Max(500)\n    readonly limit?: number = 10;\n\n    /**\n     * Filters to apply to the query.\n     *\n     * @type {FilterQueryDto[] | null}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        name: 'filters',\n        required: false,\n        type: String,\n        description: 'Array of filter objects as a JSON string',\n        example: '[{\"field\":\"name\",\"operator\":\"=\",\"value\":\"IN\"}]',\n    })\n    @IsOptional()\n    @Transform(({ value }) => {\n        return value ? plainToInstance(FilterQueryDto, JSON.parse(value)) : undefined;\n    })\n    @ValidateNested({ each: true })\n    @Type(() => FilterQueryDto)\n    filters?: FilterQueryDto[] | null;\n\n    /**\n     * Sorting options for the query.\n     *\n     * @type {SortByDto[] | null}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        name: 'sort',\n        required: false,\n        type: String,\n        description: 'Array of sort objects as a JSON string',\n        example: '[{\"field\":\"name\",\"direction\":\"ASC\"}]',\n    })\n    @IsOptional()\n    @Transform(({ value }) => {\n        return value ? plainToInstance(SortByDto, JSON.parse(value)) : undefined;\n    })\n    @ValidateNested({ each: true })\n    @Type(() => SortByDto)\n    sort?: SortByDto[] | null;\n}\n\n/**\n * DTO class for filter query parameters.\n *\n * @export\n */\nexport class FilterQueryDto {\n    /**\n     * The field to filter on.\n     *\n     * @type {string}\n     * @memberof FilterQueryDto\n     */\n\n    @ApiProperty({ example: 'iso', required: true })\n    @IsNotEmpty()\n    @IsString()\n    field: string;\n\n    /**\n     * The operator to use for filtering.\n     *\n     * @type {string}\n     * @memberof FilterQueryDto\n     */\n\n    @ApiProperty({ example: '=' })\n    @IsNotEmpty()\n    @IsString()\n    operator: string;\n\n    /**\n     * The value to filter by.\n     *\n     * @type {string}\n     * @memberof FilterQueryDto\n     */\n\n    @ApiProperty({ example: 'IN' })\n    @IsNotEmpty()\n    @IsString()\n    value: string;\n}\n\n/**\n * DTO class for sorting options.\n *\n * @export\n */\nexport class SortByDto {\n    // @ApiProperty({ example: 'name' })\n    // @IsString()\n    // @Validate(IsValidField, [Country], {\n    //     message: 'Field must be a valid key of Country',\n    // })\n    // field: keyof Country;\n    /**\n     * The field to sort by.\n     *\n     * @type {string}\n     * @memberof SortByDto\n     */\n\n    @ApiProperty()\n    @IsString()\n    // @IsIn(abc(x : keyof TExposedAccountInfo), {\n    //     message: 'Field must be one of \"name\", \"age\", or \"status\"',\n    // })\n    // @Validate(IsValidField, [{ entity: () => T }], {\n    //     message: 'Field must be a valid key of the specified entity',\n    // })\n    field: string;\n\n    /**\n     * The direction of the sort (ascending or descending).\n     *\n     * @type {string}\n     * @memberof SortByDto\n     */\n\n    @ApiProperty({ example: 'ASC' })\n    @IsString()\n    @Matches(/^(ASC|DESC|asc|desc)$/, {\n        message: 'operator must be one of ASC, DESC, asc, or desc',\n    })\n    direction: string;\n}\n\n// export class PaginatedResultDto {\n//     @ApiProperty()\n//     data: T[];\n\n//     @ApiProperty()\n//     total: number;\n\n//     @ApiProperty()\n//     page: number;\n\n//     @ApiProperty()\n//     limit: number;\n// }\n\n//DX\n// import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\n// import { Type, Transform, plainToInstance } from 'class-transformer';\n// import {\n//     IsOptional,\n//     Min,\n//     Max,\n//     IsNotEmpty,\n//     IsString,\n//     IsArray,\n//     ValidateNested,\n//     Validate,\n//     Matches,\n// } from 'class-validator';\n\n// import { IsNumberStringOrNumber } from '@decorators/number.string.validator';\n// import { ToNumber } from '@decorators/transforms.decorator';\n// import { SortBy } from '@validators/filter.validator';\n\n// export class FilterQueryDto {\n//     @ApiProperty({ example: 'name', required: true })\n//     @IsNotEmpty()\n//     @IsString()\n//     field: string;\n\n//     @ApiProperty({ example: 'LIKE' })\n//     @IsNotEmpty()\n//     @IsString()\n//     operator: string;\n\n//     @ApiProperty({ example: '%John%' })\n//     @IsNotEmpty()\n//     @IsString()\n//     value: string;\n// }\n\n// export class SortByDto {\n//     @ApiProperty({ example: 'name' })\n//     @IsString()\n//     field: string;\n\n//     @ApiProperty({ example: 'ASC' })\n//     @IsString()\n//     @Matches(/^(ASC|DESC|asc|desc)$/, {\n//         message: 'operator must be one of ASC, DESC, asc, or desc',\n//     })\n//     direction: string;\n// }\n\n// export class PaginationQueryDto {\n//     @ApiPropertyOptional({\n//         description: 'Page number',\n//         minimum: 1,\n//         default: 1,\n//     })\n//     @IsOptional()\n//     @IsNumberStringOrNumber()\n//     @ToNumber()\n//     @Min(1)\n//     // @Transform(({ value }) => {\n//     //     const strippedValue = String(value).replace(/['\"]+/g, '');\n//     //     const numberValue = Number(strippedValue);\n//     //     return isNaN(numberValue) ? 'undefined' : numberValue;\n//     // })\n//     readonly page?: number;\n\n//     @ApiPropertyOptional({\n//         description: 'Record limit',\n//         minimum: 1,\n//         maximum: 500,\n//         default: 10,\n//     })\n//     @IsOptional()\n//     @IsNumberStringOrNumber()\n//     @ToNumber()\n//     @Min(10)\n//     @Max(500)\n//     readonly limit?: number = 10;\n\n//     // @IsOptional()\n//     // @IsArray()\n//     // @ValidateNested({ each: true })\n//     // @Type(() => FilterQueryDto)\n//     // filters?: FilterQueryDto[];\n//     // // filters?: any;\n//     @ApiPropertyOptional({\n//         name: 'filters',\n//         required: false,\n//         type: String,\n//         description: 'Array of filter objects as a JSON string',\n//         example:\n//             '[{\"field\":\"name\",\"operator\":\"LIKE\",\"value\":\"John\"},{\"field\":\"age\",\"operator\":\">\",\"value\":\"30\"}]',\n//     })\n//     @IsOptional()\n//     @Transform(({ value }) => {\n//         return value ? plainToInstance(FilterQueryDto, JSON.parse(value)) : undefined;\n//     })\n//     @ValidateNested({ each: true })\n//     @Type(() => FilterQueryDto)\n//     filters?: FilterQueryDto[] | null;\n\n//     // @ApiPropertyOptional({\n//     //     description: ' Name or City:  ASC or DESC',\n//     //     example: 'name ASC',\n//     // })\n//     // @IsOptional()\n//     // @IsString()\n//     // @Validate(SortBy)\n//     // readonly sort?: string;\n//     // @ApiPropertyOptional({ type: [SortByDto], isArray: true })\n//     // @IsOptional()\n//     // @Transform(({ value }) => {\n//     //     return value ? plainToInstance(SortUserDto, JSON.parse(value)) : undefined;\n//     // })\n//     // @ValidateNested({ each: true })\n//     // @Type(() => SortUserDto)\n//     // sort?: SortUserDto[] | null;\n\n//     @ApiPropertyOptional({\n//         name: 'sort',\n//         required: false,\n//         type: String,\n//         description: 'Array of sort objects as a JSON string',\n//         example: '[{\"field\":\"name\",\"direction\":\"ASC\"},{\"field\":\"age\",\"direction\":\"DESC\"}]',\n//     })\n//     @IsOptional()\n//     @Transform(({ value }) => {\n//         return value ? plainToInstance(SortByDto, JSON.parse(value)) : undefined;\n//     })\n//     @ValidateNested({ each: true })\n//     @Type(() => SortByDto)\n//     sort?: SortByDto[] | null;\n// }\n\n// export class PaginatedResultDto {\n//     @ApiProperty()\n//     data: T[];\n\n//     @ApiProperty()\n//     total: number;\n\n//     @ApiProperty()\n//     page: number;\n\n//     @ApiProperty()\n//     limit: number;\n// }\n\n// // import { ApiProperty, ApiExtraModels } from '@nestjs/swagger';\n\n// // import { Type } from 'class-transformer';\n// // import { IsOptional, IsString, IsArray, ValidateNested, IsNumber } from 'class-validator';\n\n// // // export class FilterQueryDto {\n// // //     @ApiProperty({ example: 'name' })\n// // //     field: string;\n\n// // //     @ApiProperty({ example: 'LIKE' })\n// // //     operator: string;\n\n// // //     @ApiProperty({ example: '%John%' })\n// // //     value: string;\n// // // }\n// // export class FilterQueryDto {\n// //     @ApiProperty({ example: 'country_name' })\n// //     @IsString()\n// //     field: string;\n\n// //     @ApiProperty({ example: 'LIKE' })\n// //     @IsString()\n// //     operator: string;\n\n// //     @ApiProperty({ example: '%United%' })\n// //     @IsString()\n// //     value: string;\n// // }\n// // @ApiExtraModels(FilterQueryDto)\n// // export class PaginationQueryDto {\n// //     @ApiProperty({ example: 1, required: false })\n// //     @IsOptional()\n// //     @IsNumber()\n// //     @Type(() => Number)\n// //     page?: number = 1;\n\n// //     @ApiProperty({ example: 10, required: false })\n// //     @IsOptional()\n// //     @IsNumber()\n// //     @Type(() => Number)\n// //     limit?: number = 10;\n\n// //     // @ApiProperty({\n// //     //     type: [FilterQueryDto],\n// //     //     required: false,\n// //     //     isArray: true,\n// //     // })\n// //     // @Type(() => FilterQueryDto)\n// //     // filters?: FilterQueryDto[];\n// //     @ApiProperty({\n// //         type: FilterQueryDto,\n// //         required: false,\n// //         isArray: true,\n// //     })\n// //     // @IsOptional()\n// //     @IsArray()\n// //     @ValidateNested({ each: true })\n// //     @Type(() => FilterQueryDto)\n// //     filters?: FilterQueryDto[];\n\n// //     // @ApiProperty({\n// //     //     type: [Object],\n// //     //     // items: {\n// //     //     //     type: 'object',\n// //     //     //     items: {\n// //     //     //         type: 'object',\n// //     //     //     },\n// //     //     // },\n// //     // })\n// //     // coords: FilterQueryDto[];\n\n// //     // @ApiProperty({ type: String, required: false })\n// //     // @IsOptional()\n// //     // @IsArray()\n// //     // @ValidateNested({ each: true })\n// //     // @Type(() => FilterQueryDto)\n// //     // filters?: FilterQueryDto[];\n\n// //     @ApiProperty({ example: 'name ASC1', required: false })\n// //     sort?: string;\n// // }\n\n// // // export class PaginationQueryDto {\n// // //     @ApiProperty({ example: 1, required: false })\n// // //     page?: number = 1;\n\n// // //     @ApiProperty({ example: 10, required: false })\n// // //     limit?: number = 10;\n\n// // //     // @ApiProperty({ type: [FilterQueryDto], required: false, isArray: true })\n// // //     // filters?: FilterQueryDto[];\n\n// // //     // @ApiProperty({ type: String, required: false, isArray: true })\n// // //     // filters?: FilterQueryDto[];\n\n// // //     // @ApiProperty({ type: [FilterQueryDto], required: false, isArray: true })\n// // //     // @Type(() => FilterQueryDto)\n// // //     // filters?: FilterQueryDto[];\n\n// // //     @ApiProperty({ type: [FilterQueryDto], required: false })\n// // //     @IsOptional()\n// // //     @IsArray()\n// // //     @ValidateNested({ each: true })\n// // //     @Type(() => FilterQueryDto)\n// // //     filters?: FilterQueryDto[];\n\n// // //     @ApiProperty({ example: 'name ASC1', required: false })\n// // //     sort?: string;\n// // // }\n\n// // export class PaginatedResultDto {\n// //     @ApiProperty()\n// //     data: T[];\n\n// //     @ApiProperty()\n// //     total: number;\n\n// //     @ApiProperty()\n// //     page: number;\n\n// //     @ApiProperty()\n// //     limit: number;\n// // }\n\n// // export class abc {\n// //     @ApiProperty()\n// //     page: number;\n\n// //     @ApiProperty()\n// //     limit: number;\n// // }\n\n// // import { applyDecorators } from '@nestjs/common';\n// // import { ApiProperty, ApiExtraModels, ApiQuery, getSchemaPath } from '@nestjs/swagger';\n\n// // /**\n// //  * Combines Swagger Decorators to create a description for `filters[name]=something`\n// //  *  - has support for swagger\n// //  *  - automatic transformation with nestjs\n// //  */\n// // // // eslint-disable-next-line @typescript-eslint/ban-types,@typescript-eslint/explicit-module-boundary-types\n// // // export function ApiFilterQuery(fieldName: string, filterDto: Function) {\n// // //     return applyDecorators(\n// // //         ApiExtraModels(filterDto),\n// // //         ApiQuery({\n// // //             required: false,\n// // //             name: fieldName,\n// // //             style: 'deepObject',\n// // //             explode: true,\n// // //             type: 'object',\n// // //             schema: {\n// // //                 $ref: getSchemaPath(filterDto),\n// // //             },\n// // //         })\n// // //     );\n// // // }\n// // // eslint-disable-next-line @typescript-eslint/ban-types,@typescript-eslint/explicit-module-boundary-types\n// // export function ApiFilterQuery(fieldName: string, filterDto: Function, index: number) {\n// //     return applyDecorators(\n// //         ApiExtraModels(filterDto),\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}]`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //             schema: {\n// //                 $ref: getSchemaPath(filterDto),\n// //             },\n// //         })\n// //     );\n// // }\n\n// // export function ApiFilterQuery(fieldName: string, index: number) {\n// //     return applyDecorators(\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}].field`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //         }),\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}].operator`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //         }),\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}].value`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //         })\n// //     );\n// // }\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SortCountryDto.html":{"url":"classes/SortCountryDto.html","title":"class - SortCountryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SortCountryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/countries/dto/query-country.dto-remove.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                order\n                            \n                            \n                                    \n                                    \n                                    \n                                orderBy\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/query-country.dto-remove.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Type(undefined)@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/query-country.dto-remove.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nimport { Transform, Type, plainToInstance } from 'class-transformer';\nimport { IsNumber, IsOptional, IsString, ValidateNested } from 'class-validator';\n\nimport { Country } from './country';\n\nexport class FilterCountryDto {}\n\nexport class SortCountryDto {\n    @ApiProperty()\n    @Type(() => String)\n    @IsString()\n    orderBy: keyof Country;\n\n    @ApiProperty()\n    @IsString()\n    order: string;\n}\n\nexport class QueryCountryDto {\n    @ApiPropertyOptional()\n    @Transform(({ value }) => (value ? Number(value) : 1))\n    @IsNumber()\n    @IsOptional()\n    page?: number;\n\n    @ApiPropertyOptional()\n    @Transform(({ value }) => (value ? Number(value) : 10))\n    @IsNumber()\n    @IsOptional()\n    limit?: number;\n\n    @ApiPropertyOptional({ type: String })\n    @IsOptional()\n    @Transform(({ value }) =>\n        value ? plainToInstance(FilterCountryDto, JSON.parse(value)) : undefined\n    )\n    @ValidateNested()\n    @Type(() => FilterCountryDto)\n    filters?: FilterCountryDto | null;\n\n    @ApiPropertyOptional({ type: String })\n    @IsOptional()\n    @Transform(({ value }) => {\n        return value ? plainToInstance(SortCountryDto, JSON.parse(value)) : undefined;\n    })\n    @ValidateNested({ each: true })\n    @Type(() => SortCountryDto)\n    sort?: SortCountryDto[] | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateDto.html":{"url":"classes/UpdateDto.html","title":"class - UpdateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/countries/dto/update.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateCountryDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\n\nimport { CreateCountryDto } from './create.dto';\n\nexport class UpdateDto extends PartialType(CreateCountryDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateDto-1.html":{"url":"classes/UpdateDto-1.html","title":"class - UpdateDto-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/currencies/dto/update.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the UpdateDto class, which represents the Data Transfer Object (DTO)\nused for updating an existing currency entity. It extends from the CreateDto class,\nmaking all fields optional for the update operation.\nThe UpdateDto class is used to define the structure of the data required to update\nan existing currency entity. It inherits all properties from the CreateDto class but\nmakes them optional, allowing partial updates.\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreateDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\n\nimport { CreateDto } from './create.dto';\n\n/**\n * @fileoverview\n * This file defines the `UpdateDto` class, which represents the Data Transfer Object (DTO)\n * used for updating an existing currency entity. It extends from the `CreateDto` class,\n * making all fields optional for the update operation.\n *\n * @module\n * @description\n * The `UpdateDto` class is used to define the structure of the data required to update\n * an existing currency entity. It inherits all properties from the `CreateDto` class but\n * makes them optional, allowing partial updates.\n */\n\nexport class UpdateDto extends PartialType(CreateDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserNotFoundException.html":{"url":"classes/UserNotFoundException.html","title":"class - UserNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/exceptions/user-not-found.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Custom exception for user not found errors.\nIt extends the NotFoundException provided by NestJS.\nExample :```typescript\nthrow new UserNotFoundException();\nthrow new UserNotFoundException('Specific error message');Example :\n            \n\n            \n                Extends\n            \n            \n                        NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(error?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/exceptions/user-not-found.exception.ts:20\n                            \n                        \n\n                \n                    \n                            Creates an instance of UserNotFoundException.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                \nOptional error message.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        'use strict';\n\nimport { NotFoundException } from '@nestjs/common';\n\n/**\n * Custom exception for user not found errors.\n *\n * @extends {NotFoundException}\n *\n * @description This exception is thrown when a requested user is not found in the system.\n * It extends the `NotFoundException` provided by NestJS.\n *\n * @example\n * ```typescript\n * throw new UserNotFoundException();\n * throw new UserNotFoundException('Specific error message');\n * ```\n */\n\nexport class UserNotFoundException extends NotFoundException {\n    /**\n     * Creates an instance of UserNotFoundException.\n     *\n     * @param {string} [error] - Optional error message.\n     */\n\n    constructor(error?: string) {\n        super('error.user_not_found', error);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UtilsService.html":{"url":"classes/UtilsService.html","title":"class - UtilsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UtilsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/helper/services/util.service.ts\n        \n\n\n            \n                Description\n            \n            \n                UtilsService\nUtilsService provides utility methods for building dynamic SQL queries, including pagination, filtering, sorting, and query construction.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                buildDynamicQuery\n                            \n                            \n                                    Public\n                                formatValue\n                            \n                            \n                                    Public\n                                queryStatements\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        buildDynamicQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    buildDynamicQuery(paginationQuery: PaginationQueryDto, fieldConfigs: Record, baseFields: string[], fromQuery: string, countByField: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/helper/services/util.service.ts:29\n                        \n                    \n\n\n            \n                \n                        Builds dynamic SQL queries based on pagination, filtering, sorting, and field configuration.\nExample :selectQuery: string;\ncountQuery: string;}} - An object containing the dynamically built SELECT and COUNT queries.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                paginationQuery\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe pagination query parameters including filters and sorting options.\n\n\n                                            \n                                        \n                                        \n                                                fieldConfigs\n                                            \n                                                            Record\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nConfiguration for each field including alias, join table, and select fields.\n\n\n                                            \n                                        \n                                        \n                                                baseFields\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe base fields to include in the SELECT clause.\n\n\n                                            \n                                        \n                                        \n                                                fromQuery\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe base FROM clause for the query.\n\n\n                                            \n                                        \n                                        \n                                                countByField\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    '*'\n                                            \n\n                                            \n                                                    \nThe field to use for counting records in the count query.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                \nAn object containing the dynamically built SELECT and COUNT queries.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        formatValue\n                        \n                    \n                \n            \n            \n                \n                        \n                    formatValue(value: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/helper/services/util.service.ts:154\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        queryStatements\n                        \n                    \n                \n            \n            \n                \n                        \n                    queryStatements(baseFields: string[], selectFields: string | string[], fromQuery: string, joinTables: string[], filterQuery: string, sortByQuery: string, countByField: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/helper/services/util.service.ts:136\n                        \n                    \n\n\n            \n                \n                        Constructs SELECT and COUNT SQL queries based on the provided parameters.\nExample :selectQuery: string;\ncountQuery: string;}} - An object containing the constructed SELECT and COUNT queries.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                baseFields\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe base fields to include in the SELECT clause.\n\n\n                                            \n                                        \n                                        \n                                                selectFields\n                                            \n                                                        string | string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAdditional fields to include in the SELECT clause.\n\n\n                                            \n                                        \n                                        \n                                                fromQuery\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe base FROM clause for the query.\n\n\n                                            \n                                        \n                                        \n                                                joinTables\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nJOIN clauses to include in the query.\n\n\n                                            \n                                        \n                                        \n                                                filterQuery\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe WHERE clause for filtering.\n\n\n                                            \n                                        \n                                        \n                                                sortByQuery\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe ORDER BY clause for sorting.\n\n\n                                            \n                                        \n                                        \n                                                countByField\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    '*'\n                                            \n\n                                            \n                                                    \nThe field to use for counting records in the count query.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                \nAn object containing the constructed SELECT and COUNT queries.\n\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PaginationQueryDto } from '@utils/dto/pagination.dto';\nimport { IPaginationFieldConfig } from '@utils/types/pagination-options';\n\n/**\n * UtilsService\n *\n * @description\n * `UtilsService` provides utility methods for building dynamic SQL queries, including pagination, filtering, sorting, and query construction.\n *\n * @export\n * @class UtilsService\n */\nexport class UtilsService {\n    /**\n     * Builds dynamic SQL queries based on pagination, filtering, sorting, and field configuration.\n     *\n     * @param {PaginationQueryDto} paginationQuery - The pagination query parameters including filters and sorting options.\n     * @param {Record} fieldConfigs - Configuration for each field including alias, join table, and select fields.\n     * @param {string[]} baseFields - The base fields to include in the SELECT clause.\n     * @param {string} fromQuery - The base FROM clause for the query.\n     * @param {string} [countByField='*'] - The field to use for counting records in the count query.\n     *\n     * @returns {{\n     *     selectQuery: string;\n     *     countQuery: string;\n     * }} - An object containing the dynamically built SELECT and COUNT queries.\n     */\n\n    public buildDynamicQuery(\n        paginationQuery: PaginationQueryDto,\n        fieldConfigs: Record,\n        baseFields: string[],\n        fromQuery: string,\n        countByField: string = '*'\n    ): {\n        selectQuery: string;\n        countQuery: string;\n    } {\n        let filterQuery = '';\n        let sortByQuery = '';\n        const filterValues: any[] = [];\n        const joinTables: string[] = [];\n        const selectFields: string[] = [];\n\n        const filters = paginationQuery.filters;\n        const sort = paginationQuery.sort;\n\n        const mySet = new Set();\n\n        if (filters && filters.length > 0) {\n            const filterConditions = filters\n                .map(\n                    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                    (filter: { field: string; operator: string; value: string }, index: number) => {\n                        const field = filter.field.toLowerCase();\n                        let alias = `ptbl`; // default alias for the main table\n                        if (fieldConfigs && fieldConfigs[field]) {\n                            const config = fieldConfigs[field];\n                            alias = config.alias();\n\n                            if (!mySet.has(alias)) {\n                                mySet.add(alias);\n                                // joinTables.push(config.joinTable(index));\n                                joinTables.push(config.joinTable(alias));\n                            }\n                            selectFields.push(...config.selectFields(alias));\n                        }\n                        const operator = filter.operator.toUpperCase();\n                        if (operator === 'IN') {\n                            const values = filter.value.split(',').map((val) => `'${val.trim()}'`);\n                            return `${alias}.${filter.field} IN (${values.join(', ')})`;\n                        }\n                        // Add the value to the filterValues array for parameterized query\n                        filterValues.push(filter.value);\n\n                        // return `${alias}.${filter.field} ${filter.operator} ?`;\n                        return `${alias}.${filter.field} ${filter.operator} '${filter.value}'`;\n                    }\n                )\n                .join(' AND ');\n\n            filterQuery = `WHERE ${filterConditions}`;\n        }\n\n        if (sort && sort.length > 0) {\n            sortByQuery = `ORDER BY `;\n            sortByQuery += sort\n                .map((sortItem: { field: string; direction: any }) => {\n                    const field = sortItem.field.toLowerCase();\n                    let alias = `ptbl`; // default alias for the main table\n\n                    if (fieldConfigs && fieldConfigs[field]) {\n                        const config = fieldConfigs[field];\n                        alias = config.alias(); // Use index 0 since sorting doesn't require multiple aliases\n                    }\n\n                    return `${alias}.${sortItem.field} ${sortItem.direction}`;\n                })\n                .join(', ');\n        }\n\n        const selectedFields = selectFields.length > 0 ? `${', '}${selectFields.join(', ')}` : [];\n\n        // return { filterQuery, filterValues, joinTables, selectFields: selectedFields, sortByQuery };\n\n        const { selectQuery, countQuery } = this.queryStatements(\n            baseFields,\n            selectedFields,\n            fromQuery,\n            joinTables,\n            filterQuery,\n            sortByQuery,\n            countByField\n        );\n\n        return { selectQuery, countQuery };\n    }\n\n    /**\n     * Constructs SELECT and COUNT SQL queries based on the provided parameters.\n     *\n     * @param {string[]} baseFields - The base fields to include in the SELECT clause.\n     * @param {string | string[]} selectFields - Additional fields to include in the SELECT clause.\n     * @param {string} fromQuery - The base FROM clause for the query.\n     * @param {string[]} joinTables - JOIN clauses to include in the query.\n     * @param {string} filterQuery - The WHERE clause for filtering.\n     * @param {string} sortByQuery - The ORDER BY clause for sorting.\n     * @param {string} [countByField='*'] - The field to use for counting records in the count query.\n     *\n     * @returns {{\n     *     selectQuery: string;\n     *     countQuery: string;\n     * }} - An object containing the constructed SELECT and COUNT queries.\n     */\n\n    public queryStatements(\n        baseFields: string[],\n        selectFields: string | string[],\n        fromQuery: string,\n        joinTables: string[],\n        filterQuery: string,\n        sortByQuery: string,\n        countByField: string = '*'\n    ): {\n        selectQuery: string;\n        countQuery: string;\n    } {\n        const selectQuery = `SELECT ${baseFields.join(', ')} ${selectFields} ${fromQuery} ${joinTables.join(' ')} ${filterQuery} ${sortByQuery}`;\n        const countQuery = `SELECT count(${countByField}) ${fromQuery} ${joinTables.join(' ')} ${filterQuery}`;\n\n        return { selectQuery, countQuery };\n    }\n\n    public formatValue(value: any): string {\n        if (Array.isArray(value)) {\n            const formattedArray = value.map((v) => `${v.replace(/'/g, \"''\")}`).join(', ');\n            return `'{${formattedArray}}'`;\n        } else if (typeof value === 'string') {\n            return `'${value.replace(/'/g, \"''\")}'`;\n        } else if (value === null || value === undefined) {\n            return 'NULL';\n        } else {\n            return `${value}`; // For numbers and other types\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChangelog\n[1.0.1] - 2024-07-01\nBug Fixes\n\nconfig: Fixed issue with configuration\ndeps: Updated dependencies\n\n[1.0.0] - 2024-06-25\nFeatures\n\nstart: Initial release\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"contributing.html":{"url":"contributing.html","title":"getting-started - contributing","body":"\n                   \n\n2. CONTRIBUTING.md\nGuidelines for contributing to your project.\nExample:\nExample :# Contributing to Project Name\n\nWe welcome contributions from the community. Please follow these guidelines to ensure a smooth process for everyone.\n\n## How to Contribute\n\n### Reporting Bugs\nIf you find a bug, please open an issue on GitHub and include as much information as possible.\n\n### Suggesting Features\nWe welcome feature requests! Please open an issue on GitHub and describe the feature in detail.\n\n### Code Contributions\n1. Fork the repository.\n2. Create a new branch (`git checkout -b feature-name`).\n3. Make your changes.\n4. Commit your changes (`git commit -m 'Add feature'`).\n5. Push to the branch (`git push origin feature-name`).\n6. Open a pull request on GitHub.\n\n## Code Style\nPlease adhere to the code style used in the project. We use [tool/linter] for code formatting and linting.\n\n## Running Tests\nEnsure that all tests pass before submitting a pull request. Run tests with:\n```sh\nyarn test\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                prisma/data/countries-currencies-timezones.ts\n            \n            variable\n            countries\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/data/countries-dummy.ts\n            \n            variable\n            countries\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/data/countries-dummy.ts\n            \n            variable\n            countriesjson\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/data/countries-dummy.ts\n            \n            variable\n            countriesjson1\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/data/countries-dummy.ts\n            \n            variable\n            countriesList\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/data/countries-dummy.ts\n            \n            variable\n            currencies\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/seed.ts\n            \n            variable\n            prisma\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/seed.ts\n            \n            variable\n            seed\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/app.module.ts\n            \n            variable\n            ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/helper/helper.module.ts\n            \n            variable\n            providers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/helper/services/config.service.ts\n            \n            class\n            ConfigService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/helper/services/config.service.ts\n            \n            class\n            EnvVarAppConfigValidator\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/common/helper/services/pagination.service.ts\n            \n            injectable\n            PaginationService\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/common/helper/services/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/common/helper/services/util.service.ts\n            \n            class\n            UtilsService\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/config/app.config.ts\n            \n            class\n            EnvironmentVariablesValidator\n            \n                10 %\n                (1/10)\n            \n        \n        \n            \n                \n                src/config/database.config.ts\n            \n            class\n            EnvironmentVariablesValidator\n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                src/config/file.config.ts\n            \n            class\n            EnvironmentVariablesValidator\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/config/logger.config.ts\n            \n            class\n            EnvironmentVariablesValidator\n            \n                8 %\n                (1/12)\n            \n        \n        \n            \n                \n                src/config/logger.config.ts\n            \n            variable\n            getBooleanEnvVar\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/core.constant.ts\n            \n            variable\n            HTTP_STATUS_MESSAGES\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/constants/core.constant.ts\n            \n            variable\n            PUBLIC_ROUTE_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/constants/core.constant.ts\n            \n            variable\n            RESPONSE_SERIALIZATION_META_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/decorators/number.string.validator.ts\n            \n            function\n            IsNumberStringOrNumber\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/decorators/public.request.decorator.ts\n            \n            variable\n            PublicRoute\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/decorators/swagger.schema.ts\n            \n            variable\n            ApiFile\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/decorators/swagger.schema.ts\n            \n            variable\n            ApiMultiFile\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/decorators/transforms.decorator.ts\n            \n            function\n            ToNumber\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/exceptions/file-not-image.exception.ts\n            \n            class\n            FileNotImageException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/core/exceptions/http-error.filter.ts\n            \n            class\n            HttpErrorFilter\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/core/exceptions/query.ts\n            \n            class\n            Query\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/core/exceptions/user-not-found.exception.ts\n            \n            class\n            UserNotFoundException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/core/filters/all-exceptions.filter.ts\n            \n            class\n            AllExceptionsFilter\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/core/filters/bad-request.filter.ts\n            \n            class\n            BadRequestExceptionFilter\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/core/filters/constraint-errors.ts\n            \n            variable\n            constraintErrors\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/filters/http-exception.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/core/filters/prisma-exception.filter.ts\n            \n            class\n            PrismaClientExceptionFilter\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/core/filters/query-failed.filter.ts\n            \n            class\n            QueryFailedFilter\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/core/filters/query.ts\n            \n            class\n            Query\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/core/interfaces/app.interfaces.ts\n            \n            interface\n            IAppConfig\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/core/interfaces/aws.interfaces.ts\n            \n            interface\n            IAwsConfig\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/core/interfaces/file.interfaces.ts\n            \n            interface\n            IFileConfig\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/core/interfaces/jwt.interfaces.ts\n            \n            interface\n            IJWTConfig\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/core/interfaces/node-emailer.interfaces.ts\n            \n            interface\n            INodeEmailerConfig\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/core/interfaces/postgres.interfaces.ts\n            \n            interface\n            IPostgreSQLConfig\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/core/interfaces/sendgrid.interfaces.ts\n            \n            interface\n            ISendGridConfig\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/interfaces/sms.interfaces.ts\n            \n            interface\n            ISMSConfig\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/interfaces/upload-file.interfaces.ts\n            \n            interface\n            IUploadFileConfig\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/core/validators/field.validator.ts\n            \n            function\n            IsValidField\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/validators/filter.validator.ts\n            \n            injectable\n            CommaSeparated\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/core/validators/filter.validator.ts\n            \n            injectable\n            SortBy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/countries/countries.controller.ts\n            \n            controller\n            CountriesController\n            \n                40 %\n                (2/5)\n            \n        \n        \n            \n                \n                src/modules/countries/countries.service.ts\n            \n            injectable\n            CountriesService\n            \n                62 %\n                (5/8)\n            \n        \n        \n            \n                \n                src/modules/countries/dto/country.ts\n            \n            class\n            Country\n            \n                100 %\n                (15/15)\n            \n        \n        \n            \n                \n                src/modules/countries/dto/create.dto.ts\n            \n            class\n            CreateCountryDto\n            \n                91 %\n                (11/12)\n            \n        \n        \n            \n                \n                src/modules/countries/dto/query-country.dto-remove.ts\n            \n            class\n            FilterCountryDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/countries/dto/query-country.dto-remove.ts\n            \n            class\n            QueryCountryDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/countries/dto/query-country.dto-remove.ts\n            \n            class\n            SortCountryDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/countries/dto/update.dto.ts\n            \n            class\n            UpdateDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/countries/query.ts\n            \n            class\n            Query\n            \n                62 %\n                (5/8)\n            \n        \n        \n            \n                \n                src/modules/currencies/currencies.controller.ts\n            \n            controller\n            CurrenciesController\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/modules/currencies/currencies.controller.ts\n            \n            variable\n            modules\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/currencies/currencies.service.ts\n            \n            injectable\n            CurrenciesService\n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                src/modules/currencies/dto/create.dto.ts\n            \n            class\n            CreateDto\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/modules/currencies/dto/currency.ts\n            \n            class\n            Currency\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/modules/currencies/dto/update.dto.ts\n            \n            class\n            UpdateDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/currencies/query.ts\n            \n            class\n            Query\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/modules/files/domain/file.ts\n            \n            class\n            FileType\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/files/files.module.ts\n            \n            variable\n            infrastructureUploaderModule\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/files/files.service.ts\n            \n            injectable\n            FilesService\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/files/infrastructure/uploader/local/dto/file-response.dto.ts\n            \n            class\n            FileResponseDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/modules/files/infrastructure/uploader/local/files.controller.ts\n            \n            controller\n            FilesLocalController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/files/infrastructure/uploader/local/files.service.ts\n            \n            injectable\n            FilesLocalService\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/modules/files/infrastructure/uploader/s3-presigned/dto/file-response.dto.ts\n            \n            class\n            FileResponseDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/files/infrastructure/uploader/s3-presigned/dto/file.dto.ts\n            \n            class\n            FileUploadDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/files/infrastructure/uploader/s3-presigned/files.controller.ts\n            \n            controller\n            FilesS3PresignedController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/files/infrastructure/uploader/s3-presigned/files.service.ts\n            \n            injectable\n            FilesS3PresignedService\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/modules/files/infrastructure/uploader/s3/dto/file-response.dto.ts\n            \n            class\n            FileResponseDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/modules/files/infrastructure/uploader/s3/files.controller.ts\n            \n            controller\n            FilesS3Controller\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/modules/files/infrastructure/uploader/s3/files.service.ts\n            \n            injectable\n            FilesS3Service\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/modules/home/home.controller.ts\n            \n            controller\n            HomeController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/modules/home/home.service.ts\n            \n            injectable\n            HomeService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/providers/dynamic-query.service-to-be-remove.ts\n            \n            class\n            DynamicQueryBuilder\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/providers/dynamic-query.service-to-be-remove.ts\n            \n            interface\n            QueryOptions\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/providers/file-upload.service.ts\n            \n            variable\n            copyFile\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/providers/file-upload.service.ts\n            \n            variable\n            editFileName\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/providers/file-upload.service.ts\n            \n            variable\n            fileName\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/providers/file-upload.service.ts\n            \n            variable\n            filesRoot\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/providers/file-upload.service.ts\n            \n            variable\n            fsRoot\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/providers/file-upload.service.ts\n            \n            variable\n            imageFileFilter\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/providers/file-upload.service.ts\n            \n            variable\n            multiFileDestDir\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/providers/file-upload.service.ts\n            \n            variable\n            profileDestDir\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/providers/file-upload.service.ts\n            \n            variable\n            removeFile\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/swagger.ts\n            \n            function\n            Unnamed function\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/deep-resolver.ts\n            \n            function\n            deepResolvePromises\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/dto/pagination-response.dto.ts\n            \n            class\n            PaginationResponseDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/utils/dto/pagination-response.dto.ts\n            \n            function\n            PaginationResponse\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/dto/pagination.dto.ts\n            \n            class\n            FilterQueryDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/utils/dto/pagination.dto.ts\n            \n            class\n            PaginationQueryDto\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/utils/dto/pagination.dto.ts\n            \n            class\n            SortByDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/utils/dto/pagination.meta.dto.ts\n            \n            class\n            PaginationMetaDto\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/utils/dto/pagination.meta.dto.ts\n            \n            interface\n            IPageMetaDtoParameters\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/utils/serializer.interceptor.ts\n            \n            injectable\n            ResolvePromisesInterceptor\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/utils/transformers/lower-case.transformer.ts\n            \n            variable\n            lowerCaseTransformer\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/transformers/upper-case.transformer.ts\n            \n            variable\n            upperCaseTransformer\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/types/pagination-options.ts\n            \n            interface\n            IPaginationFieldConfig\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/utils/validate-config.ts\n            \n            function\n            validateConfig\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @aws-sdk/client-s3 : ^3.609.0\n        \n            @aws-sdk/s3-request-presigner : ^3.613.0\n        \n            @express-rate-limit/tsconfig : ^1.0.2\n        \n            @infineit/winston-logger : ^1.0.23\n        \n            @nestjs/axios : ^3.0.2\n        \n            @nestjs/common : ^10.3.9\n        \n            @nestjs/config : ^3.2.2\n        \n            @nestjs/core : ^10.3.9\n        \n            @nestjs/platform-express : ^10.3.9\n        \n            @nestjs/swagger : ^7.3.1\n        \n            @nestjs/terminus : ^10.2.3\n        \n            @prisma/client : ^5.17.0\n        \n            axios : ^1.7.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            compression : ^1.7.4\n        \n            express : ^4.19.2\n        \n            express-rate-limit : ^7.4.0\n        \n            helmet : ^7.1.0\n        \n            install : ^0.13.0\n        \n            multer : ^1.4.5-lts.1\n        \n            multer-s3 : ^3.0.1\n        \n            nestjs-pino : ^4.1.0\n        \n            npm : ^10.8.3\n        \n            pg : ^8.12.0\n        \n            pino-pretty : ^11.2.2\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Environment   (src/.../app.config.ts)\n                        \n                        \n                            Environment   (src/.../logger.config.ts)\n                        \n                        \n                            FileDriver   (src/.../file-config.type.ts)\n                        \n                        \n                            PaginationType   (src/.../pagination.dto.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/app.config.ts\n    \n        \n            \n                \n                    \n                        \n                        Environment\n                    \n                \n                        \n                            \n                                 Development\n                            \n                        \n                        \n                            \n                                Value : development\n                            \n                        \n                        \n                            \n                                 Production\n                            \n                        \n                        \n                            \n                                Value : production\n                            \n                        \n                        \n                            \n                                 Staging\n                            \n                        \n                        \n                            \n                                Value : staging\n                            \n                        \n                        \n                            \n                                 Test\n                            \n                        \n                        \n                            \n                                Value : testing\n                            \n                        \n            \n        \n\n    src/config/logger.config.ts\n    \n        \n            \n                \n                    \n                        \n                        Environment\n                    \n                \n                        \n                            \n                                 Development\n                            \n                        \n                        \n                            \n                                Value : development\n                            \n                        \n                        \n                            \n                                 Production\n                            \n                        \n                        \n                            \n                                Value : production\n                            \n                        \n                        \n                            \n                                 Staging\n                            \n                        \n                        \n                            \n                                Value : staging\n                            \n                        \n                        \n                            \n                                 Test\n                            \n                        \n                        \n                            \n                                Value : testing\n                            \n                        \n            \n        \n\n    src/config/type/file-config.type.ts\n    \n        \n            \n                \n                    \n                        \n                        FileDriver\n                    \n                \n                    \n                        \n                            Enum representing the available file storage drivers.\n\n                        \n                    \n                        \n                            \n                                 LOCAL\n                            \n                        \n                        \n                            \n                                Value : local\n                            \n                        \n                        \n                            \n                                 S3\n                            \n                        \n                        \n                            \n                                Value : s3\n                            \n                        \n                        \n                            \n                                 S3_PRESIGNED\n                            \n                        \n                        \n                            \n                                Value : s3-presigned\n                            \n                        \n            \n        \n\n    src/utils/dto/pagination.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        PaginationType\n                    \n                \n                    \n                        \n                            Enum representing different pagination types.\n\n                        \n                    \n                        \n                            \n                                 NONE\n                            \n                        \n                        \n                            \n                                Value : no\n                            \n                        \n                        \n                            \n                                 INFINITY\n                            \n                        \n                        \n                            \n                                Value : infinity\n                            \n                        \n                        \n                            \n                                 PAGINATE\n                            \n                        \n                        \n                            \n                                Value : paginate\n                            \n                        \n                        \n                            \n                                 ALL\n                            \n                        \n                        \n                            \n                                Value : all\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            deepResolvePromises   (src/.../deep-resolver.ts)\n                        \n                        \n                            IsNumberStringOrNumber   (src/.../number.string.validator.ts)\n                        \n                        \n                            IsValidField   (src/.../field.validator.ts)\n                        \n                        \n                            PaginationResponse   (src/.../pagination-response.dto.ts)\n                        \n                        \n                            ToNumber   (src/.../transforms.decorator.ts)\n                        \n                        \n                            Unnamed function   (src/.../swagger.ts)\n                        \n                        \n                            validateConfig   (src/.../validate-config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                        Initializes and starts the NestJS application.\nConfigures global settings, middleware, and exception handling.\nSets up Swagger documentation if in development, staging, or testing environments.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves when the server starts.\n\n                            \n                \n            \n        \n    \n    src/utils/deep-resolver.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        deepResolvePromises\n                        \n                    \n                \n            \n            \n                \ndeepResolvePromises(input)\n                \n            \n\n\n\n\n            \n                \n                        Recursively resolves all nested promises in an object or array.\nThis function takes an input that can be a promise, an array, an object, or a primitive value,\nand recursively resolves any promises contained within. It supports nested structures and\npreserves the original structure of the input while resolving promises.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                input\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe input to process, which may include promises.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/core/decorators/number.string.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsNumberStringOrNumber\n                        \n                    \n                \n            \n            \n                \nIsNumberStringOrNumber(validationOptions?: ValidationOptions)\n                \n            \n\n\n\n\n            \n                \n                        Custom decorator that checks if a value is a number or a numeric string,\nand if it is greater than or equal to 1.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                validationOptions\n                                            \n                                                        ValidationOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptions used to pass to validation decorators.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/core/validators/field.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsValidField\n                        \n                    \n                \n            \n            \n                \nIsValidField(entity: any, validationOptions?: ValidationOptions)\n                \n            \n\n\n\n\n            \n                \n                        Custom decorator to validate if a field is a valid key of the provided entity class.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                entity\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe class constructor of the entity to check against.\n\n\n                                            \n                                        \n                                        \n                                                validationOptions\n                                            \n                                                        ValidationOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional validation options.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/utils/dto/pagination-response.dto.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PaginationResponse\n                        \n                    \n                \n            \n            \n                \nPaginationResponse(classReference: Type)\n                \n            \n\n\n\n\n            \n                \n                        Creates a pagination response DTO class with specified data type.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                classReference\n                                            \n                                                        Type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe class reference for the data type.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/core/decorators/transforms.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ToNumber\n                        \n                    \n                \n            \n            \n                \nToNumber()\n                \n            \n\n\n\n\n            \n                \n                        Decorator that converts a string number or number to an integer.\n\n\n                        \n                            Returns :         void\n\n                        \n                            \n                                \nA property decorator function.\n\n\n                            \n                \n            \n        \n    \n    src/swagger.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Unnamed function\n                        \n                    \n                \n            \n            \n                \nUnnamed function(app: INestApplication)\n                \n            \n\n\n\n\n            \n                \n                        Configures and sets up Swagger documentation for the NestJS application.\nThis function creates and configures Swagger documentation based on application configuration.\nIt sets up two separate Swagger documents: one for the main application modules and another\nfor common modules. It also configures various Swagger UI options.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                app\n                                            \n                                                        INestApplication\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe NestJS application instance.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/utils/validate-config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        validateConfig\n                        \n                    \n                \n            \n            \n                \nvalidateConfig(config: Record, envVariablesClass: ClassConstructor)\n                \n            \n\n\n\n\n            \n                \n                        Validates and transforms a configuration object based on a class schema.\nThis function uses class-transformer to transform a plain object into an instance of a class\nand class-validator to validate the instance. If validation fails, it throws an error with\ndetailed information about the validation errors.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                        Record\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe configuration object to be validated.\n\n\n                                            \n                                        \n                                        \n                                                envVariablesClass\n                                            \n                                                        ClassConstructor\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe class constructor used for transforming and validating the configuration.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nNestJS Starter Boilerplate\nIntroduction\nIntroducing the NestJS boilerplate - a great way to get started on your next Node.js project! It's built using the latest version of NestJS, which is a powerful and flexible framework for creating efficient and scalable server-side applications. The boilerplate includes TypeScript, PostgreSQL, and JWT authentication right out of the box, so you don't have to worry about setting those up yourself.\nOther awesome features include configuration support with Dotenv, Prisma for interacting with databases, Swagger for API documentation, and Docker Compose for container orchestration. Plus, the boilerplate also comes with pre-configured linting tools and secure HTTP headers with Helmet.\nGetting started is easy - just clone the repository, install the dependencies, and you're ready to start building your next great idea!\n🚀 Features\n\n📱 NestJS — latest version\n🎉 TypeScript - Type checking\n⚙️ Dotenv - Supports environment variables\n🗝 Authentication - JWT, RSA256\n🏬 Authorization - RBAC, CBAC\n🏪 Prisma - Database ORM\n🏪 PostgreSQL - Open-Source Relational Database\n🧠 Configuration - Single config for all\n📃 Swagger - API Documentation\n🐳 Docker Compose - Container Orchestration\n🔐 Helmet - secure HTTP headers\n📏 ESLint — Pluggable JavaScript linter\n💖 Prettier - Opinionated Code Formatter\n✨ Commitlint - Lint your conventional commits\n🕵️‍♂️ Code Scanning - Code scanning with CodeQL\n\nGetting Started\nPrerequisites\nEnsure you have the following installed:\n\nNode.js (20+)\nYarn or npm (yarn recomandation)\nDocker (if applicable)\n\nInstallation\n\nClone the repository:Example :git clone https://github.com/dharmesh--patel/nestjs-starter.git\ncd yourproject\n\nVisual Studio Code Extensions\nExample :- ESLint - `dbaeumer.vscode-eslint` - Dirk Baeumer\n\n- Prettier - Code formatter by `esbenp.prettier-vscode` - Esben Petersen\n \n- Prisma - `Prisma.prisma` - prisma.io\n\n- Dockfile - `foxundermoon.shell-format` - foxundermoon\n\n- markdown - `yzhang.markdown-all-in-one` - Yu Zhang\n\n- To open the command pallette, \n  you can use Command + Shift + P on Mac or Control + Shift + P on Windows. \n  In the command pallette search format, then choose Format Document.Installation\nExample :$ yarnRunning Server\nDevelopment / Staging / Production\nExample :# development\n$ yarn start\n\n# staging\n$ yarn staging\n\n# production\n$ yarn productionBuild\nExample :yarn buildTests\nExample :# unit tests\n$ yarn test\n\n# e2e tests\n$ yarn test:e2e\n\n# test coverage\n$ yarn test:covDatabase Migration Development\nExample :   # Change in database file (it will create migration file in prisma/migration)\n   $ yarn migrationDocker Container and Database Migration for Staging/Production\nExample :   # To run docker file run script (it will create docker container run update database)\n   $ bash ./start.sh staging/productionDocker Container down\nExample :   # To run docker file run script (it will create docker container run update database)\n   $ bash ./stop.sh staging/productionRunning all services on Docker\nExample :docker-compose up --buildRun only database and redis services on Docker\nExample :docker-compose up postgres redisSwagger Documentation\n\nSwagger documentation endpoint will be running at  /docs .\n\nK8s Deployment Local\nExample :# first start minikube\nminikube start\n\n# deployment\nkubectl apply -f k8s/\n\n# get endpoint of k8s cluster\nminikube service nestjs-starter-serviceCommit Message Guidelines\n[optional scope]: \n[optional body]\n[optional footer(s)]\nType: The type of change (e.g., feat, fix, docs, style, refactor, test, chore).\nScope: The scope of the change (e.g., core, api, config), which is optional.\nDescription: A short, imperative summary of the change.\nBody: Detailed explanation of the change, which is optional.\nFooter: Any footer notes, such as breaking changes or issues closed, which is optional.\ngit commit -m \"feat(api): add new endpoint for user registration\"\ngit commit -m \"fix(core): handle edge case in data processing\"\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nLicense\nNest is MIT licensed.\nAuthor\n🇮🇳 Dharmesh Patel \nGithub\nLinkedin\nInstagram\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2024 Dharmesh Patel\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ApiModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CountriesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CurrenciesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FilesLocalModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FilesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FilesS3Module\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FilesS3PresignedModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HelperModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HomeModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ApiModule\n\n\n\ncluster_ApiModule_imports\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_CountriesModule\n\n\n\ncluster_CountriesModule_exports\n\n\n\ncluster_CountriesModule_providers\n\n\n\ncluster_CurrenciesModule\n\n\n\ncluster_CurrenciesModule_providers\n\n\n\ncluster_FilesLocalModule\n\n\n\ncluster_FilesLocalModule_exports\n\n\n\ncluster_FilesLocalModule_providers\n\n\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_imports\n\n\n\ncluster_FilesModule_exports\n\n\n\ncluster_FilesModule_providers\n\n\n\ncluster_FilesS3Module\n\n\n\ncluster_FilesS3Module_exports\n\n\n\ncluster_FilesS3Module_providers\n\n\n\ncluster_FilesS3PresignedModule\n\n\n\ncluster_FilesS3PresignedModule_exports\n\n\n\ncluster_FilesS3PresignedModule_providers\n\n\n\ncluster_HelperModule\n\n\n\ncluster_HelperModule_exports\n\n\n\ncluster_HelperModule_providers\n\n\n\ncluster_HomeModule\n\n\n\ncluster_HomeModule_providers\n\n\n\n\nCountriesModule\n\nCountriesModule\n\n\n\nApiModule\n\nApiModule\n\nApiModule -->\n\nCountriesModule->ApiModule\n\n\n\n\n\nCountriesService \n\nCountriesService \n\nCountriesService  -->\n\nCountriesModule->CountriesService \n\n\n\n\n\nCurrenciesModule\n\nCurrenciesModule\n\nApiModule -->\n\nCurrenciesModule->ApiModule\n\n\n\n\n\nFilesModule\n\nFilesModule\n\nApiModule -->\n\nFilesModule->ApiModule\n\n\n\n\n\nFilesService \n\nFilesService \n\nFilesService  -->\n\nFilesModule->FilesService \n\n\n\n\n\nHomeModule\n\nHomeModule\n\nApiModule -->\n\nHomeModule->ApiModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nApiModule->AppModule\n\n\n\n\n\nHelperModule\n\nHelperModule\n\nAppModule -->\n\nHelperModule->AppModule\n\n\n\n\n\nPaginationService \n\nPaginationService \n\nPaginationService  -->\n\nHelperModule->PaginationService \n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nHelperModule->PrismaService \n\n\n\n\n\nUtilsService \n\nUtilsService \n\nUtilsService  -->\n\nHelperModule->UtilsService \n\n\n\n\n\nCountriesService\n\nCountriesService\n\nCountriesModule -->\n\nCountriesService->CountriesModule\n\n\n\n\n\nCurrenciesService\n\nCurrenciesService\n\nCurrenciesModule -->\n\nCurrenciesService->CurrenciesModule\n\n\n\n\n\nFilesLocalService \n\nFilesLocalService \n\n\n\nFilesLocalModule\n\nFilesLocalModule\n\nFilesLocalService  -->\n\nFilesLocalModule->FilesLocalService \n\n\n\n\n\nFilesLocalService\n\nFilesLocalService\n\nFilesLocalModule -->\n\nFilesLocalService->FilesLocalModule\n\n\n\n\n\nFilesS3Module\n\nFilesS3Module\n\nFilesModule -->\n\nFilesS3Module->FilesModule\n\n\n\n\n\nFilesS3Service \n\nFilesS3Service \n\nFilesS3Service  -->\n\nFilesS3Module->FilesS3Service \n\n\n\n\n\nFilesS3PresignedModule\n\nFilesS3PresignedModule\n\nFilesModule -->\n\nFilesS3PresignedModule->FilesModule\n\n\n\n\n\nFilesS3PresignedService \n\nFilesS3PresignedService \n\nFilesS3PresignedService  -->\n\nFilesS3PresignedModule->FilesS3PresignedService \n\n\n\n\n\nFilesService\n\nFilesService\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\nFilesS3Service\n\nFilesS3Service\n\nFilesS3Module -->\n\nFilesS3Service->FilesS3Module\n\n\n\n\n\nFilesS3PresignedService\n\nFilesS3PresignedService\n\nFilesS3PresignedModule -->\n\nFilesS3PresignedService->FilesS3PresignedModule\n\n\n\n\n\nPaginationService\n\nPaginationService\n\nHelperModule -->\n\nPaginationService->HelperModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nHelperModule -->\n\nPrismaService->HelperModule\n\n\n\n\n\nHomeService\n\nHomeService\n\nHomeModule -->\n\nHomeService->HomeModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        10 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    7 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    12 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    39 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    12 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.0.0\n        \n            Description : Nest TypeScript starter repository\n        \n            Homepage : https://github.com/dharmesh-r-patel/nestjs-starter.git#readme\n        \n            Bugs : https://github.com/dharmesh-r-patel/nestjs-starter.git/issues\n        \n            License : MIT\n        \n            Repository : git+https://github.com/dharmesh-r-patel/nestjs-starter.git\n        \n            Author : Dharmesh Patel\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AllConfigType   (src/.../config.type.ts)\n                        \n                        \n                            AppConfig   (src/.../app-config.type.ts)\n                        \n                        \n                            DatabaseConfig   (src/.../database-config.type.ts)\n                        \n                        \n                            DeepPartial   (src/.../deep-partial.type.ts)\n                        \n                        \n                            FileConfig   (src/.../file-config.type.ts)\n                        \n                        \n                            LoggerConfig   (src/.../logger-config.type.ts)\n                        \n                        \n                            MaybeType   (src/.../maybe.type.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/type/config.type.ts\n    \n    \n        \n            \n                \n                    \n                    AllConfigType\n                \n            \n            \n                \n                    Aggregated configuration type for the entire application.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/config/type/app-config.type.ts\n    \n    \n        \n            \n                \n                    \n                    AppConfig\n                \n            \n            \n                \n                    Configuration settings for the application.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/config/type/database-config.type.ts\n    \n    \n        \n            \n                \n                    \n                    DatabaseConfig\n                \n            \n            \n                \n                    Configuration settings for database connectivity.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/utils/types/deep-partial.type.ts\n    \n    \n        \n            \n                \n                    \n                    DeepPartial\n                \n            \n            \n                \n                    A utility type that recursively makes all properties of a given type T optional.\nThis allows for partial objects to be deeply nested within the original type T.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/config/type/file-config.type.ts\n    \n    \n        \n            \n                \n                    \n                    FileConfig\n                \n            \n            \n                \n                    Configuration settings for file storage.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/config/type/logger-config.type.ts\n    \n    \n        \n            \n                \n                    \n                    LoggerConfig\n                \n            \n            \n                \n                    Configuration settings for the application.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/utils/types/maybe.type.ts\n    \n    \n        \n            \n                \n                    \n                    MaybeType\n                \n            \n            \n                \n                    A utility type that represents a type T that may be either of type T or undefined.\nThis is useful for cases where a value may or may not be present.\n\n                \n            \n            \n                \n                        T | undefined\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
