var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AddresTypeDto.html",[0,0.24,1,3.242]],["body/classes/AddresTypeDto.html",[0,0.465,1,5.874,2,0.79,3,0.089,4,0.081,5,0.086,6,4.464,7,0.374,8,1.16,9,2.254,10,1.354,11,2.812,12,1.043,13,2.208,14,1.563,15,3.222,16,2.883,17,7.674,18,2.4,19,1.96,20,4.009,21,4.814,22,3.493,23,2.746,24,0.973,25,4.007,26,2.563,27,4.007,28,3.032,29,2.621,30,2.038,31,1.939,32,2.645,33,3.244,34,3.728,35,3.606,36,0.333,37,5.136,38,1.083,39,5.411,40,1.944,41,3.815,42,0.586,43,0.007,44,0.916,45,4.464,46,6.093,47,2.294,48,7.46,49,4.346,50,5.1,51,0.795,52,5.024,53,2.812,54,3.861,55,2.707,56,5.024,57,2.812,58,2.812,59,5.468,60,3.843,61,4.814,62,4.638,63,4.331,64,1.949,65,3.261,66,2.017,67,3.222,68,5.024,69,3.861,70,5.024,71,6.708,72,4.807,73,1.85,74,0.26,75,3.019,76,1.128,77,3.932,78,3.861,79,3.493,80,3.291,81,2.955,82,2.682,83,0.853,84,0.406,85,0.089,86,4.464,87,2.792,88,2.387,89,2.332,90,5.024,91,3.728,92,0.004,93,0.005,94,0.004]],["title/classes/AddressType.html",[0,0.24,95,3.242]],["body/classes/AddressType.html",[0,0.456,2,0.886,3,0.1,4,0.091,5,0.091,7,0.313,8,1.251,9,2.429,10,1.093,12,0.873,14,1.685,19,2.113,24,1.076,30,2.559,31,2.035,36,0.373,37,5.925,39,5.722,40,2.044,42,0.555,43,0.007,44,0.927,47,2.463,48,7.74,51,0.788,53,3.737,57,3.032,58,3.032,64,2.037,66,1.993,69,4.162,74,0.194,76,1.265,83,0.957,84,0.455,85,0.1,92,0.004,93,0.005,94,0.004,95,6.6,96,5.007,97,3.711,98,3.032,99,4.162,100,4.255,101,3.91,102,3.107,103,3.186,104,5.498,105,7.231,106,5.894,107,4.692,108,4.692,109,3.548,110,4.292,111,5.635,112,7.095,113,6.509,114,6.509,115,6.509,116,6.509,117,5.635,118,6.425,119,5.635,120,4.528]],["title/controllers/AddressTypeController.html",[121,1.507,122,3.624]],["body/controllers/AddressTypeController.html",[0,0.199,1,2.686,3,0.07,4,0.064,5,0.076,7,0.406,10,1.211,12,1.02,30,1.724,31,1.728,36,0.262,37,4.941,38,0.909,39,5.915,40,1.465,42,0.604,43,0.007,44,0.923,46,6.253,51,0.759,73,2.408,74,0.291,76,0.887,83,0.67,84,0.319,85,0.07,92,0.005,93,0.004,94,0.003,95,5.614,102,2.439,104,6.54,121,1.248,122,6.092,123,1.3,124,3.509,125,2.359,126,2.839,127,3.279,128,2.38,129,1.347,130,1.274,131,3.783,132,2.831,133,3.465,134,2.969,135,2.168,136,1.759,137,3.683,138,3.391,139,4.941,140,2.566,141,1.487,142,2.168,143,2.956,144,3.528,145,3.391,146,3.135,147,2.634,148,2.867,149,1.785,150,3.377,151,2.686,152,2.634,153,3.948,154,1.462,155,0.914,156,1.794,157,1.263,158,1.568,159,3.27,160,1.833,161,3.948,162,2.359,163,1.691,164,3.051,165,3.948,166,2.35,167,7.334,168,2.634,169,2.634,170,2.359,171,2.875,172,2.686,173,3.948,174,1.21,175,2.327,176,2.38,177,4.067,178,2.38,179,2.538,180,1.995,181,3.948,182,3.391,183,3.948,184,1.833,185,2.816,186,3.948,187,3.284,188,3.948,189,5.675,190,2.323,191,2.785,192,2.359,193,1.509,194,1.628,195,4.516,196,3.391,197,3.46,198,0.696,199,3.154,200,4.597,201,4.34,202,1.937,203,3.154,204,1.656,205,3.509,206,1.656,207,3.509,208,3.509,209,3.509,210,1.74,211,2.83,212,1.883,213,3.948,214,3.948,215,1.697,216,1.224,217,3.948,218,4.429,219,2.686,220,2.273,221,1.331,222,3.572,223,3.948,224,1.2,225,3.948,226,4.34,227,3.948,228,3.948,229,3.267,230,2.455,231,3.948,232,5.675,233,1.995,234,3.948,235,3.948,236,3.948,237,3.948,238,2.359,239,3.948,240,3.948]],["title/modules/AddressTypeModule.html",[84,0.385,241,3.416]],["body/modules/AddressTypeModule.html",[0,0.324,3,0.114,4,0.104,5,0.097,7,0.341,8,1.359,10,1.187,43,0.007,74,0.305,83,1.092,84,0.713,85,0.114,92,0.005,93,0.006,94,0.005,95,6.007,122,6.887,123,2.907,129,1.865,130,1.764,136,2.434,139,6.593,142,3.001,174,1.412,198,1.134,208,5.715,241,6.873,242,2.457,243,2.572,244,2.833,245,2.833,246,2.633,247,3.556,248,3.736,249,5.715,250,5.715,251,5.715,252,3.461,253,2.833,254,2.572,255,6.431,256,4.692,257,4.692,258,2.585,259,2.295,260,4.09,261,4.365,262,6.431]],["title/injectables/AddressTypeService.html",[139,3.242,263,1.366]],["body/injectables/AddressTypeService.html",[0,0.365,1,2.323,3,0.061,4,0.082,5,0.07,7,0.342,8,0.883,10,1.226,12,0.979,15,2.041,16,1.826,17,4.535,18,2.186,19,1.491,23,2.089,24,0.616,36,0.226,37,2.323,38,0.899,42,0.601,43,0.007,44,0.894,46,6.345,51,0.778,59,2.784,73,2.236,74,0.295,83,0.58,84,0.547,85,0.061,92,0.006,93,0.004,94,0.004,95,4.155,102,1.468,104,2.597,129,1.211,130,1.146,132,2.231,134,2.724,136,1.581,139,5.176,140,2.307,141,1.388,142,1.95,146,3.061,147,2.836,148,2.578,149,2.307,150,3.314,152,2.369,154,1.499,155,0.877,156,1.613,157,1.667,158,1.516,159,3.193,160,2.369,166,2.317,167,7.365,168,2.369,169,2.369,171,2.71,174,1.445,175,2.666,176,2.14,178,2.562,179,2.589,180,2.578,184,2.369,185,2.722,187,3.44,190,3.115,193,1.305,194,1.501,198,0.602,204,1.432,205,3.035,206,1.432,207,3.035,209,3.035,210,1.505,211,2.448,212,1.629,216,2.444,221,1.255,222,3.661,224,1.551,229,4.38,233,2.578,259,1.98,263,1.463,264,1.468,265,3.035,266,2.193,267,2.307,268,5.103,269,2.937,270,3.312,271,1.75,272,2.743,273,3.63,274,3.173,275,1.994,276,3.173,277,1.907,278,3.762,279,1.715,280,3.035,281,4.107,282,3.984,283,5.103,284,2.504,285,3.416,286,2.041,287,3.416,288,5.103,289,2.123,290,3.416,291,4.031,292,3.416,293,3.416,294,5.103,295,1.685,296,4.518,297,2.597,298,3.416,299,2.448,300,1.836,301,2.323,302,1.585,303,2.123,304,3.424,305,3.471,306,3.798,307,2.123,308,2.234,309,3.798,310,2.836,311,1.728,312,1.994,313,2.217,314,4.107,315,3.154,316,3.88,317,1.966,318,1.468,319,3.173,320,2.123,321,2.123,322,3.798,323,3.798,324,3.798,325,3.395,326,2.123,327,2.217,328,1.398,329,2.123,330,2.041,331,4.16,332,2.123,333,3.416,334,2.217,335,1.966,336,3.416,337,1.779,338,2.123,339,2.323,340,2.323,341,3.049,342,2.123,343,1.468,344,1.779,345,3.173,346,5.103,347,3.416,348,2.217,349,2.937,350,2.041,351,3.049,352,2.448,353,1.898,354,1.779,355,2.937,356,2.937,357,2.123,358,2.784,359,1.398,360,2.784,361,2.123,362,2.041,363,2.914,364,2.123,365,2.323]],["title/classes/AddressUpdateDto.html",[0,0.24,211,3.416]],["body/classes/AddressUpdateDto.html",[0,0.477,1,6.161,2,1.011,3,0.114,4,0.104,5,0.097,7,0.341,8,1.359,9,2.639,10,1.335,11,3.293,12,0.949,13,2.585,14,2.058,16,2.81,24,0.949,38,1.044,42,0.55,43,0.007,46,6.007,73,2.436,74,0.271,76,1.444,83,1.092,84,0.52,85,0.114,92,0.005,93,0.006,94,0.005,97,3.461,98,3.703,102,3.375,156,2.483,185,2.849,211,5.629,224,2.684,343,3.375,366,5.715,367,4.416,368,4.692,369,4.365,370,4.883,371,4.692,372,4.883,373,4.692,374,3.854,375,3.842,376,3.842,377,6.431]],["title/classes/AllExceptionsFilter.html",[0,0.24,378,3.886]],["body/classes/AllExceptionsFilter.html",[0,0.364,2,0.888,3,0.1,4,0.091,5,0.065,7,0.347,14,1.863,24,0.874,36,0.374,38,0.856,40,1.596,42,0.498,43,0.007,51,0.789,74,0.276,85,0.1,92,0.004,93,0.005,94,0.004,126,2.83,128,3.535,141,1.482,154,1.376,155,0.784,157,1.073,158,1.015,193,2.158,194,1.577,198,0.996,279,1.898,286,2.896,296,3.771,308,2.065,311,1.785,315,2.258,325,3.139,335,3.251,378,6.872,379,7.491,380,5.019,381,5.189,382,5.34,383,4.297,384,5.133,385,3.273,386,6.041,387,4.601,388,6.041,389,4.168,390,7.786,391,4.604,392,5.648,393,4.686,394,4.038,395,6.516,396,5.648,397,4.925,398,8.43,399,4.852,400,5.929,401,5.648,402,4.925,403,5.734,404,3.036,405,5.506,406,5.189,407,4.925,408,3.535,409,3.771,410,3.036,411,3.842,412,3.139,413,4.604,414,5.648,415,5.019,416,3.842,417,3.842,418,3.842,419,4.047,420,4.604,421,4.295,422,4.295,423,3.842,424,4.295,425,2.622,426,4.047,427,5.648,428,5.019,429,4.047,430,4.604]],["title/modules/ApiModule.html",[84,0.385,431,3.416]],["body/modules/ApiModule.html",[0,0.415,3,0.085,4,0.077,5,0.09,7,0.281,37,3.253,43,0.007,74,0.324,83,0.812,84,0.765,85,0.085,92,0.004,93,0.005,94,0.004,109,3.183,127,3.233,129,2.206,136,2.88,198,0.843,241,6.101,242,3.154,243,1.912,244,2.107,245,2.107,246,1.958,247,2.72,248,2.107,252,2.859,253,2.107,254,1.912,308,2.887,381,5.659,383,4.245,404,2.72,407,4.413,411,3.253,431,6.986,432,4.249,433,4.249,434,6.101,435,6.101,436,6.101,437,6.101,438,6.101,439,6.101,440,6.101,441,6.101,442,6.101,443,6.101,444,6.101,445,4.782,446,6.488,447,6.488,448,6.005,449,4.413,450,4.034,451,5.765,452,4.034,453,5.289,454,5.289,455,6.488,456,7.067,457,4.034,458,5.765,459,4.934,460,4.782,461,4.782,462,4.782,463,4.782,464,4.782,465,4.782,466,4.782,467,4.782,468,4.782,469,4.782,470,4.782,471,4.782,472,4.782,473,3.253,474,4.782,475,4.782,476,6.232,477,2.322,478,2.571,479,3.898,480,2.346,481,2.416,482,3.253,483,3.103,484,2.22,485,3.253,486,4.249]],["title/controllers/AppController.html",[121,1.507,487,3.624]],["body/controllers/AppController.html",[0,0.355,3,0.139,4,0.06,5,0.073,7,0.306,12,0.656,30,1.652,31,1.221,36,0.246,40,1.924,43,0.007,46,2.531,47,2.287,51,0.536,64,0.9,74,0.271,76,0.835,83,0.632,84,0.301,85,0.066,92,0.006,93,0.004,94,0.003,100,1.88,101,1.727,109,1.825,121,2.376,123,1.225,127,2.225,129,1.29,130,1.221,131,2.831,136,1.685,141,1.113,146,2.203,155,0.403,157,1.428,158,1.269,159,2.973,166,0.934,194,1.072,198,0.656,202,1.825,216,1.685,218,3.697,221,0.94,246,2.629,258,1.789,271,2.423,273,3.866,274,4.392,278,3.064,279,1.25,284,3.151,286,1.488,304,2.746,308,3.099,310,5.218,311,0.762,315,3.241,337,2.831,359,2.225,385,1.682,389,3.697,393,2,404,2.279,406,4.603,407,3.697,408,3.611,425,1.727,450,3.379,487,6.163,488,3.306,489,7.575,490,2.981,491,4.83,492,4.884,493,4.884,494,4.805,495,7.065,496,7.515,497,3.72,498,3.72,499,5.937,500,5.436,501,6.278,502,7.515,503,5.436,504,5.436,505,3.72,506,3.72,507,3.72,508,3.72,509,3.72,510,4.585,511,5.436,512,3.72,513,7.531,514,5.624,515,3.72,516,2.829,517,5.436,518,5.436,519,7.515,520,3.72,521,3.033,522,3.72,523,2.068,524,4.83,525,3.72,526,2.666,527,3.72,528,3.306,529,3.72,530,1.727,531,3.72,532,3.033,533,3.033,534,3.72,535,4.431,536,4.133,537,3.72,538,3.033,539,3.72,540,3.72,541,3.72,542,2.829,543,3.72,544,2.829,545,3.72,546,5.436,547,3.72,548,3.72,549,3.033,550,3.72,551,3.72,552,3.72,553,3.72,554,3.72,555,3.72,556,3.72,557,3.72,558,5.436,559,4.83,560,3.72,561,5.436,562,3.72,563,8.475,564,3.72,565,8.31,566,8.31,567,8.31,568,7.065,569,3.72,570,6.423,571,6.423,572,6.423,573,6.423,574,6.423,575,6.423,576,6.423,577,4.369,578,8.105,579,5.436,580,1.727,581,3.72,582,3.72,583,5.436,584,3.72,585,5.436,586,3.72,587,2.414,588,7.065,589,7.065,590,3.72,591,5.436,592,3.72,593,5.436,594,3.72]],["title/modules/AppModule.html",[84,0.385,577,3.242]],["body/modules/AppModule.html",[0,0.441,3,0.102,4,0.093,5,0.092,7,0.318,19,2.144,43,0.007,55,1.937,74,0.33,83,0.979,84,0.724,85,0.102,92,0.004,93,0.005,94,0.004,123,2.415,136,2.274,198,1.017,242,3.084,243,2.306,244,2.54,245,2.54,246,2.36,247,3.076,248,2.54,252,3.233,253,2.54,254,2.306,271,2.517,273,3.85,311,1.18,404,3.562,407,4.991,431,6.426,451,6.52,453,5.982,457,4.562,485,3.922,487,6.137,489,5.982,492,4.384,493,5.579,521,5.982,523,3.204,530,3.406,577,6.458,595,5.124,596,5.124,597,5.819,598,5.124,599,5.982,600,6.52,601,2.57,602,4.762,603,4.991,604,5.982,605,4.7,606,3.1,607,7.338,608,5.579,609,7.338,610,5.766,611,5.766,612,5.766,613,4.7,614,4.991,615,5.124,616,5.982,617,5.766,618,4.762,619,5.124,620,5.982,621,5.766,622,5.766,623,5.766,624,6.137,625,4.7,626,5.766,627,5.766,628,5.766,629,5.766,630,5.766,631,5.766,632,5.766,633,5.766]],["title/classes/BadRequestExceptionFilter.html",[0,0.24,634,3.886]],["body/classes/BadRequestExceptionFilter.html",[0,0.362,2,0.717,3,0.081,4,0.074,5,0.052,7,0.336,12,0.551,14,1.675,20,3.896,23,1.868,24,0.759,29,2.455,32,1.598,36,0.302,38,0.849,42,0.482,43,0.007,51,0.764,74,0.302,85,0.081,92,0.003,93,0.005,94,0.003,109,2.238,126,2.455,127,1.868,128,3.013,141,1.286,154,1.366,155,0.778,157,1.472,158,1.291,174,1.398,190,1.868,191,2.238,193,1.743,194,1.527,198,0.804,278,3.428,279,1.533,286,2.512,308,2.297,311,1.86,328,2.572,382,4.674,383,3.377,384,4.674,385,2.84,387,4.136,388,5.549,389,3.616,390,7.568,391,3.719,393,4.365,394,3.63,395,5.858,397,4.273,399,4.457,400,5.523,402,4.273,403,5.267,404,2.634,405,4.777,406,4.502,407,4.273,408,3.246,409,3.272,410,2.452,411,3.103,412,2.535,413,3.719,416,3.103,417,3.103,418,3.103,419,3.269,420,3.719,421,3.469,423,4.273,426,4.502,535,7.407,634,6.312,635,7.216,636,4.054,637,3.616,638,6.283,639,6.283,640,4.562,641,4.562,642,6.283,643,8.599,644,4.562,645,3.616,646,4.831,647,7.743,648,2.916,649,3.492,650,4.562,651,4.054,652,2.062,653,2.062,654,6.386,655,4.054,656,4.562,657,4.562,658,4.562,659,4.562,660,4.562,661,4.562,662,4.562,663,4.562,664,6.283,665,4.562,666,4.562,667,4.562,668,3.719,669,4.054,670,4.054,671,4.562,672,2.238,673,4.562,674,4.562,675,4.562,676,4.077,677,8.761,678,5.122,679,6.312,680,4.054,681,6.312,682,4.562,683,5.583,684,6.283,685,5.122,686,4.054,687,4.054,688,4.054,689,4.054,690,4.054,691,4.054,692,4.054,693,4.562,694,4.054,695,4.054,696,4.562,697,4.562,698,4.562,699,4.562]],["title/controllers/BankController.html",[121,1.507,700,3.624]],["body/controllers/BankController.html",[0,0.202,3,0.071,4,0.065,5,0.077,7,0.407,8,0.995,10,1.283,12,1.025,30,1.747,31,1.74,36,0.266,38,0.916,40,1.48,42,0.571,43,0.007,44,0.926,51,0.765,73,2.418,74,0.293,76,0.903,83,0.683,84,0.325,85,0.071,92,0.005,93,0.004,94,0.003,121,1.272,123,1.324,125,2.403,126,2.863,127,3.3,129,1.365,130,1.291,131,3.815,132,2.844,133,3.845,134,2.903,135,2.197,136,1.782,137,3.732,138,3.436,140,2.6,141,1.5,142,2.197,143,2.995,144,3.575,145,3.436,146,3.144,147,2.669,148,2.905,149,1.818,150,2.684,151,2.736,152,2.669,154,1.577,155,0.919,156,1.818,157,1.276,158,1.575,159,3.279,160,1.867,162,2.403,163,1.714,164,3.092,166,2.355,168,2.669,169,2.669,170,2.403,171,2.896,172,2.736,174,1.22,175,2.351,176,2.411,178,2.411,179,2.565,180,2.032,182,3.436,184,1.867,185,2.827,187,3.312,190,2.354,191,2.822,192,2.403,193,1.537,194,1.637,195,4.554,196,3.436,197,3.496,198,0.709,199,3.196,200,4.63,201,4.376,202,1.973,203,2.235,204,1.686,206,1.686,210,1.772,212,1.919,215,1.728,216,1.246,218,4.461,219,2.736,220,2.315,221,1.341,224,1.222,226,4.376,230,2.5,233,2.032,238,2.403,295,1.586,363,2.743,482,6.148,490,2.669,700,6.13,701,3.574,702,6.268,703,5.271,704,5.271,705,4.022,706,4.022,707,6.13,708,4.022,709,4.022,710,4.022,711,4.022,712,4.022,713,4.022,714,1.919,715,1.772,716,3.574,717,3.574,718,2.882,719,4.022,720,4.022,721,4.022,722,6.713,723,4.022,724,4.022,725,4.022,726,4.022,727,4.022,728,4.022,729,4.022,730,4.022,731,4.022,732,4.022,733,4.022]],["title/classes/BankDto.html",[0,0.24,704,3.242]],["body/classes/BankDto.html",[0,0.448,2,0.646,3,0.073,4,0.066,5,0.078,7,0.396,8,1.011,9,1.963,10,1.228,11,2.45,12,0.894,13,1.923,14,1.362,15,2.959,16,2.647,18,2.09,19,1.707,20,3.769,21,4.42,22,3.043,23,2.392,24,0.894,25,3.49,26,2.232,27,3.49,28,2.641,29,2.283,30,1.775,31,1.978,32,2.38,33,2.92,34,3.247,35,3.141,36,0.272,38,1.133,40,1.841,41,3.433,42,0.569,43,0.007,44,0.961,45,3.654,47,2.479,49,4.499,50,4.443,51,0.842,53,3.102,54,3.363,55,2.486,57,2.45,58,2.45,60,2.787,61,3.49,62,3.363,63,3.141,64,1.789,65,2.669,66,1.911,67,2.959,69,3.363,74,0.234,75,3.34,76,0.923,77,3.539,78,3.911,79,3.539,80,2.867,81,3.443,82,2.717,83,0.698,84,0.332,85,0.073,86,3.654,91,3.247,92,0.003,93,0.004,94,0.003,113,5.54,114,5.54,115,5.54,116,5.54,155,0.964,156,2.567,166,2.259,477,2.647,480,3.63,481,4.388,702,6.253,704,5.523,707,5.167,734,3.654,735,4.225,736,2.994,737,3.777,738,5.54,739,4.112,740,5.842,741,6.796,742,4.229,743,4.112,744,6.175,745,4.112,746,6.796,747,6.796,748,6.796,749,6.796,750,6.796,751,4.112,752,6.796,753,6.796,754,6.796,755,6.796,756,6.796,757,4.112,758,5.316,759,4.112,760,4.112,761,6.032,762,6.945,763,3.632,764,4.112,765,4.112,766,4.112,767,7.399,768,3.654]],["title/modules/BankModule.html",[84,0.385,434,3.416]],["body/modules/BankModule.html",[0,0.324,3,0.114,4,0.104,5,0.097,7,0.341,8,1.36,10,1.188,43,0.007,74,0.305,83,1.093,84,0.714,85,0.114,92,0.005,93,0.006,94,0.005,123,2.908,129,1.866,130,1.765,136,2.436,142,3.003,174,1.413,198,1.135,242,2.46,243,2.575,244,2.837,245,2.837,246,2.636,247,3.558,248,3.738,252,3.463,253,2.837,254,2.575,256,4.696,257,4.696,258,2.587,259,2.297,260,4.094,261,4.369,434,6.875,700,6.89,702,5.734,703,6.594,716,5.722,769,5.722,770,5.722,771,5.722,772,6.44,773,6.44]],["title/injectables/BankService.html",[263,1.366,703,3.242]],["body/injectables/BankService.html",[0,0.382,3,0.06,4,0.082,5,0.069,7,0.341,8,0.878,10,1.19,12,0.977,13,2.003,15,2.433,16,2.177,18,1.817,19,1.484,23,2.078,24,0.613,36,0.225,38,0.897,42,0.49,43,0.007,44,0.893,51,0.777,73,2.094,74,0.295,83,0.576,84,0.546,85,0.06,92,0.006,93,0.004,94,0.004,102,1.458,129,1.205,130,1.14,132,2.223,133,3.222,134,2.269,136,1.573,140,2.295,141,1.383,142,1.94,146,3.058,147,2.357,148,2.565,149,2.295,150,2.701,152,2.824,154,1.572,155,0.895,156,1.605,157,1.664,158,1.514,159,3.19,160,2.357,166,2.315,168,2.357,169,2.824,171,2.703,174,1.424,175,2.659,176,2.129,178,2.551,179,2.581,180,2.565,184,2.357,185,2.717,187,3.557,190,3.107,193,1.296,194,1.497,198,0.598,204,1.422,206,1.422,210,1.495,212,1.618,216,2.438,221,1.361,222,3.756,224,1.543,229,3.888,233,2.565,258,1.671,259,1.974,263,1.455,264,1.458,266,2.181,267,2.295,269,2.922,270,3.295,271,1.741,272,2.729,273,3.621,274,3.156,275,1.984,276,3.156,277,2.274,278,3.753,279,1.706,281,3.953,282,3.975,284,2.985,286,2.03,289,3.156,291,3.754,295,1.678,296,4.511,297,2.579,299,2.431,300,1.824,301,2.307,302,1.575,303,2.109,304,3.412,305,3.453,306,3.783,307,4.199,308,2.224,309,3.783,310,2.822,311,1.773,312,1.984,313,2.201,314,4.098,315,3.146,317,1.953,318,1.458,319,3.156,320,2.109,321,2.109,322,3.783,323,3.783,324,3.783,325,3.381,326,2.109,327,2.201,328,1.389,329,2.109,330,2.027,331,4.139,332,2.109,334,2.201,335,1.953,337,1.767,338,2.109,339,2.307,340,2.307,341,3.033,342,2.109,343,1.458,344,1.767,345,3.156,348,2.201,349,2.922,350,2.027,351,3.033,352,2.431,353,1.885,354,1.767,355,1.953,356,2.922,357,2.109,358,2.765,359,1.389,361,2.109,362,2.027,363,2.902,364,2.109,365,2.307,374,2.491,482,5.627,523,1.885,702,6.246,703,5.163,704,4.919,714,1.618,715,1.495,717,3.014,718,2.431,774,3.014,775,2.325,776,2.201,777,5.077,778,3.392,779,3.392,780,3.295,781,3.392,782,3.392,783,3.392,784,1.714,785,3.014,786,3.392,787,5.077,788,2.201,789,3.392,790,3.014,791,2.765,792,2.579,793,3.014,794,2.431]],["title/classes/BankUpdateDto.html",[0,0.24,718,3.416]],["body/classes/BankUpdateDto.html",[0,0.478,2,1.016,3,0.115,4,0.104,5,0.097,7,0.342,8,1.363,9,2.647,10,1.338,11,3.304,12,0.952,13,2.594,14,2.062,16,2.819,24,0.952,38,1.046,43,0.007,73,2.441,74,0.272,76,1.452,83,1.097,84,0.522,85,0.115,92,0.005,93,0.006,94,0.005,97,3.472,98,3.71,102,3.386,156,2.491,185,2.854,224,2.688,343,3.386,367,4.426,368,4.707,369,4.379,370,4.899,371,4.707,372,4.899,373,4.707,374,3.866,375,3.862,376,3.862,702,5.742,704,6.17,718,5.647,795,5.745,796,6.465]],["title/classes/Banks.html",[0,0.24,482,3.242]],["body/classes/Banks.html",[0,0.433,2,0.716,3,0.081,4,0.074,5,0.082,7,0.272,8,1.086,9,2.11,10,0.949,12,0.758,14,1.463,19,1.835,24,1.013,30,2.352,31,2.04,36,0.302,38,0.915,40,1.895,42,0.578,43,0.007,44,0.97,47,2.533,51,0.848,53,3.672,57,2.633,58,2.633,64,1.872,66,1.857,69,3.614,74,0.157,76,1.024,83,0.774,84,0.368,85,0.081,92,0.003,93,0.005,94,0.003,97,3.41,98,2.633,99,3.614,100,3.91,101,3.593,102,2.698,103,2.766,106,5.118,107,4.075,108,4.075,109,3.081,110,4.621,112,6.382,113,5.855,114,5.855,115,5.855,116,5.855,118,5.579,120,4.708,155,0.983,166,2.106,295,2.135,477,2.769,480,3.797,481,4.491,482,5.707,702,6.265,707,5.462,735,4.465,736,3.165,737,3.992,738,5.855,744,6.38,758,5.521,761,6.309,762,7.213,797,4.05,798,6.279,799,4.558,800,5.462,801,5.462,802,5.462,803,5.462,804,5.462,805,4.558,806,5.855,807,5.855,808,5.855,809,5.855,810,5.855,811,4.558,812,5.147,813,5.147,814,5.147,815,5.147,816,5.147,817,4.558,818,4.558,819,4.558,820,4.558]],["title/classes/Cities.html",[0,0.24,821,3.416]],["body/classes/Cities.html",[0,0.447,2,0.811,3,0.092,4,0.083,5,0.087,7,0.296,8,1.181,9,2.294,10,1.032,12,0.824,14,1.591,19,1.995,24,1.051,30,2.474,31,2.048,36,0.342,40,1.867,42,0.573,43,0.007,44,0.962,47,2.519,51,0.836,53,3.649,57,2.863,58,2.863,64,1.969,66,1.937,69,3.93,74,0.178,76,1.159,83,0.876,84,0.417,85,0.092,92,0.004,93,0.005,94,0.004,97,3.588,98,2.863,99,3.93,100,3.449,101,3.169,102,2.934,103,3.008,107,4.431,108,4.431,110,4.553,120,4.678,155,0.961,166,2.185,477,2.443,480,4.67,481,4.114,735,4.757,736,3.371,737,4.252,800,5.192,801,5.192,802,5.192,803,5.192,804,5.192,806,6.238,807,6.238,808,6.238,809,6.238,810,6.238,812,5.483,813,5.483,814,5.483,815,5.483,816,5.483,821,6.236,822,4.585,823,6.828,824,4.893,825,5.16,826,7.652,827,5.16,828,5.539,829,5.16,830,7.526,831,5.16,832,5.16]],["title/controllers/CityController.html",[121,1.507,833,3.624]],["body/controllers/CityController.html",[0,0.218,3,0.077,4,0.07,5,0.049,7,0.407,10,1.144,12,1.044,31,1.789,36,0.287,38,0.942,40,0.954,42,0.577,43,0.007,44,0.936,51,0.786,73,2.386,74,0.298,76,0.972,85,0.077,92,0.005,93,0.005,94,0.003,121,1.368,123,1.424,125,2.585,132,2.79,133,3.61,134,2.848,141,1.24,146,3.178,147,2.811,148,3.06,149,1.956,150,2.794,151,2.943,152,2.811,154,1.611,155,0.936,156,1.915,157,1.328,158,1.599,159,3.315,160,2.009,162,2.585,163,1.805,164,3.256,166,2.374,168,2.811,169,2.811,170,2.585,171,2.977,172,2.943,174,1.26,175,2.447,176,2.539,178,2.539,179,2.67,180,2.186,182,3.618,184,2.009,185,2.871,187,3.421,190,2.479,191,2.972,192,2.585,193,1.653,194,1.672,195,4.705,196,3.618,197,3.639,198,0.763,199,3.366,200,4.759,201,4.522,202,2.123,203,2.405,204,1.814,206,1.814,210,1.907,212,2.064,215,1.859,216,1.341,218,4.585,219,2.943,220,2.491,221,1.378,224,1.315,226,4.522,230,2.69,233,2.186,238,2.585,295,1.671,363,2.889,480,4.725,714,2.064,715,1.907,735,5.132,821,6.557,833,4.605,834,3.845,835,5.148,836,4.327,837,4.327,838,4.327,839,4.327,840,4.327,841,4.327,842,4.327,843,4.327,844,4.753,845,3.845,846,3.845,847,4.327,848,4.327,849,4.327,850,4.327,851,6.987,852,4.327,853,4.327,854,4.327,855,4.327,856,4.327,857,4.327,858,4.327,859,4.327,860,4.327,861,4.327,862,4.327]],["title/classes/CityDto.html",[0,0.24,835,3.242]],["body/classes/CityDto.html",[0,0.46,2,0.74,3,0.084,4,0.076,5,0.083,7,0.393,8,1.111,9,2.157,10,1.281,11,2.692,12,0.948,13,2.114,14,1.496,15,3.138,18,2.297,19,1.876,20,3.934,21,4.688,22,3.344,23,2.629,24,0.948,25,3.836,26,2.453,27,3.836,28,2.903,29,2.509,30,1.951,31,1.982,32,2.559,33,3.139,34,3.568,35,3.452,36,0.312,38,1.002,40,1.912,41,3.691,42,0.564,43,0.007,44,0.951,47,2.446,49,4.205,51,0.836,53,3.29,54,3.696,55,2.636,57,2.692,58,2.692,60,3.063,61,3.836,62,3.696,63,3.452,64,1.898,65,3.056,66,1.984,67,2.568,69,3.696,74,0.252,75,3.284,76,1.058,77,3.805,78,4.517,79,4.086,80,3.15,81,2.829,82,3.138,83,0.799,84,0.38,85,0.084,91,3.568,92,0.003,93,0.005,94,0.003,155,0.939,157,1.22,166,2.216,477,2.808,480,4.682,481,3.964,735,4.542,736,3.219,737,4.06,800,5.555,801,5.555,802,5.555,803,5.555,804,5.555,812,5.236,813,5.236,814,5.236,815,5.236,816,5.236,828,5.337,830,7.297,835,5.764,863,4.185,864,4.709,865,4.601,866,4.709,867,4.709,868,4.709,869,4.882,870,4.709,871,4.709,872,4.709,873,4.709]],["title/modules/CityModule.html",[84,0.385,435,3.416]],["body/modules/CityModule.html",[0,0.325,3,0.115,4,0.104,5,0.097,7,0.341,8,1.362,43,0.007,74,0.305,83,1.096,84,0.714,85,0.115,92,0.005,93,0.006,94,0.005,123,2.911,129,1.869,130,1.768,136,2.44,142,3.008,174,1.415,198,1.138,242,2.467,243,2.582,244,2.845,245,2.845,246,2.643,247,3.562,248,3.743,252,3.469,253,2.845,254,2.582,256,4.704,257,4.704,258,2.592,259,2.301,260,4.1,261,4.376,435,6.877,480,4.339,833,6.895,844,6.596,845,5.737,874,5.737,875,5.737,876,5.737,877,6.456,878,6.456]],["title/injectables/CityService.html",[263,1.366,844,3.242]],["body/injectables/CityService.html",[0,0.284,3,0.053,4,0.048,5,0.034,7,0.314,10,1.094,12,0.94,18,1.074,24,0.559,36,0.199,38,0.855,40,1.596,42,0.497,43,0.007,44,0.911,47,0.797,51,0.769,53,1.258,64,0.726,73,1.89,74,0.291,84,0.456,85,0.053,89,1.393,92,0.005,93,0.003,94,0.002,132,2.088,133,2.206,134,2.131,141,0.947,146,3.015,147,2.147,148,2.337,149,2.091,150,2.536,152,2.147,154,1.48,155,0.934,156,1.462,157,1.656,158,1.466,159,3.145,160,2.147,163,0.894,166,2.287,168,2.147,169,2.62,171,2.56,174,1.451,175,2.222,176,1.939,178,1.939,179,2.423,180,2.337,184,2.147,185,2.577,187,3.272,190,2.963,193,1.146,194,1.428,198,0.529,204,1.258,206,1.258,210,1.322,212,1.431,216,2.337,221,1.305,222,3.709,224,1.405,229,3.65,233,2.337,263,1.326,264,1.289,271,1.586,273,3.025,275,1.807,277,2.818,278,3.715,279,1.554,281,3.769,282,3.81,284,2.769,286,1.849,289,2.875,291,3.525,295,1.557,296,4.389,300,1.613,301,2.041,302,1.393,303,1.865,304,3.204,305,2.041,306,2.875,307,2.875,308,2.063,309,3.509,310,1.667,311,1.825,312,1.807,313,1.947,314,4.056,315,3.016,316,2.281,317,1.727,319,2.875,320,1.865,321,1.865,322,3.509,323,3.509,324,3.509,325,3.136,326,1.865,327,1.947,328,1.228,329,1.865,330,1.792,332,1.865,334,1.947,335,1.727,338,1.865,339,2.041,340,2.041,341,2.763,343,2.725,344,3.303,345,2.875,348,1.947,349,2.662,350,1.792,351,2.763,355,1.727,356,2.662,357,1.865,358,2.446,359,1.893,361,1.865,362,1.792,363,2.692,364,1.865,365,2.041,374,2.269,405,3.517,476,3.146,480,4.599,513,4.11,523,1.667,714,1.431,715,1.322,735,2.875,736,1.322,737,1.667,776,1.947,780,3.002,788,1.947,790,4.11,791,3.77,792,3.517,794,2.15,821,4.909,835,4.66,844,3.146,846,2.666,879,2.666,880,4.822,881,3.943,882,4.625,883,3,884,3,885,3,886,3,887,3,888,3,889,2.15,890,2.15,891,3,892,4.625,893,2.446,894,3.517,895,3,896,3.146,897,3,898,4.601,899,5.922,900,4.625,901,5.581,902,3.346,903,4.166,904,2.659,905,3.517,906,3.517,907,4.625,908,4.044,909,4.625,910,3.517,911,4.625,912,4.625,913,6.087,914,4.625,915,2.281,916,1.667,917,3,918,1.431,919,2.091,920,3,921,3,922,1.356,923,1.613,924,1.563,925,5.644,926,3,927,4.11,928,3,929,2.666,930,3.517,931,4.841,932,2.666,933,3.77,934,3.77,935,2.15,936,3,937,3,938,3,939,3,940,3,941,1.051,942,2.281,943,3,944,3,945,1.393,946,2.666,947,3,948,3,949,1.792,950,4.11,951,3,952,3,953,3,954,2.446]],["title/injectables/CommaSeparated.html",[263,1.366,955,3.624]],["body/injectables/CommaSeparated.html",[0,0.42,3,0.088,4,0.08,5,0.057,7,0.325,20,4.077,32,2.805,35,2.66,36,0.328,38,0.785,42,0.413,43,0.007,44,0.938,51,0.655,53,2.075,55,2.691,67,2.655,74,0.229,85,0.142,88,2.777,92,0.004,93,0.005,94,0.004,141,1.359,146,2.278,154,1.262,155,0.867,158,1.604,179,3.06,194,1.648,198,0.873,221,1.386,263,2.148,264,2.126,272,2.66,308,2.928,311,1.64,315,3.202,328,3.068,387,4.61,536,5.049,637,4.313,742,4.575,918,2.361,955,6.09,956,4.034,957,6.109,958,5.849,959,7.116,960,7.116,961,3.82,962,5.9,963,4.451,964,5.9,965,8.19,966,4.949,967,7.934,968,5.986,969,5.9,970,4.949,971,4.659,972,6.109,973,5.9,974,6.109,975,5.421,976,6.109,977,6.659,978,7.422,979,3.967,980,4.128,981,3.69,982,4.128,983,3.258,984,5.413,985,5.413,986,5.413,987,5.9,988,4.398,989,4.398,990,4.398,991,4.398,992,4.398,993,4.478,994,5.975,995,3.082,996,4.863,997,3.547,998,3.547,999,4.398,1000,3.077,1001,4.398,1002,2.5,1003,4.398,1004,4.398,1005,4.398,1006,2.849,1007,5.9,1008,4.398,1009,4.398,1010,4.398,1011,4.398,1012,4.398,1013,4.398,1014,4.398,1015,4.398,1016,4.398]],["title/classes/CommonQuery1.html",[0,0.24,1017,3.416]],["body/classes/CommonQuery1.html",[0,0.348,2,0.309,3,0.035,4,0.032,5,0.022,7,0.288,12,1.079,13,1.817,14,0.766,15,1.695,16,2.136,18,2.786,24,0.397,28,2.242,29,1.657,36,0.486,38,0.586,40,0.935,42,0.556,43,0.007,44,0.896,51,0.704,53,1.778,63,2.279,64,1.444,66,1.809,67,1.983,73,1.968,74,0.068,85,0.058,88,2.664,89,1.526,92,0.001,93,0.002,94,0.001,130,1.113,132,1.632,134,2.006,135,2.422,141,1.222,154,0.942,155,0.912,157,0.942,158,1.458,163,0.979,166,2.115,174,1.482,177,1.407,179,1.256,194,1.48,221,1.57,224,0.999,267,2.699,271,1.128,275,1.938,277,3.095,278,3.87,279,1.666,286,1.695,295,1.368,311,1.916,312,1.285,318,3.066,342,1.221,343,3.697,344,4.055,353,3.318,385,2.242,409,2.208,410,1.056,452,3.083,580,1.526,601,2.727,648,3.312,649,2.356,652,0.888,653,0.888,775,2.866,880,5.255,881,1.221,896,4.061,899,6.299,901,4.543,902,3.945,903,3.436,904,3.208,905,3.77,906,4.54,910,3.77,919,2.495,922,3.459,923,1.056,924,1.023,931,4.757,945,3.402,961,1.568,993,2.582,995,1.968,1000,3.941,1002,2.142,1006,1.13,1017,2.356,1018,1.493,1019,4.042,1020,2.962,1021,4.042,1022,5.633,1023,3.209,1024,4.042,1025,4.032,1026,5.633,1027,2.921,1028,2.665,1029,4.042,1030,1.827,1031,3.456,1032,3.287,1033,3.456,1034,3.456,1035,3.016,1036,3.038,1037,1.964,1038,4.042,1039,5.817,1040,4.042,1041,1.964,1042,3.456,1043,2.433,1044,3.98,1045,1.964,1046,1.964,1047,1.745,1048,1.964,1049,3.456,1050,6.126,1051,3.456,1052,3.038,1053,2.236,1054,2.5,1055,3.456,1056,2.68,1057,3.224,1058,2.279,1059,1.964,1060,3.456,1061,3.456,1062,1.964,1063,1.964,1064,2.68,1065,2.962,1066,3.567,1067,5.975,1068,4.867,1069,2.68,1070,4.5,1071,4.853,1072,2.68,1073,4.042,1074,4.54,1075,1.601,1076,0.992,1077,2.68,1078,1.601,1079,1.256,1080,1.091,1081,1.274,1082,0.992,1083,1.221,1084,1.917,1085,1.601,1086,1.601,1087,1.601,1088,1.601,1089,1.274,1090,1.964,1091,1.601,1092,1.601,1093,0.688,1094,1.336,1095,0.992,1096,2.68,1097,5.817,1098,5.633,1099,5.817,1100,4.042,1101,4.042,1102,3.77,1103,5.817,1104,5.817,1105,4.042,1106,4.867,1107,4.867,1108,4.5,1109,4.5,1110,1.601,1111,1.601,1112,1.601,1113,3.456,1114,1.767,1115,2.665,1116,1.767,1117,1.767,1118,1.767,1119,1.346,1120,2.68,1121,2.68,1122,1.601,1123,2.68,1124,2.68,1125,2.68,1126,1.601,1127,2.68,1128,2.68,1129,5.42,1130,5.42,1131,3.456,1132,4.042,1133,4.042,1134,4.042,1135,4.042,1136,4.042,1137,2.68,1138,4.042,1139,4.042,1140,4.042,1141,2.68,1142,1.601,1143,3.038,1144,3.218,1145,3.456,1146,1.601,1147,1.964,1148,1.964,1149,3.77,1150,4.867,1151,4.867,1152,1.601,1153,2.68,1154,2.68,1155,1.601,1156,2.68,1157,1.601,1158,3.456,1159,1.13,1160,1.336,1161,2.68,1162,2.68,1163,1.601,1164,1.601,1165,1.601,1166,2.68,1167,0.66]],["title/classes/CommonQuery5.html",[0,0.24,881,2.963]],["body/classes/CommonQuery5.html",[0,0.349,2,0.311,3,0.035,4,0.032,5,0.023,7,0.289,12,1.041,13,1.826,14,0.772,15,1.707,16,1.985,18,2.278,24,0.4,28,2.254,29,1.668,36,0.487,38,0.753,40,0.941,42,0.562,43,0.007,44,0.915,51,0.684,53,1.789,63,2.294,64,1.451,66,1.813,67,1.994,73,1.655,74,0.068,85,0.059,88,2.669,89,1.538,92,0.001,93,0.002,94,0.001,130,1.12,132,1.642,134,1.113,135,2.432,141,1.228,154,1.21,155,0.933,157,0.811,158,1.443,163,0.987,166,2.063,174,1.426,177,1.42,179,1.266,194,1.484,221,1.571,224,0.602,267,2.508,271,1.136,275,1.949,277,2.962,278,3.878,279,1.676,286,1.707,295,1.376,311,1.917,312,0.774,318,2.577,342,1.232,343,3.68,344,4.065,353,3.333,385,2.254,409,2.223,410,1.065,452,3.1,580,1.538,601,2.508,648,3.729,649,2.372,652,0.896,653,0.896,775,2.874,880,5.273,881,2.059,896,4.717,899,6.311,901,4.562,902,3.949,903,3.452,904,3.154,905,3.792,906,5.443,910,3.792,919,2.508,922,3.469,923,1.065,924,1.032,931,4.77,945,2.955,961,1.58,993,2.597,995,1.981,1000,3.958,1002,2.156,1006,1.141,1017,1.42,1018,1.507,1019,4.066,1020,2.979,1021,4.066,1022,5.441,1023,2.982,1024,4.066,1025,4.044,1026,5.653,1027,2.943,1028,1.065,1029,4.066,1030,1.841,1031,3.479,1033,3.479,1034,3.479,1035,3.03,1036,3.058,1038,4.066,1039,5.836,1040,4.066,1042,3.479,1043,2.447,1044,3.765,1047,1.761,1049,3.479,1050,6.246,1051,3.479,1052,3.058,1053,1.348,1054,1.507,1055,2.7,1056,1.615,1057,3.245,1058,2.294,1060,3.479,1061,3.479,1064,2.7,1065,2.979,1066,3.583,1067,5.994,1068,4.89,1069,2.7,1070,4.523,1071,4.869,1072,2.7,1073,4.066,1074,4.561,1075,1.615,1076,1.001,1077,2.7,1078,1.615,1079,1.266,1080,1.101,1081,1.286,1082,1.001,1083,1.232,1084,1.929,1085,1.615,1086,1.615,1087,1.615,1088,1.615,1089,1.286,1090,1.979,1091,1.615,1092,1.615,1093,0.694,1094,1.348,1095,1.001,1096,2.7,1097,5.836,1098,5.653,1099,5.836,1100,4.066,1101,4.066,1102,3.792,1103,5.836,1104,5.836,1105,4.066,1106,4.89,1107,4.89,1108,4.523,1109,4.523,1110,1.615,1111,1.615,1112,1.615,1113,3.479,1114,1.781,1115,2.681,1116,1.781,1117,1.781,1118,1.781,1119,1.356,1120,2.7,1121,2.7,1122,1.615,1123,2.7,1124,2.7,1125,2.7,1126,1.615,1127,2.7,1128,2.7,1129,5.441,1130,5.441,1131,3.479,1132,4.066,1133,4.066,1134,4.066,1135,4.066,1136,4.066,1137,2.7,1138,4.066,1139,4.066,1140,4.066,1141,2.7,1142,3.479,1143,3.058,1144,3.237,1145,3.479,1146,1.615,1147,1.979,1148,1.979,1149,3.792,1150,4.89,1151,4.89,1152,3.479,1153,2.7,1154,2.7,1155,1.615,1156,2.7,1157,3.479,1158,4.523,1159,1.141,1160,1.348,1161,2.7,1162,2.7,1163,1.615,1164,1.615,1165,1.615,1166,2.7,1167,0.666,1168,3.312,1169,1.982,1170,1.982,1171,1.982,1172,1.982,1173,1.982,1174,3.058,1175,1.982,1176,1.982,1177,1.982,1178,1.982,1179,1.982]],["title/classes/ConfigService.html",[0,0.24,1180,2.649]],["body/classes/ConfigService.html",[0,0.376,2,0.577,3,0.065,4,0.059,5,0.042,32,1.287,36,0.243,38,0.754,42,0.437,43,0.007,44,0.937,51,0.771,55,1.809,64,1.542,74,0.307,81,3.294,82,3.124,85,0.096,92,0.003,93,0.004,94,0.003,141,1.103,154,1.212,155,0.76,158,1.146,163,1.9,221,1.563,271,1.26,279,2.142,311,1.438,359,1.504,389,4.863,399,2.114,425,2.5,608,4.095,614,2.499,618,2.384,624,2.793,742,3.321,916,2.993,954,2.995,975,3.495,979,2.195,980,2.284,981,2.042,982,2.284,983,1.802,1093,2.234,1180,3.544,1181,2.995,1182,5.386,1183,5.386,1184,5.386,1185,6.139,1186,5.666,1187,3.674,1188,4.786,1189,3.674,1190,4.786,1191,3.674,1192,4.786,1193,3.674,1194,3.674,1195,3.674,1196,3.674,1197,3.674,1198,2.284,1199,4.095,1200,2.793,1201,5.198,1202,2.384,1203,2.284,1204,3.663,1205,3.264,1206,3.86,1207,3.264,1208,3.86,1209,3.264,1210,3.86,1211,3.264,1212,3.86,1213,3.264,1214,3.86,1215,3.264,1216,3.264,1217,2.633,1218,3.264,1219,3.86,1220,3.264,1221,3.86,1222,3.264,1223,3.86,1224,3.264,1225,3.264,1226,2.284,1227,2.499,1228,4.095,1229,2.633,1230,2.793,1231,2.995,1232,4.39,1233,2.995,1234,2.995,1235,2.995,1236,4.786,1237,2.995,1238,2.995,1239,5.34,1240,5.34,1241,5.724,1242,2.995,1243,2.995,1244,2.995,1245,2.995,1246,3.264,1247,4.786,1248,3.663,1249,3.264,1250,4.786,1251,2.384,1252,3.264,1253,5.666,1254,2.384,1255,3.264,1256,3.264,1257,2.114,1258,3.264,1259,3.264,1260,3.264,1261,3.264,1262,2.995,1263,3.264,1264,3.264,1265,3.264,1266,2.384,1267,3.264,1268,3.264,1269,4.786,1270,3.264,1271,4.786,1272,3.264,1273,3.663,1274,3.264,1275,2.995,1276,3.264,1277,2.995,1278,3.264,1279,3.264,1280,3.264,1281,3.264,1282,2.995,1283,3.264,1284,2.995,1285,3.264,1286,3.264,1287,3.663,1288,3.264,1289,2.793,1290,2.995,1291,2.995,1292,2.793,1293,3.264,1294,2.793,1295,3.264,1296,3.264,1297,2.633,1298,3.264,1299,3.264,1300,3.264,1301,2.995,1302,3.264,1303,2.995,1304,3.264,1305,2.995,1306,3.264,1307,2.995,1308,3.264,1309,2.995,1310,3.264,1311,2.995,1312,3.264,1313,2.995,1314,3.264,1315,2.995,1316,3.264,1317,2.995,1318,3.264,1319,3.264,1320,3.264,1321,3.264,1322,3.264,1323,3.264,1324,3.264,1325,3.264,1326,3.264,1327,2.793,1328,3.264,1329,2.995,1330,3.264,1331,2.995,1332,3.264,1333,2.995,1334,3.264,1335,2.995,1336,3.264,1337,2.995,1338,3.264,1339,3.264,1340,2.995,1341,3.264,1342,2.995,1343,3.264,1344,2.995,1345,3.264,1346,2.995,1347,3.264,1348,3.264,1349,2.995,1350,3.264,1351,2.995,1352,3.264,1353,2.995,1354,3.264,1355,2.995,1356,3.264,1357,2.995,1358,3.264,1359,2.995,1360,3.264,1361,3.264,1362,2.995,1363,3.264,1364,2.995,1365,3.264,1366,2.995,1367,3.264,1368,3.264,1369,2.995,1370,3.264,1371,2.995,1372,3.264,1373,2.995,1374,3.264,1375,2.995,1376,3.264,1377,2.995,1378,3.264,1379,2.633,1380,3.264,1381,2.284,1382,3.264,1383,2.284,1384,3.264,1385,2.793,1386,3.264,1387,2.793,1388,3.264,1389,2.793,1390,2.995,1391,2.995]],["title/controllers/ContactController.html",[121,1.507,1392,3.624]],["body/controllers/ContactController.html",[0,0.346,3,0.122,4,0.111,5,0.079,31,1.544,36,0.455,38,0.813,42,0.428,43,0.007,51,0.679,74,0.312,76,1.544,85,0.122,92,0.005,93,0.006,94,0.005,121,2.174,123,2.264,125,4.108,132,2.692,141,1.674,149,3.109,150,3.742,154,1.307,155,0.744,158,1.236,191,3.374,197,4.546,198,1.213,202,3.374,210,3.03,215,2.955,216,2.131,220,3.958,221,1.19,473,5.937,1392,6.219,1393,5.861,1394,6.111,1395,6.877,1396,5.937,1397,6.111,1398,4.928,1399,6.877,1400,6.877,1401,6.877]],["title/classes/ContactDto.html",[0,0.24,1398,3.416]],["body/classes/ContactDto.html",[0,0.413,2,0.941,3,0.106,4,0.097,5,0.068,7,0.373,12,0.908,24,0.908,31,1.844,32,2.098,33,2.573,36,0.397,38,1.018,39,5.886,40,2.026,42,0.601,43,0.007,44,0.915,47,2.405,49,4.728,51,0.811,54,3.447,55,2.525,57,3.151,58,3.151,60,3.585,61,4.49,62,4.326,63,4.04,64,2.083,65,3.887,66,2.03,67,3.005,74,0.283,75,3.284,76,1.345,77,3.914,78,4.326,79,3.914,80,3.687,81,3.311,82,3.005,85,0.106,91,3.328,92,0.004,93,0.006,94,0.004,155,0.932,473,6.541,1393,6.173,1398,5.386,1402,5.321,1403,8.213,1404,5.321,1405,8.213,1406,5.715,1407,5.989,1408,5.989,1409,5.989,1410,5.321]],["title/modules/ContactModule.html",[84,0.385,436,3.416]],["body/modules/ContactModule.html",[0,0.313,3,0.111,4,0.101,5,0.071,43,0.007,74,0.301,84,0.675,85,0.111,92,0.005,93,0.006,94,0.005,123,2.533,155,0.833,198,1.097,242,2.377,243,2.488,244,2.741,245,2.741,246,2.547,247,3.504,248,2.741,252,3.391,253,2.741,254,2.488,302,4.165,399,4.43,436,6.55,457,3.868,473,5.684,742,4.008,1273,5.235,1392,6.354,1393,4.459,1396,6.217,1397,5.528,1411,5.528,1412,5.528,1413,6.222,1414,6.222,1415,9.14,1416,5.072,1417,6.222,1418,7.696,1419,6.222,1420,7.696,1421,6.839,1422,6.222,1423,7.696,1424,5.852,1425,7.696,1426,8.356,1427,7.696,1428,7.696,1429,6.222,1430,3.581,1431,6.222,1432,6.222,1433,6.222,1434,6.222]],["title/injectables/ContactService.html",[263,1.366,1396,3.242]],["body/injectables/ContactService.html",[0,0.261,3,0.092,4,0.084,5,0.059,24,0.827,36,0.344,38,0.81,42,0.508,43,0.007,44,0.524,51,0.86,64,1.255,67,2.74,72,3.717,74,0.281,85,0.092,88,2.166,92,0.005,93,0.005,94,0.004,128,2.873,132,2.525,141,1.403,146,2.989,149,3.097,150,3.685,154,1.302,155,0.741,157,1.302,158,1.378,159,2.451,164,2.788,198,0.915,210,2.285,216,2.701,221,1.508,222,2.408,263,1.964,264,2.229,278,4.431,279,2.302,308,2.805,311,1.571,315,3.068,384,2.986,387,2.986,410,2.788,473,6.318,494,5.55,516,3.944,580,2.408,676,4.446,1393,6.369,1396,4.66,1398,3.717,1416,4.229,1421,6.088,1435,4.609,1436,7.671,1437,7.671,1438,8.16,1439,7.744,1440,5.187,1441,8.888,1442,7.671,1443,6.851,1444,6.851,1445,5.187,1446,5.187,1447,5.187,1448,5.187,1449,6.851,1450,6.851,1451,6.851,1452,6.851,1453,5.187,1454,5.187,1455,7.671,1456,7.671,1457,5.187,1458,5.187,1459,5.585,1460,6.851,1461,5.187,1462,5.187,1463,4.609,1464,5.187,1465,5.187,1466,5.585,1467,5.187,1468,5.187,1469,5.187,1470,4.609,1471,5.187,1472,5.187,1473,5.187,1474,5.187,1475,6.851,1476,5.187,1477,6.851,1478,6.851,1479,5.187,1480,5.187,1481,6.851,1482,5.187,1483,4.229,1484,5.187,1485,5.187,1486,5.187,1487,5.187,1488,5.187,1489,5.187]],["title/controllers/CountriesController.html",[121,1.507,1490,3.624]],["body/controllers/CountriesController.html",[0,0.31,3,0.051,4,0.046,5,0.062,7,0.383,8,0.768,10,0.932,12,0.855,31,1.384,36,0.188,38,0.729,40,0.627,42,0.542,43,0.007,44,0.862,47,1.637,50,4.688,51,0.608,66,1.248,73,2.111,74,0.323,76,1.384,83,0.483,84,0.23,85,0.11,92,0.004,93,0.003,94,0.002,121,2.419,123,0.937,126,1.735,127,1.817,129,1.054,132,2.435,133,2.941,134,2.246,136,1.376,141,0.909,146,2.958,147,3.103,149,1.286,150,2.958,152,2.06,154,1.346,155,0.828,156,1.949,157,1.037,158,1.375,159,3.139,160,1.321,162,1.7,163,1.323,164,2.386,166,2.089,168,2.06,169,2.06,170,1.7,171,2.86,174,1.436,175,2.681,178,2.585,179,1.696,182,1.7,184,1.321,185,2.594,187,3.202,190,1.817,191,2.178,192,3.683,193,2.355,194,1.397,195,3.393,196,2.652,197,2.312,198,1.087,200,4.894,201,3.26,202,3.025,203,1.581,204,1.861,206,2.585,210,1.956,212,1.357,215,2.649,216,1.91,218,3.141,220,1.638,221,1.28,222,3.288,224,0.865,226,4.419,230,1.769,238,1.7,258,1.461,291,1.581,295,1.224,311,1.368,312,2.891,328,1.165,363,3.379,383,2.386,408,1.861,409,2.312,477,3.343,490,2.862,499,3.019,510,2.881,645,1.638,648,2.06,714,1.357,715,1.956,736,2.716,742,2.312,1053,3.019,1490,5.979,1491,2.528,1492,5.316,1493,2.242,1494,2.845,1495,2.845,1496,2.845,1497,2.845,1498,2.845,1499,2.845,1500,4.439,1501,3.375,1502,2.845,1503,2.845,1504,2.845,1505,5.174,1506,5.478,1507,2.845,1508,3.181,1509,6.165,1510,5.457,1511,2.845,1512,2.845,1513,3.618,1514,2.528,1515,2.845,1516,1.769,1517,2.845,1518,2.528,1519,2.845,1520,2.845,1521,2.528,1522,2.528,1523,2.845,1524,2.845,1525,2.528,1526,2.528,1527,2.845,1528,5.457,1529,5.457,1530,5.457,1531,6.685,1532,5.457,1533,5.457,1534,4.547,1535,5.457,1536,3.911,1537,5.457,1538,4.439,1539,4.439,1540,3.936,1541,4.439,1542,4.469,1543,4.439,1544,2.06,1545,4.439,1546,4.439,1547,4.439,1548,4.439,1549,4.439,1550,4.439,1551,4.15,1552,4.439,1553,2.845,1554,3.375,1555,3.712,1556,2.845,1557,2.845,1558,3.181,1559,2.164,1560,2.652,1561,2.164,1562,4.439,1563,2.845]],["title/modules/CountriesModule.html",[84,0.385,437,3.416]],["body/modules/CountriesModule.html",[0,0.325,3,0.115,4,0.104,5,0.097,7,0.341,8,1.362,43,0.007,74,0.305,83,1.096,84,0.714,85,0.115,92,0.005,93,0.006,94,0.005,123,2.911,129,1.869,130,1.768,136,2.44,142,3.008,174,1.415,198,1.138,242,2.467,243,2.582,244,2.845,245,2.845,246,2.643,247,3.562,248,3.743,252,3.469,253,2.845,254,2.582,256,4.704,257,4.704,258,2.592,259,2.301,260,4.1,261,4.376,437,6.877,477,2.817,1490,6.895,1492,5.11,1505,6.029,1506,5.737,1564,5.737,1565,5.737,1566,5.737,1567,6.456,1568,6.456]],["title/injectables/CountriesService-1.html",[66,0.914,263,1.145,1505,2.484]],["body/injectables/CountriesService-1.html",[0,0.362,3,0.06,4,0.054,5,0.069,7,0.34,8,0.873,10,1.22,12,0.947,15,2.017,16,1.805,18,1.203,19,1.474,23,2.753,24,0.609,26,1.285,36,0.223,38,0.894,40,0.741,42,0.488,43,0.007,44,0.892,51,0.774,73,2.319,74,0.294,83,0.571,84,0.543,85,0.06,92,0.004,93,0.004,94,0.002,103,2.222,129,1.197,130,1.133,132,2.372,133,1.604,134,2.259,136,1.563,138,3.013,140,2.28,141,1.475,142,1.927,146,3.053,147,2.341,148,2.548,152,2.341,154,1.534,155,0.819,156,1.594,157,1.661,158,1.51,159,3.185,160,2.341,164,1.807,166,2.302,168,2.341,169,2.809,171,2.692,174,1.47,175,2.356,176,2.115,178,2.82,179,2.569,180,2.548,184,2.341,185,2.711,187,3.04,190,3.097,193,1.285,194,1.658,198,0.593,204,1.41,206,1.41,210,1.481,212,1.604,216,2.431,221,1.247,222,3.746,224,1.532,229,3.871,258,1.66,259,1.965,263,1.446,264,1.445,266,2.167,267,2.28,269,2.903,270,3.273,271,2.307,272,2.711,273,3.742,274,3.135,275,1.971,276,3.135,277,2.513,278,3.742,279,1.695,281,4.202,282,4.169,284,3.299,286,2.689,289,3.135,291,3.737,295,1.669,296,4.503,300,1.807,302,1.561,303,4.181,304,3.058,306,3.763,307,3.763,308,2.213,309,3.763,310,2.803,311,1.77,312,1.971,313,2.182,314,4.202,315,3.227,316,2.557,317,1.935,319,3.135,320,2.09,321,2.09,322,3.763,323,3.763,324,3.763,325,3.363,326,2.09,327,2.182,328,1.376,329,3.135,330,2.009,332,3.135,334,2.182,335,1.935,338,2.09,341,3.616,345,3.135,348,2.182,349,2.903,350,2.009,351,3.013,353,2.803,355,2.903,356,2.903,357,2.09,359,3.303,360,2.741,361,2.09,362,3.616,363,2.887,364,2.09,374,2.475,385,2.28,393,2.711,477,3.39,523,1.869,714,1.604,715,1.481,775,1.927,776,2.182,780,3.273,788,2.182,792,3.835,889,2.41,890,2.41,894,3.835,908,3.614,1148,3.013,1492,5.237,1505,5.017,1516,5.131,1569,2.988,1570,5.044,1571,4.111,1572,3.431,1573,3.835,1574,5.044,1575,3.362,1576,3.362,1577,3.362,1578,3.362,1579,3.362,1580,2.557,1581,2.41,1582,2.988,1583,2.557,1584,3.362,1585,2.988,1586,3.362,1587,2.988,1588,2.988]],["title/classes/Country.html",[0,0.24,477,1.706]],["body/classes/Country.html",[0,0.404,2,0.566,3,0.064,4,0.058,5,0.072,7,0.23,8,0.918,9,1.783,10,1.173,11,2.226,12,0.641,13,1.747,14,1.919,19,1.551,24,0.84,31,2.007,36,0.239,42,0.603,43,0.007,44,0.992,47,2.574,51,0.882,57,2.226,58,2.226,60,2.532,64,1.524,66,1.591,72,4.517,74,0.124,76,0.809,83,0.611,84,0.291,85,0.064,88,2.344,92,0.003,93,0.004,94,0.003,97,2.339,98,2.226,99,3.055,101,2.464,102,2.281,103,2.339,109,2.604,110,4.804,120,4.903,129,1.26,140,2.399,145,4.155,155,0.959,157,1.198,166,1.332,337,3.622,404,2.226,454,4.327,477,3.417,478,4.426,480,3.413,485,3.61,672,4.04,736,2.777,744,4.036,758,4.287,918,2.532,1002,2.682,1079,2.028,1102,5.289,1493,2.682,1589,3.2,1590,4.717,1591,5.896,1592,4.717,1593,2.95,1594,2.399,1595,6.956,1596,4.327,1597,6.54,1598,6.54,1599,7.15,1600,4.717,1601,4.327,1602,6.303,1603,5.601,1604,4.287,1605,5.139,1606,7.129,1607,6.303,1608,6.101,1609,6.303,1610,6.303,1611,3.602,1612,5.308,1613,5.601,1614,3.602,1615,5.601,1616,3.602,1617,6.325,1618,5.139,1619,5.308,1620,3.602,1621,4.517,1622,3.602,1623,4.717,1624,4.717,1625,5.139,1626,5.139,1627,5.139,1628,5.139,1629,5.139,1630,3.602,1631,3.602,1632,6.181,1633,6.181,1634,5.601,1635,3.602,1636,2.95,1637,3.602,1638,6.303,1639,3.602,1640,6.956,1641,5.308,1642,3.602,1643,5.308,1644,3.602,1645,3.602,1646,5.308,1647,6.303,1648,3.602,1649,3.602]],["title/controllers/CountryController.html",[121,1.507,1650,3.624]],["body/controllers/CountryController.html",[0,0.213,3,0.075,4,0.069,5,0.079,7,0.403,8,1.033,10,1.24,12,0.991,30,1.815,31,1.685,36,0.281,38,0.887,40,1.524,42,0.558,43,0.007,44,0.896,51,0.74,73,2.446,74,0.297,76,0.953,83,0.72,84,0.343,85,0.075,92,0.005,93,0.004,94,0.003,121,1.888,123,1.396,126,2.932,127,3.358,129,1.418,130,1.341,131,3.907,132,2.879,133,3.297,134,2.832,135,2.282,136,1.851,137,3.876,138,3.568,140,2.7,141,1.536,142,2.282,143,3.11,144,3.713,145,3.568,146,3.104,147,2.772,149,1.918,150,2.764,152,3.483,154,1.559,155,0.888,156,1.888,157,1.314,158,1.546,159,3.237,160,1.969,162,2.534,163,2.06,164,2.28,166,2.271,168,2.772,169,2.772,170,2.534,171,2.955,174,1.25,175,2.421,176,2.504,178,2.504,179,2.641,182,2.534,184,1.969,185,2.86,187,3.708,190,2.445,191,2.93,192,2.534,193,1.621,194,1.618,195,4.297,196,3.568,197,3.11,198,0.748,199,3.319,200,4.482,201,4.13,202,2.081,203,2.358,204,1.779,206,1.779,210,1.869,212,2.024,215,1.823,216,1.315,218,4.318,220,2.442,221,1.298,222,3.483,224,1.289,226,4.482,230,2.637,238,2.534,242,2.282,295,1.648,311,1.619,363,3.772,477,3.405,490,2.772,714,2.024,715,1.869,736,3.306,908,3.04,1492,5.47,1505,4.916,1513,4.869,1514,3.77,1516,4.916,1518,3.77,1521,3.77,1522,3.77,1525,3.77,1526,3.77,1581,5.667,1582,3.77,1650,6.238,1651,3.77,1652,3.77,1653,4.242,1654,3.77,1655,4.242,1656,3.77,1657,4.242,1658,3.77,1659,4.242,1660,3.77,1661,4.242,1662,3.77,1663,5.973,1664,4.242,1665,3.77,1666,4.242,1667,4.242]],["title/classes/CountryDto.html",[0,0.24,1516,2.963]],["body/classes/CountryDto.html",[0,0.469,2,0.828,3,0.094,4,0.085,5,0.088,7,0.38,8,1.198,9,2.326,10,1.323,11,2.903,12,0.992,13,2.279,14,1.613,15,3.283,18,2.477,19,2.023,20,4.063,21,4.905,22,3.605,23,2.834,24,0.992,25,4.136,26,2.645,27,4.136,28,3.13,29,2.705,30,2.103,31,1.966,32,2.708,33,3.322,34,3.847,35,3.721,36,0.349,38,0.97,41,3.906,42,0.545,43,0.007,44,0.947,47,2.325,49,4.909,51,0.81,54,3.985,55,2.759,57,2.903,58,2.903,60,3.302,61,4.136,62,3.985,63,3.721,74,0.267,75,3.092,76,1.183,77,4.026,78,4.45,79,4.026,82,3.092,83,0.895,84,0.426,85,0.094,91,3.847,92,0.004,93,0.005,94,0.004,155,0.966,157,1.316,477,3.414,672,4.028,736,3.406,758,5.259,763,5.104,768,4.683,1516,5.442,1596,6.693,1604,5.259,1621,5.54,1668,4.683,1669,5.27,1670,5.27,1671,6.152,1672,6.152,1673,5.643,1674,5.27,1675,4.683,1676,5.643,1677,5.27,1678,5.27,1679,4.683]],["title/classes/CountryMas.html",[0,0.24,1581,3.416]],["body/classes/CountryMas.html",[0,0.454,2,0.87,3,0.098,4,0.089,5,0.09,7,0.31,8,1.237,9,2.401,10,1.081,12,0.863,14,1.666,19,2.089,24,1.071,30,2.542,31,2.054,36,0.367,40,1.91,42,0.575,43,0.007,44,0.958,47,2.507,51,0.826,57,2.997,58,2.997,64,2.023,66,1.811,74,0.191,76,1.243,83,0.939,84,0.447,85,0.098,92,0.004,93,0.005,94,0.004,97,3.686,98,2.997,99,4.114,100,3.611,101,3.318,102,3.071,103,3.149,107,4.638,108,4.638,110,4.497,120,4.656,155,0.977,477,3.451,672,4.105,736,3.488,758,5.385,824,5.122,1581,5.122,1596,6.82,1604,5.385,1621,5.673,1625,6.453,1626,6.453,1627,6.453,1628,6.453,1629,6.453,1680,4.918,1681,5.534,1682,5.534,1683,5.534,1684,5.534]],["title/modules/CountryMasModule.html",[84,0.385,438,3.416]],["body/modules/CountryMasModule.html",[0,0.325,3,0.115,4,0.104,5,0.097,7,0.341,8,1.362,43,0.007,74,0.305,83,1.096,84,0.714,85,0.115,92,0.005,93,0.006,94,0.005,123,2.911,129,1.869,130,1.768,136,2.44,142,3.008,174,1.415,198,1.138,242,2.467,243,2.582,244,2.845,245,2.845,246,2.643,247,3.562,248,3.743,252,3.469,253,2.845,254,2.582,256,4.704,257,4.704,258,2.592,259,2.301,260,4.1,261,4.376,438,6.877,477,2.817,1492,5.11,1505,6.029,1650,6.895,1660,5.737,1685,6.456,1686,6.456,1687,6.456,1688,6.456,1689,6.456]],["title/classes/CreateCountryDto.html",[0,0.24,1508,3.416]],["body/classes/CreateCountryDto.html",[0,0.446,2,0.627,3,0.071,4,0.064,5,0.076,7,0.248,8,0.989,9,1.92,10,1.215,11,2.396,12,0.69,13,1.881,14,1.332,15,2.917,18,2.045,19,1.67,20,3.731,21,4.359,22,2.976,23,2.339,24,0.881,25,3.414,26,2.183,27,3.414,28,2.583,29,2.233,30,1.736,31,2.027,32,2.34,33,2.87,34,3.176,35,3.072,36,0.264,38,0.675,42,0.598,43,0.007,44,0.99,47,2.549,49,2.295,51,0.874,54,2.295,55,1.92,57,3.059,58,3.059,66,1.669,74,0.252,75,3.541,76,0.895,77,2.976,78,4.199,79,4.612,82,3.541,83,0.677,84,0.322,85,0.071,87,2.216,91,2.216,92,0.003,93,0.004,94,0.003,155,0.896,157,1.468,477,3.374,478,3.072,480,2.804,672,4.154,736,2.943,744,4.345,758,5.467,865,4.095,918,2.726,1508,4.095,1516,4.536,1591,5.63,1597,6.296,1598,6.296,1599,4.659,1604,4.543,1605,5.445,1613,5.936,1615,5.936,1621,5.76,1623,6.483,1624,5.078,1625,5.445,1626,5.445,1627,5.445,1628,5.445,1629,5.445,1632,6.483,1633,6.483,1634,5.936,1636,3.176,1690,3.542,1691,5.079,1692,5.936,1693,5.936,1694,5.936,1695,8.037,1696,3.987,1697,3.987,1698,3.987,1699,3.987,1700,3.987,1701,6.68,1702,6.68,1703,6.68,1704,6.68,1705,6.68,1706,3.987,1707,3.987,1708,3.987,1709,3.987,1710,3.987,1711,3.987,1712,3.987,1713,5.715,1714,3.987,1715,3.25,1716,3.987,1717,3.542,1718,5.078,1719,3.987,1720,3.542]],["title/classes/CreateDto.html",[0,0.24,150,1.906]],["body/classes/CreateDto.html",[0,0.452,2,0.674,3,0.076,4,0.069,5,0.079,7,0.403,8,1.041,9,2.021,10,1.244,11,2.522,12,0.727,13,1.98,14,1.918,15,3.014,18,2.153,19,1.758,20,3.82,21,4.503,22,3.133,23,2.463,24,0.91,25,3.594,26,2.299,27,3.594,28,2.72,29,2.351,30,1.828,31,1.969,32,2.435,33,2.987,34,3.343,35,3.234,36,0.284,42,0.582,43,0.007,44,0.955,47,2.517,49,5.17,51,0.834,64,2.192,74,0.26,75,3.45,76,0.963,78,4.966,79,4.286,80,3.411,82,3.291,83,0.728,84,0.346,85,0.076,87,2.382,92,0.003,93,0.004,94,0.003,150,3.291,155,0.972,157,1.143,216,2.717,328,2.846,450,4.686,478,5.188,672,4.147,918,3.316,1203,2.665,1229,4.311,1544,3.498,1608,6.83,1617,6.71,1618,5.667,1636,4.189,1671,5.346,1672,7.314,1673,6.71,1675,5.346,1676,6.144,1679,5.346,1715,3.494,1717,3.809,1718,3.809,1720,3.809,1721,3.809,1722,5.667,1723,5.667,1724,6.891,1725,5.667,1726,4.286,1727,6.177,1728,4.286,1729,6.016,1730,6.697,1731,6.697,1732,4.286,1733,4.286,1734,6.697,1735,6.177,1736,4.286,1737,4.286,1738,5.346,1739,4.286,1740,4.891,1741,4.286,1742,4.286,1743,6.697,1744,4.286,1745,4.286,1746,4.286,1747,4.286]],["title/controllers/CurrenciesController.html",[121,1.507,1748,3.624]],["body/controllers/CurrenciesController.html",[0,0.214,3,0.076,4,0.069,5,0.079,7,0.403,8,1.035,10,1.241,12,0.991,30,1.817,31,1.686,36,0.281,38,0.887,40,1.525,42,0.558,43,0.007,44,0.896,51,0.741,73,2.446,74,0.297,76,0.954,83,0.721,84,0.343,85,0.076,92,0.005,93,0.004,94,0.003,121,1.89,123,1.399,126,2.934,127,3.36,129,1.42,130,1.343,131,3.91,132,2.881,133,3.3,134,2.833,136,1.853,137,3.881,138,3.572,140,2.703,141,1.537,142,2.285,143,3.114,144,3.718,145,3.572,146,3.105,147,2.776,149,1.921,150,3.442,152,3.485,154,1.56,155,0.888,156,1.89,157,1.315,158,1.547,159,3.238,160,1.973,162,2.539,163,2.061,164,2.284,166,2.29,168,2.776,169,2.776,170,2.539,171,2.957,174,1.25,175,2.424,176,2.507,178,2.507,179,2.643,182,2.539,184,1.973,185,2.892,187,3.71,190,2.448,191,2.934,192,2.539,193,1.624,194,1.619,196,3.572,197,3.114,198,0.749,199,3.323,200,4.486,201,4.133,202,2.085,203,2.362,204,1.782,206,1.782,210,1.872,212,2.027,215,1.826,216,1.317,218,4.322,220,2.446,221,1.299,222,3.485,224,1.291,226,4.486,230,2.642,238,2.539,242,2.285,295,1.649,311,1.62,363,3.775,478,5.15,490,2.776,714,2.027,715,1.872,1513,4.875,1652,3.776,1654,3.776,1656,3.776,1658,3.776,1662,3.776,1665,3.776,1691,5.709,1748,6.241,1749,3.776,1750,6.032,1751,5.382,1752,4.25,1753,4.25,1754,4.25,1755,4.25,1756,3.776,1757,3.776,1758,4.25,1759,4.25,1760,4.25,1761,4.25,1762,4.25,1763,2.539,1764,4.25,1765,4.25,1766,4.25,1767,4.25,1768,4.25,1769,4.25,1770,4.25]],["title/modules/CurrenciesModule.html",[84,0.385,439,3.416]],["body/modules/CurrenciesModule.html",[0,0.33,3,0.117,4,0.106,5,0.098,7,0.345,8,1.375,43,0.007,74,0.307,83,1.113,84,0.718,85,0.117,92,0.005,93,0.006,94,0.005,106,6.48,121,2.513,123,2.616,129,2.111,136,2.463,174,1.424,198,1.156,242,2.506,243,2.623,244,2.89,245,2.89,246,2.685,247,3.818,248,2.89,252,3.502,253,2.89,254,2.623,256,4.749,257,4.749,260,4.14,359,3.254,439,6.86,456,6.044,476,5.407,478,4.273,1748,6.504,1750,5.407,1751,6.296,1756,5.828,1771,5.828,1772,5.828,1773,6.559,1774,6.559]],["title/injectables/CurrenciesService.html",[263,1.366,1751,3.242]],["body/injectables/CurrenciesService.html",[0,0.356,3,0.057,4,0.052,5,0.068,7,0.336,8,0.847,10,1.205,12,0.935,15,1.958,16,1.752,18,1.157,19,1.431,23,2.699,24,0.591,26,1.235,36,0.214,38,0.881,40,0.713,42,0.482,43,0.007,44,0.885,51,0.764,73,2.296,74,0.292,83,0.549,84,0.533,85,0.057,92,0.004,93,0.004,94,0.002,103,2.157,129,1.162,130,1.1,132,2.332,133,1.542,134,2.38,136,1.517,138,2.925,140,2.214,141,1.45,142,1.871,146,3.032,147,2.273,148,2.474,149,2.214,150,3.265,152,2.273,154,1.515,155,0.863,156,1.548,157,1.629,158,1.495,159,3.162,160,2.273,166,2.289,168,2.273,169,2.743,171,2.647,174,1.459,175,2.309,176,2.053,178,2.764,179,2.519,180,2.474,184,2.273,187,2.98,190,2.9,193,1.235,194,1.642,198,0.57,204,1.356,206,1.356,210,1.424,216,2.399,221,1.226,222,3.701,224,1.488,229,3.795,258,1.612,259,1.926,263,1.403,264,1.389,266,2.104,267,2.214,269,2.818,270,3.178,271,2.261,272,2.632,273,3.693,274,3.044,275,1.914,276,3.044,277,2.464,278,3.693,279,1.645,281,4.153,282,4.124,284,3.235,286,2.636,289,3.044,291,3.664,295,1.63,296,4.464,300,1.738,302,1.501,303,3.674,304,2.986,306,4.099,307,3.674,308,2.161,309,3.674,310,2.721,311,1.823,312,2.576,314,4.153,315,3.189,317,2.818,319,3.044,320,2.01,321,2.01,322,3.674,323,3.674,324,3.674,325,3.285,326,2.01,328,1.323,329,3.044,330,1.931,332,2.01,338,2.01,341,2.925,349,4.077,351,3.531,353,2.721,355,3.402,356,3.795,357,2.01,359,3.264,361,2.01,362,3.531,363,2.336,364,2.01,374,2.403,385,2.214,393,2.632,478,5.041,523,1.797,672,3.657,714,1.542,715,1.424,775,1.871,776,2.098,780,3.178,794,2.317,889,2.317,890,2.317,893,6.076,903,3.402,904,2.053,1148,2.925,1571,3.992,1572,3.331,1573,3.723,1580,2.458,1583,2.458,1585,2.873,1587,2.873,1588,2.873,1750,5.424,1751,5.424,1757,2.873,1775,2.873,1776,4.897,1777,3.233,1778,3.233,1779,3.233,1780,3.233,1781,6.294,1782,3.233,1783,3.233,1784,3.233,1785,2.873,1786,3.233,1787,3.233,1788,3.233,1789,3.233,1790,3.233,1791,3.233,1792,3.233,1793,5.252,1794,3.233,1795,3.233,1796,2.873,1797,3.992,1798,5.374,1799,4.818,1800,3.233,1801,2.873,1802,3.992,1803,2.636,1804,3.233,1805,3.233]],["title/classes/Currency.html",[0,0.24,478,2.562]],["body/classes/Currency.html",[0,0.438,2,0.697,3,0.079,4,0.072,5,0.081,7,0.405,8,1.066,9,2.07,10,1.157,12,0.924,14,1.939,19,1.801,22,3.209,24,1.005,30,2.324,31,2.048,33,1.906,36,0.294,38,0.728,42,0.579,43,0.007,44,0.963,47,2.526,51,0.859,53,3.751,54,2.553,55,2.07,57,2.584,58,2.584,60,2.939,61,3.681,62,3.547,63,3.312,64,2.164,74,0.213,75,3.479,76,0.996,77,3.209,83,0.753,84,0.358,85,0.079,91,2.465,92,0.003,93,0.005,94,0.003,97,3.371,98,2.584,99,3.547,100,3.113,101,2.86,102,2.648,103,2.715,107,3.999,108,3.999,155,1.006,166,1.777,328,2.898,478,5.246,672,4.335,824,4.416,918,3.377,1608,7.07,1617,7.294,1618,6.553,1722,5.772,1723,5.772,1724,7.203,1725,5.772,1727,7.143,1730,7.393,1731,7.393,1734,7.393,1735,7.143,1738,5.475,1743,7.393,1806,3.942,1807,6.957,1808,4.436,1809,4.436,1810,4.436,1811,4.436,1812,4.436,1813,4.436,1814,4.436,1815,4.436]],["title/classes/Document.html",[0,0.24,484,2.213]],["body/classes/Document.html",[0,0.45,2,0.836,3,0.095,4,0.086,5,0.089,7,0.302,8,1.205,9,2.341,10,1.053,12,0.841,14,1.623,19,2.036,24,1.06,30,2.504,31,2.037,36,0.352,40,1.971,42,0.565,43,0.007,44,0.948,47,2.493,51,0.813,53,3.68,57,2.921,58,2.921,64,1.993,66,1.957,69,4.01,74,0.183,76,1.195,83,0.903,84,0.43,85,0.095,92,0.004,93,0.005,94,0.004,97,3.631,98,2.921,99,4.01,100,3.519,101,3.234,102,2.993,103,3.069,107,4.521,108,4.521,110,4.43,120,4.598,155,0.968,166,2.069,484,4.514,549,6.973,800,5.906,801,5.906,802,5.906,803,5.906,804,5.906,824,4.992,828,4.739,1816,4.728,1817,5.297,1818,5.123,1819,6.332,1820,5.041,1821,6.973,1822,6.973,1823,6.973,1824,6.973,1825,6.973,1826,5.321,1827,5.321,1828,5.321,1829,5.321]],["title/controllers/DocumentController.html",[121,1.507,1830,3.624]],["body/controllers/DocumentController.html",[0,0.203,3,0.072,4,0.065,5,0.077,7,0.407,8,0.997,10,1.22,12,1.026,30,1.75,31,1.742,36,0.267,38,0.917,40,1.482,42,0.571,43,0.007,44,0.926,51,0.766,73,2.419,74,0.293,76,0.905,83,0.684,84,0.326,85,0.072,92,0.005,93,0.004,94,0.003,121,1.275,123,1.327,125,2.409,126,2.866,127,3.303,129,1.368,130,1.294,131,3.819,132,2.845,133,3.848,134,2.904,135,2.201,136,1.785,137,3.739,138,3.442,140,2.604,141,1.501,142,2.201,143,3,144,3.582,145,3.442,146,3.145,147,2.674,148,2.91,149,1.823,150,2.688,151,2.742,152,2.674,154,1.578,155,0.919,156,1.821,157,1.278,158,1.576,159,3.281,160,1.872,162,2.409,163,1.717,164,3.097,166,2.394,168,2.674,169,2.674,170,2.409,171,2.899,172,2.742,174,1.221,175,2.355,176,2.415,178,2.415,179,2.568,180,2.037,182,3.442,184,1.872,185,2.829,187,3.315,190,2.358,191,2.827,192,2.409,193,1.54,194,1.638,195,4.559,196,3.442,197,3.501,198,0.711,199,3.202,200,4.634,201,4.381,202,1.978,203,2.241,204,1.69,206,1.69,210,1.776,212,1.923,215,1.732,216,1.25,218,4.465,219,2.742,220,2.321,221,1.342,224,1.225,226,4.381,230,2.507,233,2.037,238,2.409,295,1.589,363,2.748,484,4.509,490,2.674,714,1.923,715,1.776,1830,6.135,1831,3.583,1832,5.28,1833,5.276,1834,5.276,1835,4.032,1836,3.583,1837,4.032,1838,4.032,1839,3.583,1840,4.032,1841,3.583,1842,4.032,1843,3.583,1844,3.583,1845,4.032,1846,4.032,1847,4.032,1848,6.722,1849,3.583,1850,3.583,1851,4.032,1852,4.032,1853,4.032,1854,3.583,1855,3.583,1856,4.032,1857,3.583,1858,3.583,1859,4.032]],["title/classes/DocumentDto.html",[0,0.24,1834,3.242]],["body/classes/DocumentDto.html",[0,0.464,2,0.78,3,0.088,4,0.08,5,0.086,7,0.387,8,1.151,9,2.235,10,1.301,11,2.79,12,0.968,13,2.19,14,1.551,15,3.206,18,2.381,19,1.944,20,3.995,21,4.79,22,3.465,23,2.724,24,0.968,25,3.975,26,2.542,27,3.975,28,3.008,29,2.6,30,2.022,31,1.974,32,2.629,33,3.225,34,3.698,35,3.577,36,0.329,38,1.017,40,1.938,41,3.791,42,0.556,43,0.007,44,0.938,47,2.403,49,3.83,51,0.825,53,3.362,54,3.83,55,2.694,57,2.79,58,2.79,60,3.174,61,3.975,62,3.83,63,3.577,64,1.939,65,3.221,66,2.011,67,2.661,69,3.83,74,0.259,75,3.206,76,1.115,77,3.908,78,4.32,79,3.908,80,3.265,81,2.931,82,3.001,83,0.843,84,0.401,85,0.088,91,3.698,92,0.004,93,0.005,94,0.004,155,0.951,157,1.265,166,2.013,484,4.472,549,6.816,828,4.526,865,4.768,1818,4.985,1819,6.118,1820,4.871,1821,6.118,1822,6.118,1823,6.118,1824,6.118,1825,6.118,1834,5.854,1860,4.411,1861,4.964,1862,4.964,1863,5.059,1864,4.964,1865,4.964,1866,4.964]],["title/classes/DocumentGroup.html",[0,0.24,483,3.093]],["body/classes/DocumentGroup.html",[0,0.454,2,0.872,3,0.099,4,0.09,5,0.091,7,0.31,8,1.238,9,2.405,10,1.082,12,0.864,14,1.668,19,2.092,24,1.072,30,2.544,31,2.028,36,0.367,40,1.991,42,0.553,43,0.007,44,0.925,47,2.456,51,0.782,53,3.722,57,3.001,58,3.001,64,2.025,66,1.983,69,4.12,74,0.191,76,1.246,83,0.942,84,0.448,85,0.099,92,0.004,93,0.005,94,0.004,97,3.689,98,3.001,99,4.12,100,3.616,101,3.322,102,3.075,103,3.153,107,4.645,108,4.645,110,4.26,120,4.501,155,0.977,483,5.76,484,4.383,824,5.129,1818,5.87,1820,5.143,1821,7.066,1822,7.066,1823,7.066,1824,7.066,1825,7.066,1832,5.389,1867,4.929,1868,7.158,1869,5.547,1870,7.702,1871,5.547,1872,5.547]],["title/controllers/DocumentGroupController.html",[121,1.507,1873,3.624]],["body/controllers/DocumentGroupController.html",[0,0.196,3,0.069,4,0.063,5,0.075,7,0.405,8,0.971,10,1.205,12,1.016,30,1.705,31,1.717,36,0.257,38,0.904,40,1.452,42,0.568,43,0.007,44,0.921,51,0.755,73,2.4,74,0.29,76,0.873,83,0.66,84,0.314,85,0.069,92,0.005,93,0.004,94,0.003,121,1.229,123,1.279,125,2.322,126,2.818,127,3.262,129,1.332,130,1.26,131,3.755,132,2.82,133,3.801,134,2.879,135,2.144,136,1.739,137,3.641,138,3.352,140,2.537,141,1.476,142,2.144,143,2.922,144,3.488,145,3.352,146,3.127,147,3.057,148,2.835,149,1.757,150,2.633,151,2.644,152,2.605,154,1.561,155,0.91,156,1.774,157,1.252,158,1.563,159,3.262,160,1.804,162,2.322,163,1.672,164,3.016,166,2.386,168,2.605,169,2.605,170,2.322,171,2.858,172,2.644,174,1.274,175,2.307,176,2.353,178,2.353,179,2.516,180,1.963,182,3.352,184,1.804,185,2.806,187,3.26,190,2.297,191,2.753,192,2.322,193,1.485,194,1.62,195,4.483,196,3.352,197,3.429,198,0.685,199,3.118,200,4.568,201,4.308,202,1.907,203,2.16,204,1.63,206,1.63,210,1.712,212,1.854,215,1.67,216,1.204,218,4.402,219,2.644,220,2.237,221,1.323,224,1.181,226,4.308,233,1.963,238,2.322,295,1.548,363,2.677,483,5.331,484,4.515,490,2.605,714,1.854,715,1.712,1818,5.973,1836,3.454,1839,3.454,1841,3.454,1849,3.454,1850,3.454,1854,3.454,1855,3.454,1857,3.454,1858,3.454,1873,6.059,1874,3.454,1875,6.985,1876,5.201,1877,5.201,1878,3.887,1879,3.887,1880,3.887,1881,3.887,1882,3.887,1883,3.454,1884,3.454,1885,3.887,1886,3.887,1887,3.887,1888,6.585,1889,3.887,1890,3.887,1891,3.887,1892,3.887,1893,3.887]],["title/classes/DocumentGroupDto.html",[0,0.24,1877,3.242]],["body/classes/DocumentGroupDto.html",[0,0.467,2,0.812,3,0.092,4,0.083,5,0.087,7,0.377,8,1.182,9,2.295,10,1.316,11,2.865,12,0.984,13,2.249,14,1.592,15,3.258,18,2.445,19,1.996,20,4.041,21,4.867,22,3.558,23,2.797,24,0.984,25,4.082,26,2.61,27,4.082,28,3.089,29,2.67,30,2.076,31,1.955,32,2.682,33,3.289,34,3.797,35,3.673,36,0.342,38,1.029,40,1.957,41,3.868,42,0.542,43,0.007,44,0.911,47,2.312,49,3.933,51,0.804,53,3.416,54,3.933,55,2.737,57,2.865,58,2.865,60,3.259,61,4.082,62,3.933,63,3.673,64,1.97,65,3.352,66,2.031,67,2.732,69,3.933,74,0.264,75,3.061,76,1.16,77,3.987,78,3.933,79,3.558,80,3.352,81,3.01,82,2.732,83,0.877,84,0.417,85,0.092,91,3.797,92,0.004,93,0.005,94,0.004,155,0.961,157,1.299,484,4.419,865,3.702,1818,5.918,1820,4.968,1832,5.267,1863,5.195,1870,7.529,1877,5.921,1894,4.59,1895,5.166,1896,5.166,1897,5.166,1898,5.166]],["title/modules/DocumentGroupModule.html",[84,0.385,440,3.416]],["body/modules/DocumentGroupModule.html",[0,0.323,3,0.114,4,0.104,5,0.097,7,0.34,8,1.358,43,0.007,74,0.304,83,1.09,84,0.713,85,0.114,92,0.005,93,0.006,94,0.005,123,2.906,129,1.863,130,1.762,136,2.432,142,2.999,174,1.412,198,1.132,242,2.454,243,2.568,244,2.83,245,2.83,246,2.629,247,3.554,248,3.734,252,3.458,253,2.83,254,2.568,256,4.689,257,4.689,258,2.583,259,2.293,260,4.087,261,4.362,440,6.872,484,4.098,1818,4.879,1873,6.885,1875,6.398,1876,6.592,1883,5.707,1899,5.707,1900,5.707,1901,5.707,1902,6.423,1903,6.423]],["title/injectables/DocumentGroupService.html",[263,1.366,1876,3.242]],["body/injectables/DocumentGroupService.html",[0,0.363,3,0.06,4,0.055,5,0.069,7,0.341,8,0.875,10,1.145,12,0.975,15,2.022,16,1.809,18,1.207,19,1.478,23,2.07,24,0.611,36,0.223,38,0.895,42,0.489,43,0.007,44,0.892,51,0.775,73,2.089,74,0.295,83,0.573,84,0.544,85,0.06,92,0.006,93,0.004,94,0.003,129,1.2,130,1.135,132,2.217,133,3.213,134,2.263,136,1.567,140,2.286,141,1.379,142,1.932,146,3.055,147,2.815,148,2.554,149,2.286,150,2.694,152,2.815,154,1.535,155,0.894,156,1.598,157,1.663,158,1.512,159,3.186,160,2.347,166,2.313,168,2.347,169,2.815,171,2.696,174,1.376,175,2.527,176,2.12,178,2.12,179,2.574,180,2.554,184,2.347,185,2.714,187,3.551,190,3.101,193,1.289,194,1.494,198,0.595,204,1.415,206,1.415,210,1.486,212,1.609,216,2.434,221,1.359,222,3.75,224,1.536,229,3.877,233,2.554,258,1.664,259,1.968,263,1.449,264,1.45,266,2.173,267,2.286,269,2.91,270,3.281,271,1.734,272,2.718,273,3.613,274,3.143,275,1.976,276,3.143,277,1.889,278,3.747,279,1.699,281,3.945,282,3.968,284,2.976,286,2.022,289,2.097,291,4.01,295,1.673,296,4.506,297,2.565,299,2.418,300,1.814,301,2.295,302,1.566,303,2.097,304,3.403,305,3.439,306,3.77,307,4.188,308,2.217,309,3.77,310,2.81,311,1.771,312,1.976,313,2.189,314,4.09,315,3.141,317,1.942,318,1.45,319,3.143,320,2.097,321,2.097,322,3.77,323,3.77,324,3.77,325,3.37,326,2.097,327,2.189,328,1.381,329,2.097,330,2.016,332,2.097,334,2.189,335,1.942,338,2.097,339,2.295,340,2.295,341,3.021,345,3.143,348,2.189,349,2.91,350,2.016,351,3.021,352,2.418,353,1.875,355,2.91,356,2.91,357,2.097,360,2.75,361,2.097,362,2.016,363,2.893,364,2.097,365,2.295,374,2.481,483,2.189,484,4.488,523,1.875,714,1.609,715,1.486,775,1.932,776,2.189,780,3.281,785,2.998,788,2.189,894,3.845,1818,5.959,1875,6.585,1876,5.152,1877,4.908,1884,2.998,1904,2.998,1905,5.056,1906,3.374,1907,3.374,1908,3.374,1909,3.374,1910,3.374,1911,3.374,1912,4.493,1913,2.75]],["title/modules/DocumentModule.html",[84,0.385,441,3.416]],["body/modules/DocumentModule.html",[0,0.325,3,0.115,4,0.104,5,0.097,7,0.341,8,1.362,43,0.007,74,0.305,83,1.096,84,0.714,85,0.115,92,0.005,93,0.006,94,0.005,123,2.911,129,1.869,130,1.768,136,2.44,142,3.008,174,1.415,198,1.138,242,2.467,243,2.582,244,2.845,245,2.845,246,2.643,247,3.562,248,3.743,252,3.469,253,2.845,254,2.582,256,4.704,257,4.704,258,2.592,259,2.301,260,4.1,261,4.376,441,6.877,484,3.655,1830,6.895,1832,4.895,1833,6.596,1843,5.737,1914,5.737,1915,5.737,1916,5.737,1917,6.456,1918,6.456]],["title/injectables/DocumentService.html",[263,1.366,1833,3.242]],["body/injectables/DocumentService.html",[0,0.368,3,0.062,4,0.056,5,0.071,7,0.344,8,0.896,10,1.159,12,0.985,15,2.07,16,1.853,18,1.246,19,1.513,23,2.12,24,0.625,36,0.231,38,0.906,42,0.494,43,0.007,44,0.911,51,0.783,73,2.114,74,0.297,83,0.591,84,0.553,85,0.062,92,0.006,93,0.004,94,0.003,129,1.229,130,1.163,132,2.252,133,2.47,134,2.299,135,1.978,136,1.605,140,2.341,141,1.401,142,1.978,146,3.072,147,2.403,148,2.616,149,2.341,150,2.736,152,2.403,154,1.55,155,0.882,156,1.637,157,1.655,158,1.523,159,3.204,160,2.403,166,2.322,168,2.403,169,2.869,171,2.733,174,1.358,175,2.397,176,2.171,178,2.171,179,2.614,180,2.616,184,2.403,185,2.735,187,3.465,190,3.138,193,1.331,194,1.512,198,0.614,204,1.46,206,1.46,210,1.534,212,1.661,216,2.46,221,1.265,222,3.785,224,1.573,229,3.939,233,2.616,258,1.704,259,2,263,1.484,264,1.496,266,2.225,267,2.341,269,2.98,270,3.36,271,1.776,272,2.783,273,3.656,274,3.219,275,2.023,276,3.219,277,1.935,278,3.786,279,1.74,281,3.992,282,4.01,284,3.032,286,2.07,289,3.219,291,3.803,295,1.428,296,4.536,300,1.872,301,2.369,302,1.617,303,2.165,304,3.457,305,2.369,306,3.219,307,3.842,308,2.26,309,3.842,310,1.936,311,1.783,312,2.023,313,2.26,314,4.133,315,3.174,317,2.005,319,3.219,320,2.165,321,2.165,322,3.842,323,3.842,324,3.842,325,3.435,326,2.165,327,2.26,328,1.426,329,2.165,330,2.081,331,4.221,332,2.165,334,2.26,335,2.005,338,2.165,339,2.369,340,2.369,341,3.093,345,3.219,348,2.26,349,2.98,350,2.081,351,3.093,355,2.005,356,2.98,357,2.165,361,2.165,362,2.081,363,2.948,364,2.165,365,2.369,374,2.54,484,4.465,523,1.936,714,1.661,715,1.534,775,1.978,776,2.26,780,3.36,788,2.26,794,2.496,889,2.496,890,2.496,902,1.496,903,2.005,930,2.648,931,4.254,933,2.839,934,2.839,1284,4.221,1820,2.26,1832,4.547,1833,5.213,1834,4.974,1844,3.095,1912,4.601,1913,2.839,1919,3.095,1920,5.178,1921,3.483,1922,3.483,1923,3.483,1924,3.483,1925,3.483,1926,3.483,1927,5.178,1928,3.483,1929,3.483]],["title/classes/DynamicQueryBuilder.html",[0,0.24,1930,3.416]],["body/classes/DynamicQueryBuilder.html",[0,0.322,2,0.48,3,0.054,4,0.049,5,0.035,7,0.299,12,1.092,14,1.33,18,2.608,36,0.503,38,0.897,40,1.258,42,0.582,43,0.007,44,0.909,51,0.632,53,2.684,64,0.739,66,1.464,73,2.364,74,0.105,85,0.114,88,2.827,89,2.971,92,0.002,93,0.003,94,0.002,134,2.755,141,0.96,154,1.217,155,0.974,158,1.407,174,1.57,179,1.167,194,1.263,221,1.464,259,0.892,277,3.509,295,1.293,302,4.219,311,1.908,312,1.193,318,3.451,343,3.132,344,4.344,352,3.36,353,2.606,369,1.697,580,2.649,652,1.381,653,1.381,775,2.18,902,1.312,904,3.182,922,3.826,1035,1.543,1043,1.498,1044,3.843,1050,4.089,1076,1.543,1079,2.992,1082,1.543,1084,2.58,1090,1.824,1093,2.964,1095,2.369,1144,5.083,1148,1.824,1159,1.758,1167,1.575,1930,5.439,1931,5.63,1932,5.251,1933,2.077,1934,4.688,1935,4.688,1936,4.688,1937,4.688,1938,4.166,1939,6.679,1940,3.054,1941,6.385,1942,4.166,1943,3.054,1944,4.166,1945,3.054,1946,4.166,1947,3.054,1948,4.511,1949,7.285,1950,7.285,1951,2.322,1952,2.801,1953,2.714,1954,3.822,1955,5.63,1956,5.218,1957,5.071,1958,2.714,1959,5.071,1960,2.714,1961,1.697,1962,2.714,1963,1.982,1964,6.744,1965,5.071,1966,5.071,1967,2.714,1968,5.218,1969,5.071,1970,4.166,1971,4.166,1972,3.822,1973,4.166,1974,4.166,1975,4.166,1976,6.477,1977,5.071,1978,5.688,1979,5.688,1980,4.166,1981,4.166,1982,2.714,1983,2.714,1984,2.714,1985,2.714,1986,2.077,1987,2.714,1988,2.714,1989,5.071,1990,2.714,1991,2.714]],["title/classes/EnvVarAppConfigValidator.html",[0,0.24,1228,3.624]],["body/classes/EnvVarAppConfigValidator.html",[0,0.379,2,0.587,3,0.066,4,0.06,5,0.043,7,0.162,24,0.659,31,1.59,32,1.309,36,0.248,42,0.469,43,0.007,44,0.921,51,0.699,55,1.832,64,1.557,74,0.308,81,3.317,82,3.143,85,0.097,92,0.003,93,0.004,94,0.003,155,0.404,163,1.919,221,1.568,271,1.282,279,1.256,311,1.449,359,2.233,389,3.707,399,2.151,425,2.532,608,4.147,614,2.542,618,2.425,624,2.842,742,3.354,916,3.579,954,3.047,975,2.425,979,2.233,980,2.323,981,2.077,982,2.323,983,1.834,1180,3.031,1181,3.047,1185,5.725,1186,3.321,1188,3.321,1190,3.321,1192,3.321,1198,2.323,1199,4.147,1200,2.842,1201,5.25,1202,2.425,1203,2.323,1204,3.71,1205,3.321,1206,3.908,1207,3.321,1208,3.908,1209,3.321,1210,3.908,1211,3.321,1212,3.908,1213,3.321,1214,3.908,1215,3.321,1216,3.321,1217,2.678,1218,3.321,1219,3.908,1220,3.321,1221,3.908,1222,3.321,1223,3.908,1224,3.321,1225,3.321,1226,2.323,1227,2.542,1228,4.897,1229,2.678,1230,2.842,1231,5.25,1232,4.446,1233,5.25,1234,5.25,1235,5.25,1236,4.846,1237,3.047,1238,3.047,1239,5.383,1240,5.383,1241,5.771,1242,3.047,1243,3.047,1244,3.047,1245,3.047,1246,3.321,1247,4.846,1248,3.71,1249,3.321,1250,4.846,1251,2.425,1252,3.321,1253,5.722,1254,2.425,1255,3.321,1256,3.321,1257,2.151,1258,3.321,1259,3.321,1260,3.321,1261,3.321,1262,3.047,1263,3.321,1264,3.321,1265,3.321,1266,2.425,1267,3.321,1268,3.321,1269,4.846,1270,3.321,1271,4.846,1272,3.321,1273,3.71,1274,3.321,1275,3.047,1276,3.321,1277,3.047,1278,3.321,1279,3.321,1280,3.321,1281,3.321,1282,3.047,1283,3.321,1284,3.047,1285,3.321,1286,3.321,1287,3.71,1288,3.321,1289,2.842,1290,3.047,1291,3.047,1292,2.842,1293,3.321,1294,2.842,1295,3.321,1296,3.321,1297,2.678,1298,3.321,1299,3.321,1300,3.321,1301,3.047,1302,3.321,1303,3.047,1304,3.321,1305,3.047,1306,3.321,1307,3.047,1308,3.321,1309,3.047,1310,3.321,1311,3.047,1312,3.321,1313,3.047,1314,3.321,1315,3.047,1316,3.321,1317,3.047,1318,3.321,1319,3.321,1320,3.321,1321,3.321,1322,3.321,1323,3.321,1324,3.321,1325,3.321,1326,3.321,1327,2.842,1328,3.321,1329,3.047,1330,3.321,1331,3.047,1332,3.321,1333,3.047,1334,3.321,1335,3.047,1336,3.321,1337,3.047,1338,3.321,1339,3.321,1340,3.047,1341,3.321,1342,3.047,1343,3.321,1344,3.047,1345,3.321,1346,3.047,1347,3.321,1348,3.321,1349,3.047,1350,3.321,1351,3.047,1352,3.321,1353,3.047,1354,3.321,1355,3.047,1356,3.321,1357,3.047,1358,3.321,1359,3.047,1360,3.321,1361,3.321,1362,3.047,1363,3.321,1364,3.047,1365,3.321,1366,3.047,1367,3.321,1368,3.321,1369,3.047,1370,3.321,1371,3.047,1372,3.321,1373,3.047,1374,3.321,1375,3.047,1376,3.321,1377,3.047,1378,3.321,1379,2.678,1380,3.321,1381,2.323,1382,3.321,1383,2.323,1384,3.321,1385,2.842,1386,3.321,1387,2.842,1388,3.321,1389,2.842,1390,3.047,1391,3.047,1992,2.842,1993,3.737,1994,3.321,1995,3.737,1996,4.846,1997,4.846,1998,3.737,1999,3.737]],["title/classes/EnvironmentVariablesValidator.html",[0,0.24,2000,2.848]],["body/classes/EnvironmentVariablesValidator.html",[0,0.413,2,0.611,3,0.069,4,0.063,5,0.087,7,0.169,12,0.47,20,1.805,24,0.678,26,3.402,31,2.048,32,2.308,36,0.258,42,0.592,43,0.007,44,0.956,51,0.887,55,2.213,64,2.034,67,2.245,74,0.249,81,3.706,82,3.427,85,0.117,92,0.003,93,0.004,94,0.003,155,0.713,158,1.009,221,0.673,271,3.054,275,2.575,328,2.298,389,2.239,399,3.792,404,2.354,425,3.7,494,4.907,530,1.805,542,4.269,601,2.527,602,4.681,603,4.481,604,4.577,606,2.091,616,5.881,916,2.162,919,1.758,963,3.12,971,2.418,975,5.562,1079,2.145,1093,2.308,1147,3.354,1199,5.009,1200,2.958,1202,2.524,1203,2.418,1226,2.418,1227,2.646,1229,2.787,1230,2.958,1239,6.061,1273,4.481,1275,3.171,1277,5.371,1282,5.371,1287,2.646,1406,4.269,1430,3.792,1544,3.058,1948,4.68,1992,5.009,2000,5.536,2001,3.456,2002,6.588,2003,6.588,2004,6.588,2005,6.588,2006,6.588,2007,6.588,2008,8.986,2009,5.854,2010,6.588,2011,5.854,2012,5.854,2013,5.854,2014,5.854,2015,3.89,2016,8.701,2017,6.588,2018,7.214,2019,3.89,2020,3.89,2021,6.588,2022,3.89,2023,7.082,2024,5.614,2025,5.614,2026,5.614,2027,3.89,2028,5.614,2029,3.89,2030,4.275,2031,6.797,2032,3.89,2033,5.614,2034,5.614,2035,8.047,2036,4.096,2037,3.89,2038,3.89,2039,3.89,2040,3.49,2041,3.89,2042,3.89,2043,3.89,2044,3.89,2045,4.989,2046,5.614,2047,3.89,2048,2.958,2049,6.41,2050,3.89,2051,2.646,2052,7.97,2053,2.787,2054,2.958,2055,3.171,2056,3.89,2057,3.89,2058,3.89,2059,3.89,2060,3.89,2061,3.89,2062,3.89,2063,3.89,2064,3.89,2065,3.89,2066,3.89,2067,3.89,2068,3.89,2069,3.89,2070,3.89,2071,3.89,2072,5.614,2073,3.89,2074,3.89,2075,3.89,2076,3.89,2077,3.89,2078,3.89,2079,3.89,2080,3.89]],["title/classes/EnvironmentVariablesValidator-1.html",[0,0.201,66,0.914,2000,2.387]],["body/classes/EnvironmentVariablesValidator-1.html",[0,0.447,2,0.815,3,0.092,4,0.084,5,0.059,7,0.332,12,0.626,20,2.405,24,0.827,31,2.086,32,2.686,36,0.343,42,0.568,43,0.007,44,0.955,51,0.901,64,1.656,66,1.185,67,2.738,74,0.281,81,4.06,82,3.484,85,0.136,92,0.004,93,0.005,94,0.004,109,2.542,155,0.561,158,1.23,221,0.896,275,2.996,404,2.871,526,3.713,530,2.405,601,2.857,602,5.654,603,5.215,606,2.785,614,5.548,625,4.224,742,3.565,916,2.88,919,2.342,963,3.805,971,3.221,1079,1.98,1185,3.94,1198,3.221,1199,5.206,1201,6.251,1202,3.363,1203,3.221,1226,3.221,1227,3.525,1229,3.713,1230,3.94,1231,6.251,1232,5.581,1233,6.251,1234,6.251,1235,6.251,1248,4.657,1251,4.443,1266,4.976,1273,3.525,1287,3.525,1289,3.94,1290,4.224,1291,4.224,1292,3.94,1294,3.94,1297,3.713,1544,3.178,1992,6.449,1994,4.604,1996,6.084,1997,6.084,2000,5.067,2048,3.94,2051,3.525,2053,3.713,2054,3.94,2081,4.224,2082,7.667,2083,7.667,2084,7.667,2085,7.667,2086,6.813,2087,5.182,2088,5.182,2089,5.182,2090,5.182,2091,5.182,2092,5.182,2093,5.182,2094,5.182,2095,4.604,2096,5.182,2097,4.604,2098,3.525,2099,3.713,2100,3.94,2101,4.604,2102,5.182,2103,5.182,2104,3.94,2105,5.182,2106,5.182,2107,4.604,2108,5.182,2109,4.604,2110,5.182,2111,5.182,2112,5.182,2113,5.182,2114,5.182,2115,5.182,2116,5.182,2117,5.182,2118,5.182]],["title/classes/EnvironmentVariablesValidator-2.html",[0,0.201,918,1.906,2000,2.387]],["body/classes/EnvironmentVariablesValidator-2.html",[0,0.408,2,0.715,3,0.081,4,0.073,5,0.107,7,0.197,12,0.549,20,2.11,24,0.757,31,1.883,32,1.592,36,0.301,42,0.57,43,0.007,44,0.925,51,0.827,53,2.628,64,1.735,67,3.091,74,0.267,81,3.16,82,3.352,85,0.127,92,0.003,93,0.005,94,0.003,129,1.488,155,0.678,156,2.767,158,1.126,163,1.867,166,1.573,221,0.786,275,3.472,530,2.11,601,2.937,602,5.017,603,4.878,606,2.443,618,5.263,916,2.526,919,2.055,923,3.369,942,5.878,963,3.483,971,2.826,1036,4.491,1079,2.394,1093,2.708,1198,2.826,1200,3.456,1204,5.702,1226,2.826,1227,3.092,1237,3.705,1238,5.847,1239,5.878,1240,5.878,1241,6.302,1242,5.847,1243,5.847,1244,5.847,1245,5.847,1257,4.825,1287,3.092,1327,4.765,1379,6.507,1381,2.826,1383,2.826,1385,3.456,1387,3.456,1389,4.765,1390,5.109,1391,3.705,1544,2.909,1948,4.366,1992,3.456,2000,5.425,2031,6.869,2036,2.826,2040,3.896,2048,4.765,2051,3.092,2053,3.257,2054,3.456,2055,3.705,2119,4.039,2120,5.175,2121,7.172,2122,4.545,2123,5.311,2124,5.442,2125,4.545,2126,4.263,2127,4.545,2128,4.491,2129,4.545,2130,4.545,2131,4.545,2132,5.109,2133,3.896,2134,5.569,2135,4.545,2136,4.263,2137,3.607,2138,5.569,2139,3.705,2140,4.545,2141,4.039,2142,7.172,2143,5.109,2144,4.545,2145,4.545,2146,4.545,2147,4.545,2148,4.545,2149,6.267,2150,6.267]],["title/classes/EnvironmentVariablesValidator-3.html",[0,0.201,1636,2.221,2000,2.387]],["body/classes/EnvironmentVariablesValidator-3.html",[0,0.443,2,0.787,3,0.119,4,0.081,5,0.057,7,0.217,12,0.604,20,2.323,24,0.808,31,2.101,32,2.64,36,0.331,42,0.575,43,0.007,44,0.945,51,0.911,55,1.681,67,2.675,74,0.277,81,4.097,82,3.522,85,0.134,88,2.115,92,0.004,93,0.005,94,0.004,109,2.455,158,1.202,221,1.157,275,2.945,308,1.829,311,1.369,404,2.098,406,3.586,514,3.586,530,2.323,601,2.818,602,5.598,603,5.126,606,2.69,620,6.558,625,4.079,742,4.366,916,2.781,919,2.262,963,3.718,971,3.111,975,5.943,1079,1.912,1093,1.753,1185,3.805,1198,3.111,1226,3.111,1227,3.404,1248,4.55,1251,4.341,1262,4.079,1266,4.89,1287,3.404,2000,5.009,2048,3.805,2049,7.45,2051,3.404,2053,3.586,2054,3.805,2086,6.696,2095,4.446,2098,3.404,2099,3.586,2100,3.805,2101,4.446,2104,3.805,2151,4.079,2152,7.535,2153,7.535,2154,7.535,2155,7.535,2156,7.535,2157,7.535,2158,7.535,2159,7.535,2160,7.535,2161,7.535,2162,8.626,2163,5.004,2164,8.044,2165,5.004,2166,5.004,2167,5.004,2168,5.004,2169,5.004,2170,5.004,2171,5.004,2172,5.004,2173,5.004,2174,5.004,2175,5.004,2176,4.446,2177,6.689,2178,5.004,2179,5.004,2180,5.004,2181,5.004,2182,5.004,2183,5.004,2184,5.004,2185,5.004,2186,5.004,2187,5.004,2188,5.004,2189,5.004,2190,5.004,2191,5.004,2192,5.004,2193,5.004,2194,5.004,2195,5.004,2196,5.004,2197,5.004,2198,5.004,2199,5.004,2200,5.004]],["title/classes/FileNotImageException.html",[0,0.24,2201,3.886]],["body/classes/FileNotImageException.html",[0,0.419,2,0.971,3,0.11,4,0.1,5,0.099,7,0.361,38,1.058,42,0.384,43,0.007,44,0.944,47,1.64,51,0.609,74,0.287,85,0.11,92,0.005,93,0.006,94,0.005,154,1.174,155,0.668,157,1.456,194,1.511,198,1.089,258,2.522,279,2.075,286,3.063,308,3.487,314,3.989,315,3.699,367,4.337,382,4.794,393,4.118,403,4.2,530,2.866,535,7.298,637,5.012,672,3.759,941,2.163,983,3.03,1174,5.49,2137,4.409,2201,7.438,2202,6.807,2203,5.487,2204,7.661,2205,8.328,2206,7.661,2207,7.661,2208,7.661,2209,6.175,2210,3.432,2211,3.839,2212,6.175,2213,6.175,2214,6.175]],["title/classes/FileResponseDto.html",[0,0.24,2215,2.744]],["body/classes/FileResponseDto.html",[0,0.329,2,1.028,3,0.116,4,0.106,5,0.108,7,0.344,9,2.666,12,0.958,13,2.153,24,0.958,31,1.469,36,0.433,42,0.532,43,0.007,47,1.737,51,0.646,74,0.274,76,1.469,85,0.116,92,0.005,93,0.006,94,0.005,110,3.516,120,4.266,163,1.949,164,4.266,166,1.992,337,4.133,408,3.328,425,3.684,501,7.052,2211,4.934,2215,5.238,2216,7.052,2217,4.449,2218,6.47,2219,5.437,2220,5.813,2221,6.47,2222,6.47,2223,6.47,2224,6.47,2225,6.47,2226,7.052,2227,7.052,2228,4.449]],["title/classes/FileResponseDto-1.html",[0,0.201,66,0.914,2215,2.3]],["body/classes/FileResponseDto-1.html",[0,0.305,2,0.954,3,0.108,4,0.098,5,0.109,7,0.358,9,2.776,10,1.146,11,3.178,12,0.915,13,2.932,14,1.766,24,0.998,31,1.702,36,0.402,42,0.514,43,0.007,47,1.612,51,0.599,58,2.545,60,3.942,74,0.261,76,1.363,85,0.108,92,0.005,93,0.006,94,0.005,100,3.829,101,3.518,103,2.674,109,4.246,110,3.263,120,4.652,143,3.947,163,1.808,166,1.902,337,3.161,394,4.5,407,4.128,408,3.178,425,4.017,995,3.518,1084,3.426,1493,4.175,1593,4.212,1594,2.744,2211,5.137,2215,4.756,2217,4.128,2219,5.427,2221,6.178,2222,6.178,2223,6.178,2224,6.178,2225,6.178,2228,4.128,2229,6.734,2230,7.579,2231,6.178,2232,6.734,2233,7.579,2234,6.069,2235,6.734,2236,5.393]],["title/classes/FileResponseDto-2.html",[0,0.201,918,1.906,2215,2.3]],["body/classes/FileResponseDto-2.html",[0,0.43,2,0.92,3,0.104,4,0.095,5,0.111,7,0.321,9,2.489,13,2.439,14,1.991,24,0.895,28,3.349,31,1.664,36,0.388,42,0.56,43,0.007,44,0.89,47,1.968,51,0.731,74,0.256,76,1.315,85,0.104,92,0.004,93,0.006,94,0.004,97,3.264,103,3.764,110,3.983,120,4.369,163,1.744,166,1.86,259,2.496,394,4.316,408,3.582,425,3.965,429,5.309,995,3.439,1430,5.182,1493,3.743,2120,4.264,2124,4.606,2215,5.072,2217,3.982,2219,5.265,2220,5.202,2228,3.982,2236,6.583,2237,5.529,2238,7.223,2239,5.842,2240,7.409,2241,7.409,2242,7.223,2243,7.409,2244,7.409,2245,5.854,2246,4.606,2247,7.409,2248,7.409,2249,7.409,2250,7.409,2251,7.409,2252,7.409]],["title/classes/FileType.html",[0,0.24,2219,2.848]],["body/classes/FileType.html",[0,0.455,2,0.775,3,0.088,4,0.08,5,0.11,7,0.287,8,1.146,9,2.225,14,1.543,24,0.8,30,2.012,31,1.796,32,1.727,33,3.213,34,3.68,36,0.326,42,0.535,43,0.007,44,0.923,47,2.281,51,0.654,55,2.225,57,3.352,58,3.352,74,0.312,75,2.648,76,1.679,83,0.837,84,0.398,85,0.088,87,3.68,88,2.528,91,3.68,92,0.004,93,0.005,94,0.004,101,3.074,103,2.918,109,3.249,110,2.65,120,3.56,128,2.067,157,1.259,166,1.877,221,1.294,258,2.18,275,2.588,311,1.356,354,4.164,394,4.039,425,4.194,601,2.801,614,5.087,615,4.38,618,5.789,619,4.38,927,5.885,1093,1.727,1204,3.353,1257,3.812,1379,6.155,1381,3.064,1383,3.064,1430,4.944,1593,3.68,1807,4.018,1817,5.036,2051,4.505,2097,4.38,2123,4.444,2124,4.117,2126,3.353,2128,3.533,2133,4.117,2139,4.018,2143,4.018,2219,5.131,2221,6.097,2222,6.097,2223,6.097,2224,6.097,2225,5.399,2235,5.885,2253,4.38,2254,7.996,2255,4.929,2256,4.929,2257,4.929,2258,4.929,2259,5.885,2260,5.885,2261,5.885,2262,5.885,2263,5.885,2264,5.036,2265,5.885,2266,5.036,2267,3.533,2268,4.38,2269,4.018,2270,4.018,2271,5.885,2272,5.885,2273,4.929,2274,4.929,2275,4.929,2276,4.929,2277,3.748,2278,4.929,2279,4.929,2280,5.399,2281,4.929,2282,4.929,2283,4.018,2284,4.38]],["title/classes/FileUploadDto.html",[0,0.24,2285,3.416]],["body/classes/FileUploadDto.html",[0,0.451,2,0.972,3,0.11,4,0.1,5,0.106,7,0.332,8,1.326,10,1.317,11,3.214,12,0.926,13,2.523,14,1.787,19,2.24,24,1.052,31,1.722,32,2.166,36,0.41,42,0.542,43,0.007,44,0.842,47,2.314,51,0.757,64,2.015,74,0.264,75,3.332,76,1.388,80,3.761,82,3.066,85,0.11,92,0.005,93,0.006,94,0.005,155,0.943,156,2.424,259,2.24,484,3.559,901,5.494,963,4.261,2136,5.926,2138,6.812,2211,4.766,2231,6.25,2237,5.668,2239,4.975,2246,4.766,2285,6.418,2286,5.494,2287,4.766,2288,6.336,2289,6.793,2290,6.25,2291,6.183,2292,6.183,2293,7.405,2294,6.183,2295,6.183,2296,8.333]],["title/controllers/FilesLocalController.html",[121,1.507,2297,3.624]],["body/controllers/FilesLocalController.html",[0,0.256,3,0.091,4,0.082,5,0.11,7,0.351,10,1.024,12,0.615,24,0.615,31,1.521,36,0.338,38,0.8,42,0.525,43,0.007,44,0.819,51,0.668,74,0.314,76,1.144,85,0.091,92,0.004,93,0.005,94,0.004,121,2.404,123,1.678,129,1.608,130,1.521,131,3.527,136,2.099,141,1.386,146,2.609,154,1.287,155,0.733,158,1.456,159,2.423,190,2.086,194,1.5,197,3.527,198,0.899,199,3.763,202,2.501,206,2.137,215,2.19,216,1.579,221,1.172,258,2.229,259,1.979,296,3.527,304,3.421,308,2.476,337,3.527,362,4.045,408,3.814,412,2.832,425,4.025,499,4.606,599,4.155,995,2.366,1044,3.322,2030,3.308,2120,5.093,2133,5.587,2137,3.898,2211,4.21,2215,4.664,2239,4.935,2246,4.21,2287,4.21,2288,3.875,2297,6.414,2298,4.529,2299,5.52,2300,6.199,2301,5.52,2302,5.097,2303,6.772,2304,5.097,2305,5.52,2306,6.772,2307,6.772,2308,4.155,2309,6.758,2310,4.155,2311,5.097,2312,4.529,2313,4.529,2314,5.097,2315,4.529,2316,6.017,2317,4.529,2318,3.652,2319,6.017,2320,4.529,2321,6.772,2322,6.772,2323,3.875,2324,6.199,2325,6.017,2326,6.758,2327,6.017,2328,5.149,2329,4.155,2330,4.155,2331,4.155,2332,4.606,2333,3.308,2334,4.155,2335,3.168,2336,5.097,2337,4.529,2338,4.529,2339,5.097,2340,4.529,2341,4.529,2342,5.097,2343,5.097,2344,4.155,2345,4.529,2346,4.155,2347,5.097,2348,5.097]],["title/modules/FilesLocalModule.html",[84,0.385,2349,3.416]],["body/modules/FilesLocalModule.html",[0,0.305,3,0.108,4,0.098,5,0.109,7,0.328,14,1.411,23,2.478,43,0.007,74,0.285,84,0.699,85,0.108,92,0.004,93,0.006,94,0.004,123,2.717,129,2.053,130,1.699,131,3.153,136,2.345,179,3.154,198,1.067,242,3.154,243,2.421,244,2.667,245,2.667,246,2.478,247,3.807,248,3.637,252,3.334,253,2.667,254,2.421,259,2.691,260,3.941,266,2.601,269,3.485,275,2.957,359,2.478,385,3.909,452,4.704,476,5.615,485,4.118,490,2.81,941,2.121,1594,2.737,2120,4.977,2133,5.644,2137,4.355,2246,3.764,2287,3.764,2297,6.277,2332,6.527,2333,3.929,2349,6.777,2350,5.38,2351,5.38,2352,5.38,2353,6.054,2354,6.724,2355,7.567,2356,4.936,2357,4.936,2358,6.054,2359,5.38,2360,6.054,2361,4.118,2362,5.38,2363,6.054]],["title/injectables/FilesLocalService.html",[263,1.366,2332,3.242]],["body/injectables/FilesLocalService.html",[0,0.28,3,0.099,4,0.09,5,0.111,7,0.344,12,0.866,26,2.126,36,0.369,38,0.848,40,1.227,42,0.447,43,0.007,47,2.304,51,0.708,55,1.87,74,0.289,85,0.099,92,0.004,93,0.005,94,0.004,126,2.803,129,1.703,130,1.883,132,2.361,141,1.468,146,2.723,154,1.363,155,0.776,157,1.058,158,1.506,159,3,166,2.105,193,2.126,194,1.098,198,0.981,215,2.391,216,1.725,221,0.963,258,2.361,259,2.096,260,3.736,263,2.056,264,2.391,279,1.87,304,2.812,314,2.898,337,4.627,359,2.278,408,3.328,425,3.892,510,4.655,606,2.992,646,3.203,1044,3.519,1180,4.937,1583,6.375,2120,4.129,2133,4.459,2218,5.848,2219,3.325,2226,6.374,2227,6.374,2228,3.786,2309,7.053,2332,5.902,2364,4.945,2365,5.454,2366,5.848,2367,4.232,2368,5.565,2369,5.848,2370,5.565,2371,7.937,2372,5.565,2373,5.565,2374,5.565,2375,6.471,2376,3.786,2377,3.988,2378,4.537,2379,4.537,2380,4.945,2381,3.786,2382,5.565]],["title/modules/FilesModule.html",[84,0.385,442,3.416]],["body/modules/FilesModule.html",[0,0.389,3,0.094,4,0.085,5,0.108,7,0.3,8,1.337,14,1.612,43,0.007,74,0.302,83,0.894,84,0.761,85,0.094,92,0.004,93,0.005,94,0.004,130,1.554,136,2.144,140,3.127,144,4.301,198,0.928,242,3.408,243,2.105,244,2.319,245,2.319,246,2.155,247,3.669,248,3.616,252,3.048,253,2.319,254,2.105,258,2.277,259,2.022,272,3.719,311,1.416,354,4.024,442,6.812,457,5.3,476,4.706,601,2.986,618,5.326,648,3.587,668,4.291,1020,4.903,1053,4.706,1240,4.003,1594,3.127,2036,4.804,2045,6.147,2120,4.724,2123,4.561,2124,4.301,2132,5.64,2133,4.301,2137,4.724,2141,4.678,2143,4.291,2272,6.147,2333,3.416,2335,5.931,2349,5.537,2362,6.147,2383,4.678,2384,4.678,2385,4.678,2386,4.678,2387,6.392,2388,6.392,2389,4.678,2390,6.918,2391,6.918,2392,8.525,2393,5.64,2394,6.918,2395,6.918,2396,5.264,2397,5.264,2398,5.264,2399,5.264,2400,7.575,2401,4.678,2402,5.264,2403,5.264,2404,5.264,2405,4.678,2406,3.772]],["title/controllers/FilesS3Controller.html",[121,1.507,2407,3.624]],["body/controllers/FilesS3Controller.html",[0,0.231,3,0.082,4,0.074,5,0.111,7,0.313,8,1.092,10,1.23,12,0.871,19,1.844,24,0.871,31,1.417,36,0.304,38,0.543,42,0.571,43,0.007,44,0.728,51,0.453,66,1.05,74,0.297,76,1.031,85,0.082,92,0.003,93,0.005,94,0.003,101,3.604,109,3.809,121,2.659,123,1.511,126,3.034,127,3.178,128,3.023,129,1.843,130,1.417,136,1.423,141,1.476,146,2.473,154,0.873,155,0.497,158,1.134,159,2.778,191,3.096,194,1.245,197,3.755,198,0.81,199,4.315,202,2.253,206,1.925,215,1.973,216,1.423,221,0.794,258,2.373,259,2.107,275,2.466,279,1.543,342,3.923,359,1.88,385,2.853,394,4.112,408,3.255,412,2.552,425,3.604,490,3.604,499,5.968,510,2.98,526,3.291,528,6.407,538,5.145,637,3.632,923,2.468,995,3.347,1084,2.853,1257,3.632,1601,5.145,1832,3.923,2030,5.282,2123,4.948,2132,5.145,2137,5.349,2211,5.06,2215,4.469,2218,5.145,2239,5.039,2246,3.923,2287,5.742,2301,5.878,2308,3.743,2310,3.743,2312,4.08,2313,4.08,2315,4.08,2316,4.08,2317,6.407,2318,3.291,2319,6.899,2320,4.08,2324,6.635,2325,5.608,2331,3.743,2333,2.98,2334,5.878,2335,3.923,2337,5.608,2338,5.608,2340,6.407,2341,6.407,2345,4.08,2346,3.743,2407,6.189,2408,4.08,2409,6.311,2410,6.311,2411,6.311,2412,6.311,2413,6.311,2414,7.211,2415,5.608,2416,6.311,2417,7.211,2418,6.311,2419,6.899,2420,4.592,2421,4.592,2422,4.904]],["title/modules/FilesS3Module.html",[84,0.385,2387,3.416]],["body/modules/FilesS3Module.html",[0,0.252,3,0.089,4,0.081,5,0.108,7,0.29,8,1.157,23,3.293,43,0.007,44,0.506,55,2.817,74,0.321,84,0.65,85,0.089,92,0.004,93,0.005,94,0.004,123,2.48,126,2.614,127,2.738,128,2.098,129,1.588,130,1.502,157,0.951,176,2.805,198,0.882,221,0.866,242,2.879,243,2.001,244,2.205,245,2.205,246,2.048,247,3.373,248,3.544,252,2.947,253,2.205,254,2.001,258,2.202,259,1.955,275,2.614,295,1.38,311,1.024,359,2.738,385,3.024,404,2.805,412,2.781,449,4.55,450,4.159,457,4.685,490,3.105,516,3.805,597,3.247,601,2.343,605,6.558,606,2.69,613,4.079,942,5.087,1000,3.111,1093,1.753,1180,4.659,1257,4.337,1381,3.111,1383,3.111,1501,5.087,2036,4.159,2120,4.337,2123,5.2,2126,3.404,2128,3.586,2137,4.63,2239,5.22,2266,5.087,2267,3.586,2277,3.805,2289,4.079,2305,5.453,2318,3.586,2323,6.375,2328,5.087,2329,4.079,2330,4.079,2333,3.247,2344,4.079,2356,4.079,2365,5.087,2366,5.453,2376,3.404,2377,3.586,2381,5.702,2387,6.562,2393,5.453,2407,6.375,2422,6.451,2423,4.446,2424,4.446,2425,4.446,2426,5.004,2427,6.559,2428,6.689,2429,5.944,2430,6.696,2431,5.944,2432,6.689,2433,4.079,2434,4.079,2435,4.079,2436,5.944,2437,4.079,2438,4.446,2439,4.446,2440,4.079,2441,4.079,2442,4.079,2443,5.004,2444,4.446,2445,4.446,2446,5.944,2447,4.446,2448,4.446,2449,4.446,2450,5.004,2451,5.004]],["title/controllers/FilesS3PresignedController.html",[121,1.507,2452,3.624]],["body/controllers/FilesS3PresignedController.html",[0,0.237,3,0.084,4,0.076,5,0.111,7,0.34,10,1.186,12,0.948,31,1.442,36,0.312,38,0.759,42,0.455,43,0.007,44,0.738,47,2.084,51,0.634,64,1.767,66,1.077,72,4.601,74,0.283,76,1.058,84,0.38,85,0.084,92,0.003,93,0.005,94,0.003,121,2.03,123,2.114,126,2.509,127,2.629,128,3.063,130,1.442,131,3.344,141,1.315,146,2.907,154,1.22,155,0.695,158,1.41,174,0.784,191,3.85,194,1.548,197,4.086,198,0.83,199,3.568,202,2.311,206,1.975,215,2.023,216,1.459,221,1.111,222,2.186,259,1.876,311,0.964,408,3.553,425,3.812,490,3.642,526,3.375,784,3.244,945,2.98,1044,3.85,1093,2.876,1424,5.967,1430,5.301,1493,3.244,1571,5.234,2123,5.031,2124,5.726,2126,4.367,2137,3.696,2211,3.992,2215,4.517,2237,4.97,2239,5.092,2246,3.992,2283,6.694,2285,5.623,2287,5.105,2299,6.397,2300,5.234,2301,5.234,2308,3.839,2310,3.839,2331,3.839,2333,3.056,2334,3.839,2335,2.928,2346,3.839,2366,5.234,2452,6.594,2453,4.185,2454,6.421,2455,6.908,2456,6.421,2457,4.709,2458,6.421,2459,4.709,2460,7.306,2461,6.421,2462,5.706,2463,5.706,2464,4.709,2465,4.709,2466,4.709,2467,4.709,2468,7.306,2469,6.421,2470,7.306,2471,6.421,2472,6.421,2473,4.709,2474,4.709,2475,4.709,2476,4.709,2477,4.185,2478,4.367,2479,4.709,2480,4.709,2481,4.709,2482,4.709,2483,4.709]],["title/modules/FilesS3PresignedModule.html",[84,0.385,2388,3.416]],["body/modules/FilesS3PresignedModule.html",[0,0.252,3,0.089,4,0.081,5,0.105,7,0.29,23,2.74,43,0.007,44,0.506,55,2.533,74,0.321,84,0.697,85,0.089,92,0.004,93,0.005,94,0.004,121,2.544,123,2.482,126,2.616,127,2.74,128,2.1,129,1.589,130,1.807,142,2.558,157,0.952,198,0.883,221,0.867,242,1.914,243,3.015,244,2.207,245,2.207,246,2.051,247,3.374,248,3.322,252,2.949,253,2.207,254,2.003,258,2.84,260,3.486,261,3.72,266,2.876,275,2.616,295,1.382,311,1.025,359,3.294,389,2.883,412,2.784,449,4.553,450,4.161,457,4.687,490,3.107,516,3.809,532,5.457,597,3.251,601,2.345,605,6.56,606,2.693,613,4.083,784,3.382,941,2.345,1000,3.114,1093,1.755,1180,4.661,1257,4.34,1381,3.114,1383,3.114,1424,6.561,2036,4.161,2120,4.34,2123,5.29,2124,5.364,2126,5.128,2128,3.59,2137,4.967,2237,3.407,2266,5.09,2267,3.59,2277,3.809,2318,3.59,2323,6.377,2328,5.09,2329,4.083,2330,4.083,2333,3.251,2344,4.083,2356,4.083,2376,3.407,2377,3.59,2381,5.128,2388,6.563,2393,5.457,2427,5.09,2430,6.699,2433,4.083,2434,4.083,2435,4.083,2436,5.948,2437,4.083,2438,4.451,2439,4.451,2440,4.083,2441,4.083,2442,4.083,2444,4.451,2445,4.451,2446,5.948,2447,4.451,2448,4.451,2449,4.451,2452,6.377,2455,5.457,2478,6.398,2484,4.451,2485,4.451,2486,4.451,2487,5.009,2488,6.694,2489,6.694,2490,5.948,2491,6.694,2492,5.009,2493,4.451]],["title/injectables/FilesS3PresignedService.html",[263,1.366,2478,3.242]],["body/injectables/FilesS3PresignedService.html",[0,0.202,3,0.071,4,0.065,5,0.11,7,0.317,10,1.171,12,0.693,15,2.296,24,0.693,26,1.533,36,0.266,38,0.792,40,1.266,42,0.482,43,0.007,44,0.739,47,1.943,51,0.722,55,2.706,64,1.621,72,4.114,74,0.293,84,0.324,85,0.071,92,0.003,93,0.004,94,0.003,126,2.244,128,1.682,129,1.363,130,1.289,132,1.89,141,1.498,146,2.763,154,1.274,155,0.725,157,1.531,158,1.315,159,2.618,193,1.533,194,1.322,198,0.707,215,1.724,216,1.243,221,0.993,222,4.008,259,1.678,263,1.645,264,1.724,275,2.244,278,3.198,279,1.348,286,2.296,304,2.9,308,1.467,311,1.834,314,3.491,315,1.604,328,1.643,394,3.911,408,3.377,423,2.729,425,3.397,606,2.157,646,3.304,784,2.9,893,3.271,945,2.665,1036,2.875,1044,3.59,1093,3.106,1180,4.609,1257,3.304,1381,2.494,1383,2.494,1424,6.125,1430,5.377,1493,2.9,1952,4.005,2040,2.494,2123,4.978,2124,5.808,2126,4.977,2128,2.875,2136,3.905,2137,3.304,2219,2.397,2228,2.729,2237,5.266,2239,4.749,2242,6.502,2246,4.549,2265,5.101,2266,5.564,2267,2.875,2268,3.565,2269,3.271,2270,3.271,2277,3.051,2280,5.965,2283,6.566,2284,6.502,2285,5.244,2288,5.097,2289,5.465,2293,5.101,2299,6.761,2300,4.68,2305,4.68,2367,3.051,2369,4.68,2375,5.965,2378,4.68,2379,3.271,2381,5.479,2433,3.271,2434,3.271,2435,3.271,2437,3.271,2440,3.271,2441,3.271,2442,3.271,2455,6.566,2462,5.101,2463,5.101,2477,3.565,2478,5.266,2494,3.565,2495,5.741,2496,5.741,2497,4.012,2498,6.704,2499,6.704,2500,4.012,2501,5.741,2502,4.012,2503,5.741,2504,4.012,2505,6.704,2506,5.741,2507,4.012,2508,4.012,2509,4.012,2510,4.012,2511,4.012,2512,5.741,2513,4.012,2514,4.012,2515,4.68,2516,4.012,2517,5.741,2518,4.012,2519,5.741,2520,5.741,2521,4.012]],["title/injectables/FilesS3Service.html",[263,1.366,2422,3.242]],["body/injectables/FilesS3Service.html",[0,0.397,3,0.098,4,0.089,5,0.11,7,0.362,12,0.953,19,2.08,26,2.719,31,1.235,36,0.364,38,0.65,40,1.212,42,0.342,43,0.007,51,0.702,74,0.245,85,0.098,92,0.004,93,0.005,94,0.004,126,3.261,128,3.499,130,1.598,132,2.597,141,1.77,146,2.707,154,1.353,155,0.595,157,1.045,158,1.553,159,3.225,193,2.1,194,1.557,198,0.969,221,1.365,258,2.342,259,2.08,263,2.392,264,2.362,279,2.904,304,4.216,314,2.863,359,2.251,382,4.096,394,4.736,410,2.955,425,2.552,510,5.121,646,3.164,923,2.955,971,4.424,1044,3.872,1093,1.926,1257,4.096,1493,2.777,1583,6.346,1594,2.485,1952,3.284,2123,4.385,2211,5.739,2219,3.284,2228,3.739,2231,4.482,2232,6.324,2287,5.505,2354,6.324,2365,5.411,2369,5.801,2375,6.803,2378,4.482,2379,4.482,2419,7.681,2422,5.879,2522,4.885,2523,5.411,2524,7.415,2525,7.117,2526,7.117,2527,7.891,2528,5.498,2529,5.498,2530,5.498]],["title/injectables/FilesService.html",[263,1.366,2335,2.963]],["body/injectables/FilesService.html",[0,0.433,3,0.118,4,0.107,5,0.109,7,0.347,8,1.386,43,0.007,74,0.229,83,1.128,84,0.537,85,0.118,92,0.005,93,0.006,94,0.005,129,1.902,136,2.483,141,1.64,142,3.062,198,1.172,258,2.94,259,2.342,263,2.56,264,2.856,266,3.443,354,4.173,359,3.656,404,3.36,452,4.982,456,6.093,476,5.45,530,3.72,1594,3.622,2246,4.982,2287,4.982,2335,5.773,2359,7.12,2523,6.093,2531,5.906,2532,7.12,2533,7.12,2534,8.013,2535,8.013,2536,8.013]],["title/classes/FilterCountryDto.html",[0,0.24,2537,3.416]],["body/classes/FilterCountryDto.html",[0,0.453,2,0.989,3,0.112,4,0.102,5,0.072,32,2.204,33,2.704,42,0.571,43,0.007,44,0.886,55,2.114,64,1.874,66,1.439,74,0.302,75,3.359,76,1.413,80,4.121,81,3.966,82,3.359,85,0.149,87,5.003,88,2.965,92,0.005,93,0.006,94,0.005,163,2.309,221,1.089,295,2.138,477,3.005,645,3.622,1002,3.179,1065,3.759,1534,4.28,1536,4.509,1540,3.497,1542,3.497,1544,2.921,1560,3.759,1933,4.28,2537,6.282,2538,4.785,2539,5.378,2540,4.28,2541,5.713,2542,6.019,2543,5.13,2544,4.509,2545,6.318,2546,5.13,2547,5.272,2548,5.13]],["title/classes/FilterQueryDto.html",[0,0.24,1555,3.242]],["body/classes/FilterQueryDto.html",[0,0.43,2,0.299,3,0.034,4,0.031,5,0.022,7,0.322,10,0.627,12,0.792,13,1.601,18,1.146,22,0.992,24,0.387,28,0.861,31,1.092,32,1.703,33,1.782,36,0.275,40,0.42,42,0.578,43,0.007,44,0.922,47,2.311,51,0.409,55,2.835,64,2.125,66,1.614,67,2.169,74,0.289,75,3.708,76,1.092,79,3.417,80,2.034,81,3.658,82,3.256,84,0.259,85,0.15,87,3.647,88,2.601,92,0.001,93,0.002,94,0.001,98,1.343,100,1.618,132,0.627,135,0.727,154,0.788,155,0.881,156,2.721,163,1.751,171,2.551,174,0.903,175,2.059,176,1.343,198,0.336,216,1.821,221,1.181,295,1.724,302,1.487,311,0.656,315,2.169,383,3.527,409,2.532,477,1.74,480,0.934,530,0.884,544,2.436,587,2.691,637,1.096,645,4.442,648,2.257,742,4.395,919,2.452,935,1.364,941,1.122,958,2.179,963,1.78,979,1.914,980,1.991,981,1.78,982,1.991,983,1.572,993,4.083,994,2.82,996,1.236,997,4.702,998,3.887,1002,3.449,1020,1.137,1065,1.914,1066,2.905,1093,1.122,1119,1.697,1198,1.184,1202,2.079,1203,1.991,1254,1.236,1540,4.289,1542,3.921,1544,3.046,1551,4.469,1554,3.153,1555,6.07,1558,3.485,1559,1.448,1560,4.437,1561,1.448,1591,2.179,1593,1.058,1948,3.674,2030,2.079,2040,1.991,2098,3.307,2290,3.38,2539,4.529,2540,2.179,2541,5.052,2547,3.69,2549,1.364,2550,5.364,2551,1.904,2552,1.904,2553,1.904,2554,1.904,2555,1.904,2556,1.904,2557,2.611,2558,1.552,2559,1.364,2560,1.552,2561,4.479,2562,3.38,2563,4.479,2564,3.38,2565,1.552,2566,3.697,2567,1.448,2568,2.82,2569,2.296,2570,2.436,2571,2.296,2572,1.552,2573,1.552,2574,1.552,2575,3.964,2576,2.611,2577,1.364,2578,2.436,2579,2.611,2580,2.611,2581,1.552,2582,2.611,2583,2.436,2584,5.056,2585,1.552,2586,2.611,2587,2.611,2588,1.552,2589,1.552,2590,1.552,2591,1.552,2592,1.552,2593,2.611,2594,2.82,2595,1.552,2596,6.054,2597,1.552,2598,1.552,2599,1.552,2600,2.611,2601,1.552,2602,1.552,2603,1.552,2604,1.552,2605,2.611,2606,2.611,2607,1.552,2608,1.552,2609,2.296,2610,1.552,2611,2.611,2612,1.552,2613,3.964,2614,1.552,2615,1.552,2616,1.552,2617,1.552,2618,2.611,2619,2.611,2620,2.611,2621,2.611,2622,3.38,2623,2.611,2624,2.611,2625,1.448,2626,3.887,2627,4.422,2628,4.422,2629,2.611,2630,2.611,2631,1.552,2632,1.552,2633,1.552,2634,1.552]],["title/modules/HelperModule.html",[84,0.385,597,3.093]],["body/modules/HelperModule.html",[0,0.407,3,0.09,4,0.082,5,0.058,7,0.293,43,0.007,47,1.348,74,0.325,84,0.767,85,0.144,92,0.004,93,0.005,94,0.004,123,2.223,127,2.765,130,1.517,198,1.191,242,3.218,243,2.03,244,2.236,245,2.236,246,2.078,247,3.881,248,4.005,252,2.975,253,2.236,254,2.03,261,4.814,273,4.585,281,4.929,282,4.676,311,1.039,368,4.034,381,6.207,404,3.392,457,5.237,490,3.135,523,3.753,597,6.206,881,5.496,889,3.637,890,3.637,941,2.366,983,2.49,1180,4.496,1572,4.593,2271,6.001,2361,5.503,2401,6.001,2406,4.839,2635,4.51,2636,4.51,2637,4.51,2638,4.51,2639,6.001,2640,6.753,2641,6.753,2642,6.753,2643,6.001,2644,6.753,2645,9.256,2646,6.001,2647,4.51,2648,4.51,2649,5.076,2650,4.51,2651,6.753,2652,5.076,2653,7.589,2654,5.076,2655,7.589,2656,5.076]],["title/controllers/HomeController.html",[121,1.507,2657,3.624]],["body/controllers/HomeController.html",[0,0.449,3,0.109,4,0.099,5,0.095,7,0.33,8,1.317,12,1.001,14,1.425,23,3.394,30,2.313,31,1.373,36,0.405,43,0.007,51,0.603,74,0.286,76,1.373,83,1.038,84,0.494,85,0.109,92,0.005,93,0.006,94,0.005,121,2.743,123,2.013,126,3.391,127,3.552,129,2.119,131,4.318,136,2.359,141,1.559,143,3.965,157,1.162,158,1.559,194,1.206,198,1.078,202,3,215,2.627,221,1.058,258,2.506,260,3.965,269,4.772,359,3.394,385,2.764,404,3.816,448,5.789,479,7.277,490,4.225,499,5.179,599,6.207,1084,3.442,1493,4.384,1951,5.789,2357,6.207,2657,7.019,2658,5.433,2659,6.072,2660,7.711,2661,6.114,2662,5.433,2663,6.114,2664,4.382,2665,6.114]],["title/modules/HomeModule.html",[84,0.385,443,3.416]],["body/modules/HomeModule.html",[0,0.451,3,0.11,4,0.1,5,0.095,7,0.333,8,1.33,23,3.419,43,0.007,74,0.288,83,1.055,84,0.738,85,0.11,92,0.005,93,0.006,94,0.005,121,2.64,123,2.531,126,3.005,128,3.224,129,2.169,131,4.005,136,2.705,143,3.236,198,1.096,242,2.374,243,2.485,244,2.738,245,2.738,246,2.544,247,3.502,248,2.738,252,3.388,253,2.738,254,2.485,258,2.873,269,4.807,359,3.419,404,3.659,443,6.804,448,6.636,456,5.848,457,3.863,479,7.628,490,2.884,1084,2.809,2357,5.065,2427,5.848,2657,6.351,2659,6.215,2662,5.521,2666,5.521,2667,5.521,2668,6.214,2669,7.69,2670,6.214]],["title/injectables/HomeService.html",[263,1.366,2659,3.242]],["body/injectables/HomeService.html",[0,0.444,3,0.105,4,0.095,5,0.093,7,0.391,8,1.287,12,1.066,14,1.733,36,0.39,38,0.696,42,0.367,43,0.007,51,0.734,55,2.876,74,0.281,83,1,84,0.476,85,0.105,92,0.004,93,0.006,94,0.004,109,3.649,125,5.115,130,1.67,136,2.305,141,1.753,154,1.119,155,0.927,157,1.413,158,1.538,194,1.162,198,1.038,215,2.53,221,1.019,229,4.28,263,2.131,264,2.53,266,3.679,275,2.906,279,1.979,359,3.044,404,3.883,491,6.608,601,3.298,606,3.166,942,5.655,1044,3.649,1079,2.841,1180,5.233,1297,4.22,1493,4.555,2104,5.655,2107,5.233,2367,4.478,2376,4.006,2377,4.22,2380,5.233,2381,5.823,2659,6.3,2660,7.607,2664,5.329,2671,5.233,2672,5.889,2673,5.889,2674,5.889,2675,5.889,2676,5.889]],["title/classes/HttpErrorFilter.html",[0,0.24,459,3.624]],["body/classes/HttpErrorFilter.html",[0,0.377,2,0.78,3,0.088,4,0.08,5,0.057,7,0.325,12,0.803,29,1.938,36,0.328,38,0.586,40,1.897,42,0.309,43,0.007,47,1.317,51,0.489,74,0.297,84,0.537,85,0.133,92,0.004,93,0.005,94,0.004,126,2.598,127,3.422,128,3.504,141,1.361,154,0.942,155,0.537,157,1.426,158,0.891,174,1.335,191,2.433,193,1.895,194,1.312,198,0.874,247,2.788,295,1.368,296,4.353,308,3.266,311,1.888,315,3,325,4.169,337,4.174,381,4.765,382,5.059,383,4.032,384,4.811,386,3.554,387,4.318,388,6.166,397,4.523,399,4.952,400,5.685,402,3.373,403,4.523,408,2.788,410,2.666,416,3.373,417,3.373,418,3.373,419,3.554,421,5.056,422,3.771,424,5.704,425,2.302,426,5.744,428,6.666,429,5.376,430,4.043,458,5.908,459,6.542,485,4.523,486,5.908,514,3.554,577,4.523,646,3.827,652,2.242,653,2.242,672,2.433,676,3.218,678,6.115,679,5.42,681,5.42,683,4.406,685,6.115,686,4.406,687,4.406,688,4.406,689,4.406,690,4.406,691,4.406,692,4.406,694,5.908,695,4.406,923,4.493,983,2.433,1044,3.262,1143,4.765,1160,4.523,1430,3.827,1493,3.359,1594,3.006,1952,2.963,2677,5.908,2678,4.406,2679,6.649,2680,6.649,2681,6.649,2682,4.959,2683,4.959,2684,4.959,2685,4.043,2686,4.959,2687,4.406,2688,4.406,2689,4.959,2690,4.959]],["title/classes/HttpExceptionFilter.html",[0,0.24,2691,3.886]],["body/classes/HttpExceptionFilter.html",[0,0.377,2,0.936,3,0.106,4,0.096,5,0.068,7,0.325,29,3.359,36,0.394,38,0.704,40,1.895,42,0.371,43,0.007,51,0.587,74,0.258,85,0.133,92,0.004,93,0.006,94,0.004,126,2.926,127,3.701,128,3.79,141,1.533,154,1.131,155,0.644,157,1.131,158,1.07,194,1.477,198,1.05,258,2.464,296,4.779,308,2.737,311,1.76,335,3.426,382,5.342,383,4.761,384,4.715,385,3.385,386,5.365,387,4.715,388,6.159,397,5.093,399,5.204,400,6.024,402,5.093,404,3.139,408,3.891,409,3.899,410,3.2,412,3.308,415,5.29,416,4.049,417,4.049,418,4.049,419,4.266,421,4.526,423,4.049,424,6.228,425,3.802,426,4.266,530,3.475,672,3.673,968,5.365,1948,3.1,2264,5.693,2691,7.006,2692,6.653,2693,4.853,2694,7.487,2695,5.953,2696,5.953,2697,5.953,2698,4.853]],["title/interfaces/IAppConfig.html",[1167,1.601,1206,3.416]],["body/interfaces/IAppConfig.html",[3,0.105,4,0.096,5,0.068,7,0.257,14,1.738,24,0.901,36,0.392,38,1.014,42,0.593,43,0.007,44,0.984,60,3.558,64,2.074,85,0.133,92,0.004,93,0.006,94,0.004,109,3.66,125,4.456,155,0.977,404,4.027,601,2.613,941,2.613,1167,2.881,1206,6.704,1273,6.14,1289,6.521,1292,6.521,1294,6.521,1297,6.146,1948,4.701,2036,4.637,2210,4.145,2261,6.628,2262,7.621,2699,2.989,2700,5.258,2701,7.459,2702,6.081,2703,7.459,2704,7.459]],["title/interfaces/IAwsConfig.html",[1167,1.601,1208,3.416]],["body/interfaces/IAwsConfig.html",[3,0.119,4,0.108,5,0.076,24,0.971,36,0.443,42,0.594,43,0.007,44,1,85,0.119,92,0.005,93,0.006,94,0.005,941,2.341,1167,2.245,1208,5.761,1301,7.294,1303,7.294,1305,7.294,1307,7.294,1309,7.294,1311,7.294,1313,7.294,1315,7.294,1317,7.294,2210,3.714,2699,3.376,2705,5.938]],["title/interfaces/IFileConfig.html",[1167,1.601,1210,3.416]],["body/interfaces/IFileConfig.html",[3,0.118,4,0.107,5,0.076,24,0.967,36,0.44,38,1.12,42,0.578,43,0.007,44,0.987,64,2.159,74,0.229,85,0.118,92,0.005,93,0.006,94,0.005,941,2.325,1167,2.23,1204,6.072,1210,5.738,1379,6.397,1381,5.55,1383,5.55,1385,6.788,1387,6.788,1389,6.788,2051,4.515,2136,4.515,2139,5.411,2210,3.689,2625,5.047,2699,3.353,2706,5.898,2707,6.638,2708,8.007,2709,6.638,2710,6.638]],["title/interfaces/IJWTConfig.html",[1167,1.601,1212,3.416]],["body/interfaces/IJWTConfig.html",[3,0.123,4,0.112,5,0.079,24,0.993,36,0.459,42,0.584,43,0.007,44,0.982,64,2.268,85,0.123,92,0.005,93,0.006,94,0.005,941,2.429,1167,2.33,1212,5.89,1327,6.887,1329,7.384,1331,7.384,1333,7.384,1335,7.384,1337,7.384,2210,3.854,2699,3.503,2711,6.162]],["title/interfaces/INodeEmailerConfig.html",[1167,1.601,1214,3.416]],["body/interfaces/INodeEmailerConfig.html",[3,0.123,4,0.112,5,0.079,24,0.992,36,0.459,42,0.584,43,0.007,44,0.989,64,2.117,85,0.123,92,0.005,93,0.006,94,0.005,941,2.426,1167,2.327,1214,5.885,1349,7.38,1351,7.38,1353,7.38,1355,7.38,1357,7.38,1359,7.38,2210,3.849,2699,3.498,2712,6.154,2713,6.154]],["title/interfaces/IPageMetaDtoParameters.html",[1167,1.601,2714,3.624]],["body/interfaces/IPageMetaDtoParameters.html",[0,0.29,3,0.072,4,0.065,5,0.046,7,0.175,10,0.609,14,0.939,15,2.687,18,2.404,24,0.695,36,0.514,38,0.794,42,0.558,43,0.007,47,2.482,60,3.205,64,2.342,66,2.051,74,0.199,76,0.905,85,0.102,92,0.003,93,0.004,94,0.003,103,1.775,130,0.905,132,1.326,135,1.539,143,2.098,154,1.393,156,2.124,171,3.316,174,0.671,175,3.027,178,1.689,194,0.795,216,2.678,254,1.611,272,2.166,279,1.354,286,1.611,311,1.588,328,3.174,354,2.098,393,2.166,394,3.703,449,2.74,648,3.403,715,1.775,763,4.177,918,3.205,961,1.922,1006,2.319,1147,4.38,1160,5.648,1167,2.463,1493,2.035,1540,5.174,1542,3.2,1544,3.6,1593,3.2,1636,3.734,1740,4.36,2040,2.505,2136,3.916,2361,3.916,2515,3.284,2539,5.238,2577,2.887,2594,5.648,2609,5.253,2699,2.035,2714,5.897,2715,3.284,2716,7.378,2717,6.667,2718,7.046,2719,5.116,2720,6.514,2721,4.57,2722,3.58,2723,3.284,2724,3.58,2725,5.477,2726,7.046,2727,6.572,2728,6.769,2729,7.148,2730,4.815,2731,6.769,2732,6.575,2733,6.322,2734,4.694,2735,6.322,2736,5.477,2737,4.36,2738,6.322,2739,3.284,2740,5.97,2741,3.58,2742,2.887,2743,3.58,2744,3.58,2745,5.116,2746,3.58,2747,3.58,2748,3.58,2749,3.58,2750,3.58,2751,3.58,2752,3.58,2753,3.58,2754,3.58,2755,3.58,2756,3.58,2757,3.58,2758,3.58,2759,3.284,2760,3.58,2761,3.58,2762,3.58,2763,3.58,2764,3.58,2765,3.58,2766,3.58,2767,3.58,2768,3.58,2769,3.58,2770,3.58]],["title/interfaces/IPaginationFieldConfig.html",[300,2.562,1167,1.601]],["body/interfaces/IPaginationFieldConfig.html",[3,0.113,4,0.103,5,0.073,7,0.276,24,0.943,26,2.984,36,0.422,42,0.548,43,0.007,44,0.929,85,0.113,92,0.005,93,0.006,94,0.005,103,2.808,130,1.431,158,1.652,174,1.061,175,3.084,194,1.257,300,4.199,343,3.629,344,4.849,354,4.068,453,6.368,648,3.921,775,3.227,784,3.22,902,3.629,903,5.068,904,3.541,919,4.25,930,6.695,931,6.002,993,4.399,1054,4.846,1167,2.838,2699,3.22,2723,5.196,2771,5.663,2772,5.663,2773,5.663,2774,6.373,2775,5.663,2776,7.505]],["title/interfaces/IPostgreSQLConfig.html",[1167,1.601,1217,3.416]],["body/interfaces/IPostgreSQLConfig.html",[3,0.12,4,0.109,5,0.077,24,0.978,36,0.448,42,0.592,43,0.007,44,0.999,85,0.12,92,0.005,93,0.006,94,0.005,941,2.37,1167,2.273,1217,5.803,2009,7.983,2011,7.983,2012,7.983,2013,7.983,2014,7.983,2210,3.759,2699,3.417,2777,6.011,2778,8.984,2779,8.984,2780,8.984]],["title/interfaces/ISMSConfig.html",[1167,1.601,1221,3.416]],["body/interfaces/ISMSConfig.html",[3,0.128,4,0.116,5,0.082,24,1.015,36,0.477,42,0.554,43,0.007,44,0.976,85,0.128,92,0.005,93,0.006,94,0.005,941,2.524,1167,2.421,1221,6.025,1362,7.476,1364,7.476,1366,7.476,2210,4.005,2699,3.641,2781,6.404]],["title/interfaces/ISendGridConfig.html",[1167,1.601,1219,3.416]],["body/interfaces/ISendGridConfig.html",[3,0.126,4,0.115,5,0.081,24,1.008,36,0.471,42,0.569,43,0.007,44,0.985,85,0.126,92,0.005,93,0.006,94,0.005,941,2.492,1167,2.39,1219,5.979,1340,7.445,1342,7.445,1344,7.445,1346,7.445,2210,3.953,2699,3.594,2782,6.321]],["title/interfaces/IUploadFileConfig.html",[1167,1.601,1223,3.416]],["body/interfaces/IUploadFileConfig.html",[3,0.125,4,0.113,5,0.08,24,0.999,36,0.465,42,0.577,43,0.007,44,0.983,64,2.129,85,0.125,92,0.005,93,0.006,94,0.005,941,2.457,1167,2.356,1223,5.929,1369,7.411,1371,7.411,1373,7.411,1375,7.411,1377,7.411,2210,3.898,2699,3.543,2783,6.232,2784,6.232]],["title/classes/PaginationMetaDto.html",[0,0.24,2721,3.242]],["body/classes/PaginationMetaDto.html",[0,0.309,2,0.543,3,0.061,4,0.056,5,0.039,7,0.15,10,0.778,14,1.199,15,2.058,18,2.2,24,0.621,31,1.867,36,0.524,38,0.608,42,0.57,43,0.007,47,2.507,51,0.835,60,2.933,64,2.353,66,2.046,74,0.177,76,0.776,85,0.091,92,0.003,93,0.004,94,0.003,103,1.522,130,1.155,132,1.137,135,1.32,143,2.68,154,1.295,155,0.374,156,1.627,163,1.029,171,2.855,174,0.575,175,3.046,178,2.157,194,0.681,216,2.918,254,1.381,272,2.766,279,1.729,286,2.058,311,1.492,328,3.128,354,2.68,393,2.766,394,3.443,449,3.5,648,3.547,715,1.522,763,4.237,918,3.251,961,2.454,1006,1.988,1147,4.354,1160,5.756,1167,2.066,1493,2.599,1540,5.233,1542,2.86,1544,3.674,1593,1.919,1636,3.787,1740,4.423,2040,2.147,2136,4.635,2361,4.183,2515,4.195,2539,5.055,2577,3.687,2594,5.756,2609,5.672,2714,5.81,2715,2.815,2716,6.055,2717,6.434,2718,7.164,2719,5.465,2720,7.033,2721,5.197,2722,4.572,2723,4.195,2724,4.572,2725,5.941,2726,7.088,2727,6.745,2728,6.898,2729,7.164,2730,5.222,2731,6.898,2732,6.777,2733,6.631,2734,5.013,2735,6.631,2736,5.941,2737,4.423,2738,6.229,2739,4.195,2740,6.476,2741,4.572,2742,2.475,2743,3.069,2744,3.069,2745,4.572,2746,3.069,2747,3.069,2748,3.069,2749,3.069,2750,3.069,2751,3.069,2752,3.069,2753,3.069,2754,3.069,2755,3.069,2756,3.069,2757,3.069,2758,3.069,2759,2.815,2760,3.069,2761,3.069,2762,3.069,2763,3.069,2764,3.069,2765,3.069,2766,3.069,2767,3.069,2768,3.069,2769,3.069,2770,3.069,2785,3.454,2786,5.146,2787,7.387,2788,3.454,2789,3.454,2790,3.454,2791,3.454,2792,3.454,2793,3.454,2794,3.454,2795,3.454]],["title/classes/PaginationQueryDto.html",[0,0.24,171,1.781]],["body/classes/PaginationQueryDto.html",[0,0.427,2,0.288,3,0.033,4,0.03,5,0.021,7,0.331,10,0.61,12,0.78,13,1.563,18,1.444,22,0.955,24,0.375,28,0.829,31,1.294,32,1.663,33,1.734,36,0.267,38,0.763,40,0.404,42,0.58,43,0.007,44,0.92,47,2.319,51,0.524,55,2.814,64,2.154,66,1.678,67,2.689,74,0.286,75,3.694,76,1.066,79,3.362,80,1.98,81,3.628,82,3.227,84,0.251,85,0.149,87,3.588,88,2.522,92,0.001,93,0.002,94,0.001,98,1.301,100,1.568,132,0.604,135,1.186,154,0.767,155,0.873,156,2.718,163,1.718,171,2.6,174,1.023,175,2.57,176,0.769,198,0.323,216,2.274,221,1.163,295,1.855,302,1.873,311,0.635,315,2.123,383,3.099,409,3.002,477,1.699,480,0.9,530,0.851,544,2.36,587,2.619,637,1.056,645,4.645,648,2.676,742,4.424,919,2.4,935,1.314,941,0.643,958,2.111,963,1.725,979,1.854,980,1.93,981,1.725,982,1.93,983,1.523,993,3.821,994,2.745,996,1.19,997,4.627,998,3.805,1002,3.397,1020,1.096,1065,1.854,1066,2.836,1093,1.087,1119,1.652,1198,1.14,1202,2.014,1203,1.93,1254,1.19,1540,4.617,1542,4.165,1544,3.122,1551,4.383,1554,3.068,1555,6.038,1558,4.131,1559,1.395,1560,4.704,1561,1.395,1591,1.248,1593,1.019,1948,3.623,2030,2.014,2040,2.509,2098,3.611,2539,4.477,2540,2.111,2541,4.99,2547,3.611,2549,1.314,2550,4.669,2557,2.53,2558,1.495,2559,1.314,2560,1.495,2561,4.4,2562,3.29,2563,4.4,2564,3.29,2565,1.495,2566,4.383,2567,1.395,2568,3.229,2569,2.224,2570,3.61,2571,3.402,2572,2.53,2573,1.495,2574,1.495,2575,4.699,2576,2.53,2577,2.224,2578,3.068,2579,2.53,2580,2.53,2581,1.495,2582,2.53,2583,3.068,2584,5.13,2585,1.495,2586,2.53,2587,2.53,2588,1.495,2589,1.495,2590,1.495,2591,1.495,2592,1.495,2593,2.53,2594,2.745,2595,1.495,2596,5.981,2597,1.495,2598,1.495,2599,1.495,2600,2.53,2601,1.495,2602,1.495,2603,1.495,2604,1.495,2605,2.53,2606,2.53,2607,1.495,2608,1.495,2609,2.224,2610,1.495,2611,2.53,2612,1.495,2613,3.87,2614,1.495,2615,1.495,2616,1.495,2617,1.495,2618,2.53,2619,2.53,2620,2.53,2621,2.53,2622,3.29,2623,2.53,2624,2.53,2625,1.395,2626,3.805,2627,4.328,2628,4.328,2629,2.53,2630,2.53,2631,1.495,2632,1.495,2633,1.495,2634,1.495,2796,3.104,2797,1.834,2798,2.758,2799,1.834,2800,4.035,2801,1.834,2802,1.834,2803,1.834,2804,1.834,2805,1.834,2806,1.834,2807,1.834,2808,1.834]],["title/classes/PaginationResponseDto.html",[0,0.24,204,1.999]],["body/classes/PaginationResponseDto.html",[0,0.448,2,0.824,3,0.093,4,0.085,5,0.06,7,0.334,10,1.407,13,2.697,24,0.833,28,2.37,36,0.347,38,0.968,42,0.601,43,0.007,47,1.832,51,0.761,55,1.761,66,1.764,74,0.266,75,2.759,76,1.177,85,0.146,88,1.657,92,0.004,93,0.005,94,0.004,143,3.593,155,0.567,158,0.942,174,1.149,175,3.299,178,3.569,194,1.034,198,0.924,204,3.569,216,2.138,221,0.907,286,2.096,328,2.146,394,3.896,408,3.665,648,3.579,742,2.73,763,3.259,918,2.5,919,2.37,975,5.672,981,4.285,993,4.267,1066,5.323,1540,4.285,1544,2.433,1636,2.913,1740,3.402,1948,4.552,2217,3.565,2361,5.245,2415,6.852,2539,4.607,2568,3.565,2571,6.101,2717,3.986,2718,4.273,2721,6.061,2725,4.273,2726,4.273,2727,3.986,2728,4.273,2729,4.273,2730,4.944,2731,4.273,2732,4.273,2733,4.273,2735,4.273,2736,4.273,2737,3.402,2809,6.679,2810,7.565,2811,5.242,2812,5.242,2813,5.242,2814,4.658,2815,6.899,2816,6.13,2817,6.13,2818,4.658,2819,4.658,2820,5.242,2821,5.624,2822,6.899,2823,5.242,2824,5.242,2825,5.242]],["title/injectables/PaginationService.html",[263,1.366,281,2.482]],["body/injectables/PaginationService.html",[0,0.236,3,0.054,4,0.049,5,0.035,7,0.203,10,1.279,26,1.791,36,0.202,38,0.554,42,0.355,43,0.007,44,0.843,47,0.811,51,0.463,66,1.58,74,0.288,85,0.083,92,0.004,93,0.003,94,0.002,130,1.053,141,0.96,146,2.196,154,1.313,155,0.507,157,1.217,158,0.549,159,2.042,163,1.907,171,3.064,174,1.214,175,3.133,178,2.684,198,0.827,204,1.966,206,1.966,215,2.014,216,1.453,221,1.39,222,3.523,263,1.835,264,1.312,271,1.608,273,3.477,277,1.752,279,1.026,280,2.714,281,3.796,284,2.8,291,4.86,302,1.418,311,1.944,328,2.62,345,1.899,349,3.975,354,2.442,355,3.285,356,4.196,359,1.919,385,2.119,394,2.369,523,2.606,645,4.196,669,4.166,714,2.236,715,2.066,775,2.446,902,2.967,903,3.285,904,3.548,923,3.441,983,1.498,1000,3.548,1020,2.801,1066,1.824,1079,2.446,1147,1.824,1540,4.464,1542,4.97,1544,2.176,1560,3.409,1580,2.322,1594,2.119,1606,7.411,1797,4.652,1798,7.061,1799,3.822,1802,3.822,1803,6.187,1951,3.565,1968,2.49,2365,3.565,2524,4.166,2544,2.188,2568,4.354,2569,5.875,2571,4.587,2594,5.327,2650,2.714,2664,3.36,2717,3.565,2721,4.354,2738,2.49,2810,5.688,2814,4.166,2826,2.714,2827,4.688,2828,4.688,2829,4.688,2830,4.688,2831,3.565,2832,4.688,2833,4.688,2834,6.401,2835,3.054,2836,3.054,2837,3.054,2838,7.59,2839,7.289,2840,5.706,2841,6.906,2842,6.401,2843,5.706,2844,4.688,2845,4.688,2846,4.688,2847,4.688,2848,3.054,2849,7.59,2850,4.166,2851,7.832,2852,4.166,2853,5.688,2854,4.688,2855,4.166,2856,5.688,2857,4.688,2858,4.166,2859,6.401,2860,4.166,2861,5.706,2862,6.906,2863,3.054,2864,4.688,2865,3.054,2866,3.054,2867,4.688,2868,4.688,2869,3.054,2870,3.054,2871,3.054,2872,2.714,2873,3.054,2874,3.054]],["title/classes/PrismaClientExceptionFilter.html",[0,0.24,2875,3.624]],["body/classes/PrismaClientExceptionFilter.html",[0,0.336,2,0.786,3,0.089,4,0.081,5,0.057,7,0.29,26,1.91,29,3.142,36,0.331,38,0.591,40,2.018,42,0.416,43,0.007,51,0.493,57,2.096,67,2.673,74,0.277,85,0.119,88,1.58,92,0.004,93,0.005,94,0.004,126,2.612,128,3.371,135,2.554,141,1.369,145,3.994,154,0.95,155,0.541,156,2.113,157,0.95,158,0.898,190,2.737,193,1.91,194,1.319,198,0.881,258,2.2,284,4.446,308,3.313,311,1.89,315,3.661,317,2.877,330,4.5,335,2.877,341,2.986,354,4.188,367,3.922,369,3.715,382,5.069,383,4.322,384,4.335,385,3.022,386,4.791,397,5.123,399,5.151,400,5.866,402,4.547,408,3.8,409,3.481,410,2.687,411,3.4,412,2.778,416,4.547,417,4.547,418,4.547,422,3.801,423,5.701,424,3.801,430,4.075,452,4.156,587,4.338,646,3.848,672,3.695,968,4.791,1459,6.14,1501,6.696,1673,4.075,1948,2.603,2264,5.083,2578,3.801,2685,5.45,2693,4.075,2698,6.555,2875,6.114,2876,5.94,2877,6.685,2878,7.532,2879,8.041,2880,7.145,2881,4.999,2882,3.801,2883,4.442,2884,4.999,2885,4.999,2886,4.999,2887,4.442,2888,7.145,2889,4.442,2890,5.94,2891,8.381,2892,4.999,2893,5.94,2894,4.999,2895,4.999,2896,4.999,2897,6.685,2898,5.94,2899,6.685,2900,4.999,2901,4.999]],["title/injectables/PrismaService.html",[263,1.366,273,2.274]],["body/injectables/PrismaService.html",[0,0.361,3,0.068,4,0.062,5,0.044,7,0.33,10,1.399,12,0.989,14,1.297,36,0.255,38,1.01,40,1.227,42,0.407,43,0.007,44,0.847,51,0.783,55,1.292,66,0.879,67,1.537,74,0.282,84,0.58,85,0.099,88,2.069,89,2.584,92,0.007,93,0.004,94,0.003,126,2.176,130,1.25,141,1.14,142,2.127,146,3.141,154,1.244,155,0.708,158,1.559,159,3.311,174,1.516,177,3.989,190,2.279,194,1.502,198,0.678,215,1.652,216,1.191,221,1.373,222,3.33,259,2.096,263,1.596,264,1.652,266,2.392,271,3.048,273,4.076,276,4.46,279,1.292,284,4.359,286,2.226,295,2.19,310,3.987,311,1.559,318,1.652,337,2.899,343,3.411,359,2.937,367,3.965,384,2.213,387,3.767,393,2.993,410,2.067,420,5.849,450,2.39,489,6.471,492,2.923,493,4.233,494,5.4,533,4.538,559,6.375,601,1.95,604,4.538,606,2.067,648,2.584,652,1.738,653,1.738,670,3.416,676,2.495,775,2.127,919,2.959,922,2.517,923,2.993,924,2.899,993,2.899,1043,1.886,1044,2.731,1093,1.347,1180,4.749,1430,2.213,1439,7.275,1466,3.134,2367,2.923,2376,2.615,2377,2.755,2381,2.615,2648,3.416,2742,4.69,2831,4.233,2872,3.416,2882,2.923,2902,3.416,2903,7.939,2904,5.567,2905,5.567,2906,7.939,2907,5.567,2908,5.567,2909,6.545,2910,6.545,2911,7.174,2912,8.188,2913,3.844,2914,3.844,2915,3.844,2916,5.567,2917,6.545,2918,5.567,2919,3.844,2920,6.545,2921,3.844,2922,7.174,2923,6.545,2924,5.567,2925,3.844,2926,5.567,2927,5.567,2928,3.844,2929,5.567,2930,5.567,2931,3.844,2932,5.567,2933,5.567,2934,3.844,2935,3.844,2936,3.844,2937,3.844,2938,3.844,2939,3.844,2940,3.844,2941,3.844,2942,6.545,2943,3.844,2944,5.567,2945,3.844,2946,3.844,2947,3.844,2948,3.844,2949,5.567,2950,5.567,2951,5.567,2952,5.567,2953,5.567,2954,3.844,2955,3.844,2956,3.416,2957,3.844,2958,3.844,2959,3.844,2960,3.844,2961,5.567,2962,3.844,2963,3.844]],["title/classes/Query.html",[0,0.24,174,0.794]],["body/classes/Query.html",[0,0.357,2,0.861,3,0.097,4,0.089,5,0.063,7,0.308,10,1.337,12,0.951,14,1.655,36,0.363,38,0.648,42,0.519,43,0.007,44,0.978,51,0.541,84,0.698,85,0.097,92,0.004,93,0.005,94,0.004,127,3.412,128,3.776,141,1.454,154,1.041,155,0.957,157,1.041,158,1.416,174,1.578,194,1.703,221,1.363,233,2.768,277,3.502,308,3.464,311,1.613,318,3.581,337,4.103,344,4.103,384,3.154,408,3.303,676,3.556,904,2.297,913,4.869,919,3.21,922,3.768,923,4.756,945,2.543,946,4.869,1023,2.945,1079,2.093,1430,5.092,1483,5.789,1558,5.973,1593,4.378,1785,4.869,2664,5.089,2964,4.869,2965,5.479,2966,4.869,2967,5.479,2968,5.479,2969,5.479,2970,5.479,2971,5.479,2972,5.479,2973,5.479,2974,5.479,2975,5.479,2976,7.101,2977,7.101,2978,7.673,2979,7.673,2980,5.479,2981,6.31,2982,8.335,2983,4.869,2984,6.31,2985,6.31,2986,4.869,2987,4.869,2988,4.869,2989,4.869,2990,4.869]],["title/classes/Query-1.html",[0,0.201,66,0.914,174,0.666]],["body/classes/Query-1.html",[0,0.371,2,0.912,3,0.103,4,0.094,5,0.066,7,0.319,10,1.329,12,0.889,36,0.384,38,0.685,42,0.53,43,0.007,44,0.968,51,0.572,84,0.71,85,0.103,92,0.004,93,0.005,94,0.004,128,3.088,129,1.377,141,1.508,154,1.102,155,0.921,158,1.323,174,1.552,194,1.734,221,1.4,277,3.409,308,3.489,311,1.187,318,3.164,337,3.835,384,3.338,408,3.088,646,4.239,676,3.764,775,2.216,784,2.93,904,2.432,922,3.658,923,4.828,945,3.419,1044,3.614,1079,2.216,1430,5.169,1483,6.94,1572,3.945,1817,6.474,1948,3.02,2966,7.191,2978,7.809,2979,7.809,2981,6.544,2983,7.191,2984,6.544,2985,6.544,2986,5.154,2987,5.154,2988,5.154,2989,5.154,2990,5.154,2991,5.154,2992,7.365,2993,5.8]],["title/classes/Query-10.html",[0,0.201,174,0.666,1544,1.855]],["body/classes/Query-10.html",[0,0.38,2,0.593,3,0.067,4,0.061,5,0.074,7,0.281,8,0.95,10,0.83,12,1.147,16,1.964,19,1.604,24,1.043,26,1.441,29,2.145,30,1.668,36,0.25,38,0.649,40,1.875,41,1.905,42,0.568,43,0.007,44,0.843,51,0.778,66,1.729,73,2.415,74,0.13,77,1.964,83,0.64,84,0.305,85,0.067,88,2.825,89,1.751,92,0.003,93,0.004,94,0.003,129,1.303,130,1.233,134,2.802,135,2.098,141,1.614,154,0.717,155,1.032,157,1.043,158,1.59,163,1.124,166,2.278,174,1.596,194,1.277,221,1.559,224,1.668,259,1.604,266,2.359,267,2.482,271,1.883,277,3.576,295,1.514,311,1.869,312,2.779,318,3.654,481,4.584,580,2.548,601,3.026,649,3.051,652,1.705,653,2.926,736,2.852,737,4.802,775,2.717,784,2.774,898,6.16,902,1.62,904,2.302,922,4.102,924,2.859,941,1.923,945,4.011,949,3.28,961,1.799,995,2.548,1023,2.951,1025,4.239,1028,4.062,1030,3.051,1035,1.905,1043,2.694,1058,2.951,1076,1.905,1079,2.098,1080,2.096,1082,1.905,1084,2.926,1093,2.268,1094,2.565,1095,1.905,1114,2.027,1115,2.951,1116,2.027,1117,2.027,1118,2.027,1119,1.544,1594,2.482,1763,2.253,1961,2.096,1963,2.448,2994,3.351,2995,3.413,2996,3.413,2997,3.28,2998,4.698,2999,3.771,3000,3.771,3001,3.771,3002,3.771,3003,3.771,3004,3.771,3005,3.867,3006,3.28,3007,2.868,3008,3.28,3009,2.868,3010,2.345,3011,2.448,3012,2.253,3013,3.934,3014,2.703,3015,2.703,3016,2.253,3017,2.253]],["title/classes/Query-2.html",[0,0.201,174,0.666,918,1.906]],["body/classes/Query-2.html",[0,0.186,2,0.58,3,0.066,4,0.06,5,0.042,10,0.817,12,1.121,24,1.001,36,0.244,38,0.756,40,1.651,42,0.563,43,0.007,44,0.919,51,0.798,66,1.79,73,2.494,74,0.186,85,0.066,88,2.556,89,1.713,92,0.003,93,0.004,94,0.003,134,2.785,141,1.106,146,1.266,154,1.215,155,1.028,157,1.027,158,1.566,159,1.32,163,1.61,166,2.187,174,1.585,194,1.261,215,1.585,216,1.144,221,1.575,271,2.414,275,2.112,277,3.454,279,1.24,282,3.954,295,1.49,299,2.644,311,1.884,312,2.75,318,3.744,477,3.211,580,2.967,601,2.904,652,1.668,653,1.668,736,3.921,902,3.024,904,2.95,915,4.109,922,3.984,945,3.99,961,1.76,1025,4.346,1028,2.905,1030,3.003,1035,3.555,1043,1.81,1058,2.905,1074,2.806,1076,1.864,1079,2.689,1080,3.003,1082,2.73,1083,2.294,1084,3.386,1093,2.465,1095,1.864,1114,1.984,1115,2.905,1116,1.984,1117,1.984,1118,1.984,1119,1.511,1159,2.124,1492,5.247,1591,3.675,1597,4.405,1598,4.405,1599,3.008,1603,3.279,1604,3.675,1605,5.211,1691,4.109,1692,4.801,1693,4.801,1694,4.801,1750,2.51,1763,2.204,1961,2.051,1963,2.395,2998,4.656,3005,3.228,3006,2.204,3008,3.228,3009,4.109,3012,2.204,3013,3.872,3014,2.644,3015,2.644,3016,2.204,3017,2.204,3018,3.279,3019,3.69,3020,3.69,3021,3.69,3022,5.403,3023,3.69,3024,3.69,3025,3.69,3026,3.69,3027,3.69,3028,3.69,3029,5.403,3030,3.69,3031,3.69,3032,3.69,3033,5.403,3034,3.69,3035,3.69,3036,3.69,3037,5.403,3038,3.69,3039,3.69,3040,3.69,3041,3.69,3042,3.279,3043,3.69,3044,3.69,3045,3.69,3046,3.69,3047,3.69,3048,3.69,3049,3.69,3050,3.69,3051,3.69,3052,3.69,3053,3.69,3054,3.69,3055,3.69,3056,3.69,3057,2.806,3058,3.69,3059,3.69,3060,3.69,3061,3.69,3062,3.279,3063,3.69,3064,2.644,3065,3.69]],["title/classes/Query-3.html",[0,0.201,174,0.666,1636,2.221]],["body/classes/Query-3.html",[0,0.373,2,0.503,3,0.057,4,0.052,5,0.067,7,0.255,8,0.841,10,0.734,12,1.128,16,1.738,19,1.42,24,1.002,26,1.856,30,1.476,36,0.212,38,0.694,40,1.554,42,0.553,43,0.007,44,0.92,51,0.761,66,1.765,73,2.327,74,0.203,77,2.53,83,0.543,84,0.258,85,0.086,88,2.347,92,0.002,93,0.004,94,0.002,129,1.153,130,1.667,134,2.67,135,1.856,141,1.52,154,0.608,155,0.981,157,1.116,158,1.571,166,2.324,174,1.577,175,2.297,194,0.958,221,1.549,224,1.476,259,1.42,266,2.087,267,2.196,271,1.666,277,3.517,278,1.526,311,1.833,312,2.563,318,3.415,342,4.615,343,2.818,344,3.059,350,2.902,478,4.742,580,2.255,601,2.907,648,2.255,652,2.196,653,2.965,672,4.246,775,3.037,784,2.454,788,3.153,904,2.037,915,2.433,922,3.988,924,2.53,945,3.853,949,2.902,1023,2.612,1025,3.991,1028,3.791,1035,1.616,1043,2.384,1057,3.694,1076,1.616,1079,2.506,1082,1.616,1083,1.989,1084,2.655,1093,2.702,1095,1.616,1144,3.153,1159,1.842,1174,2.293,1594,2.196,1608,4.466,1691,6.19,1722,4.788,1723,4.788,1724,4.788,1725,4.788,1750,6.047,1796,4.317,1930,3.482,1932,2.433,1939,4.7,1955,2.608,1956,3.96,1961,1.778,1963,2.077,2775,6.597,2776,4.317,2893,4.317,2995,3.02,2996,3.02,2997,2.902,3005,3.509,3006,2.902,3007,3.694,3008,2.902,3010,3.02,3012,1.912,3013,3.482,3014,2.293,3015,2.293,3016,1.912,3017,1.912,3042,2.843,3057,3.694,3062,4.317,3066,2.843,3067,5.873,3068,7.051,3069,7.051,3070,3.2,3071,4.858,3072,3.2,3073,3.2,3074,3.2,3075,3.2,3076,3.2,3077,3.2,3078,6.558,3079,5.873,3080,3.2,3081,3.2,3082,3.2,3083,3.2,3084,3.2,3085,3.2,3086,4.858,3087,4.858,3088,4.858,3089,4.858,3090,3.2,3091,3.2,3092,3.2,3093,3.2,3094,3.2,3095,3.2,3096,3.2,3097,3.2,3098,3.2,3099,3.2,3100,3.2,3101,3.2]],["title/classes/Query-4.html",[0,0.201,174,0.666,2737,2.593]],["body/classes/Query-4.html",[0,0.383,2,0.604,3,0.068,4,0.062,5,0.075,7,0.284,8,0.963,10,0.842,12,1.149,16,1.992,19,1.627,24,1.048,29,2.176,30,1.692,36,0.255,37,6.148,38,0.454,39,6.124,40,1.679,41,1.942,42,0.581,43,0.007,44,0.827,46,4.88,51,0.783,59,7.074,73,2.394,74,0.133,83,0.653,84,0.311,85,0.068,88,2.809,89,1.784,92,0.003,93,0.004,94,0.003,104,4.233,129,1.322,130,1.25,134,2.871,135,2.127,141,1.625,154,0.731,155,0.996,157,1.058,158,1.596,163,1.145,166,2.23,174,1.605,194,1.098,221,1.564,224,1.692,259,1.627,266,2.392,267,2.517,271,1.91,277,3.582,295,1.536,311,1.894,312,2.804,318,3.672,580,2.584,601,3.04,649,3.094,652,1.738,653,2.959,775,2.741,784,2.812,902,1.652,904,2.334,922,4.114,924,2.899,941,1.95,945,4.028,949,3.326,961,1.834,995,2.584,1023,2.993,1025,4.267,1028,4.093,1030,3.094,1035,1.942,1043,2.731,1058,2.993,1076,1.942,1079,1.469,1080,2.137,1081,2.495,1082,1.942,1084,2.959,1089,2.495,1090,2.297,1093,1.347,1095,1.942,1114,2.067,1115,2.993,1116,2.067,1117,2.067,1118,2.067,1119,1.574,1594,2.517,1763,2.297,1961,2.137,1986,2.615,2742,5.141,2995,3.461,2996,3.461,2997,3.326,2998,4.734,3005,3.91,3006,3.326,3008,3.326,3010,2.39,3011,2.495,3012,2.297,3016,2.297,3017,2.297,3064,2.755,3102,3.416,3103,3.844,3104,3.844,3105,3.844,3106,3.844,3107,3.844,3108,3.844,3109,2.755,3110,3.844,3111,3.844,3112,3.844,3113,2.923,3114,3.844,3115,3.844]],["title/classes/Query-5.html",[0,0.201,174,0.666,763,2.484]],["body/classes/Query-5.html",[0,0.38,2,0.591,3,0.067,4,0.061,5,0.074,7,0.28,8,0.948,10,0.829,12,1.147,16,1.961,19,1.602,24,1.043,26,1.438,29,2.142,30,1.665,36,0.249,38,0.648,40,1.838,41,1.901,42,0.568,43,0.007,44,0.842,51,0.778,66,1.727,73,2.414,74,0.13,77,1.96,83,0.639,84,0.304,85,0.067,88,2.824,89,1.747,92,0.003,93,0.004,94,0.003,129,1.301,130,1.231,134,2.801,135,2.094,141,1.613,154,0.715,155,1.032,157,1.042,158,1.59,163,1.121,166,2.291,174,1.599,194,1.275,221,1.558,224,1.665,259,1.602,266,2.355,267,2.478,271,1.88,277,3.581,295,1.512,311,1.857,312,2.776,318,3.652,480,4.45,580,2.544,601,3.025,649,3.046,652,1.701,653,2.923,735,5.369,736,2.415,737,3.593,775,2.714,784,2.769,902,1.617,904,2.298,922,4.1,924,2.854,929,6.708,941,1.92,945,4.008,949,3.274,961,1.795,995,2.544,1023,2.946,1025,4.236,1028,4.058,1030,3.046,1035,1.901,1043,2.689,1058,2.946,1076,1.901,1079,1.438,1080,2.091,1082,1.901,1084,2.923,1093,2.265,1094,2.559,1095,1.901,1114,2.023,1115,2.946,1116,2.023,1117,2.023,1118,2.023,1119,1.54,1594,2.478,1763,2.248,1961,2.091,2995,3.407,2996,3.407,2997,3.274,2998,4.693,3005,3.862,3006,3.274,3007,2.861,3008,3.274,3009,2.861,3010,2.339,3011,2.442,3012,2.248,3013,3.928,3014,2.696,3015,2.696,3016,2.248,3017,2.248,3116,3.344,3117,3.763,3118,3.763,3119,3.763,3120,3.763,3121,3.763,3122,3.763,3123,3.763]],["title/classes/Query-6.html",[0,0.201,174,0.666,1740,2.593]],["body/classes/Query-6.html",[0,0.38,2,0.591,3,0.067,4,0.061,5,0.074,7,0.28,8,0.948,10,0.828,12,1.147,16,1.96,19,1.601,24,1.043,29,2.141,30,1.664,36,0.249,38,0.444,40,1.793,41,1.899,42,0.568,43,0.007,44,0.822,51,0.777,66,1.726,73,2.413,74,0.13,83,0.638,84,0.304,85,0.067,88,2.847,89,1.745,92,0.003,93,0.004,94,0.003,129,1.3,130,1.23,134,2.8,135,2.093,141,1.613,154,0.715,155,1.032,157,1.041,158,1.589,163,1.12,166,2.277,174,1.598,194,1.081,221,1.558,224,1.664,259,1.601,266,2.354,267,2.476,271,1.879,277,3.586,295,1.511,311,1.869,312,2.775,318,3.651,477,3.245,580,2.543,601,3.024,649,3.044,652,1.7,653,2.921,736,3.804,775,2.713,784,2.767,902,1.616,904,2.297,908,5.408,922,4.1,924,2.853,941,1.919,945,4.008,949,3.273,961,1.794,995,2.543,1023,2.945,1025,4.235,1028,4.057,1030,3.044,1035,1.899,1043,2.688,1058,2.945,1076,1.899,1079,2.093,1080,2.09,1082,1.899,1084,2.921,1093,2.487,1094,2.557,1095,1.899,1114,2.021,1115,2.945,1116,2.021,1117,2.021,1118,2.021,1119,1.539,1594,2.476,1604,4.829,1763,2.246,1961,2.09,1963,2.44,2995,3.406,2996,3.406,2997,3.273,2998,4.692,3005,3.861,3006,3.273,3008,3.273,3009,2.859,3010,2.337,3011,2.44,3012,2.246,3013,3.926,3014,2.694,3015,2.694,3016,2.246,3017,2.246,3109,2.694,3124,3.341,3125,3.76,3126,3.76,3127,3.76,3128,3.76,3129,3.76,3130,3.76,3131,3.76]],["title/classes/Query-7.html",[0,0.201,174,0.666,2727,3.039]],["body/classes/Query-7.html",[0,0.38,2,0.593,3,0.067,4,0.061,5,0.074,7,0.281,8,0.95,10,0.83,12,1.147,16,1.964,19,1.604,24,1.043,29,2.145,30,1.668,36,0.25,38,0.446,40,1.794,41,1.905,42,0.568,43,0.007,44,0.822,51,0.778,66,1.481,73,2.415,74,0.13,83,0.64,84,0.305,85,0.067,88,2.798,89,1.751,92,0.003,93,0.004,94,0.003,129,1.303,130,1.233,134,2.802,135,2.098,141,1.614,154,0.717,155,1.032,157,1.043,158,1.59,163,1.124,166,2.243,174,1.603,194,1.083,221,1.559,224,1.668,259,1.604,266,2.359,267,2.482,271,1.883,277,3.576,295,1.514,311,1.889,312,2.779,318,3.654,580,2.548,601,3.026,649,3.051,652,1.705,653,2.926,702,5.889,707,6.57,735,4.024,736,2.852,737,3.598,738,5.796,775,2.717,784,2.774,793,6.714,902,1.62,904,2.302,922,4.102,924,2.859,941,1.923,945,4.011,949,3.28,961,1.799,995,2.548,1023,2.951,1025,4.239,1028,4.062,1030,3.051,1035,1.905,1043,2.694,1058,2.951,1076,1.905,1079,2.098,1080,2.096,1081,2.448,1082,1.905,1083,2.345,1084,2.926,1089,2.448,1090,2.253,1093,1.923,1095,1.905,1114,2.027,1115,2.951,1116,2.027,1117,2.027,1118,2.027,1119,1.544,1594,2.482,1763,2.253,1961,2.096,1986,2.565,2995,3.413,2996,3.413,2997,3.28,2998,4.698,3005,3.867,3006,3.28,3008,3.28,3010,2.345,3011,2.448,3012,2.253,3016,2.253,3017,2.253,3064,2.703,3109,2.703,3113,2.868,3132,3.351,3133,3.771,3134,3.771,3135,3.771,3136,3.771,3137,3.771,3138,3.771,3139,3.074,3140,3.074]],["title/classes/Query-8.html",[0,0.201,174,0.666,2730,2.864]],["body/classes/Query-8.html",[0,0.381,2,0.595,3,0.067,4,0.061,5,0.074,7,0.281,8,0.952,10,0.832,12,1.147,16,1.97,19,1.609,24,1.044,29,2.151,30,1.673,36,0.251,38,0.447,40,1.668,41,1.913,42,0.569,43,0.007,44,0.823,51,0.779,66,0.866,73,2.417,74,0.131,83,0.643,84,0.306,85,0.067,88,2.8,89,1.757,92,0.003,93,0.004,94,0.003,129,1.307,130,1.236,134,2.805,135,2.103,141,1.617,154,0.719,155,1.032,157,1.046,158,1.592,163,1.128,166,2.245,174,1.604,194,1.086,221,1.56,224,1.673,259,1.609,266,2.365,267,2.489,271,1.888,277,3.577,295,1.519,311,1.899,312,2.784,318,3.658,484,4.214,580,2.555,601,3.029,649,3.06,652,1.711,653,2.933,775,2.721,784,2.781,902,1.627,904,2.308,922,4.104,924,2.867,941,1.928,945,4.014,949,3.289,961,1.806,995,2.555,1023,2.959,1025,4.245,1028,4.068,1030,3.06,1035,1.913,1043,2.701,1058,2.959,1076,1.913,1079,2.721,1080,2.104,1081,2.457,1082,1.913,1084,2.933,1089,2.457,1090,2.262,1093,1.928,1095,1.913,1114,2.035,1115,2.959,1116,2.035,1117,2.035,1118,2.035,1119,1.55,1594,2.489,1763,2.262,1819,7.05,1820,4.623,1832,4.705,1961,2.104,1963,2.457,1986,2.575,2742,6.197,2995,3.423,2996,3.423,2997,3.289,2998,4.705,3005,3.876,3006,3.289,3008,3.289,3010,2.354,3011,2.457,3012,2.262,3016,2.262,3017,2.262,3064,2.713,3109,2.713,3113,2.879,3139,3.086,3140,3.086,3141,3.364,3142,3.786,3143,3.786,3144,3.786,3145,3.786,3146,3.786,3147,3.786,3148,3.786]],["title/classes/Query-9.html",[0,0.201,174,0.666,3149,3.996]],["body/classes/Query-9.html",[0,0.381,2,0.595,3,0.067,4,0.061,5,0.074,7,0.281,8,0.952,10,0.832,12,1.147,16,1.969,19,1.608,24,1.044,29,2.15,30,1.672,36,0.251,38,0.447,40,1.796,41,1.911,42,0.569,43,0.007,44,0.823,51,0.779,66,1.483,73,2.416,74,0.13,83,0.642,84,0.306,85,0.067,88,2.8,89,1.756,92,0.003,93,0.004,94,0.003,129,1.306,130,1.236,134,2.805,135,2.102,141,1.616,154,0.719,155,1.032,157,1.046,158,1.591,163,1.127,166,2.244,174,1.604,194,1.085,221,1.559,224,1.672,259,1.608,266,2.364,267,2.487,271,1.887,277,3.577,295,1.518,311,1.89,312,2.783,318,3.657,484,4.214,580,2.554,601,3.029,649,3.058,652,1.71,653,2.931,775,2.72,784,2.78,902,1.625,904,2.307,922,4.104,924,2.865,941,1.927,945,4.013,949,3.287,961,1.804,995,2.554,1023,2.958,1025,4.244,1028,4.067,1030,3.058,1035,1.911,1043,2.7,1058,2.958,1076,1.911,1079,2.102,1080,2.102,1081,2.455,1082,1.911,1083,2.352,1084,2.931,1089,2.455,1090,2.26,1093,1.927,1095,1.911,1114,2.034,1115,2.958,1116,2.034,1117,2.034,1118,2.034,1119,1.549,1594,2.487,1763,2.26,1818,5.644,1820,5.611,1913,6.167,1961,2.102,1986,2.573,2995,3.421,2996,3.421,2997,3.287,2998,4.703,3005,3.874,3006,3.287,3008,3.287,3010,2.352,3011,2.455,3012,2.26,3016,2.26,3017,2.26,3064,2.711,3109,2.711,3113,2.876,3139,3.084,3140,3.084,3150,3.361,3151,3.783,3152,3.783,3153,3.783,3154,3.783,3155,3.783,3156,3.783]],["title/interfaces/QueryConfig.html",[896,3.242,1167,1.601]],["body/interfaces/QueryConfig.html",[0,0.334,3,0.039,4,0.035,5,0.025,7,0.198,12,1.023,13,1.74,14,0.835,15,1.432,16,1.891,18,2.376,24,0.432,28,2.39,29,1.4,36,0.502,40,1.006,42,0.556,43,0.007,44,0.898,53,1.502,63,1.925,64,1.519,66,1.858,67,2.114,73,1.733,74,0.075,85,0.064,88,2.627,89,1.662,92,0.002,93,0.003,94,0.002,130,1.025,132,1.74,134,1.203,135,2.232,141,0.934,155,0.908,157,0.867,158,1.329,163,1.067,166,2.107,174,1.398,177,1.56,179,1.368,194,1.527,221,1.589,224,0.662,267,2.39,271,1.228,275,1.783,277,2.893,278,3.428,279,1.203,286,1.432,295,1.458,311,1.933,312,0.851,318,2.51,342,1.354,343,3.72,344,4.032,353,3.247,385,2.062,409,1.865,452,2.836,580,1.662,601,2.43,648,3.082,649,1.99,652,0.984,653,0.984,775,2.746,880,5.049,881,1.354,896,4.517,899,6.382,901,4.759,902,3.973,903,3.616,904,3.246,905,4.019,906,4.777,910,4.019,919,2.641,922,3.62,923,1.17,924,1.134,931,4.901,945,2.916,961,1.708,993,2.753,995,1.662,1000,4.128,1002,1.809,1006,1.253,1017,1.56,1018,1.656,1019,3.719,1020,2.726,1021,3.719,1022,5.122,1023,2.842,1024,3.719,1025,3.729,1026,5.122,1028,1.17,1029,2.92,1031,2.92,1033,2.92,1034,2.92,1035,2.951,1036,2.567,1038,3.719,1039,5.655,1040,3.719,1042,2.92,1043,2.238,1044,3.63,1049,2.92,1050,6.117,1051,2.92,1052,2.567,1053,1.481,1054,1.656,1055,2.92,1056,1.775,1057,2.723,1058,1.925,1060,2.92,1061,2.92,1064,2.92,1065,3.158,1066,3.753,1067,6.181,1068,5.122,1069,2.92,1070,4.763,1071,5.033,1072,2.92,1073,4.309,1074,4.777,1075,1.775,1076,1.1,1077,2.92,1078,1.775,1079,1.368,1080,1.21,1081,1.413,1082,1.1,1083,1.354,1084,2.062,1085,1.775,1086,1.775,1087,1.775,1088,1.775,1089,1.413,1090,2.14,1091,1.775,1092,1.775,1093,0.763,1094,1.481,1095,1.1,1096,2.92,1097,6.032,1098,5.858,1099,6.032,1100,4.309,1101,4.309,1102,4.019,1103,6.032,1104,6.032,1105,4.309,1106,5.122,1107,5.122,1108,4.763,1109,4.763,1110,1.775,1111,1.775,1112,1.775,1113,3.719,1114,1.925,1115,2.842,1116,1.925,1117,1.925,1118,1.925,1119,1.466,1120,2.92,1121,2.92,1122,1.775,1123,2.92,1124,2.92,1125,2.92,1126,1.775,1127,2.92,1128,2.92,1129,5.655,1130,5.655,1131,3.719,1132,4.309,1133,4.309,1134,4.309,1135,4.309,1136,4.309,1137,2.92,1138,4.309,1139,4.309,1140,4.309,1141,2.92,1142,1.775,1143,3.269,1144,3.431,1145,3.719,1146,1.775,1147,2.14,1148,2.14,1149,4.019,1150,5.122,1151,5.122,1152,1.775,1153,2.92,1154,2.92,1155,1.775,1156,2.92,1157,1.775,1158,3.719,1159,1.253,1160,1.481,1161,2.92,1162,2.92,1163,1.775,1164,1.775,1165,1.775,1166,2.92,1167,0.732,2699,1.1]],["title/classes/QueryCountryDto.html",[0,0.24,1534,3.242]],["body/classes/QueryCountryDto.html",[0,0.442,2,0.913,3,0.103,4,0.094,5,0.066,24,0.89,31,1.913,32,2.034,33,2.495,36,0.385,38,1.092,42,0.585,43,0.007,44,0.861,51,0.841,55,1.951,64,2.06,66,1.328,74,0.294,75,3.238,76,1.304,80,3.973,81,3.873,82,3.238,85,0.144,87,4.885,88,2.92,92,0.004,93,0.005,94,0.004,163,2.196,221,1.005,295,2.349,477,2.897,645,4.661,1002,2.933,1065,3.469,1534,5.013,1536,6.3,1540,4.5,1542,4.5,1544,2.695,1560,4.837,1933,3.949,2537,6.104,2538,6.684,2539,5.252,2540,3.949,2541,5.508,2542,6.104,2543,4.733,2544,4.161,2545,6.008,2546,4.733,2547,5.013,2548,4.733,2787,6.549,2798,5.16,3157,5.806,3158,5.806,3159,7.37,3160,5.806,3161,5.806,3162,5.806,3163,5.806]],["title/classes/QueryFailedFilter.html",[0,0.24,3164,3.886]],["body/classes/QueryFailedFilter.html",[0,0.36,2,0.711,3,0.08,4,0.073,5,0.052,7,0.31,14,1.667,24,0.754,29,3.014,36,0.299,38,0.738,40,1.7,42,0.504,43,0.007,51,0.706,57,1.895,74,0.316,85,0.127,92,0.003,93,0.005,94,0.003,126,2.44,127,1.851,128,2.999,129,1.482,141,1.278,154,1.187,155,0.676,157,1.187,158,0.812,174,1.511,193,2.385,194,1.411,198,1.101,258,2.055,271,3.081,279,1.519,284,3.063,286,2.497,296,2.354,308,3.06,311,1.886,315,3.237,317,2.602,325,3.47,354,3.251,382,5.032,383,4.351,384,4.659,385,2.044,386,4.474,387,4.439,388,6.264,389,3.594,390,7.558,391,3.685,393,4.351,394,3.613,395,5.83,397,4.864,399,4.937,400,5.835,402,4.247,403,4.247,408,3.766,409,3.251,410,2.43,411,3.075,412,3.47,413,3.685,416,4.247,417,4.247,418,4.247,419,3.24,422,3.437,423,4.247,426,5.125,452,2.81,514,3.24,646,3.594,651,4.017,652,2.044,653,2.044,654,5.548,655,4.017,676,2.934,678,3.685,679,5.089,680,4.017,681,5.089,685,5.83,775,2.385,915,3.437,950,4.017,968,4.474,1459,6.598,1948,3.251,2264,4.747,2685,3.685,2687,5.548,2688,5.548,2698,5.089,2875,3.437,2880,4.017,2882,3.437,2883,4.017,2887,4.017,2889,4.017,2890,6.853,3164,6.993,3165,6.853,3166,4.017,3167,6.243,3168,4.521,3169,4.521,3170,4.521,3171,6.243,3172,4.521,3173,4.017,3174,4.521,3175,4.521,3176,6.243,3177,4.521,3178,4.521,3179,4.521,3180,4.521,3181,4.521,3182,4.521,3183,4.521,3184,4.521]],["title/interfaces/QueryOptions.html",[1167,1.601,1939,3.416]],["body/interfaces/QueryOptions.html",[0,0.287,3,0.054,4,0.049,5,0.035,7,0.132,12,1.022,14,1.33,18,3.028,24,0.566,36,0.503,38,1.079,40,1.258,42,0.587,43,0.007,44,0.953,53,3.284,64,0.739,66,1.464,73,2.389,74,0.105,85,0.114,88,2.827,89,2.971,92,0.002,93,0.003,94,0.002,134,2.755,155,0.927,158,1.15,174,1.56,179,1.791,194,1.263,221,1.482,259,1.37,277,3.412,295,1.293,302,4.021,311,1.908,312,1.193,318,3.523,343,3.584,344,4.554,352,2.188,353,1.697,369,2.606,580,2.649,652,1.381,653,1.381,775,2.18,902,2.014,904,3.182,922,3.541,1035,1.543,1043,1.498,1044,3.141,1050,5.224,1076,1.543,1079,3.187,1082,1.543,1084,2.58,1090,1.824,1093,2.964,1095,2.369,1144,5.561,1148,2.801,1159,1.758,1167,1.575,1930,5.224,1931,2.49,1932,2.322,1933,2.077,1938,2.714,1939,6.514,1941,5.218,1942,2.714,1944,2.714,1946,2.714,1948,4.511,1949,7.614,1950,7.614,1951,3.565,1952,3.824,1953,4.166,1954,5.218,1955,6.385,1956,6.187,1957,5.688,1958,4.166,1959,6.477,1960,2.714,1961,1.697,1962,2.714,1963,1.982,1964,6.744,1965,5.071,1966,5.071,1967,2.714,1968,5.218,1969,5.071,1970,4.166,1971,4.166,1972,3.822,1973,4.166,1974,4.166,1975,4.166,1976,6.477,1977,5.071,1978,5.688,1979,5.688,1980,4.166,1981,4.166,1982,2.714,1983,2.714,1984,2.714,1985,2.714,1986,2.077,1987,2.714,1988,2.714,1989,5.071,1990,2.714,1991,2.714,2699,1.543]],["title/injectables/ResolvePromisesInterceptor.html",[263,1.366,3185,3.886]],["body/injectables/ResolvePromisesInterceptor.html",[0,0.374,3,0.105,4,0.095,5,0.067,7,0.322,10,1.4,14,1.733,30,2.26,36,0.39,38,0.696,42,0.367,43,0.007,51,0.581,74,0.295,85,0.132,92,0.004,93,0.006,94,0.004,128,3.78,141,1.522,154,1.119,155,0.637,158,1.336,194,1.467,198,1.038,221,1.019,263,2.131,264,2.53,385,3.362,387,4.28,404,3.118,405,5.655,406,6.135,408,3.883,510,5.556,530,3.452,919,3.362,981,4.758,1006,4.28,1463,6.608,1501,5.655,2406,6.135,2533,6.608,3185,6.644,3186,5.233,3187,8.561,3188,7.35,3189,8.23,3190,7.437,3191,8.561,3192,6.608,3193,6.644,3194,6.062,3195,6.608,3196,7.437,3197,7.437,3198,8.828,3199,8.828,3200,5.889,3201,7.437,3202,7.437,3203,9.016,3204,7.437,3205,8.15,3206,5.233,3207,5.233,3208,5.889,3209,5.889,3210,5.889,3211,5.889,3212,5.889]],["title/injectables/SortBy.html",[263,1.366,996,3.093]],["body/injectables/SortBy.html",[0,0.42,3,0.088,4,0.08,5,0.056,7,0.325,20,4.076,32,2.804,35,2.658,36,0.327,38,0.784,42,0.413,43,0.007,44,0.938,51,0.655,53,2.073,55,2.69,67,2.653,74,0.229,85,0.142,88,2.822,92,0.004,93,0.005,94,0.004,141,1.358,146,2.276,154,1.261,155,0.866,158,1.604,179,2.535,194,1.647,198,0.872,221,1.385,263,2.147,264,2.124,272,2.658,308,2.927,311,1.639,315,3.201,328,3.066,387,4.608,536,5.046,637,4.311,742,4.573,918,2.358,955,5.695,956,4.03,957,6.106,958,5.679,959,5.896,960,5.896,961,3.165,962,5.896,963,4.449,964,5.896,965,8.189,967,7.932,968,5.984,969,4.393,971,4.656,972,6.106,973,4.393,974,6.106,975,5.419,976,6.106,977,6.655,978,7.42,979,3.964,980,4.125,981,3.688,982,4.125,983,3.256,984,5.409,985,5.409,986,5.409,987,5.896,988,4.393,989,4.393,990,4.393,991,4.393,992,5.896,993,4.649,994,6.215,995,3.716,996,5.195,997,4.755,998,4.755,999,5.896,1000,3.074,1001,4.393,1002,2.498,1003,4.393,1004,4.393,1005,4.393,1006,2.846,1007,5.896,1008,4.393,1009,4.393,1010,4.393,1011,4.393,1012,4.393,1013,4.393,1014,4.393,1015,4.393,1016,4.393,3213,4.944,3214,4.944]],["title/classes/SortByDto.html",[0,0.24,2584,3.416]],["body/classes/SortByDto.html",[0,0.431,2,0.3,3,0.034,4,0.031,5,0.022,7,0.322,10,0.628,12,0.794,13,1.604,18,1.15,22,0.995,24,0.388,28,0.864,31,0.934,32,1.707,33,1.786,36,0.275,40,0.421,42,0.577,43,0.007,44,0.921,47,2.312,51,0.317,55,2.837,64,2.126,66,1.616,67,2.173,74,0.289,75,3.71,76,1.094,79,3.422,80,2.04,81,3.661,82,3.259,84,0.26,85,0.15,87,3.652,88,2.516,92,0.001,93,0.002,94,0.001,98,1.347,100,1.623,132,0.629,135,0.73,154,0.611,155,0.882,156,2.706,163,1.754,171,2.555,174,0.812,175,2.062,176,0.801,198,0.337,216,1.825,221,1.183,295,1.727,302,1.93,311,0.658,315,2.354,383,2.922,409,2.538,477,1.744,480,0.937,530,0.887,544,2.443,587,3.163,637,1.1,645,4.447,648,2.262,742,4.398,919,2.457,935,1.369,941,0.669,958,2.185,963,1.785,979,1.919,980,1.997,981,1.785,982,1.997,983,1.576,993,4.087,994,4.005,996,1.24,997,5.062,998,4.486,1002,3.454,1020,1.141,1065,1.919,1066,2.911,1093,1.125,1119,1.702,1198,1.188,1202,2.085,1203,1.997,1254,1.24,1540,4.293,1542,3.926,1544,3.05,1551,4.477,1554,3.161,1555,6.052,1558,3.492,1559,1.453,1560,4.615,1561,1.453,1591,1.3,1593,1.062,1948,3.679,2030,2.085,2040,1.997,2098,3.315,2290,1.558,2539,4.534,2540,2.185,2541,5.057,2547,3.697,2549,1.369,2550,4.997,2557,2.619,2558,1.558,2559,1.369,2560,1.558,2561,4.486,2562,3.389,2563,4.486,2564,3.389,2565,1.558,2566,3.706,2567,1.453,2568,2.828,2569,2.302,2570,2.443,2571,2.302,2572,1.558,2573,1.558,2574,1.558,2575,3.973,2576,2.619,2577,1.369,2578,2.443,2579,2.619,2580,2.619,2581,1.558,2582,2.619,2583,3.161,2584,5.204,2585,1.558,2586,2.619,2587,2.619,2588,1.558,2589,1.558,2590,1.558,2591,2.619,2592,2.619,2593,2.619,2594,2.828,2595,1.558,2596,6.061,2597,1.558,2598,1.558,2599,1.558,2600,2.619,2601,1.558,2602,1.558,2603,1.558,2604,1.558,2605,2.619,2606,2.619,2607,1.558,2608,1.558,2609,2.302,2610,1.558,2611,2.619,2612,1.558,2613,3.973,2614,1.558,2615,1.558,2616,1.558,2617,1.558,2618,2.619,2619,2.619,2620,2.619,2621,2.619,2622,3.389,2623,2.619,2624,2.619,2625,1.453,2626,3.895,2627,4.431,2628,4.431,2629,2.619,2630,2.619,2631,1.558,2632,1.558,2633,1.558,2634,1.558,3215,1.911,3216,1.911,3217,1.698,3218,1.911]],["title/classes/SortCountryDto.html",[0,0.24,2542,3.416]],["body/classes/SortCountryDto.html",[0,0.449,2,0.96,3,0.108,4,0.099,5,0.07,24,0.919,31,1.708,32,2.139,33,2.624,36,0.404,42,0.574,43,0.007,44,0.902,51,0.751,55,2.052,64,1.84,66,1.397,74,0.299,75,3.314,76,1.371,80,4.066,81,3.932,82,3.314,85,0.147,87,4.959,88,2.949,92,0.005,93,0.006,94,0.005,163,2.267,221,1.056,295,2.099,477,2.965,645,3.515,1002,3.085,1065,3.648,1534,4.154,1536,5.938,1540,3.394,1542,3.394,1544,2.835,1560,3.648,1933,4.154,2537,5.938,2538,6.301,2539,5.331,2540,4.154,2541,5.636,2542,6.216,2543,6.755,2544,5.938,2545,6.202,2546,4.978,2547,5.175,2548,4.978,3217,5.426,3219,6.107,3220,6.107,3221,6.107]],["title/classes/State.html",[0,0.24,481,2.408]],["body/classes/State.html",[0,0.447,2,0.815,3,0.092,4,0.084,5,0.088,7,0.391,8,1.184,9,2.3,10,1.317,11,2.871,12,0.827,13,2.254,14,1.901,19,2.001,24,0.985,31,1.832,36,0.343,40,2.012,42,0.574,43,0.007,44,0.945,47,2.509,51,0.805,57,2.871,58,2.871,60,3.266,64,1.973,66,1.754,74,0.179,75,3.262,76,1.164,83,0.88,84,0.419,85,0.092,92,0.004,93,0.005,94,0.004,97,3.016,98,2.871,99,3.941,101,3.178,102,2.942,103,3.016,109,3.359,110,2.785,120,4.385,129,1.625,140,3.095,155,1.005,166,2.187,337,3.565,404,2.871,454,5.581,477,3.117,481,4.902,485,4.657,736,3.378,737,4.261,806,6.251,807,6.251,808,6.251,809,6.251,810,6.251,812,5.495,813,5.495,814,5.495,815,5.495,816,5.495,828,4.657,1002,3.459,1079,2.616,1590,6.084,1592,6.084,1593,3.805,1594,3.095,1600,6.084,1601,5.581,1807,6.251,3222,4.604,3223,6.846,3224,5.182,3225,5.182,3226,6.813,3227,5.182,3228,5.182]],["title/controllers/StateController.html",[121,1.507,3229,3.624]],["body/controllers/StateController.html",[0,0.203,3,0.072,4,0.065,5,0.077,7,0.407,8,0.997,10,1.22,12,1.026,30,1.75,31,1.742,36,0.267,38,0.917,40,1.482,42,0.571,43,0.007,44,0.926,51,0.766,73,2.419,74,0.293,76,0.905,83,0.684,84,0.326,85,0.072,92,0.005,93,0.004,94,0.003,121,1.275,123,1.327,125,2.409,126,2.866,127,3.303,129,1.368,130,1.294,131,3.819,132,2.845,133,3.848,134,2.904,135,2.201,136,1.785,137,3.739,138,3.442,140,2.604,141,1.501,142,2.201,143,3,144,3.582,145,3.442,146,3.145,147,2.674,148,2.91,149,1.823,150,2.688,151,2.742,152,2.674,154,1.578,155,0.919,156,1.821,157,1.278,158,1.576,159,3.281,160,1.872,162,2.409,163,1.717,164,3.097,166,2.355,168,2.674,169,2.674,170,2.409,171,2.899,172,2.742,174,1.221,175,2.355,176,2.415,178,2.415,179,2.568,180,2.037,182,3.442,184,1.872,185,2.829,187,3.315,190,2.358,191,2.827,192,2.409,193,1.54,194,1.638,195,4.559,196,3.442,197,3.501,198,0.711,199,3.202,200,4.634,201,4.381,202,1.978,203,2.241,204,1.69,206,1.69,210,1.776,212,1.923,215,1.732,216,1.25,218,4.465,219,2.742,220,2.321,221,1.342,224,1.225,226,4.381,230,2.507,233,2.037,238,2.409,295,1.589,363,2.748,481,4.916,490,2.674,714,1.923,715,1.776,737,4.484,3229,6.135,3230,3.583,3231,7.169,3232,5.276,3233,5.276,3234,4.032,3235,4.032,3236,4.032,3237,4.032,3238,4.032,3239,4.032,3240,4.032,3241,4.032,3242,3.583,3243,3.583,3244,4.032,3245,4.032,3246,4.032,3247,6.722,3248,4.032,3249,4.032,3250,4.032,3251,4.032,3252,4.032,3253,4.032,3254,4.032,3255,4.032,3256,4.032,3257,4.032,3258,4.032]],["title/classes/StateDto.html",[0,0.24,3233,3.242]],["body/classes/StateDto.html",[0,0.465,2,0.79,3,0.089,4,0.081,5,0.086,7,0.388,8,1.16,9,2.254,10,1.306,11,2.812,12,0.973,13,2.208,14,1.563,15,3.222,18,2.4,19,1.96,20,4.009,21,4.814,22,3.493,23,2.746,24,0.973,25,4.007,26,2.563,27,4.007,28,3.032,29,2.621,30,2.038,31,1.98,32,2.645,33,3.244,34,3.728,35,3.606,36,0.333,38,1.021,40,1.944,41,3.815,42,0.558,43,0.007,44,0.94,47,2.409,49,4.346,51,0.828,54,3.861,55,2.707,57,2.812,58,2.812,60,3.2,61,4.007,62,3.861,63,3.606,64,1.949,65,3.261,66,1.92,67,2.682,74,0.26,75,3.222,76,1.128,77,3.932,78,4.346,79,3.932,80,3.291,81,2.955,82,3.019,83,0.853,84,0.406,85,0.089,91,3.728,92,0.004,93,0.005,94,0.004,155,0.954,157,1.275,166,2.023,477,2.883,481,4.826,736,3.327,737,4.196,812,5.411,813,5.411,814,5.411,815,5.411,816,5.411,828,4.562,865,3.6,1404,4.464,1406,5.1,1410,4.464,3226,6.71,3233,5.874,3259,4.464,3260,5.024,3261,5.024,3262,5.024,3263,5.024,3264,5.024]],["title/modules/StateModule.html",[84,0.385,444,3.416]],["body/modules/StateModule.html",[0,0.325,3,0.115,4,0.104,5,0.097,7,0.341,8,1.362,43,0.007,74,0.305,83,1.096,84,0.714,85,0.115,92,0.005,93,0.006,94,0.005,123,2.911,129,1.869,130,1.768,136,2.44,142,3.008,174,1.415,198,1.138,242,2.467,243,2.582,244,2.845,245,2.845,246,2.643,247,3.562,248,3.743,252,3.469,253,2.845,254,2.582,256,4.704,257,4.704,258,2.592,259,2.301,260,4.1,261,4.376,444,6.877,481,4.468,3229,6.895,3232,6.596,3243,5.737,3265,5.737,3266,5.737,3267,5.737,3268,6.456,3269,6.456]],["title/injectables/StateService.html",[263,1.366,3232,3.242]],["body/injectables/StateService.html",[0,0.369,3,0.062,4,0.057,5,0.071,7,0.333,8,0.901,10,1.162,12,0.987,15,2.082,16,1.863,18,1.863,19,1.522,23,2.132,24,0.629,36,0.232,38,0.908,42,0.495,43,0.007,44,0.912,51,0.785,73,2.12,74,0.297,83,0.596,84,0.555,85,0.062,92,0.006,93,0.004,94,0.003,129,1.236,130,1.169,132,2.261,133,2.484,134,2.308,136,1.614,140,2.354,141,1.406,142,1.99,146,3.076,147,2.417,148,2.631,149,2.354,150,2.747,152,2.417,154,1.512,155,0.884,156,1.646,157,1.658,158,1.526,159,3.208,160,2.417,166,2.325,168,2.417,169,2.882,171,2.742,174,1.39,175,2.175,176,1.472,178,2.183,179,2.624,180,2.631,184,2.417,185,2.74,187,3.475,190,3.004,193,1.341,194,1.516,198,0.619,204,1.472,206,1.472,210,1.546,212,1.674,216,2.466,221,1.269,222,3.794,224,1.582,229,3.954,233,2.631,258,1.714,259,2.007,263,1.493,264,1.508,266,2.238,267,2.354,269,2.997,270,3.38,271,1.786,272,2.799,273,3.666,274,3.237,275,2.035,276,3.237,277,1.946,278,3.796,279,1.75,281,4.003,282,4.02,284,3.046,286,2.082,289,3.237,291,3.45,295,1.437,296,4.544,297,2.669,299,2.515,300,1.887,301,2.387,302,1.629,303,2.182,304,3.47,305,2.387,306,3.237,307,3.237,308,2.27,309,3.86,310,1.951,311,1.786,312,2.035,313,2.278,314,4.144,315,3.182,316,3.96,317,2.02,319,3.237,320,2.182,321,2.182,322,3.86,323,3.86,324,3.86,325,3.45,326,2.182,327,2.278,328,1.437,329,2.182,330,2.097,332,2.182,334,2.278,335,2.02,338,2.182,339,2.387,340,2.387,341,3.111,345,3.237,348,2.278,349,2.997,350,2.097,351,3.111,355,2.02,356,2.997,357,2.182,361,2.182,362,2.097,363,2.962,364,2.182,365,2.387,374,2.555,477,1.256,481,4.844,523,1.951,714,1.674,715,1.546,736,1.546,775,1.99,776,2.278,780,3.38,788,2.278,791,4.245,792,3.96,794,2.515,894,3.96,898,2.861,902,1.508,903,2.02,908,2.515,930,2.669,931,4.27,932,3.119,933,2.861,934,2.861,935,2.515,3231,6.104,3232,5.228,3233,4.991,3242,3.119,3270,3.119,3271,5.208,3272,3.51,3273,3.51,3274,3.51,3275,3.51,3276,3.51,3277,3.51]],["title/classes/UpdateDto.html",[0,0.24,185,1.537]],["body/classes/UpdateDto.html",[0,0.374,2,1.169,3,0.132,4,0.12,5,0.085,43,0.007,74,0.295,76,1.669,85,0.132,92,0.006,93,0.006,94,0.006,185,2.761,367,3.871,375,4.441,376,4.441,1508,5.327,3278,6.605,3279,7.434]],["title/classes/UpdateDto-1.html",[0,0.201,66,0.914,185,1.289]],["body/classes/UpdateDto-1.html",[0,0.478,2,1.015,3,0.115,4,0.104,5,0.097,7,0.341,8,1.362,9,2.645,10,1.337,11,3.301,12,0.951,13,2.592,14,2.061,16,2.817,24,0.951,38,1.045,43,0.007,73,2.439,74,0.272,83,1.096,84,0.522,85,0.115,92,0.005,93,0.006,94,0.005,97,3.469,98,3.708,102,3.383,150,3.626,156,2.489,185,2.975,224,2.687,343,3.383,367,4.424,368,4.704,369,4.376,370,4.895,371,4.704,372,4.895,373,4.704,374,3.863,375,3.857,376,3.857,478,4.754,1119,2.643,3280,5.737,3281,4.392,3282,6.456]],["title/classes/UpdateDto-2.html",[0,0.201,185,1.289,918,1.906]],["body/classes/UpdateDto-2.html",[0,0.478,2,1.015,3,0.115,4,0.104,5,0.097,7,0.341,8,1.362,9,2.645,10,1.337,11,3.301,12,0.951,13,2.592,14,2.061,16,2.817,24,0.951,38,1.045,43,0.007,73,2.439,74,0.272,83,1.096,84,0.522,85,0.115,92,0.005,93,0.006,94,0.005,97,3.469,98,3.708,102,3.383,156,2.489,185,2.975,224,2.687,343,3.383,367,4.424,368,4.704,369,4.376,370,4.895,371,4.704,372,4.895,373,4.704,374,3.863,375,3.857,376,3.857,480,4.339,835,6.167,1119,2.643,3281,4.392,3283,5.737,3284,6.456]],["title/classes/UpdateDto-3.html",[0,0.201,185,1.289,1636,2.221]],["body/classes/UpdateDto-3.html",[0,0.478,2,1.015,3,0.115,4,0.104,5,0.097,7,0.341,8,1.362,9,2.645,10,1.337,11,3.301,12,0.951,13,2.592,14,2.061,16,2.817,24,0.951,38,1.045,43,0.007,73,2.439,74,0.272,83,1.096,84,0.522,85,0.115,92,0.005,93,0.006,94,0.005,97,3.469,98,3.708,102,3.383,150,3.536,156,2.489,185,2.975,224,2.687,343,3.383,367,4.424,368,4.704,369,4.376,370,4.895,371,4.704,372,4.895,373,4.704,374,3.863,375,3.857,376,3.857,477,3.164,1119,2.643,1516,4.014,3281,4.392,3285,5.737,3286,6.456]],["title/classes/UpdateDto-4.html",[0,0.201,185,1.289,2737,2.593]],["body/classes/UpdateDto-4.html",[0,0.478,2,1.015,3,0.115,4,0.104,5,0.097,7,0.341,8,1.362,9,2.645,10,1.337,11,3.301,12,0.951,13,2.592,14,2.061,16,2.817,24,0.951,38,1.045,43,0.007,73,2.439,74,0.272,83,1.096,84,0.522,85,0.115,92,0.005,93,0.006,94,0.005,97,3.469,98,3.708,102,3.383,156,2.489,185,2.975,224,2.687,343,3.383,367,4.424,368,4.704,369,4.376,370,4.895,371,4.704,372,4.895,373,4.704,374,3.863,375,3.857,376,3.857,484,4.105,1119,2.643,1834,6.167,3281,4.392,3287,5.737,3288,6.456]],["title/classes/UpdateDto-5.html",[0,0.201,185,1.289,763,2.484]],["body/classes/UpdateDto-5.html",[0,0.478,2,1.015,3,0.115,4,0.104,5,0.097,7,0.341,8,1.362,9,2.645,10,1.337,11,3.301,12,0.951,13,2.592,14,2.061,16,2.817,24,0.951,38,1.045,43,0.007,73,2.439,74,0.272,83,1.096,84,0.522,85,0.115,92,0.005,93,0.006,94,0.005,97,3.469,98,3.708,102,3.383,156,2.489,185,2.975,224,2.687,343,3.383,367,4.424,368,4.704,369,4.376,370,4.895,371,4.704,372,4.895,373,4.704,374,3.863,375,3.857,376,3.857,483,5.739,1119,2.643,1877,6.167,3281,4.392,3289,5.737,3290,6.456]],["title/classes/UpdateDto-6.html",[0,0.201,185,1.289,1740,2.593]],["body/classes/UpdateDto-6.html",[0,0.478,2,1.015,3,0.115,4,0.104,5,0.097,7,0.341,8,1.362,9,2.645,10,1.337,11,3.301,12,0.951,13,2.592,14,2.061,16,2.817,24,0.951,38,1.045,43,0.007,73,2.439,74,0.272,83,1.096,84,0.522,85,0.115,92,0.005,93,0.006,94,0.005,97,3.469,98,3.708,102,3.383,156,2.489,185,2.975,224,2.687,343,3.383,367,4.424,368,4.704,369,4.376,370,4.895,371,4.704,372,4.895,373,4.704,374,3.863,375,3.857,376,3.857,481,4.468,1119,2.643,3233,6.167,3281,4.392,3291,5.737,3292,6.456]],["title/classes/UserNotFoundException.html",[0,0.24,3293,3.886]],["body/classes/UserNotFoundException.html",[0,0.324,2,1.012,3,0.114,4,0.104,5,0.074,7,0.368,26,3.003,38,1.003,42,0.401,43,0.007,44,0.893,47,1.71,51,0.636,74,0.222,85,0.114,92,0.005,93,0.006,94,0.005,154,1.224,155,0.697,157,1.679,190,3.473,194,1.27,198,1.135,279,2.164,286,3.143,308,3.412,314,4.601,315,3.533,367,4.719,382,4.884,393,4.226,403,4.38,530,3.649,542,6.452,637,4.525,646,4.525,941,2.256,983,3.16,1174,4.615,2134,5.722,2210,3.579,3293,7.514,3294,6.985,3295,5.722,3296,9.217,3297,7.861,3298,7.861,3299,6.44,3300,6.44,3301,6.44]],["title/classes/UtilsService.html",[0,0.24,282,2.408]],["body/classes/UtilsService.html",[0,0.252,2,0.525,3,0.059,4,0.054,5,0.038,7,0.29,12,0.911,18,2.397,26,1.916,36,0.399,38,0.712,42,0.447,43,0.007,44,0.99,51,0.595,64,0.807,67,2.679,74,0.173,85,0.089,88,2.604,89,1.549,92,0.002,93,0.004,94,0.002,103,3.324,130,1.126,135,2.56,141,1.372,154,1.487,155,0.652,157,0.634,158,1.29,163,0.994,171,2.684,174,1.48,175,2.643,176,3.163,194,1.703,221,1.493,277,2.819,282,3.954,291,3.349,295,1.383,300,1.794,302,2.797,311,1.856,328,2.743,342,5.005,343,3.459,344,3.489,349,4.904,350,2.996,351,4.507,353,3.723,354,3.489,355,4.969,356,4.969,383,1.794,389,4.741,580,1.549,601,2.347,645,4.134,648,1.549,715,1.47,775,3.298,902,3.363,903,4.505,904,3.802,916,2.787,931,5.005,941,2.516,961,1.592,979,1.994,980,2.075,981,1.855,982,2.075,983,1.638,984,2.721,985,2.721,986,2.721,993,4.495,994,2.27,1002,2.534,1030,2.787,1044,3.701,1052,2.392,1058,2.696,1071,3.411,1079,1.275,1083,2.075,1114,1.794,1115,2.696,1116,1.794,1117,1.794,1118,1.794,1119,1.366,1143,3.594,1148,2.996,1149,6.702,1159,1.921,1560,3.6,1572,3.411,1580,2.538,1793,7.155,1797,6.38,1798,6.84,1799,6.84,1801,2.966,1802,4.089,1803,7.037,1941,4.089,1952,4.81,1954,4.089,1972,4.912,2260,5.354,2544,4.318,2550,5.094,2583,6.263,2664,3.594,2850,2.966,2852,2.966,2853,4.457,2855,2.966,2856,4.457,2858,2.966,2860,5.354,2997,2.996,3207,2.966,3302,2.966,3303,6.025,3304,6.025,3305,3.337,3306,8.236,3307,3.337,3308,5.354,3309,6.7,3310,4.457,3311,3.337,3312,3.337,3313,3.337,3314,6.025,3315,3.337,3316,3.337,3317,3.337,3318,3.337,3319,6.7,3320,5.015,3321,3.337,3322,3.337,3323,3.337,3324,3.337,3325,3.337,3326,3.337,3327,6.7,3328,3.337,3329,3.337,3330,3.337,3331,3.337,3332,3.337,3333,3.337,3334,3.337,3335,3.337,3336,3.337,3337,3.337,3338,6.025,3339,3.337,3340,3.337,3341,3.337]],["title/changelog.html",[3342,2.864,3343,2.864,3344,3.551]],["body/changelog.html",[43,0.006,92,0.006,93,0.006,94,0.006,187,3.36,243,2.973,601,2.604,916,4.131,1147,4.441,1863,5.652,3344,6.605,3345,7.434,3346,7.606,3347,7.434,3348,7.434,3349,6.605,3350,7.434,3351,7.434,3352,6.605,3353,7.434,3354,7.434,3355,7.434,3356,6.06,3357,7.434,3358,7.434]],["title/contributing.html",[3342,2.864,3343,2.864,3359,3.551]],["body/contributing.html",[14,1.518,43,0.007,47,1.73,66,1.491,92,0.005,93,0.006,94,0.005,99,3.75,128,3.32,132,2.145,155,0.923,157,1.238,312,2.546,448,6.912,490,3.024,672,4.353,763,4.051,918,3.777,941,2.282,1006,4.557,1159,3.75,1493,3.292,1636,3.621,1740,4.229,1952,3.893,2099,4.669,2523,4.955,2626,5.674,2646,5.79,2702,5.312,2737,4.229,2821,5.312,3192,5.79,3349,5.79,3352,7.035,3356,5.312,3359,7.035,3360,6.516,3361,7.035,3362,7.579,3363,7.917,3364,7.917,3365,6.516,3366,7.883,3367,6.516,3368,6.516,3369,6.516,3370,6.516,3371,6.516,3372,6.516,3373,7.579,3374,7.579,3375,6.516,3376,6.516,3377,6.516,3378,6.516,3379,6.516,3380,5.79,3381,7.917,3382,7.579,3383,6.516,3384,5.79,3385,7.035,3386,7.035,3387,5.79,3388,7.917,3389,6.516,3390,7.917,3391,6.516,3392,6.516,3393,6.516,3394,5.79,3395,7.579,3396,6.516,3397,5.79,3398,5.79,3399,5.79]],["title/coverage.html",[3400,5.278]],["body/coverage.html",[0,0.49,1,2.003,5,0.034,6,2.617,42,0.183,43,0.007,50,3.467,58,1.235,75,1.178,92,0.002,93,0.003,94,0.002,95,2.003,96,2.617,101,1.367,121,2.745,122,2.239,124,2.617,139,2.003,150,1.178,157,0.56,171,1.101,174,1.376,185,2.416,203,1.637,204,1.235,211,2.111,242,1.742,246,1.206,247,1.235,263,2.578,265,2.617,273,1.405,281,1.534,282,1.488,284,2.237,300,1.583,328,3.862,344,1.534,366,2.617,378,2.401,379,2.617,380,2.617,459,2.239,473,3.794,477,1.054,478,1.583,481,1.488,482,2.003,483,1.911,484,1.367,487,2.239,488,2.617,524,2.617,598,2.617,624,2.239,634,2.401,635,2.617,636,2.617,700,2.239,701,2.617,703,2.003,704,2.003,718,2.111,734,2.617,774,2.617,795,2.617,797,2.617,821,2.111,822,2.617,833,2.239,834,2.617,835,2.003,844,2.003,863,2.617,869,4.241,879,2.617,881,1.831,896,2.003,919,3.736,955,2.239,956,3.717,996,1.911,1017,2.111,1018,4.241,1071,2.003,1167,2.856,1180,1.637,1181,3.717,1206,2.111,1208,2.111,1210,2.111,1212,2.111,1214,2.111,1217,2.111,1219,2.111,1221,2.111,1223,2.111,1226,1.831,1228,2.239,1392,2.239,1393,3.997,1394,2.617,1396,2.003,1398,2.111,1402,2.617,1406,7.467,1435,2.617,1490,2.239,1491,2.617,1492,2.959,1505,2.834,1508,2.111,1516,1.831,1534,2.003,1536,3.997,1544,1.367,1555,2.003,1569,2.617,1581,2.111,1589,2.617,1621,2.111,1650,2.239,1651,4.051,1668,2.617,1676,3.717,1680,2.617,1690,2.617,1715,2.401,1721,2.617,1748,2.239,1749,4.051,1750,3.101,1751,2.003,1775,2.617,1806,2.617,1816,2.617,1830,2.239,1831,2.617,1833,2.003,1834,2.003,1860,2.617,1863,2.239,1867,2.617,1873,2.239,1874,2.617,1876,2.003,1877,2.003,1894,2.617,1904,2.617,1919,2.617,1930,2.111,1931,3.717,1932,3.467,1933,4.62,1939,2.111,2000,3.752,2001,2.617,2055,7.675,2081,2.401,2119,2.617,2151,3.717,2176,2.617,2201,2.401,2202,2.617,2203,2.617,2215,3.211,2216,2.617,2217,4.62,2219,1.759,2229,2.617,2237,4.271,2238,2.617,2253,2.617,2285,2.111,2286,2.617,2288,2.239,2297,2.239,2298,2.617,2324,2.401,2326,2.617,2327,2.617,2328,2.239,2332,2.003,2335,1.831,2364,2.617,2389,2.617,2400,2.617,2407,2.239,2408,2.617,2422,2.003,2452,2.239,2453,2.617,2478,2.003,2494,2.617,2522,2.617,2531,2.617,2537,2.111,2538,4.241,2542,2.111,2549,3.997,2559,2.111,2561,2.111,2563,2.111,2584,2.111,2638,2.617,2657,2.239,2658,2.617,2659,2.003,2671,2.617,2677,2.617,2678,2.617,2691,2.401,2692,2.617,2693,3.717,2700,2.617,2705,2.617,2706,2.617,2711,2.617,2712,2.617,2713,2.617,2714,2.239,2715,3.717,2721,2.003,2730,2.111,2734,2.401,2771,2.617,2772,2.617,2777,2.617,2781,2.617,2782,2.617,2783,2.617,2784,2.617,2809,3.717,2826,2.617,2875,2.239,2876,2.617,2902,2.617,2964,2.617,2991,2.617,2994,2.617,3018,2.617,3066,2.617,3102,2.617,3116,2.617,3124,2.617,3132,2.617,3141,2.617,3150,2.617,3164,2.401,3165,2.617,3166,2.617,3173,2.617,3185,2.401,3186,2.617,3193,2.401,3222,2.617,3229,2.239,3230,2.617,3232,2.003,3233,2.003,3259,2.617,3270,2.617,3278,2.617,3280,2.617,3283,2.617,3285,2.617,3287,2.617,3289,2.617,3291,2.617,3293,2.401,3294,2.617,3295,2.617,3302,2.617,3400,2.401,3401,2.945,3402,7.184,3403,2.945,3404,8.996,3405,6.793,3406,2.945,3407,2.945,3408,2.945,3409,4.559,3410,2.945,3411,4.051,3412,8.118,3413,4.051,3414,2.945,3415,2.945,3416,2.945,3417,2.945,3418,4.559,3419,5.578,3420,5.578,3421,2.945,3422,2.945,3423,8.118,3424,7.741,3425,4.559,3426,2.945,3427,2.945,3428,2.945,3429,5.578,3430,2.945,3431,9.433,3432,2.945,3433,2.945,3434,2.617,3435,2.945,3436,4.559,3437,2.945,3438,2.617,3439,8.265,3440,7.492,3441,7.184,3442,2.945,3443,2.945,3444,2.945,3445,6.28,3446,2.945,3447,4.559,3448,2.617,3449,2.617,3450,2.945,3451,2.945,3452,2.945,3453,4.559,3454,4.559,3455,2.945,3456,2.945,3457,2.945,3458,4.559,3459,4.559,3460,5.578,3461,2.945,3462,4.559,3463,4.559,3464,2.945,3465,2.945,3466,6.793,3467,6.793,3468,7.184,3469,2.945,3470,2.945,3471,4.559,3472,2.945,3473,2.945,3474,4.559,3475,4.559,3476,4.559,3477,2.945,3478,4.559,3479,7.946,3480,7.946,3481,2.945,3482,2.945,3483,2.945,3484,2.945,3485,2.945,3486,2.617,3487,2.617,3488,2.617,3489,2.617,3490,2.945,3491,2.945,3492,4.559,3493,2.945,3494,2.945,3495,2.617,3496,2.617,3497,2.945]],["title/dependencies.html",[243,2.289,3498,3.996]],["body/dependencies.html",[0,0.399,32,2.288,33,2.807,43,0.007,76,1.467,92,0.005,93,0.006,94,0.005,128,2.739,198,1.152,243,2.612,394,3.3,411,4.444,412,4.935,492,4.968,494,4.444,514,4.682,521,5.326,530,3.032,606,3.512,1257,4.564,1416,5.326,1542,3.631,2123,4.407,2267,4.682,2269,5.326,2270,5.326,2318,4.682,2323,6.03,2647,5.805,2882,4.968,3206,5.805,3499,6.533,3500,6.533,3501,7.93,3502,6.533,3503,6.533,3504,6.533,3505,6.533,3506,8.539,3507,6.533,3508,6.533,3509,6.533,3510,6.533,3511,6.533,3512,6.533,3513,6.533,3514,6.533,3515,6.533,3516,6.533,3517,6.533,3518,6.533,3519,6.533,3520,6.533,3521,6.533,3522,6.533,3523,6.533,3524,6.533,3525,5.805,3526,6.533,3527,5.805,3528,6.533,3529,6.533,3530,6.533,3531,6.533,3532,7.93,3533,6.533,3534,5.805,3535,6.533,3536,6.533,3537,6.533,3538,6.533,3539,6.533,3540,6.533,3541,6.533,3542,6.533]],["title/miscellaneous/enumerations.html",[3543,2.718,3544,5.087]],["body/miscellaneous/enumerations.html",[5,0.077,36,0.447,43,0.007,88,3.087,92,0.005,93,0.006,94,0.005,175,2.363,602,5.825,1020,4.03,1119,2.762,1204,5.499,1248,6.105,1251,5.825,1266,5.825,1593,4.493,2081,5.499,2098,5.499,2099,5.794,2100,6.148,2120,3.883,2123,4.812,2124,4.194,2133,5.026,2151,5.499,2263,5.995,2361,4.589,2549,4.834,2566,6.148,2567,5.13,2568,5.499,2569,5.794,3543,4.589,3544,5.995,3545,6.746,3546,6.746,3547,5.995,3548,7.184,3549,6.746,3550,5.995,3551,6.746]],["title/miscellaneous/functions.html",[1573,4.353,3543,2.718]],["body/miscellaneous/functions.html",[0,0.467,7,0.369,10,1.112,12,1.027,13,1.57,14,1.509,20,3.661,26,1.822,28,2.156,30,1.449,31,1.071,32,1.67,33,2.049,34,2.65,35,4.24,36,0.316,38,1.046,42,0.491,43,0.007,44,0.654,47,2.311,60,3.089,62,2.745,64,1.908,66,1.682,74,0.223,75,2.589,87,2.65,88,2.325,92,0.004,93,0.005,94,0.004,97,2.101,98,3.083,100,4.166,101,3.413,140,2.156,154,1.654,155,0.942,158,1.163,159,2.631,175,1.67,203,3.599,242,2.474,246,3.01,258,1.57,279,2.176,286,2.589,302,3.661,304,2.409,308,1.743,310,2.65,311,1.326,354,3.372,381,3.417,382,2.745,389,2.745,393,3.953,404,3.458,408,1.999,410,2.563,429,3.417,449,5.001,450,4.571,493,3.626,510,4.772,530,3.413,536,3.626,538,6.43,587,3.095,601,2.763,637,3.727,646,2.745,648,3.413,916,3.599,918,3.089,919,3.845,958,3.243,963,3.599,971,2.964,974,3.887,983,2.34,993,2.483,1071,5.365,1093,1.67,1174,4.64,1226,4.026,1251,3.095,1266,3.095,1470,5.754,1493,2.409,1573,3.626,1636,3.599,1832,2.964,1952,2.849,2030,3.095,2036,2.964,2100,3.626,2104,3.626,2217,4.405,2259,4.237,2406,3.417,2427,5.998,2429,4.237,2523,3.626,2559,4.64,2561,4.64,2563,5.91,2639,4.237,2737,4.202,2809,3.887,2816,4.237,2817,4.237,2818,4.237,2819,4.237,2821,3.887,2831,3.626,3057,4.924,3188,5.279,3189,7.558,3193,5.279,3194,5.279,3195,4.237,3384,5.754,3411,4.237,3413,4.237,3434,4.237,3438,4.237,3448,4.237,3449,4.237,3486,4.237,3487,6.534,3488,4.237,3489,5.754,3495,4.237,3496,5.754,3543,3.243,3552,4.768,3553,4.768,3554,4.237,3555,4.768,3556,4.768,3557,4.768,3558,4.768,3559,4.768,3560,4.768,3561,4.768,3562,4.768,3563,4.768,3564,6.475,3565,4.768,3566,4.768,3567,4.768,3568,4.768,3569,4.768,3570,4.237,3571,4.768,3572,7.353,3573,6.475,3574,4.768,3575,6.475,3576,4.768,3577,6.475,3578,6.475,3579,4.768,3580,4.768,3581,6.475,3582,4.768,3583,4.768,3584,4.768,3585,4.768,3586,4.768,3587,7.353,3588,4.768,3589,4.768,3590,4.768,3591,4.768,3592,4.768,3593,4.768,3594,4.768,3595,4.768,3596,4.768,3597,4.768,3598,4.768,3599,4.768,3600,4.768,3601,4.768,3602,4.768,3603,6.475,3604,4.237,3605,4.768]],["title/index.html",[36,0.265,3342,2.864,3343,2.864]],["body/index.html",[4,0.1,5,0.088,7,0.193,10,0.674,15,1.782,19,1.302,38,0.985,42,0.442,43,0.007,53,2.592,73,1.705,92,0.003,93,0.005,94,0.003,100,3.585,101,3.558,109,3.482,127,2.53,132,2.336,157,0.847,191,3.033,233,2.251,243,1.782,254,1.782,261,3.435,271,2.931,275,1.741,284,3.482,315,1.782,359,1.824,385,2.014,429,4.429,450,4.412,499,4.827,526,4.429,530,3.737,532,3.632,533,3.632,542,3.388,587,2.892,600,3.959,601,2.165,602,2.892,603,3.031,608,4.7,668,3.632,672,3.951,761,3.632,869,3.388,902,1.914,916,3.435,941,1.561,957,3.632,979,4.24,981,3.435,983,3.033,995,3.294,1006,2.565,1147,4.579,1148,2.662,1159,2.565,1248,4.204,1251,4.606,1254,4.606,1266,4.606,1466,3.632,1594,2.014,1952,2.662,2035,5.492,2053,3.193,2099,5.086,2109,5.492,2133,2.77,2280,5.786,2431,3.959,2490,3.959,2493,3.959,2532,3.959,2570,3.388,2626,3.193,2702,3.632,2739,3.632,2759,3.632,2831,3.388,2888,3.959,2898,3.959,2956,7.155,3007,3.388,3308,3.959,3342,4.429,3343,5.086,3356,5.039,3361,3.959,3362,5.492,3366,3.959,3373,6.306,3374,3.959,3380,5.492,3382,6.306,3385,3.959,3386,5.492,3387,5.492,3394,3.959,3395,5.492,3397,7.404,3398,3.959,3399,7.957,3400,3.632,3525,5.492,3527,3.959,3534,3.959,3604,3.959,3606,6.181,3607,7.665,3608,4.456,3609,4.456,3610,6.181,3611,4.456,3612,6.181,3613,4.456,3614,6.181,3615,4.456,3616,4.456,3617,4.456,3618,4.456,3619,4.456,3620,4.456,3621,6.181,3622,6.181,3623,4.456,3624,4.456,3625,4.456,3626,4.456,3627,4.456,3628,4.456,3629,4.456,3630,4.456,3631,4.456,3632,9.047,3633,7.665,3634,8.332,3635,6.181,3636,4.456,3637,4.456,3638,4.456,3639,4.456,3640,6.181,3641,6.181,3642,4.456,3643,7.097,3644,4.456,3645,4.456,3646,4.456,3647,4.456,3648,4.456,3649,4.456,3650,4.456,3651,4.456,3652,4.456,3653,4.456,3654,4.456,3655,6.181,3656,4.456,3657,6.181,3658,4.456,3659,4.456,3660,4.456,3661,4.456,3662,6.181,3663,4.456,3664,4.456,3665,3.959,3666,4.456,3667,4.456,3668,4.456,3669,4.456,3670,4.456,3671,4.456,3672,4.456,3673,4.456,3674,4.456,3675,4.456,3676,4.456,3677,4.456,3678,4.456,3679,4.456,3680,4.456,3681,4.456,3682,4.456,3683,4.456,3684,4.456,3685,4.456,3686,4.456,3687,4.456,3688,4.456,3689,4.456,3690,4.456,3691,4.456,3692,4.456,3693,4.456,3694,6.181,3695,6.181,3696,6.181,3697,4.456,3698,4.456,3699,4.456,3700,4.456,3701,4.456,3702,4.456,3703,4.456,3704,4.456,3705,4.456,3706,4.456,3707,4.456,3708,7.097,3709,4.456,3710,4.456,3711,4.456,3712,6.181,3713,6.181,3714,4.456,3715,4.456,3716,4.456,3717,4.456,3718,4.456,3719,4.456,3720,4.456,3721,4.456,3722,7.097,3723,6.181,3724,7.097,3725,4.456,3726,4.456,3727,4.456,3728,4.456,3729,7.097,3730,4.456,3731,4.456,3732,4.456,3733,4.456,3734,4.456,3735,4.456,3736,4.456,3737,4.456,3738,6.181,3739,4.456,3740,4.456,3741,4.456,3742,4.456,3743,4.456,3744,4.456,3745,4.456,3746,6.181,3747,5.492,3748,6.181,3749,4.456,3750,4.456,3751,4.456,3752,4.456,3753,4.456,3754,4.456,3755,3.632,3756,4.456,3757,3.959,3758,3.959,3759,4.456,3760,4.456]],["title/license.html",[3342,2.864,3343,2.864,3755,3.258]],["body/license.html",[26,2.567,43,0.006,92,0.005,93,0.006,94,0.005,101,3.119,103,3.553,254,2.687,412,3.734,494,4.57,941,2.825,976,5.477,1144,4.36,1817,5.109,2023,5.97,2287,4.177,2405,5.97,2643,7.68,2773,5.97,3057,5.109,3346,5.97,3665,5.97,3747,5.97,3755,5.477,3757,5.97,3758,5.97,3761,8.643,3762,8.065,3763,6.719,3764,6.719,3765,6.719,3766,6.719,3767,6.719,3768,6.719,3769,8.065,3770,9.555,3771,6.719,3772,6.719,3773,6.719,3774,6.719,3775,6.719,3776,6.719,3777,6.719,3778,6.719,3779,6.719,3780,6.719,3781,6.719,3782,8.065,3783,6.719,3784,6.719,3785,6.719,3786,6.719,3787,6.719,3788,8.065,3789,8.065,3790,6.719,3791,6.719,3792,6.719,3793,6.719,3794,6.719,3795,6.719,3796,6.719,3797,6.719,3798,6.719,3799,6.719,3800,6.719,3801,6.719,3802,6.719,3803,6.719,3804,6.719,3805,6.719,3806,6.719,3807,6.719,3808,6.719,3809,6.719,3810,6.719,3811,6.719,3812,6.719]],["title/modules.html",[242,2.473]],["body/modules.html",[43,0.006,92,0.005,93,0.006,94,0.005,241,4.828,242,2.574,431,4.828,434,4.828,435,4.828,436,4.828,437,4.828,438,4.828,439,4.828,440,4.828,441,4.828,442,4.828,443,4.828,444,4.828,577,4.582,597,4.372,1254,6.37,2349,4.828,2387,4.828,2388,4.828,3813,9.816,3814,9.816,3815,9.816]],["title/overview.html",[3816,5.753]],["body/overview.html",[2,0.773,43,0.007,84,0.397,92,0.004,93,0.005,94,0.004,123,1.619,139,5.966,241,6.152,242,1.88,243,1.967,244,2.167,245,2.167,246,2.014,247,2.063,248,2.167,249,4.372,250,4.372,251,4.372,252,2.914,253,2.167,254,1.967,264,2.114,273,4.184,281,4.568,282,4.036,431,6.958,432,4.372,433,4.372,434,6.152,435,6.152,436,5.974,437,6.152,438,6.152,439,5.974,440,6.152,441,6.152,442,6.541,443,5.974,444,6.152,577,5.839,595,4.372,596,4.372,597,5.976,703,5.966,769,4.372,770,4.372,771,4.372,844,5.966,869,3.741,874,4.372,875,4.372,876,4.372,881,4.967,1396,5.082,1411,4.372,1412,4.372,1505,5.675,1564,4.372,1565,4.372,1566,4.372,1751,5.082,1771,4.372,1772,4.372,1833,5.966,1876,5.966,1899,4.372,1900,4.372,1901,4.372,1914,4.372,1915,4.372,1916,4.372,2332,5.966,2335,5.453,2349,5.974,2350,4.372,2351,4.372,2352,4.372,2383,4.372,2384,4.372,2385,4.372,2386,4.372,2387,6.152,2388,6.152,2422,5.966,2423,4.372,2424,4.372,2425,4.372,2478,5.966,2484,4.372,2485,4.372,2486,4.372,2635,4.372,2636,4.372,2637,4.372,2659,5.082,2666,4.372,2667,4.372,2699,2.485,3232,5.966,3265,4.372,3266,4.372,3267,4.372,3816,4.372,3817,4.92,3818,4.92,3819,4.92,3820,4.92]],["title/miscellaneous/typealiases.html",[3543,2.718,3821,5.724]],["body/miscellaneous/typealiases.html",[5,0.076,9,2.224,24,0.799,36,0.438,38,0.782,42,0.604,43,0.006,88,2.093,92,0.005,93,0.006,94,0.005,163,2.382,271,2.271,371,3.955,373,3.955,404,3.601,409,3.448,601,3.198,614,5.437,616,6.517,618,5.188,620,6.517,972,5.397,1052,4.744,1053,4.503,1066,5.455,1572,5.437,1781,7.103,2036,5.545,2120,3.81,2376,5.437,2406,4.744,3188,5.397,3194,5.397,3310,8.113,3543,4.503,3547,5.883,3548,8.412,3550,5.883,3554,5.883,3570,5.883,3822,6.62,3823,6.62,3824,6.62,3825,7.994,3826,6.62,3827,7.994,3828,6.62,3829,6.62,3830,6.62,3831,6.62,3832,6.62,3833,6.62,3834,6.62,3835,6.62,3836,6.62,3837,6.62,3838,6.62,3839,6.62,3840,6.62,3841,6.62]]],"invertedIndex":[["",{"_index":43,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"controllers/AddressTypeController.html":{},"modules/AddressTypeModule.html":{},"injectables/AddressTypeService.html":{},"classes/AddressUpdateDto.html":{},"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/BankController.html":{},"classes/BankDto.html":{},"modules/BankModule.html":{},"injectables/BankService.html":{},"classes/BankUpdateDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"controllers/CityController.html":{},"classes/CityDto.html":{},"modules/CityModule.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ConfigService.html":{},"controllers/ContactController.html":{},"classes/ContactDto.html":{},"modules/ContactModule.html":{},"injectables/ContactService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService-1.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"modules/CountryMasModule.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/Document.html":{},"controllers/DocumentController.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"controllers/DocumentGroupController.html":{},"classes/DocumentGroupDto.html":{},"modules/DocumentGroupModule.html":{},"injectables/DocumentGroupService.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/State.html":{},"controllers/StateController.html":{},"classes/StateDto.html":{},"modules/StateModule.html":{},"injectables/StateService.html":{},"classes/UpdateDto.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"changelog.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":328,"title":{},"body":{"injectables/AddressTypeService.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"classes/CreateDto.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/EnvironmentVariablesValidator.html":{},"injectables/FilesS3PresignedService.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"injectables/SortBy.html":{},"injectables/StateService.html":{},"classes/UtilsService.html":{},"coverage.html":{}}}],["0.13.0",{"_index":3528,"title":{},"body":{"dependencies.html":{}}}],["0.14.1",{"_index":3518,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":3541,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":3517,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":3404,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":3444,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":3477,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":3457,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":3418,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":3419,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":3447,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":3445,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":3446,"title":{},"body":{"coverage.html":{}}}],["01",{"_index":3348,"title":{},"body":{"changelog.html":{}}}],["01gh",{"_index":754,"title":{},"body":{"classes/BankDto.html":{}}}],["06",{"_index":3355,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":3347,"title":{},"body":{"changelog.html":{}}}],["09407516",{"_index":800,"title":{},"body":{"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"classes/Document.html":{}}}],["1",{"_index":66,"title":{"injectables/CountriesService-1.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/FileResponseDto-1.html":{},"classes/Query-1.html":{},"classes/UpdateDto-1.html":{}},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"classes/BankDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ContactDto.html":{},"controllers/CountriesController.html":{},"classes/Country.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{},"classes/Document.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"classes/DocumentGroupDto.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryCountryDto.html":{},"interfaces/QueryOptions.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/State.html":{},"classes/StateDto.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["1.0.0",{"_index":3354,"title":{},"body":{"changelog.html":{}}}],["1.0.1",{"_index":3345,"title":{},"body":{"changelog.html":{}}}],["1.0.2",{"_index":3503,"title":{},"body":{"dependencies.html":{}}}],["1.0.23",{"_index":3504,"title":{},"body":{"dependencies.html":{}}}],["1.1.0",{"_index":3522,"title":{},"body":{"dependencies.html":{}}}],["1.4.5",{"_index":3529,"title":{},"body":{"dependencies.html":{}}}],["1.7.2",{"_index":3516,"title":{},"body":{"dependencies.html":{}}}],["1.7.4",{"_index":3520,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":3431,"title":{},"body":{"coverage.html":{}}}],["1/10",{"_index":3426,"title":{},"body":{"coverage.html":{}}}],["1/12",{"_index":3428,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":3465,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":3422,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":3490,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":3420,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":3467,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":1544,"title":{"classes/Query-10.html":{}},"body":{"controllers/CountriesController.html":{},"classes/CreateDto.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"coverage.html":{}}}],["10.2.3",{"_index":3510,"title":{},"body":{"dependencies.html":{}}}],["10.3.9",{"_index":3506,"title":{},"body":{"dependencies.html":{}}}],["10.4.4",{"_index":3508,"title":{},"body":{"dependencies.html":{}}}],["10.8.3",{"_index":3535,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":1406,"title":{},"body":{"classes/ContactDto.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/StateDto.html":{},"coverage.html":{}}}],["10})@isoptional()@isnumberstringornumber()@tonumber()@min(10)@max(500",{"_index":2801,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["11.2.2",{"_index":3539,"title":{},"body":{"dependencies.html":{}}}],["11/11",{"_index":3478,"title":{},"body":{"coverage.html":{}}}],["11/12",{"_index":3456,"title":{},"body":{"coverage.html":{}}}],["120",{"_index":582,"title":{},"body":{"controllers/AppController.html":{}}}],["123",{"_index":546,"title":{},"body":{"controllers/AppController.html":{}}}],["1234",{"_index":115,"title":{},"body":{"classes/AddressType.html":{},"classes/BankDto.html":{},"classes/Banks.html":{}}}],["123456",{"_index":2499,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["123e4567",{"_index":1625,"title":{},"body":{"classes/Country.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{}}}],["127",{"_index":1095,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/DynamicQueryBuilder.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{}}}],["12d3",{"_index":1627,"title":{},"body":{"classes/Country.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{}}}],["12ij",{"_index":748,"title":{},"body":{"classes/BankDto.html":{}}}],["13",{"_index":3820,"title":{},"body":{"overview.html":{}}}],["138723",{"_index":2296,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["138723})@isnumber",{"_index":2294,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["14/14",{"_index":3427,"title":{},"body":{"coverage.html":{}}}],["15",{"_index":3818,"title":{},"body":{"overview.html":{}}}],["15/15",{"_index":3455,"title":{},"body":{"coverage.html":{}}}],["16",{"_index":3466,"title":{},"body":{"coverage.html":{}}}],["18",{"_index":3817,"title":{},"body":{"overview.html":{}}}],["1a2b3c",{"_index":118,"title":{},"body":{"classes/AddressType.html":{},"classes/Banks.html":{}}}],["1a2b3c4d",{"_index":112,"title":{},"body":{"classes/AddressType.html":{},"classes/Banks.html":{}}}],["1b3fd064",{"_index":571,"title":{},"body":{"controllers/AppController.html":{}}}],["1})@isoptional()@isnumberstringornumber()@tonumber()@min(1",{"_index":2803,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["1}.${field}`).join",{"_index":1112,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["2",{"_index":918,"title":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileResponseDto-2.html":{},"classes/Query-2.html":{},"classes/UpdateDto-2.html":{}},"body":{"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/Currency.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/SortBy.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["2/2",{"_index":3439,"title":{},"body":{"coverage.html":{}}}],["2/3",{"_index":3463,"title":{},"body":{"coverage.html":{}}}],["2/5",{"_index":3451,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":869,"title":{},"body":{"classes/CityDto.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["2023",{"_index":552,"title":{},"body":{"controllers/AppController.html":{}}}],["2024",{"_index":3346,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["2027",{"_index":554,"title":{},"body":{"controllers/AppController.html":{}}}],["234",{"_index":556,"title":{},"body":{"controllers/AppController.html":{}}}],["2345",{"_index":755,"title":{},"body":{"classes/BankDto.html":{}}}],["244e44a80875",{"_index":816,"title":{},"body":{"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"classes/State.html":{},"classes/StateDto.html":{}}}],["25",{"_index":1863,"title":{},"body":{"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"changelog.html":{},"coverage.html":{}}}],["270",{"_index":1641,"title":{},"body":{"classes/Country.html":{}}}],["2bed",{"_index":572,"title":{},"body":{"controllers/AppController.html":{}}}],["2e5e0c2e5870",{"_index":810,"title":{},"body":{"classes/Banks.html":{},"classes/Cities.html":{},"classes/State.html":{}}}],["3",{"_index":1636,"title":{"classes/EnvironmentVariablesValidator-3.html":{},"classes/Query-3.html":{},"classes/UpdateDto-3.html":{}},"body":{"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["3.0.1",{"_index":3531,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":3505,"title":{},"body":{"dependencies.html":{}}}],["3.2.2",{"_index":3507,"title":{},"body":{"dependencies.html":{}}}],["3.609.0",{"_index":3499,"title":{},"body":{"dependencies.html":{}}}],["3.613.0",{"_index":3500,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":3412,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":3425,"title":{},"body":{"coverage.html":{}}}],["3/5",{"_index":3464,"title":{},"body":{"coverage.html":{}}}],["3000",{"_index":2117,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["3042",{"_index":1449,"title":{},"body":{"injectables/ContactService.html":{}}}],["3043",{"_index":1422,"title":{},"body":{"modules/ContactModule.html":{}}}],["3044",{"_index":1433,"title":{},"body":{"modules/ContactModule.html":{}}}],["3166",{"_index":1632,"title":{},"body":{"classes/Country.html":{},"classes/CreateCountryDto.html":{}}}],["33",{"_index":3421,"title":{},"body":{"coverage.html":{}}}],["330",{"_index":1649,"title":{},"body":{"classes/Country.html":{}}}],["3456",{"_index":749,"title":{},"body":{"classes/BankDto.html":{}}}],["3600",{"_index":2284,"title":{},"body":{"classes/FileType.html":{},"injectables/FilesS3PresignedService.html":{}}}],["383e6490f5d5",{"_index":1705,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["39",{"_index":3601,"title":{},"body":{"miscellaneous/functions.html":{}}}],["39;./path/to/decorator&#39",{"_index":3593,"title":{},"body":{"miscellaneous/functions.html":{}}}],["39;/api/v1/uploads/example",{"_index":2373,"title":{},"body":{"injectables/FilesLocalService.html":{}}}],["39;asas&#39",{"_index":2372,"title":{},"body":{"injectables/FilesLocalService.html":{}}}],["39;image.jpg&#39",{"_index":2500,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["3a10e186",{"_index":806,"title":{},"body":{"classes/Banks.html":{},"classes/Cities.html":{},"classes/State.html":{}}}],["3a25",{"_index":2222,"title":{},"body":{"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileType.html":{}}}],["4",{"_index":2737,"title":{"classes/Query-4.html":{},"classes/UpdateDto-4.html":{}},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["4.1.0",{"_index":3533,"title":{},"body":{"dependencies.html":{}}}],["4.1.14",{"_index":3514,"title":{},"body":{"dependencies.html":{}}}],["4.19.2",{"_index":3523,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":3440,"title":{},"body":{"coverage.html":{}}}],["4/5",{"_index":3474,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":3450,"title":{},"body":{"coverage.html":{}}}],["421939d4",{"_index":1821,"title":{},"body":{"classes/Document.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{}}}],["424a",{"_index":1703,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["426614174000",{"_index":1629,"title":{},"body":{"classes/Country.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{}}}],["4298",{"_index":802,"title":{},"body":{"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"classes/Document.html":{}}}],["4adb",{"_index":2223,"title":{},"body":{"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileType.html":{}}}],["4aec",{"_index":808,"title":{},"body":{"classes/Banks.html":{},"classes/Cities.html":{},"classes/State.html":{}}}],["4baa",{"_index":814,"title":{},"body":{"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"classes/State.html":{},"classes/StateDto.html":{}}}],["4bb4",{"_index":573,"title":{},"body":{"controllers/AppController.html":{}}}],["4f58",{"_index":1823,"title":{},"body":{"classes/Document.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{}}}],["5",{"_index":763,"title":{"classes/Query-5.html":{},"classes/UpdateDto-5.html":{}},"body":{"classes/BankDto.html":{},"classes/CountryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"contributing.html":{}}}],["5.17.0",{"_index":3511,"title":{},"body":{"dependencies.html":{}}}],["5/10",{"_index":3417,"title":{},"body":{"coverage.html":{}}}],["5/5",{"_index":3441,"title":{},"body":{"coverage.html":{}}}],["5/6",{"_index":3476,"title":{},"body":{"coverage.html":{}}}],["5/8",{"_index":3454,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":50,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{},"controllers/CountriesController.html":{},"coverage.html":{}}}],["500",{"_index":2578,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/SortByDto.html":{}}}],["5242880",{"_index":1390,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["5432",{"_index":2061,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["544",{"_index":557,"title":{},"body":{"controllers/AppController.html":{}}}],["5678",{"_index":113,"title":{},"body":{"classes/AddressType.html":{},"classes/BankDto.html":{},"classes/Banks.html":{}}}],["56789abcdef0",{"_index":116,"title":{},"body":{"classes/AddressType.html":{},"classes/BankDto.html":{},"classes/Banks.html":{}}}],["59f48b87c094",{"_index":804,"title":{},"body":{"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"classes/Document.html":{}}}],["5:30",{"_index":1638,"title":{},"body":{"classes/Country.html":{}}}],["5mb",{"_index":1391,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["6",{"_index":1740,"title":{"classes/Query-6.html":{},"classes/UpdateDto-6.html":{}},"body":{"classes/CreateDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"contributing.html":{}}}],["6/6",{"_index":3471,"title":{},"body":{"coverage.html":{}}}],["6/7",{"_index":3473,"title":{},"body":{"coverage.html":{}}}],["6/8",{"_index":3468,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":2734,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"coverage.html":{}}}],["62",{"_index":3453,"title":{},"body":{"coverage.html":{}}}],["65535",{"_index":2046,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["66",{"_index":3462,"title":{},"body":{"coverage.html":{}}}],["6789",{"_index":753,"title":{},"body":{"classes/BankDto.html":{}}}],["67890abcdef1",{"_index":756,"title":{},"body":{"classes/BankDto.html":{}}}],["6b64",{"_index":1702,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["7",{"_index":2727,"title":{"classes/Query-7.html":{}},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{}}}],["7.1.0",{"_index":3526,"title":{},"body":{"dependencies.html":{}}}],["7.3.1",{"_index":3509,"title":{},"body":{"dependencies.html":{}}}],["7.4.0",{"_index":3524,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":3542,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":3423,"title":{},"body":{"coverage.html":{}}}],["7/8",{"_index":3459,"title":{},"body":{"coverage.html":{}}}],["70",{"_index":3819,"title":{},"body":{"overview.html":{}}}],["75",{"_index":3424,"title":{},"body":{"coverage.html":{}}}],["76",{"_index":2736,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{}}}],["77",{"_index":2725,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{}}}],["7890",{"_index":747,"title":{},"body":{"classes/BankDto.html":{}}}],["78901abcdef2",{"_index":750,"title":{},"body":{"classes/BankDto.html":{}}}],["8",{"_index":2730,"title":{"classes/Query-8.html":{}},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"coverage.html":{}}}],["8.12.0",{"_index":3537,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":3460,"title":{},"body":{"coverage.html":{}}}],["8/9",{"_index":3470,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":1676,"title":{},"body":{"classes/CountryDto.html":{},"classes/CreateDto.html":{},"coverage.html":{}}}],["80d3aa38",{"_index":1701,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["81",{"_index":3415,"title":{},"body":{"coverage.html":{}}}],["83",{"_index":3475,"title":{},"body":{"coverage.html":{}}}],["85",{"_index":3472,"title":{},"body":{"coverage.html":{}}}],["87",{"_index":3458,"title":{},"body":{"coverage.html":{}}}],["88",{"_index":3469,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":3149,"title":{"classes/Query-9.html":{}},"body":{}}],["9/11",{"_index":3416,"title":{},"body":{"coverage.html":{}}}],["9/9",{"_index":3461,"title":{},"body":{"coverage.html":{}}}],["90ef",{"_index":114,"title":{},"body":{"classes/AddressType.html":{},"classes/BankDto.html":{},"classes/Banks.html":{}}}],["91",{"_index":1621,"title":{},"body":{"classes/Country.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{},"coverage.html":{}}}],["9]+(,[0",{"_index":988,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["9]+)*$/.test(propertyvalue",{"_index":989,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["9a86",{"_index":809,"title":{},"body":{"classes/Banks.html":{},"classes/Cities.html":{},"classes/State.html":{}}}],["_",{"_index":652,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/DynamicQueryBuilder.html":{},"classes/HttpErrorFilter.html":{},"injectables/PrismaService.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{}}}],["_.clone(errorresponse",{"_index":2689,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["_.clone(r",{"_index":693,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["_.clone(request.body",{"_index":687,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{}}}],["_.clone(request.header",{"_index":689,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{}}}],["_.get(dto",{"_index":1086,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["_.get(where",{"_index":3005,"title":{},"body":{"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{}}}],["_.isarray(r.message",{"_index":662,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["_.isempty(rows",{"_index":2954,"title":{},"body":{"injectables/PrismaService.html":{}}}],["_.keys(conds",{"_index":1961,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryOptions.html":{}}}],["_.mapkeys(where",{"_index":3015,"title":{},"body":{"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{}}}],["_.pick(dto",{"_index":1077,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["_.pick(values",{"_index":1960,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["_.pick(where",{"_index":3008,"title":{},"body":{"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{}}}],["_.unset(dto",{"_index":1087,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["_.unset(where",{"_index":3012,"title":{},"body":{"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{}}}],["_.values(conds",{"_index":1963,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-6.html":{},"classes/Query-8.html":{},"interfaces/QueryOptions.html":{}}}],["_validationfilter",{"_index":639,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["_validationfilter(validationerrors",{"_index":642,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["a09a",{"_index":813,"title":{},"body":{"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"classes/State.html":{},"classes/StateDto.html":{}}}],["a12b34cd",{"_index":741,"title":{},"body":{"classes/BankDto.html":{}}}],["a456",{"_index":1628,"title":{},"body":{"classes/Country.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{}}}],["a5f3686b1b53",{"_index":575,"title":{},"body":{"controllers/AppController.html":{}}}],["a6a7",{"_index":803,"title":{},"body":{"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"classes/Document.html":{}}}],["a95b",{"_index":1704,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["a9c6",{"_index":2224,"title":{},"body":{"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileType.html":{}}}],["a9f4",{"_index":815,"title":{},"body":{"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"classes/State.html":{},"classes/StateDto.html":{}}}],["aa03",{"_index":1824,"title":{},"body":{"classes/Document.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{}}}],["abbr",{"_index":1602,"title":{},"body":{"classes/Country.html":{}}}],["abbreviation",{"_index":1612,"title":{},"body":{"classes/Country.html":{}}}],["abc",{"_index":2612,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["abc123",{"_index":2243,"title":{},"body":{"classes/FileResponseDto-2.html":{}}}],["above",{"_index":3787,"title":{},"body":{"license.html":{}}}],["abstract",{"_index":2820,"title":{},"body":{"classes/PaginationResponseDto.html":{}}}],["accept",{"_index":1146,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["access",{"_index":942,"title":{},"body":{"injectables/CityService.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"modules/FilesS3Module.html":{},"injectables/HomeService.html":{}}}],["accessing",{"_index":2264,"title":{},"body":{"classes/FileType.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["accesskeyid",{"_index":1381,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"interfaces/IFileConfig.html":{}}}],["accessors",{"_index":1184,"title":{},"body":{"classes/ConfigService.html":{}}}],["acl",{"_index":2492,"title":{},"body":{"modules/FilesS3PresignedModule.html":{}}}],["action",{"_index":3809,"title":{},"body":{"license.html":{}}}],["actions",{"_index":2923,"title":{},"body":{"injectables/PrismaService.html":{}}}],["active",{"_index":69,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"classes/BankDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"classes/Document.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"classes/DocumentGroupDto.html":{}}}],["actual",{"_index":925,"title":{},"body":{"injectables/CityService.html":{}}}],["add",{"_index":1159,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/DynamicQueryBuilder.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{},"contributing.html":{},"index.html":{}}}],["adddress",{"_index":336,"title":{},"body":{"injectables/AddressTypeService.html":{}}}],["addhttpqueryerror",{"_index":2976,"title":{},"body":{"classes/Query.html":{}}}],["addhttpqueryerror(module",{"_index":2977,"title":{},"body":{"classes/Query.html":{}}}],["adding",{"_index":1971,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["additional",{"_index":1143,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/HttpErrorFilter.html":{},"interfaces/QueryConfig.html":{},"classes/UtilsService.html":{}}}],["additionalconditions",{"_index":906,"title":{},"body":{"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["addqueryerror",{"_index":2983,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["addqueryerror(module",{"_index":2992,"title":{},"body":{"classes/Query-1.html":{}}}],["addres",{"_index":167,"title":{},"body":{"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{}}}],["addres_type",{"_index":104,"title":{},"body":{"classes/AddressType.html":{},"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"classes/Query-4.html":{}}}],["address",{"_index":46,"title":{},"body":{"classes/AddresTypeDto.html":{},"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"classes/AddressUpdateDto.html":{},"controllers/AppController.html":{},"classes/Query-4.html":{}}}],["address_type",{"_index":37,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"modules/ApiModule.html":{},"classes/Query-4.html":{}}}],["address_type.controller",{"_index":262,"title":{},"body":{"modules/AddressTypeModule.html":{}}}],["address_type.service",{"_index":208,"title":{},"body":{"controllers/AddressTypeController.html":{},"modules/AddressTypeModule.html":{}}}],["address_type/:id_address_type",{"_index":232,"title":{},"body":{"controllers/AddressTypeController.html":{}}}],["address_type='${name",{"_index":3110,"title":{},"body":{"classes/Query-4.html":{}}}],["address_types",{"_index":59,"title":{},"body":{"classes/AddresTypeDto.html":{},"injectables/AddressTypeService.html":{},"classes/Query-4.html":{}}}],["addresss",{"_index":288,"title":{},"body":{"injectables/AddressTypeService.html":{}}}],["addressservice",{"_index":217,"title":{},"body":{"controllers/AddressTypeController.html":{}}}],["addresstype",{"_index":95,"title":{"classes/AddressType.html":{}},"body":{"classes/AddressType.html":{},"controllers/AddressTypeController.html":{},"modules/AddressTypeModule.html":{},"injectables/AddressTypeService.html":{},"coverage.html":{}}}],["addresstypecontroller",{"_index":122,"title":{"controllers/AddressTypeController.html":{}},"body":{"controllers/AddressTypeController.html":{},"modules/AddressTypeModule.html":{},"coverage.html":{}}}],["addresstypemodule",{"_index":241,"title":{"modules/AddressTypeModule.html":{}},"body":{"modules/AddressTypeModule.html":{},"modules/ApiModule.html":{},"modules.html":{},"overview.html":{}}}],["addresstypeservice",{"_index":139,"title":{"injectables/AddressTypeService.html":{}},"body":{"controllers/AddressTypeController.html":{},"modules/AddressTypeModule.html":{},"injectables/AddressTypeService.html":{},"coverage.html":{},"overview.html":{}}}],["addressupdatedto",{"_index":211,"title":{"classes/AddressUpdateDto.html":{}},"body":{"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"classes/AddressUpdateDto.html":{},"coverage.html":{}}}],["addrestype",{"_index":17,"title":{},"body":{"classes/AddresTypeDto.html":{},"injectables/AddressTypeService.html":{}}}],["addrestypedto",{"_index":1,"title":{"classes/AddresTypeDto.html":{}},"body":{"classes/AddresTypeDto.html":{},"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"classes/AddressUpdateDto.html":{},"coverage.html":{}}}],["adhere",{"_index":3391,"title":{},"body":{"contributing.html":{}}}],["adheres",{"_index":27,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"classes/CountryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/StateDto.html":{}}}],["adjust",{"_index":1451,"title":{},"body":{"injectables/ContactService.html":{}}}],["admin",{"_index":1281,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["adrres_type",{"_index":294,"title":{},"body":{"injectables/AddressTypeService.html":{}}}],["against",{"_index":3590,"title":{},"body":{"miscellaneous/functions.html":{}}}],["age",{"_index":2590,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["aggregate",{"_index":455,"title":{},"body":{"modules/ApiModule.html":{}}}],["aggregated",{"_index":3830,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["aggregates",{"_index":446,"title":{},"body":{"modules/ApiModule.html":{}}}],["algorithm",{"_index":1329,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IJWTConfig.html":{}}}],["alias",{"_index":931,"title":{},"body":{"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"injectables/DocumentService.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/QueryConfig.html":{},"injectables/StateService.html":{},"classes/UtilsService.html":{}}}],["aliases",{"_index":1052,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{},"classes/UtilsService.html":{},"miscellaneous/typealiases.html":{}}}],["alias}.${field}`).join",{"_index":1108,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["alias}.${filter.field",{"_index":3327,"title":{},"body":{"classes/UtilsService.html":{}}}],["alias}.${sortitem.field",{"_index":3336,"title":{},"body":{"classes/UtilsService.html":{}}}],["alias}.id_country",{"_index":932,"title":{},"body":{"injectables/CityService.html":{},"injectables/StateService.html":{}}}],["alias}.id_document_group",{"_index":1928,"title":{},"body":{"injectables/DocumentService.html":{}}}],["alias}.id_state",{"_index":936,"title":{},"body":{"injectables/CityService.html":{}}}],["alias}.name",{"_index":934,"title":{},"body":{"injectables/CityService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["allconfigtype",{"_index":2376,"title":{},"body":{"injectables/FilesLocalService.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/HomeService.html":{},"injectables/PrismaService.html":{},"miscellaneous/typealiases.html":{}}}],["allexceptionsfilter",{"_index":378,"title":{"classes/AllExceptionsFilter.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["allow",{"_index":2271,"title":{},"body":{"classes/FileType.html":{},"modules/HelperModule.html":{}}}],["allowed",{"_index":1036,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"injectables/FilesS3PresignedService.html":{},"interfaces/QueryConfig.html":{}}}],["allowedkeys",{"_index":1025,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{}}}],["allowedkeys.join",{"_index":3006,"title":{},"body":{"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{}}}],["allowing",{"_index":372,"title":{},"body":{"classes/AddressUpdateDto.html":{},"classes/BankUpdateDto.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{}}}],["allows",{"_index":1053,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"controllers/CountriesController.html":{},"modules/FilesModule.html":{},"interfaces/QueryConfig.html":{},"miscellaneous/typealiases.html":{}}}],["along",{"_index":106,"title":{},"body":{"classes/AddressType.html":{},"classes/Banks.html":{},"modules/CurrenciesModule.html":{}}}],["alpha",{"_index":1633,"title":{},"body":{"classes/Country.html":{},"classes/CreateCountryDto.html":{}}}],["already",{"_index":306,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["amazing",{"_index":3752,"title":{},"body":{"index.html":{}}}],["amazon",{"_index":2455,"title":{},"body":{"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["amqp",{"_index":3512,"title":{},"body":{"dependencies.html":{}}}],["amqp://localhost:5672",{"_index":1425,"title":{},"body":{"modules/ContactModule.html":{}}}],["and/or",{"_index":3780,"title":{},"body":{"license.html":{}}}],["annotated",{"_index":1600,"title":{},"body":{"classes/Country.html":{},"classes/State.html":{}}}],["another",{"_index":3598,"title":{},"body":{"miscellaneous/functions.html":{}}}],["another_table",{"_index":905,"title":{},"body":{"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["another_table.foreign_key",{"_index":1122,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["any).message",{"_index":427,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["api",{"_index":109,"title":{},"body":{"classes/AddressType.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/Banks.html":{},"classes/Country.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileResponseDto-1.html":{},"classes/FileType.html":{},"controllers/FilesS3Controller.html":{},"injectables/HomeService.html":{},"interfaces/IAppConfig.html":{},"classes/State.html":{},"index.html":{}}}],["api/v1/uploads/example",{"_index":2226,"title":{},"body":{"classes/FileResponseDto.html":{},"injectables/FilesLocalService.html":{}}}],["api_key",{"_index":1364,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/ISMSConfig.html":{}}}],["api_prefix",{"_index":1235,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{}}}],["apibody",{"_index":2319,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["apiconsumes",{"_index":2320,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["apiconsumes('multipart/form",{"_index":2340,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["apicreatedresponse",{"_index":199,"title":{},"body":{"controllers/AddressTypeController.html":{},"controllers/BankController.html":{},"controllers/CityController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"controllers/StateController.html":{}}}],["apicreatedresponse({type",{"_index":2310,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{}}}],["apiexcludeendpoint",{"_index":2321,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["apiextramodels",{"_index":2606,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["apiextramodels(filterdto",{"_index":2624,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["apiextramodels(filterquerydto",{"_index":2608,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["apifile",{"_index":2324,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"coverage.html":{}}}],["apifilterquery",{"_index":1552,"title":{},"body":{"controllers/CountriesController.html":{}}}],["apifilterquery('filters",{"_index":1562,"title":{},"body":{"controllers/CountriesController.html":{}}}],["apifilterquery(fieldname",{"_index":2622,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["apimodule",{"_index":431,"title":{"modules/ApiModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["apimultifile",{"_index":3437,"title":{},"body":{"coverage.html":{}}}],["apinestedquery",{"_index":1556,"title":{},"body":{"controllers/CountriesController.html":{}}}],["apiokresponse",{"_index":200,"title":{},"body":{"controllers/AddressTypeController.html":{},"controllers/BankController.html":{},"controllers/CityController.html":{},"controllers/CountriesController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"controllers/StateController.html":{}}}],["apiparam",{"_index":201,"title":{},"body":{"controllers/AddressTypeController.html":{},"controllers/BankController.html":{},"controllers/CityController.html":{},"controllers/CountriesController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"controllers/StateController.html":{}}}],["apiprefix",{"_index":1297,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"injectables/HomeService.html":{},"interfaces/IAppConfig.html":{}}}],["apiproperty",{"_index":75,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"classes/ContactDto.html":{},"classes/CountryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/State.html":{},"classes/StateDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["apiproperty()@isstring",{"_index":3217,"title":{},"body":{"classes/SortByDto.html":{},"classes/SortCountryDto.html":{}}}],["apiproperty()@type(undefined)@isstring",{"_index":3220,"title":{},"body":{"classes/SortCountryDto.html":{}}}],["apiproperty(options",{"_index":3562,"title":{},"body":{"miscellaneous/functions.html":{}}}],["apiproperty({example",{"_index":2290,"title":{},"body":{"classes/FileUploadDto.html":{},"classes/FilterQueryDto.html":{},"classes/SortByDto.html":{}}}],["apiproperty({type",{"_index":1807,"title":{},"body":{"classes/Currency.html":{},"classes/FileType.html":{},"classes/State.html":{}}}],["apipropertyoptional",{"_index":2539,"title":{},"body":{"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{}}}],["apipropertyoptional()@transform(undefined)@isnumber()@isoptional",{"_index":3159,"title":{},"body":{"classes/QueryCountryDto.html":{}}}],["apipropertyoptional({description",{"_index":2800,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["apipropertyoptional({name",{"_index":2796,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["apipropertyoptional({type",{"_index":2787,"title":{},"body":{"classes/PaginationMetaDto.html":{},"classes/QueryCountryDto.html":{}}}],["apiquery",{"_index":1551,"title":{},"body":{"controllers/CountriesController.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["apiresponseproperty",{"_index":120,"title":{},"body":{"classes/AddressType.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"classes/Country.html":{},"classes/CountryMas.html":{},"classes/Document.html":{},"classes/DocumentGroup.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/State.html":{}}}],["apiresponseproperty({type",{"_index":110,"title":{},"body":{"classes/AddressType.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"classes/Country.html":{},"classes/CountryMas.html":{},"classes/Document.html":{},"classes/DocumentGroup.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/State.html":{}}}],["apitags",{"_index":202,"title":{},"body":{"controllers/AddressTypeController.html":{},"controllers/AppController.html":{},"controllers/BankController.html":{},"controllers/CityController.html":{},"controllers/ContactController.html":{},"controllers/CountriesController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"controllers/HomeController.html":{},"controllers/StateController.html":{}}}],["apitags('address",{"_index":213,"title":{},"body":{"controllers/AddressTypeController.html":{}}}],["apitags('banks",{"_index":719,"title":{},"body":{"controllers/BankController.html":{}}}],["apitags('cities",{"_index":847,"title":{},"body":{"controllers/CityController.html":{}}}],["apitags('contact",{"_index":1399,"title":{},"body":{"controllers/ContactController.html":{}}}],["apitags('countries",{"_index":1509,"title":{},"body":{"controllers/CountriesController.html":{}}}],["apitags('country_mas",{"_index":1661,"title":{},"body":{"controllers/CountryController.html":{}}}],["apitags('currencies",{"_index":1758,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["apitags('documentgroups",{"_index":1885,"title":{},"body":{"controllers/DocumentGroupController.html":{}}}],["apitags('documents",{"_index":1845,"title":{},"body":{"controllers/DocumentController.html":{}}}],["apitags('files",{"_index":2334,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{}}}],["apitags('health",{"_index":527,"title":{},"body":{"controllers/AppController.html":{}}}],["apitags('home",{"_index":2663,"title":{},"body":{"controllers/HomeController.html":{}}}],["apitags('states",{"_index":3244,"title":{},"body":{"controllers/StateController.html":{}}}],["app",{"_index":2104,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"injectables/HomeService.html":{},"miscellaneous/functions.html":{}}}],["app.controller",{"_index":623,"title":{},"body":{"modules/AppModule.html":{}}}],["app/common/helper/services/comman.query",{"_index":888,"title":{},"body":{"injectables/CityService.html":{}}}],["app/common/helper/services/pagination.service",{"_index":297,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/DocumentGroupService.html":{},"injectables/StateService.html":{}}}],["app/common/helper/services/prisma.service",{"_index":298,"title":{},"body":{"injectables/AddressTypeService.html":{}}}],["app/common/helper/services/util.service",{"_index":299,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/DocumentGroupService.html":{},"classes/Query-2.html":{},"injectables/StateService.html":{}}}],["app/utils/dto/pagination",{"_index":205,"title":{},"body":{"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{}}}],["app/utils/dto/pagination.dto",{"_index":207,"title":{},"body":{"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{}}}],["app/utils/transformers/upper",{"_index":1716,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["app/utils/types/pagination",{"_index":301,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["app_description",{"_index":2082,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["app_filter",{"_index":458,"title":{},"body":{"modules/ApiModule.html":{},"classes/HttpErrorFilter.html":{}}}],["app_name",{"_index":2083,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["app_port",{"_index":1231,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{}}}],["app_prefix",{"_index":2084,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["app_version",{"_index":2085,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["appconfig",{"_index":614,"title":{},"body":{"modules/AppModule.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/FileType.html":{},"miscellaneous/typealiases.html":{}}}],["appconfig).backenddomain",{"_index":2273,"title":{},"body":{"classes/FileType.html":{}}}],["appcontroller",{"_index":487,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appinfo",{"_index":2660,"title":{},"body":{"controllers/HomeController.html":{},"injectables/HomeService.html":{}}}],["applicable",{"_index":3668,"title":{},"body":{"index.html":{}}}],["application",{"_index":404,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/Country.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"modules/FilesS3Module.html":{},"injectables/FilesService.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"injectables/ResolvePromisesInterceptor.html":{},"classes/State.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["application's",{"_index":491,"title":{},"body":{"controllers/AppController.html":{},"injectables/HomeService.html":{}}}],["applications",{"_index":3620,"title":{},"body":{"index.html":{}}}],["applies",{"_index":2418,"title":{},"body":{"controllers/FilesS3Controller.html":{}}}],["apply",{"_index":2570,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"index.html":{}}}],["applydecorators",{"_index":2613,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["appmodule",{"_index":577,"title":{"modules/AppModule.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/HttpErrorFilter.html":{},"modules.html":{},"overview.html":{}}}],["appprefix",{"_index":2107,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"injectables/HomeService.html":{}}}],["appropriate",{"_index":144,"title":{},"body":{"controllers/AddressTypeController.html":{},"controllers/BankController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"modules/FilesModule.html":{},"controllers/StateController.html":{}}}],["area",{"_index":1990,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["arg",{"_index":1040,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["args",{"_index":967,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["args.property",{"_index":991,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["arguments",{"_index":968,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"injectables/SortBy.html":{}}}],["argumentshost",{"_index":400,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["arising",{"_index":3811,"title":{},"body":{"license.html":{}}}],["array",{"_index":648,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"controllers/CountriesController.html":{},"modules/FilesModule.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PrismaService.html":{},"classes/Query-3.html":{},"interfaces/QueryConfig.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{}}}],["array.from(array(endpage",{"_index":2760,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["array.isarray(value",{"_index":1114,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/UtilsService.html":{}}}],["asas",{"_index":2371,"title":{},"body":{"injectables/FilesLocalService.html":{}}}],["asc",{"_index":997,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{}}}],["asc'})@isstring()@matches(/^(asc|desc|asc|desc",{"_index":3215,"title":{},"body":{"classes/SortByDto.html":{}}}],["asc1",{"_index":2611,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["ascending",{"_index":2591,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["asc|desc|asc|desc|asc|desc",{"_index":1015,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["asia",{"_index":1615,"title":{},"body":{"classes/Country.html":{},"classes/CreateCountryDto.html":{}}}],["asia/mumbai",{"_index":1647,"title":{},"body":{"classes/Country.html":{}}}],["associated",{"_index":1817,"title":{},"body":{"classes/Document.html":{},"classes/FileType.html":{},"classes/Query-1.html":{},"license.html":{}}}],["async",{"_index":146,"title":{},"body":{"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"controllers/AppController.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"injectables/ContactService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query-2.html":{},"injectables/SortBy.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{}}}],["asynchronously",{"_index":2491,"title":{},"body":{"modules/FilesS3PresignedModule.html":{}}}],["attempt",{"_index":1486,"title":{},"body":{"injectables/ContactService.html":{}}}],["attributes",{"_index":1592,"title":{},"body":{"classes/Country.html":{},"classes/State.html":{}}}],["audience",{"_index":1333,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IJWTConfig.html":{}}}],["authentication",{"_index":3622,"title":{},"body":{"index.html":{}}}],["author",{"_index":3756,"title":{},"body":{"index.html":{}}}],["authorization",{"_index":3648,"title":{},"body":{"index.html":{}}}],["authors",{"_index":3803,"title":{},"body":{"license.html":{}}}],["authsource",{"_index":1280,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["automatic",{"_index":2617,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["automatically",{"_index":1051,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["available",{"_index":2361,"title":{},"body":{"modules/FilesLocalModule.html":{},"modules/HelperModule.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"miscellaneous/enumerations.html":{}}}],["await",{"_index":222,"title":{},"body":{"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/ContactService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"injectables/StateService.html":{}}}],["awesome",{"_index":3630,"title":{},"body":{"index.html":{}}}],["aws",{"_index":1257,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"dependencies.html":{}}}],["aws_access_key_id",{"_index":1242,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["aws_default_s3_bucket",{"_index":1244,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["aws_s3_access_key_id",{"_index":1301,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IAwsConfig.html":{}}}],["aws_s3_bucket_name",{"_index":1305,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IAwsConfig.html":{}}}],["aws_s3_companion_secret",{"_index":1315,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IAwsConfig.html":{}}}],["aws_s3_default_region",{"_index":1307,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IAwsConfig.html":{}}}],["aws_s3_endpoint",{"_index":1311,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IAwsConfig.html":{}}}],["aws_s3_region",{"_index":1245,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["aws_s3_secret_access_key",{"_index":1303,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IAwsConfig.html":{}}}],["aws_s3_server_host",{"_index":1313,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IAwsConfig.html":{}}}],["aws_s3_temp_directory",{"_index":1309,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IAwsConfig.html":{}}}],["aws_secret_access_key",{"_index":1243,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["awsdefaults3bucket",{"_index":1385,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"interfaces/IFileConfig.html":{}}}],["awss3config",{"_index":1300,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["awss3region",{"_index":1387,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"interfaces/IFileConfig.html":{}}}],["axios",{"_index":3515,"title":{},"body":{"dependencies.html":{}}}],["b",{"_index":3384,"title":{},"body":{"contributing.html":{},"miscellaneous/functions.html":{}}}],["b23c45de",{"_index":752,"title":{},"body":{"classes/BankDto.html":{}}}],["b3af",{"_index":574,"title":{},"body":{"controllers/AppController.html":{}}}],["b484",{"_index":1822,"title":{},"body":{"classes/Document.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{}}}],["backend",{"_index":2261,"title":{},"body":{"classes/FileType.html":{},"interfaces/IAppConfig.html":{}}}],["backend_domain",{"_index":1234,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{}}}],["backenddomain",{"_index":1294,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"interfaces/IAppConfig.html":{}}}],["backers",{"_index":3753,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":535,"title":{},"body":{"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/FileNotImageException.html":{}}}],["badrequestexceptionfilter",{"_index":634,"title":{"classes/BadRequestExceptionFilter.html":{}},"body":{"classes/BadRequestExceptionFilter.html":{},"coverage.html":{}}}],["baeumer",{"_index":3680,"title":{},"body":{"index.html":{}}}],["bank",{"_index":702,"title":{},"body":{"controllers/BankController.html":{},"classes/BankDto.html":{},"modules/BankModule.html":{},"injectables/BankService.html":{},"classes/BankUpdateDto.html":{},"classes/Banks.html":{},"classes/Query-7.html":{}}}],["bank.controller",{"_index":773,"title":{},"body":{"modules/BankModule.html":{}}}],["bank.service",{"_index":716,"title":{},"body":{"controllers/BankController.html":{},"modules/BankModule.html":{}}}],["bankcontroller",{"_index":700,"title":{"controllers/BankController.html":{}},"body":{"controllers/BankController.html":{},"modules/BankModule.html":{},"coverage.html":{}}}],["bankdto",{"_index":704,"title":{"classes/BankDto.html":{}},"body":{"controllers/BankController.html":{},"classes/BankDto.html":{},"injectables/BankService.html":{},"classes/BankUpdateDto.html":{},"coverage.html":{}}}],["bankmodule",{"_index":434,"title":{"modules/BankModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/BankModule.html":{},"modules.html":{},"overview.html":{}}}],["banks",{"_index":482,"title":{"classes/Banks.html":{}},"body":{"modules/ApiModule.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"classes/Banks.html":{},"coverage.html":{}}}],["banks/:id_bank",{"_index":722,"title":{},"body":{"controllers/BankController.html":{}}}],["banks_mas",{"_index":793,"title":{},"body":{"injectables/BankService.html":{},"classes/Query-7.html":{}}}],["bankservice",{"_index":703,"title":{"injectables/BankService.html":{}},"body":{"controllers/BankController.html":{},"modules/BankModule.html":{},"injectables/BankService.html":{},"coverage.html":{},"overview.html":{}}}],["bankupdatedto",{"_index":718,"title":{"classes/BankUpdateDto.html":{}},"body":{"controllers/BankController.html":{},"injectables/BankService.html":{},"classes/BankUpdateDto.html":{},"coverage.html":{}}}],["bar",{"_index":563,"title":{},"body":{"controllers/AppController.html":{}}}],["base",{"_index":342,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"controllers/FilesS3Controller.html":{},"classes/Query-3.html":{},"interfaces/QueryConfig.html":{},"classes/UtilsService.html":{}}}],["base64",{"_index":2469,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["baseadditionalconditions",{"_index":1158,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["based",{"_index":354,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"classes/FileType.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/PaginationMetaDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{}}}],["baseexceptionfilter",{"_index":2879,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["basefields",{"_index":1793,"title":{},"body":{"injectables/CurrenciesService.html":{},"classes/UtilsService.html":{}}}],["basefields.join",{"_index":1801,"title":{},"body":{"injectables/CurrenciesService.html":{},"classes/UtilsService.html":{}}}],["basequery",{"_index":345,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/PaginationService.html":{},"injectables/StateService.html":{}}}],["basewhere",{"_index":1150,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["bash",{"_index":3713,"title":{},"body":{"index.html":{}}}],["baz",{"_index":566,"title":{},"body":{"controllers/AppController.html":{}}}],["be123892",{"_index":550,"title":{},"body":{"controllers/AppController.html":{}}}],["before",{"_index":3192,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{},"contributing.html":{}}}],["belongs",{"_index":828,"title":{},"body":{"classes/Cities.html":{},"classes/CityDto.html":{},"classes/Document.html":{},"classes/DocumentDto.html":{},"classes/State.html":{},"classes/StateDto.html":{}}}],["between",{"_index":2045,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"modules/FilesModule.html":{}}}],["bignumberstrings",{"_index":1286,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["binary",{"_index":2341,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["blank",{"_index":2957,"title":{},"body":{"injectables/PrismaService.html":{}}}],["body",{"_index":191,"title":{},"body":{"controllers/AddressTypeController.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/BankController.html":{},"controllers/CityController.html":{},"controllers/ContactController.html":{},"controllers/CountriesController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"classes/HttpErrorFilter.html":{},"controllers/StateController.html":{},"index.html":{}}}],["boilerplate",{"_index":3607,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":975,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/PaginationResponseDto.html":{},"injectables/SortBy.html":{}}}],["boolean(this.get(key",{"_index":1264,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["bootstrap",{"_index":246,"title":{},"body":{"modules/AddressTypeModule.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/BankModule.html":{},"modules/CityModule.html":{},"modules/ContactModule.html":{},"modules/CountriesModule.html":{},"modules/CountryMasModule.html":{},"modules/CurrenciesModule.html":{},"modules/DocumentGroupModule.html":{},"modules/DocumentModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{},"modules/StateModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["boundary",{"_index":2621,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["box",{"_index":3624,"title":{},"body":{"index.html":{}}}],["branch",{"_index":3381,"title":{},"body":{"contributing.html":{}}}],["break",{"_index":2891,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["breaking",{"_index":3740,"title":{},"body":{"index.html":{}}}],["browse",{"_index":3815,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":3813,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":2126,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["bucket.s3.amazonaws.com/unique",{"_index":2251,"title":{},"body":{"classes/FileResponseDto-2.html":{}}}],["buffer",{"_index":2708,"title":{},"body":{"interfaces/IFileConfig.html":{}}}],["bug",{"_index":3349,"title":{},"body":{"changelog.html":{},"contributing.html":{}}}],["bugs",{"_index":3372,"title":{},"body":{"contributing.html":{}}}],["build",{"_index":352,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/DocumentGroupService.html":{},"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["builddeletequery",{"_index":1934,"title":{},"body":{"classes/DynamicQueryBuilder.html":{}}}],["builddeletequery(options",{"_index":1938,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["builddynamicquery",{"_index":3303,"title":{},"body":{"classes/UtilsService.html":{}}}],["builddynamicquery(paginationquery",{"_index":3305,"title":{},"body":{"classes/UtilsService.html":{}}}],["builder",{"_index":2965,"title":{},"body":{"classes/Query.html":{}}}],["building",{"_index":1148,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{},"index.html":{}}}],["buildinsertquery",{"_index":1935,"title":{},"body":{"classes/DynamicQueryBuilder.html":{}}}],["buildinsertquery(options",{"_index":1942,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["buildrun",{"_index":3718,"title":{},"body":{"index.html":{}}}],["builds",{"_index":1941,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{}}}],["buildselectquery",{"_index":1936,"title":{},"body":{"classes/DynamicQueryBuilder.html":{}}}],["buildselectquery(options",{"_index":1944,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["buildtests",{"_index":3703,"title":{},"body":{"index.html":{}}}],["buildupdatequery",{"_index":1937,"title":{},"body":{"classes/DynamicQueryBuilder.html":{}}}],["buildupdatequery(options",{"_index":1946,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["built",{"_index":3308,"title":{},"body":{"classes/UtilsService.html":{},"index.html":{}}}],["bundles",{"_index":256,"title":{},"body":{"modules/AddressTypeModule.html":{},"modules/BankModule.html":{},"modules/CityModule.html":{},"modules/CountriesModule.html":{},"modules/CountryMasModule.html":{},"modules/CurrenciesModule.html":{},"modules/DocumentGroupModule.html":{},"modules/DocumentModule.html":{},"modules/StateModule.html":{}}}],["business",{"_index":269,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"modules/FilesLocalModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/StateService.html":{}}}],["bytes",{"_index":2138,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileUploadDto.html":{}}}],["c",{"_index":3057,"title":{},"body":{"classes/Query-2.html":{},"classes/Query-3.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["c${0",{"_index":933,"title":{},"body":{"injectables/CityService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["c.capital",{"_index":3049,"title":{},"body":{"classes/Query-2.html":{}}}],["c.code",{"_index":3079,"title":{},"body":{"classes/Query-3.html":{}}}],["c.continent",{"_index":3048,"title":{},"body":{"classes/Query-2.html":{}}}],["c.decimal_digits",{"_index":3083,"title":{},"body":{"classes/Query-3.html":{}}}],["c.dial_code",{"_index":3047,"title":{},"body":{"classes/Query-2.html":{}}}],["c.id_country='${id",{"_index":3063,"title":{},"body":{"classes/Query-2.html":{}}}],["c.id_currency",{"_index":3078,"title":{},"body":{"classes/Query-3.html":{}}}],["c.iso",{"_index":3043,"title":{},"body":{"classes/Query-2.html":{}}}],["c.iso3",{"_index":3045,"title":{},"body":{"classes/Query-2.html":{}}}],["c.name",{"_index":3042,"title":{},"body":{"classes/Query-2.html":{},"classes/Query-3.html":{}}}],["c.name_plural",{"_index":3080,"title":{},"body":{"classes/Query-3.html":{}}}],["c.nice_name",{"_index":3044,"title":{},"body":{"classes/Query-2.html":{}}}],["c.num_code",{"_index":3046,"title":{},"body":{"classes/Query-2.html":{}}}],["c.rounding",{"_index":3084,"title":{},"body":{"classes/Query-3.html":{}}}],["c.status",{"_index":3062,"title":{},"body":{"classes/Query-2.html":{},"classes/Query-3.html":{}}}],["c.symbol",{"_index":3081,"title":{},"body":{"classes/Query-3.html":{}}}],["c.symbol_native",{"_index":3082,"title":{},"body":{"classes/Query-3.html":{}}}],["c0ac",{"_index":801,"title":{},"body":{"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"classes/Document.html":{}}}],["c34d56ef",{"_index":746,"title":{},"body":{"classes/BankDto.html":{}}}],["c759",{"_index":807,"title":{},"body":{"classes/Banks.html":{},"classes/Cities.html":{},"classes/State.html":{}}}],["ca",{"_index":2017,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["calculate",{"_index":2745,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["call",{"_index":921,"title":{},"body":{"injectables/CityService.html":{}}}],["callback",{"_index":2446,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["called",{"_index":559,"title":{},"body":{"controllers/AppController.html":{},"injectables/PrismaService.html":{}}}],["callhandler",{"_index":3199,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["cantuploadfiletype",{"_index":2511,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["capabilities",{"_index":2829,"title":{},"body":{"injectables/PaginationService.html":{}}}],["capital",{"_index":1597,"title":{},"body":{"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/Query-2.html":{}}}],["case",{"_index":2888,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"index.html":{}}}],["case.transformer",{"_index":1717,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{}}}],["case.transformer.ts",{"_index":3492,"title":{},"body":{"coverage.html":{}}}],["cases",{"_index":3840,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["catch",{"_index":384,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/ContactService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/QueryFailedFilter.html":{}}}],["catch(badrequestexception",{"_index":656,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["catch(exception",{"_index":397,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["catch(httpexception",{"_index":2696,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catch(prisma.prismaclientknownrequesterror",{"_index":2883,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["catch(queryfailederror",{"_index":3174,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["catches",{"_index":402,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["cause",{"_index":2899,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["caused",{"_index":2981,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["cbac",{"_index":3650,"title":{},"body":{"index.html":{}}}],["cbcfa8b8",{"_index":2221,"title":{},"body":{"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileType.html":{}}}],["cd",{"_index":3673,"title":{},"body":{"index.html":{}}}],["cert",{"_index":2079,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["certificate",{"_index":2018,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["certificates",{"_index":2026,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["change",{"_index":2956,"title":{},"body":{"injectables/PrismaService.html":{},"index.html":{}}}],["changelog",{"_index":3344,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["changes",{"_index":3385,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["characters",{"_index":1672,"title":{},"body":{"classes/CountryDto.html":{},"classes/CreateDto.html":{}}}],["charge",{"_index":3766,"title":{},"body":{"license.html":{}}}],["check",{"_index":310,"title":{},"body":{"injectables/AddressTypeService.html":{},"controllers/AppController.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/PrismaService.html":{},"injectables/StateService.html":{},"miscellaneous/functions.html":{}}}],["checkconsumerstatus",{"_index":1438,"title":{},"body":{"injectables/ContactService.html":{}}}],["checking",{"_index":957,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{},"index.html":{}}}],["checkout",{"_index":3383,"title":{},"body":{"contributing.html":{}}}],["checks",{"_index":493,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/PrismaService.html":{},"miscellaneous/functions.html":{}}}],["choice",{"_index":2402,"title":{},"body":{"modules/FilesModule.html":{}}}],["choose",{"_index":3699,"title":{},"body":{"index.html":{}}}],["chore",{"_index":3734,"title":{},"body":{"index.html":{}}}],["cities",{"_index":821,"title":{"classes/Cities.html":{}},"body":{"classes/Cities.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"coverage.html":{}}}],["cities.controller",{"_index":878,"title":{},"body":{"modules/CityModule.html":{}}}],["cities.service",{"_index":845,"title":{},"body":{"controllers/CityController.html":{},"modules/CityModule.html":{}}}],["cities/:id_city",{"_index":851,"title":{},"body":{"controllers/CityController.html":{}}}],["city",{"_index":480,"title":{},"body":{"modules/ApiModule.html":{},"classes/BankDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"controllers/CityController.html":{},"classes/CityDto.html":{},"modules/CityModule.html":{},"injectables/CityService.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/Query-5.html":{},"classes/SortByDto.html":{},"classes/UpdateDto-2.html":{}}}],["city_mas",{"_index":929,"title":{},"body":{"injectables/CityService.html":{},"classes/Query-5.html":{}}}],["citycontroller",{"_index":833,"title":{"controllers/CityController.html":{}},"body":{"controllers/CityController.html":{},"modules/CityModule.html":{},"coverage.html":{}}}],["citydto",{"_index":835,"title":{"classes/CityDto.html":{}},"body":{"controllers/CityController.html":{},"classes/CityDto.html":{},"injectables/CityService.html":{},"classes/UpdateDto-2.html":{},"coverage.html":{}}}],["citymodule",{"_index":435,"title":{"modules/CityModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/CityModule.html":{},"modules.html":{},"overview.html":{}}}],["cityservice",{"_index":844,"title":{"injectables/CityService.html":{}},"body":{"controllers/CityController.html":{},"modules/CityModule.html":{},"injectables/CityService.html":{},"coverage.html":{},"overview.html":{}}}],["claim",{"_index":3806,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"classes/AddressUpdateDto.html":{},"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/BankDto.html":{},"classes/BankUpdateDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ConfigService.html":{},"classes/ContactDto.html":{},"classes/Country.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/Document.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"classes/DocumentGroupDto.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/State.html":{},"classes/StateDto.html":{},"classes/UpdateDto.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{}},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"controllers/AddressTypeController.html":{},"modules/AddressTypeModule.html":{},"injectables/AddressTypeService.html":{},"classes/AddressUpdateDto.html":{},"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/BankController.html":{},"classes/BankDto.html":{},"modules/BankModule.html":{},"injectables/BankService.html":{},"classes/BankUpdateDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"controllers/CityController.html":{},"classes/CityDto.html":{},"modules/CityModule.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ConfigService.html":{},"controllers/ContactController.html":{},"classes/ContactDto.html":{},"modules/ContactModule.html":{},"injectables/ContactService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService-1.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"modules/CountryMasModule.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/Document.html":{},"controllers/DocumentController.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"controllers/DocumentGroupController.html":{},"classes/DocumentGroupDto.html":{},"modules/DocumentGroupModule.html":{},"injectables/DocumentGroupService.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/State.html":{},"controllers/StateController.html":{},"classes/StateDto.html":{},"modules/StateModule.html":{},"injectables/StateService.html":{},"classes/UpdateDto.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"classes/AddressUpdateDto.html":{},"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/BankDto.html":{},"classes/BankUpdateDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ConfigService.html":{},"classes/ContactDto.html":{},"classes/Country.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/Document.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"classes/DocumentGroupDto.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/State.html":{},"classes/StateDto.html":{},"classes/UpdateDto.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"overview.html":{}}}],["classreference",{"_index":2817,"title":{},"body":{"classes/PaginationResponseDto.html":{},"miscellaneous/functions.html":{}}}],["clause",{"_index":1149,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{},"classes/UtilsService.html":{}}}],["clauses",{"_index":1954,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{}}}],["client",{"_index":1501,"title":{},"body":{"controllers/CountriesController.html":{},"modules/FilesS3Module.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/ResolvePromisesInterceptor.html":{}}}],["clientproxy",{"_index":1441,"title":{},"body":{"injectables/ContactService.html":{}}}],["clientsmodule",{"_index":1414,"title":{},"body":{"modules/ContactModule.html":{}}}],["clientsmodule.register",{"_index":1418,"title":{},"body":{"modules/ContactModule.html":{}}}],["clone",{"_index":3643,"title":{},"body":{"index.html":{}}}],["close",{"_index":1478,"title":{},"body":{"injectables/ContactService.html":{}}}],["closed",{"_index":3742,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":2247,"title":{},"body":{"classes/FileResponseDto-2.html":{}}}],["cluster",{"_index":3727,"title":{},"body":{"index.html":{}}}],["cluster_addresstypemodule",{"_index":249,"title":{},"body":{"modules/AddressTypeModule.html":{},"overview.html":{}}}],["cluster_addresstypemodule_exports",{"_index":250,"title":{},"body":{"modules/AddressTypeModule.html":{},"overview.html":{}}}],["cluster_addresstypemodule_providers",{"_index":251,"title":{},"body":{"modules/AddressTypeModule.html":{},"overview.html":{}}}],["cluster_apimodule",{"_index":432,"title":{},"body":{"modules/ApiModule.html":{},"overview.html":{}}}],["cluster_apimodule_imports",{"_index":433,"title":{},"body":{"modules/ApiModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":595,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":596,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_bankmodule",{"_index":769,"title":{},"body":{"modules/BankModule.html":{},"overview.html":{}}}],["cluster_bankmodule_exports",{"_index":770,"title":{},"body":{"modules/BankModule.html":{},"overview.html":{}}}],["cluster_bankmodule_providers",{"_index":771,"title":{},"body":{"modules/BankModule.html":{},"overview.html":{}}}],["cluster_citymodule",{"_index":874,"title":{},"body":{"modules/CityModule.html":{},"overview.html":{}}}],["cluster_citymodule_exports",{"_index":875,"title":{},"body":{"modules/CityModule.html":{},"overview.html":{}}}],["cluster_citymodule_providers",{"_index":876,"title":{},"body":{"modules/CityModule.html":{},"overview.html":{}}}],["cluster_contactmodule",{"_index":1411,"title":{},"body":{"modules/ContactModule.html":{},"overview.html":{}}}],["cluster_contactmodule_providers",{"_index":1412,"title":{},"body":{"modules/ContactModule.html":{},"overview.html":{}}}],["cluster_countriesmodule",{"_index":1564,"title":{},"body":{"modules/CountriesModule.html":{},"overview.html":{}}}],["cluster_countriesmodule_exports",{"_index":1565,"title":{},"body":{"modules/CountriesModule.html":{},"overview.html":{}}}],["cluster_countriesmodule_providers",{"_index":1566,"title":{},"body":{"modules/CountriesModule.html":{},"overview.html":{}}}],["cluster_countrymasmodule",{"_index":1685,"title":{},"body":{"modules/CountryMasModule.html":{}}}],["cluster_countrymasmodule_exports",{"_index":1686,"title":{},"body":{"modules/CountryMasModule.html":{}}}],["cluster_countrymasmodule_providers",{"_index":1687,"title":{},"body":{"modules/CountryMasModule.html":{}}}],["cluster_currenciesmodule",{"_index":1771,"title":{},"body":{"modules/CurrenciesModule.html":{},"overview.html":{}}}],["cluster_currenciesmodule_providers",{"_index":1772,"title":{},"body":{"modules/CurrenciesModule.html":{},"overview.html":{}}}],["cluster_documentgroupmodule",{"_index":1899,"title":{},"body":{"modules/DocumentGroupModule.html":{},"overview.html":{}}}],["cluster_documentgroupmodule_exports",{"_index":1900,"title":{},"body":{"modules/DocumentGroupModule.html":{},"overview.html":{}}}],["cluster_documentgroupmodule_providers",{"_index":1901,"title":{},"body":{"modules/DocumentGroupModule.html":{},"overview.html":{}}}],["cluster_documentmodule",{"_index":1914,"title":{},"body":{"modules/DocumentModule.html":{},"overview.html":{}}}],["cluster_documentmodule_exports",{"_index":1915,"title":{},"body":{"modules/DocumentModule.html":{},"overview.html":{}}}],["cluster_documentmodule_providers",{"_index":1916,"title":{},"body":{"modules/DocumentModule.html":{},"overview.html":{}}}],["cluster_fileslocalmodule",{"_index":2350,"title":{},"body":{"modules/FilesLocalModule.html":{},"overview.html":{}}}],["cluster_fileslocalmodule_exports",{"_index":2351,"title":{},"body":{"modules/FilesLocalModule.html":{},"overview.html":{}}}],["cluster_fileslocalmodule_providers",{"_index":2352,"title":{},"body":{"modules/FilesLocalModule.html":{},"overview.html":{}}}],["cluster_filesmodule",{"_index":2383,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_filesmodule_exports",{"_index":2385,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_filesmodule_imports",{"_index":2384,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_filesmodule_providers",{"_index":2386,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_filess3module",{"_index":2423,"title":{},"body":{"modules/FilesS3Module.html":{},"overview.html":{}}}],["cluster_filess3module_exports",{"_index":2424,"title":{},"body":{"modules/FilesS3Module.html":{},"overview.html":{}}}],["cluster_filess3module_providers",{"_index":2425,"title":{},"body":{"modules/FilesS3Module.html":{},"overview.html":{}}}],["cluster_filess3presignedmodule",{"_index":2484,"title":{},"body":{"modules/FilesS3PresignedModule.html":{},"overview.html":{}}}],["cluster_filess3presignedmodule_exports",{"_index":2486,"title":{},"body":{"modules/FilesS3PresignedModule.html":{},"overview.html":{}}}],["cluster_filess3presignedmodule_providers",{"_index":2485,"title":{},"body":{"modules/FilesS3PresignedModule.html":{},"overview.html":{}}}],["cluster_helpermodule",{"_index":2635,"title":{},"body":{"modules/HelperModule.html":{},"overview.html":{}}}],["cluster_helpermodule_exports",{"_index":2637,"title":{},"body":{"modules/HelperModule.html":{},"overview.html":{}}}],["cluster_helpermodule_providers",{"_index":2636,"title":{},"body":{"modules/HelperModule.html":{},"overview.html":{}}}],["cluster_homemodule",{"_index":2666,"title":{},"body":{"modules/HomeModule.html":{},"overview.html":{}}}],["cluster_homemodule_providers",{"_index":2667,"title":{},"body":{"modules/HomeModule.html":{},"overview.html":{}}}],["cluster_statemodule",{"_index":3265,"title":{},"body":{"modules/StateModule.html":{},"overview.html":{}}}],["cluster_statemodule_exports",{"_index":3267,"title":{},"body":{"modules/StateModule.html":{},"overview.html":{}}}],["cluster_statemodule_providers",{"_index":3266,"title":{},"body":{"modules/StateModule.html":{},"overview.html":{}}}],["code",{"_index":672,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/Country.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/FileNotImageException.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/Query-3.html":{},"contributing.html":{},"index.html":{}}}],["codeql",{"_index":3663,"title":{},"body":{"index.html":{}}}],["codes",{"_index":145,"title":{},"body":{"controllers/AddressTypeController.html":{},"controllers/BankController.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"classes/PrismaClientExceptionFilter.html":{},"controllers/StateController.html":{}}}],["column",{"_index":2893,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"classes/Query-3.html":{}}}],["column_name",{"_index":2895,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["columns",{"_index":1953,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["column’s",{"_index":2894,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["combines",{"_index":2615,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["comes",{"_index":3637,"title":{},"body":{"index.html":{}}}],["comma",{"_index":959,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["command",{"_index":2280,"title":{},"body":{"classes/FileType.html":{},"injectables/FilesS3PresignedService.html":{},"index.html":{}}}],["commaseparated",{"_index":955,"title":{"injectables/CommaSeparated.html":{}},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{},"coverage.html":{}}}],["commit",{"_index":3386,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["commitlint",{"_index":3658,"title":{},"body":{"index.html":{}}}],["commits",{"_index":3661,"title":{},"body":{"index.html":{}}}],["common",{"_index":2639,"title":{},"body":{"modules/HelperModule.html":{},"miscellaneous/functions.html":{}}}],["common/helper/helper.module",{"_index":613,"title":{},"body":{"modules/AppModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["common/helper/services/config.service",{"_index":2437,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["common/shared/services/pgsql.service",{"_index":655,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["commonquery",{"_index":880,"title":{},"body":{"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["commonquery('your_table",{"_index":1120,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["commonquery.findwithdynamicjoin",{"_index":1121,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["commonquery1",{"_index":1017,"title":{"classes/CommonQuery1.html":{}},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{},"coverage.html":{}}}],["commonquery5",{"_index":881,"title":{"classes/CommonQuery5.html":{}},"body":{"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"modules/HelperModule.html":{},"interfaces/QueryConfig.html":{},"coverage.html":{},"overview.html":{}}}],["commonquery5('city_mas",{"_index":892,"title":{},"body":{"injectables/CityService.html":{}}}],["community",{"_index":3365,"title":{},"body":{"contributing.html":{}}}],["components",{"_index":2354,"title":{},"body":{"modules/FilesLocalModule.html":{},"injectables/FilesS3Service.html":{}}}],["compose",{"_index":3633,"title":{},"body":{"index.html":{}}}],["compression",{"_index":3519,"title":{},"body":{"dependencies.html":{}}}],["condition",{"_index":899,"title":{},"body":{"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["conditionally",{"_index":2391,"title":{},"body":{"modules/FilesModule.html":{}}}],["conditions",{"_index":1144,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/DynamicQueryBuilder.html":{},"classes/Query-3.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{},"license.html":{}}}],["conditions[key",{"_index":1970,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["condition}${dynamicjoinconditions",{"_index":1165,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["conds",{"_index":1076,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/DynamicQueryBuilder.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{}}}],["config",{"_index":916,"title":{},"body":{"injectables/CityService.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/UtilsService.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["config.alias",{"_index":3320,"title":{},"body":{"classes/UtilsService.html":{}}}],["config.ts",{"_index":3496,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["config.type",{"_index":2051,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileType.html":{},"interfaces/IFileConfig.html":{}}}],["config.type.ts",{"_index":3548,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["config/app.config",{"_index":615,"title":{},"body":{"modules/AppModule.html":{},"classes/FileType.html":{}}}],["config/database.config",{"_index":617,"title":{},"body":{"modules/AppModule.html":{}}}],["config/file.config",{"_index":619,"title":{},"body":{"modules/AppModule.html":{},"classes/FileType.html":{}}}],["config/logger.config",{"_index":621,"title":{},"body":{"modules/AppModule.html":{}}}],["config/type/app",{"_index":2097,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"classes/FileType.html":{}}}],["config/type/config.type",{"_index":2377,"title":{},"body":{"injectables/FilesLocalService.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/HomeService.html":{},"injectables/PrismaService.html":{}}}],["config/type/file",{"_index":2139,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"interfaces/IFileConfig.html":{}}}],["config/type/logger",{"_index":2175,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["configmodule",{"_index":605,"title":{},"body":{"modules/AppModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["configmodule.forroot",{"_index":626,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":1180,"title":{"classes/ConfigService.html":{}},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"injectables/FilesLocalService.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"modules/HelperModule.html":{},"injectables/HomeService.html":{},"injectables/PrismaService.html":{},"coverage.html":{}}}],["configservice.get('database.url",{"_index":2937,"title":{},"body":{"injectables/PrismaService.html":{}}}],["configservice.get('file.awss3region",{"_index":2440,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["configservice.get('file.maxfilesize",{"_index":2451,"title":{},"body":{"modules/FilesS3Module.html":{}}}],["configservice.getorthrow('file.accesskeyid",{"_index":2441,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["configservice.getorthrow('file.awsdefaults3bucket",{"_index":2443,"title":{},"body":{"modules/FilesS3Module.html":{}}}],["configservice.getorthrow('file.secretaccesskey",{"_index":2442,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["configservice.prismaconfig",{"_index":2938,"title":{},"body":{"injectables/PrismaService.html":{}}}],["configuration",{"_index":601,"title":{},"body":{"modules/AppModule.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileType.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/HomeService.html":{},"interfaces/IAppConfig.html":{},"injectables/PrismaService.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/UtilsService.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["configurations",{"_index":2488,"title":{},"body":{"modules/FilesS3PresignedModule.html":{}}}],["configure",{"_index":107,"title":{},"body":{"classes/AddressType.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"classes/CountryMas.html":{},"classes/Currency.html":{},"classes/Document.html":{},"classes/DocumentGroup.html":{}}}],["configured",{"_index":2490,"title":{},"body":{"modules/FilesS3PresignedModule.html":{},"index.html":{}}}],["configures",{"_index":2427,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HomeModule.html":{},"miscellaneous/functions.html":{}}}],["configuring",{"_index":453,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"interfaces/IPaginationFieldConfig.html":{}}}],["connect",{"_index":1487,"title":{},"body":{"injectables/ContactService.html":{}}}],["connection",{"_index":494,"title":{},"body":{"controllers/AppController.html":{},"injectables/ContactService.html":{},"classes/EnvironmentVariablesValidator.html":{},"injectables/PrismaService.html":{},"dependencies.html":{},"license.html":{}}}],["connections",{"_index":604,"title":{},"body":{"modules/AppModule.html":{},"classes/EnvironmentVariablesValidator.html":{},"injectables/PrismaService.html":{}}}],["connectivity",{"_index":3834,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["connects",{"_index":2933,"title":{},"body":{"injectables/PrismaService.html":{}}}],["console.error('failed",{"_index":1458,"title":{},"body":{"injectables/ContactService.html":{}}}],["console.log",{"_index":2141,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"modules/FilesModule.html":{}}}],["console.log('____________________________________",{"_index":2861,"title":{},"body":{"injectables/PaginationService.html":{}}}],["console.log('all",{"_index":414,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["console.log('bad",{"_index":657,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["console.log('consumer",{"_index":1465,"title":{},"body":{"injectables/ContactService.html":{}}}],["console.log('county",{"_index":3131,"title":{},"body":{"classes/Query-6.html":{}}}],["console.log('data",{"_index":2869,"title":{},"body":{"injectables/PaginationService.html":{}}}],["console.log('dattttttttttttttttttttttttt",{"_index":2843,"title":{},"body":{"injectables/PaginationService.html":{}}}],["console.log('delete",{"_index":3064,"title":{},"body":{"classes/Query-2.html":{},"classes/Query-4.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{}}}],["console.log('finalcountquery",{"_index":2870,"title":{},"body":{"injectables/PaginationService.html":{}}}],["console.log('find",{"_index":3123,"title":{},"body":{"classes/Query-5.html":{}}}],["console.log('findbyid",{"_index":3109,"title":{},"body":{"classes/Query-4.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{}}}],["console.log('findbyname",{"_index":3139,"title":{},"body":{"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{}}}],["console.log('findbynmae",{"_index":3111,"title":{},"body":{"classes/Query-4.html":{}}}],["console.log('formated",{"_index":3032,"title":{},"body":{"classes/Query-2.html":{}}}],["console.log('generated",{"_index":928,"title":{},"body":{"injectables/CityService.html":{}}}],["console.log('hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhha",{"_index":1539,"title":{},"body":{"controllers/CountriesController.html":{}}}],["console.log('hiii",{"_index":2849,"title":{},"body":{"injectables/PaginationService.html":{}}}],["console.log('http",{"_index":2697,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["console.log('insert",{"_index":3011,"title":{},"body":{"classes/Query-10.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{}}}],["console.log('keys",{"_index":3030,"title":{},"body":{"classes/Query-2.html":{}}}],["console.log('prisma",{"_index":2884,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["console.log('qqqqqqqqqqqqqq",{"_index":3085,"title":{},"body":{"classes/Query-3.html":{}}}],["console.log('qqqqqqqqqqqqqqqqqqqq",{"_index":1991,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["console.log('query",{"_index":915,"title":{},"body":{"injectables/CityService.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/QueryFailedFilter.html":{}}}],["console.log('resultttttttttttttttttttt",{"_index":2960,"title":{},"body":{"injectables/PrismaService.html":{}}}],["console.log('update",{"_index":1763,"title":{},"body":{"controllers/CurrenciesController.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{}}}],["console.log('values",{"_index":3031,"title":{},"body":{"classes/Query-2.html":{}}}],["console.log(e",{"_index":2963,"title":{},"body":{"injectables/PrismaService.html":{}}}],["console.log(offset",{"_index":2871,"title":{},"body":{"injectables/PaginationService.html":{}}}],["console.log(result",{"_index":1470,"title":{},"body":{"injectables/ContactService.html":{},"miscellaneous/functions.html":{}}}],["console.log(sqlquery",{"_index":946,"title":{},"body":{"injectables/CityService.html":{},"classes/Query.html":{}}}],["console_print",{"_index":2194,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["const",{"_index":311,"title":{},"body":{"injectables/AddressTypeService.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ConfigService.html":{},"injectables/ContactService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileType.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"injectables/StateService.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{}}}],["constraint",{"_index":2890,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["constrainterrors",{"_index":3173,"title":{},"body":{"classes/QueryFailedFilter.html":{},"coverage.html":{}}}],["constrainterrors[exception.constraint",{"_index":3177,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["constructed",{"_index":2260,"title":{},"body":{"classes/FileType.html":{},"classes/UtilsService.html":{}}}],["constructing",{"_index":2723,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/PaginationMetaDto.html":{}}}],["construction",{"_index":2997,"title":{},"body":{"classes/Query-10.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"classes/UtilsService.html":{}}}],["constructor",{"_index":279,"title":{},"body":{"injectables/AddressTypeService.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ConfigService.html":{},"injectables/ContactService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/FileNotImageException.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/HomeService.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query-2.html":{},"interfaces/QueryConfig.html":{},"classes/QueryFailedFilter.html":{},"injectables/StateService.html":{},"classes/UserNotFoundException.html":{},"miscellaneous/functions.html":{}}}],["constructor(configservice",{"_index":2367,"title":{},"body":{"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/HomeService.html":{},"injectables/PrismaService.html":{}}}],["constructor(error",{"_index":3298,"title":{},"body":{"classes/UserNotFoundException.html":{}}}],["constructor(message",{"_index":2208,"title":{},"body":{"classes/FileNotImageException.html":{}}}],["constructor(model",{"_index":1031,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["constructor(paginationservice",{"_index":776,"title":{},"body":{"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["constructor(prisma",{"_index":280,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/PaginationService.html":{}}}],["constructor(private",{"_index":215,"title":{},"body":{"controllers/AddressTypeController.html":{},"controllers/BankController.html":{},"controllers/CityController.html":{},"controllers/ContactController.html":{},"controllers/CountriesController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"controllers/HomeController.html":{},"injectables/HomeService.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query-2.html":{},"controllers/StateController.html":{}}}],["constructor(public",{"_index":413,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["constructor(rabbitclient",{"_index":1440,"title":{},"body":{"injectables/ContactService.html":{}}}],["constructor(reflector",{"_index":391,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["constructor(undefined",{"_index":2785,"title":{},"body":{"classes/PaginationMetaDto.html":{}}}],["constructor(utilsservice",{"_index":3019,"title":{},"body":{"classes/Query-2.html":{}}}],["constructs",{"_index":2664,"title":{},"body":{"controllers/HomeController.html":{},"injectables/HomeService.html":{},"injectables/PaginationService.html":{},"classes/Query.html":{},"classes/UtilsService.html":{}}}],["consumer",{"_index":1469,"title":{},"body":{"injectables/ContactService.html":{}}}],["consumerhost",{"_index":1436,"title":{},"body":{"injectables/ContactService.html":{}}}],["consumerport",{"_index":1437,"title":{},"body":{"injectables/ContactService.html":{}}}],["consumes",{"_index":2337,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["contact",{"_index":473,"title":{},"body":{"modules/ApiModule.html":{},"controllers/ContactController.html":{},"classes/ContactDto.html":{},"modules/ContactModule.html":{},"injectables/ContactService.html":{},"coverage.html":{}}}],["contact.controller",{"_index":1417,"title":{},"body":{"modules/ContactModule.html":{}}}],["contact.service",{"_index":1397,"title":{},"body":{"controllers/ContactController.html":{},"modules/ContactModule.html":{}}}],["contact_service",{"_index":1419,"title":{},"body":{"modules/ContactModule.html":{}}}],["contact_service1",{"_index":1432,"title":{},"body":{"modules/ContactModule.html":{}}}],["contact_type",{"_index":1403,"title":{},"body":{"classes/ContactDto.html":{}}}],["contactcontroller",{"_index":1392,"title":{"controllers/ContactController.html":{}},"body":{"controllers/ContactController.html":{},"modules/ContactModule.html":{},"coverage.html":{}}}],["contactdto",{"_index":1398,"title":{"classes/ContactDto.html":{}},"body":{"controllers/ContactController.html":{},"classes/ContactDto.html":{},"injectables/ContactService.html":{},"coverage.html":{}}}],["contactmodule",{"_index":436,"title":{"modules/ContactModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/ContactModule.html":{},"modules.html":{},"overview.html":{}}}],["contactservice",{"_index":1396,"title":{"injectables/ContactService.html":{}},"body":{"controllers/ContactController.html":{},"modules/ContactModule.html":{},"injectables/ContactService.html":{},"coverage.html":{},"overview.html":{}}}],["contain",{"_index":2358,"title":{},"body":{"modules/FilesLocalModule.html":{}}}],["contained",{"_index":2816,"title":{},"body":{"classes/PaginationResponseDto.html":{},"miscellaneous/functions.html":{}}}],["container",{"_index":3634,"title":{},"body":{"index.html":{}}}],["containing",{"_index":1044,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/DynamicQueryBuilder.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"injectables/PrismaService.html":{},"classes/Query-1.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{}}}],["contains",{"_index":407,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/FileResponseDto-1.html":{}}}],["contentlength",{"_index":2518,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["contenttype",{"_index":2444,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["context",{"_index":406,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"injectables/ResolvePromisesInterceptor.html":{}}}],["contextmodule",{"_index":609,"title":{},"body":{"modules/AppModule.html":{}}}],["continent",{"_index":1598,"title":{},"body":{"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/Query-2.html":{}}}],["contract",{"_index":2773,"title":{},"body":{"interfaces/IPaginationFieldConfig.html":{},"license.html":{}}}],["contribute",{"_index":3370,"title":{},"body":{"contributing.html":{}}}],["contributing",{"_index":3359,"title":{"contributing.html":{}},"body":{"contributing.html":{}}}],["contributing.md",{"_index":3360,"title":{},"body":{"contributing.html":{}}}],["contributions",{"_index":3364,"title":{},"body":{"contributing.html":{}}}],["control",{"_index":2759,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"index.html":{}}}],["controller",{"_index":121,"title":{"controllers/AddressTypeController.html":{},"controllers/AppController.html":{},"controllers/BankController.html":{},"controllers/CityController.html":{},"controllers/ContactController.html":{},"controllers/CountriesController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"controllers/HomeController.html":{},"controllers/StateController.html":{}},"body":{"controllers/AddressTypeController.html":{},"controllers/AppController.html":{},"controllers/BankController.html":{},"controllers/CityController.html":{},"controllers/ContactController.html":{},"controllers/CountriesController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"controllers/StateController.html":{},"coverage.html":{}}}],["controller('address_type",{"_index":214,"title":{},"body":{"controllers/AddressTypeController.html":{}}}],["controller('banks",{"_index":720,"title":{},"body":{"controllers/BankController.html":{}}}],["controller('cities",{"_index":848,"title":{},"body":{"controllers/CityController.html":{}}}],["controller('contact",{"_index":1400,"title":{},"body":{"controllers/ContactController.html":{}}}],["controller('document",{"_index":1886,"title":{},"body":{"controllers/DocumentGroupController.html":{}}}],["controller('documents",{"_index":1846,"title":{},"body":{"controllers/DocumentController.html":{}}}],["controller('states",{"_index":3245,"title":{},"body":{"controllers/StateController.html":{}}}],["controllers",{"_index":123,"title":{},"body":{"controllers/AddressTypeController.html":{},"modules/AddressTypeModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/BankController.html":{},"modules/BankModule.html":{},"controllers/CityController.html":{},"modules/CityModule.html":{},"controllers/ContactController.html":{},"modules/ContactModule.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"controllers/CountryController.html":{},"modules/CountryMasModule.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"modules/DocumentGroupModule.html":{},"modules/DocumentModule.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"controllers/StateController.html":{},"modules/StateModule.html":{},"overview.html":{}}}],["controls",{"_index":2720,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["conventional",{"_index":3660,"title":{},"body":{"index.html":{}}}],["conversion",{"_index":1155,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["converts",{"_index":3591,"title":{},"body":{"miscellaneous/functions.html":{}}}],["coords",{"_index":2610,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["copies",{"_index":3782,"title":{},"body":{"license.html":{}}}],["copy",{"_index":3769,"title":{},"body":{"license.html":{}}}],["copyfile",{"_index":3481,"title":{},"body":{"coverage.html":{}}}],["copyright",{"_index":3761,"title":{},"body":{"license.html":{}}}],["core",{"_index":600,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["core/enum/file.type",{"_index":1205,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["core/exceptions/http",{"_index":460,"title":{},"body":{"modules/ApiModule.html":{}}}],["core/interfaces/app.interfaces",{"_index":1207,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["core/interfaces/aws.interfaces",{"_index":1209,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["core/interfaces/file.interfaces",{"_index":1211,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["core/interfaces/jwt.interfaces",{"_index":1213,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["core/interfaces/node",{"_index":1215,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["core/interfaces/postgres.interfaces",{"_index":1218,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["core/interfaces/sendgrid.interfaces",{"_index":1220,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["core/interfaces/sms.interfaces",{"_index":1222,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["core/interfaces/upload",{"_index":1224,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["core/validators/field.validator",{"_index":2560,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["correct",{"_index":992,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["correlationid",{"_index":570,"title":{},"body":{"controllers/AppController.html":{}}}],["corresponding",{"_index":2830,"title":{},"body":{"injectables/PaginationService.html":{}}}],["count",{"_index":1803,"title":{},"body":{"injectables/CurrenciesService.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["count(${countbyfield",{"_index":3341,"title":{},"body":{"classes/UtilsService.html":{}}}],["countbyfield",{"_index":3306,"title":{},"body":{"classes/UtilsService.html":{}}}],["countfilterquery",{"_index":2867,"title":{},"body":{"injectables/PaginationService.html":{}}}],["counting",{"_index":3309,"title":{},"body":{"classes/UtilsService.html":{}}}],["countquery",{"_index":356,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/PaginationService.html":{},"injectables/StateService.html":{},"classes/UtilsService.html":{}}}],["countries",{"_index":1492,"title":{},"body":{"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"modules/CountryMasModule.html":{},"classes/Query-2.html":{},"coverage.html":{}}}],["countries.controller",{"_index":1568,"title":{},"body":{"modules/CountriesModule.html":{}}}],["countries.service",{"_index":1506,"title":{},"body":{"controllers/CountriesController.html":{},"modules/CountriesModule.html":{}}}],["countries/:id_country",{"_index":1663,"title":{},"body":{"controllers/CountryController.html":{}}}],["countries/countries.module",{"_index":462,"title":{},"body":{"modules/ApiModule.html":{}}}],["countriescontroller",{"_index":1490,"title":{"controllers/CountriesController.html":{}},"body":{"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"coverage.html":{}}}],["countriesjson",{"_index":3406,"title":{},"body":{"coverage.html":{}}}],["countriesjson1",{"_index":3407,"title":{},"body":{"coverage.html":{}}}],["countrieslist",{"_index":3408,"title":{},"body":{"coverage.html":{}}}],["countriesmodule",{"_index":437,"title":{"modules/CountriesModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/CountriesModule.html":{},"modules.html":{},"overview.html":{}}}],["countriesservice",{"_index":1505,"title":{"injectables/CountriesService-1.html":{}},"body":{"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"modules/CountryMasModule.html":{},"coverage.html":{},"overview.html":{}}}],["country",{"_index":477,"title":{"classes/Country.html":{}},"body":{"modules/ApiModule.html":{},"classes/BankDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService-1.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"modules/CountryMasModule.html":{},"classes/CreateCountryDto.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/Query-2.html":{},"classes/Query-6.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/State.html":{},"classes/StateDto.html":{},"injectables/StateService.html":{},"classes/UpdateDto-3.html":{},"coverage.html":{}}}],["country's",{"_index":1595,"title":{},"body":{"classes/Country.html":{}}}],["country.dto",{"_index":1536,"title":{},"body":{"controllers/CountriesController.html":{},"classes/FilterCountryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortCountryDto.html":{},"coverage.html":{}}}],["country/create",{"_index":1515,"title":{},"body":{"controllers/CountriesController.html":{}}}],["country_mas",{"_index":908,"title":{},"body":{"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"classes/Query-6.html":{},"injectables/StateService.html":{}}}],["country_mas.controller",{"_index":1689,"title":{},"body":{"modules/CountryMasModule.html":{}}}],["country_mas.service",{"_index":1660,"title":{},"body":{"controllers/CountryController.html":{},"modules/CountryMasModule.html":{}}}],["country_mas.status=1",{"_index":911,"title":{},"body":{"injectables/CityService.html":{}}}],["country_name",{"_index":935,"title":{},"body":{"injectables/CityService.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"injectables/StateService.html":{}}}],["countrycontroller",{"_index":1650,"title":{"controllers/CountryController.html":{}},"body":{"controllers/CountryController.html":{},"modules/CountryMasModule.html":{},"coverage.html":{}}}],["countrydto",{"_index":1516,"title":{"classes/CountryDto.html":{}},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"classes/CountryDto.html":{},"classes/CreateCountryDto.html":{},"classes/UpdateDto-3.html":{},"coverage.html":{}}}],["countrymas",{"_index":1581,"title":{"classes/CountryMas.html":{}},"body":{"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"classes/CountryMas.html":{},"coverage.html":{}}}],["countrymasmodule",{"_index":438,"title":{"modules/CountryMasModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/CountryMasModule.html":{},"modules.html":{},"overview.html":{}}}],["coverage",{"_index":3400,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["cr",{"_index":3058,"title":{},"body":{"classes/Query-2.html":{}}}],["cr.id_currency=c.id_currency",{"_index":3059,"title":{},"body":{"classes/Query-2.html":{}}}],["cr.name",{"_index":3051,"title":{},"body":{"classes/Query-2.html":{}}}],["cr.symbol",{"_index":3050,"title":{},"body":{"classes/Query-2.html":{}}}],["create",{"_index":132,"title":{},"body":{"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"controllers/ContactController.html":{},"injectables/ContactService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"interfaces/QueryConfig.html":{},"classes/SortByDto.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{},"contributing.html":{},"index.html":{}}}],["create(@body",{"_index":220,"title":{},"body":{"controllers/AddressTypeController.html":{},"controllers/BankController.html":{},"controllers/CityController.html":{},"controllers/ContactController.html":{},"controllers/CountriesController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"controllers/StateController.html":{}}}],["create(countrydto",{"_index":1574,"title":{},"body":{"injectables/CountriesService-1.html":{}}}],["create(createdto",{"_index":149,"title":{},"body":{"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"controllers/ContactController.html":{},"injectables/ContactService.html":{},"controllers/CountriesController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{}}}],["create(file",{"_index":2369,"title":{},"body":{"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{}}}],["create.dto",{"_index":376,"title":{},"body":{"classes/AddressUpdateDto.html":{},"classes/BankUpdateDto.html":{},"classes/UpdateDto.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{}}}],["createcitydto",{"_index":849,"title":{},"body":{"controllers/CityController.html":{}}}],["createcountrydto",{"_index":1508,"title":{"classes/CreateCountryDto.html":{}},"body":{"controllers/CountriesController.html":{},"classes/CreateCountryDto.html":{},"classes/UpdateDto.html":{},"coverage.html":{}}}],["created",{"_index":152,"title":{},"body":{"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{}}}],["createdto",{"_index":150,"title":{"classes/CreateDto.html":{}},"body":{"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"controllers/ContactController.html":{},"injectables/ContactService.html":{},"controllers/CountriesController.html":{},"controllers/CountryController.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-3.html":{},"coverage.html":{}}}],["createquery",{"_index":1027,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{}}}],["createquery(type",{"_index":1038,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["creates",{"_index":286,"title":{},"body":{"injectables/AddressTypeService.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/FileNotImageException.html":{},"injectables/FilesS3PresignedService.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PrismaService.html":{},"interfaces/QueryConfig.html":{},"classes/QueryFailedFilter.html":{},"injectables/StateService.html":{},"classes/UserNotFoundException.html":{},"miscellaneous/functions.html":{}}}],["creating",{"_index":15,"title":{},"body":{"classes/AddresTypeDto.html":{},"injectables/AddressTypeService.html":{},"classes/BankDto.html":{},"injectables/BankService.html":{},"classes/CityDto.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"injectables/CountriesService-1.html":{},"classes/CountryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"injectables/CurrenciesService.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/FilesS3PresignedService.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"interfaces/QueryConfig.html":{},"classes/StateDto.html":{},"injectables/StateService.html":{},"index.html":{}}}],["creation",{"_index":1583,"title":{},"body":{"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3Service.html":{}}}],["credentials",{"_index":2277,"title":{},"body":{"classes/FileType.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["ctx",{"_index":416,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["ctx.getrequest",{"_index":419,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["ctx.getresponse",{"_index":418,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["currencies",{"_index":1750,"title":{},"body":{"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"coverage.html":{}}}],["currencies.controller",{"_index":1774,"title":{},"body":{"modules/CurrenciesModule.html":{}}}],["currencies.service",{"_index":1756,"title":{},"body":{"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{}}}],["currencies/:id_currency",{"_index":1760,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["currencies/currencies.module",{"_index":463,"title":{},"body":{"modules/ApiModule.html":{}}}],["currenciescontroller",{"_index":1748,"title":{"controllers/CurrenciesController.html":{}},"body":{"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"coverage.html":{}}}],["currenciesmodule",{"_index":439,"title":{"modules/CurrenciesModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/CurrenciesModule.html":{},"modules.html":{},"overview.html":{}}}],["currenciesservice",{"_index":1751,"title":{"injectables/CurrenciesService.html":{}},"body":{"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"coverage.html":{},"overview.html":{}}}],["currency",{"_index":478,"title":{"classes/Currency.html":{}},"body":{"modules/ApiModule.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/Query-3.html":{},"classes/UpdateDto-1.html":{},"coverage.html":{}}}],["currency_name",{"_index":1603,"title":{},"body":{"classes/Country.html":{},"classes/Query-2.html":{}}}],["current",{"_index":1160,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/HttpErrorFilter.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"interfaces/QueryConfig.html":{}}}],["currentpage",{"_index":2726,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{}}}],["custom",{"_index":637,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"classes/FileNotImageException.html":{},"controllers/FilesS3Controller.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UserNotFoundException.html":{},"miscellaneous/functions.html":{}}}],["d",{"_index":3581,"title":{},"body":{"miscellaneous/functions.html":{}}}],["d8e94a843431",{"_index":1825,"title":{},"body":{"classes/Document.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{}}}],["damages",{"_index":3807,"title":{},"body":{"license.html":{}}}],["data",{"_index":10,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"controllers/AddressTypeController.html":{},"modules/AddressTypeModule.html":{},"injectables/AddressTypeService.html":{},"classes/AddressUpdateDto.html":{},"controllers/BankController.html":{},"classes/BankDto.html":{},"modules/BankModule.html":{},"injectables/BankService.html":{},"classes/BankUpdateDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"controllers/CityController.html":{},"classes/CityDto.html":{},"injectables/CityService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/Document.html":{},"controllers/DocumentController.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"controllers/DocumentGroupController.html":{},"classes/DocumentGroupDto.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/FileResponseDto-1.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"injectables/ResolvePromisesInterceptor.html":{},"classes/SortByDto.html":{},"classes/State.html":{},"controllers/StateController.html":{},"classes/StateDto.html":{},"injectables/StateService.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["data&quot",{"_index":2474,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["data')@apibody({schema",{"_index":2312,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["data.length",{"_index":2847,"title":{},"body":{"injectables/PaginationService.html":{}}}],["data=null",{"_index":2943,"title":{},"body":{"injectables/PrismaService.html":{}}}],["data[key",{"_index":3036,"title":{},"body":{"classes/Query-2.html":{}}}],["database",{"_index":271,"title":{},"body":{"injectables/AddressTypeService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ConfigService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryFailedFilter.html":{},"injectables/StateService.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["database_ca",{"_index":2002,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["database_cert",{"_index":2003,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["database_key",{"_index":2004,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["database_log_level",{"_index":2188,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["database_reject_unauthorized",{"_index":2005,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["database_ssl_enabled",{"_index":2006,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["database_storage",{"_index":2186,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["database_synchronize",{"_index":2007,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["database_url",{"_index":2008,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["databaseconfig",{"_index":616,"title":{},"body":{"modules/AppModule.html":{},"classes/EnvironmentVariablesValidator.html":{},"miscellaneous/typealiases.html":{}}}],["databases",{"_index":3631,"title":{},"body":{"index.html":{}}}],["dataquery",{"_index":2838,"title":{},"body":{"injectables/PaginationService.html":{}}}],["datasources",{"_index":2936,"title":{},"body":{"injectables/PrismaService.html":{}}}],["date",{"_index":71,"title":{},"body":{"classes/AddresTypeDto.html":{}}}],["date().toisostring",{"_index":335,"title":{},"body":{"injectables/AddressTypeService.html":{},"classes/AllExceptionsFilter.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/StateService.html":{}}}],["date().tolocaletimestring",{"_index":2684,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["db",{"_index":670,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"injectables/PrismaService.html":{}}}],["dbaeumer.vscode",{"_index":3678,"title":{},"body":{"index.html":{}}}],["dbconfig",{"_index":1269,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["deal",{"_index":3771,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":3812,"title":{},"body":{"license.html":{}}}],["debug",{"_index":568,"title":{},"body":{"controllers/AppController.html":{}}}],["debugging",{"_index":947,"title":{},"body":{"injectables/CityService.html":{}}}],["decimal",{"_index":1730,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{}}}],["decimal_digits",{"_index":1722,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/Query-3.html":{}}}],["declarations",{"_index":245,"title":{},"body":{"modules/AddressTypeModule.html":{},"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/BankModule.html":{},"modules/CityModule.html":{},"modules/ContactModule.html":{},"modules/CountriesModule.html":{},"modules/CountryMasModule.html":{},"modules/CurrenciesModule.html":{},"modules/DocumentGroupModule.html":{},"modules/DocumentModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{},"modules/StateModule.html":{},"overview.html":{}}}],["declaring",{"_index":2669,"title":{},"body":{"modules/HomeModule.html":{}}}],["decorates",{"_index":529,"title":{},"body":{"controllers/AppController.html":{}}}],["decorator",{"_index":538,"title":{},"body":{"controllers/AppController.html":{},"controllers/FilesS3Controller.html":{},"miscellaneous/functions.html":{}}}],["decorators",{"_index":31,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"controllers/AddressTypeController.html":{},"controllers/AppController.html":{},"controllers/BankController.html":{},"classes/BankDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"controllers/CityController.html":{},"classes/CityDto.html":{},"controllers/ContactController.html":{},"classes/ContactDto.html":{},"controllers/CountriesController.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"classes/Currency.html":{},"classes/Document.html":{},"controllers/DocumentController.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"controllers/DocumentGroupController.html":{},"classes/DocumentGroupDto.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3Service.html":{},"classes/FilterQueryDto.html":{},"controllers/HomeController.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/State.html":{},"controllers/StateController.html":{},"classes/StateDto.html":{},"miscellaneous/functions.html":{}}}],["decorators/api",{"_index":1557,"title":{},"body":{"controllers/CountriesController.html":{}}}],["decorators/api.filter.query",{"_index":1553,"title":{},"body":{"controllers/CountriesController.html":{}}}],["decorators/number.string.validator",{"_index":2562,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["decorators/swagger.schema",{"_index":2325,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["decorators/transforms.decorator",{"_index":2564,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["deep",{"_index":3209,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["deeply",{"_index":3836,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["deepobject",{"_index":2627,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["deeppartial",{"_index":1781,"title":{},"body":{"injectables/CurrenciesService.html":{},"miscellaneous/typealiases.html":{}}}],["deepresolvepromises",{"_index":3193,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["deepresolvepromises(data",{"_index":3212,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["deepresolvepromises(data).then(result",{"_index":3576,"title":{},"body":{"miscellaneous/functions.html":{}}}],["deepresolvepromises(input",{"_index":3566,"title":{},"body":{"miscellaneous/functions.html":{}}}],["deepresolvepromises(obj).then(result",{"_index":3582,"title":{},"body":{"miscellaneous/functions.html":{}}}],["default",{"_index":67,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ContactDto.html":{},"injectables/ContactService.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"interfaces/QueryConfig.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/StateDto.html":{},"classes/UtilsService.html":{}}}],["defaultmessage",{"_index":962,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["defaultmessage(args",{"_index":964,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["defaultvalue",{"_index":2177,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["define",{"_index":102,"title":{},"body":{"classes/AddressType.html":{},"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"classes/AddressUpdateDto.html":{},"injectables/BankService.html":{},"classes/BankUpdateDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"classes/Country.html":{},"classes/CountryMas.html":{},"classes/Currency.html":{},"classes/Document.html":{},"classes/DocumentGroup.html":{},"classes/State.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{}}}],["defined",{"_index":51,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/BankController.html":{},"classes/BankDto.html":{},"injectables/BankService.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"controllers/CityController.html":{},"classes/CityDto.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ConfigService.html":{},"controllers/ContactController.html":{},"classes/ContactDto.html":{},"injectables/ContactService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/Document.html":{},"controllers/DocumentController.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"controllers/DocumentGroupController.html":{},"classes/DocumentGroupDto.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/FilterQueryDto.html":{},"controllers/HomeController.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/State.html":{},"controllers/StateController.html":{},"classes/StateDto.html":{},"injectables/StateService.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{}}}],["defines",{"_index":8,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"modules/AddressTypeModule.html":{},"injectables/AddressTypeService.html":{},"classes/AddressUpdateDto.html":{},"controllers/BankController.html":{},"classes/BankDto.html":{},"modules/BankModule.html":{},"injectables/BankService.html":{},"classes/BankUpdateDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"modules/CityModule.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService-1.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"modules/CountryMasModule.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/Document.html":{},"controllers/DocumentController.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"controllers/DocumentGroupController.html":{},"classes/DocumentGroupDto.html":{},"modules/DocumentGroupModule.html":{},"injectables/DocumentGroupService.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"injectables/FilesService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/Query-10.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"classes/State.html":{},"controllers/StateController.html":{},"classes/StateDto.html":{},"modules/StateModule.html":{},"injectables/StateService.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{}}}],["delete",{"_index":134,"title":{},"body":{"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{}}}],["delete(':id",{"_index":1857,"title":{},"body":{"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{}}}],["delete(':id')@httpcode(httpstatus.ok)@apiparam({name",{"_index":1836,"title":{},"body":{"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{}}}],["delete(':id_address_type",{"_index":237,"title":{},"body":{"controllers/AddressTypeController.html":{}}}],["delete(':id_address_type')@httpcode(httpstatus.ok)@apiparam({name",{"_index":161,"title":{},"body":{"controllers/AddressTypeController.html":{}}}],["delete(':id_bank",{"_index":731,"title":{},"body":{"controllers/BankController.html":{}}}],["delete(':id_bank')@httpcode(httpstatus.ok)@apiparam({name",{"_index":706,"title":{},"body":{"controllers/BankController.html":{}}}],["delete(':id_city",{"_index":860,"title":{},"body":{"controllers/CityController.html":{}}}],["delete(':id_city')@httpcode(httpstatus.ok)@apiparam({name",{"_index":837,"title":{},"body":{"controllers/CityController.html":{}}}],["delete(':id_state",{"_index":3256,"title":{},"body":{"controllers/StateController.html":{}}}],["delete(':id_state')@httpcode(httpstatus.ok)@apiparam({name",{"_index":3235,"title":{},"body":{"controllers/StateController.html":{}}}],["delete(@param('id",{"_index":1858,"title":{},"body":{"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{}}}],["delete(@param('id_address_type",{"_index":239,"title":{},"body":{"controllers/AddressTypeController.html":{}}}],["delete(@param('id_bank",{"_index":732,"title":{},"body":{"controllers/BankController.html":{}}}],["delete(@param('id_city",{"_index":861,"title":{},"body":{"controllers/CityController.html":{}}}],["delete(@param('id_country",{"_index":1525,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CountryController.html":{}}}],["delete(@param('id_currency",{"_index":1769,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["delete(@param('id_state",{"_index":3257,"title":{},"body":{"controllers/StateController.html":{}}}],["delete(`${modules}/:id_country",{"_index":1667,"title":{},"body":{"controllers/CountryController.html":{}}}],["delete(`${modules}/:id_currency",{"_index":1768,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["delete(`deletebyid/:id_country",{"_index":1524,"title":{},"body":{"controllers/CountriesController.html":{}}}],["delete(deletebyid/:id_country)@httpcode(httpstatus.ok)@apiparam({name",{"_index":1496,"title":{},"body":{"controllers/CountriesController.html":{}}}],["delete(id",{"_index":160,"title":{},"body":{"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{}}}],["delete(key",{"_index":3098,"title":{},"body":{"classes/Query-3.html":{}}}],["delete(undefined)@httpcode(httpstatus.ok)@apiparam({name",{"_index":1654,"title":{},"body":{"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{}}}],["deletebyid/:id_country",{"_index":1523,"title":{},"body":{"controllers/CountriesController.html":{}}}],["deleted",{"_index":363,"title":{},"body":{"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{}}}],["deleted[0].deletedid",{"_index":365,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["deleted[0]?.deletedid",{"_index":1587,"title":{},"body":{"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{}}}],["deletedid",{"_index":3017,"title":{},"body":{"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{}}}],["deleteid",{"_index":3100,"title":{},"body":{"classes/Query-3.html":{}}}],["deleteoptions",{"_index":3099,"title":{},"body":{"classes/Query-3.html":{}}}],["deletes",{"_index":780,"title":{},"body":{"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["deletetype",{"_index":1959,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["deleting",{"_index":267,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/Query-10.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"injectables/StateService.html":{}}}],["deletion",{"_index":169,"title":{},"body":{"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{}}}],["delhi",{"_index":1613,"title":{},"body":{"classes/Country.html":{},"classes/CreateCountryDto.html":{}}}],["demonstration",{"_index":953,"title":{},"body":{"injectables/CityService.html":{}}}],["dependencies",{"_index":243,"title":{"dependencies.html":{}},"body":{"modules/AddressTypeModule.html":{},"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/BankModule.html":{},"modules/CityModule.html":{},"modules/ContactModule.html":{},"modules/CountriesModule.html":{},"modules/CountryMasModule.html":{},"modules/CurrenciesModule.html":{},"modules/DocumentGroupModule.html":{},"modules/DocumentModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{},"modules/StateModule.html":{},"changelog.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["depends",{"_index":2897,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["deployment",{"_index":3723,"title":{},"body":{"index.html":{}}}],["deps",{"_index":3353,"title":{},"body":{"changelog.html":{}}}],["derive",{"_index":1131,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["desc",{"_index":998,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{}}}],["descending",{"_index":2592,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["describe",{"_index":99,"title":{},"body":{"classes/AddressType.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"classes/Country.html":{},"classes/CountryMas.html":{},"classes/Currency.html":{},"classes/Document.html":{},"classes/DocumentGroup.html":{},"classes/State.html":{},"contributing.html":{}}}],["description",{"_index":7,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"controllers/AddressTypeController.html":{},"modules/AddressTypeModule.html":{},"injectables/AddressTypeService.html":{},"classes/AddressUpdateDto.html":{},"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/BankController.html":{},"classes/BankDto.html":{},"modules/BankModule.html":{},"injectables/BankService.html":{},"classes/BankUpdateDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"controllers/CityController.html":{},"classes/CityDto.html":{},"modules/CityModule.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ContactDto.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService-1.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"modules/CountryMasModule.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/Document.html":{},"controllers/DocumentController.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"controllers/DocumentGroupController.html":{},"classes/DocumentGroupDto.html":{},"modules/DocumentGroupModule.html":{},"injectables/DocumentGroupService.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/State.html":{},"controllers/StateController.html":{},"classes/StateDto.html":{},"modules/StateModule.html":{},"injectables/StateService.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["descriptive",{"_index":1646,"title":{},"body":{"classes/Country.html":{}}}],["designed",{"_index":2533,"title":{},"body":{"injectables/FilesService.html":{},"injectables/ResolvePromisesInterceptor.html":{}}}],["destination",{"_index":2343,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["destroyed",{"_index":2929,"title":{},"body":{"injectables/PrismaService.html":{}}}],["detail",{"_index":3378,"title":{},"body":{"contributing.html":{}}}],["detailed",{"_index":3604,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["details",{"_index":337,"title":{},"body":{"injectables/AddressTypeService.html":{},"controllers/AppController.html":{},"injectables/BankService.html":{},"classes/Country.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"classes/HttpErrorFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/State.html":{}}}],["determined",{"_index":2403,"title":{},"body":{"modules/FilesModule.html":{}}}],["development",{"_index":1266,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["dharmesh",{"_index":3757,"title":{},"body":{"index.html":{},"license.html":{}}}],["dial",{"_index":1596,"title":{},"body":{"classes/Country.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{}}}],["dial_code",{"_index":1604,"title":{},"body":{"classes/Country.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{},"classes/Query-2.html":{},"classes/Query-6.html":{}}}],["dialing",{"_index":1624,"title":{},"body":{"classes/Country.html":{},"classes/CreateCountryDto.html":{}}}],["different",{"_index":1020,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"modules/FilesModule.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"interfaces/QueryConfig.html":{},"classes/SortByDto.html":{},"miscellaneous/enumerations.html":{}}}],["digits",{"_index":1731,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{}}}],["direction",{"_index":994,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{}}}],["directionregex",{"_index":1014,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["directory",{"_index":2704,"title":{},"body":{"interfaces/IAppConfig.html":{}}}],["dirk",{"_index":3679,"title":{},"body":{"index.html":{}}}],["disable",{"_index":980,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{}}}],["disconnects",{"_index":2930,"title":{},"body":{"injectables/PrismaService.html":{}}}],["diskstorage",{"_index":2322,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["display",{"_index":2719,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["distribute",{"_index":3778,"title":{},"body":{"license.html":{}}}],["docker",{"_index":3632,"title":{},"body":{"index.html":{}}}],["dockfile",{"_index":3687,"title":{},"body":{"index.html":{}}}],["docs",{"_index":2109,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"index.html":{}}}],["document",{"_index":484,"title":{"classes/Document.html":{}},"body":{"modules/ApiModule.html":{},"classes/Document.html":{},"controllers/DocumentController.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"controllers/DocumentGroupController.html":{},"classes/DocumentGroupDto.html":{},"modules/DocumentGroupModule.html":{},"injectables/DocumentGroupService.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"classes/FileUploadDto.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"classes/UpdateDto-4.html":{},"coverage.html":{}}}],["document.installation",{"_index":3700,"title":{},"body":{"index.html":{}}}],["document_groups",{"_index":1913,"title":{},"body":{"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/Query-9.html":{}}}],["document_grp.controller",{"_index":1903,"title":{},"body":{"modules/DocumentGroupModule.html":{}}}],["document_grp.service",{"_index":1883,"title":{},"body":{"controllers/DocumentGroupController.html":{},"modules/DocumentGroupModule.html":{}}}],["documentation",{"_index":101,"title":{},"body":{"classes/AddressType.html":{},"controllers/AppController.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"classes/Country.html":{},"classes/CountryMas.html":{},"classes/Currency.html":{},"classes/Document.html":{},"classes/DocumentGroup.html":{},"classes/FileResponseDto-1.html":{},"classes/FileType.html":{},"controllers/FilesS3Controller.html":{},"classes/State.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{}}}],["documentcontroller",{"_index":1830,"title":{"controllers/DocumentController.html":{}},"body":{"controllers/DocumentController.html":{},"modules/DocumentModule.html":{},"coverage.html":{}}}],["documentdto",{"_index":1834,"title":{"classes/DocumentDto.html":{}},"body":{"controllers/DocumentController.html":{},"classes/DocumentDto.html":{},"injectables/DocumentService.html":{},"classes/UpdateDto-4.html":{},"coverage.html":{}}}],["documented",{"_index":108,"title":{},"body":{"classes/AddressType.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"classes/CountryMas.html":{},"classes/Currency.html":{},"classes/Document.html":{},"classes/DocumentGroup.html":{}}}],["documentgroup",{"_index":483,"title":{"classes/DocumentGroup.html":{}},"body":{"modules/ApiModule.html":{},"classes/DocumentGroup.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"classes/UpdateDto-5.html":{},"coverage.html":{}}}],["documentgroup_name",{"_index":1929,"title":{},"body":{"injectables/DocumentService.html":{}}}],["documentgroupcontroller",{"_index":1873,"title":{"controllers/DocumentGroupController.html":{}},"body":{"controllers/DocumentGroupController.html":{},"modules/DocumentGroupModule.html":{},"coverage.html":{}}}],["documentgroupdto",{"_index":1877,"title":{"classes/DocumentGroupDto.html":{}},"body":{"controllers/DocumentGroupController.html":{},"classes/DocumentGroupDto.html":{},"injectables/DocumentGroupService.html":{},"classes/UpdateDto-5.html":{},"coverage.html":{}}}],["documentgroupmodule",{"_index":440,"title":{"modules/DocumentGroupModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/DocumentGroupModule.html":{},"modules.html":{},"overview.html":{}}}],["documentgroupservice",{"_index":1876,"title":{"injectables/DocumentGroupService.html":{}},"body":{"controllers/DocumentGroupController.html":{},"modules/DocumentGroupModule.html":{},"injectables/DocumentGroupService.html":{},"coverage.html":{},"overview.html":{}}}],["documentmodule",{"_index":441,"title":{"modules/DocumentModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/DocumentModule.html":{},"modules.html":{},"overview.html":{}}}],["documents",{"_index":1832,"title":{},"body":{"controllers/DocumentController.html":{},"classes/DocumentGroup.html":{},"classes/DocumentGroupDto.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"controllers/FilesS3Controller.html":{},"classes/Query-8.html":{},"miscellaneous/functions.html":{}}}],["documents.controller",{"_index":1918,"title":{},"body":{"modules/DocumentModule.html":{}}}],["documents.service",{"_index":1843,"title":{},"body":{"controllers/DocumentController.html":{},"modules/DocumentModule.html":{}}}],["documents/:id",{"_index":1848,"title":{},"body":{"controllers/DocumentController.html":{}}}],["documentservice",{"_index":1833,"title":{"injectables/DocumentService.html":{}},"body":{"controllers/DocumentController.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"coverage.html":{},"overview.html":{}}}],["doe",{"_index":545,"title":{},"body":{"controllers/AppController.html":{}}}],["doesn't",{"_index":3333,"title":{},"body":{"classes/UtilsService.html":{}}}],["dollar",{"_index":1619,"title":{},"body":{"classes/Country.html":{}}}],["domain",{"_index":2262,"title":{},"body":{"classes/FileType.html":{},"interfaces/IAppConfig.html":{}}}],["domain/country",{"_index":1533,"title":{},"body":{"controllers/CountriesController.html":{}}}],["domain/file",{"_index":2228,"title":{},"body":{"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{}}}],["don't",{"_index":3625,"title":{},"body":{"index.html":{}}}],["dotenv",{"_index":608,"title":{},"body":{"modules/AppModule.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"index.html":{}}}],["dotenv.config",{"_index":1247,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["down",{"_index":1466,"title":{},"body":{"injectables/ContactService.html":{},"injectables/PrismaService.html":{},"index.html":{}}}],["download",{"_index":2300,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{}}}],["download(@param('path",{"_index":2347,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["download(path",{"_index":2302,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["downloaded",{"_index":2306,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["downloading",{"_index":2299,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{}}}],["downloads",{"_index":2305,"title":{},"body":{"controllers/FilesLocalController.html":{},"modules/FilesS3Module.html":{},"injectables/FilesS3PresignedService.html":{}}}],["driver",{"_index":1379,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"interfaces/IFileConfig.html":{}}}],["drivers",{"_index":3551,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["dto",{"_index":13,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressUpdateDto.html":{},"classes/BankDto.html":{},"injectables/BankService.html":{},"classes/BankUpdateDto.html":{},"classes/CityDto.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/Country.html":{},"classes/CountryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileUploadDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"interfaces/QueryConfig.html":{},"classes/SortByDto.html":{},"classes/State.html":{},"classes/StateDto.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"miscellaneous/functions.html":{}}}],["dto/address_type",{"_index":209,"title":{},"body":{"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{}}}],["dto/bank.dto",{"_index":717,"title":{},"body":{"controllers/BankController.html":{},"injectables/BankService.html":{}}}],["dto/cities.dto",{"_index":846,"title":{},"body":{"controllers/CityController.html":{},"injectables/CityService.html":{}}}],["dto/country",{"_index":1507,"title":{},"body":{"controllers/CountriesController.html":{}}}],["dto/country_mas.dto",{"_index":1582,"title":{},"body":{"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{}}}],["dto/create.dto",{"_index":210,"title":{},"body":{"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"controllers/ContactController.html":{},"injectables/ContactService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{}}}],["dto/currency",{"_index":1757,"title":{},"body":{"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{}}}],["dto/document_grp.dto",{"_index":1884,"title":{},"body":{"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{}}}],["dto/documents.dto",{"_index":1844,"title":{},"body":{"controllers/DocumentController.html":{},"injectables/DocumentService.html":{}}}],["dto/file",{"_index":2331,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{}}}],["dto/file.dto",{"_index":2477,"title":{},"body":{"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{}}}],["dto/query",{"_index":1535,"title":{},"body":{"controllers/CountriesController.html":{}}}],["dto/state.dto",{"_index":3242,"title":{},"body":{"controllers/StateController.html":{},"injectables/StateService.html":{}}}],["dto/update.dto",{"_index":212,"title":{},"body":{"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{}}}],["dtos",{"_index":1024,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["dummy.ts",{"_index":3405,"title":{},"body":{"coverage.html":{}}}],["duplicate",{"_index":1786,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["durable",{"_index":1428,"title":{},"body":{"modules/ContactModule.html":{}}}],["duration",{"_index":2190,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["duration_log_level",{"_index":2192,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["durationms",{"_index":581,"title":{},"body":{"controllers/AppController.html":{}}}],["during",{"_index":362,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"controllers/FilesLocalController.html":{},"injectables/StateService.html":{}}}],["dx",{"_index":2595,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["dynamic",{"_index":353,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"classes/DynamicQueryBuilder.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{}}}],["dynamically",{"_index":1972,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{}}}],["dynamicjoinconditions",{"_index":1161,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["dynamicquerybuilder",{"_index":1930,"title":{"classes/DynamicQueryBuilder.html":{}},"body":{"classes/DynamicQueryBuilder.html":{},"classes/Query-3.html":{},"interfaces/QueryOptions.html":{},"coverage.html":{}}}],["dynamicwhere",{"_index":1151,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["e",{"_index":2962,"title":{},"body":{"injectables/PrismaService.html":{}}}],["e.g",{"_index":53,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"classes/BankDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/Currency.html":{},"classes/Document.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"classes/DocumentGroupDto.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{},"injectables/SortBy.html":{},"index.html":{}}}],["e2e",{"_index":3705,"title":{},"body":{"index.html":{}}}],["e325f0d0f3ae",{"_index":2225,"title":{},"body":{"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileType.html":{}}}],["e325f0d0f3ae'})@allow",{"_index":2255,"title":{},"body":{"classes/FileType.html":{}}}],["e89b",{"_index":1626,"title":{},"body":{"classes/Country.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{}}}],["each",{"_index":1002,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/Country.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"interfaces/QueryConfig.html":{},"classes/QueryCountryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/State.html":{},"classes/UtilsService.html":{}}}],["easy",{"_index":3642,"title":{},"body":{"index.html":{}}}],["edge",{"_index":3745,"title":{},"body":{"index.html":{}}}],["editfilename",{"_index":2327,"title":{},"body":{"controllers/FilesLocalController.html":{},"coverage.html":{}}}],["efficient",{"_index":3617,"title":{},"body":{"index.html":{}}}],["email",{"_index":1405,"title":{},"body":{"classes/ContactDto.html":{}}}],["emailer.interfaces",{"_index":1216,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["emailer.interfaces.ts",{"_index":2713,"title":{},"body":{"interfaces/INodeEmailerConfig.html":{},"coverage.html":{}}}],["emergency",{"_index":593,"title":{},"body":{"controllers/AppController.html":{}}}],["emits",{"_index":3204,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["enable",{"_index":2028,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["encapsulate",{"_index":2230,"title":{},"body":{"classes/FileResponseDto-1.html":{}}}],["encoded",{"_index":2470,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["encoding",{"_index":2707,"title":{},"body":{"interfaces/IFileConfig.html":{}}}],["encryptionservice",{"_index":2653,"title":{},"body":{"modules/HelperModule.html":{}}}],["end",{"_index":2738,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"injectables/PaginationService.html":{}}}],["endindex",{"_index":2735,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{}}}],["endpage",{"_index":2732,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{}}}],["endpoint",{"_index":499,"title":{},"body":{"controllers/AppController.html":{},"controllers/CountriesController.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/HomeController.html":{},"index.html":{}}}],["endpoints",{"_index":131,"title":{},"body":{"controllers/AddressTypeController.html":{},"controllers/AppController.html":{},"controllers/BankController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"controllers/FilesS3PresignedController.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"controllers/StateController.html":{}}}],["ensure",{"_index":1006,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"interfaces/QueryConfig.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"contributing.html":{},"index.html":{}}}],["ensures",{"_index":25,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"classes/CountryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/StateDto.html":{}}}],["entire",{"_index":3831,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["entities",{"_index":1284,"title":{},"body":{"classes/ConfigService.html":{},"injectables/DocumentService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["entity",{"_index":98,"title":{},"body":{"classes/AddressType.html":{},"classes/AddressUpdateDto.html":{},"classes/BankUpdateDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"classes/Country.html":{},"classes/CountryMas.html":{},"classes/Currency.html":{},"classes/Document.html":{},"classes/DocumentGroup.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"classes/State.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"miscellaneous/functions.html":{}}}],["enum",{"_index":2098,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"miscellaneous/enumerations.html":{}}}],["enumerations",{"_index":3544,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":624,"title":{},"body":{"modules/AppModule.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"coverage.html":{}}}],["env.${env",{"_index":630,"title":{},"body":{"modules/AppModule.html":{}}}],["env.${nodeenv",{"_index":1249,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["env.development",{"_index":1252,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["env.staging",{"_index":1250,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["envfilepath",{"_index":629,"title":{},"body":{"modules/AppModule.html":{}}}],["environment",{"_index":602,"title":{},"body":{"modules/AppModule.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["environments",{"_index":3565,"title":{},"body":{"miscellaneous/functions.html":{}}}],["environmentvariablesvalidator",{"_index":2000,"title":{"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{}},"body":{"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"coverage.html":{}}}],["envname",{"_index":1258,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["envvalues.database_url",{"_index":2052,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["envvarappconfigvalidator",{"_index":1228,"title":{"classes/EnvVarAppConfigValidator.html":{}},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"coverage.html":{}}}],["envvarfileconfigvalidator",{"_index":1236,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["envvariablesclass",{"_index":3603,"title":{},"body":{"miscellaneous/functions.html":{}}}],["equal",{"_index":3586,"title":{},"body":{"miscellaneous/functions.html":{}}}],["erro",{"_index":671,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["error",{"_index":308,"title":{},"body":{"injectables/AddressTypeService.html":{},"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"injectables/ContactService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesS3PresignedService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/QueryFailedFilter.html":{},"injectables/SortBy.html":{},"injectables/StateService.html":{},"classes/UserNotFoundException.html":{},"miscellaneous/functions.html":{}}}],["error('hello",{"_index":588,"title":{},"body":{"controllers/AppController.html":{}}}],["error('syntax",{"_index":920,"title":{},"body":{"injectables/CityService.html":{}}}],["error.filter",{"_index":461,"title":{},"body":{"modules/ApiModule.html":{}}}],["error.filter.ts",{"_index":2678,"title":{},"body":{"classes/HttpErrorFilter.html":{},"coverage.html":{}}}],["error.filter.ts:50",{"_index":2682,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["errormessage",{"_index":3176,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["errormessages",{"_index":696,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["errorresponse",{"_index":422,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["errors",{"_index":646,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/HttpErrorFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/Query-1.html":{},"classes/QueryFailedFilter.html":{},"classes/UserNotFoundException.html":{},"miscellaneous/functions.html":{}}}],["errors.ts",{"_index":3443,"title":{},"body":{"coverage.html":{}}}],["esben",{"_index":3683,"title":{},"body":{"index.html":{}}}],["esbenp.prettier",{"_index":3681,"title":{},"body":{"index.html":{}}}],["escapes",{"_index":2967,"title":{},"body":{"classes/Query.html":{}}}],["escaping",{"_index":2907,"title":{},"body":{"injectables/PrismaService.html":{}}}],["escvalue",{"_index":2948,"title":{},"body":{"injectables/PrismaService.html":{}}}],["escvalue.replace(/'/g",{"_index":2950,"title":{},"body":{"injectables/PrismaService.html":{}}}],["eslint",{"_index":979,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{},"index.html":{}}}],["eslint/ban",{"_index":2618,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["eslint/explicit",{"_index":2620,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["eslint/no",{"_index":984,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{},"classes/UtilsService.html":{}}}],["eslint/prefer",{"_index":1270,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["etc",{"_index":1102,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/Country.html":{},"interfaces/QueryConfig.html":{}}}],["event",{"_index":3802,"title":{},"body":{"license.html":{}}}],["everyone",{"_index":3369,"title":{},"body":{"contributing.html":{}}}],["example",{"_index":47,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"controllers/AppController.html":{},"classes/BankDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"injectables/CityService.html":{},"classes/ContactDto.html":{},"controllers/CountriesController.html":{},"classes/Country.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/Document.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"classes/DocumentGroupDto.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"classes/HttpErrorFilter.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/SortByDto.html":{},"classes/State.html":{},"classes/StateDto.html":{},"classes/UserNotFoundException.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["exampleclass",{"_index":3594,"title":{},"body":{"miscellaneous/functions.html":{}}}],["exampledto",{"_index":3588,"title":{},"body":{"miscellaneous/functions.html":{}}}],["exceeds",{"_index":2509,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["exception",{"_index":382,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/FileNotImageException.html":{},"injectables/FilesS3Service.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"classes/UserNotFoundException.html":{},"miscellaneous/functions.html":{}}}],["exception.code",{"_index":2887,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["exception.constraint",{"_index":3178,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["exception.constraint.startswith('uq",{"_index":3179,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["exception.filter.ts",{"_index":2693,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:27",{"_index":2695,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts:30",{"_index":2881,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["exception.getresponse",{"_index":661,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["exception.getstatus",{"_index":421,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exception.message",{"_index":2685,"title":{},"body":{"classes/HttpErrorFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["exception.message.replace(/\\n/g",{"_index":2885,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["exception.query",{"_index":3181,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["exception.sqlmessage",{"_index":3180,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["exception.stack",{"_index":694,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{}}}],["exceptionfilter",{"_index":388,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["exceptions",{"_index":386,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["exceptions.filter.ts",{"_index":380,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["exceptions.filter.ts:47",{"_index":392,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exceptions.filter.ts:54",{"_index":396,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exceptions.filter.ts:63",{"_index":401,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exclude",{"_index":77,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"classes/ContactDto.html":{},"classes/CountryDto.html":{},"classes/CreateCountryDto.html":{},"classes/Currency.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/Query-10.html":{},"classes/Query-3.html":{},"classes/Query-5.html":{},"classes/StateDto.html":{}}}],["exclude({toplainonly",{"_index":54,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"classes/ContactDto.html":{},"classes/CountryDto.html":{},"classes/CreateCountryDto.html":{},"classes/Currency.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/StateDto.html":{}}}],["excluded",{"_index":61,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"classes/ContactDto.html":{},"classes/CountryDto.html":{},"classes/Currency.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/StateDto.html":{}}}],["execute",{"_index":358,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{}}}],["executerawquery",{"_index":2909,"title":{},"body":{"injectables/PrismaService.html":{}}}],["executerawquery(query",{"_index":2941,"title":{},"body":{"injectables/PrismaService.html":{}}}],["executerawquery(queryobj",{"_index":2914,"title":{},"body":{"injectables/PrismaService.html":{}}}],["executes",{"_index":2906,"title":{},"body":{"injectables/PrismaService.html":{}}}],["executetransaction",{"_index":2910,"title":{},"body":{"injectables/PrismaService.html":{}}}],["executetransaction(actions",{"_index":2919,"title":{},"body":{"injectables/PrismaService.html":{}}}],["executing",{"_index":2926,"title":{},"body":{"injectables/PrismaService.html":{}}}],["execution",{"_index":405,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CityService.html":{},"injectables/ResolvePromisesInterceptor.html":{}}}],["executioncontext",{"_index":3198,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["exeption",{"_index":415,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exist",{"_index":1788,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["existing",{"_index":224,"title":{},"body":{"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"classes/AddressUpdateDto.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"classes/BankUpdateDto.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/Query-10.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{}}}],["exists",{"_index":307,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["exits",{"_index":316,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/StateService.html":{}}}],["exonerate",{"_index":3521,"title":{},"body":{"dependencies.html":{}}}],["expected",{"_index":2416,"title":{},"body":{"controllers/FilesS3Controller.html":{}}}],["expiration",{"_index":2462,"title":{},"body":{"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{}}}],["expirationtime",{"_index":1337,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IJWTConfig.html":{}}}],["expires",{"_index":553,"title":{},"body":{"controllers/AppController.html":{}}}],["expiresin",{"_index":2283,"title":{},"body":{"classes/FileType.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{}}}],["expiresinseconds",{"_index":1335,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IJWTConfig.html":{}}}],["explanation",{"_index":3737,"title":{},"body":{"index.html":{}}}],["explode",{"_index":2628,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["export",{"_index":85,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"controllers/AddressTypeController.html":{},"modules/AddressTypeModule.html":{},"injectables/AddressTypeService.html":{},"classes/AddressUpdateDto.html":{},"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/BankController.html":{},"classes/BankDto.html":{},"modules/BankModule.html":{},"injectables/BankService.html":{},"classes/BankUpdateDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"controllers/CityController.html":{},"classes/CityDto.html":{},"modules/CityModule.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ConfigService.html":{},"controllers/ContactController.html":{},"classes/ContactDto.html":{},"modules/ContactModule.html":{},"injectables/ContactService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService-1.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"modules/CountryMasModule.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/Document.html":{},"controllers/DocumentController.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"controllers/DocumentGroupController.html":{},"classes/DocumentGroupDto.html":{},"modules/DocumentGroupModule.html":{},"injectables/DocumentGroupService.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/State.html":{},"controllers/StateController.html":{},"classes/StateDto.html":{},"modules/StateModule.html":{},"injectables/StateService.html":{},"classes/UpdateDto.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{}}}],["exported",{"_index":2362,"title":{},"body":{"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{}}}],["exports",{"_index":248,"title":{},"body":{"modules/AddressTypeModule.html":{},"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/BankModule.html":{},"modules/CityModule.html":{},"modules/ContactModule.html":{},"modules/CountriesModule.html":{},"modules/CountryMasModule.html":{},"modules/CurrenciesModule.html":{},"modules/DocumentGroupModule.html":{},"modules/DocumentModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{},"modules/StateModule.html":{},"overview.html":{}}}],["exposes",{"_index":2432,"title":{},"body":{"modules/FilesS3Module.html":{}}}],["exposing",{"_index":137,"title":{},"body":{"controllers/AddressTypeController.html":{},"controllers/BankController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"controllers/StateController.html":{}}}],["express",{"_index":412,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"dependencies.html":{},"license.html":{}}}],["express.multer.file",{"_index":2309,"title":{},"body":{"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{}}}],["express.multers3.file",{"_index":2419,"title":{},"body":{"controllers/FilesS3Controller.html":{},"injectables/FilesS3Service.html":{}}}],["expression",{"_index":1010,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["extending",{"_index":2212,"title":{},"body":{"classes/FileNotImageException.html":{}}}],["extends",{"_index":367,"title":{},"body":{"classes/AddressUpdateDto.html":{},"classes/BankUpdateDto.html":{},"classes/FileNotImageException.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/UpdateDto.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UserNotFoundException.html":{}}}],["extensions",{"_index":3677,"title":{},"body":{"index.html":{}}}],["f",{"_index":3726,"title":{},"body":{"index.html":{}}}],["f2d90547",{"_index":812,"title":{},"body":{"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"classes/State.html":{},"classes/StateDto.html":{}}}],["fail",{"_index":3175,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["failed",{"_index":1459,"title":{},"body":{"injectables/ContactService.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["failed.filter.ts",{"_index":3166,"title":{},"body":{"classes/QueryFailedFilter.html":{},"coverage.html":{}}}],["failed.filter.ts:26",{"_index":3168,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["failed.filter.ts:34",{"_index":3169,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["failed.filter.ts:45",{"_index":3170,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["fails",{"_index":536,"title":{},"body":{"controllers/AppController.html":{},"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{},"miscellaneous/functions.html":{}}}],["failure",{"_index":3171,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["failures",{"_index":3167,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["false",{"_index":742,"title":{},"body":{"classes/BankDto.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"modules/ContactModule.html":{},"controllers/CountriesController.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{}}}],["false})@isoptional",{"_index":1997,"title":{},"body":{"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{}}}],["fatal",{"_index":591,"title":{},"body":{"controllers/AppController.html":{}}}],["feat",{"_index":3731,"title":{},"body":{"index.html":{}}}],["feat(api",{"_index":3743,"title":{},"body":{"index.html":{}}}],["feature",{"_index":448,"title":{},"body":{"modules/ApiModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"contributing.html":{}}}],["features",{"_index":3356,"title":{},"body":{"changelog.html":{},"contributing.html":{},"index.html":{}}}],["fetch",{"_index":669,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"injectables/PaginationService.html":{}}}],["field",{"_index":993,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PrismaService.html":{},"interfaces/QueryConfig.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{}}}],["field\":\"name\",\"direction\":\"asc",{"_index":2585,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["field\":\"name\",\"direction\":\"asc\"},{\"field\":\"age\",\"direction\":\"desc",{"_index":1561,"title":{},"body":{"controllers/CountriesController.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["field\":\"name\",\"direction\":\"asc\"}]'})@isoptional()@transform(undefined)@validatenested({each",{"_index":2807,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["field\":\"name\",\"operator\":\"=\",\"value\":\"in",{"_index":2581,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["field\":\"name\",\"operator\":\"=\",\"value\":\"in\"}]'})@isoptional()@transform(undefined)@validatenested({each",{"_index":2797,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["field\":\"name\",\"operator\":\"like\",\"value\":\"john\"},{\"field\":\"age\",\"operator\":\">\",\"value\":\"30",{"_index":1559,"title":{},"body":{"controllers/CountriesController.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["field1",{"_index":1124,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["field2",{"_index":1125,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["field3",{"_index":1127,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["field4",{"_index":1128,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["fieldconfigs",{"_index":351,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{},"classes/UtilsService.html":{}}}],["fieldconfigs[field",{"_index":3319,"title":{},"body":{"classes/UtilsService.html":{}}}],["fieldname",{"_index":2625,"title":{},"body":{"classes/FilterQueryDto.html":{},"interfaces/IFileConfig.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["fieldname}[${index",{"_index":2631,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["fieldname}[${index}].field",{"_index":2632,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["fieldname}[${index}].operator",{"_index":2633,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["fieldname}[${index}].value",{"_index":2634,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["fieldregex",{"_index":1012,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["fields",{"_index":343,"title":{},"body":{"injectables/AddressTypeService.html":{},"classes/AddressUpdateDto.html":{},"injectables/BankService.html":{},"classes/BankUpdateDto.html":{},"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/DynamicQueryBuilder.html":{},"interfaces/IPaginationFieldConfig.html":{},"injectables/PrismaService.html":{},"classes/Query-3.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UtilsService.html":{}}}],["fields.includes(key",{"_index":2947,"title":{},"body":{"injectables/PrismaService.html":{}}}],["fields.join",{"_index":1982,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["fil",{"_index":659,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"controllers/AddressTypeController.html":{},"modules/AddressTypeModule.html":{},"injectables/AddressTypeService.html":{},"classes/AddressUpdateDto.html":{},"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/BankController.html":{},"classes/BankDto.html":{},"modules/BankModule.html":{},"injectables/BankService.html":{},"classes/BankUpdateDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"controllers/CityController.html":{},"classes/CityDto.html":{},"modules/CityModule.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ConfigService.html":{},"controllers/ContactController.html":{},"classes/ContactDto.html":{},"modules/ContactModule.html":{},"injectables/ContactService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService-1.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"modules/CountryMasModule.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/Document.html":{},"controllers/DocumentController.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"controllers/DocumentGroupController.html":{},"classes/DocumentGroupDto.html":{},"modules/DocumentGroupModule.html":{},"injectables/DocumentGroupService.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/State.html":{},"controllers/StateController.html":{},"classes/StateDto.html":{},"modules/StateModule.html":{},"injectables/StateService.html":{},"classes/UpdateDto.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["file's",{"_index":2231,"title":{},"body":{"classes/FileResponseDto-1.html":{},"classes/FileUploadDto.html":{},"injectables/FilesS3Service.html":{}}}],["file.filename.match(/\\.(jpg|jpeg|png|gif)$/i",{"_index":2510,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["file.filesize",{"_index":2512,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["file.interfaces",{"_index":1225,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["file.interfaces.ts",{"_index":2784,"title":{},"body":{"interfaces/IUploadFileConfig.html":{},"coverage.html":{}}}],["file.jpg",{"_index":2227,"title":{},"body":{"classes/FileResponseDto.html":{},"injectables/FilesLocalService.html":{}}}],["file.jpg&#39",{"_index":2374,"title":{},"body":{"injectables/FilesLocalService.html":{}}}],["file.key",{"_index":2530,"title":{},"body":{"injectables/FilesS3Service.html":{}}}],["file_driver",{"_index":1238,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["file_upload_destination",{"_index":1371,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IUploadFileConfig.html":{}}}],["fileconfig",{"_index":618,"title":{},"body":{"modules/AppModule.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"modules/FilesModule.html":{},"miscellaneous/typealiases.html":{}}}],["fileconfig).accesskeyid",{"_index":2278,"title":{},"body":{"classes/FileType.html":{}}}],["fileconfig).awsdefaults3bucket",{"_index":2281,"title":{},"body":{"classes/FileType.html":{}}}],["fileconfig).awss3region",{"_index":2276,"title":{},"body":{"classes/FileType.html":{}}}],["fileconfig).driver",{"_index":2272,"title":{},"body":{"classes/FileType.html":{},"modules/FilesModule.html":{}}}],["fileconfig).secretaccesskey",{"_index":2279,"title":{},"body":{"classes/FileType.html":{}}}],["filedriver",{"_index":1204,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"interfaces/IFileConfig.html":{},"miscellaneous/enumerations.html":{}}}],["filedriver.local",{"_index":2143,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"modules/FilesModule.html":{}}}],["filedriver.s3",{"_index":1240,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"modules/FilesModule.html":{}}}],["filedriver.s3].includes",{"_index":2275,"title":{},"body":{"classes/FileType.html":{}}}],["filedriver.s3_presigned",{"_index":2274,"title":{},"body":{"classes/FileType.html":{}}}],["filedriver.s3_presigned].includes(envvalues.file_driver",{"_index":1241,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["filefilter",{"_index":2344,"title":{},"body":{"controllers/FilesLocalController.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["fileinterceptor",{"_index":2317,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["fileinterceptor('file",{"_index":2342,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["filename",{"_index":2288,"title":{},"body":{"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesS3PresignedService.html":{},"coverage.html":{}}}],["filenotimageexception",{"_index":2201,"title":{"classes/FileNotImageException.html":{}},"body":{"classes/FileNotImageException.html":{},"coverage.html":{}}}],["filenotimageexception('custom",{"_index":2207,"title":{},"body":{"classes/FileNotImageException.html":{}}}],["fileoverview",{"_index":83,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"controllers/AddressTypeController.html":{},"modules/AddressTypeModule.html":{},"injectables/AddressTypeService.html":{},"classes/AddressUpdateDto.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/BankController.html":{},"classes/BankDto.html":{},"modules/BankModule.html":{},"injectables/BankService.html":{},"classes/BankUpdateDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"modules/CityModule.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService-1.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"modules/CountryMasModule.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/Document.html":{},"controllers/DocumentController.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"controllers/DocumentGroupController.html":{},"classes/DocumentGroupDto.html":{},"modules/DocumentGroupModule.html":{},"injectables/DocumentGroupService.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"classes/FileType.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/Query-10.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"classes/State.html":{},"controllers/StateController.html":{},"classes/StateDto.html":{},"modules/StateModule.html":{},"injectables/StateService.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{}}}],["fileresponsedto",{"_index":2215,"title":{"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{}},"body":{"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"coverage.html":{}}}],["fileresponsedto})@post('upload')@apiconsumes('multipart/form",{"_index":2311,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["fileresponsedto})@post('v1/upload",{"_index":2466,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["fileresponsedto})@post('v1/upload/s3')@apiconsumes('multipart/form",{"_index":2420,"title":{},"body":{"controllers/FilesS3Controller.html":{}}}],["files",{"_index":2287,"title":{},"body":{"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"license.html":{}}}],["files.controller",{"_index":2356,"title":{},"body":{"modules/FilesLocalModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["files.service",{"_index":2333,"title":{},"body":{"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{}}}],["files/example.jpg",{"_index":2244,"title":{},"body":{"classes/FileResponseDto-2.html":{}}}],["files/files.module",{"_index":464,"title":{},"body":{"modules/ApiModule.html":{}}}],["files/v1/download/{key}?expiresin=3600",{"_index":2460,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["files/v1/upload",{"_index":2468,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["filesize",{"_index":2289,"title":{},"body":{"classes/FileUploadDto.html":{},"modules/FilesS3Module.html":{},"injectables/FilesS3PresignedService.html":{}}}],["fileslocalcontroller",{"_index":2297,"title":{"controllers/FilesLocalController.html":{}},"body":{"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"coverage.html":{}}}],["fileslocalmodule",{"_index":2349,"title":{"modules/FilesLocalModule.html":{}},"body":{"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules.html":{},"overview.html":{}}}],["fileslocalservice",{"_index":2332,"title":{"injectables/FilesLocalService.html":{}},"body":{"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"coverage.html":{},"overview.html":{}}}],["filesmodule",{"_index":442,"title":{"modules/FilesModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/FilesModule.html":{},"modules.html":{},"overview.html":{}}}],["filesroot",{"_index":2326,"title":{},"body":{"controllers/FilesLocalController.html":{},"coverage.html":{}}}],["filess3controller",{"_index":2407,"title":{"controllers/FilesS3Controller.html":{}},"body":{"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"coverage.html":{}}}],["filess3module",{"_index":2387,"title":{"modules/FilesS3Module.html":{}},"body":{"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules.html":{},"overview.html":{}}}],["filess3presignedcontroller",{"_index":2452,"title":{"controllers/FilesS3PresignedController.html":{}},"body":{"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"coverage.html":{}}}],["filess3presignedmodule",{"_index":2388,"title":{"modules/FilesS3PresignedModule.html":{}},"body":{"modules/FilesModule.html":{},"modules/FilesS3PresignedModule.html":{},"modules.html":{},"overview.html":{}}}],["filess3presignedservice",{"_index":2478,"title":{"injectables/FilesS3PresignedService.html":{}},"body":{"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"coverage.html":{},"overview.html":{}}}],["filess3service",{"_index":2422,"title":{"injectables/FilesS3Service.html":{}},"body":{"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"injectables/FilesS3Service.html":{},"coverage.html":{},"overview.html":{}}}],["filesservice",{"_index":2335,"title":{"injectables/FilesService.html":{}},"body":{"controllers/FilesLocalController.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesService.html":{},"coverage.html":{},"overview.html":{}}}],["filetype",{"_index":2219,"title":{"classes/FileType.html":{}},"body":{"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"coverage.html":{}}}],["fileuploaddto",{"_index":2285,"title":{"classes/FileUploadDto.html":{}},"body":{"classes/FileUploadDto.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"coverage.html":{}}}],["filter",{"_index":383,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/CountriesController.html":{},"classes/FilterQueryDto.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PaginationQueryDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{}}}],["filter((field",{"_index":1139,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["filter.field",{"_index":2859,"title":{},"body":{"injectables/PaginationService.html":{}}}],["filter.field.tolowercase",{"_index":3318,"title":{},"body":{"classes/UtilsService.html":{}}}],["filter.operator",{"_index":2860,"title":{},"body":{"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["filter.operator.touppercase",{"_index":2855,"title":{},"body":{"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["filter.value",{"_index":2856,"title":{},"body":{"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["filter.value.split(',').map((val",{"_index":3326,"title":{},"body":{"classes/UtilsService.html":{}}}],["filterconditions",{"_index":2853,"title":{},"body":{"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["filtercountrydto",{"_index":2537,"title":{"classes/FilterCountryDto.html":{}},"body":{"classes/FilterCountryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortCountryDto.html":{},"coverage.html":{}}}],["filterdto",{"_index":2623,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["filtering",{"_index":176,"title":{},"body":{"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"modules/FilesS3Module.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{},"classes/UtilsService.html":{}}}],["filteroptions",{"_index":1546,"title":{},"body":{"controllers/CountriesController.html":{}}}],["filterquery",{"_index":1798,"title":{},"body":{"injectables/CurrenciesService.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["filterquerydto",{"_index":1555,"title":{"classes/FilterQueryDto.html":{}},"body":{"controllers/CountriesController.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"coverage.html":{}}}],["filters",{"_index":645,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"controllers/CountriesController.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UtilsService.html":{}}}],["filters.length",{"_index":2852,"title":{},"body":{"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["filters[name]=something",{"_index":2616,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["filtervalues",{"_index":3314,"title":{},"body":{"classes/UtilsService.html":{}}}],["filtervalues.push(filter.value",{"_index":3329,"title":{},"body":{"classes/UtilsService.html":{}}}],["finalcountquery",{"_index":2868,"title":{},"body":{"injectables/PaginationService.html":{}}}],["find",{"_index":312,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{},"injectables/StateService.html":{},"contributing.html":{}}}],["findall",{"_index":147,"title":{},"body":{"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{}}}],["findall(@query",{"_index":230,"title":{},"body":{"controllers/AddressTypeController.html":{},"controllers/BankController.html":{},"controllers/CityController.html":{},"controllers/CountriesController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/StateController.html":{}}}],["findall(paginationquery",{"_index":289,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["findall(query",{"_index":170,"title":{},"body":{"controllers/AddressTypeController.html":{},"controllers/BankController.html":{},"controllers/CityController.html":{},"controllers/CountriesController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"controllers/StateController.html":{}}}],["findby(key",{"_index":3092,"title":{},"body":{"classes/Query-3.html":{}}}],["findbycode",{"_index":3067,"title":{},"body":{"classes/Query-3.html":{}}}],["findbycode(id",{"_index":3071,"title":{},"body":{"classes/Query-3.html":{}}}],["findbyid",{"_index":1028,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{}}}],["findbyid(id",{"_index":3022,"title":{},"body":{"classes/Query-2.html":{}}}],["findbyname",{"_index":2998,"title":{},"body":{"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{}}}],["finde",{"_index":3028,"title":{},"body":{"classes/Query-2.html":{}}}],["finding",{"_index":1022,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["findone",{"_index":148,"title":{},"body":{"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{}}}],["findone(@param('id",{"_index":1855,"title":{},"body":{"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{}}}],["findone(@param('id_address_type",{"_index":235,"title":{},"body":{"controllers/AddressTypeController.html":{}}}],["findone(@param('id_bank",{"_index":729,"title":{},"body":{"controllers/BankController.html":{}}}],["findone(@param('id_city",{"_index":858,"title":{},"body":{"controllers/CityController.html":{}}}],["findone(@param('id_state",{"_index":3254,"title":{},"body":{"controllers/StateController.html":{}}}],["findone(id",{"_index":180,"title":{},"body":{"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{}}}],["finds",{"_index":1049,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["findwithdynamicjoin",{"_index":1029,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["findwithdynamicjoin(joins",{"_index":1047,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{}}}],["findwithdynamicjoin1",{"_index":1142,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["findwithdynamicjoin1(joins",{"_index":1172,"title":{},"body":{"classes/CommonQuery5.html":{}}}],["findwithdynamicjoin2",{"_index":1152,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["findwithdynamicjoin2(joins",{"_index":1175,"title":{},"body":{"classes/CommonQuery5.html":{}}}],["findwithdynamicjoin3",{"_index":1157,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["findwithdynamicjoin3(joins",{"_index":1177,"title":{},"body":{"classes/CommonQuery5.html":{}}}],["first",{"_index":2739,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"index.html":{}}}],["fitness",{"_index":3798,"title":{},"body":{"license.html":{}}}],["fix",{"_index":3732,"title":{},"body":{"index.html":{}}}],["fix(core",{"_index":3744,"title":{},"body":{"index.html":{}}}],["fixed",{"_index":3351,"title":{},"body":{"changelog.html":{}}}],["fixes",{"_index":3350,"title":{},"body":{"changelog.html":{}}}],["flexible",{"_index":3616,"title":{},"body":{"index.html":{}}}],["follow",{"_index":3367,"title":{},"body":{"contributing.html":{}}}],["following",{"_index":3665,"title":{},"body":{"index.html":{},"license.html":{}}}],["foo",{"_index":565,"title":{},"body":{"controllers/AppController.html":{}}}],["footer",{"_index":3738,"title":{},"body":{"index.html":{}}}],["footer(s",{"_index":3730,"title":{},"body":{"index.html":{}}}],["foreign_key=id",{"_index":1166,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["foreignkey",{"_index":1132,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["fork",{"_index":3379,"title":{},"body":{"contributing.html":{}}}],["format",{"_index":995,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"classes/Query-10.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"injectables/SortBy.html":{},"index.html":{}}}],["formats",{"_index":29,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/CountryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/Query-10.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryFailedFilter.html":{},"classes/StateDto.html":{}}}],["formatted",{"_index":649,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/Query-10.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{}}}],["formattedarray",{"_index":1115,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/UtilsService.html":{}}}],["formatter",{"_index":3657,"title":{},"body":{"index.html":{}}}],["formatting",{"_index":3393,"title":{},"body":{"contributing.html":{}}}],["formatvalue",{"_index":1030,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"classes/UtilsService.html":{}}}],["formatvalue(value",{"_index":1058,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/UtilsService.html":{}}}],["found",{"_index":190,"title":{},"body":{"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"controllers/FilesLocalController.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{},"classes/UserNotFoundException.html":{}}}],["found.exception.ts",{"_index":3295,"title":{},"body":{"classes/UserNotFoundException.html":{},"coverage.html":{}}}],["found.exception.ts:20",{"_index":3299,"title":{},"body":{"classes/UserNotFoundException.html":{}}}],["foxundermoon",{"_index":3689,"title":{},"body":{"index.html":{}}}],["foxundermoon.shell",{"_index":3688,"title":{},"body":{"index.html":{}}}],["framework",{"_index":2532,"title":{},"body":{"injectables/FilesService.html":{},"index.html":{}}}],["free",{"_index":3765,"title":{},"body":{"license.html":{}}}],["from_email",{"_index":1342,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/ISendGridConfig.html":{}}}],["fromquery",{"_index":349,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/PaginationService.html":{},"injectables/StateService.html":{},"classes/UtilsService.html":{}}}],["frontend",{"_index":2701,"title":{},"body":{"interfaces/IAppConfig.html":{}}}],["frontend_domain",{"_index":1233,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{}}}],["frontenddomain",{"_index":1292,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"interfaces/IAppConfig.html":{}}}],["fsroot",{"_index":3482,"title":{},"body":{"coverage.html":{}}}],["fully",{"_index":3190,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["function",{"_index":919,"title":{},"body":{"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"interfaces/QueryConfig.html":{},"injectables/ResolvePromisesInterceptor.html":{},"classes/SortByDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["function(app",{"_index":3595,"title":{},"body":{"miscellaneous/functions.html":{}}}],["functionalities",{"_index":456,"title":{},"body":{"modules/ApiModule.html":{},"modules/CurrenciesModule.html":{},"injectables/FilesService.html":{},"modules/HomeModule.html":{}}}],["functionality",{"_index":2365,"title":{},"body":{"injectables/FilesLocalService.html":{},"modules/FilesS3Module.html":{},"injectables/FilesS3Service.html":{},"injectables/PaginationService.html":{}}}],["functions",{"_index":1573,"title":{"miscellaneous/functions.html":{}},"body":{"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"miscellaneous/functions.html":{}}}],["furnished",{"_index":3785,"title":{},"body":{"license.html":{}}}],["generate",{"_index":924,"title":{},"body":{"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"injectables/PrismaService.html":{},"classes/Query-10.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{}}}],["generated",{"_index":927,"title":{},"body":{"injectables/CityService.html":{},"classes/FileType.html":{}}}],["generatepresignedurl",{"_index":2495,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["generatepresignedurl(key",{"_index":2501,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["generates",{"_index":945,"title":{},"body":{"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{}}}],["generating",{"_index":784,"title":{},"body":{"injectables/BankService.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{}}}],["generation",{"_index":1571,"title":{},"body":{"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"controllers/FilesS3PresignedController.html":{}}}],["generator",{"_index":1042,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["generator.util",{"_index":2435,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["generic",{"_index":1019,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["get('/health",{"_index":537,"title":{},"body":{"controllers/AppController.html":{}}}],["get('/health')@healthcheck",{"_index":497,"title":{},"body":{"controllers/AppController.html":{}}}],["get('/log",{"_index":511,"title":{},"body":{"controllers/AppController.html":{}}}],["get(':id",{"_index":1854,"title":{},"body":{"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{}}}],["get(':id')@httpcode(httpstatus.ok)@apiparam({name",{"_index":1839,"title":{},"body":{"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{}}}],["get(':id_address_type",{"_index":234,"title":{},"body":{"controllers/AddressTypeController.html":{}}}],["get(':id_address_type')@httpcode(httpstatus.ok)@apiparam({name",{"_index":181,"title":{},"body":{"controllers/AddressTypeController.html":{}}}],["get(':id_bank",{"_index":728,"title":{},"body":{"controllers/BankController.html":{}}}],["get(':id_bank')@httpcode(httpstatus.ok)@apiparam({name",{"_index":710,"title":{},"body":{"controllers/BankController.html":{}}}],["get(':id_city",{"_index":857,"title":{},"body":{"controllers/CityController.html":{}}}],["get(':id_city')@httpcode(httpstatus.ok)@apiparam({name",{"_index":840,"title":{},"body":{"controllers/CityController.html":{}}}],["get(':id_state",{"_index":3253,"title":{},"body":{"controllers/StateController.html":{}}}],["get(':id_state')@httpcode(httpstatus.ok)@apiparam({name",{"_index":3238,"title":{},"body":{"controllers/StateController.html":{}}}],["get('findall",{"_index":1511,"title":{},"body":{"controllers/CountriesController.html":{}}}],["get('findall')@httpcode(httpstatus.ok)@apiokresponse({type",{"_index":1498,"title":{},"body":{"controllers/CountriesController.html":{}}}],["get('local/download/:path",{"_index":2303,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["get('v1/countries",{"_index":1537,"title":{},"body":{"controllers/CountriesController.html":{}}}],["get('v1/country",{"_index":1527,"title":{},"body":{"controllers/CountriesController.html":{}}}],["get('v1/download/:key",{"_index":2458,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["get()@httpcode(httpstatus.ok)@apiokresponse({type",{"_index":172,"title":{},"body":{"controllers/AddressTypeController.html":{},"controllers/BankController.html":{},"controllers/CityController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"controllers/StateController.html":{}}}],["get(`${modules",{"_index":1665,"title":{},"body":{"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{}}}],["get(key",{"_index":1188,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["get(undefined)@httpcode(httpstatus.ok)@apiokresponse({type",{"_index":1656,"title":{},"body":{"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{}}}],["get_all",{"_index":1513,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{}}}],["getboolean",{"_index":1182,"title":{},"body":{"classes/ConfigService.html":{}}}],["getboolean(key",{"_index":1190,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["getbooleanenvvar",{"_index":2176,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{},"coverage.html":{}}}],["getbooleanenvvar('logger_console_print",{"_index":2195,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["getbooleanenvvar('logger_database_storage",{"_index":2187,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["getbooleanenvvar('logger_duration",{"_index":2191,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["getbooleanenvvar('logger_log_in_file",{"_index":2197,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["getdownloadurl",{"_index":2456,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["getdownloadurl(@param('key",{"_index":2481,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["getdownloadurl(key",{"_index":2457,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["gethealth",{"_index":495,"title":{},"body":{"controllers/AppController.html":{}}}],["gethello",{"_index":496,"title":{},"body":{"controllers/AppController.html":{}}}],["getnodeenv",{"_index":1194,"title":{},"body":{"classes/ConfigService.html":{}}}],["getnumber",{"_index":1183,"title":{},"body":{"classes/ConfigService.html":{}}}],["getnumber(key",{"_index":1192,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["getobjectcommand",{"_index":2265,"title":{},"body":{"classes/FileType.html":{},"injectables/FilesS3PresignedService.html":{}}}],["getprismaconfig",{"_index":1196,"title":{},"body":{"classes/ConfigService.html":{}}}],["getrecordswithjoins(id",{"_index":938,"title":{},"body":{"injectables/CityService.html":{}}}],["getschemapath",{"_index":2614,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["getschemapath(filterdto",{"_index":2630,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["getsignedurl",{"_index":2268,"title":{},"body":{"classes/FileType.html":{},"injectables/FilesS3PresignedService.html":{}}}],["getsignedurl(s3",{"_index":2282,"title":{},"body":{"classes/FileType.html":{}}}],["getsignedurl(this.s3",{"_index":2520,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["getting",{"_index":3342,"title":{"changelog.html":{},"contributing.html":{},"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["git",{"_index":3382,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["github",{"_index":3374,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["given",{"_index":972,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{},"miscellaneous/typealiases.html":{}}}],["global",{"_index":381,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"modules/HelperModule.html":{},"classes/HttpErrorFilter.html":{},"miscellaneous/functions.html":{}}}],["granted",{"_index":3764,"title":{},"body":{"license.html":{}}}],["great",{"_index":3610,"title":{},"body":{"index.html":{}}}],["greater",{"_index":3585,"title":{},"body":{"miscellaneous/functions.html":{}}}],["group",{"_index":1818,"title":{},"body":{"classes/Document.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"controllers/DocumentGroupController.html":{},"classes/DocumentGroupDto.html":{},"modules/DocumentGroupModule.html":{},"injectables/DocumentGroupService.html":{},"classes/Query-9.html":{}}}],["grouped",{"_index":2409,"title":{},"body":{"controllers/FilesS3Controller.html":{}}}],["groups",{"_index":1875,"title":{},"body":{"controllers/DocumentGroupController.html":{},"modules/DocumentGroupModule.html":{},"injectables/DocumentGroupService.html":{}}}],["groups/:id",{"_index":1888,"title":{},"body":{"controllers/DocumentGroupController.html":{}}}],["grow",{"_index":3749,"title":{},"body":{"index.html":{}}}],["gt",{"_index":3577,"title":{},"body":{"miscellaneous/functions.html":{}}}],["guidelines",{"_index":3361,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["gujarat",{"_index":3226,"title":{},"body":{"classes/State.html":{},"classes/StateDto.html":{}}}],["handaling",{"_index":268,"title":{},"body":{"injectables/AddressTypeService.html":{}}}],["handle",{"_index":385,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"modules/FilesLocalModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/HomeController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"interfaces/QueryConfig.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResolvePromisesInterceptor.html":{},"index.html":{}}}],["handled",{"_index":2774,"title":{},"body":{"interfaces/IPaginationFieldConfig.html":{}}}],["handler",{"_index":3202,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["handles",{"_index":126,"title":{},"body":{"controllers/AddressTypeController.html":{},"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/BankController.html":{},"controllers/CountriesController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/QueryFailedFilter.html":{},"controllers/StateController.html":{}}}],["handling",{"_index":258,"title":{},"body":{"modules/AddressTypeModule.html":{},"controllers/AppController.html":{},"modules/BankModule.html":{},"injectables/BankService.html":{},"modules/CityModule.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService-1.html":{},"modules/CountryMasModule.html":{},"injectables/CurrenciesService.html":{},"modules/DocumentGroupModule.html":{},"injectables/DocumentGroupService.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"classes/FileNotImageException.html":{},"classes/FileType.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"modules/StateModule.html":{},"injectables/StateService.html":{},"miscellaneous/functions.html":{}}}],["hard",{"_index":1958,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["has_next_page",{"_index":2571,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/SortByDto.html":{}}}],["header",{"_index":688,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{}}}],["headers",{"_index":3641,"title":{},"body":{"index.html":{}}}],["health",{"_index":489,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/PrismaService.html":{}}}],["healthcheck",{"_index":518,"title":{},"body":{"controllers/AppController.html":{}}}],["healthcheckservice",{"_index":519,"title":{},"body":{"controllers/AppController.html":{}}}],["healthindicatorresult",{"_index":2934,"title":{},"body":{"injectables/PrismaService.html":{}}}],["helmet",{"_index":3525,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["helper",{"_index":1588,"title":{},"body":{"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{}}}],["helpermodule",{"_index":597,"title":{"modules/HelperModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules.html":{},"overview.html":{}}}],["helps",{"_index":2722,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["here",{"_index":668,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"modules/FilesModule.html":{},"index.html":{}}}],["hereby",{"_index":3763,"title":{},"body":{"license.html":{}}}],["hi",{"_index":2863,"title":{},"body":{"injectables/PaginationService.html":{}}}],["holders",{"_index":3804,"title":{},"body":{"license.html":{}}}],["home",{"_index":479,"title":{},"body":{"modules/ApiModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{}}}],["home.controller",{"_index":2670,"title":{},"body":{"modules/HomeModule.html":{}}}],["home.service",{"_index":2662,"title":{},"body":{"controllers/HomeController.html":{},"modules/HomeModule.html":{}}}],["home/home.module",{"_index":465,"title":{},"body":{"modules/ApiModule.html":{}}}],["homecontroller",{"_index":2657,"title":{"controllers/HomeController.html":{}},"body":{"controllers/HomeController.html":{},"modules/HomeModule.html":{},"coverage.html":{}}}],["homemodule",{"_index":443,"title":{"modules/HomeModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/HomeModule.html":{},"modules.html":{},"overview.html":{}}}],["homeservice",{"_index":2659,"title":{"injectables/HomeService.html":{}},"body":{"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"coverage.html":{},"overview.html":{}}}],["host",{"_index":399,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/ConfigService.html":{},"modules/ContactModule.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["host.switchtohttp",{"_index":417,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["http",{"_index":127,"title":{},"body":{"controllers/AddressTypeController.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/BankController.html":{},"controllers/CountriesController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/Query.html":{},"classes/QueryFailedFilter.html":{},"controllers/StateController.html":{},"index.html":{}}}],["http://localhost",{"_index":2112,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["http_status_messages",{"_index":3430,"title":{},"body":{"coverage.html":{}}}],["httpcode",{"_index":192,"title":{},"body":{"controllers/AddressTypeController.html":{},"controllers/BankController.html":{},"controllers/CityController.html":{},"controllers/CountriesController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"controllers/StateController.html":{}}}],["httpcode(httpstatus.created",{"_index":219,"title":{},"body":{"controllers/AddressTypeController.html":{},"controllers/BankController.html":{},"controllers/CityController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"controllers/StateController.html":{}}}],["httpcode(httpstatus.ok",{"_index":226,"title":{},"body":{"controllers/AddressTypeController.html":{},"controllers/BankController.html":{},"controllers/CityController.html":{},"controllers/CountriesController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"controllers/StateController.html":{}}}],["httperrorfilter",{"_index":459,"title":{"classes/HttpErrorFilter.html":{}},"body":{"modules/ApiModule.html":{},"classes/HttpErrorFilter.html":{},"coverage.html":{}}}],["httpexception",{"_index":296,"title":{},"body":{"injectables/AddressTypeService.html":{},"classes/AllExceptionsFilter.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"controllers/FilesLocalController.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"injectables/StateService.html":{}}}],["httpexceptionfilter",{"_index":2691,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["httpmodule",{"_index":2645,"title":{},"body":{"modules/HelperModule.html":{}}}],["https://example",{"_index":2250,"title":{},"body":{"classes/FileResponseDto-2.html":{}}}],["https://example.com/path/to/file.jpg",{"_index":2235,"title":{},"body":{"classes/FileResponseDto-1.html":{},"classes/FileType.html":{}}}],["https://example.com/path/to/file.jpg'})@transform(undefined",{"_index":2257,"title":{},"body":{"classes/FileType.html":{}}}],["https://github.com/dharmesh",{"_index":3670,"title":{},"body":{"index.html":{}}}],["https://hooks.slack.com/services/xxxxxxxxx/xxxxxxxxx/xxxxxxxxxxxxxxxxxxxxxxxx",{"_index":2200,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["https://s3.amazonaws.com/bucket/path/to/file?signature",{"_index":2461,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["httpstatus",{"_index":193,"title":{},"body":{"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/HttpErrorFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{}}}],["httpstatus.bad_request",{"_index":330,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/StateService.html":{}}}],["httpstatus.conflict",{"_index":317,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"injectables/StateService.html":{}}}],["httpstatus.internal_server_error",{"_index":325,"title":{},"body":{"injectables/AddressTypeService.html":{},"classes/AllExceptionsFilter.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/HttpErrorFilter.html":{},"classes/QueryFailedFilter.html":{},"injectables/StateService.html":{}}}],["httpstatus.not_found",{"_index":341,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/StateService.html":{}}}],["httpstatus.ok",{"_index":238,"title":{},"body":{"controllers/AddressTypeController.html":{},"controllers/BankController.html":{},"controllers/CityController.html":{},"controllers/CountriesController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"controllers/StateController.html":{}}}],["httpstatus.payload_too_large",{"_index":2514,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["httpstatus.unprocessable_entity",{"_index":2378,"title":{},"body":{"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{}}}],["iappconfig",{"_index":1206,"title":{"interfaces/IAppConfig.html":{}},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IAppConfig.html":{},"coverage.html":{}}}],["iawsconfig",{"_index":1208,"title":{"interfaces/IAwsConfig.html":{}},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IAwsConfig.html":{},"coverage.html":{}}}],["id",{"_index":166,"title":{},"body":{"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"controllers/AppController.html":{},"controllers/BankController.html":{},"classes/BankDto.html":{},"injectables/BankService.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"controllers/CityController.html":{},"classes/CityDto.html":{},"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/Document.html":{},"controllers/DocumentController.html":{},"classes/DocumentDto.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"injectables/FilesLocalService.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/State.html":{},"controllers/StateController.html":{},"classes/StateDto.html":{},"injectables/StateService.html":{}}}],["id,country",{"_index":823,"title":{},"body":{"classes/Cities.html":{}}}],["id_addres_type",{"_index":105,"title":{},"body":{"classes/AddressType.html":{}}}],["id_address_type",{"_index":39,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"controllers/AddressTypeController.html":{},"classes/ContactDto.html":{},"classes/Query-4.html":{}}}],["id_address_type='${id",{"_index":3115,"title":{},"body":{"classes/Query-4.html":{}}}],["id_bank",{"_index":707,"title":{},"body":{"controllers/BankController.html":{},"classes/BankDto.html":{},"classes/Banks.html":{},"classes/Query-7.html":{}}}],["id_city",{"_index":735,"title":{},"body":{"classes/BankDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"controllers/CityController.html":{},"classes/CityDto.html":{},"injectables/CityService.html":{},"classes/Query-5.html":{},"classes/Query-7.html":{}}}],["id_country",{"_index":736,"title":{},"body":{"classes/BankDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"injectables/CityService.html":{},"controllers/CountriesController.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/State.html":{},"classes/StateDto.html":{},"injectables/StateService.html":{}}}],["id_country=id_country",{"_index":909,"title":{},"body":{"injectables/CityService.html":{}}}],["id_currency",{"_index":1691,"title":{},"body":{"classes/CreateCountryDto.html":{},"controllers/CurrenciesController.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{}}}],["id_document",{"_index":1819,"title":{},"body":{"classes/Document.html":{},"classes/DocumentDto.html":{},"classes/Query-8.html":{}}}],["id_document_group",{"_index":1820,"title":{},"body":{"classes/Document.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"classes/DocumentGroupDto.html":{},"injectables/DocumentService.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{}}}],["id_state",{"_index":737,"title":{},"body":{"classes/BankDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"injectables/CityService.html":{},"classes/Query-10.html":{},"classes/Query-5.html":{},"classes/Query-7.html":{},"classes/State.html":{},"controllers/StateController.html":{},"classes/StateDto.html":{}}}],["id_state=id_state",{"_index":900,"title":{},"body":{"injectables/CityService.html":{}}}],["id_timezone",{"_index":1692,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/Query-2.html":{}}}],["id_updated_by",{"_index":3148,"title":{},"body":{"classes/Query-8.html":{}}}],["idarea",{"_index":1989,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["idea",{"_index":3646,"title":{},"body":{"index.html":{}}}],["identification",{"_index":1590,"title":{},"body":{"classes/Country.html":{},"classes/State.html":{}}}],["identifier",{"_index":58,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"classes/BankDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"classes/ContactDto.html":{},"classes/Country.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{},"classes/Currency.html":{},"classes/Document.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"classes/DocumentGroupDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileType.html":{},"classes/State.html":{},"classes/StateDto.html":{},"coverage.html":{}}}],["ids",{"_index":798,"title":{},"body":{"classes/Banks.html":{}}}],["ifieldconfig",{"_index":2848,"title":{},"body":{"injectables/PaginationService.html":{}}}],["ifileconfig",{"_index":1210,"title":{"interfaces/IFileConfig.html":{}},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IFileConfig.html":{},"coverage.html":{}}}],["ijwtconfig",{"_index":1212,"title":{"interfaces/IJWTConfig.html":{}},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IJWTConfig.html":{},"coverage.html":{}}}],["image",{"_index":2205,"title":{},"body":{"classes/FileNotImageException.html":{}}}],["image.exception.ts",{"_index":2203,"title":{},"body":{"classes/FileNotImageException.html":{},"coverage.html":{}}}],["image.exception.ts:20",{"_index":2209,"title":{},"body":{"classes/FileNotImageException.html":{}}}],["image.jpg",{"_index":2293,"title":{},"body":{"classes/FileUploadDto.html":{},"injectables/FilesS3PresignedService.html":{}}}],["image.jpg'})@isstring",{"_index":2291,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["imagefilefilter",{"_index":2328,"title":{},"body":{"controllers/FilesLocalController.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"coverage.html":{}}}],["imaginary",{"_index":547,"title":{},"body":{"controllers/AppController.html":{}}}],["imperative",{"_index":3735,"title":{},"body":{"index.html":{}}}],["implemented",{"_index":2535,"title":{},"body":{"injectables/FilesService.html":{}}}],["implements",{"_index":387,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CommaSeparated.html":{},"injectables/ContactService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{}}}],["implied",{"_index":3794,"title":{},"body":{"license.html":{}}}],["import",{"_index":74,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"controllers/AddressTypeController.html":{},"modules/AddressTypeModule.html":{},"injectables/AddressTypeService.html":{},"classes/AddressUpdateDto.html":{},"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/BankController.html":{},"classes/BankDto.html":{},"modules/BankModule.html":{},"injectables/BankService.html":{},"classes/BankUpdateDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"controllers/CityController.html":{},"classes/CityDto.html":{},"modules/CityModule.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ConfigService.html":{},"controllers/ContactController.html":{},"classes/ContactDto.html":{},"modules/ContactModule.html":{},"injectables/ContactService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService-1.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"modules/CountryMasModule.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/Document.html":{},"controllers/DocumentController.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"controllers/DocumentGroupController.html":{},"classes/DocumentGroupDto.html":{},"modules/DocumentGroupModule.html":{},"injectables/DocumentGroupService.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IFileConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/State.html":{},"controllers/StateController.html":{},"classes/StateDto.html":{},"modules/StateModule.html":{},"injectables/StateService.html":{},"classes/UpdateDto.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{}}}],["imported",{"_index":2401,"title":{},"body":{"modules/FilesModule.html":{},"modules/HelperModule.html":{}}}],["importing",{"_index":451,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{}}}],["imports",{"_index":457,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/ContactModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{}}}],["in'})@isnotempty()@isstring",{"_index":2555,"title":{},"body":{"classes/FilterQueryDto.html":{}}}],["include",{"_index":1952,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/HttpErrorFilter.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{},"contributing.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["included",{"_index":2405,"title":{},"body":{"modules/FilesModule.html":{},"license.html":{}}}],["includes",{"_index":19,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"injectables/AddressTypeService.html":{},"modules/AppModule.html":{},"classes/BankDto.html":{},"injectables/BankService.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"injectables/CountriesService-1.html":{},"classes/Country.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/Document.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"classes/DocumentGroupDto.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/FileUploadDto.html":{},"controllers/FilesS3Controller.html":{},"injectables/FilesS3Service.html":{},"classes/Query-10.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"classes/State.html":{},"classes/StateDto.html":{},"injectables/StateService.html":{},"index.html":{}}}],["including",{"_index":103,"title":{},"body":{"classes/AddressType.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"injectables/CountriesService-1.html":{},"classes/Country.html":{},"classes/CountryMas.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/Document.html":{},"classes/DocumentGroup.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/State.html":{},"classes/UtilsService.html":{},"license.html":{}}}],["inclusion",{"_index":2233,"title":{},"body":{"classes/FileResponseDto-1.html":{}}}],["incoming",{"_index":2357,"title":{},"body":{"modules/FilesLocalModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{}}}],["ind",{"_index":1634,"title":{},"body":{"classes/Country.html":{},"classes/CreateCountryDto.html":{}}}],["index",{"_index":36,"title":{"index.html":{}},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/BankController.html":{},"classes/BankDto.html":{},"injectables/BankService.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"controllers/CityController.html":{},"classes/CityDto.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ConfigService.html":{},"controllers/ContactController.html":{},"classes/ContactDto.html":{},"injectables/ContactService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/Document.html":{},"controllers/DocumentController.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"controllers/DocumentGroupController.html":{},"classes/DocumentGroupDto.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/FilterQueryDto.html":{},"controllers/HomeController.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/State.html":{},"controllers/StateController.html":{},"classes/StateDto.html":{},"injectables/StateService.html":{},"classes/UtilsService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["indexes",{"_index":2754,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["india",{"_index":758,"title":{},"body":{"classes/BankDto.html":{},"classes/Banks.html":{},"classes/Country.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{}}}],["indian",{"_index":1617,"title":{},"body":{"classes/Country.html":{},"classes/CreateDto.html":{},"classes/Currency.html":{}}}],["indicate",{"_index":539,"title":{},"body":{"controllers/AppController.html":{}}}],["indicates",{"_index":2415,"title":{},"body":{"controllers/FilesS3Controller.html":{},"classes/PaginationResponseDto.html":{}}}],["indicating",{"_index":168,"title":{},"body":{"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{}}}],["individual",{"_index":2034,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["infer",{"_index":2381,"title":{},"body":{"injectables/FilesLocalService.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/HomeService.html":{},"injectables/PrismaService.html":{}}}],["infineit/winston",{"_index":521,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"dependencies.html":{}}}],["infinity",{"_index":2568,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/SortByDto.html":{},"miscellaneous/enumerations.html":{}}}],["infinitypagination",{"_index":1531,"title":{},"body":{"controllers/CountriesController.html":{}}}],["infinitypaginationresponse",{"_index":1528,"title":{},"body":{"controllers/CountriesController.html":{}}}],["infinitypaginationresponse(country",{"_index":1538,"title":{},"body":{"controllers/CountriesController.html":{}}}],["infinitypaginationresponsedto",{"_index":1529,"title":{},"body":{"controllers/CountriesController.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"controllers/AddressTypeController.html":{},"modules/AddressTypeModule.html":{},"injectables/AddressTypeService.html":{},"classes/AddressUpdateDto.html":{},"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/BankController.html":{},"classes/BankDto.html":{},"modules/BankModule.html":{},"injectables/BankService.html":{},"classes/BankUpdateDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"controllers/CityController.html":{},"classes/CityDto.html":{},"modules/CityModule.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ConfigService.html":{},"controllers/ContactController.html":{},"classes/ContactDto.html":{},"modules/ContactModule.html":{},"injectables/ContactService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService-1.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"modules/CountryMasModule.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/Document.html":{},"controllers/DocumentController.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"controllers/DocumentGroupController.html":{},"classes/DocumentGroupDto.html":{},"modules/DocumentGroupModule.html":{},"injectables/DocumentGroupService.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/State.html":{},"controllers/StateController.html":{},"classes/StateDto.html":{},"modules/StateModule.html":{},"injectables/StateService.html":{},"classes/UpdateDto.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{}}}],["information",{"_index":1493,"title":{},"body":{"controllers/CountriesController.html":{},"classes/Country.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"controllers/HomeController.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["infrastructure",{"_index":2390,"title":{},"body":{"modules/FilesModule.html":{}}}],["infrastructure/uploader/local/files.module",{"_index":2396,"title":{},"body":{"modules/FilesModule.html":{}}}],["infrastructure/uploader/s3",{"_index":2398,"title":{},"body":{"modules/FilesModule.html":{}}}],["infrastructure/uploader/s3/files.module",{"_index":2397,"title":{},"body":{"modules/FilesModule.html":{}}}],["infrastructureuploadermodule",{"_index":2400,"title":{},"body":{"modules/FilesModule.html":{},"coverage.html":{}}}],["inherits",{"_index":370,"title":{},"body":{"classes/AddressUpdateDto.html":{},"classes/BankUpdateDto.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{}}}],["initial",{"_index":3357,"title":{},"body":{"changelog.html":{}}}],["initialization",{"_index":2904,"title":{},"body":{"injectables/PrismaService.html":{}}}],["initialize",{"_index":1033,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["initialized",{"_index":2932,"title":{},"body":{"injectables/PrismaService.html":{}}}],["initializes",{"_index":3563,"title":{},"body":{"miscellaneous/functions.html":{}}}],["inject",{"_index":516,"title":{},"body":{"controllers/AppController.html":{},"injectables/ContactService.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["inject('contact_service",{"_index":1453,"title":{},"body":{"injectables/ContactService.html":{}}}],["inject('contact_service1",{"_index":1454,"title":{},"body":{"injectables/ContactService.html":{}}}],["inject(loggerkey",{"_index":534,"title":{},"body":{"controllers/AppController.html":{}}}],["injectable",{"_index":263,"title":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"injectables/ContactService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"injectables/HomeService.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"injectables/StateService.html":{}},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"injectables/ContactService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"injectables/HomeService.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"injectables/StateService.html":{},"coverage.html":{}}}],["injectables",{"_index":264,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"injectables/ContactService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"injectables/HomeService.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"injectables/StateService.html":{},"overview.html":{}}}],["injected",{"_index":2527,"title":{},"body":{"injectables/FilesS3Service.html":{}}}],["injection",{"_index":2969,"title":{},"body":{"classes/Query.html":{}}}],["inner",{"_index":1105,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["inodeemailerconfig",{"_index":1214,"title":{"interfaces/INodeEmailerConfig.html":{}},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/INodeEmailerConfig.html":{},"coverage.html":{}}}],["input",{"_index":35,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"injectables/CommaSeparated.html":{},"classes/CountryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"injectables/SortBy.html":{},"classes/StateDto.html":{},"miscellaneous/functions.html":{}}}],["inr",{"_index":1727,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{}}}],["insert",{"_index":318,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"injectables/DocumentGroupService.html":{},"classes/DynamicQueryBuilder.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{}}}],["insert(values",{"_index":3095,"title":{},"body":{"classes/Query-3.html":{}}}],["inserted",{"_index":319,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["inserted.insertid",{"_index":321,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["insertid",{"_index":3010,"title":{},"body":{"classes/Query-10.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{}}}],["insertid,name",{"_index":3033,"title":{},"body":{"classes/Query-2.html":{}}}],["inserting",{"_index":1023,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/Query.html":{},"classes/Query-10.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{}}}],["insertion",{"_index":1061,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["insertoptions",{"_index":3096,"title":{},"body":{"classes/Query-3.html":{}}}],["instagram",{"_index":3760,"title":{},"body":{"index.html":{}}}],["install",{"_index":3527,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["installation",{"_index":3669,"title":{},"body":{"index.html":{}}}],["installed",{"_index":3666,"title":{},"body":{"index.html":{}}}],["instance",{"_index":393,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"classes/FileNotImageException.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"injectables/PrismaService.html":{},"classes/QueryFailedFilter.html":{},"classes/UserNotFoundException.html":{},"miscellaneous/functions.html":{}}}],["instanceof",{"_index":420,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/PrismaService.html":{}}}],["instances",{"_index":2694,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["instantiated",{"_index":2404,"title":{},"body":{"modules/FilesModule.html":{}}}],["integer",{"_index":3592,"title":{},"body":{"miscellaneous/functions.html":{}}}],["integrates",{"_index":2393,"title":{},"body":{"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["integration",{"_index":2428,"title":{},"body":{"modules/FilesS3Module.html":{}}}],["interact",{"_index":138,"title":{},"body":{"controllers/AddressTypeController.html":{},"controllers/BankController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"controllers/StateController.html":{}}}],["interacting",{"_index":532,"title":{},"body":{"controllers/AppController.html":{},"modules/FilesS3PresignedModule.html":{},"index.html":{}}}],["interactions",{"_index":2489,"title":{},"body":{"modules/FilesS3PresignedModule.html":{}}}],["interacts",{"_index":270,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["intercept",{"_index":3196,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["intercept(context",{"_index":3197,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["interceptor",{"_index":3187,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["intercepts",{"_index":3201,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["interface",{"_index":1167,"title":{"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{}},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/DynamicQueryBuilder.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{},"coverage.html":{}}}],["interfaces",{"_index":2699,"title":{},"body":{"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{},"overview.html":{}}}],["internal",{"_index":428,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpErrorFilter.html":{}}}],["international",{"_index":1623,"title":{},"body":{"classes/Country.html":{},"classes/CreateCountryDto.html":{}}}],["introducing",{"_index":3609,"title":{},"body":{"index.html":{}}}],["introduction",{"_index":3608,"title":{},"body":{"index.html":{}}}],["invalid",{"_index":990,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["involving",{"_index":2454,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["ipagemetadtoparameters",{"_index":2714,"title":{"interfaces/IPageMetaDtoParameters.html":{}},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"coverage.html":{}}}],["ipaginationfieldconfig",{"_index":300,"title":{"interfaces/IPaginationFieldConfig.html":{}},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"interfaces/IPaginationFieldConfig.html":{},"injectables/StateService.html":{},"classes/UtilsService.html":{},"coverage.html":{}}}],["ipostgresqlconfig",{"_index":1217,"title":{"interfaces/IPostgreSQLConfig.html":{}},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IPostgreSQLConfig.html":{},"coverage.html":{}}}],["isarray",{"_index":2596,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["isboolean",{"_index":2049,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-3.html":{}}}],["isboolean()@isoptional",{"_index":2021,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["isconsumeravailable",{"_index":1460,"title":{},"body":{"injectables/ContactService.html":{}}}],["isdefined",{"_index":78,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"classes/ContactDto.html":{},"classes/CountryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/StateDto.html":{}}}],["isdefined()@isnotempty()@isstring()@apiproperty({type",{"_index":865,"title":{},"body":{"classes/CityDto.html":{},"classes/CreateCountryDto.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/StateDto.html":{}}}],["isdefined()@isnotempty()@isstring()@maxlength(10)@apiproperty({type",{"_index":1742,"title":{},"body":{"classes/CreateDto.html":{}}}],["isdefined()@isnotempty()@isstring()@maxlength(100)@apiproperty({type",{"_index":1404,"title":{},"body":{"classes/ContactDto.html":{},"classes/StateDto.html":{}}}],["isdefined()@isnotempty()@isstring()@maxlength(20)@apiproperty({type",{"_index":868,"title":{},"body":{"classes/CityDto.html":{}}}],["isdefined()@isnotempty()@isstring()@maxlength(5)@apiproperty({type",{"_index":1669,"title":{},"body":{"classes/CountryDto.html":{}}}],["isdefined()@isnotempty()@isstring()@maxlength(50)@apiproperty({type",{"_index":45,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{}}}],["isdefined()@isnotempty()@isstring()@maxlength(6)@apiproperty({type",{"_index":1739,"title":{},"body":{"classes/CreateDto.html":{}}}],["isdefined()@isnotempty()@isstring()@maxlength(80)@apiproperty({type",{"_index":1675,"title":{},"body":{"classes/CountryDto.html":{},"classes/CreateDto.html":{}}}],["isdefined()@isnotempty()@isuuid()@apiproperty({type",{"_index":745,"title":{},"body":{"classes/BankDto.html":{}}}],["isdefined()@type(undefined)@isnumber()@min(0)@apiproperty({type",{"_index":1729,"title":{},"body":{"classes/CreateDto.html":{}}}],["isendgridconfig",{"_index":1219,"title":{"interfaces/ISendGridConfig.html":{}},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/ISendGridConfig.html":{},"coverage.html":{}}}],["isenum",{"_index":1198,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["isenum(environment",{"_index":2101,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-3.html":{}}}],["isenum(environment)@isoptional",{"_index":2095,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-3.html":{}}}],["isenum(filedriver",{"_index":1237,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["isenum(filedriver)@isoptional",{"_index":2130,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["isenum(paginationtype",{"_index":2574,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["isglobal",{"_index":627,"title":{},"body":{"modules/AppModule.html":{}}}],["ishealthy",{"_index":2911,"title":{},"body":{"injectables/PrismaService.html":{}}}],["isin",{"_index":2558,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["isin(abc(x",{"_index":2588,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["isint",{"_index":1199,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{}}}],["isint()@isoptional",{"_index":2038,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["isint()@min(0)@max(65535)@isoptional",{"_index":1994,"title":{},"body":{"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{}}}],["ismsconfig",{"_index":1221,"title":{"interfaces/ISMSConfig.html":{}},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/ISMSConfig.html":{},"coverage.html":{}}}],["isn't",{"_index":2747,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["isnan(numbervalue",{"_index":2602,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["isnotempty",{"_index":79,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"classes/ContactDto.html":{},"classes/CountryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"classes/StateDto.html":{}}}],["isnotempty()@isstring",{"_index":2553,"title":{},"body":{"classes/FilterQueryDto.html":{}}}],["isnotempty()@isstring()@apiproperty({type",{"_index":1695,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["isnumber",{"_index":80,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"classes/ContactDto.html":{},"classes/CreateDto.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/FileUploadDto.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/StateDto.html":{}}}],["isnumberstringornumber",{"_index":2561,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["isnumberstringornumber(validationoptions",{"_index":3583,"title":{},"body":{"miscellaneous/functions.html":{}}}],["iso",{"_index":1591,"title":{},"body":{"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/Query-2.html":{},"classes/SortByDto.html":{}}}],["iso3",{"_index":1605,"title":{},"body":{"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/Query-2.html":{}}}],["isoptional",{"_index":81,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"classes/ConfigService.html":{},"classes/ContactDto.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/StateDto.html":{}}}],["isoptional()@isboolean",{"_index":2164,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["isoptional()@isnumber()@apiproperty({type",{"_index":65,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"classes/ContactDto.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/StateDto.html":{}}}],["isoptional()@isstring",{"_index":2162,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["isoptional()@isstring()@maxlength(5)@apiproperty({type",{"_index":760,"title":{},"body":{"classes/BankDto.html":{}}}],["isoptional()@isuuid()@apiproperty({type",{"_index":740,"title":{},"body":{"classes/BankDto.html":{}}}],["isstring",{"_index":82,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"classes/ConfigService.html":{},"classes/ContactDto.html":{},"classes/CountryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileUploadDto.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/StateDto.html":{}}}],["isstring()@isoptional",{"_index":1992,"title":{},"body":{"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["issue",{"_index":3352,"title":{},"body":{"changelog.html":{},"contributing.html":{}}}],["issued",{"_index":551,"title":{},"body":{"controllers/AppController.html":{}}}],["issuer",{"_index":1331,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IJWTConfig.html":{}}}],["issues",{"_index":3741,"title":{},"body":{"index.html":{}}}],["ist",{"_index":1610,"title":{},"body":{"classes/Country.html":{}}}],["isurl",{"_index":1201,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{}}}],["isurl({require_tld",{"_index":1996,"title":{},"body":{"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{}}}],["isuuid",{"_index":767,"title":{},"body":{"classes/BankDto.html":{}}}],["isvalid",{"_index":987,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["isvalidfield",{"_index":2559,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["isvalidfield(entity",{"_index":3589,"title":{},"body":{"miscellaneous/functions.html":{}}}],["it's",{"_index":3613,"title":{},"body":{"index.html":{}}}],["item",{"_index":2740,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["items",{"_index":2609,"title":{},"body":{"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["iterate",{"_index":1016,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["iuploadfileconfig",{"_index":1223,"title":{"interfaces/IUploadFileConfig.html":{}},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IUploadFileConfig.html":{},"coverage.html":{}}}],["javascript",{"_index":3653,"title":{},"body":{"index.html":{}}}],["john",{"_index":544,"title":{},"body":{"controllers/AppController.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["johndoe",{"_index":543,"title":{},"body":{"controllers/AppController.html":{}}}],["join",{"_index":902,"title":{},"body":{"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"interfaces/IPaginationFieldConfig.html":{},"injectables/PaginationService.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{},"injectables/StateService.html":{},"classes/UtilsService.html":{},"index.html":{}}}],["join.additionalconditions",{"_index":1162,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["join.condition",{"_index":1134,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["join.condition}${selectfields",{"_index":1110,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["join.selectfields",{"_index":1106,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["join.selectfields.map((field",{"_index":1107,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["join.table",{"_index":1109,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["join.table}.${foreignkey",{"_index":1137,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["join.type",{"_index":1104,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["joinalias",{"_index":1130,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["joinalias}.${cond",{"_index":1164,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["joinalias}.${foreignkey",{"_index":1156,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["joinclause",{"_index":1979,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["joinclauses",{"_index":1097,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["joined",{"_index":1055,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["joinquery",{"_index":2851,"title":{},"body":{"injectables/PaginationService.html":{}}}],["joins",{"_index":1050,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/DynamicQueryBuilder.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{}}}],["joins.join",{"_index":1981,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["joins.length",{"_index":1980,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["joins.map((join",{"_index":1111,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["jointable",{"_index":930,"title":{},"body":{"injectables/CityService.html":{},"injectables/DocumentService.html":{},"interfaces/IPaginationFieldConfig.html":{},"injectables/StateService.html":{}}}],["jointables",{"_index":1797,"title":{},"body":{"injectables/CurrenciesService.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["jointables.join",{"_index":1802,"title":{},"body":{"injectables/CurrenciesService.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["jointables.push(config.jointable(alias",{"_index":3324,"title":{},"body":{"classes/UtilsService.html":{}}}],["jointables.push(config.jointable(index",{"_index":3323,"title":{},"body":{"classes/UtilsService.html":{}}}],["jointype",{"_index":1103,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["json",{"_index":1558,"title":{},"body":{"controllers/CountriesController.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/Query.html":{},"classes/SortByDto.html":{}}}],["json.parse(value",{"_index":2547,"title":{},"body":{"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{}}}],["json.stringify(_.clone(errorresponse",{"_index":3182,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["json.stringify(_.clone(r",{"_index":682,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["json.stringify(_.clone(request.body",{"_index":680,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["json.stringify(errorresponse",{"_index":2688,"title":{},"body":{"classes/HttpErrorFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["json.stringify(queryconfig",{"_index":917,"title":{},"body":{"injectables/CityService.html":{}}}],["json.stringify(reqstrobj",{"_index":690,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{}}}],["json.stringify(requestdata",{"_index":2973,"title":{},"body":{"classes/Query.html":{}}}],["json.stringify(responsedata",{"_index":2974,"title":{},"body":{"classes/Query.html":{}}}],["json.stringify(resstrobj",{"_index":695,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{}}}],["jwt",{"_index":3621,"title":{},"body":{"index.html":{}}}],["jwtconfig",{"_index":1326,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["jwtservice",{"_index":2651,"title":{},"body":{"modules/HelperModule.html":{}}}],["k8s",{"_index":3722,"title":{},"body":{"index.html":{}}}],["key",{"_index":1093,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ConfigService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileType.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PrismaService.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{},"classes/SortByDto.html":{},"miscellaneous/functions.html":{}}}],["key?awsaccesskeyid=access_key&expires=expiration_time&signature=signature",{"_index":2252,"title":{},"body":{"classes/FileResponseDto-2.html":{}}}],["keyof",{"_index":1065,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"interfaces/QueryConfig.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{}}}],["keys",{"_index":1035,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/DynamicQueryBuilder.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{}}}],["keys.join",{"_index":1082,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/DynamicQueryBuilder.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{}}}],["keys.map((key",{"_index":1080,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{}}}],["key}=${this.formatvalue(updatedata[key",{"_index":3114,"title":{},"body":{"classes/Query-4.html":{}}}],["kind",{"_index":3793,"title":{},"body":{"license.html":{}}}],["known",{"_index":2877,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["kubectl",{"_index":3725,"title":{},"body":{"index.html":{}}}],["large",{"_index":2515,"title":{},"body":{"injectables/FilesS3PresignedService.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["last",{"_index":2741,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["lastkey",{"_index":3013,"title":{},"body":{"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{}}}],["latest",{"_index":3614,"title":{},"body":{"index.html":{}}}],["layer",{"_index":943,"title":{},"body":{"injectables/CityService.html":{}}}],["left",{"_index":1123,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["legal",{"_index":1870,"title":{},"body":{"classes/DocumentGroup.html":{},"classes/DocumentGroupDto.html":{}}}],["legend",{"_index":244,"title":{},"body":{"modules/AddressTypeModule.html":{},"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/BankModule.html":{},"modules/CityModule.html":{},"modules/ContactModule.html":{},"modules/CountriesModule.html":{},"modules/CountryMasModule.html":{},"modules/CurrenciesModule.html":{},"modules/DocumentGroupModule.html":{},"modules/DocumentModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{},"modules/StateModule.html":{},"overview.html":{}}}],["liability",{"_index":3808,"title":{},"body":{"license.html":{}}}],["liable",{"_index":3805,"title":{},"body":{"license.html":{}}}],["library",{"_index":949,"title":{},"body":{"injectables/CityService.html":{},"classes/Query-10.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{}}}],["license",{"_index":3755,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["licensed",{"_index":3748,"title":{},"body":{"index.html":{}}}],["limit",{"_index":1542,"title":{},"body":{"controllers/CountriesController.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"dependencies.html":{}}}],["limit/tsconfig",{"_index":3502,"title":{},"body":{"dependencies.html":{}}}],["limitation",{"_index":3773,"title":{},"body":{"license.html":{}}}],["limited",{"_index":3795,"title":{},"body":{"license.html":{}}}],["limits",{"_index":2450,"title":{},"body":{"modules/FilesS3Module.html":{}}}],["line",{"_index":982,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{}}}],["linkedin",{"_index":3759,"title":{},"body":{"index.html":{}}}],["lint",{"_index":3659,"title":{},"body":{"index.html":{}}}],["linter",{"_index":3654,"title":{},"body":{"index.html":{}}}],["linting",{"_index":3394,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["list",{"_index":179,"title":{},"body":{"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"modules/FilesLocalModule.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{},"injectables/SortBy.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{}}}],["literal",{"_index":3310,"title":{},"body":{"classes/UtilsService.html":{},"miscellaneous/typealiases.html":{}}}],["load",{"_index":628,"title":{},"body":{"modules/AppModule.html":{}}}],["local",{"_index":2133,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["localhost",{"_index":1421,"title":{},"body":{"modules/ContactModule.html":{},"injectables/ContactService.html":{}}}],["locally",{"_index":1468,"title":{},"body":{"injectables/ContactService.html":{}}}],["located",{"_index":744,"title":{},"body":{"classes/BankDto.html":{},"classes/Banks.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{}}}],["location",{"_index":2249,"title":{},"body":{"classes/FileResponseDto-2.html":{}}}],["lodash",{"_index":653,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/DynamicQueryBuilder.html":{},"classes/HttpErrorFilter.html":{},"injectables/PrismaService.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{}}}],["log",{"_index":513,"title":{},"body":{"controllers/AppController.html":{},"injectables/CityService.html":{}}}],["log_in_file",{"_index":2196,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["logger",{"_index":514,"title":{},"body":{"controllers/AppController.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/HttpErrorFilter.html":{},"classes/QueryFailedFilter.html":{},"dependencies.html":{}}}],["logger.error",{"_index":2687,"title":{},"body":{"classes/HttpErrorFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["logger.error(`${request.method",{"_index":2686,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["logger/context/infrastructure/nestjs/contextmodule",{"_index":610,"title":{},"body":{"modules/AppModule.html":{}}}],["logger/logger/domain/logger",{"_index":522,"title":{},"body":{"controllers/AppController.html":{}}}],["logger/logger/infrastructure/nestjs/loggermodule",{"_index":612,"title":{},"body":{"modules/AppModule.html":{}}}],["logger_app",{"_index":2152,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["logger_console_print",{"_index":2153,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["logger_context",{"_index":2154,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["logger_database_storage",{"_index":2155,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["logger_duration",{"_index":2156,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["logger_duration_log_level",{"_index":2157,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["logger_log_in_file",{"_index":2158,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["logger_log_level",{"_index":2159,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["logger_organization",{"_index":2160,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["logger_slack_inc_webhook_url",{"_index":2161,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["loggerconfig",{"_index":620,"title":{},"body":{"modules/AppModule.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"miscellaneous/typealiases.html":{}}}],["loggerkey",{"_index":520,"title":{},"body":{"controllers/AppController.html":{}}}],["loggermodule",{"_index":611,"title":{},"body":{"modules/AppModule.html":{}}}],["loggermodule.forroot(prismaservice",{"_index":631,"title":{},"body":{"modules/AppModule.html":{}}}],["logging",{"_index":2966,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["logic",{"_index":23,"title":{},"body":{"classes/AddresTypeDto.html":{},"injectables/AddressTypeService.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/BankDto.html":{},"injectables/BankService.html":{},"classes/CityDto.html":{},"injectables/CountriesService-1.html":{},"classes/CountryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"injectables/CurrenciesService.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"modules/FilesLocalModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"classes/StateDto.html":{},"injectables/StateService.html":{}}}],["logs",{"_index":2679,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["long",{"_index":1673,"title":{},"body":{"classes/CountryDto.html":{},"classes/CreateDto.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["lowercasetransformer",{"_index":3493,"title":{},"body":{"coverage.html":{}}}],["lts.1",{"_index":3530,"title":{},"body":{"dependencies.html":{}}}],["m",{"_index":3387,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["mac",{"_index":3697,"title":{},"body":{"index.html":{}}}],["made",{"_index":2360,"title":{},"body":{"modules/FilesLocalModule.html":{}}}],["main",{"_index":1071,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{},"classes/UtilsService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["main.id",{"_index":1073,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["main.status",{"_index":1072,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["mainalias",{"_index":1129,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["mainalias}.${mainfield",{"_index":1138,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["mainalias}.${string(field",{"_index":1154,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["mainalias}.id",{"_index":1141,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["mainalias}.status",{"_index":1140,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["mainfield",{"_index":1133,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["make",{"_index":2646,"title":{},"body":{"modules/HelperModule.html":{},"contributing.html":{}}}],["makes",{"_index":371,"title":{},"body":{"classes/AddressUpdateDto.html":{},"classes/BankUpdateDto.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"miscellaneous/typealiases.html":{}}}],["making",{"_index":368,"title":{},"body":{"classes/AddressUpdateDto.html":{},"classes/BankUpdateDto.html":{},"modules/HelperModule.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{}}}],["manage",{"_index":142,"title":{},"body":{"controllers/AddressTypeController.html":{},"modules/AddressTypeModule.html":{},"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"modules/BankModule.html":{},"injectables/BankService.html":{},"modules/CityModule.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"modules/CountryMasModule.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"modules/DocumentGroupModule.html":{},"injectables/DocumentGroupService.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesService.html":{},"injectables/PrismaService.html":{},"controllers/StateController.html":{},"modules/StateModule.html":{},"injectables/StateService.html":{}}}],["management",{"_index":2995,"title":{},"body":{"classes/Query-10.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{}}}],["manager",{"_index":3513,"title":{},"body":{"dependencies.html":{}}}],["manages",{"_index":2366,"title":{},"body":{"injectables/FilesLocalService.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{}}}],["managing",{"_index":476,"title":{},"body":{"modules/ApiModule.html":{},"injectables/CityService.html":{},"modules/CurrenciesModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{}}}],["manipulation",{"_index":2996,"title":{},"body":{"classes/Query-10.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{}}}],["map",{"_index":3207,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{},"classes/UtilsService.html":{}}}],["map(([key",{"_index":1092,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["map((cond",{"_index":1163,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["map((field",{"_index":1153,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["map((filter",{"_index":2854,"title":{},"body":{"injectables/PaginationService.html":{}}}],["map((join",{"_index":1098,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["map((key",{"_index":3038,"title":{},"body":{"classes/Query-2.html":{}}}],["map((part",{"_index":1135,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["map((s",{"_index":2865,"title":{},"body":{"injectables/PaginationService.html":{}}}],["map((sortitem",{"_index":3331,"title":{},"body":{"classes/UtilsService.html":{}}}],["map((val",{"_index":2857,"title":{},"body":{"injectables/PaginationService.html":{}}}],["markdown",{"_index":3690,"title":{},"body":{"index.html":{}}}],["marked",{"_index":2640,"title":{},"body":{"modules/HelperModule.html":{}}}],["marks",{"_index":2232,"title":{},"body":{"classes/FileResponseDto-1.html":{},"injectables/FilesS3Service.html":{}}}],["master/address_type/address_type.module",{"_index":466,"title":{},"body":{"modules/ApiModule.html":{}}}],["master/banks/bank.module",{"_index":467,"title":{},"body":{"modules/ApiModule.html":{}}}],["master/city_mas/cities.modules",{"_index":468,"title":{},"body":{"modules/ApiModule.html":{}}}],["master/country_mas/country_mas.module",{"_index":469,"title":{},"body":{"modules/ApiModule.html":{}}}],["master/document_groups/document_grp.module",{"_index":470,"title":{},"body":{"modules/ApiModule.html":{}}}],["master/documents/documents.module",{"_index":471,"title":{},"body":{"modules/ApiModule.html":{}}}],["master/ms",{"_index":472,"title":{},"body":{"modules/ApiModule.html":{}}}],["master/state_mas/state.module",{"_index":475,"title":{},"body":{"modules/ApiModule.html":{}}}],["match",{"_index":1011,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["matches",{"_index":2557,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["matches(/^(asc|desc|asc|desc",{"_index":2593,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["matching",{"_index":93,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"controllers/AddressTypeController.html":{},"modules/AddressTypeModule.html":{},"injectables/AddressTypeService.html":{},"classes/AddressUpdateDto.html":{},"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/BankController.html":{},"classes/BankDto.html":{},"modules/BankModule.html":{},"injectables/BankService.html":{},"classes/BankUpdateDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"controllers/CityController.html":{},"classes/CityDto.html":{},"modules/CityModule.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ConfigService.html":{},"controllers/ContactController.html":{},"classes/ContactDto.html":{},"modules/ContactModule.html":{},"injectables/ContactService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService-1.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"modules/CountryMasModule.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/Document.html":{},"controllers/DocumentController.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"controllers/DocumentGroupController.html":{},"classes/DocumentGroupDto.html":{},"modules/DocumentGroupModule.html":{},"injectables/DocumentGroupService.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/State.html":{},"controllers/StateController.html":{},"classes/StateDto.html":{},"modules/StateModule.html":{},"injectables/StateService.html":{},"classes/UpdateDto.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"changelog.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["math.ceil(totalitems",{"_index":2746,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["math.min(startindex",{"_index":2755,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["max",{"_index":1202,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["max(500",{"_index":2580,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["max(65535",{"_index":1230,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{}}}],["max_file_size",{"_index":2121,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["max_upload_file_size",{"_index":1373,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IUploadFileConfig.html":{}}}],["maxconnections",{"_index":2066,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["maxfilesize",{"_index":1389,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"interfaces/IFileConfig.html":{}}}],["maximum",{"_index":2040,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"injectables/FilesS3PresignedService.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["maxlength",{"_index":49,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"classes/ContactDto.html":{},"classes/CountryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/StateDto.html":{}}}],["maxlength(10",{"_index":1747,"title":{},"body":{"classes/CreateDto.html":{}}}],["maxlength(100",{"_index":1410,"title":{},"body":{"classes/ContactDto.html":{},"classes/StateDto.html":{}}}],["maxlength(2",{"_index":1719,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["maxlength(20",{"_index":873,"title":{},"body":{"classes/CityDto.html":{}}}],["maxlength(3",{"_index":1720,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{}}}],["maxlength(5",{"_index":768,"title":{},"body":{"classes/BankDto.html":{},"classes/CountryDto.html":{}}}],["maxlength(50",{"_index":86,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{}}}],["maxlength(6",{"_index":1746,"title":{},"body":{"classes/CreateDto.html":{}}}],["maxlength(80",{"_index":1679,"title":{},"body":{"classes/CountryDto.html":{},"classes/CreateDto.html":{}}}],["maxpages",{"_index":2716,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["maxpagesaftercurrentpage",{"_index":2753,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["maxpagesbeforecurrentpage",{"_index":2752,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["maybetype",{"_index":3827,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["meaning",{"_index":2641,"title":{},"body":{"modules/HelperModule.html":{}}}],["memberof",{"_index":1948,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FilterQueryDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/Query-1.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"classes/SortByDto.html":{}}}],["merchantability",{"_index":3797,"title":{},"body":{"license.html":{}}}],["merge",{"_index":3776,"title":{},"body":{"license.html":{}}}],["message",{"_index":315,"title":{},"body":{"injectables/AddressTypeService.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"injectables/ContactService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/FileNotImageException.html":{},"injectables/FilesS3PresignedService.html":{},"classes/FilterQueryDto.html":{},"classes/HttpErrorFilter.html":{},"classes/PaginationQueryDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"injectables/StateService.html":{},"classes/UserNotFoundException.html":{},"index.html":{}}}],["meta",{"_index":2810,"title":{},"body":{"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{}}}],["metadata",{"_index":394,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"controllers/FilesS3Controller.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/QueryFailedFilter.html":{},"dependencies.html":{}}}],["metapage",{"_index":2839,"title":{},"body":{"injectables/PaginationService.html":{}}}],["method",{"_index":923,"title":{},"body":{"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"controllers/FilesS3Controller.html":{},"injectables/FilesS3Service.html":{},"classes/HttpErrorFilter.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"interfaces/QueryConfig.html":{}}}],["methods",{"_index":141,"title":{},"body":{"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ConfigService.html":{},"controllers/ContactController.html":{},"injectables/ContactService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"controllers/HomeController.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{},"classes/UtilsService.html":{}}}],["method},${url},${reqdata},${resdata",{"_index":2990,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["middle",{"_index":2751,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["middleware",{"_index":2429,"title":{},"body":{"modules/FilesS3Module.html":{},"miscellaneous/functions.html":{}}}],["migration",{"_index":3708,"title":{},"body":{"index.html":{}}}],["migrationdocker",{"_index":3710,"title":{},"body":{"index.html":{}}}],["mimetype",{"_index":2709,"title":{},"body":{"interfaces/IFileConfig.html":{}}}],["min",{"_index":1203,"title":{},"body":{"classes/ConfigService.html":{},"classes/CreateDto.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["min(0",{"_index":1229,"title":{},"body":{"classes/ConfigService.html":{},"classes/CreateDto.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{}}}],["min(1",{"_index":2576,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["min(10",{"_index":2579,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["minikube",{"_index":3724,"title":{},"body":{"index.html":{}}}],["minimum",{"_index":2575,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["minutes",{"_index":1643,"title":{},"body":{"classes/Country.html":{}}}],["miscellaneous",{"_index":3543,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["mit",{"_index":3747,"title":{},"body":{"index.html":{},"license.html":{}}}],["model",{"_index":1026,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["model/table",{"_index":1034,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["models",{"_index":1021,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["modify",{"_index":3775,"title":{},"body":{"license.html":{}}}],["module",{"_index":84,"title":{"modules/AddressTypeModule.html":{},"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/BankModule.html":{},"modules/CityModule.html":{},"modules/ContactModule.html":{},"modules/CountriesModule.html":{},"modules/CountryMasModule.html":{},"modules/CurrenciesModule.html":{},"modules/DocumentGroupModule.html":{},"modules/DocumentModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{},"modules/StateModule.html":{}},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"controllers/AddressTypeController.html":{},"modules/AddressTypeModule.html":{},"injectables/AddressTypeService.html":{},"classes/AddressUpdateDto.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/BankController.html":{},"classes/BankDto.html":{},"modules/BankModule.html":{},"injectables/BankService.html":{},"classes/BankUpdateDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"modules/CityModule.html":{},"injectables/CityService.html":{},"modules/ContactModule.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService-1.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"modules/CountryMasModule.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/Document.html":{},"controllers/DocumentController.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"controllers/DocumentGroupController.html":{},"classes/DocumentGroupDto.html":{},"modules/DocumentGroupModule.html":{},"injectables/DocumentGroupService.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"classes/FileType.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesService.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/PaginationQueryDto.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"classes/SortByDto.html":{},"classes/State.html":{},"controllers/StateController.html":{},"classes/StateDto.html":{},"modules/StateModule.html":{},"injectables/StateService.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"overview.html":{}}}],["module,method,url,req,response",{"_index":2988,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["modules",{"_index":242,"title":{"modules.html":{}},"body":{"modules/AddressTypeModule.html":{},"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/BankModule.html":{},"modules/CityModule.html":{},"modules/ContactModule.html":{},"modules/CountriesModule.html":{},"controllers/CountryController.html":{},"modules/CountryMasModule.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"modules/DocumentGroupModule.html":{},"modules/DocumentModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{},"modules/StateModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"modules.html":{},"overview.html":{}}}],["modules/api.module",{"_index":622,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/countries/dto/country",{"_index":2565,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["module}','${method}','${url}','${reqescvalue}','${resescvalue",{"_index":2989,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["more",{"_index":2898,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"index.html":{}}}],["much",{"_index":3375,"title":{},"body":{"contributing.html":{}}}],["multer",{"_index":2323,"title":{},"body":{"controllers/FilesLocalController.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"dependencies.html":{}}}],["multermodule",{"_index":2430,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["multermodule.registerasync",{"_index":2438,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["multers3",{"_index":2436,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["multers3.auto_content_type",{"_index":2445,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["multifiledestdir",{"_index":3483,"title":{},"body":{"coverage.html":{}}}],["multiline",{"_index":1255,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["multipart/form",{"_index":2338,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["multiple",{"_index":3335,"title":{},"body":{"classes/UtilsService.html":{}}}],["multiple_file_path",{"_index":1377,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IUploadFileConfig.html":{}}}],["multiplestatements",{"_index":1283,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["my_table",{"_index":2834,"title":{},"body":{"injectables/PaginationService.html":{}}}],["mycontext",{"_index":2184,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["myset",{"_index":3317,"title":{},"body":{"classes/UtilsService.html":{}}}],["myset.add(alias",{"_index":3322,"title":{},"body":{"classes/UtilsService.html":{}}}],["myset.has(alias",{"_index":3321,"title":{},"body":{"classes/UtilsService.html":{}}}],["mysql",{"_index":1271,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["n",{"_index":1253,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["name",{"_index":155,"title":{},"body":{"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/BankController.html":{},"classes/BankDto.html":{},"injectables/BankService.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"controllers/CityController.html":{},"classes/CityDto.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ConfigService.html":{},"controllers/ContactController.html":{},"classes/ContactDto.html":{},"modules/ContactModule.html":{},"injectables/ContactService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/Document.html":{},"controllers/DocumentController.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"controllers/DocumentGroupController.html":{},"classes/DocumentGroupDto.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileNotImageException.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/FilterQueryDto.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/State.html":{},"controllers/StateController.html":{},"classes/StateDto.html":{},"injectables/StateService.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["name_plural",{"_index":1723,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/Query-3.html":{}}}],["names",{"_index":2776,"title":{},"body":{"interfaces/IPaginationFieldConfig.html":{},"classes/Query-3.html":{}}}],["native",{"_index":1743,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{}}}],["navigate",{"_index":2724,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["near",{"_index":2749,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["necessary",{"_index":260,"title":{},"body":{"modules/AddressTypeModule.html":{},"modules/BankModule.html":{},"modules/CityModule.html":{},"modules/CountriesModule.html":{},"modules/CountryMasModule.html":{},"modules/CurrenciesModule.html":{},"modules/DocumentGroupModule.html":{},"modules/DocumentModule.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesS3PresignedModule.html":{},"controllers/HomeController.html":{},"modules/StateModule.html":{}}}],["needed",{"_index":1452,"title":{},"body":{"injectables/ContactService.html":{}}}],["needing",{"_index":2644,"title":{},"body":{"modules/HelperModule.html":{}}}],["nest",{"_index":3746,"title":{},"body":{"index.html":{}}}],["nested",{"_index":3188,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["nestederrormessage",{"_index":699,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["nestfactory",{"_index":3600,"title":{},"body":{"miscellaneous/functions.html":{}}}],["nestinterceptor",{"_index":3205,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["nestjs",{"_index":530,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"injectables/FilesService.html":{},"classes/FilterQueryDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/PaginationQueryDto.html":{},"injectables/ResolvePromisesInterceptor.html":{},"classes/SortByDto.html":{},"classes/UserNotFoundException.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["nestjs/axios",{"_index":2647,"title":{},"body":{"modules/HelperModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":198,"title":{},"body":{"controllers/AddressTypeController.html":{},"modules/AddressTypeModule.html":{},"injectables/AddressTypeService.html":{},"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/BankController.html":{},"modules/BankModule.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"modules/CityModule.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"controllers/ContactController.html":{},"modules/ContactModule.html":{},"injectables/ContactService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"modules/CountryMasModule.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"modules/DocumentGroupModule.html":{},"injectables/DocumentGroupService.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"classes/FileNotImageException.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"controllers/StateController.html":{},"modules/StateModule.html":{},"injectables/StateService.html":{},"classes/UserNotFoundException.html":{},"dependencies.html":{}}}],["nestjs/common/utils/random",{"_index":2434,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["nestjs/config",{"_index":606,"title":{},"body":{"modules/AppModule.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"injectables/FilesLocalService.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/HomeService.html":{},"injectables/PrismaService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":411,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":2652,"title":{},"body":{"modules/HelperModule.html":{}}}],["nestjs/mapped",{"_index":3281,"title":{},"body":{"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{}}}],["nestjs/microservices",{"_index":1416,"title":{},"body":{"modules/ContactModule.html":{},"injectables/ContactService.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":2318,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":76,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"controllers/AddressTypeController.html":{},"classes/AddressUpdateDto.html":{},"controllers/AppController.html":{},"controllers/BankController.html":{},"classes/BankDto.html":{},"classes/BankUpdateDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"controllers/CityController.html":{},"classes/CityDto.html":{},"controllers/ContactController.html":{},"classes/ContactDto.html":{},"controllers/CountriesController.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"classes/Currency.html":{},"classes/Document.html":{},"controllers/DocumentController.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"controllers/DocumentGroupController.html":{},"classes/DocumentGroupDto.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"controllers/HomeController.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/State.html":{},"controllers/StateController.html":{},"classes/StateDto.html":{},"classes/UpdateDto.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":492,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/PrismaService.html":{},"dependencies.html":{}}}],["net",{"_index":1450,"title":{},"body":{"injectables/ContactService.html":{}}}],["net.socket",{"_index":1473,"title":{},"body":{"injectables/ContactService.html":{}}}],["new",{"_index":157,"title":{},"body":{"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"classes/CityDto.html":{},"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"injectables/ContactService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"classes/CountryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"classes/DocumentDto.html":{},"controllers/DocumentGroupController.html":{},"classes/DocumentGroupDto.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/FileNotImageException.html":{},"classes/FileType.html":{},"injectables/FilesLocalService.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"controllers/HomeController.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/Query.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryFailedFilter.html":{},"controllers/StateController.html":{},"classes/StateDto.html":{},"injectables/StateService.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"contributing.html":{},"coverage.html":{},"index.html":{}}}],["newly",{"_index":785,"title":{},"body":{"injectables/BankService.html":{},"injectables/DocumentGroupService.html":{}}}],["newobj",{"_index":2944,"title":{},"body":{"injectables/PrismaService.html":{}}}],["newobj[key",{"_index":2949,"title":{},"body":{"injectables/PrismaService.html":{}}}],["next",{"_index":981,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{},"index.html":{}}}],["next.handle().pipe(map((data",{"_index":3211,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["ng",{"_index":2756,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["nice",{"_index":1713,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["nice_name",{"_index":1693,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/Query-2.html":{}}}],["node.js",{"_index":3612,"title":{},"body":{"index.html":{}}}],["node_emailer_from_email",{"_index":1357,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/INodeEmailerConfig.html":{}}}],["node_emailer_host",{"_index":1349,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/INodeEmailerConfig.html":{}}}],["node_emailer_password",{"_index":1355,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/INodeEmailerConfig.html":{}}}],["node_emailer_port",{"_index":1351,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/INodeEmailerConfig.html":{}}}],["node_emailer_to_email",{"_index":1359,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/INodeEmailerConfig.html":{}}}],["node_emailer_user",{"_index":1353,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/INodeEmailerConfig.html":{}}}],["node_env",{"_index":2086,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-3.html":{}}}],["nodeemailerconfig",{"_index":1348,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["nodeenv",{"_index":1185,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-3.html":{}}}],["non",{"_index":2204,"title":{},"body":{"classes/FileNotImageException.html":{}}}],["none",{"_index":2567,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"miscellaneous/enumerations.html":{}}}],["noninfringement",{"_index":3801,"title":{},"body":{"license.html":{}}}],["notes",{"_index":3739,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":3296,"title":{},"body":{"classes/UserNotFoundException.html":{}}}],["nothing",{"_index":329,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["notice",{"_index":3788,"title":{},"body":{"license.html":{}}}],["now",{"_index":940,"title":{},"body":{"injectables/CityService.html":{}}}],["npm",{"_index":3534,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["nul",{"_index":189,"title":{},"body":{"controllers/AddressTypeController.html":{}}}],["null",{"_index":295,"title":{},"body":{"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"classes/Banks.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/HttpErrorFilter.html":{},"classes/PaginationQueryDto.html":{},"injectables/PrismaService.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryCountryDto.html":{},"interfaces/QueryOptions.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{},"classes/UtilsService.html":{}}}],["num_code",{"_index":1694,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/Query-2.html":{}}}],["number",{"_index":64,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"controllers/AppController.html":{},"classes/BankDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ConfigService.html":{},"classes/ContactDto.html":{},"injectables/ContactService.html":{},"classes/Country.html":{},"classes/CountryMas.html":{},"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/Document.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"classes/DocumentGroupDto.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileUploadDto.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"interfaces/IAppConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"interfaces/QueryConfig.html":{},"classes/QueryCountryDto.html":{},"interfaces/QueryOptions.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/State.html":{},"classes/StateDto.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{}}}],["number(strippedvalue",{"_index":2601,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["number(this.get(key",{"_index":1263,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["number(total[0].count",{"_index":2846,"title":{},"body":{"injectables/PaginationService.html":{}}}],["number(value",{"_index":2545,"title":{},"body":{"classes/FilterCountryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortCountryDto.html":{}}}],["numbers",{"_index":961,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"injectables/SortBy.html":{},"classes/UtilsService.html":{}}}],["numbervalue",{"_index":2600,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["numeric",{"_index":3584,"title":{},"body":{"miscellaneous/functions.html":{}}}],["o",{"_index":562,"title":{},"body":{"controllers/AppController.html":{}}}],["obj",{"_index":3579,"title":{},"body":{"miscellaneous/functions.html":{}}}],["object",{"_index":12,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"classes/AddressUpdateDto.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/BankController.html":{},"classes/BankDto.html":{},"injectables/BankService.html":{},"classes/BankUpdateDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"controllers/CityController.html":{},"classes/CityDto.html":{},"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ContactDto.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/Document.html":{},"controllers/DocumentController.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"controllers/DocumentGroupController.html":{},"classes/DocumentGroupDto.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/FilterQueryDto.html":{},"controllers/HomeController.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/PaginationQueryDto.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{},"classes/SortByDto.html":{},"classes/State.html":{},"controllers/StateController.html":{},"classes/StateDto.html":{},"injectables/StateService.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{}}}],["object.assign",{"_index":2945,"title":{},"body":{"injectables/PrismaService.html":{}}}],["object.defineproperty(pagination",{"_index":2823,"title":{},"body":{"classes/PaginationResponseDto.html":{}}}],["object.entries(newobj",{"_index":2946,"title":{},"body":{"injectables/PrismaService.html":{}}}],["object.entries(updatedata",{"_index":1091,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["object.keys(conditions).map",{"_index":1984,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["object.keys(conditions).map((key",{"_index":1969,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["object.keys(conds",{"_index":1078,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["object.keys(data).filter((key",{"_index":3035,"title":{},"body":{"classes/Query-2.html":{}}}],["object.keys(optionalconditions).foreach((key",{"_index":1973,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["object.keys(payload).length",{"_index":1789,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["object.keys(process.env",{"_index":1259,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["object.keys(updatedata).map",{"_index":3113,"title":{},"body":{"classes/Query-4.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{}}}],["object.keys(updatedto).length",{"_index":327,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["object.keys(values).length",{"_index":1985,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["object.keys(values).map((key",{"_index":1983,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["object.keys(where)[object.keys(where).length",{"_index":3014,"title":{},"body":{"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{}}}],["object.values(conditions",{"_index":1988,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["object.values(values",{"_index":1987,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["objects",{"_index":409,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"controllers/CountriesController.html":{},"classes/FilterQueryDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/PaginationQueryDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"interfaces/QueryConfig.html":{},"classes/QueryFailedFilter.html":{},"classes/SortByDto.html":{},"miscellaneous/typealiases.html":{}}}],["observable",{"_index":3203,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["obtaining",{"_index":3768,"title":{},"body":{"license.html":{}}}],["occurred",{"_index":1483,"title":{},"body":{"injectables/ContactService.html":{},"classes/Query.html":{},"classes/Query-1.html":{}}}],["occurs",{"_index":309,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["office",{"_index":48,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{}}}],["offset",{"_index":1606,"title":{},"body":{"classes/Country.html":{},"injectables/PaginationService.html":{}}}],["offset_in_minutes",{"_index":1607,"title":{},"body":{"classes/Country.html":{}}}],["ok",{"_index":502,"title":{},"body":{"controllers/AppController.html":{}}}],["one",{"_index":587,"title":{},"body":{"controllers/AppController.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/SortByDto.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["onmoduledestroy",{"_index":1439,"title":{},"body":{"injectables/ContactService.html":{},"injectables/PrismaService.html":{}}}],["onmoduleinit",{"_index":2912,"title":{},"body":{"injectables/PrismaService.html":{}}}],["open",{"_index":3373,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["operation",{"_index":369,"title":{},"body":{"classes/AddressUpdateDto.html":{},"classes/BankUpdateDto.html":{},"classes/DynamicQueryBuilder.html":{},"classes/PrismaClientExceptionFilter.html":{},"interfaces/QueryOptions.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{}}}],["operations",{"_index":259,"title":{},"body":{"modules/AddressTypeModule.html":{},"injectables/AddressTypeService.html":{},"modules/BankModule.html":{},"injectables/BankService.html":{},"modules/CityModule.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService-1.html":{},"modules/CountryMasModule.html":{},"injectables/CurrenciesService.html":{},"modules/DocumentGroupModule.html":{},"injectables/DocumentGroupService.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/FileResponseDto-2.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"injectables/PrismaService.html":{},"classes/Query-10.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryOptions.html":{},"modules/StateModule.html":{},"injectables/StateService.html":{}}}],["operator",{"_index":2550,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{}}}],["opinionated",{"_index":3656,"title":{},"body":{"index.html":{}}}],["optional",{"_index":38,"title":{},"body":{"classes/AddresTypeDto.html":{},"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"classes/AddressUpdateDto.html":{},"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/BankController.html":{},"classes/BankDto.html":{},"injectables/BankService.html":{},"classes/BankUpdateDto.html":{},"classes/Banks.html":{},"controllers/CityController.html":{},"classes/CityDto.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ConfigService.html":{},"controllers/ContactController.html":{},"classes/ContactDto.html":{},"injectables/ContactService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"classes/CountryDto.html":{},"classes/CreateCountryDto.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"controllers/DocumentController.html":{},"classes/DocumentDto.html":{},"controllers/DocumentGroupController.html":{},"classes/DocumentGroupDto.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/FileNotImageException.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"controllers/StateController.html":{},"classes/StateDto.html":{},"injectables/StateService.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["optionalconditions",{"_index":1955,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/Query-3.html":{},"interfaces/QueryOptions.html":{}}}],["optionalconditions[key",{"_index":1974,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["options",{"_index":302,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"modules/ContactModule.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"interfaces/QueryOptions.html":{},"classes/SortByDto.html":{},"injectables/StateService.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{}}}],["options.ts",{"_index":2772,"title":{},"body":{"interfaces/IPaginationFieldConfig.html":{},"coverage.html":{}}}],["orchestration",{"_index":3635,"title":{},"body":{"index.html":{}}}],["order",{"_index":2544,"title":{},"body":{"classes/FilterCountryDto.html":{},"injectables/PaginationService.html":{},"classes/QueryCountryDto.html":{},"classes/SortCountryDto.html":{},"classes/UtilsService.html":{}}}],["orderby",{"_index":2543,"title":{},"body":{"classes/FilterCountryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortCountryDto.html":{}}}],["org",{"_index":2182,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["organization",{"_index":2180,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["origin",{"_index":3389,"title":{},"body":{"contributing.html":{}}}],["original",{"_index":3570,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["originalname",{"_index":2710,"title":{},"body":{"interfaces/IFileConfig.html":{}}}],["orm",{"_index":533,"title":{},"body":{"controllers/AppController.html":{},"injectables/PrismaService.html":{},"index.html":{}}}],["otherwise",{"_index":976,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{},"license.html":{}}}],["out",{"_index":254,"title":{},"body":{"modules/AddressTypeModule.html":{},"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/BankModule.html":{},"modules/CityModule.html":{},"modules/ContactModule.html":{},"modules/CountriesModule.html":{},"modules/CountryMasModule.html":{},"modules/CurrenciesModule.html":{},"modules/DocumentGroupModule.html":{},"modules/DocumentModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"modules/StateModule.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["output",{"_index":3578,"title":{},"body":{"miscellaneous/functions.html":{}}}],["outputs",{"_index":2975,"title":{},"body":{"classes/Query.html":{}}}],["overrides",{"_index":2033,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["overview",{"_index":3816,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":3696,"title":{},"body":{"index.html":{}}}],["p2000",{"_index":2892,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["p2002",{"_index":2889,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["p2010",{"_index":2900,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["p2025",{"_index":2896,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["package",{"_index":3498,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":1540,"title":{},"body":{"controllers/CountriesController.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{}}}],["pager",{"_index":2758,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["pages",{"_index":2718,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{}}}],["pagesize",{"_index":2728,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{}}}],["paginate",{"_index":2569,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/SortByDto.html":{},"miscellaneous/enumerations.html":{}}}],["paginate(only",{"_index":2572,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["paginate(selectquery",{"_index":2836,"title":{},"body":{"injectables/PaginationService.html":{}}}],["paginated",{"_index":178,"title":{},"body":{"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{}}}],["paginatedresultdto",{"_index":1554,"title":{},"body":{"controllers/CountriesController.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["pagination",{"_index":175,"title":{},"body":{"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/Query-3.html":{},"classes/SortByDto.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{},"classes/UtilsService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["pagination${classreference.name}responsedto",{"_index":2825,"title":{},"body":{"classes/PaginationResponseDto.html":{}}}],["paginationmetadto",{"_index":2721,"title":{"classes/PaginationMetaDto.html":{}},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"coverage.html":{}}}],["paginationoptions",{"_index":1550,"title":{},"body":{"controllers/CountriesController.html":{}}}],["paginationquery",{"_index":291,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/PaginationService.html":{},"injectables/StateService.html":{},"classes/UtilsService.html":{}}}],["paginationquery.filters",{"_index":3315,"title":{},"body":{"classes/UtilsService.html":{}}}],["paginationquery.sort",{"_index":3316,"title":{},"body":{"classes/UtilsService.html":{}}}],["paginationquerydto",{"_index":171,"title":{"classes/PaginationQueryDto.html":{}},"body":{"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/SortByDto.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{},"classes/UtilsService.html":{},"coverage.html":{}}}],["paginationquerydto.limit",{"_index":2743,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["paginationquerydto.page",{"_index":2744,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["paginationresponse",{"_index":203,"title":{},"body":{"controllers/AddressTypeController.html":{},"controllers/BankController.html":{},"controllers/CityController.html":{},"controllers/CountriesController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"controllers/StateController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["paginationresponse(banks",{"_index":726,"title":{},"body":{"controllers/BankController.html":{}}}],["paginationresponse(cities",{"_index":855,"title":{},"body":{"controllers/CityController.html":{}}}],["paginationresponse(classreference",{"_index":2819,"title":{},"body":{"classes/PaginationResponseDto.html":{},"miscellaneous/functions.html":{}}}],["paginationresponse(country",{"_index":1512,"title":{},"body":{"controllers/CountriesController.html":{}}}],["paginationresponse(countrymas",{"_index":1666,"title":{},"body":{"controllers/CountryController.html":{}}}],["paginationresponse(currency",{"_index":1765,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["paginationresponse(document",{"_index":1852,"title":{},"body":{"controllers/DocumentController.html":{}}}],["paginationresponse(documentgroup",{"_index":1890,"title":{},"body":{"controllers/DocumentGroupController.html":{}}}],["paginationresponse(state",{"_index":3251,"title":{},"body":{"controllers/StateController.html":{}}}],["paginationresponsedto",{"_index":204,"title":{"classes/PaginationResponseDto.html":{}},"body":{"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{},"coverage.html":{}}}],["paginationservice",{"_index":281,"title":{"injectables/PaginationService.html":{}},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"modules/HelperModule.html":{},"injectables/PaginationService.html":{},"injectables/StateService.html":{},"coverage.html":{},"overview.html":{}}}],["paginationservice.paginate",{"_index":2833,"title":{},"body":{"injectables/PaginationService.html":{}}}],["paginationtype",{"_index":2566,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"miscellaneous/enumerations.html":{}}}],["paginationtype.all",{"_index":2573,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["pair",{"_index":1003,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["pairs",{"_index":1007,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["pallette",{"_index":3694,"title":{},"body":{"index.html":{}}}],["param",{"_index":194,"title":{},"body":{"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/FileNotImageException.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"controllers/HomeController.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{}}}],["param('id",{"_index":1850,"title":{},"body":{"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{}}}],["param('id_address_type",{"_index":227,"title":{},"body":{"controllers/AddressTypeController.html":{}}}],["param('id_bank",{"_index":724,"title":{},"body":{"controllers/BankController.html":{}}}],["param('id_city",{"_index":853,"title":{},"body":{"controllers/CityController.html":{}}}],["param('id_country",{"_index":1521,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CountryController.html":{}}}],["param('id_currency",{"_index":1762,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["param('id_state",{"_index":3249,"title":{},"body":{"controllers/StateController.html":{}}}],["parameter",{"_index":177,"title":{},"body":{"controllers/AddressTypeController.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"injectables/PrismaService.html":{},"interfaces/QueryConfig.html":{}}}],["parameterized",{"_index":3328,"title":{},"body":{"classes/UtilsService.html":{}}}],["parameters",{"_index":154,"title":{},"body":{"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ConfigService.html":{},"controllers/ContactController.html":{},"injectables/ContactService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/FileNotImageException.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/FilterQueryDto.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":2742,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"injectables/PrismaService.html":{},"classes/Query-4.html":{},"classes/Query-8.html":{}}}],["parseint(process.env.app_port",{"_index":2114,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["parseint(process.env.max_file_size",{"_index":2150,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["parseint(process.env.port",{"_index":2116,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["parseint(process.env.postgres_max_connections",{"_index":2068,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["parseint(process.env.postgres_pool_timeout",{"_index":2071,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["parseint(process.env.postgres_port",{"_index":2060,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["parseint(value",{"_index":90,"title":{},"body":{"classes/AddresTypeDto.html":{}}}],["parseuuidpipe",{"_index":195,"title":{},"body":{"controllers/AddressTypeController.html":{},"controllers/BankController.html":{},"controllers/CityController.html":{},"controllers/CountriesController.html":{},"controllers/CountryController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"controllers/StateController.html":{}}}],["part.trim",{"_index":1136,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["partial",{"_index":373,"title":{},"body":{"classes/AddressUpdateDto.html":{},"classes/BankUpdateDto.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"miscellaneous/typealiases.html":{}}}],["partial.type",{"_index":1784,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["partial.type.ts",{"_index":3825,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["partialtype",{"_index":375,"title":{},"body":{"classes/AddressUpdateDto.html":{},"classes/BankUpdateDto.html":{},"classes/UpdateDto.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{}}}],["partialtype(addrestypedto",{"_index":377,"title":{},"body":{"classes/AddressUpdateDto.html":{}}}],["partialtype(bankdto",{"_index":796,"title":{},"body":{"classes/BankUpdateDto.html":{}}}],["partialtype(citydto",{"_index":3284,"title":{},"body":{"classes/UpdateDto-2.html":{}}}],["partialtype(countrydto",{"_index":3286,"title":{},"body":{"classes/UpdateDto-3.html":{}}}],["partialtype(createcountrydto",{"_index":3279,"title":{},"body":{"classes/UpdateDto.html":{}}}],["partialtype(createdto",{"_index":3282,"title":{},"body":{"classes/UpdateDto-1.html":{}}}],["partialtype(documentdto",{"_index":3288,"title":{},"body":{"classes/UpdateDto-4.html":{}}}],["partialtype(documentgroupdto",{"_index":3290,"title":{},"body":{"classes/UpdateDto-5.html":{}}}],["partialtype(statedto",{"_index":3292,"title":{},"body":{"classes/UpdateDto-6.html":{}}}],["particular",{"_index":3799,"title":{},"body":{"license.html":{}}}],["particularly",{"_index":2680,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["parts",{"_index":1004,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["parts.length",{"_index":1008,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["pass",{"_index":2821,"title":{},"body":{"classes/PaginationResponseDto.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["passport",{"_index":549,"title":{},"body":{"controllers/AppController.html":{},"classes/Document.html":{},"classes/DocumentDto.html":{}}}],["password",{"_index":1277,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{}}}],["patch",{"_index":196,"title":{},"body":{"controllers/AddressTypeController.html":{},"controllers/BankController.html":{},"controllers/CityController.html":{},"controllers/CountriesController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"controllers/StateController.html":{}}}],["patch(':id",{"_index":1849,"title":{},"body":{"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{}}}],["patch(':id')@httpcode(httpstatus.ok)@apiparam({name",{"_index":1841,"title":{},"body":{"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{}}}],["patch(':id_address_type",{"_index":225,"title":{},"body":{"controllers/AddressTypeController.html":{}}}],["patch(':id_address_type')@httpcode(httpstatus.ok)@apiparam({name",{"_index":186,"title":{},"body":{"controllers/AddressTypeController.html":{}}}],["patch(':id_bank",{"_index":723,"title":{},"body":{"controllers/BankController.html":{}}}],["patch(':id_bank')@httpcode(httpstatus.ok)@apiparam({name",{"_index":712,"title":{},"body":{"controllers/BankController.html":{}}}],["patch(':id_city",{"_index":852,"title":{},"body":{"controllers/CityController.html":{}}}],["patch(':id_city')@httpcode(httpstatus.ok)@apiparam({name",{"_index":842,"title":{},"body":{"controllers/CityController.html":{}}}],["patch(':id_state",{"_index":3248,"title":{},"body":{"controllers/StateController.html":{}}}],["patch(':id_state')@httpcode(httpstatus.ok)@apiparam({name",{"_index":3240,"title":{},"body":{"controllers/StateController.html":{}}}],["patch('updatebyid/:id_country",{"_index":1520,"title":{},"body":{"controllers/CountriesController.html":{}}}],["patch('updatebyid/:id_country')@httpcode(httpstatus.ok)@apiparam({name",{"_index":1503,"title":{},"body":{"controllers/CountriesController.html":{}}}],["patch(`${modules}/:id_country",{"_index":1664,"title":{},"body":{"controllers/CountryController.html":{}}}],["patch(`${modules}/:id_currency",{"_index":1761,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["patch(undefined)@httpcode(httpstatus.ok)@apiparam({name",{"_index":1658,"title":{},"body":{"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{}}}],["patel",{"_index":3758,"title":{},"body":{"index.html":{},"license.html":{}}}],["patel/nestjs",{"_index":3671,"title":{},"body":{"index.html":{}}}],["path",{"_index":425,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["path/to/exception",{"_index":2206,"title":{},"body":{"classes/FileNotImageException.html":{}}}],["path/to/filter",{"_index":2681,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["paths",{"_index":2254,"title":{},"body":{"classes/FileType.html":{}}}],["payload",{"_index":893,"title":{},"body":{"injectables/CityService.html":{},"injectables/CurrenciesService.html":{},"injectables/FilesS3PresignedService.html":{}}}],["payload.code",{"_index":1790,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["payload.id",{"_index":1792,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["payloadtoolargeexception",{"_index":2505,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["per",{"_index":2577,"title":{},"body":{"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["perform",{"_index":1951,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"controllers/HomeController.html":{},"injectables/PaginationService.html":{},"interfaces/QueryOptions.html":{}}}],["performing",{"_index":531,"title":{},"body":{"controllers/AppController.html":{}}}],["performs",{"_index":274,"title":{},"body":{"injectables/AddressTypeService.html":{},"controllers/AppController.html":{},"injectables/BankService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["permission",{"_index":3762,"title":{},"body":{"license.html":{}}}],["permit",{"_index":3783,"title":{},"body":{"license.html":{}}}],["person",{"_index":3767,"title":{},"body":{"license.html":{}}}],["persons",{"_index":3784,"title":{},"body":{"license.html":{}}}],["petersen",{"_index":3684,"title":{},"body":{"index.html":{}}}],["pg",{"_index":3536,"title":{},"body":{"dependencies.html":{}}}],["pgbasequery",{"_index":3068,"title":{},"body":{"classes/Query-3.html":{}}}],["pgbaseselectfield",{"_index":3069,"title":{},"body":{"classes/Query-3.html":{}}}],["pgsqlservice",{"_index":654,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["phone",{"_index":555,"title":{},"body":{"controllers/AppController.html":{}}}],["pino",{"_index":3532,"title":{},"body":{"dependencies.html":{}}}],["plain",{"_index":62,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"classes/ContactDto.html":{},"classes/CountryDto.html":{},"classes/Currency.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/StateDto.html":{},"miscellaneous/functions.html":{}}}],["plaintoinstance",{"_index":2540,"title":{},"body":{"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{}}}],["plaintoinstance(filtercountrydto",{"_index":2546,"title":{},"body":{"classes/FilterCountryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortCountryDto.html":{}}}],["plaintoinstance(filterquerydto",{"_index":2582,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["plaintoinstance(sortbydto",{"_index":2586,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["plaintoinstance(sortcountrydto",{"_index":2548,"title":{},"body":{"classes/FilterCountryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortCountryDto.html":{}}}],["plaintoinstance(sortuserdto",{"_index":2604,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["please",{"_index":3366,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["pluggable",{"_index":3652,"title":{},"body":{"index.html":{}}}],["plural",{"_index":1734,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{}}}],["plus",{"_index":3636,"title":{},"body":{"index.html":{}}}],["pooltimeout",{"_index":2069,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["pop",{"_index":2448,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["port",{"_index":1273,"title":{},"body":{"classes/ConfigService.html":{},"modules/ContactModule.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"interfaces/IAppConfig.html":{}}}],["portions",{"_index":3791,"title":{},"body":{"license.html":{}}}],["possible",{"_index":3376,"title":{},"body":{"contributing.html":{}}}],["post",{"_index":197,"title":{},"body":{"controllers/AddressTypeController.html":{},"controllers/BankController.html":{},"controllers/CityController.html":{},"controllers/ContactController.html":{},"controllers/CountriesController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"controllers/StateController.html":{}}}],["post('create",{"_index":1517,"title":{},"body":{"controllers/CountriesController.html":{}}}],["post('create')@httpcode(httpstatus.ok)@apiokresponse({type",{"_index":1494,"title":{},"body":{"controllers/CountriesController.html":{}}}],["post('upload",{"_index":2339,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["post('v1/upload",{"_index":2479,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["post('v1/upload/s3",{"_index":2414,"title":{},"body":{"controllers/FilesS3Controller.html":{}}}],["post()@httpcode(httpstatus.created)@apicreatedresponse({type",{"_index":151,"title":{},"body":{"controllers/AddressTypeController.html":{},"controllers/BankController.html":{},"controllers/CityController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"controllers/StateController.html":{}}}],["post(`${modules",{"_index":1662,"title":{},"body":{"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{}}}],["post(undefined)@httpcode(httpstatus.ok)@apicreatedresponse({type",{"_index":1652,"title":{},"body":{"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{}}}],["postgres",{"_index":3720,"title":{},"body":{"index.html":{}}}],["postgres_connection_limit",{"_index":2778,"title":{},"body":{"interfaces/IPostgreSQLConfig.html":{}}}],["postgres_host",{"_index":2009,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"interfaces/IPostgreSQLConfig.html":{}}}],["postgres_max_connections",{"_index":2010,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["postgres_name",{"_index":2011,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"interfaces/IPostgreSQLConfig.html":{}}}],["postgres_password",{"_index":2012,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"interfaces/IPostgreSQLConfig.html":{}}}],["postgres_pool_timeout",{"_index":2779,"title":{},"body":{"interfaces/IPostgreSQLConfig.html":{}}}],["postgres_port",{"_index":2013,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"interfaces/IPostgreSQLConfig.html":{}}}],["postgres_schema",{"_index":2780,"title":{},"body":{"interfaces/IPostgreSQLConfig.html":{}}}],["postgres_user",{"_index":2014,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"interfaces/IPostgreSQLConfig.html":{}}}],["postgresql",{"_index":2035,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"index.html":{}}}],["postgresql://${process.env.postgres_user}:${process.env.postgres_password}@${process.env.postgres_host}:${process.env.postgres_port}/${process.env.postgres_name}?connection_limit=${process.env.postgres_max_connections}&pool_timeout=${process.env.postgres_pool_timeout}&schema=${process.env.postgres_schema",{"_index":2057,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["postgresql://${this.get('postgres_user')}:${this.get('postgres_password')}@${this.get('postgres_host')}:${this.get('postgres_port')}/${this.get('postgres_name')}?connection_limit=${this.get('postgres_connection_limit')}&pool_timeout=${this.get('postgres_pool_timeout')}&schema=${this.get('postgres_schema",{"_index":1299,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["powerful",{"_index":3615,"title":{},"body":{"index.html":{}}}],["pre",{"_index":3638,"title":{},"body":{"index.html":{}}}],["precision",{"_index":1738,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{}}}],["preferred",{"_index":948,"title":{},"body":{"injectables/CityService.html":{}}}],["prefix",{"_index":125,"title":{},"body":{"controllers/AddressTypeController.html":{},"controllers/BankController.html":{},"controllers/CityController.html":{},"controllers/ContactController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/HomeService.html":{},"interfaces/IAppConfig.html":{},"controllers/StateController.html":{}}}],["prerequisites",{"_index":3664,"title":{},"body":{"index.html":{}}}],["presence",{"_index":2525,"title":{},"body":{"injectables/FilesS3Service.html":{}}}],["present",{"_index":3841,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["preserves",{"_index":3569,"title":{},"body":{"miscellaneous/functions.html":{}}}],["presigned",{"_index":2124,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"modules/FilesModule.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"miscellaneous/enumerations.html":{}}}],["presigned/dto/file",{"_index":2238,"title":{},"body":{"classes/FileResponseDto-2.html":{},"coverage.html":{}}}],["presigned/dto/file.dto.ts",{"_index":2286,"title":{},"body":{"classes/FileUploadDto.html":{},"coverage.html":{}}}],["presigned/dto/file.dto.ts:23",{"_index":2292,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["presigned/dto/file.dto.ts:35",{"_index":2295,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["presigned/files.controller.ts",{"_index":2453,"title":{},"body":{"controllers/FilesS3PresignedController.html":{},"coverage.html":{}}}],["presigned/files.controller.ts:49",{"_index":2467,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["presigned/files.controller.ts:69",{"_index":2459,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["presigned/files.module",{"_index":2399,"title":{},"body":{"modules/FilesModule.html":{}}}],["presigned/files.module.ts",{"_index":2487,"title":{},"body":{"modules/FilesS3PresignedModule.html":{}}}],["presigned/files.service.ts",{"_index":2494,"title":{},"body":{"injectables/FilesS3PresignedService.html":{},"coverage.html":{}}}],["presigned/files.service.ts:128",{"_index":2502,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["presigned/files.service.ts:26",{"_index":2496,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["presigned/files.service.ts:59",{"_index":2497,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["presigner",{"_index":2270,"title":{},"body":{"classes/FileType.html":{},"injectables/FilesS3PresignedService.html":{},"dependencies.html":{}}}],["prettier",{"_index":3655,"title":{},"body":{"index.html":{}}}],["pretty",{"_index":3538,"title":{},"body":{"dependencies.html":{}}}],["prevent",{"_index":1785,"title":{},"body":{"injectables/CurrenciesService.html":{},"classes/Query.html":{}}}],["primitive",{"_index":3568,"title":{},"body":{"miscellaneous/functions.html":{}}}],["prisma",{"_index":284,"title":{},"body":{"injectables/AddressTypeService.html":{},"controllers/AppController.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/QueryFailedFilter.html":{},"injectables/StateService.html":{},"coverage.html":{},"index.html":{}}}],["prisma's",{"_index":2828,"title":{},"body":{"injectables/PaginationService.html":{}}}],["prisma.io",{"_index":3686,"title":{},"body":{"index.html":{}}}],["prisma.prisma",{"_index":3685,"title":{},"body":{"index.html":{}}}],["prisma.prismaclientknownrequesterror",{"_index":2880,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["prisma.transactionclient",{"_index":2920,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prisma/.../seed1.ts",{"_index":3557,"title":{},"body":{"miscellaneous/functions.html":{}}}],["prisma/client",{"_index":2882,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/QueryFailedFilter.html":{},"dependencies.html":{}}}],["prisma/data/countries",{"_index":3402,"title":{},"body":{"coverage.html":{}}}],["prisma/migration",{"_index":3709,"title":{},"body":{"index.html":{}}}],["prisma/seed.ts",{"_index":3409,"title":{},"body":{"coverage.html":{}}}],["prisma/seed1.ts",{"_index":3411,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["prisma_client",{"_index":632,"title":{},"body":{"modules/AppModule.html":{}}}],["prismaclient",{"_index":2903,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismaclientexceptionfilter",{"_index":2875,"title":{"classes/PrismaClientExceptionFilter.html":{}},"body":{"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"coverage.html":{}}}],["prismaclientknownrequesterror",{"_index":2878,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["prismaconfig",{"_index":1186,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["prismaservice",{"_index":273,"title":{"injectables/PrismaService.html":{}},"body":{"injectables/AddressTypeService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"modules/HelperModule.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"injectables/StateService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":278,"title":{},"body":{"injectables/AddressTypeService.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"injectables/ContactService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/FilesS3PresignedService.html":{},"classes/Query-3.html":{},"interfaces/QueryConfig.html":{},"injectables/StateService.html":{}}}],["process",{"_index":2523,"title":{},"body":{"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["process.cwd",{"_index":1291,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env",{"_index":2144,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["process.env.api_prefix",{"_index":2118,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.app_description",{"_index":2105,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.app_name",{"_index":2103,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.app_port",{"_index":2113,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.app_prefix",{"_index":2108,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.app_version",{"_index":2106,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.aws_access_key_id",{"_index":2145,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["process.env.aws_default_s3_bucket",{"_index":2147,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["process.env.aws_s3_region",{"_index":2148,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["process.env.aws_secret_access_key",{"_index":2146,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["process.env.backend_domain",{"_index":2111,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.database_ca",{"_index":2077,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["process.env.database_cert",{"_index":2080,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["process.env.database_key",{"_index":2078,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["process.env.database_reject_unauthorized",{"_index":2076,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["process.env.database_ssl_enabled",{"_index":2074,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["process.env.database_synchronize",{"_index":2065,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["process.env.file_driver",{"_index":2142,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["process.env.frontend_domain",{"_index":2110,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.logger_app",{"_index":2185,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["process.env.logger_context",{"_index":2183,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["process.env.logger_duration_log_level",{"_index":2193,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["process.env.logger_log_level",{"_index":2189,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["process.env.logger_organization",{"_index":2181,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["process.env.logger_slack_inc_webhook_url",{"_index":2199,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["process.env.max_file_size",{"_index":2149,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["process.env.node_env",{"_index":625,"title":{},"body":{"modules/AppModule.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-3.html":{}}}],["process.env.port",{"_index":2115,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env.postgres_host",{"_index":2058,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["process.env.postgres_max_connections",{"_index":2067,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["process.env.postgres_name",{"_index":2063,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["process.env.postgres_password",{"_index":2062,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["process.env.postgres_pool_timeout",{"_index":2070,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["process.env.postgres_port",{"_index":2059,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["process.env.postgres_schema",{"_index":2072,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["process.env.postgres_user",{"_index":2064,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["process.env.pwd",{"_index":1290,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{}}}],["process.env[envname",{"_index":1260,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["process.env[envname].replace(/\\\\n/g",{"_index":1261,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["process.env[key",{"_index":1262,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-3.html":{}}}],["processed",{"_index":2218,"title":{},"body":{"classes/FileResponseDto.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{}}}],["processing",{"_index":2431,"title":{},"body":{"modules/FilesS3Module.html":{},"index.html":{}}}],["production",{"_index":1248,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["productionbuild",{"_index":3702,"title":{},"body":{"index.html":{}}}],["profile_pic_file_path",{"_index":1375,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IUploadFileConfig.html":{}}}],["profiledestdir",{"_index":3484,"title":{},"body":{"coverage.html":{}}}],["project",{"_index":3362,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["promise",{"_index":159,"title":{},"body":{"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"controllers/AppController.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"injectables/ContactService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query-2.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{},"miscellaneous/functions.html":{}}}],["promise((resolve",{"_index":1471,"title":{},"body":{"injectables/ContactService.html":{}}}],["promise.all",{"_index":2844,"title":{},"body":{"injectables/PaginationService.html":{}}}],["promise.resolve",{"_index":2961,"title":{},"body":{"injectables/PrismaService.html":{}}}],["promise.resolve(1",{"_index":3573,"title":{},"body":{"miscellaneous/functions.html":{}}}],["promise.resolve(2",{"_index":3580,"title":{},"body":{"miscellaneous/functions.html":{}}}],["promise.resolve(3",{"_index":3575,"title":{},"body":{"miscellaneous/functions.html":{}}}],["promise.resolve([2",{"_index":3574,"title":{},"body":{"miscellaneous/functions.html":{}}}],["promises",{"_index":3189,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{},"miscellaneous/functions.html":{}}}],["properties",{"_index":24,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"injectables/AddressTypeService.html":{},"classes/AddressUpdateDto.html":{},"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/BankDto.html":{},"injectables/BankService.html":{},"classes/BankUpdateDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ContactDto.html":{},"injectables/ContactService.html":{},"injectables/CountriesService-1.html":{},"classes/Country.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/Document.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"classes/DocumentGroupDto.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"injectables/FilesS3PresignedService.html":{},"classes/FilterQueryDto.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/State.html":{},"classes/StateDto.html":{},"injectables/StateService.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"miscellaneous/typealiases.html":{}}}],["property",{"_index":60,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"classes/ContactDto.html":{},"classes/Country.html":{},"classes/CountryDto.html":{},"classes/Currency.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/FileResponseDto-1.html":{},"interfaces/IAppConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/State.html":{},"classes/StateDto.html":{},"miscellaneous/functions.html":{}}}],["propertyvalue",{"_index":973,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["props",{"_index":578,"title":{},"body":{"controllers/AppController.html":{}}}],["provide",{"_index":485,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"classes/Country.html":{},"modules/FilesLocalModule.html":{},"classes/HttpErrorFilter.html":{},"classes/State.html":{}}}],["provided",{"_index":26,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"injectables/CountriesService-1.html":{},"classes/CountryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"injectables/CurrenciesService.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/EnvironmentVariablesValidator.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"interfaces/IPaginationFieldConfig.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/Query-10.html":{},"classes/Query-3.html":{},"classes/Query-5.html":{},"classes/StateDto.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["provider",{"_index":2526,"title":{},"body":{"injectables/FilesS3Service.html":{}}}],["providers",{"_index":247,"title":{},"body":{"modules/AddressTypeModule.html":{},"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/BankModule.html":{},"modules/CityModule.html":{},"modules/ContactModule.html":{},"modules/CountriesModule.html":{},"modules/CountryMasModule.html":{},"modules/CurrenciesModule.html":{},"modules/DocumentGroupModule.html":{},"modules/DocumentModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{},"classes/HttpErrorFilter.html":{},"modules/StateModule.html":{},"coverage.html":{},"overview.html":{}}}],["providers/dynamic",{"_index":3090,"title":{},"body":{"classes/Query-3.html":{}}}],["providers/file",{"_index":2329,"title":{},"body":{"controllers/FilesLocalController.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["provides",{"_index":130,"title":{},"body":{"controllers/AddressTypeController.html":{},"modules/AddressTypeModule.html":{},"injectables/AddressTypeService.html":{},"controllers/AppController.html":{},"controllers/BankController.html":{},"modules/BankModule.html":{},"injectables/BankService.html":{},"modules/CityModule.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"modules/CountryMasModule.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"modules/DocumentGroupModule.html":{},"injectables/DocumentGroupService.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"modules/HelperModule.html":{},"injectables/HomeService.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/PaginationMetaDto.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query-10.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"controllers/StateController.html":{},"modules/StateModule.html":{},"injectables/StateService.html":{},"classes/UtilsService.html":{}}}],["ptbl",{"_index":350,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/Query-3.html":{},"injectables/StateService.html":{},"classes/UtilsService.html":{}}}],["ptbl.address_type",{"_index":347,"title":{},"body":{"injectables/AddressTypeService.html":{}}}],["ptbl.code",{"_index":3086,"title":{},"body":{"classes/Query-3.html":{}}}],["ptbl.decimal_digits",{"_index":3088,"title":{},"body":{"classes/Query-3.html":{}}}],["ptbl.dial_code",{"_index":1586,"title":{},"body":{"injectables/CountriesService-1.html":{}}}],["ptbl.id_address_type",{"_index":346,"title":{},"body":{"injectables/AddressTypeService.html":{}}}],["ptbl.id_bank",{"_index":787,"title":{},"body":{"injectables/BankService.html":{}}}],["ptbl.id_city",{"_index":790,"title":{},"body":{"injectables/BankService.html":{},"injectables/CityService.html":{}}}],["ptbl.id_country",{"_index":792,"title":{},"body":{"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/StateService.html":{}}}],["ptbl.id_currency",{"_index":1796,"title":{},"body":{"injectables/CurrenciesService.html":{},"classes/Query-3.html":{}}}],["ptbl.id_document",{"_index":1927,"title":{},"body":{"injectables/DocumentService.html":{}}}],["ptbl.id_document_group",{"_index":1912,"title":{},"body":{"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{}}}],["ptbl.id_state",{"_index":791,"title":{},"body":{"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/StateService.html":{}}}],["ptbl.name",{"_index":788,"title":{},"body":{"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/Query-3.html":{},"injectables/StateService.html":{}}}],["ptbl.rounding",{"_index":3089,"title":{},"body":{"classes/Query-3.html":{}}}],["ptbl.short_name",{"_index":789,"title":{},"body":{"injectables/BankService.html":{}}}],["ptbl.status",{"_index":348,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["ptbl.symbol",{"_index":3087,"title":{},"body":{"classes/Query-3.html":{}}}],["public",{"_index":389,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"modules/FilesS3PresignedModule.html":{},"classes/QueryFailedFilter.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{}}}],["public_route_key",{"_index":3432,"title":{},"body":{"coverage.html":{}}}],["publicroute",{"_index":524,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["publish",{"_index":3777,"title":{},"body":{"license.html":{}}}],["pull",{"_index":3390,"title":{},"body":{"contributing.html":{}}}],["purpose",{"_index":3800,"title":{},"body":{"license.html":{}}}],["purposes",{"_index":1601,"title":{},"body":{"classes/Country.html":{},"controllers/FilesS3Controller.html":{},"classes/State.html":{}}}],["push",{"_index":3388,"title":{},"body":{"contributing.html":{}}}],["put",{"_index":667,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["putobjectcommand",{"_index":2506,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["q",{"_index":3041,"title":{},"body":{"classes/Query-2.html":{}}}],["qq",{"_index":3065,"title":{},"body":{"classes/Query-2.html":{}}}],["qr_image",{"_index":1320,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["qr_image_path",{"_index":1322,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["qr_image_path_salt",{"_index":1324,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["qrconfig",{"_index":1319,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["queries",{"_index":775,"title":{},"body":{"injectables/BankService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"interfaces/IPaginationFieldConfig.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/StateService.html":{},"classes/UtilsService.html":{}}}],["query",{"_index":174,"title":{"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{}},"body":{"controllers/AddressTypeController.html":{},"modules/AddressTypeModule.html":{},"injectables/AddressTypeService.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/BankController.html":{},"modules/BankModule.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"modules/CityModule.html":{},"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"modules/CountryMasModule.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"modules/DocumentGroupModule.html":{},"injectables/DocumentGroupService.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"controllers/FilesS3PresignedController.html":{},"classes/FilterQueryDto.html":{},"classes/HttpErrorFilter.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"classes/SortByDto.html":{},"controllers/StateController.html":{},"modules/StateModule.html":{},"injectables/StateService.html":{},"classes/UtilsService.html":{},"coverage.html":{}}}],["query('expiresin",{"_index":2482,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["query.addhttpqueryerror",{"_index":2970,"title":{},"body":{"classes/Query.html":{}}}],["query.addhttpqueryerror(\"httperror",{"_index":2690,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["query.addqueryerror(\"badrequest",{"_index":684,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["query.service",{"_index":1932,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/Query-3.html":{},"interfaces/QueryOptions.html":{},"coverage.html":{}}}],["query?.filters",{"_index":1547,"title":{},"body":{"controllers/CountriesController.html":{}}}],["query?.limit",{"_index":1543,"title":{},"body":{"controllers/CountriesController.html":{}}}],["query?.page",{"_index":1541,"title":{},"body":{"controllers/CountriesController.html":{}}}],["query?.sort",{"_index":1549,"title":{},"body":{"controllers/CountriesController.html":{}}}],["querybuilder",{"_index":3091,"title":{},"body":{"classes/Query-3.html":{}}}],["queryconfig",{"_index":896,"title":{"interfaces/QueryConfig.html":{}},"body":{"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{},"coverage.html":{}}}],["queryconfig.syntax",{"_index":914,"title":{},"body":{"injectables/CityService.html":{}}}],["queryconfig.syntax(1",{"_index":926,"title":{},"body":{"injectables/CityService.html":{}}}],["queryconfig.syntax(id",{"_index":944,"title":{},"body":{"injectables/CityService.html":{}}}],["querycountrydto",{"_index":1534,"title":{"classes/QueryCountryDto.html":{}},"body":{"controllers/CountriesController.html":{},"classes/FilterCountryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortCountryDto.html":{},"coverage.html":{}}}],["queryfailederror",{"_index":3172,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["queryfailedfilter",{"_index":3164,"title":{"classes/QueryFailedFilter.html":{}},"body":{"classes/QueryFailedFilter.html":{},"coverage.html":{}}}],["queryname",{"_index":1949,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["queryobj",{"_index":2917,"title":{},"body":{"injectables/PrismaService.html":{}}}],["queryobj.syntax",{"_index":2951,"title":{},"body":{"injectables/PrismaService.html":{}}}],["queryobj.type",{"_index":2953,"title":{},"body":{"injectables/PrismaService.html":{}}}],["queryoptions",{"_index":1939,"title":{"interfaces/QueryOptions.html":{}},"body":{"classes/DynamicQueryBuilder.html":{},"classes/Query-3.html":{},"interfaces/QueryOptions.html":{},"coverage.html":{}}}],["querystatements",{"_index":3304,"title":{},"body":{"classes/UtilsService.html":{}}}],["querystatements(basefields",{"_index":3312,"title":{},"body":{"classes/UtilsService.html":{}}}],["querytype",{"_index":1950,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["queue",{"_index":1426,"title":{},"body":{"modules/ContactModule.html":{}}}],["queue1",{"_index":1434,"title":{},"body":{"modules/ContactModule.html":{}}}],["queueoptions",{"_index":1427,"title":{},"body":{"modules/ContactModule.html":{}}}],["quot;base64",{"_index":2473,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["quot;details&quot",{"_index":509,"title":{},"body":{"controllers/AppController.html":{}}}],["quot;error&quot",{"_index":508,"title":{},"body":{"controllers/AppController.html":{}}}],["quot;file&quot",{"_index":2472,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["quot;https://s3.amazonaws.com/bucket/path/to/file?signature&quot",{"_index":2465,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["quot;info&quot",{"_index":505,"title":{},"body":{"controllers/AppController.html":{}}}],["quot;logger&quot",{"_index":515,"title":{},"body":{"controllers/AppController.html":{}}}],["quot;ok&quot",{"_index":504,"title":{},"body":{"controllers/AppController.html":{}}}],["quot;path&quot",{"_index":2475,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["quot;prisma&quot",{"_index":506,"title":{},"body":{"controllers/AppController.html":{}}}],["quot;s3://bucket/path/to/file&quot",{"_index":2476,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["quot;status&quot",{"_index":503,"title":{},"body":{"controllers/AppController.html":{}}}],["quot;up&quot",{"_index":507,"title":{},"body":{"controllers/AppController.html":{}}}],["quot;url&quot",{"_index":2464,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["quotes",{"_index":2968,"title":{},"body":{"classes/Query.html":{}}}],["qux",{"_index":567,"title":{},"body":{"controllers/AppController.html":{}}}],["r",{"_index":660,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["r.error",{"_index":665,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["r.message",{"_index":664,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["r.message[0",{"_index":663,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["r.statuscode",{"_index":673,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["rabbitclient",{"_index":1444,"title":{},"body":{"injectables/ContactService.html":{}}}],["rabbitclient1",{"_index":1442,"title":{},"body":{"injectables/ContactService.html":{}}}],["randomstringgenerator",{"_index":2433,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["randomstringgenerator()}.${file.filename.split('.').pop()?.tolowercase",{"_index":2516,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["randomstringgenerator()}.${file.originalname",{"_index":2447,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["range",{"_index":2748,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["rate",{"_index":3501,"title":{},"body":{"dependencies.html":{}}}],["raw",{"_index":276,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/PrismaService.html":{},"injectables/StateService.html":{}}}],["rbac",{"_index":3649,"title":{},"body":{"index.html":{}}}],["read",{"_index":2493,"title":{},"body":{"modules/FilesS3PresignedModule.html":{},"index.html":{}}}],["readonly",{"_index":216,"title":{},"body":{"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"controllers/AppController.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"controllers/ContactController.html":{},"injectables/ContactService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query-2.html":{},"classes/SortByDto.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{}}}],["ready",{"_index":3645,"title":{},"body":{"index.html":{}}}],["receive",{"_index":2822,"title":{},"body":{"classes/PaginationResponseDto.html":{}}}],["recomandation",{"_index":3667,"title":{},"body":{"index.html":{}}}],["record",{"_index":18,"title":{},"body":{"classes/AddresTypeDto.html":{},"injectables/AddressTypeService.html":{},"classes/BankDto.html":{},"injectables/BankService.html":{},"classes/CityDto.html":{},"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"injectables/CountriesService-1.html":{},"classes/CountryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"injectables/CurrenciesService.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{},"classes/SortByDto.html":{},"classes/StateDto.html":{},"injectables/StateService.html":{},"classes/UtilsService.html":{}}}],["recordexists",{"_index":331,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/DocumentService.html":{}}}],["recordexits",{"_index":894,"title":{},"body":{"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/DocumentGroupService.html":{},"injectables/StateService.html":{}}}],["records",{"_index":135,"title":{},"body":{"controllers/AddressTypeController.html":{},"controllers/BankController.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"controllers/CountryController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentService.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/Query-10.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/SortByDto.html":{},"controllers/StateController.html":{},"classes/UtilsService.html":{}}}],["recursively",{"_index":3194,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["redis",{"_index":3719,"title":{},"body":{"index.html":{}}}],["redis://localhost:6379",{"_index":1431,"title":{},"body":{"modules/ContactModule.html":{}}}],["redisswagger",{"_index":3721,"title":{},"body":{"index.html":{}}}],["ref",{"_index":2629,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["refactor",{"_index":3733,"title":{},"body":{"index.html":{}}}],["reference",{"_index":2818,"title":{},"body":{"classes/PaginationResponseDto.html":{},"miscellaneous/functions.html":{}}}],["reflect",{"_index":3540,"title":{},"body":{"dependencies.html":{}}}],["reflection",{"_index":395,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["reflector",{"_index":390,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["region",{"_index":2128,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["registeras",{"_index":2048,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{}}}],["registeras('app",{"_index":2102,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["registeras('database",{"_index":2056,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["registeras('file",{"_index":2140,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["registeras('logger",{"_index":2179,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["registers",{"_index":2054,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{}}}],["registration",{"_index":2053,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"index.html":{}}}],["regular",{"_index":1009,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["reject",{"_index":2024,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["rejectunauthorized",{"_index":2075,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["related",{"_index":129,"title":{},"body":{"controllers/AddressTypeController.html":{},"modules/AddressTypeModule.html":{},"injectables/AddressTypeService.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"controllers/BankController.html":{},"modules/BankModule.html":{},"injectables/BankService.html":{},"modules/CityModule.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService-1.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"modules/CountryMasModule.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"modules/DocumentGroupModule.html":{},"injectables/DocumentGroupService.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"classes/QueryFailedFilter.html":{},"classes/State.html":{},"controllers/StateController.html":{},"modules/StateModule.html":{},"injectables/StateService.html":{}}}],["relational",{"_index":3651,"title":{},"body":{"index.html":{}}}],["release",{"_index":3358,"title":{},"body":{"changelog.html":{}}}],["relevant",{"_index":2236,"title":{},"body":{"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{}}}],["remarks",{"_index":2650,"title":{},"body":{"modules/HelperModule.html":{},"injectables/PaginationService.html":{}}}],["remove",{"_index":1088,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["remove.ts",{"_index":1933,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/FilterCountryDto.html":{},"classes/QueryCountryDto.html":{},"interfaces/QueryOptions.html":{},"classes/SortCountryDto.html":{},"coverage.html":{}}}],["remove.ts:116",{"_index":1943,"title":{},"body":{"classes/DynamicQueryBuilder.html":{}}}],["remove.ts:14",{"_index":3221,"title":{},"body":{"classes/SortCountryDto.html":{}}}],["remove.ts:145",{"_index":1945,"title":{},"body":{"classes/DynamicQueryBuilder.html":{}}}],["remove.ts:18",{"_index":3219,"title":{},"body":{"classes/SortCountryDto.html":{}}}],["remove.ts:195",{"_index":1947,"title":{},"body":{"classes/DynamicQueryBuilder.html":{}}}],["remove.ts:235",{"_index":1940,"title":{},"body":{"classes/DynamicQueryBuilder.html":{}}}],["remove.ts:26",{"_index":3161,"title":{},"body":{"classes/QueryCountryDto.html":{}}}],["remove.ts:32",{"_index":3160,"title":{},"body":{"classes/QueryCountryDto.html":{}}}],["remove.ts:41",{"_index":3158,"title":{},"body":{"classes/QueryCountryDto.html":{}}}],["remove.ts:50",{"_index":3163,"title":{},"body":{"classes/QueryCountryDto.html":{}}}],["removefile",{"_index":3485,"title":{},"body":{"coverage.html":{}}}],["repeat",{"_index":2757,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["replace",{"_index":954,"title":{},"body":{"injectables/CityService.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["reporting",{"_index":3371,"title":{},"body":{"contributing.html":{}}}],["repository",{"_index":3380,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["representation",{"_index":63,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ContactDto.html":{},"classes/CountryDto.html":{},"classes/Currency.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"interfaces/QueryConfig.html":{},"classes/StateDto.html":{}}}],["representing",{"_index":1593,"title":{},"body":{"classes/Country.html":{},"classes/FileResponseDto-1.html":{},"classes/FileType.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/Query.html":{},"classes/SortByDto.html":{},"classes/State.html":{},"miscellaneous/enumerations.html":{}}}],["represents",{"_index":9,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"classes/AddressUpdateDto.html":{},"classes/BankDto.html":{},"classes/BankUpdateDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"classes/Country.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/Document.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"classes/DocumentGroupDto.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/State.html":{},"classes/StateDto.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"miscellaneous/typealiases.html":{}}}],["reqdata",{"_index":2978,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["reqescvalue",{"_index":2984,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["reqescvalue.replace(/'/g",{"_index":2986,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["reqstr",{"_index":679,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["reqstrobj",{"_index":686,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{}}}],["request",{"_index":128,"title":{},"body":{"controllers/AddressTypeController.html":{},"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/ContactService.html":{},"classes/FileType.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"modules/HomeModule.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResolvePromisesInterceptor.html":{},"contributing.html":{},"dependencies.html":{}}}],["request.filter.ts",{"_index":636,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"coverage.html":{}}}],["request.filter.ts:27",{"_index":640,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["request.filter.ts:34",{"_index":641,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["request.filter.ts:43",{"_index":650,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["request.filter.ts:93",{"_index":644,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["request.method",{"_index":685,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["request.url",{"_index":426,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["requested",{"_index":3300,"title":{},"body":{"classes/UserNotFoundException.html":{}}}],["requests",{"_index":490,"title":{},"body":{"controllers/AppController.html":{},"controllers/BankController.html":{},"controllers/CountriesController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"modules/FilesLocalModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"controllers/StateController.html":{},"contributing.html":{}}}],["require",{"_index":3334,"title":{},"body":{"classes/UtilsService.html":{}}}],["require_tld",{"_index":1232,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{}}}],["required",{"_index":156,"title":{},"body":{"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"classes/AddressUpdateDto.html":{},"controllers/BankController.html":{},"classes/BankDto.html":{},"injectables/BankService.html":{},"classes/BankUpdateDto.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileUploadDto.html":{},"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/SortByDto.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{}}}],["requirements",{"_index":2536,"title":{},"body":{"injectables/FilesService.html":{}}}],["requrest",{"_index":658,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["res",{"_index":692,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{}}}],["resdata",{"_index":2979,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["resescvalue",{"_index":2985,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["resescvalue.replace(/'/g",{"_index":2987,"title":{},"body":{"classes/Query.html":{},"classes/Query-1.html":{}}}],["reset",{"_index":253,"title":{},"body":{"modules/AddressTypeModule.html":{},"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/BankModule.html":{},"modules/CityModule.html":{},"modules/ContactModule.html":{},"modules/CountriesModule.html":{},"modules/CountryMasModule.html":{},"modules/CurrenciesModule.html":{},"modules/DocumentGroupModule.html":{},"modules/DocumentModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{},"modules/StateModule.html":{},"overview.html":{}}}],["resolve(false",{"_index":1481,"title":{},"body":{"injectables/ContactService.html":{}}}],["resolve(true",{"_index":1479,"title":{},"body":{"injectables/ContactService.html":{}}}],["resolved",{"_index":3191,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["resolvepromisesinterceptor",{"_index":3185,"title":{"injectables/ResolvePromisesInterceptor.html":{}},"body":{"injectables/ResolvePromisesInterceptor.html":{},"coverage.html":{}}}],["resolver",{"_index":3210,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["resolver.ts",{"_index":3489,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["resolves",{"_index":510,"title":{},"body":{"controllers/AppController.html":{},"controllers/CountriesController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"injectables/FilesS3Service.html":{},"injectables/ResolvePromisesInterceptor.html":{},"miscellaneous/functions.html":{}}}],["resolving",{"_index":3571,"title":{},"body":{"miscellaneous/functions.html":{}}}],["response",{"_index":408,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/CountriesController.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PaginationResponseDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResolvePromisesInterceptor.html":{},"miscellaneous/functions.html":{}}}],["response.dto",{"_index":206,"title":{},"body":{"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/PaginationService.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{}}}],["response.dto.ts",{"_index":2217,"title":{},"body":{"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/PaginationResponseDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["response.dto.ts:21",{"_index":2811,"title":{},"body":{"classes/PaginationResponseDto.html":{}}}],["response.dto.ts:27",{"_index":2220,"title":{},"body":{"classes/FileResponseDto.html":{},"classes/FileResponseDto-2.html":{}}}],["response.dto.ts:30",{"_index":2813,"title":{},"body":{"classes/PaginationResponseDto.html":{}}}],["response.dto.ts:34",{"_index":2234,"title":{},"body":{"classes/FileResponseDto-1.html":{}}}],["response.dto.ts:39",{"_index":2812,"title":{},"body":{"classes/PaginationResponseDto.html":{}}}],["response.dto.ts:41",{"_index":2245,"title":{},"body":{"classes/FileResponseDto-2.html":{}}}],["response.sendfile(path",{"_index":2348,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["response.status(status).json",{"_index":2698,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["response.status(status).json(errorresponse",{"_index":430,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["response.status(statuscode).json(r",{"_index":675,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["response_serialization_meta_key",{"_index":3433,"title":{},"body":{"coverage.html":{}}}],["responses",{"_index":143,"title":{},"body":{"controllers/AddressTypeController.html":{},"controllers/BankController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"classes/FileResponseDto-1.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"controllers/StateController.html":{}}}],["responsible",{"_index":136,"title":{},"body":{"controllers/AddressTypeController.html":{},"modules/AddressTypeModule.html":{},"injectables/AddressTypeService.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/BankController.html":{},"modules/BankModule.html":{},"injectables/BankService.html":{},"modules/CityModule.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"modules/CountryMasModule.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"modules/DocumentGroupModule.html":{},"injectables/DocumentGroupService.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"injectables/FilesService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"controllers/StateController.html":{},"modules/StateModule.html":{},"injectables/StateService.html":{}}}],["resstr",{"_index":681,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["resstrobj",{"_index":691,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{}}}],["restriction",{"_index":3772,"title":{},"body":{"license.html":{}}}],["result",{"_index":92,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"controllers/AddressTypeController.html":{},"modules/AddressTypeModule.html":{},"injectables/AddressTypeService.html":{},"classes/AddressUpdateDto.html":{},"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/BankController.html":{},"classes/BankDto.html":{},"modules/BankModule.html":{},"injectables/BankService.html":{},"classes/BankUpdateDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"controllers/CityController.html":{},"classes/CityDto.html":{},"modules/CityModule.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ConfigService.html":{},"controllers/ContactController.html":{},"classes/ContactDto.html":{},"modules/ContactModule.html":{},"injectables/ContactService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService-1.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"modules/CountryMasModule.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/Document.html":{},"controllers/DocumentController.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"controllers/DocumentGroupController.html":{},"classes/DocumentGroupDto.html":{},"modules/DocumentGroupModule.html":{},"injectables/DocumentGroupService.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/State.html":{},"controllers/StateController.html":{},"classes/StateDto.html":{},"modules/StateModule.html":{},"injectables/StateService.html":{},"classes/UpdateDto.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"changelog.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["results",{"_index":94,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"controllers/AddressTypeController.html":{},"modules/AddressTypeModule.html":{},"injectables/AddressTypeService.html":{},"classes/AddressUpdateDto.html":{},"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/BankController.html":{},"classes/BankDto.html":{},"modules/BankModule.html":{},"injectables/BankService.html":{},"classes/BankUpdateDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"controllers/CityController.html":{},"classes/CityDto.html":{},"modules/CityModule.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ConfigService.html":{},"controllers/ContactController.html":{},"classes/ContactDto.html":{},"modules/ContactModule.html":{},"injectables/ContactService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService-1.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"modules/CountryMasModule.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/Document.html":{},"controllers/DocumentController.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"controllers/DocumentGroupController.html":{},"classes/DocumentGroupDto.html":{},"modules/DocumentGroupModule.html":{},"injectables/DocumentGroupService.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/State.html":{},"controllers/StateController.html":{},"classes/StateDto.html":{},"modules/StateModule.html":{},"injectables/StateService.html":{},"classes/UpdateDto.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"changelog.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["retrieval",{"_index":2524,"title":{},"body":{"injectables/FilesS3Service.html":{},"injectables/PaginationService.html":{}}}],["retrievals",{"_index":2355,"title":{},"body":{"modules/FilesLocalModule.html":{}}}],["retrieve",{"_index":133,"title":{},"body":{"controllers/AddressTypeController.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{}}}],["retrieves",{"_index":229,"title":{},"body":{"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/HomeService.html":{},"injectables/StateService.html":{}}}],["retrieving",{"_index":266,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"modules/FilesLocalModule.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesService.html":{},"injectables/HomeService.html":{},"injectables/PrismaService.html":{},"classes/Query-10.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"injectables/StateService.html":{}}}],["return",{"_index":221,"title":{},"body":{"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"controllers/AppController.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ConfigService.html":{},"controllers/ContactController.html":{},"injectables/ContactService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileType.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"controllers/HomeController.html":{},"injectables/HomeService.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryCountryDto.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{},"classes/UtilsService.html":{}}}],["returned",{"_index":501,"title":{},"body":{"controllers/AppController.html":{},"classes/FileResponseDto.html":{}}}],["returning",{"_index":1084,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/DynamicQueryBuilder.html":{},"classes/FileResponseDto-1.html":{},"controllers/FilesS3Controller.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{}}}],["returningclause",{"_index":1964,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["returningfields",{"_index":1956,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/Query-3.html":{},"interfaces/QueryOptions.html":{}}}],["returningfields.join",{"_index":1966,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["returningfields.length",{"_index":1965,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["returns",{"_index":158,"title":{},"body":{"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ConfigService.html":{},"controllers/ContactController.html":{},"injectables/ContactService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"controllers/HomeController.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{}}}],["right",{"_index":3623,"title":{},"body":{"index.html":{}}}],["rights",{"_index":3774,"title":{},"body":{"license.html":{}}}],["root",{"_index":599,"title":{},"body":{"modules/AppModule.html":{},"controllers/FilesLocalController.html":{},"controllers/HomeController.html":{}}}],["rounding",{"_index":1724,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/Query-3.html":{}}}],["route",{"_index":218,"title":{},"body":{"controllers/AddressTypeController.html":{},"controllers/AppController.html":{},"controllers/BankController.html":{},"controllers/CityController.html":{},"controllers/CountriesController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"controllers/StateController.html":{}}}],["rows",{"_index":2952,"title":{},"body":{"injectables/PrismaService.html":{}}}],["rows[0",{"_index":2955,"title":{},"body":{"injectables/PrismaService.html":{}}}],["rsa256",{"_index":3647,"title":{},"body":{"index.html":{}}}],["rules",{"_index":21,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"classes/CountryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/StateDto.html":{}}}],["run",{"_index":3397,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["running",{"_index":2702,"title":{},"body":{"interfaces/IAppConfig.html":{},"contributing.html":{},"index.html":{}}}],["rupee",{"_index":1618,"title":{},"body":{"classes/Country.html":{},"classes/CreateDto.html":{},"classes/Currency.html":{}}}],["rupees",{"_index":1735,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{}}}],["rxjs",{"_index":3206,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":3208,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["s",{"_index":561,"title":{},"body":{"controllers/AppController.html":{}}}],["s.trim",{"_index":2866,"title":{},"body":{"injectables/PaginationService.html":{}}}],["s3",{"_index":2123,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["s3://bucket/path/to/file",{"_index":2471,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["s3_presigned",{"_index":2263,"title":{},"body":{"classes/FileType.html":{},"miscellaneous/enumerations.html":{}}}],["s3client",{"_index":2266,"title":{},"body":{"classes/FileType.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["safe",{"_index":1060,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["same",{"_index":305,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["sanitization",{"_index":2916,"title":{},"body":{"injectables/PrismaService.html":{}}}],["sanitized",{"_index":2918,"title":{},"body":{"injectables/PrismaService.html":{}}}],["sbi",{"_index":762,"title":{},"body":{"classes/BankDto.html":{},"classes/Banks.html":{}}}],["scalable",{"_index":3618,"title":{},"body":{"index.html":{}}}],["scanning",{"_index":3662,"title":{},"body":{"index.html":{}}}],["schema",{"_index":2030,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"miscellaneous/functions.html":{}}}],["scope",{"_index":3729,"title":{},"body":{"index.html":{}}}],["script",{"_index":3712,"title":{},"body":{"index.html":{}}}],["sdk/client",{"_index":2267,"title":{},"body":{"classes/FileType.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"dependencies.html":{}}}],["sdk/s3",{"_index":2269,"title":{},"body":{"classes/FileType.html":{},"injectables/FilesS3PresignedService.html":{},"dependencies.html":{}}}],["search",{"_index":3007,"title":{},"body":{"classes/Query-10.html":{},"classes/Query-3.html":{},"classes/Query-5.html":{},"index.html":{}}}],["seconds",{"_index":2463,"title":{},"body":{"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{}}}],["secret",{"_index":1327,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"interfaces/IJWTConfig.html":{}}}],["secretaccesskey",{"_index":1383,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileType.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"interfaces/IFileConfig.html":{}}}],["secure",{"_index":3640,"title":{},"body":{"index.html":{}}}],["securely",{"_index":2248,"title":{},"body":{"classes/FileResponseDto-2.html":{}}}],["see",{"_index":1510,"title":{},"body":{"controllers/CountriesController.html":{}}}],["seed",{"_index":3410,"title":{},"body":{"coverage.html":{}}}],["select",{"_index":904,"title":{},"body":{"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"injectables/CurrenciesService.html":{},"classes/DynamicQueryBuilder.html":{},"interfaces/IPaginationFieldConfig.html":{},"injectables/PaginationService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{}}}],["select_one",{"_index":1043,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/DynamicQueryBuilder.html":{},"injectables/PrismaService.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{}}}],["select_with_dynamic_join",{"_index":1145,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["selected",{"_index":1057,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/Query-3.html":{},"interfaces/QueryConfig.html":{}}}],["selectedfields",{"_index":3338,"title":{},"body":{"classes/UtilsService.html":{}}}],["selectfields",{"_index":903,"title":{},"body":{"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentService.html":{},"interfaces/IPaginationFieldConfig.html":{},"injectables/PaginationService.html":{},"interfaces/QueryConfig.html":{},"injectables/StateService.html":{},"classes/UtilsService.html":{}}}],["selectfields.join",{"_index":2850,"title":{},"body":{"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["selectfields.length",{"_index":3339,"title":{},"body":{"classes/UtilsService.html":{}}}],["selectfields.push(...config.selectfields(alias",{"_index":3325,"title":{},"body":{"classes/UtilsService.html":{}}}],["selectfile",{"_index":2379,"title":{},"body":{"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{}}}],["selecting",{"_index":2775,"title":{},"body":{"interfaces/IPaginationFieldConfig.html":{},"classes/Query-3.html":{}}}],["selectoptions",{"_index":3093,"title":{},"body":{"classes/Query-3.html":{}}}],["selectquery",{"_index":355,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/PaginationService.html":{},"injectables/StateService.html":{},"classes/UtilsService.html":{}}}],["sell",{"_index":3781,"title":{},"body":{"license.html":{}}}],["send",{"_index":1456,"title":{},"body":{"injectables/ContactService.html":{}}}],["sender_id",{"_index":1366,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/ISMSConfig.html":{}}}],["sendgrid_api_key",{"_index":1340,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/ISendGridConfig.html":{}}}],["sendgridconfig",{"_index":1339,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["sent",{"_index":1463,"title":{},"body":{"injectables/ContactService.html":{},"injectables/ResolvePromisesInterceptor.html":{}}}],["separate",{"_index":3597,"title":{},"body":{"miscellaneous/functions.html":{}}}],["separated",{"_index":960,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["sequelize",{"_index":951,"title":{},"body":{"injectables/CityService.html":{}}}],["serialized",{"_index":2982,"title":{},"body":{"classes/Query.html":{}}}],["server",{"_index":429,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/FileResponseDto-2.html":{},"classes/HttpErrorFilter.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["serves",{"_index":454,"title":{},"body":{"modules/ApiModule.html":{},"classes/Country.html":{},"classes/State.html":{}}}],["service",{"_index":359,"title":{},"body":{"injectables/AddressTypeService.html":{},"controllers/AppController.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"classes/ConfigService.html":{},"injectables/CountriesService-1.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/EnvVarAppConfigValidator.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"index.html":{}}}],["service's",{"_index":2534,"title":{},"body":{"injectables/FilesService.html":{}}}],["servicecommit",{"_index":3728,"title":{},"body":{"index.html":{}}}],["services",{"_index":261,"title":{},"body":{"modules/AddressTypeModule.html":{},"modules/BankModule.html":{},"modules/CityModule.html":{},"modules/CountriesModule.html":{},"modules/CountryMasModule.html":{},"modules/DocumentGroupModule.html":{},"modules/DocumentModule.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/StateModule.html":{},"index.html":{}}}],["services/comman.query",{"_index":2649,"title":{},"body":{"modules/HelperModule.html":{}}}],["services/config.service",{"_index":2648,"title":{},"body":{"modules/HelperModule.html":{},"injectables/PrismaService.html":{}}}],["services/encryption.service",{"_index":2654,"title":{},"body":{"modules/HelperModule.html":{}}}],["services/pagination.service",{"_index":889,"title":{},"body":{"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentService.html":{},"modules/HelperModule.html":{}}}],["services/prisma.service",{"_index":523,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"modules/HelperModule.html":{},"injectables/PaginationService.html":{},"injectables/StateService.html":{}}}],["services/task.service",{"_index":2656,"title":{},"body":{"modules/HelperModule.html":{}}}],["services/util.service",{"_index":890,"title":{},"body":{"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentService.html":{},"modules/HelperModule.html":{}}}],["set",{"_index":580,"title":{},"body":{"controllers/AppController.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"injectables/ContactService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{}}}],["setclauses",{"_index":1090,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/DynamicQueryBuilder.html":{},"classes/Query-4.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{}}}],["setclauses.join",{"_index":1986,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"classes/Query-4.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryOptions.html":{}}}],["setcolumnwithvalue",{"_index":3037,"title":{},"body":{"classes/Query-2.html":{}}}],["sets",{"_index":449,"title":{},"body":{"modules/ApiModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"miscellaneous/functions.html":{}}}],["setting",{"_index":3627,"title":{},"body":{"index.html":{}}}],["settings",{"_index":2036,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"interfaces/IAppConfig.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["several",{"_index":447,"title":{},"body":{"modules/ApiModule.html":{}}}],["sf",{"_index":826,"title":{},"body":{"classes/Cities.html":{}}}],["sh",{"_index":3398,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["shall",{"_index":3789,"title":{},"body":{"license.html":{}}}],["shared/services/sql.service",{"_index":2683,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["shift",{"_index":3695,"title":{},"body":{"index.html":{}}}],["short",{"_index":761,"title":{},"body":{"classes/BankDto.html":{},"classes/Banks.html":{},"index.html":{}}}],["short_name",{"_index":738,"title":{},"body":{"classes/BankDto.html":{},"classes/Banks.html":{},"classes/Query-7.html":{}}}],["side",{"_index":3619,"title":{},"body":{"index.html":{}}}],["signed",{"_index":2240,"title":{},"body":{"classes/FileResponseDto-2.html":{}}}],["signedurl",{"_index":2519,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["simple",{"_index":2927,"title":{},"body":{"injectables/PrismaService.html":{}}}],["single",{"_index":233,"title":{},"body":{"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/Query.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{},"index.html":{}}}],["size",{"_index":2136,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileUploadDto.html":{},"injectables/FilesS3PresignedService.html":{},"interfaces/IFileConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["slack_webhook",{"_index":2198,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["smooth",{"_index":3368,"title":{},"body":{"contributing.html":{}}}],["sms_provider_name",{"_index":1362,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/ISMSConfig.html":{}}}],["smsconfig",{"_index":1361,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["socket",{"_index":1472,"title":{},"body":{"injectables/ContactService.html":{}}}],["socket.connect(this.consumerport",{"_index":1484,"title":{},"body":{"injectables/ContactService.html":{}}}],["socket.destroy",{"_index":1477,"title":{},"body":{"injectables/ContactService.html":{}}}],["socket.on('connect",{"_index":1476,"title":{},"body":{"injectables/ContactService.html":{}}}],["socket.on('error",{"_index":1480,"title":{},"body":{"injectables/ContactService.html":{}}}],["socket.on('timeout",{"_index":1482,"title":{},"body":{"injectables/ContactService.html":{}}}],["socket.settimeout(2000",{"_index":1474,"title":{},"body":{"injectables/ContactService.html":{}}}],["soft",{"_index":1957,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["software",{"_index":3770,"title":{},"body":{"license.html":{}}}],["solutions",{"_index":2395,"title":{},"body":{"modules/FilesModule.html":{}}}],["something",{"_index":322,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["somewhere",{"_index":2750,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["sort",{"_index":1560,"title":{},"body":{"controllers/CountriesController.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UtilsService.html":{}}}],["sort.length",{"_index":3330,"title":{},"body":{"classes/UtilsService.html":{}}}],["sortby",{"_index":996,"title":{"injectables/SortBy.html":{}},"body":{"injectables/CommaSeparated.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"coverage.html":{}}}],["sortbydto",{"_index":2584,"title":{"classes/SortByDto.html":{}},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"coverage.html":{}}}],["sortbyquery",{"_index":1799,"title":{},"body":{"injectables/CurrenciesService.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["sortconditions",{"_index":2864,"title":{},"body":{"injectables/PaginationService.html":{}}}],["sortcountrydto",{"_index":2542,"title":{"classes/SortCountryDto.html":{}},"body":{"classes/FilterCountryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortCountryDto.html":{},"coverage.html":{}}}],["sorting",{"_index":2583,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"classes/UtilsService.html":{}}}],["sortitem.direction",{"_index":3337,"title":{},"body":{"classes/UtilsService.html":{}}}],["sortitem.field.tolowercase",{"_index":3332,"title":{},"body":{"classes/UtilsService.html":{}}}],["sortoptions",{"_index":1548,"title":{},"body":{"controllers/CountriesController.html":{}}}],["sortquery",{"_index":2862,"title":{},"body":{"injectables/PaginationService.html":{}}}],["sortuserdto",{"_index":2605,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"controllers/AddressTypeController.html":{},"modules/AddressTypeModule.html":{},"injectables/AddressTypeService.html":{},"classes/AddressUpdateDto.html":{},"classes/AllExceptionsFilter.html":{},"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/BankController.html":{},"classes/BankDto.html":{},"modules/BankModule.html":{},"injectables/BankService.html":{},"classes/BankUpdateDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"controllers/CityController.html":{},"classes/CityDto.html":{},"modules/CityModule.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ConfigService.html":{},"controllers/ContactController.html":{},"classes/ContactDto.html":{},"modules/ContactModule.html":{},"injectables/ContactService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService-1.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"modules/CountryMasModule.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"modules/CurrenciesModule.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/Document.html":{},"controllers/DocumentController.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"controllers/DocumentGroupController.html":{},"classes/DocumentGroupDto.html":{},"modules/DocumentGroupModule.html":{},"injectables/DocumentGroupService.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/State.html":{},"controllers/StateController.html":{},"classes/StateDto.html":{},"modules/StateModule.html":{},"injectables/StateService.html":{},"classes/UpdateDto.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"index.html":{}}}],["sourceclass",{"_index":576,"title":{},"body":{"controllers/AppController.html":{}}}],["spaces",{"_index":1001,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["specific",{"_index":452,"title":{},"body":{"modules/ApiModule.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesService.html":{},"classes/PrismaClientExceptionFilter.html":{},"interfaces/QueryConfig.html":{},"classes/QueryFailedFilter.html":{}}}],["specifically",{"_index":638,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["specified",{"_index":28,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/CountryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/FileResponseDto-2.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"interfaces/QueryConfig.html":{},"classes/SortByDto.html":{},"classes/StateDto.html":{},"miscellaneous/functions.html":{}}}],["specifies",{"_index":2132,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{}}}],["specify",{"_index":901,"title":{},"body":{"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/FileUploadDto.html":{},"interfaces/QueryConfig.html":{}}}],["specifying",{"_index":1054,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/QueryConfig.html":{}}}],["split",{"_index":1000,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/PaginationService.html":{},"interfaces/QueryConfig.html":{},"injectables/SortBy.html":{}}}],["sponsors",{"_index":3751,"title":{},"body":{"index.html":{}}}],["sql",{"_index":277,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"injectables/PaginationService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{},"injectables/StateService.html":{},"classes/UtilsService.html":{}}}],["sqlquery",{"_index":913,"title":{},"body":{"injectables/CityService.html":{},"classes/Query.html":{}}}],["sqlservice",{"_index":678,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["sqlservice.run",{"_index":683,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/HttpErrorFilter.html":{}}}],["sqlservice.run(query.addqueryerror(\"dbquery",{"_index":3183,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["src/**/**.entity{.ts,.js",{"_index":1285,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["src/.../apipropery.ts",{"_index":3552,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../app",{"_index":3823,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../app.config.ts",{"_index":3545,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../config.type.ts",{"_index":3822,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../database",{"_index":3824,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../deep",{"_index":3554,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../field.validator.ts",{"_index":3556,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../file",{"_index":3547,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../logger",{"_index":3826,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../logger.config.ts",{"_index":3546,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":3553,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../maybe.type.ts",{"_index":3828,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../number.string.validator.ts",{"_index":3555,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../pagination",{"_index":3558,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../pagination.dto.ts",{"_index":3549,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../swagger.ts",{"_index":3560,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../transforms.decorator.ts",{"_index":3559,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../validate",{"_index":3561,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app/app.controller.ts",{"_index":488,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app/app.controller.ts:66",{"_index":498,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app/app.controller.ts:91",{"_index":512,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app/app.module.ts",{"_index":598,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{}}}],["src/common/helper/helper.module.ts",{"_index":2638,"title":{},"body":{"modules/HelperModule.html":{},"coverage.html":{}}}],["src/common/helper/services/apipropery.ts",{"_index":3413,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/common/helper/services/comman.query.ts",{"_index":1018,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{},"coverage.html":{}}}],["src/common/helper/services/comman.query.ts:11",{"_index":1037,"title":{},"body":{"classes/CommonQuery1.html":{}}}],["src/common/helper/services/comman.query.ts:12",{"_index":1032,"title":{},"body":{"classes/CommonQuery1.html":{}}}],["src/common/helper/services/comman.query.ts:137",{"_index":1041,"title":{},"body":{"classes/CommonQuery1.html":{}}}],["src/common/helper/services/comman.query.ts:150",{"_index":1059,"title":{},"body":{"classes/CommonQuery1.html":{}}}],["src/common/helper/services/comman.query.ts:193",{"_index":1169,"title":{},"body":{"classes/CommonQuery5.html":{}}}],["src/common/helper/services/comman.query.ts:194",{"_index":1168,"title":{},"body":{"classes/CommonQuery5.html":{}}}],["src/common/helper/services/comman.query.ts:211",{"_index":1171,"title":{},"body":{"classes/CommonQuery5.html":{}}}],["src/common/helper/services/comman.query.ts:255",{"_index":1173,"title":{},"body":{"classes/CommonQuery5.html":{}}}],["src/common/helper/services/comman.query.ts:28",{"_index":1046,"title":{},"body":{"classes/CommonQuery1.html":{}}}],["src/common/helper/services/comman.query.ts:310",{"_index":1176,"title":{},"body":{"classes/CommonQuery5.html":{}}}],["src/common/helper/services/comman.query.ts:365",{"_index":1178,"title":{},"body":{"classes/CommonQuery5.html":{}}}],["src/common/helper/services/comman.query.ts:43",{"_index":1062,"title":{},"body":{"classes/CommonQuery1.html":{}}}],["src/common/helper/services/comman.query.ts:436",{"_index":1170,"title":{},"body":{"classes/CommonQuery5.html":{}}}],["src/common/helper/services/comman.query.ts:457",{"_index":1179,"title":{},"body":{"classes/CommonQuery5.html":{}}}],["src/common/helper/services/comman.query.ts:60",{"_index":1063,"title":{},"body":{"classes/CommonQuery1.html":{}}}],["src/common/helper/services/comman.query.ts:82",{"_index":1045,"title":{},"body":{"classes/CommonQuery1.html":{}}}],["src/common/helper/services/comman.query.ts:99",{"_index":1048,"title":{},"body":{"classes/CommonQuery1.html":{}}}],["src/common/helper/services/config.service.ts",{"_index":1181,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"coverage.html":{}}}],["src/common/helper/services/config.service.ts:101",{"_index":1191,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/common/helper/services/config.service.ts:105",{"_index":1195,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/common/helper/services/config.service.ts:139",{"_index":1197,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/common/helper/services/config.service.ts:28",{"_index":1995,"title":{},"body":{"classes/EnvVarAppConfigValidator.html":{}}}],["src/common/helper/services/config.service.ts:32",{"_index":1999,"title":{},"body":{"classes/EnvVarAppConfigValidator.html":{}}}],["src/common/helper/services/config.service.ts:36",{"_index":1998,"title":{},"body":{"classes/EnvVarAppConfigValidator.html":{}}}],["src/common/helper/services/config.service.ts:40",{"_index":1993,"title":{},"body":{"classes/EnvVarAppConfigValidator.html":{}}}],["src/common/helper/services/config.service.ts:72",{"_index":1187,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/common/helper/services/config.service.ts:93",{"_index":1189,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/common/helper/services/config.service.ts:97",{"_index":1193,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/common/helper/services/pagination.service.ts",{"_index":2826,"title":{},"body":{"injectables/PaginationService.html":{},"coverage.html":{}}}],["src/common/helper/services/pagination.service.ts:36",{"_index":2835,"title":{},"body":{"injectables/PaginationService.html":{}}}],["src/common/helper/services/pagination.service.ts:39",{"_index":2837,"title":{},"body":{"injectables/PaginationService.html":{}}}],["src/common/helper/services/prisma.service.ts",{"_index":2902,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/common/helper/services/prisma.service.ts:129",{"_index":2921,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/common/helper/services/prisma.service.ts:141",{"_index":2925,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/common/helper/services/prisma.service.ts:28",{"_index":2913,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/common/helper/services/prisma.service.ts:51",{"_index":2931,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/common/helper/services/prisma.service.ts:61",{"_index":2928,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/common/helper/services/prisma.service.ts:79",{"_index":2915,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/common/helper/services/util.service.ts",{"_index":3302,"title":{},"body":{"classes/UtilsService.html":{},"coverage.html":{}}}],["src/common/helper/services/util.service.ts:139",{"_index":3313,"title":{},"body":{"classes/UtilsService.html":{}}}],["src/common/helper/services/util.service.ts:157",{"_index":3311,"title":{},"body":{"classes/UtilsService.html":{}}}],["src/common/helper/services/util.service.ts:29",{"_index":3307,"title":{},"body":{"classes/UtilsService.html":{}}}],["src/config/app.config.ts",{"_index":2081,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/config/app.config.ts:25",{"_index":2096,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/app.config.ts:29",{"_index":2089,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/app.config.ts:33",{"_index":2088,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/app.config.ts:37",{"_index":2092,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/app.config.ts:41",{"_index":2091,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/app.config.ts:47",{"_index":2090,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/app.config.ts:51",{"_index":2094,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/app.config.ts:55",{"_index":2093,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/app.config.ts:59",{"_index":2087,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{}}}],["src/config/database.config.ts",{"_index":2001,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"coverage.html":{}}}],["src/config/database.config.ts:106",{"_index":2039,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["src/config/database.config.ts:117",{"_index":2027,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["src/config/database.config.ts:128",{"_index":2022,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["src/config/database.config.ts:139",{"_index":2015,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["src/config/database.config.ts:150",{"_index":2020,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["src/config/database.config.ts:161",{"_index":2019,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["src/config/database.config.ts:26",{"_index":2032,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["src/config/database.config.ts:37",{"_index":2037,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["src/config/database.config.ts:51",{"_index":2044,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["src/config/database.config.ts:62",{"_index":2042,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["src/config/database.config.ts:73",{"_index":2041,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["src/config/database.config.ts:84",{"_index":2047,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["src/config/database.config.ts:95",{"_index":2029,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["src/config/file.config.ts",{"_index":2119,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"coverage.html":{}}}],["src/config/file.config.ts:25",{"_index":2131,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["src/config/file.config.ts:38",{"_index":2122,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["src/config/file.config.ts:51",{"_index":2129,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["src/config/file.config.ts:64",{"_index":2125,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["src/config/file.config.ts:77",{"_index":2127,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["src/config/file.config.ts:88",{"_index":2135,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{}}}],["src/config/logger.config.ts",{"_index":2151,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/config/logger.config.ts:30",{"_index":2174,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["src/config/logger.config.ts:34",{"_index":2172,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["src/config/logger.config.ts:38",{"_index":2166,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["src/config/logger.config.ts:42",{"_index":2163,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["src/config/logger.config.ts:46",{"_index":2167,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["src/config/logger.config.ts:50",{"_index":2171,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["src/config/logger.config.ts:54",{"_index":2168,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["src/config/logger.config.ts:58",{"_index":2169,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["src/config/logger.config.ts:62",{"_index":2165,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["src/config/logger.config.ts:66",{"_index":2170,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["src/config/logger.config.ts:70",{"_index":2173,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["src/config/type/app",{"_index":3832,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/config/type/config.type.ts",{"_index":3829,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/config/type/database",{"_index":3833,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/config/type/file",{"_index":3550,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/config/type/logger",{"_index":3837,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/core/constants/core.constant.ts",{"_index":3429,"title":{},"body":{"coverage.html":{}}}],["src/core/decorators/number.string.validator.ts",{"_index":3434,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/decorators/public.request.decorator",{"_index":525,"title":{},"body":{"controllers/AppController.html":{}}}],["src/core/decorators/public.request.decorator.ts",{"_index":3435,"title":{},"body":{"coverage.html":{}}}],["src/core/decorators/swagger.schema.ts",{"_index":3436,"title":{},"body":{"coverage.html":{}}}],["src/core/decorators/transforms.decorator.ts",{"_index":3438,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/exceptions/file",{"_index":2202,"title":{},"body":{"classes/FileNotImageException.html":{},"coverage.html":{}}}],["src/core/exceptions/http",{"_index":2677,"title":{},"body":{"classes/HttpErrorFilter.html":{},"coverage.html":{}}}],["src/core/exceptions/query.ts",{"_index":2964,"title":{},"body":{"classes/Query.html":{},"coverage.html":{}}}],["src/core/exceptions/query.ts:36",{"_index":2980,"title":{},"body":{"classes/Query.html":{}}}],["src/core/exceptions/user",{"_index":3294,"title":{},"body":{"classes/UserNotFoundException.html":{},"coverage.html":{}}}],["src/core/filters/all",{"_index":379,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["src/core/filters/bad",{"_index":635,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"coverage.html":{}}}],["src/core/filters/constraint",{"_index":3442,"title":{},"body":{"coverage.html":{}}}],["src/core/filters/http",{"_index":2692,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/core/filters/prisma",{"_index":2876,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"coverage.html":{}}}],["src/core/filters/query",{"_index":3165,"title":{},"body":{"classes/QueryFailedFilter.html":{},"coverage.html":{}}}],["src/core/filters/query.ts",{"_index":2991,"title":{},"body":{"classes/Query-1.html":{},"coverage.html":{}}}],["src/core/filters/query.ts:24",{"_index":2993,"title":{},"body":{"classes/Query-1.html":{}}}],["src/core/interfaces/app.interfaces.ts",{"_index":2700,"title":{},"body":{"interfaces/IAppConfig.html":{},"coverage.html":{}}}],["src/core/interfaces/aws.interfaces.ts",{"_index":2705,"title":{},"body":{"interfaces/IAwsConfig.html":{},"coverage.html":{}}}],["src/core/interfaces/file.interfaces.ts",{"_index":2706,"title":{},"body":{"interfaces/IFileConfig.html":{},"coverage.html":{}}}],["src/core/interfaces/jwt.interfaces.ts",{"_index":2711,"title":{},"body":{"interfaces/IJWTConfig.html":{},"coverage.html":{}}}],["src/core/interfaces/node",{"_index":2712,"title":{},"body":{"interfaces/INodeEmailerConfig.html":{},"coverage.html":{}}}],["src/core/interfaces/postgres.interfaces.ts",{"_index":2777,"title":{},"body":{"interfaces/IPostgreSQLConfig.html":{},"coverage.html":{}}}],["src/core/interfaces/sendgrid.interfaces.ts",{"_index":2782,"title":{},"body":{"interfaces/ISendGridConfig.html":{},"coverage.html":{}}}],["src/core/interfaces/sms.interfaces.ts",{"_index":2781,"title":{},"body":{"interfaces/ISMSConfig.html":{},"coverage.html":{}}}],["src/core/interfaces/upload",{"_index":2783,"title":{},"body":{"interfaces/IUploadFileConfig.html":{},"coverage.html":{}}}],["src/core/validators/field.validator.ts",{"_index":3448,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/validators/filter.validator.ts",{"_index":956,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{},"coverage.html":{}}}],["src/core/validators/filter.validator.ts:101",{"_index":3213,"title":{},"body":{"injectables/SortBy.html":{}}}],["src/core/validators/filter.validator.ts:28",{"_index":970,"title":{},"body":{"injectables/CommaSeparated.html":{}}}],["src/core/validators/filter.validator.ts:47",{"_index":966,"title":{},"body":{"injectables/CommaSeparated.html":{}}}],["src/core/validators/filter.validator.ts:71",{"_index":3214,"title":{},"body":{"injectables/SortBy.html":{}}}],["src/main.ts",{"_index":3449,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/api.module.ts",{"_index":445,"title":{},"body":{"modules/ApiModule.html":{}}}],["src/modules/countries/countries.controller.ts",{"_index":1491,"title":{},"body":{"controllers/CountriesController.html":{},"coverage.html":{}}}],["src/modules/countries/countries.controller.ts:114",{"_index":1497,"title":{},"body":{"controllers/CountriesController.html":{}}}],["src/modules/countries/countries.controller.ts:58",{"_index":1499,"title":{},"body":{"controllers/CountriesController.html":{}}}],["src/modules/countries/countries.controller.ts:74",{"_index":1495,"title":{},"body":{"controllers/CountriesController.html":{}}}],["src/modules/countries/countries.controller.ts:93",{"_index":1504,"title":{},"body":{"controllers/CountriesController.html":{}}}],["src/modules/countries/countries.module.ts",{"_index":1567,"title":{},"body":{"modules/CountriesModule.html":{}}}],["src/modules/countries/countries.service.ts",{"_index":3452,"title":{},"body":{"coverage.html":{}}}],["src/modules/countries/dto/country.ts",{"_index":1589,"title":{},"body":{"classes/Country.html":{},"coverage.html":{}}}],["src/modules/countries/dto/country.ts:107",{"_index":1616,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:120",{"_index":1644,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:133",{"_index":1620,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:146",{"_index":1648,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:159",{"_index":1639,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:172",{"_index":1642,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:185",{"_index":1611,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:198",{"_index":1645,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:29",{"_index":1630,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:42",{"_index":1637,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:55",{"_index":1631,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:68",{"_index":1635,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:81",{"_index":1622,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/country.ts:94",{"_index":1614,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/dto/create.dto.ts",{"_index":1690,"title":{},"body":{"classes/CreateCountryDto.html":{},"coverage.html":{}}}],["src/modules/countries/dto/create.dto.ts:110",{"_index":1698,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["src/modules/countries/dto/create.dto.ts:125",{"_index":1697,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["src/modules/countries/dto/create.dto.ts:140",{"_index":1696,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["src/modules/countries/dto/create.dto.ts:155",{"_index":1700,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["src/modules/countries/dto/create.dto.ts:170",{"_index":1706,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["src/modules/countries/dto/create.dto.ts:173",{"_index":1699,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["src/modules/countries/dto/create.dto.ts:34",{"_index":1711,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["src/modules/countries/dto/create.dto.ts:51",{"_index":1708,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["src/modules/countries/dto/create.dto.ts:66",{"_index":1712,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["src/modules/countries/dto/create.dto.ts:82",{"_index":1710,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["src/modules/countries/dto/create.dto.ts:96",{"_index":1714,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["src/modules/countries/dto/query",{"_index":2538,"title":{},"body":{"classes/FilterCountryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortCountryDto.html":{},"coverage.html":{}}}],["src/modules/countries/dto/update.dto.ts",{"_index":3278,"title":{},"body":{"classes/UpdateDto.html":{},"coverage.html":{}}}],["src/modules/countries/query.ts",{"_index":3018,"title":{},"body":{"classes/Query-2.html":{},"coverage.html":{}}}],["src/modules/countries/query.ts:115",{"_index":3023,"title":{},"body":{"classes/Query-2.html":{}}}],["src/modules/countries/query.ts:13",{"_index":3024,"title":{},"body":{"classes/Query-2.html":{}}}],["src/modules/countries/query.ts:148",{"_index":3021,"title":{},"body":{"classes/Query-2.html":{}}}],["src/modules/countries/query.ts:159",{"_index":3025,"title":{},"body":{"classes/Query-2.html":{}}}],["src/modules/countries/query.ts:31",{"_index":3026,"title":{},"body":{"classes/Query-2.html":{}}}],["src/modules/countries/query.ts:5",{"_index":3020,"title":{},"body":{"classes/Query-2.html":{}}}],["src/modules/countries/query.ts:76",{"_index":3027,"title":{},"body":{"classes/Query-2.html":{}}}],["src/modules/currencies/currencies.controller.ts",{"_index":1749,"title":{},"body":{"controllers/CurrenciesController.html":{},"coverage.html":{}}}],["src/modules/currencies/currencies.controller.ts:113",{"_index":1753,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["src/modules/currencies/currencies.controller.ts:54",{"_index":1752,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["src/modules/currencies/currencies.controller.ts:74",{"_index":1755,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["src/modules/currencies/currencies.controller.ts:93",{"_index":1754,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["src/modules/currencies/currencies.module.ts",{"_index":1773,"title":{},"body":{"modules/CurrenciesModule.html":{}}}],["src/modules/currencies/currencies.service.ts",{"_index":1775,"title":{},"body":{"injectables/CurrenciesService.html":{},"coverage.html":{}}}],["src/modules/currencies/currencies.service.ts:136",{"_index":1779,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["src/modules/currencies/currencies.service.ts:175",{"_index":1778,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["src/modules/currencies/currencies.service.ts:201",{"_index":1780,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["src/modules/currencies/currencies.service.ts:27",{"_index":1776,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["src/modules/currencies/currencies.service.ts:53",{"_index":1777,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["src/modules/currencies/currencies.service.ts:86",{"_index":1782,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["src/modules/currencies/dto/create.dto.ts",{"_index":1721,"title":{},"body":{"classes/CreateDto.html":{},"coverage.html":{}}}],["src/modules/currencies/dto/create.dto.ts:106",{"_index":1744,"title":{},"body":{"classes/CreateDto.html":{}}}],["src/modules/currencies/dto/create.dto.ts:122",{"_index":1732,"title":{},"body":{"classes/CreateDto.html":{}}}],["src/modules/currencies/dto/create.dto.ts:138",{"_index":1737,"title":{},"body":{"classes/CreateDto.html":{}}}],["src/modules/currencies/dto/create.dto.ts:38",{"_index":1728,"title":{},"body":{"classes/CreateDto.html":{}}}],["src/modules/currencies/dto/create.dto.ts:55",{"_index":1733,"title":{},"body":{"classes/CreateDto.html":{}}}],["src/modules/currencies/dto/create.dto.ts:72",{"_index":1736,"title":{},"body":{"classes/CreateDto.html":{}}}],["src/modules/currencies/dto/create.dto.ts:89",{"_index":1741,"title":{},"body":{"classes/CreateDto.html":{}}}],["src/modules/currencies/dto/currency.ts",{"_index":1806,"title":{},"body":{"classes/Currency.html":{},"coverage.html":{}}}],["src/modules/currencies/dto/currency.ts:100",{"_index":1813,"title":{},"body":{"classes/Currency.html":{}}}],["src/modules/currencies/dto/currency.ts:108",{"_index":1810,"title":{},"body":{"classes/Currency.html":{}}}],["src/modules/currencies/dto/currency.ts:28",{"_index":1808,"title":{},"body":{"classes/Currency.html":{}}}],["src/modules/currencies/dto/currency.ts:40",{"_index":1811,"title":{},"body":{"classes/Currency.html":{}}}],["src/modules/currencies/dto/currency.ts:52",{"_index":1812,"title":{},"body":{"classes/Currency.html":{}}}],["src/modules/currencies/dto/currency.ts:64",{"_index":1814,"title":{},"body":{"classes/Currency.html":{}}}],["src/modules/currencies/dto/currency.ts:76",{"_index":1815,"title":{},"body":{"classes/Currency.html":{}}}],["src/modules/currencies/dto/currency.ts:88",{"_index":1809,"title":{},"body":{"classes/Currency.html":{}}}],["src/modules/currencies/dto/update.dto.ts",{"_index":3280,"title":{},"body":{"classes/UpdateDto-1.html":{},"coverage.html":{}}}],["src/modules/currencies/query.ts",{"_index":3066,"title":{},"body":{"classes/Query-3.html":{},"coverage.html":{}}}],["src/modules/currencies/query.ts:100",{"_index":3077,"title":{},"body":{"classes/Query-3.html":{}}}],["src/modules/currencies/query.ts:139",{"_index":3070,"title":{},"body":{"classes/Query-3.html":{}}}],["src/modules/currencies/query.ts:156",{"_index":3076,"title":{},"body":{"classes/Query-3.html":{}}}],["src/modules/currencies/query.ts:172",{"_index":3075,"title":{},"body":{"classes/Query-3.html":{}}}],["src/modules/currencies/query.ts:21",{"_index":3073,"title":{},"body":{"classes/Query-3.html":{}}}],["src/modules/currencies/query.ts:49",{"_index":3072,"title":{},"body":{"classes/Query-3.html":{}}}],["src/modules/currencies/query.ts:71",{"_index":3074,"title":{},"body":{"classes/Query-3.html":{}}}],["src/modules/files/domain/file.ts",{"_index":2253,"title":{},"body":{"classes/FileType.html":{},"coverage.html":{}}}],["src/modules/files/domain/file.ts:35",{"_index":2256,"title":{},"body":{"classes/FileType.html":{}}}],["src/modules/files/domain/file.ts:81",{"_index":2258,"title":{},"body":{"classes/FileType.html":{}}}],["src/modules/files/files.module.ts",{"_index":2389,"title":{},"body":{"modules/FilesModule.html":{},"coverage.html":{}}}],["src/modules/files/files.service.ts",{"_index":2531,"title":{},"body":{"injectables/FilesService.html":{},"coverage.html":{}}}],["src/modules/files/infrastructure/uploader/local/dto/file",{"_index":2216,"title":{},"body":{"classes/FileResponseDto.html":{},"coverage.html":{}}}],["src/modules/files/infrastructure/uploader/local/files.controller.ts",{"_index":2298,"title":{},"body":{"controllers/FilesLocalController.html":{},"coverage.html":{}}}],["src/modules/files/infrastructure/uploader/local/files.controller.ts:79",{"_index":2314,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["src/modules/files/infrastructure/uploader/local/files.controller.ts:96",{"_index":2304,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["src/modules/files/infrastructure/uploader/local/files.module.ts",{"_index":2353,"title":{},"body":{"modules/FilesLocalModule.html":{}}}],["src/modules/files/infrastructure/uploader/local/files.service.ts",{"_index":2364,"title":{},"body":{"injectables/FilesLocalService.html":{},"coverage.html":{}}}],["src/modules/files/infrastructure/uploader/local/files.service.ts:16",{"_index":2368,"title":{},"body":{"injectables/FilesLocalService.html":{}}}],["src/modules/files/infrastructure/uploader/local/files.service.ts:37",{"_index":2370,"title":{},"body":{"injectables/FilesLocalService.html":{}}}],["src/modules/files/infrastructure/uploader/s3",{"_index":2237,"title":{},"body":{"classes/FileResponseDto-2.html":{},"classes/FileUploadDto.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"coverage.html":{}}}],["src/modules/files/infrastructure/uploader/s3/dto/file",{"_index":2229,"title":{},"body":{"classes/FileResponseDto-1.html":{},"coverage.html":{}}}],["src/modules/files/infrastructure/uploader/s3/files.controller.ts",{"_index":2408,"title":{},"body":{"controllers/FilesS3Controller.html":{},"coverage.html":{}}}],["src/modules/files/infrastructure/uploader/s3/files.controller.ts:74",{"_index":2421,"title":{},"body":{"controllers/FilesS3Controller.html":{}}}],["src/modules/files/infrastructure/uploader/s3/files.module.ts",{"_index":2426,"title":{},"body":{"modules/FilesS3Module.html":{}}}],["src/modules/files/infrastructure/uploader/s3/files.service.ts",{"_index":2522,"title":{},"body":{"injectables/FilesS3Service.html":{},"coverage.html":{}}}],["src/modules/files/infrastructure/uploader/s3/files.service.ts:29",{"_index":2528,"title":{},"body":{"injectables/FilesS3Service.html":{}}}],["src/modules/files/infrastructure/uploader/s3/files.service.ts:40",{"_index":2529,"title":{},"body":{"injectables/FilesS3Service.html":{}}}],["src/modules/home/home.controller.ts",{"_index":2658,"title":{},"body":{"controllers/HomeController.html":{},"coverage.html":{}}}],["src/modules/home/home.controller.ts:30",{"_index":2661,"title":{},"body":{"controllers/HomeController.html":{}}}],["src/modules/home/home.module.ts",{"_index":2668,"title":{},"body":{"modules/HomeModule.html":{}}}],["src/modules/home/home.service.ts",{"_index":2671,"title":{},"body":{"injectables/HomeService.html":{},"coverage.html":{}}}],["src/modules/home/home.service.ts:15",{"_index":2672,"title":{},"body":{"injectables/HomeService.html":{}}}],["src/modules/home/home.service.ts:26",{"_index":2673,"title":{},"body":{"injectables/HomeService.html":{}}}],["src/modules/master/address_type/address_type.controller.ts",{"_index":124,"title":{},"body":{"controllers/AddressTypeController.html":{},"coverage.html":{}}}],["src/modules/master/address_type/address_type.controller.ts:109",{"_index":183,"title":{},"body":{"controllers/AddressTypeController.html":{}}}],["src/modules/master/address_type/address_type.controller.ts:130",{"_index":165,"title":{},"body":{"controllers/AddressTypeController.html":{}}}],["src/modules/master/address_type/address_type.controller.ts:51",{"_index":153,"title":{},"body":{"controllers/AddressTypeController.html":{}}}],["src/modules/master/address_type/address_type.controller.ts:72",{"_index":188,"title":{},"body":{"controllers/AddressTypeController.html":{}}}],["src/modules/master/address_type/address_type.controller.ts:88",{"_index":173,"title":{},"body":{"controllers/AddressTypeController.html":{}}}],["src/modules/master/address_type/address_type.module.ts",{"_index":255,"title":{},"body":{"modules/AddressTypeModule.html":{}}}],["src/modules/master/address_type/address_type.service.ts",{"_index":265,"title":{},"body":{"injectables/AddressTypeService.html":{},"coverage.html":{}}}],["src/modules/master/address_type/address_type.service.ts:125",{"_index":292,"title":{},"body":{"injectables/AddressTypeService.html":{}}}],["src/modules/master/address_type/address_type.service.ts:138",{"_index":287,"title":{},"body":{"injectables/AddressTypeService.html":{}}}],["src/modules/master/address_type/address_type.service.ts:27",{"_index":283,"title":{},"body":{"injectables/AddressTypeService.html":{}}}],["src/modules/master/address_type/address_type.service.ts:43",{"_index":285,"title":{},"body":{"injectables/AddressTypeService.html":{}}}],["src/modules/master/address_type/address_type.service.ts:66",{"_index":293,"title":{},"body":{"injectables/AddressTypeService.html":{}}}],["src/modules/master/address_type/address_type.service.ts:94",{"_index":290,"title":{},"body":{"injectables/AddressTypeService.html":{}}}],["src/modules/master/address_type/dto/address_type.ts",{"_index":96,"title":{},"body":{"classes/AddressType.html":{},"coverage.html":{}}}],["src/modules/master/address_type/dto/address_type.ts:24",{"_index":117,"title":{},"body":{"classes/AddressType.html":{}}}],["src/modules/master/address_type/dto/address_type.ts:34",{"_index":111,"title":{},"body":{"classes/AddressType.html":{}}}],["src/modules/master/address_type/dto/address_type.ts:44",{"_index":119,"title":{},"body":{"classes/AddressType.html":{}}}],["src/modules/master/address_type/dto/create.dto.ts",{"_index":6,"title":{},"body":{"classes/AddresTypeDto.html":{},"coverage.html":{}}}],["src/modules/master/address_type/dto/create.dto.ts:33",{"_index":52,"title":{},"body":{"classes/AddresTypeDto.html":{}}}],["src/modules/master/address_type/dto/create.dto.ts:48",{"_index":68,"title":{},"body":{"classes/AddresTypeDto.html":{}}}],["src/modules/master/address_type/dto/create.dto.ts:55",{"_index":56,"title":{},"body":{"classes/AddresTypeDto.html":{}}}],["src/modules/master/address_type/dto/create.dto.ts:62",{"_index":70,"title":{},"body":{"classes/AddresTypeDto.html":{}}}],["src/modules/master/address_type/dto/update.dto.ts",{"_index":366,"title":{},"body":{"classes/AddressUpdateDto.html":{},"coverage.html":{}}}],["src/modules/master/address_type/query.ts",{"_index":3102,"title":{},"body":{"classes/Query-4.html":{},"coverage.html":{}}}],["src/modules/master/address_type/query.ts:115",{"_index":3106,"title":{},"body":{"classes/Query-4.html":{}}}],["src/modules/master/address_type/query.ts:20",{"_index":3104,"title":{},"body":{"classes/Query-4.html":{}}}],["src/modules/master/address_type/query.ts:37",{"_index":3105,"title":{},"body":{"classes/Query-4.html":{}}}],["src/modules/master/address_type/query.ts:54",{"_index":3107,"title":{},"body":{"classes/Query-4.html":{}}}],["src/modules/master/address_type/query.ts:74",{"_index":3108,"title":{},"body":{"classes/Query-4.html":{}}}],["src/modules/master/address_type/query.ts:98",{"_index":3103,"title":{},"body":{"classes/Query-4.html":{}}}],["src/modules/master/banks/bank.controller.ts",{"_index":701,"title":{},"body":{"controllers/BankController.html":{},"coverage.html":{}}}],["src/modules/master/banks/bank.controller.ts:102",{"_index":711,"title":{},"body":{"controllers/BankController.html":{}}}],["src/modules/master/banks/bank.controller.ts:119",{"_index":708,"title":{},"body":{"controllers/BankController.html":{}}}],["src/modules/master/banks/bank.controller.ts:51",{"_index":705,"title":{},"body":{"controllers/BankController.html":{}}}],["src/modules/master/banks/bank.controller.ts:69",{"_index":713,"title":{},"body":{"controllers/BankController.html":{}}}],["src/modules/master/banks/bank.controller.ts:85",{"_index":709,"title":{},"body":{"controllers/BankController.html":{}}}],["src/modules/master/banks/bank.module.ts",{"_index":772,"title":{},"body":{"modules/BankModule.html":{}}}],["src/modules/master/banks/bank.service.ts",{"_index":774,"title":{},"body":{"injectables/BankService.html":{},"coverage.html":{}}}],["src/modules/master/banks/bank.service.ts:107",{"_index":781,"title":{},"body":{"injectables/BankService.html":{}}}],["src/modules/master/banks/bank.service.ts:141",{"_index":782,"title":{},"body":{"injectables/BankService.html":{}}}],["src/modules/master/banks/bank.service.ts:155",{"_index":779,"title":{},"body":{"injectables/BankService.html":{}}}],["src/modules/master/banks/bank.service.ts:27",{"_index":777,"title":{},"body":{"injectables/BankService.html":{}}}],["src/modules/master/banks/bank.service.ts:44",{"_index":778,"title":{},"body":{"injectables/BankService.html":{}}}],["src/modules/master/banks/bank.service.ts:74",{"_index":783,"title":{},"body":{"injectables/BankService.html":{}}}],["src/modules/master/banks/dto/bank.dto.ts",{"_index":797,"title":{},"body":{"classes/Banks.html":{},"coverage.html":{}}}],["src/modules/master/banks/dto/bank.dto.ts:23",{"_index":799,"title":{},"body":{"classes/Banks.html":{}}}],["src/modules/master/banks/dto/bank.dto.ts:33",{"_index":818,"title":{},"body":{"classes/Banks.html":{}}}],["src/modules/master/banks/dto/bank.dto.ts:43",{"_index":819,"title":{},"body":{"classes/Banks.html":{}}}],["src/modules/master/banks/dto/bank.dto.ts:53",{"_index":805,"title":{},"body":{"classes/Banks.html":{}}}],["src/modules/master/banks/dto/bank.dto.ts:63",{"_index":817,"title":{},"body":{"classes/Banks.html":{}}}],["src/modules/master/banks/dto/bank.dto.ts:73",{"_index":811,"title":{},"body":{"classes/Banks.html":{}}}],["src/modules/master/banks/dto/bank.dto.ts:83",{"_index":820,"title":{},"body":{"classes/Banks.html":{}}}],["src/modules/master/banks/dto/create.dto.ts",{"_index":734,"title":{},"body":{"classes/BankDto.html":{},"coverage.html":{}}}],["src/modules/master/banks/dto/create.dto.ts:113",{"_index":765,"title":{},"body":{"classes/BankDto.html":{}}}],["src/modules/master/banks/dto/create.dto.ts:120",{"_index":739,"title":{},"body":{"classes/BankDto.html":{}}}],["src/modules/master/banks/dto/create.dto.ts:123",{"_index":766,"title":{},"body":{"classes/BankDto.html":{}}}],["src/modules/master/banks/dto/create.dto.ts:41",{"_index":759,"title":{},"body":{"classes/BankDto.html":{}}}],["src/modules/master/banks/dto/create.dto.ts:57",{"_index":764,"title":{},"body":{"classes/BankDto.html":{}}}],["src/modules/master/banks/dto/create.dto.ts:71",{"_index":743,"title":{},"body":{"classes/BankDto.html":{}}}],["src/modules/master/banks/dto/create.dto.ts:85",{"_index":757,"title":{},"body":{"classes/BankDto.html":{}}}],["src/modules/master/banks/dto/create.dto.ts:99",{"_index":751,"title":{},"body":{"classes/BankDto.html":{}}}],["src/modules/master/banks/dto/update.dto.ts",{"_index":795,"title":{},"body":{"classes/BankUpdateDto.html":{},"coverage.html":{}}}],["src/modules/master/banks/query.ts",{"_index":3132,"title":{},"body":{"classes/Query-7.html":{},"coverage.html":{}}}],["src/modules/master/banks/query.ts:126",{"_index":3133,"title":{},"body":{"classes/Query-7.html":{}}}],["src/modules/master/banks/query.ts:144",{"_index":3136,"title":{},"body":{"classes/Query-7.html":{}}}],["src/modules/master/banks/query.ts:19",{"_index":3134,"title":{},"body":{"classes/Query-7.html":{}}}],["src/modules/master/banks/query.ts:45",{"_index":3135,"title":{},"body":{"classes/Query-7.html":{}}}],["src/modules/master/banks/query.ts:63",{"_index":3137,"title":{},"body":{"classes/Query-7.html":{}}}],["src/modules/master/banks/query.ts:92",{"_index":3138,"title":{},"body":{"classes/Query-7.html":{}}}],["src/modules/master/city_mas/cities.controller.ts",{"_index":834,"title":{},"body":{"controllers/CityController.html":{},"coverage.html":{}}}],["src/modules/master/city_mas/cities.controller.ts:109",{"_index":838,"title":{},"body":{"controllers/CityController.html":{}}}],["src/modules/master/city_mas/cities.controller.ts:41",{"_index":836,"title":{},"body":{"controllers/CityController.html":{}}}],["src/modules/master/city_mas/cities.controller.ts:59",{"_index":843,"title":{},"body":{"controllers/CityController.html":{}}}],["src/modules/master/city_mas/cities.controller.ts:75",{"_index":839,"title":{},"body":{"controllers/CityController.html":{}}}],["src/modules/master/city_mas/cities.controller.ts:92",{"_index":841,"title":{},"body":{"controllers/CityController.html":{}}}],["src/modules/master/city_mas/cities.modules.ts",{"_index":877,"title":{},"body":{"modules/CityModule.html":{}}}],["src/modules/master/city_mas/cities.service.ts",{"_index":879,"title":{},"body":{"injectables/CityService.html":{},"coverage.html":{}}}],["src/modules/master/city_mas/cities.service.ts:103",{"_index":885,"title":{},"body":{"injectables/CityService.html":{}}}],["src/modules/master/city_mas/cities.service.ts:203",{"_index":886,"title":{},"body":{"injectables/CityService.html":{}}}],["src/modules/master/city_mas/cities.service.ts:21",{"_index":882,"title":{},"body":{"injectables/CityService.html":{}}}],["src/modules/master/city_mas/cities.service.ts:217",{"_index":884,"title":{},"body":{"injectables/CityService.html":{}}}],["src/modules/master/city_mas/cities.service.ts:40",{"_index":883,"title":{},"body":{"injectables/CityService.html":{}}}],["src/modules/master/city_mas/cities.service.ts:67",{"_index":887,"title":{},"body":{"injectables/CityService.html":{}}}],["src/modules/master/city_mas/dto/cities.dto.ts",{"_index":822,"title":{},"body":{"classes/Cities.html":{},"coverage.html":{}}}],["src/modules/master/city_mas/dto/cities.dto.ts:22",{"_index":825,"title":{},"body":{"classes/Cities.html":{}}}],["src/modules/master/city_mas/dto/cities.dto.ts:32",{"_index":831,"title":{},"body":{"classes/Cities.html":{}}}],["src/modules/master/city_mas/dto/cities.dto.ts:42",{"_index":829,"title":{},"body":{"classes/Cities.html":{}}}],["src/modules/master/city_mas/dto/cities.dto.ts:52",{"_index":827,"title":{},"body":{"classes/Cities.html":{}}}],["src/modules/master/city_mas/dto/cities.dto.ts:62",{"_index":832,"title":{},"body":{"classes/Cities.html":{}}}],["src/modules/master/city_mas/dto/create.dto.ts",{"_index":863,"title":{},"body":{"classes/CityDto.html":{},"coverage.html":{}}}],["src/modules/master/city_mas/dto/create.dto.ts:34",{"_index":870,"title":{},"body":{"classes/CityDto.html":{}}}],["src/modules/master/city_mas/dto/create.dto.ts:48",{"_index":867,"title":{},"body":{"classes/CityDto.html":{}}}],["src/modules/master/city_mas/dto/create.dto.ts:62",{"_index":866,"title":{},"body":{"classes/CityDto.html":{}}}],["src/modules/master/city_mas/dto/create.dto.ts:76",{"_index":871,"title":{},"body":{"classes/CityDto.html":{}}}],["src/modules/master/city_mas/dto/create.dto.ts:83",{"_index":864,"title":{},"body":{"classes/CityDto.html":{}}}],["src/modules/master/city_mas/dto/create.dto.ts:86",{"_index":872,"title":{},"body":{"classes/CityDto.html":{}}}],["src/modules/master/city_mas/dto/update.dto.ts",{"_index":3283,"title":{},"body":{"classes/UpdateDto-2.html":{},"coverage.html":{}}}],["src/modules/master/city_mas/query.ts",{"_index":3116,"title":{},"body":{"classes/Query-5.html":{},"coverage.html":{}}}],["src/modules/master/city_mas/query.ts:102",{"_index":3117,"title":{},"body":{"classes/Query-5.html":{}}}],["src/modules/master/city_mas/query.ts:119",{"_index":3120,"title":{},"body":{"classes/Query-5.html":{}}}],["src/modules/master/city_mas/query.ts:19",{"_index":3118,"title":{},"body":{"classes/Query-5.html":{}}}],["src/modules/master/city_mas/query.ts:38",{"_index":3119,"title":{},"body":{"classes/Query-5.html":{}}}],["src/modules/master/city_mas/query.ts:55",{"_index":3121,"title":{},"body":{"classes/Query-5.html":{}}}],["src/modules/master/city_mas/query.ts:74",{"_index":3122,"title":{},"body":{"classes/Query-5.html":{}}}],["src/modules/master/country_mas/country_mas.controller.ts",{"_index":1651,"title":{},"body":{"controllers/CountryController.html":{},"coverage.html":{}}}],["src/modules/master/country_mas/country_mas.controller.ts:112",{"_index":1655,"title":{},"body":{"controllers/CountryController.html":{}}}],["src/modules/master/country_mas/country_mas.controller.ts:55",{"_index":1653,"title":{},"body":{"controllers/CountryController.html":{}}}],["src/modules/master/country_mas/country_mas.controller.ts:75",{"_index":1659,"title":{},"body":{"controllers/CountryController.html":{}}}],["src/modules/master/country_mas/country_mas.controller.ts:93",{"_index":1657,"title":{},"body":{"controllers/CountryController.html":{}}}],["src/modules/master/country_mas/country_mas.module.ts",{"_index":1688,"title":{},"body":{"modules/CountryMasModule.html":{}}}],["src/modules/master/country_mas/country_mas.service.ts",{"_index":1569,"title":{},"body":{"injectables/CountriesService-1.html":{},"coverage.html":{}}}],["src/modules/master/country_mas/country_mas.service.ts:118",{"_index":1577,"title":{},"body":{"injectables/CountriesService-1.html":{}}}],["src/modules/master/country_mas/country_mas.service.ts:145",{"_index":1576,"title":{},"body":{"injectables/CountriesService-1.html":{}}}],["src/modules/master/country_mas/country_mas.service.ts:169",{"_index":1578,"title":{},"body":{"injectables/CountriesService-1.html":{}}}],["src/modules/master/country_mas/country_mas.service.ts:27",{"_index":1570,"title":{},"body":{"injectables/CountriesService-1.html":{}}}],["src/modules/master/country_mas/country_mas.service.ts:51",{"_index":1575,"title":{},"body":{"injectables/CountriesService-1.html":{}}}],["src/modules/master/country_mas/country_mas.service.ts:80",{"_index":1579,"title":{},"body":{"injectables/CountriesService-1.html":{}}}],["src/modules/master/country_mas/dto/country_mas.dto.ts",{"_index":1680,"title":{},"body":{"classes/CountryMas.html":{},"coverage.html":{}}}],["src/modules/master/country_mas/dto/country_mas.dto.ts:25",{"_index":1682,"title":{},"body":{"classes/CountryMas.html":{}}}],["src/modules/master/country_mas/dto/country_mas.dto.ts:35",{"_index":1683,"title":{},"body":{"classes/CountryMas.html":{}}}],["src/modules/master/country_mas/dto/country_mas.dto.ts:45",{"_index":1681,"title":{},"body":{"classes/CountryMas.html":{}}}],["src/modules/master/country_mas/dto/country_mas.dto.ts:55",{"_index":1684,"title":{},"body":{"classes/CountryMas.html":{}}}],["src/modules/master/country_mas/dto/create.dto.ts",{"_index":1668,"title":{},"body":{"classes/CountryDto.html":{},"coverage.html":{}}}],["src/modules/master/country_mas/dto/create.dto.ts:35",{"_index":1670,"title":{},"body":{"classes/CountryDto.html":{}}}],["src/modules/master/country_mas/dto/create.dto.ts:52",{"_index":1677,"title":{},"body":{"classes/CountryDto.html":{}}}],["src/modules/master/country_mas/dto/create.dto.ts:59",{"_index":1674,"title":{},"body":{"classes/CountryDto.html":{}}}],["src/modules/master/country_mas/dto/create.dto.ts:62",{"_index":1678,"title":{},"body":{"classes/CountryDto.html":{}}}],["src/modules/master/country_mas/dto/update.dto.ts",{"_index":3285,"title":{},"body":{"classes/UpdateDto-3.html":{},"coverage.html":{}}}],["src/modules/master/country_mas/query.ts",{"_index":3124,"title":{},"body":{"classes/Query-6.html":{},"coverage.html":{}}}],["src/modules/master/country_mas/query.ts:107",{"_index":3125,"title":{},"body":{"classes/Query-6.html":{}}}],["src/modules/master/country_mas/query.ts:124",{"_index":3128,"title":{},"body":{"classes/Query-6.html":{}}}],["src/modules/master/country_mas/query.ts:20",{"_index":3126,"title":{},"body":{"classes/Query-6.html":{}}}],["src/modules/master/country_mas/query.ts:39",{"_index":3127,"title":{},"body":{"classes/Query-6.html":{}}}],["src/modules/master/country_mas/query.ts:56",{"_index":3129,"title":{},"body":{"classes/Query-6.html":{}}}],["src/modules/master/country_mas/query.ts:76",{"_index":3130,"title":{},"body":{"classes/Query-6.html":{}}}],["src/modules/master/document_groups/document_grp.controller.ts",{"_index":1874,"title":{},"body":{"controllers/DocumentGroupController.html":{},"coverage.html":{}}}],["src/modules/master/document_groups/document_grp.controller.ts:104",{"_index":1881,"title":{},"body":{"controllers/DocumentGroupController.html":{}}}],["src/modules/master/document_groups/document_grp.controller.ts:121",{"_index":1879,"title":{},"body":{"controllers/DocumentGroupController.html":{}}}],["src/modules/master/document_groups/document_grp.controller.ts:51",{"_index":1878,"title":{},"body":{"controllers/DocumentGroupController.html":{}}}],["src/modules/master/document_groups/document_grp.controller.ts:69",{"_index":1882,"title":{},"body":{"controllers/DocumentGroupController.html":{}}}],["src/modules/master/document_groups/document_grp.controller.ts:85",{"_index":1880,"title":{},"body":{"controllers/DocumentGroupController.html":{}}}],["src/modules/master/document_groups/document_grp.module.ts",{"_index":1902,"title":{},"body":{"modules/DocumentGroupModule.html":{}}}],["src/modules/master/document_groups/document_grp.service.ts",{"_index":1904,"title":{},"body":{"injectables/DocumentGroupService.html":{},"coverage.html":{}}}],["src/modules/master/document_groups/document_grp.service.ts:107",{"_index":1908,"title":{},"body":{"injectables/DocumentGroupService.html":{}}}],["src/modules/master/document_groups/document_grp.service.ts:137",{"_index":1909,"title":{},"body":{"injectables/DocumentGroupService.html":{}}}],["src/modules/master/document_groups/document_grp.service.ts:151",{"_index":1907,"title":{},"body":{"injectables/DocumentGroupService.html":{}}}],["src/modules/master/document_groups/document_grp.service.ts:27",{"_index":1905,"title":{},"body":{"injectables/DocumentGroupService.html":{}}}],["src/modules/master/document_groups/document_grp.service.ts:44",{"_index":1906,"title":{},"body":{"injectables/DocumentGroupService.html":{}}}],["src/modules/master/document_groups/document_grp.service.ts:74",{"_index":1910,"title":{},"body":{"injectables/DocumentGroupService.html":{}}}],["src/modules/master/document_groups/dto/create.dto.ts",{"_index":1894,"title":{},"body":{"classes/DocumentGroupDto.html":{},"coverage.html":{}}}],["src/modules/master/document_groups/dto/create.dto.ts:32",{"_index":1896,"title":{},"body":{"classes/DocumentGroupDto.html":{}}}],["src/modules/master/document_groups/dto/create.dto.ts:46",{"_index":1897,"title":{},"body":{"classes/DocumentGroupDto.html":{}}}],["src/modules/master/document_groups/dto/create.dto.ts:53",{"_index":1895,"title":{},"body":{"classes/DocumentGroupDto.html":{}}}],["src/modules/master/document_groups/dto/create.dto.ts:56",{"_index":1898,"title":{},"body":{"classes/DocumentGroupDto.html":{}}}],["src/modules/master/document_groups/dto/document_grp.dto.ts",{"_index":1867,"title":{},"body":{"classes/DocumentGroup.html":{},"coverage.html":{}}}],["src/modules/master/document_groups/dto/document_grp.dto.ts:22",{"_index":1869,"title":{},"body":{"classes/DocumentGroup.html":{}}}],["src/modules/master/document_groups/dto/document_grp.dto.ts:32",{"_index":1871,"title":{},"body":{"classes/DocumentGroup.html":{}}}],["src/modules/master/document_groups/dto/document_grp.dto.ts:42",{"_index":1872,"title":{},"body":{"classes/DocumentGroup.html":{}}}],["src/modules/master/document_groups/dto/update.dto.ts",{"_index":3289,"title":{},"body":{"classes/UpdateDto-5.html":{},"coverage.html":{}}}],["src/modules/master/document_groups/query.ts",{"_index":3150,"title":{},"body":{"classes/Query-9.html":{},"coverage.html":{}}}],["src/modules/master/document_groups/query.ts:103",{"_index":3151,"title":{},"body":{"classes/Query-9.html":{}}}],["src/modules/master/document_groups/query.ts:121",{"_index":3154,"title":{},"body":{"classes/Query-9.html":{}}}],["src/modules/master/document_groups/query.ts:19",{"_index":3152,"title":{},"body":{"classes/Query-9.html":{}}}],["src/modules/master/document_groups/query.ts:37",{"_index":3153,"title":{},"body":{"classes/Query-9.html":{}}}],["src/modules/master/document_groups/query.ts:55",{"_index":3155,"title":{},"body":{"classes/Query-9.html":{}}}],["src/modules/master/document_groups/query.ts:77",{"_index":3156,"title":{},"body":{"classes/Query-9.html":{}}}],["src/modules/master/documents/documents.controller.ts",{"_index":1831,"title":{},"body":{"controllers/DocumentController.html":{},"coverage.html":{}}}],["src/modules/master/documents/documents.controller.ts:102",{"_index":1840,"title":{},"body":{"controllers/DocumentController.html":{}}}],["src/modules/master/documents/documents.controller.ts:119",{"_index":1837,"title":{},"body":{"controllers/DocumentController.html":{}}}],["src/modules/master/documents/documents.controller.ts:51",{"_index":1835,"title":{},"body":{"controllers/DocumentController.html":{}}}],["src/modules/master/documents/documents.controller.ts:69",{"_index":1842,"title":{},"body":{"controllers/DocumentController.html":{}}}],["src/modules/master/documents/documents.controller.ts:85",{"_index":1838,"title":{},"body":{"controllers/DocumentController.html":{}}}],["src/modules/master/documents/documents.module.ts",{"_index":1917,"title":{},"body":{"modules/DocumentModule.html":{}}}],["src/modules/master/documents/documents.service.ts",{"_index":1919,"title":{},"body":{"injectables/DocumentService.html":{},"coverage.html":{}}}],["src/modules/master/documents/documents.service.ts:102",{"_index":1923,"title":{},"body":{"injectables/DocumentService.html":{}}}],["src/modules/master/documents/documents.service.ts:137",{"_index":1924,"title":{},"body":{"injectables/DocumentService.html":{}}}],["src/modules/master/documents/documents.service.ts:151",{"_index":1922,"title":{},"body":{"injectables/DocumentService.html":{}}}],["src/modules/master/documents/documents.service.ts:27",{"_index":1920,"title":{},"body":{"injectables/DocumentService.html":{}}}],["src/modules/master/documents/documents.service.ts:44",{"_index":1921,"title":{},"body":{"injectables/DocumentService.html":{}}}],["src/modules/master/documents/documents.service.ts:71",{"_index":1925,"title":{},"body":{"injectables/DocumentService.html":{}}}],["src/modules/master/documents/dto/create.dto.ts",{"_index":1860,"title":{},"body":{"classes/DocumentDto.html":{},"coverage.html":{}}}],["src/modules/master/documents/dto/create.dto.ts:31",{"_index":1862,"title":{},"body":{"classes/DocumentDto.html":{}}}],["src/modules/master/documents/dto/create.dto.ts:46",{"_index":1864,"title":{},"body":{"classes/DocumentDto.html":{}}}],["src/modules/master/documents/dto/create.dto.ts:60",{"_index":1865,"title":{},"body":{"classes/DocumentDto.html":{}}}],["src/modules/master/documents/dto/create.dto.ts:67",{"_index":1861,"title":{},"body":{"classes/DocumentDto.html":{}}}],["src/modules/master/documents/dto/create.dto.ts:70",{"_index":1866,"title":{},"body":{"classes/DocumentDto.html":{}}}],["src/modules/master/documents/dto/documents.dto.ts",{"_index":1816,"title":{},"body":{"classes/Document.html":{},"coverage.html":{}}}],["src/modules/master/documents/dto/documents.dto.ts:22",{"_index":1826,"title":{},"body":{"classes/Document.html":{}}}],["src/modules/master/documents/dto/documents.dto.ts:32",{"_index":1827,"title":{},"body":{"classes/Document.html":{}}}],["src/modules/master/documents/dto/documents.dto.ts:42",{"_index":1828,"title":{},"body":{"classes/Document.html":{}}}],["src/modules/master/documents/dto/documents.dto.ts:52",{"_index":1829,"title":{},"body":{"classes/Document.html":{}}}],["src/modules/master/documents/dto/update.dto.ts",{"_index":3287,"title":{},"body":{"classes/UpdateDto-4.html":{},"coverage.html":{}}}],["src/modules/master/documents/query.ts",{"_index":3141,"title":{},"body":{"classes/Query-8.html":{},"coverage.html":{}}}],["src/modules/master/documents/query.ts:108",{"_index":3142,"title":{},"body":{"classes/Query-8.html":{}}}],["src/modules/master/documents/query.ts:125",{"_index":3145,"title":{},"body":{"classes/Query-8.html":{}}}],["src/modules/master/documents/query.ts:19",{"_index":3143,"title":{},"body":{"classes/Query-8.html":{}}}],["src/modules/master/documents/query.ts:37",{"_index":3144,"title":{},"body":{"classes/Query-8.html":{}}}],["src/modules/master/documents/query.ts:55",{"_index":3146,"title":{},"body":{"classes/Query-8.html":{}}}],["src/modules/master/documents/query.ts:76",{"_index":3147,"title":{},"body":{"classes/Query-8.html":{}}}],["src/modules/master/ms",{"_index":1393,"title":{},"body":{"controllers/ContactController.html":{},"classes/ContactDto.html":{},"modules/ContactModule.html":{},"injectables/ContactService.html":{},"coverage.html":{}}}],["src/modules/master/state_mas/dto/create.dto.ts",{"_index":3259,"title":{},"body":{"classes/StateDto.html":{},"coverage.html":{}}}],["src/modules/master/state_mas/dto/create.dto.ts:34",{"_index":3262,"title":{},"body":{"classes/StateDto.html":{}}}],["src/modules/master/state_mas/dto/create.dto.ts:48",{"_index":3260,"title":{},"body":{"classes/StateDto.html":{}}}],["src/modules/master/state_mas/dto/create.dto.ts:62",{"_index":3263,"title":{},"body":{"classes/StateDto.html":{}}}],["src/modules/master/state_mas/dto/create.dto.ts:69",{"_index":3261,"title":{},"body":{"classes/StateDto.html":{}}}],["src/modules/master/state_mas/dto/create.dto.ts:72",{"_index":3264,"title":{},"body":{"classes/StateDto.html":{}}}],["src/modules/master/state_mas/dto/state.dto.ts",{"_index":3222,"title":{},"body":{"classes/State.html":{},"coverage.html":{}}}],["src/modules/master/state_mas/dto/state.dto.ts:24",{"_index":3225,"title":{},"body":{"classes/State.html":{}}}],["src/modules/master/state_mas/dto/state.dto.ts:35",{"_index":3227,"title":{},"body":{"classes/State.html":{}}}],["src/modules/master/state_mas/dto/state.dto.ts:46",{"_index":3224,"title":{},"body":{"classes/State.html":{}}}],["src/modules/master/state_mas/dto/state.dto.ts:57",{"_index":3228,"title":{},"body":{"classes/State.html":{}}}],["src/modules/master/state_mas/dto/update.dto.ts",{"_index":3291,"title":{},"body":{"classes/UpdateDto-6.html":{},"coverage.html":{}}}],["src/modules/master/state_mas/query.ts",{"_index":2994,"title":{},"body":{"classes/Query-10.html":{},"coverage.html":{}}}],["src/modules/master/state_mas/query.ts:102",{"_index":2999,"title":{},"body":{"classes/Query-10.html":{}}}],["src/modules/master/state_mas/query.ts:118",{"_index":3002,"title":{},"body":{"classes/Query-10.html":{}}}],["src/modules/master/state_mas/query.ts:19",{"_index":3000,"title":{},"body":{"classes/Query-10.html":{}}}],["src/modules/master/state_mas/query.ts:37",{"_index":3001,"title":{},"body":{"classes/Query-10.html":{}}}],["src/modules/master/state_mas/query.ts:54",{"_index":3003,"title":{},"body":{"classes/Query-10.html":{}}}],["src/modules/master/state_mas/query.ts:74",{"_index":3004,"title":{},"body":{"classes/Query-10.html":{}}}],["src/modules/master/state_mas/state.controller.ts",{"_index":3230,"title":{},"body":{"controllers/StateController.html":{},"coverage.html":{}}}],["src/modules/master/state_mas/state.controller.ts:103",{"_index":3239,"title":{},"body":{"controllers/StateController.html":{}}}],["src/modules/master/state_mas/state.controller.ts:120",{"_index":3236,"title":{},"body":{"controllers/StateController.html":{}}}],["src/modules/master/state_mas/state.controller.ts:52",{"_index":3234,"title":{},"body":{"controllers/StateController.html":{}}}],["src/modules/master/state_mas/state.controller.ts:70",{"_index":3241,"title":{},"body":{"controllers/StateController.html":{}}}],["src/modules/master/state_mas/state.controller.ts:86",{"_index":3237,"title":{},"body":{"controllers/StateController.html":{}}}],["src/modules/master/state_mas/state.module.ts",{"_index":3268,"title":{},"body":{"modules/StateModule.html":{}}}],["src/modules/master/state_mas/state.service.ts",{"_index":3270,"title":{},"body":{"injectables/StateService.html":{},"coverage.html":{}}}],["src/modules/master/state_mas/state.service.ts:102",{"_index":3274,"title":{},"body":{"injectables/StateService.html":{}}}],["src/modules/master/state_mas/state.service.ts:132",{"_index":3275,"title":{},"body":{"injectables/StateService.html":{}}}],["src/modules/master/state_mas/state.service.ts:146",{"_index":3273,"title":{},"body":{"injectables/StateService.html":{}}}],["src/modules/master/state_mas/state.service.ts:27",{"_index":3271,"title":{},"body":{"injectables/StateService.html":{}}}],["src/modules/master/state_mas/state.service.ts:44",{"_index":3272,"title":{},"body":{"injectables/StateService.html":{}}}],["src/modules/master/state_mas/state.service.ts:71",{"_index":3276,"title":{},"body":{"injectables/StateService.html":{}}}],["src/providers/dynamic",{"_index":1931,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{},"coverage.html":{}}}],["src/providers/file",{"_index":3479,"title":{},"body":{"coverage.html":{}}}],["src/swagger.ts",{"_index":3486,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/deep",{"_index":3488,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/dto/pagination",{"_index":2809,"title":{},"body":{"classes/PaginationResponseDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/dto/pagination.dto.ts",{"_index":2549,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/utils/dto/pagination.dto.ts:119",{"_index":2799,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["src/utils/dto/pagination.dto.ts:141",{"_index":2808,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["src/utils/dto/pagination.dto.ts:160",{"_index":2552,"title":{},"body":{"classes/FilterQueryDto.html":{}}}],["src/utils/dto/pagination.dto.ts:172",{"_index":2554,"title":{},"body":{"classes/FilterQueryDto.html":{}}}],["src/utils/dto/pagination.dto.ts:184",{"_index":2556,"title":{},"body":{"classes/FilterQueryDto.html":{}}}],["src/utils/dto/pagination.dto.ts:214",{"_index":3218,"title":{},"body":{"classes/SortByDto.html":{}}}],["src/utils/dto/pagination.dto.ts:228",{"_index":3216,"title":{},"body":{"classes/SortByDto.html":{}}}],["src/utils/dto/pagination.dto.ts:59",{"_index":2806,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["src/utils/dto/pagination.dto.ts:77",{"_index":2804,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["src/utils/dto/pagination.dto.ts:97",{"_index":2802,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["src/utils/dto/pagination.meta.dto.ts",{"_index":2715,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"coverage.html":{}}}],["src/utils/dto/pagination.meta.dto.ts:109",{"_index":2790,"title":{},"body":{"classes/PaginationMetaDto.html":{}}}],["src/utils/dto/pagination.meta.dto.ts:121",{"_index":2792,"title":{},"body":{"classes/PaginationMetaDto.html":{}}}],["src/utils/dto/pagination.meta.dto.ts:133",{"_index":2789,"title":{},"body":{"classes/PaginationMetaDto.html":{}}}],["src/utils/dto/pagination.meta.dto.ts:145",{"_index":2786,"title":{},"body":{"classes/PaginationMetaDto.html":{}}}],["src/utils/dto/pagination.meta.dto.ts:49",{"_index":2794,"title":{},"body":{"classes/PaginationMetaDto.html":{}}}],["src/utils/dto/pagination.meta.dto.ts:61",{"_index":2788,"title":{},"body":{"classes/PaginationMetaDto.html":{}}}],["src/utils/dto/pagination.meta.dto.ts:73",{"_index":2791,"title":{},"body":{"classes/PaginationMetaDto.html":{}}}],["src/utils/dto/pagination.meta.dto.ts:85",{"_index":2795,"title":{},"body":{"classes/PaginationMetaDto.html":{}}}],["src/utils/dto/pagination.meta.dto.ts:97",{"_index":2793,"title":{},"body":{"classes/PaginationMetaDto.html":{}}}],["src/utils/serializer.interceptor.ts",{"_index":3186,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{},"coverage.html":{}}}],["src/utils/serializer.interceptor.ts:30",{"_index":3200,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["src/utils/transformers/lower",{"_index":3491,"title":{},"body":{"coverage.html":{}}}],["src/utils/transformers/upper",{"_index":3494,"title":{},"body":{"coverage.html":{}}}],["src/utils/types/deep",{"_index":3835,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/utils/types/maybe.type.ts",{"_index":3838,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/utils/types/pagination",{"_index":2771,"title":{},"body":{"interfaces/IPaginationFieldConfig.html":{},"coverage.html":{}}}],["src/utils/validate",{"_index":3495,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["ssl",{"_index":2016,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["sslenabled",{"_index":2073,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["stack",{"_index":583,"title":{},"body":{"controllers/AppController.html":{}}}],["staging",{"_index":1251,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["staging/production",{"_index":3711,"title":{},"body":{"index.html":{}}}],["staging/productiondocker",{"_index":3715,"title":{},"body":{"index.html":{}}}],["staging/productionrunning",{"_index":3717,"title":{},"body":{"index.html":{}}}],["standardize",{"_index":2241,"title":{},"body":{"classes/FileResponseDto-2.html":{}}}],["start",{"_index":1147,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/EnvironmentVariablesValidator.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"injectables/PaginationService.html":{},"interfaces/QueryConfig.html":{},"changelog.html":{},"index.html":{}}}],["start.sh",{"_index":3714,"title":{},"body":{"index.html":{}}}],["started",{"_index":3343,"title":{"changelog.html":{},"contributing.html":{},"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["starter",{"_index":3606,"title":{},"body":{"index.html":{}}}],["starter.git",{"_index":3672,"title":{},"body":{"index.html":{}}}],["startindex",{"_index":2733,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{}}}],["startpage",{"_index":2731,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{}}}],["startpage).keys()).map((i",{"_index":2761,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["starts",{"_index":3564,"title":{},"body":{"miscellaneous/functions.html":{}}}],["state",{"_index":481,"title":{"classes/State.html":{}},"body":{"modules/ApiModule.html":{},"classes/BankDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"classes/Query-10.html":{},"classes/State.html":{},"controllers/StateController.html":{},"classes/StateDto.html":{},"modules/StateModule.html":{},"injectables/StateService.html":{},"classes/UpdateDto-6.html":{},"coverage.html":{}}}],["state's",{"_index":3223,"title":{},"body":{"classes/State.html":{}}}],["state.controller",{"_index":3269,"title":{},"body":{"modules/StateModule.html":{}}}],["state.service",{"_index":3243,"title":{},"body":{"controllers/StateController.html":{},"modules/StateModule.html":{}}}],["state_mas",{"_index":898,"title":{},"body":{"injectables/CityService.html":{},"classes/Query-10.html":{},"injectables/StateService.html":{}}}],["state_mas.status=1",{"_index":912,"title":{},"body":{"injectables/CityService.html":{}}}],["state_name",{"_index":937,"title":{},"body":{"injectables/CityService.html":{}}}],["statecontroller",{"_index":3229,"title":{"controllers/StateController.html":{}},"body":{"controllers/StateController.html":{},"modules/StateModule.html":{},"coverage.html":{}}}],["statedto",{"_index":3233,"title":{"classes/StateDto.html":{}},"body":{"controllers/StateController.html":{},"classes/StateDto.html":{},"injectables/StateService.html":{},"classes/UpdateDto-6.html":{},"coverage.html":{}}}],["statements",{"_index":3401,"title":{},"body":{"coverage.html":{}}}],["statemodule",{"_index":444,"title":{"modules/StateModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/StateModule.html":{},"modules.html":{},"overview.html":{}}}],["states",{"_index":3231,"title":{},"body":{"controllers/StateController.html":{},"injectables/StateService.html":{}}}],["states/:id_state",{"_index":3247,"title":{},"body":{"controllers/StateController.html":{}}}],["stateservice",{"_index":3232,"title":{"injectables/StateService.html":{}},"body":{"controllers/StateController.html":{},"modules/StateModule.html":{},"injectables/StateService.html":{},"coverage.html":{},"overview.html":{}}}],["status",{"_index":40,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"controllers/AddressTypeController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"controllers/BankController.html":{},"classes/BankDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"controllers/CityController.html":{},"classes/CityDto.html":{},"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ContactDto.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"classes/CountryMas.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/Document.html":{},"controllers/DocumentController.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"controllers/DocumentGroupController.html":{},"classes/DocumentGroupDto.html":{},"classes/DynamicQueryBuilder.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/FilterQueryDto.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PaginationQueryDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"classes/SortByDto.html":{},"classes/State.html":{},"controllers/StateController.html":{},"classes/StateDto.html":{}}}],["status=1",{"_index":907,"title":{},"body":{"injectables/CityService.html":{}}}],["status_codes",{"_index":651,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["status_codes[status",{"_index":3184,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["status_codes[statuscode",{"_index":674,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["statuscode",{"_index":423,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"injectables/FilesS3PresignedService.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["stop.sh",{"_index":3716,"title":{},"body":{"index.html":{}}}],["storage",{"_index":2120,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileResponseDto-2.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"injectables/FilesLocalService.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["stored",{"_index":1467,"title":{},"body":{"injectables/ContactService.html":{}}}],["strategies",{"_index":2832,"title":{},"body":{"injectables/PaginationService.html":{}}}],["stream",{"_index":2307,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["street",{"_index":548,"title":{},"body":{"controllers/AppController.html":{}}}],["strict",{"_index":2210,"title":{},"body":{"classes/FileNotImageException.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/UserNotFoundException.html":{}}}],["string",{"_index":44,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"classes/BankDto.html":{},"injectables/BankService.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"controllers/CityController.html":{},"classes/CityDto.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ConfigService.html":{},"classes/ContactDto.html":{},"injectables/ContactService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/Document.html":{},"controllers/DocumentController.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"controllers/DocumentGroupController.html":{},"classes/DocumentGroupDto.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryCountryDto.html":{},"interfaces/QueryOptions.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/State.html":{},"controllers/StateController.html":{},"classes/StateDto.html":{},"injectables/StateService.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{}}}],["string(value).replace(/['\"]+/g",{"_index":2599,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["strings",{"_index":1256,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["string})@apiokresponse({status",{"_index":162,"title":{},"body":{"controllers/AddressTypeController.html":{},"controllers/BankController.html":{},"controllers/CityController.html":{},"controllers/CountriesController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"controllers/StateController.html":{}}}],["string})@apiokresponse({type",{"_index":182,"title":{},"body":{"controllers/AddressTypeController.html":{},"controllers/BankController.html":{},"controllers/CityController.html":{},"controllers/CountriesController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"controllers/StateController.html":{}}}],["string})@isoptional()@transform(undefined)@validatenested()@type(undefined",{"_index":3157,"title":{},"body":{"classes/QueryCountryDto.html":{}}}],["string})@isoptional()@transform(undefined)@validatenested({each",{"_index":3162,"title":{},"body":{"classes/QueryCountryDto.html":{}}}],["strippedvalue",{"_index":2598,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["structure",{"_index":97,"title":{},"body":{"classes/AddressType.html":{},"classes/AddressUpdateDto.html":{},"classes/BankUpdateDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"classes/Country.html":{},"classes/CountryMas.html":{},"classes/Currency.html":{},"classes/Document.html":{},"classes/DocumentGroup.html":{},"classes/FileResponseDto-2.html":{},"classes/State.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"miscellaneous/functions.html":{}}}],["structures",{"_index":3195,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{},"miscellaneous/functions.html":{}}}],["studio",{"_index":3676,"title":{},"body":{"index.html":{}}}],["style",{"_index":2626,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"contributing.html":{},"index.html":{}}}],["subject",{"_index":3786,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":3779,"title":{},"body":{"license.html":{}}}],["submitting",{"_index":3396,"title":{},"body":{"contributing.html":{}}}],["substantial",{"_index":3790,"title":{},"body":{"license.html":{}}}],["success",{"_index":1805,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["successful",{"_index":2413,"title":{},"body":{"controllers/FilesS3Controller.html":{}}}],["successfully",{"_index":164,"title":{},"body":{"controllers/AddressTypeController.html":{},"controllers/BankController.html":{},"controllers/CityController.html":{},"injectables/ContactService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"classes/FileResponseDto.html":{},"controllers/StateController.html":{}}}],["such",{"_index":1594,"title":{},"body":{"classes/Country.html":{},"classes/FileResponseDto-1.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"injectables/FilesS3Service.html":{},"injectables/FilesService.html":{},"classes/HttpErrorFilter.html":{},"injectables/PaginationService.html":{},"classes/Query-10.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"classes/State.html":{},"index.html":{}}}],["suggesting",{"_index":3377,"title":{},"body":{"contributing.html":{}}}],["summary",{"_index":3736,"title":{},"body":{"index.html":{}}}],["super",{"_index":2935,"title":{},"body":{"injectables/PrismaService.html":{}}}],["super('error.file.not_image",{"_index":2214,"title":{},"body":{"classes/FileNotImageException.html":{}}}],["super('error.user_not_found",{"_index":3301,"title":{},"body":{"classes/UserNotFoundException.html":{}}}],["super(message",{"_index":2213,"title":{},"body":{"classes/FileNotImageException.html":{}}}],["super.catch(exception",{"_index":2901,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["support",{"_index":1254,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"index.html":{},"modules.html":{}}}],["supports",{"_index":2831,"title":{},"body":{"injectables/PaginationService.html":{},"injectables/PrismaService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["surat",{"_index":830,"title":{},"body":{"classes/Cities.html":{},"classes/CityDto.html":{}}}],["sussefullty",{"_index":1457,"title":{},"body":{"injectables/ContactService.html":{}}}],["svg",{"_index":3814,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":100,"title":{},"body":{"classes/AddressType.html":{},"controllers/AppController.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"classes/CountryMas.html":{},"classes/Currency.html":{},"classes/Document.html":{},"classes/DocumentGroup.html":{},"classes/FileResponseDto-1.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["swaggerregistry",{"_index":3414,"title":{},"body":{"coverage.html":{}}}],["switch",{"_index":2886,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["switching",{"_index":2394,"title":{},"body":{"modules/FilesModule.html":{}}}],["symbol",{"_index":1608,"title":{},"body":{"classes/Country.html":{},"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/Query-3.html":{}}}],["symbol_native",{"_index":1725,"title":{},"body":{"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/Query-3.html":{}}}],["synchronize",{"_index":1282,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{}}}],["syntax",{"_index":922,"title":{},"body":{"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/DynamicQueryBuilder.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{}}}],["syntaxgenerator",{"_index":1039,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["system",{"_index":2134,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/UserNotFoundException.html":{}}}],["t",{"_index":1066,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"interfaces/QueryConfig.html":{},"classes/SortByDto.html":{},"miscellaneous/typealiases.html":{}}}],["table",{"_index":344,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/DynamicQueryBuilder.html":{},"interfaces/IPaginationFieldConfig.html":{},"classes/Query.html":{},"classes/Query-3.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{},"coverage.html":{}}}],["table${index",{"_index":1099,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["table/model",{"_index":1064,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["table1",{"_index":1100,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["table2",{"_index":1101,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["tables",{"_index":1056,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":3497,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":2411,"title":{},"body":{"controllers/FilesS3Controller.html":{}}}],["tags",{"_index":528,"title":{},"body":{"controllers/AppController.html":{},"controllers/FilesS3Controller.html":{}}}],["takes",{"_index":3567,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tasks",{"_index":2359,"title":{},"body":{"modules/FilesLocalModule.html":{},"injectables/FilesService.html":{}}}],["taskservice",{"_index":2655,"title":{},"body":{"modules/HelperModule.html":{}}}],["teardown",{"_index":2905,"title":{},"body":{"injectables/PrismaService.html":{}}}],["temp_file_upload_url",{"_index":1369,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IUploadFileConfig.html":{}}}],["template",{"_index":2815,"title":{},"body":{"classes/PaginationResponseDto.html":{}}}],["terminusmodule",{"_index":607,"title":{},"body":{"modules/AppModule.html":{}}}],["test",{"_index":2099,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"contributing.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["test:covdatabase",{"_index":3707,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":3706,"title":{},"body":{"index.html":{}}}],["testing",{"_index":2100,"title":{},"body":{"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["tests",{"_index":3395,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["texposedaccountinfo",{"_index":2589,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["text",{"_index":1609,"title":{},"body":{"classes/Country.html":{}}}],["thanks",{"_index":3750,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":2939,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$disconnect",{"_index":2940,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$queryraw`select",{"_index":2959,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$queryrawunsafe(query",{"_index":2942,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$transaction(actions",{"_index":2958,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this._validationfilter(validationerrors",{"_index":666,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["this.addressservice.create(createdto",{"_index":223,"title":{},"body":{"controllers/AddressTypeController.html":{}}}],["this.addressservice.delete(id",{"_index":240,"title":{},"body":{"controllers/AddressTypeController.html":{}}}],["this.addressservice.findall(query",{"_index":231,"title":{},"body":{"controllers/AddressTypeController.html":{}}}],["this.addressservice.findone(id",{"_index":236,"title":{},"body":{"controllers/AddressTypeController.html":{}}}],["this.addressservice.update(id",{"_index":228,"title":{},"body":{"controllers/AddressTypeController.html":{}}}],["this.allowedkeys",{"_index":1068,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["this.allowedkeys.join",{"_index":1070,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["this.bankservice.create(createdto",{"_index":721,"title":{},"body":{"controllers/BankController.html":{}}}],["this.bankservice.delete(id",{"_index":733,"title":{},"body":{"controllers/BankController.html":{}}}],["this.bankservice.findall(query",{"_index":727,"title":{},"body":{"controllers/BankController.html":{}}}],["this.bankservice.findone(id",{"_index":730,"title":{},"body":{"controllers/BankController.html":{}}}],["this.bankservice.update(id",{"_index":725,"title":{},"body":{"controllers/BankController.html":{}}}],["this.checkconsumerstatus",{"_index":1461,"title":{},"body":{"injectables/ContactService.html":{}}}],["this.cityservice.create(createdto",{"_index":850,"title":{},"body":{"controllers/CityController.html":{}}}],["this.cityservice.delete(id",{"_index":862,"title":{},"body":{"controllers/CityController.html":{}}}],["this.cityservice.findall(query",{"_index":856,"title":{},"body":{"controllers/CityController.html":{}}}],["this.cityservice.findone(id",{"_index":859,"title":{},"body":{"controllers/CityController.html":{}}}],["this.cityservice.update(id",{"_index":854,"title":{},"body":{"controllers/CityController.html":{}}}],["this.commonquery",{"_index":891,"title":{},"body":{"injectables/CityService.html":{}}}],["this.commonquery.findwithdynamicjoin1",{"_index":939,"title":{},"body":{"injectables/CityService.html":{}}}],["this.commonquery.findwithdynamicjoin3",{"_index":897,"title":{},"body":{"injectables/CityService.html":{}}}],["this.configservice.get('app.apiprefix",{"_index":2380,"title":{},"body":{"injectables/FilesLocalService.html":{},"injectables/HomeService.html":{}}}],["this.configservice.get('app.appprefix",{"_index":2676,"title":{},"body":{"injectables/HomeService.html":{}}}],["this.configservice.get('app.description",{"_index":2675,"title":{},"body":{"injectables/HomeService.html":{}}}],["this.configservice.get('app.name",{"_index":2674,"title":{},"body":{"injectables/HomeService.html":{}}}],["this.configservice.get('file.maxfilesize",{"_index":2513,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["this.configservice.getorthrow('file.awsdefaults3bucket",{"_index":2517,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["this.consumerhost",{"_index":1485,"title":{},"body":{"injectables/ContactService.html":{}}}],["this.contactservice.create(createdto",{"_index":1401,"title":{},"body":{"controllers/ContactController.html":{}}}],["this.countriesservice.create(createdto",{"_index":1518,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CountryController.html":{}}}],["this.countriesservice.delete(id",{"_index":1526,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CountryController.html":{}}}],["this.countriesservice.findall(paginationquery",{"_index":1563,"title":{},"body":{"controllers/CountriesController.html":{}}}],["this.countriesservice.findall(query",{"_index":1514,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CountryController.html":{}}}],["this.countriesservice.findmanywithpagination",{"_index":1545,"title":{},"body":{"controllers/CountriesController.html":{}}}],["this.countriesservice.update(id",{"_index":1522,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/CountryController.html":{}}}],["this.create",{"_index":2498,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["this.createquery",{"_index":1069,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["this.createquery('insert",{"_index":1075,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["this.createquery('select_with_dynamic_join",{"_index":1096,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["this.createquery('update",{"_index":1085,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["this.currenciesservice.create(createdto",{"_index":1759,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["this.currenciesservice.delete(id",{"_index":1770,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["this.currenciesservice.findall(query",{"_index":1766,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["this.currenciesservice.update(id",{"_index":1764,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["this.currentpage",{"_index":2763,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["this.datasource.query(sqlquery",{"_index":952,"title":{},"body":{"injectables/CityService.html":{}}}],["this.documentgroupservice.create(createdto",{"_index":1887,"title":{},"body":{"controllers/DocumentGroupController.html":{}}}],["this.documentgroupservice.delete(id",{"_index":1893,"title":{},"body":{"controllers/DocumentGroupController.html":{}}}],["this.documentgroupservice.findall(query",{"_index":1891,"title":{},"body":{"controllers/DocumentGroupController.html":{}}}],["this.documentgroupservice.findone(id",{"_index":1892,"title":{},"body":{"controllers/DocumentGroupController.html":{}}}],["this.documentgroupservice.update(id",{"_index":1889,"title":{},"body":{"controllers/DocumentGroupController.html":{}}}],["this.documentservice.create(createdto",{"_index":1847,"title":{},"body":{"controllers/DocumentController.html":{}}}],["this.documentservice.delete(id",{"_index":1859,"title":{},"body":{"controllers/DocumentController.html":{}}}],["this.documentservice.findall(query",{"_index":1853,"title":{},"body":{"controllers/DocumentController.html":{}}}],["this.documentservice.findone(id",{"_index":1856,"title":{},"body":{"controllers/DocumentController.html":{}}}],["this.documentservice.update(id",{"_index":1851,"title":{},"body":{"controllers/DocumentController.html":{}}}],["this.endindex",{"_index":2769,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["this.endpage",{"_index":2767,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["this.filerepository.create",{"_index":2521,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["this.filesservice.create(file",{"_index":2346,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{}}}],["this.filesservice.generatepresignedurl(key",{"_index":2483,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["this.findone(id",{"_index":332,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["this.findone(inserted.insertid",{"_index":326,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["this.findone(updated[0].updatedid",{"_index":340,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["this.formatvalue(conds[key",{"_index":1081,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/Query-4.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{}}}],["this.formatvalue(conds[key])).join",{"_index":3009,"title":{},"body":{"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{}}}],["this.formatvalue(data[key",{"_index":3039,"title":{},"body":{"classes/Query-2.html":{}}}],["this.formatvalue(id",{"_index":1074,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/Query-2.html":{},"interfaces/QueryConfig.html":{}}}],["this.formatvalue(updatedata[key",{"_index":3140,"title":{},"body":{"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{}}}],["this.formatvalue(value",{"_index":1094,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/Query-10.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"interfaces/QueryConfig.html":{}}}],["this.generatepresignedurl(&#39;path/to/file&#39",{"_index":2504,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["this.generatepresignedurl('path/to/file",{"_index":2503,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["this.get(\"database_host",{"_index":1272,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get(\"database_pass",{"_index":1278,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get(\"database_schema",{"_index":1279,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get(\"database_user",{"_index":1276,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('api_key",{"_index":1365,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('api_prefix",{"_index":1298,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('app_name",{"_index":1288,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_access_key_id",{"_index":1382,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_default_s3_bucket",{"_index":1386,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_s3_access_key_id",{"_index":1302,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_s3_bucket_name",{"_index":1306,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_s3_companion_secret",{"_index":1316,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_s3_default_region",{"_index":1308,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_s3_endpoint",{"_index":1312,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_s3_region",{"_index":1388,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_s3_secret_access_key",{"_index":1304,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_s3_server_host",{"_index":1314,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_s3_temp_directory",{"_index":1310,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('aws_secret_access_key",{"_index":1384,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('backend_domain",{"_index":1295,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('file_driver",{"_index":1380,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('file_upload_destination",{"_index":1372,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('from_email",{"_index":1343,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('frontend_domain",{"_index":1293,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('jwt_algorithm",{"_index":1330,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('jwt_audience",{"_index":1334,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('jwt_issuer",{"_index":1332,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('jwt_secret_key",{"_index":1328,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('multiple_file_path",{"_index":1378,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('node_emailer_from_email",{"_index":1358,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('node_emailer_host",{"_index":1350,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('node_emailer_password",{"_index":1356,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('node_emailer_to_email",{"_index":1360,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('node_emailer_user",{"_index":1354,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('node_env",{"_index":1265,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('profile_pic_file_path",{"_index":1376,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('qr_image",{"_index":1321,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('qr_image_path",{"_index":1323,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('qr_image_path_salt",{"_index":1325,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('sender_id",{"_index":1367,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('sendgrid_api_key",{"_index":1341,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('sms_provider_name",{"_index":1363,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('temp_file_upload_url",{"_index":1370,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('to_email",{"_index":1345,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('tus_storage_driver",{"_index":1318,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.get('welcome_email",{"_index":1347,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.getnumber(\"database_port",{"_index":1274,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.getnumber('jwt_expiration_time",{"_index":1338,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.getnumber('jwt_expires_in_seconds",{"_index":1336,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.getnumber('max_upload_file_size",{"_index":1374,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.getnumber('node_emailer_port",{"_index":1352,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.getnumber('port",{"_index":1296,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.healthcheckservice.check",{"_index":540,"title":{},"body":{"controllers/AppController.html":{}}}],["this.logger.debug",{"_index":569,"title":{},"body":{"controllers/AppController.html":{}}}],["this.logger.debug('foo",{"_index":560,"title":{},"body":{"controllers/AppController.html":{}}}],["this.logger.emergency('i",{"_index":594,"title":{},"body":{"controllers/AppController.html":{}}}],["this.logger.error('i",{"_index":590,"title":{},"body":{"controllers/AppController.html":{}}}],["this.logger.fatal('i",{"_index":592,"title":{},"body":{"controllers/AppController.html":{}}}],["this.logger.info('i",{"_index":579,"title":{},"body":{"controllers/AppController.html":{}}}],["this.logger.log('hello",{"_index":558,"title":{},"body":{"controllers/AppController.html":{}}}],["this.logger.verbose",{"_index":564,"title":{},"body":{"controllers/AppController.html":{}}}],["this.logger.warn('i",{"_index":586,"title":{},"body":{"controllers/AppController.html":{}}}],["this.messagequeue.push(createdto",{"_index":1464,"title":{},"body":{"injectables/ContactService.html":{}}}],["this.model",{"_index":1067,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["this.module",{"_index":303,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["this.nodeenv",{"_index":1246,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["this.pages",{"_index":2770,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["this.pagesize",{"_index":2764,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["this.paginationservice.paginate",{"_index":360,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/CountriesService-1.html":{},"injectables/DocumentGroupService.html":{}}}],["this.paginationservice.paginate(selectquery",{"_index":794,"title":{},"body":{"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["this.prisma.$queryrawunsafe(countquery",{"_index":2842,"title":{},"body":{"injectables/PaginationService.html":{}}}],["this.prisma.$queryrawunsafe(dataquery",{"_index":2841,"title":{},"body":{"injectables/PaginationService.html":{}}}],["this.prisma.$queryrawunsafe(finalcountquery",{"_index":2873,"title":{},"body":{"injectables/PaginationService.html":{}}}],["this.prisma.$transaction",{"_index":2840,"title":{},"body":{"injectables/PaginationService.html":{}}}],["this.prisma.executerawquery(this.query.delete",{"_index":364,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["this.prisma.executerawquery(this.query.findbycode",{"_index":1787,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["this.prisma.executerawquery(this.query.findbycode(id",{"_index":1791,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["this.prisma.executerawquery(this.query.findbyid",{"_index":361,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["this.prisma.executerawquery(this.query.findbyname",{"_index":313,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["this.prisma.executerawquery(this.query.insert",{"_index":320,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["this.prisma.executerawquery(this.query.update",{"_index":338,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["this.prismaservice.ishealthy",{"_index":541,"title":{},"body":{"controllers/AppController.html":{}}}],["this.query.pgbasequery",{"_index":1795,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["this.query.pgbaseselectfield",{"_index":1794,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["this.querybuilder.builddeletequery(deleteoptions",{"_index":3101,"title":{},"body":{"classes/Query-3.html":{}}}],["this.querybuilder.buildinsertquery(insertoptions",{"_index":3097,"title":{},"body":{"classes/Query-3.html":{}}}],["this.querybuilder.buildselectquery(selectoptions",{"_index":3094,"title":{},"body":{"classes/Query-3.html":{}}}],["this.querystatements",{"_index":3340,"title":{},"body":{"classes/UtilsService.html":{}}}],["this.rabbitclient.close",{"_index":1488,"title":{},"body":{"injectables/ContactService.html":{}}}],["this.rabbitclient.emit('create",{"_index":1455,"title":{},"body":{"injectables/ContactService.html":{}}}],["this.rabbitclient1.close",{"_index":1489,"title":{},"body":{"injectables/ContactService.html":{}}}],["this.rabbitclient1.emit('create",{"_index":1462,"title":{},"body":{"injectables/ContactService.html":{}}}],["this.s3",{"_index":2507,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["this.service.appinfo",{"_index":2665,"title":{},"body":{"controllers/HomeController.html":{}}}],["this.startindex",{"_index":2768,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["this.startpage",{"_index":2766,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["this.stateservice.create(createdto",{"_index":3246,"title":{},"body":{"controllers/StateController.html":{}}}],["this.stateservice.delete(id",{"_index":3258,"title":{},"body":{"controllers/StateController.html":{}}}],["this.stateservice.findall(query",{"_index":3252,"title":{},"body":{"controllers/StateController.html":{}}}],["this.stateservice.findone(id",{"_index":3255,"title":{},"body":{"controllers/StateController.html":{}}}],["this.stateservice.update(id",{"_index":3250,"title":{},"body":{"controllers/StateController.html":{}}}],["this.totalitems",{"_index":2762,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["this.totalpages",{"_index":2765,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{}}}],["this.utilsservice.builddynamicquery",{"_index":357,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["this.utilsservice.builddynamicquery(paginationquery",{"_index":1800,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["this.utilsservice.querystatements",{"_index":1804,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["those",{"_index":3628,"title":{},"body":{"index.html":{}}}],["through",{"_index":272,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CommaSeparated.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"modules/FilesModule.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"injectables/SortBy.html":{},"injectables/StateService.html":{}}}],["throughout",{"_index":2642,"title":{},"body":{"modules/HelperModule.html":{}}}],["throw",{"_index":314,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/FileNotImageException.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/StateService.html":{},"classes/UserNotFoundException.html":{}}}],["thrown",{"_index":403,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/FileNotImageException.html":{},"classes/HttpErrorFilter.html":{},"classes/QueryFailedFilter.html":{},"classes/UserNotFoundException.html":{}}}],["throws",{"_index":304,"title":{},"body":{"injectables/AddressTypeService.html":{},"controllers/AppController.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"injectables/StateService.html":{},"miscellaneous/functions.html":{}}}],["time",{"_index":72,"title":{},"body":{"classes/AddresTypeDto.html":{},"injectables/ContactService.html":{},"classes/Country.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{}}}],["timeout",{"_index":1475,"title":{},"body":{"injectables/ContactService.html":{}}}],["timestamp",{"_index":424,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["timestamps",{"_index":1868,"title":{},"body":{"classes/DocumentGroup.html":{}}}],["timezone",{"_index":1599,"title":{},"body":{"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/Query-2.html":{}}}],["timezones.ts",{"_index":3403,"title":{},"body":{"coverage.html":{}}}],["to_email",{"_index":1344,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/ISendGridConfig.html":{}}}],["together",{"_index":257,"title":{},"body":{"modules/AddressTypeModule.html":{},"modules/BankModule.html":{},"modules/CityModule.html":{},"modules/CountriesModule.html":{},"modules/CountryMasModule.html":{},"modules/CurrenciesModule.html":{},"modules/DocumentGroupModule.html":{},"modules/DocumentModule.html":{},"modules/StateModule.html":{}}}],["tolowercase",{"_index":2449,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["tonumber",{"_index":2563,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["tool/linter",{"_index":3392,"title":{},"body":{"contributing.html":{}}}],["tools",{"_index":3639,"title":{},"body":{"index.html":{}}}],["toplainonly",{"_index":91,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"classes/ContactDto.html":{},"classes/CountryDto.html":{},"classes/CreateCountryDto.html":{},"classes/Currency.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/FileType.html":{},"classes/StateDto.html":{}}}],["tort",{"_index":3810,"title":{},"body":{"license.html":{}}}],["total",{"_index":2594,"title":{},"body":{"classes/FilterQueryDto.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/SortByDto.html":{}}}],["total[0",{"_index":2845,"title":{},"body":{"injectables/PaginationService.html":{}}}],["total[0].count",{"_index":2874,"title":{},"body":{"injectables/PaginationService.html":{}}}],["totalitems",{"_index":2717,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{}}}],["totalpages",{"_index":2729,"title":{},"body":{"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationResponseDto.html":{}}}],["trace",{"_index":584,"title":{},"body":{"controllers/AppController.html":{}}}],["transaction",{"_index":2922,"title":{},"body":{"injectables/PrismaService.html":{}}}],["transactional",{"_index":2924,"title":{},"body":{"injectables/PrismaService.html":{}}}],["transactions",{"_index":2908,"title":{},"body":{"injectables/PrismaService.html":{}}}],["transfer",{"_index":11,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressUpdateDto.html":{},"classes/BankDto.html":{},"classes/BankUpdateDto.html":{},"classes/CityDto.html":{},"classes/Country.html":{},"classes/CountryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileUploadDto.html":{},"classes/State.html":{},"classes/StateDto.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{}}}],["transform",{"_index":87,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/FileType.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"miscellaneous/functions.html":{}}}],["transform(uppercasetransformer",{"_index":1718,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{}}}],["transform(uppercasetransformer)@isdefined()@isnotempty()@isstring()@maxlength(2)@apiproperty({type",{"_index":1707,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["transform(uppercasetransformer)@isdefined()@isnotempty()@isstring()@maxlength(3)@apiproperty({type",{"_index":1726,"title":{},"body":{"classes/CreateDto.html":{}}}],["transform(uppercasetransformer)@isnotempty()@isstring()@maxlength(3)@apiproperty({type",{"_index":1709,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["transformation",{"_index":22,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"classes/CountryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{},"classes/StateDto.html":{}}}],["transformed",{"_index":824,"title":{},"body":{"classes/Cities.html":{},"classes/CountryMas.html":{},"classes/Currency.html":{},"classes/Document.html":{},"classes/DocumentGroup.html":{}}}],["transformer",{"_index":33,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"classes/ContactDto.html":{},"classes/CountryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/FileType.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/StateDto.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["transforming",{"_index":34,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"classes/CountryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/FileType.html":{},"classes/StateDto.html":{},"miscellaneous/functions.html":{}}}],["transforms",{"_index":2259,"title":{},"body":{"classes/FileType.html":{},"miscellaneous/functions.html":{}}}],["transport",{"_index":1415,"title":{},"body":{"modules/ContactModule.html":{}}}],["transport.redis",{"_index":1429,"title":{},"body":{"modules/ContactModule.html":{}}}],["transport.rmq",{"_index":1423,"title":{},"body":{"modules/ContactModule.html":{}}}],["transport.tcp",{"_index":1420,"title":{},"body":{"modules/ContactModule.html":{}}}],["true",{"_index":55,"title":{},"body":{"classes/AddresTypeDto.html":{},"modules/AppModule.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"classes/ContactDto.html":{},"classes/CountryDto.html":{},"classes/CreateCountryDto.html":{},"classes/Currency.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileType.html":{},"injectables/FilesLocalService.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"injectables/HomeService.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PrismaService.html":{},"classes/QueryCountryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/StateDto.html":{}}}],["true})@isnotempty()@isstring",{"_index":2551,"title":{},"body":{"classes/FilterQueryDto.html":{}}}],["true})@type(undefined",{"_index":2798,"title":{},"body":{"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{}}}],["try",{"_index":676,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{},"injectables/ContactService.html":{},"classes/HttpErrorFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/QueryFailedFilter.html":{}}}],["tus_storage_driver",{"_index":1317,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/IAwsConfig.html":{}}}],["two",{"_index":3596,"title":{},"body":{"miscellaneous/functions.html":{}}}],["type",{"_index":42,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"classes/AddressUpdateDto.html":{},"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"controllers/BankController.html":{},"classes/BankDto.html":{},"injectables/BankService.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"controllers/CityController.html":{},"classes/CityDto.html":{},"injectables/CityService.html":{},"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ConfigService.html":{},"controllers/ContactController.html":{},"classes/ContactDto.html":{},"injectables/ContactService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"classes/Currency.html":{},"classes/Document.html":{},"controllers/DocumentController.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"controllers/DocumentGroupController.html":{},"classes/DocumentGroupDto.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"injectables/FilesLocalService.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"injectables/HomeService.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"interfaces/IPaginationFieldConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryCountryDto.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/State.html":{},"controllers/StateController.html":{},"classes/StateDto.html":{},"injectables/StateService.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["type.tolowercase",{"_index":1113,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["type/contact.controller.ts",{"_index":1394,"title":{},"body":{"controllers/ContactController.html":{},"coverage.html":{}}}],["type/contact.controller.ts:11",{"_index":1395,"title":{},"body":{"controllers/ContactController.html":{}}}],["type/contact.module",{"_index":474,"title":{},"body":{"modules/ApiModule.html":{}}}],["type/contact.module.ts",{"_index":1413,"title":{},"body":{"modules/ContactModule.html":{}}}],["type/contact.service.ts",{"_index":1435,"title":{},"body":{"injectables/ContactService.html":{},"coverage.html":{}}}],["type/contact.service.ts:10",{"_index":1448,"title":{},"body":{"injectables/ContactService.html":{}}}],["type/contact.service.ts:11",{"_index":1443,"title":{},"body":{"injectables/ContactService.html":{}}}],["type/contact.service.ts:16",{"_index":1446,"title":{},"body":{"injectables/ContactService.html":{}}}],["type/contact.service.ts:39",{"_index":1445,"title":{},"body":{"injectables/ContactService.html":{}}}],["type/contact.service.ts:62",{"_index":1447,"title":{},"body":{"injectables/ContactService.html":{}}}],["type/database",{"_index":2050,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["type/dto/create.dto.ts",{"_index":1402,"title":{},"body":{"classes/ContactDto.html":{},"coverage.html":{}}}],["type/dto/create.dto.ts:21",{"_index":1407,"title":{},"body":{"classes/ContactDto.html":{}}}],["type/dto/create.dto.ts:35",{"_index":1409,"title":{},"body":{"classes/ContactDto.html":{}}}],["type/dto/create.dto.ts:42",{"_index":1408,"title":{},"body":{"classes/ContactDto.html":{}}}],["typealiases",{"_index":3821,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":89,"title":{},"body":{"classes/AddresTypeDto.html":{},"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/DynamicQueryBuilder.html":{},"injectables/PrismaService.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{},"classes/UtilsService.html":{}}}],["typeorm",{"_index":950,"title":{},"body":{"injectables/CityService.html":{},"classes/QueryFailedFilter.html":{}}}],["typeormconfig",{"_index":1267,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["typeormmoduleoptions",{"_index":1268,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["types",{"_index":1119,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/SortByDto.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"classes/UtilsService.html":{},"miscellaneous/enumerations.html":{}}}],["types,@typescript",{"_index":2619,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["typescript",{"_index":983,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/FileNotImageException.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"classes/HttpErrorFilter.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["tz",{"_index":3060,"title":{},"body":{"classes/Query-2.html":{}}}],["tz.abbr",{"_index":3055,"title":{},"body":{"classes/Query-2.html":{}}}],["tz.id_timezone=c.id_timezone",{"_index":3061,"title":{},"body":{"classes/Query-2.html":{}}}],["tz.offset",{"_index":3053,"title":{},"body":{"classes/Query-2.html":{}}}],["tz.offset_in_minutes",{"_index":3054,"title":{},"body":{"classes/Query-2.html":{}}}],["tz.text",{"_index":3056,"title":{},"body":{"classes/Query-2.html":{}}}],["tz.value",{"_index":3052,"title":{},"body":{"classes/Query-2.html":{}}}],["ui",{"_index":3599,"title":{},"body":{"miscellaneous/functions.html":{}}}],["unauthorized",{"_index":2025,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["undefined",{"_index":163,"title":{},"body":{"controllers/AddressTypeController.html":{},"controllers/BankController.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/ConfigService.html":{},"controllers/CountriesController.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationMetaDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"controllers/StateController.html":{},"classes/UtilsService.html":{},"miscellaneous/typealiases.html":{}}}],["undefined})@apifile()@useinterceptors(undefined",{"_index":2313,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["undefined})@isenum(paginationtype)@isoptional",{"_index":2805,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["under",{"_index":2410,"title":{},"body":{"controllers/FilesS3Controller.html":{}}}],["unique",{"_index":57,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"classes/BankDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"classes/ContactDto.html":{},"classes/Country.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{},"classes/Currency.html":{},"classes/Document.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"classes/DocumentGroupDto.html":{},"classes/FileType.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"classes/State.html":{},"classes/StateDto.html":{}}}],["unit",{"_index":3704,"title":{},"body":{"index.html":{}}}],["united",{"_index":2607,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["unknown",{"_index":398,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["unnamed",{"_index":3487,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["unprocessableentityexception",{"_index":2375,"title":{},"body":{"injectables/FilesLocalService.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesS3Service.html":{}}}],["unsupported",{"_index":2508,"title":{},"body":{"injectables/FilesS3PresignedService.html":{}}}],["unused",{"_index":985,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{},"classes/UtilsService.html":{}}}],["up",{"_index":450,"title":{},"body":{"modules/ApiModule.html":{},"controllers/AppController.html":{},"classes/CreateDto.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/PrismaService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["upadetid",{"_index":3040,"title":{},"body":{"classes/Query-2.html":{}}}],["update",{"_index":73,"title":{},"body":{"classes/AddresTypeDto.html":{},"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"classes/AddressUpdateDto.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"classes/BankUpdateDto.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/DynamicQueryBuilder.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"index.html":{}}}],["update(id",{"_index":184,"title":{},"body":{"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{}}}],["update1(id",{"_index":3034,"title":{},"body":{"classes/Query-2.html":{}}}],["updatebyid/:id_country",{"_index":1519,"title":{},"body":{"controllers/CountriesController.html":{}}}],["updated",{"_index":187,"title":{},"body":{"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{},"changelog.html":{}}}],["updated[0].updatedid",{"_index":339,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["updated[0]?.updatedid",{"_index":1585,"title":{},"body":{"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{}}}],["updated_at",{"_index":41,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"classes/CountryDto.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/Query-10.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"classes/StateDto.html":{}}}],["updatedata",{"_index":1089,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/Query-4.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{}}}],["updatedid",{"_index":3016,"title":{},"body":{"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{}}}],["updatedto",{"_index":185,"title":{"classes/UpdateDto.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{}},"body":{"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"classes/AddressUpdateDto.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"classes/BankUpdateDto.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{},"classes/UpdateDto.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"coverage.html":{}}}],["updatedto.id_address_type",{"_index":333,"title":{},"body":{"injectables/AddressTypeService.html":{}}}],["updatedto.id_bank",{"_index":786,"title":{},"body":{"injectables/BankService.html":{}}}],["updatedto.id_city",{"_index":895,"title":{},"body":{"injectables/CityService.html":{}}}],["updatedto.id_country",{"_index":1584,"title":{},"body":{"injectables/CountriesService-1.html":{}}}],["updatedto.id_document",{"_index":1926,"title":{},"body":{"injectables/DocumentService.html":{}}}],["updatedto.id_document_group",{"_index":1911,"title":{},"body":{"injectables/DocumentGroupService.html":{}}}],["updatedto.id_state",{"_index":3277,"title":{},"body":{"injectables/StateService.html":{}}}],["updatedto.updated_at",{"_index":334,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["updates",{"_index":374,"title":{},"body":{"classes/AddressUpdateDto.html":{},"injectables/BankService.html":{},"classes/BankUpdateDto.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{}}}],["updating",{"_index":16,"title":{},"body":{"classes/AddresTypeDto.html":{},"injectables/AddressTypeService.html":{},"classes/AddressUpdateDto.html":{},"classes/BankDto.html":{},"injectables/BankService.html":{},"classes/BankUpdateDto.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/Query-10.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"injectables/StateService.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{}}}],["upload",{"_index":2239,"title":{},"body":{"classes/FileResponseDto-2.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{}}}],["upload.service",{"_index":2330,"title":{},"body":{"controllers/FilesLocalController.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["upload.service.ts",{"_index":3480,"title":{},"body":{"coverage.html":{}}}],["uploaded",{"_index":2211,"title":{},"body":{"classes/FileNotImageException.html":{},"classes/FileResponseDto.html":{},"classes/FileResponseDto-1.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3Service.html":{}}}],["uploadedfile",{"_index":2315,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["uploader",{"_index":2392,"title":{},"body":{"modules/FilesModule.html":{}}}],["uploadfile",{"_index":2301,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{}}}],["uploadfile(@body",{"_index":2480,"title":{},"body":{"controllers/FilesS3PresignedController.html":{}}}],["uploadfile(@uploadedfile",{"_index":2345,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["uploadfile(file",{"_index":2308,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{}}}],["uploadfileconfig",{"_index":1368,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{}}}],["uploading",{"_index":2246,"title":{},"body":{"classes/FileResponseDto-2.html":{},"classes/FileUploadDto.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/FilesService.html":{}}}],["uploads",{"_index":2137,"title":{},"body":{"classes/EnvironmentVariablesValidator-2.html":{},"classes/FileNotImageException.html":{},"controllers/FilesLocalController.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["uploadsignedurl",{"_index":2242,"title":{},"body":{"classes/FileResponseDto-2.html":{},"injectables/FilesS3PresignedService.html":{}}}],["uppercase",{"_index":1671,"title":{},"body":{"classes/CountryDto.html":{},"classes/CreateDto.html":{}}}],["uppercasetransformer",{"_index":1715,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"coverage.html":{}}}],["url",{"_index":1430,"title":{},"body":{"modules/ContactModule.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"controllers/FilesS3PresignedController.html":{},"injectables/FilesS3PresignedService.html":{},"classes/HttpErrorFilter.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"classes/Query-1.html":{}}}],["urls",{"_index":1424,"title":{},"body":{"modules/ContactModule.html":{},"controllers/FilesS3PresignedController.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{}}}],["usage",{"_index":3572,"title":{},"body":{"miscellaneous/functions.html":{}}}],["use",{"_index":941,"title":{},"body":{"injectables/CityService.html":{},"classes/FileNotImageException.html":{},"modules/FilesLocalModule.html":{},"modules/FilesS3PresignedModule.html":{},"classes/FilterQueryDto.html":{},"modules/HelperModule.html":{},"interfaces/IAppConfig.html":{},"interfaces/IAwsConfig.html":{},"interfaces/IFileConfig.html":{},"interfaces/IJWTConfig.html":{},"interfaces/INodeEmailerConfig.html":{},"interfaces/IPostgreSQLConfig.html":{},"interfaces/ISMSConfig.html":{},"interfaces/ISendGridConfig.html":{},"interfaces/IUploadFileConfig.html":{},"classes/PaginationQueryDto.html":{},"classes/Query-10.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"classes/SortByDto.html":{},"classes/UserNotFoundException.html":{},"classes/UtilsService.html":{},"contributing.html":{},"index.html":{},"license.html":{}}}],["useclass",{"_index":486,"title":{},"body":{"modules/ApiModule.html":{},"classes/HttpErrorFilter.html":{}}}],["used",{"_index":14,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"classes/AddressUpdateDto.html":{},"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/BankDto.html":{},"classes/BankUpdateDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/Country.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/Currency.html":{},"classes/Document.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"classes/DocumentGroupDto.html":{},"classes/DynamicQueryBuilder.html":{},"classes/FileResponseDto-1.html":{},"classes/FileResponseDto-2.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"controllers/HomeController.html":{},"injectables/HomeService.html":{},"interfaces/IAppConfig.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"injectables/PrismaService.html":{},"classes/Query.html":{},"interfaces/QueryConfig.html":{},"classes/QueryFailedFilter.html":{},"interfaces/QueryOptions.html":{},"injectables/ResolvePromisesInterceptor.html":{},"classes/State.html":{},"classes/StateDto.html":{},"classes/UpdateDto-1.html":{},"classes/UpdateDto-2.html":{},"classes/UpdateDto-3.html":{},"classes/UpdateDto-4.html":{},"classes/UpdateDto-5.html":{},"classes/UpdateDto-6.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["useexisting",{"_index":633,"title":{},"body":{"modules/AppModule.html":{}}}],["usefactory",{"_index":2439,"title":{},"body":{"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{}}}],["useful",{"_index":3839,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["useinterceptors",{"_index":2316,"title":{},"body":{"controllers/FilesLocalController.html":{},"controllers/FilesS3Controller.html":{}}}],["useinterceptors(fileinterceptor('file",{"_index":2417,"title":{},"body":{"controllers/FilesS3Controller.html":{}}}],["user",{"_index":542,"title":{},"body":{"controllers/AppController.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/UserNotFoundException.html":{},"index.html":{}}}],["usermodule",{"_index":2971,"title":{},"body":{"classes/Query.html":{}}}],["username",{"_index":1275,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{}}}],["usernotfoundexception",{"_index":3293,"title":{"classes/UserNotFoundException.html":{}},"body":{"classes/UserNotFoundException.html":{},"coverage.html":{}}}],["usernotfoundexception('specific",{"_index":3297,"title":{},"body":{"classes/UserNotFoundException.html":{}}}],["users",{"_index":2972,"title":{},"body":{"classes/Query.html":{}}}],["uses",{"_index":30,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/AddressType.html":{},"controllers/AddressTypeController.html":{},"controllers/AppController.html":{},"controllers/BankController.html":{},"classes/BankDto.html":{},"classes/Banks.html":{},"classes/Cities.html":{},"classes/CityDto.html":{},"controllers/CountryController.html":{},"classes/CountryDto.html":{},"classes/CountryMas.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"controllers/CurrenciesController.html":{},"classes/Currency.html":{},"classes/Document.html":{},"controllers/DocumentController.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroup.html":{},"controllers/DocumentGroupController.html":{},"classes/DocumentGroupDto.html":{},"classes/FileType.html":{},"controllers/HomeController.html":{},"classes/Query-10.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"injectables/ResolvePromisesInterceptor.html":{},"controllers/StateController.html":{},"classes/StateDto.html":{},"miscellaneous/functions.html":{}}}],["using",{"_index":275,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileType.html":{},"modules/FilesLocalModule.html":{},"controllers/FilesS3Controller.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"injectables/FilesS3PresignedService.html":{},"injectables/HomeService.html":{},"classes/Query-2.html":{},"interfaces/QueryConfig.html":{},"injectables/StateService.html":{},"index.html":{}}}],["utc",{"_index":1640,"title":{},"body":{"classes/Country.html":{}}}],["utility",{"_index":1572,"title":{},"body":{"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"modules/HelperModule.html":{},"classes/Query-1.html":{},"classes/UtilsService.html":{},"miscellaneous/typealiases.html":{}}}],["utilize",{"_index":2363,"title":{},"body":{"modules/FilesLocalModule.html":{}}}],["utilizes",{"_index":2827,"title":{},"body":{"injectables/PaginationService.html":{}}}],["utils/dto/infinity",{"_index":1530,"title":{},"body":{"controllers/CountriesController.html":{}}}],["utils/dto/pagination",{"_index":714,"title":{},"body":{"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/PaginationService.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{}}}],["utils/dto/pagination.dto",{"_index":715,"title":{},"body":{"controllers/BankController.html":{},"injectables/BankService.html":{},"controllers/CityController.html":{},"injectables/CityService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService-1.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"interfaces/IPageMetaDtoParameters.html":{},"classes/PaginationMetaDto.html":{},"injectables/PaginationService.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{},"classes/UtilsService.html":{}}}],["utils/dto/pagination.meta.dto",{"_index":2814,"title":{},"body":{"classes/PaginationResponseDto.html":{},"injectables/PaginationService.html":{}}}],["utils/infinity",{"_index":1532,"title":{},"body":{"controllers/CountriesController.html":{}}}],["utils/transformers/upper",{"_index":1745,"title":{},"body":{"classes/CreateDto.html":{}}}],["utils/types/deep",{"_index":1783,"title":{},"body":{"injectables/CurrenciesService.html":{}}}],["utils/types/pagination",{"_index":1580,"title":{},"body":{"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["utils/validate",{"_index":1227,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{}}}],["utilsservice",{"_index":282,"title":{"classes/UtilsService.html":{}},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"modules/HelperModule.html":{},"classes/Query-2.html":{},"injectables/StateService.html":{},"classes/UtilsService.html":{},"coverage.html":{},"overview.html":{}}}],["v.replace(/'/g",{"_index":1117,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/UtilsService.html":{}}}],["v1/${file.path",{"_index":2382,"title":{},"body":{"injectables/FilesLocalService.html":{}}}],["v1/countries?page=1&amp;limit=10",{"_index":1502,"title":{},"body":{"controllers/CountriesController.html":{}}}],["v1/countries?page=1&limit=10",{"_index":1500,"title":{},"body":{"controllers/CountriesController.html":{}}}],["v1/currencies/:id_currency",{"_index":1767,"title":{},"body":{"controllers/CurrenciesController.html":{}}}],["v1/upload",{"_index":2336,"title":{},"body":{"controllers/FilesLocalController.html":{}}}],["v1/upload/s3",{"_index":2412,"title":{},"body":{"controllers/FilesS3Controller.html":{}}}],["val.trim",{"_index":2858,"title":{},"body":{"injectables/PaginationService.html":{},"classes/UtilsService.html":{}}}],["valid",{"_index":958,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"miscellaneous/functions.html":{}}}],["validate",{"_index":963,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileUploadDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"miscellaneous/functions.html":{}}}],["validate(isvalidfield",{"_index":2587,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["validate(propertyvalue",{"_index":969,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["validate(sortby",{"_index":2603,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["validate(value",{"_index":999,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["validateconfig",{"_index":1226,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["validateconfig(config",{"_index":3602,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validateconfig(process.env",{"_index":1287,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{}}}],["validated",{"_index":974,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{},"miscellaneous/functions.html":{}}}],["validateif",{"_index":1200,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["validateif((envvalues",{"_index":1239,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["validateif(undefined)@isint()@min(0)@max(65535",{"_index":2043,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{}}}],["validateif(undefined)@isstring",{"_index":2031,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{}}}],["validatenested",{"_index":2541,"title":{},"body":{"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{}}}],["validates",{"_index":971,"title":{},"body":{"injectables/CommaSeparated.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"injectables/FilesS3Service.html":{},"injectables/SortBy.html":{},"miscellaneous/functions.html":{}}}],["validating",{"_index":3605,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validation",{"_index":20,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"injectables/CommaSeparated.html":{},"classes/CountryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"injectables/SortBy.html":{},"classes/StateDto.html":{},"miscellaneous/functions.html":{}}}],["validationarguments",{"_index":965,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["validationerror",{"_index":643,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["validationerror.children",{"_index":697,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["validationerror.children.length",{"_index":698,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["validationerrors",{"_index":647,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["validationoptions",{"_index":3587,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validator",{"_index":32,"title":{},"body":{"classes/AddresTypeDto.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/BankDto.html":{},"classes/CityDto.html":{},"injectables/CommaSeparated.html":{},"classes/ConfigService.html":{},"classes/ContactDto.html":{},"classes/CountryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateDto.html":{},"classes/DocumentDto.html":{},"classes/DocumentGroupDto.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileType.html":{},"classes/FileUploadDto.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QueryCountryDto.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/StateDto.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["validatorconstraint",{"_index":977,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["validatorconstraintinterface",{"_index":978,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["validators/filter.validator",{"_index":2597,"title":{},"body":{"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SortByDto.html":{}}}],["vals",{"_index":1962,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["vals.join",{"_index":1967,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["value",{"_index":88,"title":{},"body":{"classes/AddresTypeDto.html":{},"injectables/CommaSeparated.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"injectables/ContactService.html":{},"classes/Country.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"classes/FileType.html":{},"classes/FilterCountryDto.html":{},"classes/FilterQueryDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PaginationResponseDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/QueryCountryDto.html":{},"interfaces/QueryOptions.html":{},"injectables/SortBy.html":{},"classes/SortByDto.html":{},"classes/SortCountryDto.html":{},"classes/UtilsService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["value.map((v",{"_index":1116,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/UtilsService.html":{}}}],["value.replace(/'/g",{"_index":1118,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/UtilsService.html":{}}}],["value.split",{"_index":1005,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["value.tolowercase",{"_index":2178,"title":{},"body":{"classes/EnvironmentVariablesValidator-3.html":{}}}],["values",{"_index":1079,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/Country.html":{},"classes/DynamicQueryBuilder.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"injectables/HomeService.html":{},"injectables/PaginationService.html":{},"classes/Query.html":{},"classes/Query-1.html":{},"classes/Query-10.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-4.html":{},"classes/Query-5.html":{},"classes/Query-6.html":{},"classes/Query-7.html":{},"classes/Query-8.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"interfaces/QueryOptions.html":{},"classes/State.html":{},"classes/UtilsService.html":{}}}],["values(${values",{"_index":3112,"title":{},"body":{"classes/Query-4.html":{}}}],["values.join",{"_index":1083,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"classes/Query-2.html":{},"classes/Query-3.html":{},"classes/Query-7.html":{},"classes/Query-9.html":{},"interfaces/QueryConfig.html":{},"classes/UtilsService.html":{}}}],["values1",{"_index":3029,"title":{},"body":{"classes/Query-2.html":{}}}],["var",{"_index":677,"title":{},"body":{"classes/BadRequestExceptionFilter.html":{}}}],["variable",{"_index":2055,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"coverage.html":{}}}],["variables",{"_index":603,"title":{},"body":{"modules/AppModule.html":{},"classes/EnvironmentVariablesValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"classes/EnvironmentVariablesValidator-2.html":{},"classes/EnvironmentVariablesValidator-3.html":{},"index.html":{}}}],["various",{"_index":140,"title":{},"body":{"controllers/AddressTypeController.html":{},"injectables/AddressTypeService.html":{},"controllers/BankController.html":{},"injectables/BankService.html":{},"injectables/CountriesService-1.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"controllers/CurrenciesController.html":{},"injectables/CurrenciesService.html":{},"controllers/DocumentController.html":{},"controllers/DocumentGroupController.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"modules/FilesModule.html":{},"classes/State.html":{},"controllers/StateController.html":{},"injectables/StateService.html":{},"miscellaneous/functions.html":{}}}],["vars",{"_index":986,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{},"classes/UtilsService.html":{}}}],["verifying",{"_index":500,"title":{},"body":{"controllers/AppController.html":{}}}],["version",{"_index":526,"title":{},"body":{"controllers/AppController.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"controllers/FilesS3Controller.html":{},"controllers/FilesS3PresignedController.html":{},"index.html":{}}}],["version_neutral",{"_index":517,"title":{},"body":{"controllers/AppController.html":{}}}],["visual",{"_index":3675,"title":{},"body":{"index.html":{}}}],["void",{"_index":410,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadRequestExceptionFilter.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"injectables/ContactService.html":{},"injectables/FilesS3Service.html":{},"classes/HttpErrorFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/QueryFailedFilter.html":{},"miscellaneous/functions.html":{}}}],["vscode",{"_index":3682,"title":{},"body":{"index.html":{}}}],["w",{"_index":1013,"title":{},"body":{"injectables/CommaSeparated.html":{},"injectables/SortBy.html":{}}}],["warn",{"_index":585,"title":{},"body":{"controllers/AppController.html":{}}}],["warranties",{"_index":3796,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":3792,"title":{},"body":{"license.html":{}}}],["way",{"_index":3611,"title":{},"body":{"index.html":{}}}],["welcome",{"_index":3363,"title":{},"body":{"contributing.html":{}}}],["welcome_email",{"_index":1346,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"interfaces/ISendGridConfig.html":{}}}],["went",{"_index":323,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["whereclause",{"_index":1976,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["whereclauses",{"_index":1968,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"injectables/PaginationService.html":{},"interfaces/QueryOptions.html":{}}}],["whereclauses.join",{"_index":1978,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["whereclauses.length",{"_index":1977,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["whereclauses.push",{"_index":1975,"title":{},"body":{"classes/DynamicQueryBuilder.html":{},"interfaces/QueryOptions.html":{}}}],["whether",{"_index":2023,"title":{},"body":{"classes/EnvironmentVariablesValidator.html":{},"license.html":{}}}],["windows",{"_index":3698,"title":{},"body":{"index.html":{}}}],["within",{"_index":2406,"title":{},"body":{"modules/FilesModule.html":{},"modules/HelperModule.html":{},"injectables/ResolvePromisesInterceptor.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["without",{"_index":2643,"title":{},"body":{"modules/HelperModule.html":{},"license.html":{}}}],["working",{"_index":2703,"title":{},"body":{"interfaces/IAppConfig.html":{}}}],["workingdirectory",{"_index":1289,"title":{},"body":{"classes/ConfigService.html":{},"classes/EnvVarAppConfigValidator.html":{},"classes/EnvironmentVariablesValidator-1.html":{},"interfaces/IAppConfig.html":{}}}],["world",{"_index":589,"title":{},"body":{"controllers/AppController.html":{}}}],["worry",{"_index":3626,"title":{},"body":{"index.html":{}}}],["writable",{"_index":2824,"title":{},"body":{"classes/PaginationResponseDto.html":{}}}],["wrong",{"_index":324,"title":{},"body":{"injectables/AddressTypeService.html":{},"injectables/BankService.html":{},"injectables/CityService.html":{},"injectables/CountriesService-1.html":{},"injectables/CurrenciesService.html":{},"injectables/DocumentGroupService.html":{},"injectables/DocumentService.html":{},"injectables/StateService.html":{}}}],["x",{"_index":2872,"title":{},"body":{"injectables/PaginationService.html":{},"injectables/PrismaService.html":{}}}],["yarn",{"_index":3399,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["yarnrunning",{"_index":3701,"title":{},"body":{"index.html":{}}}],["yes",{"_index":1174,"title":{},"body":{"classes/CommonQuery5.html":{},"classes/FileNotImageException.html":{},"classes/Query-3.html":{},"classes/UserNotFoundException.html":{},"miscellaneous/functions.html":{}}}],["yet_another_table",{"_index":910,"title":{},"body":{"injectables/CityService.html":{},"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["yet_another_table.foreign_key",{"_index":1126,"title":{},"body":{"classes/CommonQuery1.html":{},"classes/CommonQuery5.html":{},"interfaces/QueryConfig.html":{}}}],["you'd",{"_index":3754,"title":{},"body":{"index.html":{}}}],["you're",{"_index":3644,"title":{},"body":{"index.html":{}}}],["yourproject",{"_index":3674,"title":{},"body":{"index.html":{}}}],["yourself",{"_index":3629,"title":{},"body":{"index.html":{}}}],["yu",{"_index":3692,"title":{},"body":{"index.html":{}}}],["yzhang.markdown",{"_index":3691,"title":{},"body":{"index.html":{}}}],["zhang",{"_index":3693,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":252,"title":{},"body":{"modules/AddressTypeModule.html":{},"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/BankModule.html":{},"modules/CityModule.html":{},"modules/ContactModule.html":{},"modules/CountriesModule.html":{},"modules/CountryMasModule.html":{},"modules/CurrenciesModule.html":{},"modules/DocumentGroupModule.html":{},"modules/DocumentModule.html":{},"modules/FilesLocalModule.html":{},"modules/FilesModule.html":{},"modules/FilesS3Module.html":{},"modules/FilesS3PresignedModule.html":{},"modules/HelperModule.html":{},"modules/HomeModule.html":{},"modules/StateModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AddresTypeDto.html":{"url":"classes/AddresTypeDto.html","title":"class - AddresTypeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddresTypeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/address_type/dto/create.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the AddresTypeDto class, which represents the data transfer object (DTO)\nused for creating or updating a AddresType record. It includes validation rules and transformation logic\nfor the properties of the AddresType.\nThe AddresTypeDto class ensures that the data provided for creating or updating a AddresType adheres to\nspecified validation rules and formats. It uses decorators from class-validator for validation\nand class-transformer for transforming input data.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                address_type\n                            \n                            \n                                    Optional\n                                id_address_type\n                            \n                            \n                                    Optional\n                                status\n                            \n                            \n                                    Optional\n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        address_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@MaxLength(50)@ApiProperty({type: String, description: 'type of address', example: 'Office', maxLength: 50})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/address_type/dto/create.dto.ts:33\n                        \n                    \n\n            \n                \n                    The type of address (e.g., 'Office') .\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id_address_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude({toPlainOnly: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/address_type/dto/create.dto.ts:55\n                        \n                    \n\n            \n                \n                    The unique identifier for the address_types.\nThis property is excluded from the plain representation of the object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNumber()@ApiProperty({type: Number, description: 'Status of the address type (optional)', example: 1, default: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/address_type/dto/create.dto.ts:48\n                        \n                    \n\n            \n                \n                    The status of the address type (optional, default is 1 for active).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude({toPlainOnly: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/address_type/dto/create.dto.ts:62\n                        \n                    \n\n            \n                \n                    The date with time when data Update\nThis property is excluded from the plain representation of the object.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nimport { Exclude } from 'class-transformer';\nimport { IsDefined, IsNotEmpty, IsNumber, IsOptional, IsString, MaxLength } from 'class-validator';\n\n/**\n * @fileoverview\n * This file defines the `AddresTypeDto` class, which represents the data transfer object (DTO)\n * used for creating or updating a AddresType record. It includes validation rules and transformation logic\n * for the properties of the AddresType.\n *\n * @module\n * @description\n * The `AddresTypeDto` class ensures that the data provided for creating or updating a AddresType adheres to\n * specified validation rules and formats. It uses decorators from `class-validator` for validation\n * and `class-transformer` for transforming input data.\n */\nexport class AddresTypeDto {\n    /**\n     * The type of address (e.g., 'Office') .\n     * @example 'Office'\n     */\n    @IsDefined()\n    @IsNotEmpty()\n    @IsString()\n    @MaxLength(50)\n    @ApiProperty({\n        type: String,\n        description: 'type of address',\n        example: 'Office',\n        maxLength: 50,\n    })\n    address_type: string;\n\n    /**\n     * The status of the address type (optional, default is 1 for active).\n     * @example 1\n     */\n    @IsOptional()\n    @IsNumber()\n    //@Transform(({ value }) => (typeof value === 'string' ? parseInt(value) : value))\n    @ApiProperty({\n        type: Number,\n        description: 'Status of the address type (optional)',\n        example: 1,\n        default: 1,\n    })\n    status?: number;\n\n    /**\n     * The unique identifier for the address_types.\n     * This property is excluded from the plain representation of the object.\n     */\n    @Exclude({ toPlainOnly: true })\n    id_address_type?: string;\n\n    /**\n     * The date with time when data Update\n     * This property is excluded from the plain representation of the object.\n     */\n    @Exclude({ toPlainOnly: true })\n    updated_at?: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddressType.html":{"url":"classes/AddressType.html","title":"class - AddressType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddressType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/address_type/dto/address_type.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the AddressType class, which represents the data structure of a AddressType entity.\nIt includes properties that describe the AddressType and uses decorators for Swagger documentation.\nThe AddressType class is used to define the structure of a AddressType object, including its addres_type, status,\nid_addres_type, along with the status of the AddressType. The class uses decorators to\nconfigure how the properties should be documented in the Swagger API documentation.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                address_type\n                            \n                            \n                                id_address_type\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        address_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'Office'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/address_type/dto/address_type.ts:34\n                        \n                    \n\n            \n                \n                    The address_type of the AddressType (e.g., 'Office').\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id_address_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: '1a2b3c4d-5678-90ef-1234-56789abcdef0'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/address_type/dto/address_type.ts:24\n                        \n                    \n\n            \n                \n                    The unique identifier of the AddressType (e.g., '1a2b3c').\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: Number, example: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/address_type/dto/address_type.ts:44\n                        \n                    \n\n            \n                \n                    The status of the AddressType (e.g., 1 for active).\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiResponseProperty } from '@nestjs/swagger';\n\n/**\n * @fileoverview\n * This file defines the `AddressType` class, which represents the data structure of a AddressType entity.\n * It includes properties that describe the AddressType and uses decorators for Swagger documentation.\n *\n * @module\n * @description\n * The `AddressType` class is used to define the structure of a AddressType object, including its addres_type, status,\n * id_addres_type, along with the status of the AddressType. The class uses decorators to\n * configure how the properties should be documented in the Swagger API documentation.\n */\n\nexport class AddressType {\n    /**\n     * The unique identifier of the AddressType (e.g., '1a2b3c').\n     * @example '1a2b3c4d-5678-90ef-1234-56789abcdef0'\n     */\n    @ApiResponseProperty({\n        type: String,\n        example: '1a2b3c4d-5678-90ef-1234-56789abcdef0',\n    })\n    id_address_type: string;\n\n    /**\n     * The address_type of the AddressType (e.g., 'Office').\n     * @example 'Office'\n     */\n    @ApiResponseProperty({\n        type: String,\n        example: 'Office',\n    })\n    address_type: string;\n\n    /**\n     * The status of the AddressType (e.g., 1 for active).\n     * @example 1\n     */\n    @ApiResponseProperty({\n        type: Number,\n        example: 1,\n    })\n    status: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AddressTypeController.html":{"url":"controllers/AddressTypeController.html","title":"controller - AddressTypeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AddressTypeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/address_type/address_type.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                address_type\n            \n\n\n            \n                Description\n            \n            \n                This file define the AddressTypeController, which handles HTTP request related to Address Type.\nIt provides endpoints to create, update, retrieve, and delete addres_type records.\nThe AddressTypeController is responsible for exposing endpoints that interact with the AddressTypeService.\nIt uses various HTTP methods to manage addres_type data and handles responses with appropriate HTTP status codes.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createDto: CreateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(HttpStatus.CREATED)@ApiCreatedResponse({type: AddressType, description: 'Address Type created'})\n                \n            \n\n            \n                \n                    Defined in src/modules/master/address_type/address_type.controller.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createDto\n                                    \n                                                CreateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe data required to create new Address Type\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \nThe create Object\n\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id_address_type')@HttpCode(HttpStatus.OK)@ApiParam({name: 'id_address_type', type: String})@ApiOkResponse({status: undefined, description: 'address Type delete successfully'})\n                \n            \n\n            \n                \n                    Defined in src/modules/master/address_type/address_type.controller.ts:130\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe id of addres type to delete.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \nAn object indicating the deletion result.\n\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(query: PaginationQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/modules/master/address_type/address_type.controller.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                PaginationQueryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe pagination with filtering parameter.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \nA paginated list of addres_type\n\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id_address_type')@HttpCode(HttpStatus.OK)@ApiParam({name: 'id_address_type', type: String})@ApiOkResponse({type: AddressType, description: 'Get address_type by id'})\n                \n            \n\n            \n                \n                    Defined in src/modules/master/address_type/address_type.controller.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -The id of addres type to retrieve.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The addres type object\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateDto: UpdateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id_address_type')@HttpCode(HttpStatus.OK)@ApiParam({name: 'id_address_type', type: String})@ApiOkResponse({type: AddressType, description: 'Address Type Updated'})\n                \n            \n\n            \n                \n                    Defined in src/modules/master/address_type/address_type.controller.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe id of Address Type To Update.\n\n\n                                    \n                                \n                                \n                                    updateDto\n                                    \n                                                UpdateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe data to update address type\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \nThe updated Object or nul if not found\n\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    HttpCode,\n    HttpStatus,\n    Param,\n    ParseUUIDPipe,\n    Patch,\n    Post,\n    Query,\n} from '@nestjs/common';\nimport { ApiCreatedResponse, ApiOkResponse, ApiParam, ApiTags } from '@nestjs/swagger';\n\nimport { PaginationResponse, PaginationResponseDto } from '@app/utils/dto/pagination-response.dto';\nimport { PaginationQueryDto } from '@app/utils/dto/pagination.dto';\n\nimport { AddressTypeService } from './address_type.service';\nimport { AddressType } from './dto/address_type';\nimport { AddresTypeDto as CreateDto } from './dto/create.dto';\nimport { AddressUpdateDto as UpdateDto } from './dto/update.dto';\n\n/**\n *@fileoverview\n * This file define the `AddressTypeController`, which handles HTTP request related to Address Type.\n * It provides endpoints to create, update, retrieve, and delete addres_type records.\n *\n * @module\n * @description\n * The `AddressTypeController` is responsible for exposing endpoints that interact with the `AddressTypeService`.\n * It uses various HTTP methods to manage addres_type data and handles responses with appropriate HTTP status codes.\n */\n@ApiTags('Address Type')\n@Controller('address_type')\nexport class AddressTypeController {\n    constructor(private readonly addressService: AddressTypeService) {}\n\n    /**\n     * @route POST /addres_type\n     * @description - Create a new addres type\n     * @param {CreateDto} createDto - The data required to create new Address Type\n     * @returns {Promise} - The create Object\n     */\n    @Post()\n    @HttpCode(HttpStatus.CREATED)\n    @ApiCreatedResponse({\n        type: AddressType,\n        description: 'Address Type created',\n    })\n    async create(@Body() createDto: CreateDto): Promise {\n        return await this.addressService.create(createDto);\n    }\n\n    /**\n     * @route - PATCH /:id_address_type\n     * @description - Update an Existing addres_type by its Id.\n     * @param {string} id - The id of Address Type To Update.\n     * @param {UpdateDto} updateDto - The data to update address type\n     * @returns {Promise} - The updated Object or nul if not found\n     */\n    @Patch(':id_address_type')\n    @HttpCode(HttpStatus.OK)\n    @ApiParam({\n        name: 'id_address_type',\n        type: String,\n    })\n    @ApiOkResponse({\n        type: AddressType,\n        description: 'Address Type Updated',\n    })\n    async update(\n        @Param('id_address_type', ParseUUIDPipe) id: string,\n        @Body() updateDto: UpdateDto\n    ): Promise {\n        return await this.addressService.update(id, updateDto);\n    }\n\n    /**\n     * @route GET /address_type\n     * @description - Retrieves a list of addres_type with pagination.\n     * @param {PaginationQueryDto} query - The pagination with filtering parameter.\n     * @returns {Promise>} - A paginated list of addres_type\n     */\n    @Get()\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ type: PaginationResponse })\n    async findAll(@Query() query: PaginationQueryDto): Promise> {\n        return await this.addressService.findAll(query);\n    }\n\n    /**\n     * @route GET /address_type/:id_address_type\n     * @description - Retrieves single address type by its id.\n     * @param {String} id -The id of addres type to retrieve.\n     * @returns {Promise} The addres type object\n     */\n\n    @Get(':id_address_type')\n    @HttpCode(HttpStatus.OK)\n    @ApiParam({\n        name: 'id_address_type',\n        type: String,\n    })\n    @ApiOkResponse({\n        type: AddressType,\n        description: 'Get address_type by id',\n    })\n    async findOne(@Param('id_address_type', ParseUUIDPipe) id: string): Promise {\n        return await this.addressService.findOne(id);\n    }\n\n    /**\n     * @route DELETE /address_type/:id_address_type\n     * @description - Delete a address type by its id.\n     * @param {String} id - The id of addres type to delete.\n     * @returns {Promise} - An object indicating the deletion result.\n     */\n\n    @Delete(':id_address_type')\n    @HttpCode(HttpStatus.OK)\n    @ApiParam({\n        name: 'id_address_type',\n        type: String,\n    })\n    @ApiOkResponse({\n        status: HttpStatus.OK,\n        description: 'address Type delete successfully',\n    })\n    async delete(@Param('id_address_type', ParseUUIDPipe) id: string): Promise {\n        return await this.addressService.delete(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AddressTypeModule.html":{"url":"modules/AddressTypeModule.html","title":"module - AddressTypeModule","body":"\n                   \n\n\n\n\n    Modules\n    AddressTypeModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AddressTypeModule\n\n\n\ncluster_AddressTypeModule_exports\n\n\n\ncluster_AddressTypeModule_providers\n\n\n\n\nAddressTypeService \n\nAddressTypeService \n\n\n\nAddressTypeModule\n\nAddressTypeModule\n\nAddressTypeService  -->\n\nAddressTypeModule->AddressTypeService \n\n\n\n\n\nAddressTypeService\n\nAddressTypeService\n\nAddressTypeModule -->\n\nAddressTypeService->AddressTypeModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/master/address_type/address_type.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            This file defines the AddressTypeModule, which bundles the AddressTypeController and AddressTypeService together.\nThe AddressTypeModule is responsible for handling AddressType-related operations.\nIt provides the necessary controllers and services to manage AddressType data.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AddressTypeService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AddressTypeController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AddressTypeService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { AddressTypeController } from './address_type.controller';\nimport { AddressTypeService } from './address_type.service';\nimport { Query } from './query';\n\n/**\n * @fileoverview\n * This file defines the `AddressTypeModule`, which bundles the `AddressTypeController` and `AddressTypeService` together.\n *\n * @module\n * @description\n * The `AddressTypeModule` is responsible for handling AddressType-related operations.\n * It provides the necessary controllers and services to manage AddressType data.\n */\n\n@Module({\n    controllers: [AddressTypeController],\n    providers: [AddressTypeService, Query],\n    exports: [AddressTypeService],\n})\nexport class AddressTypeModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AddressTypeService.html":{"url":"injectables/AddressTypeService.html","title":"injectable - AddressTypeService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AddressTypeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/address_type/address_type.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the AddressTypeService class, which provides methods to manage Address Type data.\nIt includes operations for creating, updating, retrieving, and deleting Addres Type.\nThe AddressTypeService class is responsible for handaling business logic related to AddresType\nIt interacts with the Database through The PrismaService and performs various operations using raw SQL Query.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                MODULE\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, query: Query, paginationService: PaginationService, utilsService: UtilsService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/master/address_type/address_type.service.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        query\n                                                  \n                                                        \n                                                                        Query\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        paginationService\n                                                  \n                                                        \n                                                                        PaginationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        utilsService\n                                                  \n                                                        \n                                                                        UtilsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createDto: createDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/address_type/address_type.service.ts:43\n                \n            \n\n\n            \n                \n                    Creates a new Address Type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createDto\n                                    \n                                            createDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe data required to create a new Address Type.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The created Address Type object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/address_type/address_type.service.ts:138\n                \n            \n\n\n            \n                \n                    delete addresss type by its id.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe id of addres type to delete.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \nAn object indicating the deletion result.\n\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(paginationQuery: PaginationQueryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/address_type/address_type.service.ts:94\n                \n            \n\n\n            \n                \n                    Retrieves a List of addres type with pagination\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    paginationQuery\n                                    \n                                                PaginationQueryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe pagination and filtering data\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \nA paginated list of address Type\n\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/address_type/address_type.service.ts:125\n                \n            \n\n\n            \n                \n                    Retrieves Single Address Type By its Id.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe Id of the Address Type to Retrieves.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \nThe AddressType Object.\n\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateDto: UpdateDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/address_type/address_type.service.ts:66\n                \n            \n\n\n            \n                \n                    Update Existing Addres Type By its Id\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -The ID of the adrres_type to be updated.\n\n                                    \n                                \n                                \n                                    updateDto\n                                    \n                                                UpdateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -Data to Update Address Type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The updated Address Type object or null if not found\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        MODULE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/master/address_type/address_type.service.ts:27\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\n\nimport { PaginationService } from '@app/common/helper/services/pagination.service';\nimport { PrismaService } from '@app/common/helper/services/prisma.service';\nimport { UtilsService } from '@app/common/helper/services/util.service';\nimport { PaginationResponseDto } from '@app/utils/dto/pagination-response.dto';\nimport { PaginationQueryDto } from '@app/utils/dto/pagination.dto';\nimport { IPaginationFieldConfig } from '@app/utils/types/pagination-options';\n\nimport { AddressType } from './dto/address_type';\nimport { AddresTypeDto as createDto } from './dto/create.dto';\nimport { AddressUpdateDto as UpdateDto } from './dto/update.dto';\nimport { Query } from './query';\n\n/**\n * @fileoverview\n * This file defines the `AddressTypeService` class, which provides methods to manage Address Type data.\n * It includes operations for creating, updating, retrieving, and deleting Addres Type.\n *\n * @module\n * @description\n * The `AddressTypeService` class is responsible for handaling business logic related to AddresType\n * It interacts with the Database through The `PrismaService` and performs various operations using raw SQL Query.\n */\n@Injectable()\nexport class AddressTypeService {\n    private readonly MODULE: string;\n    constructor(\n        private readonly prisma: PrismaService,\n        private readonly query: Query,\n        private readonly paginationService: PaginationService,\n        private readonly utilsService: UtilsService\n    ) {\n        this.MODULE = 'address_type';\n    }\n\n    /**\n     * Creates a new Address Type.\n     * @param {createDto} createDto - The data required to create a new Address Type.\n     * @returns {Promise} The created Address Type object.\n     * @throws {HttpException} If a Address Type with the same name already exists or if an error occurs.\n     */\n    async create(createDto: createDto): Promise {\n        //check if Address Type already with same name\n        const find = await this.prisma.executeRawQuery(this.query.findByName(), createDto);\n        if (find) {\n            throw new HttpException({ message: 'Address Type Already Exits' }, HttpStatus.CONFLICT);\n        }\n        //insert new address Type\n        const inserted = await this.prisma.executeRawQuery(this.query.insert(), createDto);\n        if (!inserted && !inserted.insertid) {\n            throw new HttpException(\n                { message: 'Something Went Wrong' },\n                HttpStatus.INTERNAL_SERVER_ERROR\n            );\n        }\n        return await this.findOne(inserted.insertid);\n    }\n    /**\n     *Update Existing Addres Type By its Id\n     * @param {string} id -The ID of the adrres_type to be updated.\n     * @param {UpdateDto} updateDto -Data to Update Address Type\n     * @returns {Promise} The updated Address Type object or null if not found\n     * @throws {HttpException} If the addres_type is not found or if an error occurs\n     */\n    async update(id: string, updateDto: UpdateDto): Promise {\n        if (Object.keys(updateDto).length === 0) {\n            throw new HttpException({ message: 'Nothing to update' }, HttpStatus.BAD_REQUEST);\n        }\n        //check record is exits or not\n        const recordExists = this.findOne(id);\n        if (recordExists) {\n            updateDto.id_address_type = id;\n            updateDto.updated_at = new Date().toISOString();\n            //update adddress Type details\n            const updated = await this.prisma.executeRawQuery(this.query.update(), updateDto);\n            if (!updated && !updated[0].updatedid) {\n                throw new HttpException(\n                    { message: 'Something went wrong!' },\n                    HttpStatus.INTERNAL_SERVER_ERROR\n                );\n            }\n            return await this.findOne(updated[0].updatedid);\n        } else {\n            throw new HttpException({ message: 'Address Type Not found' }, HttpStatus.NOT_FOUND);\n        }\n    }\n\n    /**\n     * Retrieves a List of addres type with pagination\n     * @param {PaginationQueryDto} paginationQuery - The pagination and filtering data\n     * @returns {Promise>} - A paginated list of address Type\n     */\n    async findAll(\n        paginationQuery: PaginationQueryDto\n    ): Promise> {\n        // Define the base query fields and source table\n        const baseQuery = ['ptbl.id_address_type', 'ptbl.address_type', 'ptbl.status'];\n        const fromQuery = 'FROM address_types AS ptbl';\n\n        const fieldConfigs: Record = null;\n\n        // Build dynamic query based on pagination parameters\n        const { selectQuery, countQuery } = this.utilsService.buildDynamicQuery(\n            paginationQuery,\n            fieldConfigs,\n            baseQuery,\n            fromQuery,\n            'ptbl.id_address_type'\n        );\n        // Execute pagination service to get paginated results\n        return this.paginationService.paginate(\n            selectQuery,\n            countQuery,\n            paginationQuery\n        );\n    }\n\n    /**\n     *Retrieves Single Address Type By its Id.\n     * @param {string} id - The Id of the Address Type to Retrieves.\n     * @returns {Promise} - The AddressType Object.\n     * @throws {HttpException} - If the addres type not Found.\n     */\n    async findOne(id: string): Promise {\n        const result = await this.prisma.executeRawQuery(this.query.findById(), { id });\n        if (!result) {\n            throw new HttpException({ message: 'Address Type Not Found' }, HttpStatus.NOT_FOUND);\n        }\n        return result as any;\n    }\n    /**\n     * delete addresss type by its id.\n     * @param {string} id - The id of addres type to delete.\n     * @returns {Promise} - An object indicating the deletion result.\n     * @throws {HttpException} - if an error occurs during delete\n     */\n    async delete(id: string): Promise {\n        //delete record\n        const deleted = await this.prisma.executeRawQuery(this.query.delete(), id);\n\n        if (deleted && deleted[0].deletedid) {\n            return deleted;\n        } else {\n            throw new HttpException(\n                { message: 'Something went wrong' },\n                HttpStatus.INTERNAL_SERVER_ERROR\n            );\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddressUpdateDto.html":{"url":"classes/AddressUpdateDto.html","title":"class - AddressUpdateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddressUpdateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/address_type/dto/update.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the UpdateDto class, which represents the Data Transfer Object (DTO)\nused for updating an existing Address Type entity. It extends from the AddresTypeDto class,\nmaking all fields optional for the update operation.\nThe UpdateDto class is used to define the structure of the data required to update\nan existing Address Type entity. It inherits all properties from the AddresTypeDto class but\nmakes them optional, allowing partial updates.\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\n\nimport { AddresTypeDto } from './create.dto';\n/**\n * @fileoverview\n * This file defines the `UpdateDto` class, which represents the Data Transfer Object (DTO)\n * used for updating an existing Address Type entity. It extends from the `AddresTypeDto` class,\n * making all fields optional for the update operation.\n *\n * @module\n * @description\n * The `UpdateDto` class is used to define the structure of the data required to update\n * an existing Address Type entity. It inherits all properties from the `AddresTypeDto` class but\n * makes them optional, allowing partial updates.\n */\n\nexport class AddressUpdateDto extends PartialType(AddresTypeDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AllExceptionsFilter.html":{"url":"classes/AllExceptionsFilter.html","title":"class - AllExceptionsFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllExceptionsFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/all-exceptions.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                A global exception filter to catch and handle all exceptions.\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                reflector\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/all-exceptions.filter.ts:47\n                            \n                        \n\n                \n                    \n                            Creates an instance of AllExceptionsFilter.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe reflector instance used for metadata reflection.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        reflector\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Reflector\n\n                    \n                \n                    \n                        \n                                Defined in src/core/filters/all-exceptions.filter.ts:54\n                        \n                    \n\n            \n                \n                    \nThe reflector instance used for metadata reflection.\n\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: unknown, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/all-exceptions.filter.ts:63\n                \n            \n\n\n            \n                \n                    Catches and handles exceptions thrown by the application.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            unknown\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe exception that was thrown.\n\n\n                                    \n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe execution context that contains request and response objects.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ExceptionFilter, Catch, ArgumentsHost, HttpException, HttpStatus } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n\nimport { Request, Response } from 'express';\n\n/**\n * A global exception filter to catch and handle all exceptions.\n *\n * @class\n * @implements {ExceptionFilter}\n */\n\n@Catch()\nexport class AllExceptionsFilter implements ExceptionFilter {\n    /**\n     * Creates an instance of AllExceptionsFilter.\n     *\n     * @param {Reflector} reflector - The reflector instance used for metadata reflection.\n     */\n\n    constructor(public reflector: Reflector) {}\n\n    /**\n     * Catches and handles exceptions thrown by the application.\n     *\n     * @param {unknown} exception - The exception that was thrown.\n     * @param {ArgumentsHost} host - The execution context that contains request and response objects.\n     */\n\n    catch(exception: unknown, host: ArgumentsHost) {\n        console.log('ALL EXEPTION from filter', exception);\n        const ctx = host.switchToHttp();\n        const response = ctx.getResponse();\n        const request = ctx.getRequest();\n        const status =\n            exception instanceof HttpException\n                ? exception.getStatus()\n                : HttpStatus.INTERNAL_SERVER_ERROR;\n\n        const errorResponse = {\n            statusCode: status,\n            timestamp: new Date().toISOString(),\n            path: request.url,\n            message: (exception as any).message || 'Internal server error',\n        };\n\n        response.status(status).json(errorResponse);\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ApiModule.html":{"url":"modules/ApiModule.html","title":"module - ApiModule","body":"\n                   \n\n\n\n\n    Modules\n    ApiModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ApiModule\n\n\n\ncluster_ApiModule_imports\n\n\n\n\nAddressTypeModule\n\nAddressTypeModule\n\n\n\nApiModule\n\nApiModule\n\nApiModule -->\n\nAddressTypeModule->ApiModule\n\n\n\n\n\nBankModule\n\nBankModule\n\nApiModule -->\n\nBankModule->ApiModule\n\n\n\n\n\nCityModule\n\nCityModule\n\nApiModule -->\n\nCityModule->ApiModule\n\n\n\n\n\nContactModule\n\nContactModule\n\nApiModule -->\n\nContactModule->ApiModule\n\n\n\n\n\nCountriesModule\n\nCountriesModule\n\nApiModule -->\n\nCountriesModule->ApiModule\n\n\n\n\n\nCountryMasModule\n\nCountryMasModule\n\nApiModule -->\n\nCountryMasModule->ApiModule\n\n\n\n\n\nCurrenciesModule\n\nCurrenciesModule\n\nApiModule -->\n\nCurrenciesModule->ApiModule\n\n\n\n\n\nDocumentGroupModule\n\nDocumentGroupModule\n\nApiModule -->\n\nDocumentGroupModule->ApiModule\n\n\n\n\n\nDocumentModule\n\nDocumentModule\n\nApiModule -->\n\nDocumentModule->ApiModule\n\n\n\n\n\nFilesModule\n\nFilesModule\n\nApiModule -->\n\nFilesModule->ApiModule\n\n\n\n\n\nHomeModule\n\nHomeModule\n\nApiModule -->\n\nHomeModule->ApiModule\n\n\n\n\n\nStateModule\n\nStateModule\n\nApiModule -->\n\nStateModule->ApiModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/api.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            This file contains the ApiModule class, which aggregates several feature modules and sets up a global HTTP error filter.\nThe ApiModule class is responsible for importing feature-specific modules and configuring a global HTTP error filter.\nIt serves as an aggregate module for the API-related functionalities of the application.\n\n        \n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AddressTypeModule\n                        \n                        \n                            BankModule\n                        \n                        \n                            CityModule\n                        \n                        \n                            ContactModule\n                        \n                        \n                            CountriesModule\n                        \n                        \n                            CountryMasModule\n                        \n                        \n                            CurrenciesModule\n                        \n                        \n                            DocumentGroupModule\n                        \n                        \n                            DocumentModule\n                        \n                        \n                            FilesModule\n                        \n                        \n                            HomeModule\n                        \n                        \n                            StateModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { APP_FILTER } from '@nestjs/core';\n\nimport { HttpErrorFilter } from '@core/exceptions/http-error.filter';\n\nimport { CountriesModule } from './countries/countries.module';\nimport { CurrenciesModule } from './currencies/currencies.module';\nimport { FilesModule } from './files/files.module';\nimport { HomeModule } from './home/home.module';\nimport { AddressTypeModule } from './master/address_type/address_type.module';\nimport { BankModule } from './master/banks/bank.module';\nimport { CityModule } from './master/city_mas/cities.modules';\nimport { CountryMasModule } from './master/country_mas/country_mas.module';\nimport { DocumentGroupModule } from './master/document_groups/document_grp.module';\nimport { DocumentModule } from './master/documents/documents.module';\nimport { ContactModule } from './master/ms-contact-type/contact.module';\nimport { StateModule } from './master/state_mas/state.module';\n\n/**\n * @fileoverview\n * This file contains the `ApiModule` class, which aggregates several feature modules and sets up a global HTTP error filter.\n *\n * @module\n * @description\n * The `ApiModule` class is responsible for importing feature-specific modules and configuring a global HTTP error filter.\n * It serves as an aggregate module for the API-related functionalities of the application.\n */\n\n@Module({\n    imports: [\n        /**\n         * Module responsible for managing country-related functionalities.\n         */\n        CountriesModule,\n\n        /**\n         * Module responsible for managing currency-related functionalities.\n         */\n        CurrenciesModule,\n\n        /**\n         * Module responsible for managing file-related functionalities.\n         */\n        FilesModule,\n\n        /**\n         * Module responsible for managing home-related functionalities.\n         */\n        HomeModule,\n        /**\n         * Module responsible for managing country-related functionalities.\n         */\n        CountryMasModule,\n\n        /**\n         * Module responsible for managing city-related functionalities.\n         */\n        CityModule,\n\n        /**\n         * Module responsible for managing state-related functionalities.\n         */\n        StateModule,\n\n        /**\n         * Module responsible for managing banks-related functionalities.\n         */\n        BankModule,\n        /**\n         * Module responsible for managing documentGroup-related functionalities.\n         */\n        DocumentGroupModule,\n        /**\n         * Module responsible for managing document-related functionalities.\n         */\n        DocumentModule,\n        /**\n         * Module responsible for managing address_type-related functionalities.\n         */\n        AddressTypeModule,\n        ContactModule,\n    ],\n\n    providers: [\n        {\n            provide: APP_FILTER,\n            useClass: HttpErrorFilter,\n        },\n    ],\n})\nexport class ApiModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/app.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                This file contains the AppController class, which provides health check endpoints for the application.\nThe AppController is responsible for handling HTTP requests related to the application's health status.\nIt uses @nestjs/terminus for health checks and PrismaService to check the database connection status.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                getHealth\n                            \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getHealth\n                        \n                    \n                \n            \n            \n                \n                    \n                    getHealth()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/health')@HealthCheck()\n                \n            \n\n            \n                \n                    Defined in src/app/app.controller.ts:66\n                \n            \n\n\n            \n                \n                    Health check endpoint.\nThis endpoint performs a health check by verifying the status of the database connection.\nThe result of the health check is returned in the response.\n// Example response\n{\n  \"status\": \"ok\",\n  \"info\": {\n    \"prisma\": \"up\"\n  },\n  \"error\": {},\n  \"details\": {}\n}\n\n\n                    \n                        Example :\n                        \n                            // Example response\n{\n&quot;status&quot;: &quot;ok&quot;,\n&quot;info&quot;: {\n&quot;prisma&quot;: &quot;up&quot;\n},\n&quot;error&quot;: {},\n&quot;details&quot;: {}\n}\n                        \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise that resolves with the health check result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/log')\n                \n            \n\n            \n                \n                    Defined in src/app/app.controller.ts:91\n                \n            \n\n\n            \n                \n                    Log check endpoint.\nThis endpoint performs a log check.\nThe result of the log check is returned in the response.\n// Example response\n{\n  \"logger\": {\n    \"status\": \"ok\"\n  },\n}\n\n\n                    \n                        Example :\n                        \n                            // Example response\n{\n&quot;logger&quot;: {\n&quot;status&quot;: &quot;ok&quot;\n},\n}\n                        \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        A promise that resolves with the log check result.\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Inject } from '@nestjs/common'; // VERSION_NEUTRAL\nimport { ApiTags } from '@nestjs/swagger';\nimport { HealthCheck, HealthCheckService } from '@nestjs/terminus';\n\nimport Logger, { LoggerKey } from '@infineit/winston-logger/logger/domain/logger';\n\nimport { PrismaService } from '@services/prisma.service';\n// import { PublicRoute } from 'src/core/decorators/public.request.decorator';\n\n// @Controller({\n//     version: VERSION_NEUTRAL,\n//     path: '/',\n// })\n\n/**\n * @fileoverview\n * This file contains the `AppController` class, which provides health check endpoints for the application.\n *\n * @module\n * @description\n * The `AppController` is responsible for handling HTTP requests related to the application's health status.\n * It uses `@nestjs/terminus` for health checks and `PrismaService` to check the database connection status.\n */\n\n@ApiTags('Health') // Tags the controller for Swagger API documentation\n@Controller() // Decorates the class as a NestJS controller\nexport class AppController {\n    /**\n     * Creates an instance of `AppController`.\n     *\n     * @param {HealthCheckService} healthCheckService - Service for performing health checks.\n     * @param {PrismaService} prismaService - Service for interacting with the Prisma ORM.\n     */\n    constructor(\n        @Inject(LoggerKey) private logger: Logger,\n        private readonly healthCheckService: HealthCheckService,\n        private readonly prismaService: PrismaService\n    ) {}\n\n    /**\n     * Health check endpoint.\n     *\n     * @route GET /health\n     * @returns {Promise} A promise that resolves with the health check result.\n     * @throws {BadRequestException} If the health check fails.\n     *\n     * @description\n     * This endpoint performs a health check by verifying the status of the database connection.\n     * The result of the health check is returned in the response.\n     *\n     * @example\n     * // Example response\n     * {\n     *   \"status\": \"ok\",\n     *   \"info\": {\n     *     \"prisma\": \"up\"\n     *   },\n     *   \"error\": {},\n     *   \"details\": {}\n     * }\n     */\n\n    @Get('/health') // Route to handle GET requests at /health\n    @HealthCheck() // Decorator to indicate that this is a health check endpoint\n    // @PublicRoute()\n    public async getHealth(): Promise {\n        return this.healthCheckService.check([() => this.prismaService.isHealthy()]);\n    }\n\n    /**\n     * Log check endpoint.\n     *\n     * @route GET /log\n     * @returns {Promise} A promise that resolves with the log check result.\n     * @throws {BadRequestException} If the health check fails.\n     *\n     * @description\n     * This endpoint performs a log check.\n     * The result of the log check is returned in the response.\n     *\n     * @example\n     * // Example response\n     * {\n     *   \"logger\": {\n     *     \"status\": \"ok\"\n     *   },\n     * }\n     */\n\n    @Get('/log')\n    getHello(): object {\n        // const user = {\n        //     id: 'johndoe',\n        //     name: 'John Doe',\n        //     address: '123 Imaginary Street',\n        //     passport: {\n        //         number: 'BE123892',\n        //         issued: 2023,\n        //         expires: 2027,\n        //     },\n        //     phone: '123-234-544',\n        // };\n        // this.logger.log('Hello endpoint called');\n        // this.logger.log('Hello endpoint called');\n        // this.logger.debug('foo %s %o', 'bar');\n        // this.logger.verbose({ foo: 'bar' }, 'baz %s', 'qux');\n        // Debug\n        // Debug\n        this.logger.debug(\n            'I am a debug message!',\n            {\n                context: 'Bootstrap',\n                correlationId: '1b3fd064-2bed-4bb4-b3af-a5f3686b1b53',\n                sourceClass: 'AppModule',\n                props: {\n                    foo: 'bar-debug',\n                    baz: 'qux',\n                },\n            },\n            'getHello'\n        );\n\n        // // Info\n        // this.logger.info('I am an info message!', {\n        //     props: {\n        //         foo: 'bar',\n        //         baz: 'qux',\n        //     },\n        // });\n\n        this.logger.info('I am an info message should be set!', {\n            context: 'Bootstrap',\n            correlationId: '1b3fd064-2bed-4bb4-b3af-a5f3686b1b53',\n            sourceClass: 'AppModule',\n            // durationMs: 120,\n            // stack: 'Error stack trace',\n            props: { foo: 'bar', baz: 'qux' },\n        });\n\n        // Warn\n        this.logger.warn('I am a warn message! new one', {\n            context: 'Bootstrap',\n            correlationId: '1b3fd064-2bed-4bb4-b3af-a5f3686b1b53',\n            sourceClass: 'AppModule',\n            props: {\n                foo: 'bar',\n                baz: 'qux',\n            },\n            error: new Error('Hello World!'),\n        });\n\n        // Error\n        this.logger.error('I am an error message!', {\n            props: {\n                foo: 'bar',\n                baz: 'qux',\n            },\n            error: new Error('Hello World!'),\n        });\n\n        // Fatal\n        this.logger.fatal('I am a fatal message!', {\n            props: {\n                foo: 'bar',\n                baz: 'qux',\n            },\n            error: new Error('Hello World!'),\n        });\n\n        // Emergency\n        this.logger.emergency('I am an emergency message!', {\n            props: {\n                foo: 'bar',\n                baz: 'qux',\n            },\n            error: new Error('Hello World!'),\n        });\n\n        return {\n            logger: {\n                status: 'ok',\n            },\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nApiModule\n\nApiModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nApiModule->AppModule\n\n\n\n\n\nHelperModule\n\nHelperModule\n\nAppModule -->\n\nHelperModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            This file contains the AppModule class, which is the root module of the NestJS application.\nThe AppModule class is responsible for importing and configuring the core modules of the application.\nIt includes configuration for environment variables, database connections, and health checks.\n\n        \n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ApiModule\n                        \n                        \n                            HelperModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { TerminusModule } from '@nestjs/terminus';\n\n// import * as dotenv from 'dotenv';\nimport { ContextModule } from '@infineit/winston-logger/context/infrastructure/nestjs/contextModule';\nimport { LoggerModule } from '@infineit/winston-logger/logger/infrastructure/nestjs/loggerModule';\n\nimport { HelperModule } from '@common/helper/helper.module';\nimport appConfig from '@config/app.config';\nimport databaseConfig from '@config/database.config';\nimport fileConfig from '@config/file.config';\nimport loggerConfig from '@config/logger.config';\nimport { PrismaService } from '@services/prisma.service';\n\nimport { ApiModule } from '../modules/api.module';\n\nimport { AppController } from './app.controller';\n\nconst ENV = process.env.NODE_ENV;\n\n/**\n * @fileoverview\n * This file contains the `AppModule` class, which is the root module of the NestJS application.\n *\n * @module\n * @description\n * The `AppModule` class is responsible for importing and configuring the core modules of the application.\n * It includes configuration for environment variables, database connections, and health checks.\n */\n\n@Module({\n    controllers: [AppController],\n    imports: [\n        ConfigModule.forRoot({\n            isGlobal: true,\n            load: [appConfig, databaseConfig, fileConfig, loggerConfig],\n            envFilePath: !ENV ? '.env' : `.env.${ENV}`,\n        }),\n        ApiModule,\n        TerminusModule,\n        HelperModule,\n        LoggerModule.forRoot(PrismaService),\n        ContextModule,\n    ],\n    // providers: [\n    //     PrismaService,\n    //     {\n    //         provide: 'PRISMA_CLIENT',\n    //         useExisting: PrismaService,\n    //     },\n    // ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BadRequestExceptionFilter.html":{"url":"classes/BadRequestExceptionFilter.html","title":"class - BadRequestExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BadRequestExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/bad-request.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                A custom exception filter to handle BadRequestException specifically.\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                reflector\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _validationFilter\n                            \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/bad-request.filter.ts:27\n                            \n                        \n\n                \n                    \n                            Creates an instance of BadRequestExceptionFilter.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe reflector instance used for metadata reflection.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        reflector\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Reflector\n\n                    \n                \n                    \n                        \n                                Defined in src/core/filters/bad-request.filter.ts:34\n                        \n                    \n\n            \n                \n                    \nThe reflector instance used for metadata reflection.\n\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        _validationFilter\n                        \n                    \n                \n            \n            \n                \n                    \n                    _validationFilter(validationErrors: ValidationError[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/bad-request.filter.ts:93\n                \n            \n\n\n            \n                \n                    Filters and formats validation errors.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    validationErrors\n                                    \n                                            ValidationError[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nArray of validation errors.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        Formatted validation errors.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: BadRequestException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/bad-request.filter.ts:43\n                \n            \n\n\n            \n                \n                    Catches and handles BadRequestException thrown by the application.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            BadRequestException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe BadRequestException that was thrown.\n\n\n                                    \n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe execution context that contains request and response objects.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { STATUS_CODES } from 'http';\n\nimport {\n    ArgumentsHost,\n    BadRequestException,\n    Catch,\n    ExceptionFilter,\n    // HttpStatus,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n\nimport { ValidationError } from 'class-validator';\nimport { Response } from 'express';\nimport * as _ from 'lodash';\n\n// import { PgSQLService } from \"../common/shared/services/pgsql.service\";\n// import { Query } from './query';\n\n/**\n * A custom exception filter to handle BadRequestException specifically.\n *\n * @class\n * @implements {ExceptionFilter}\n */\n\n@Catch(BadRequestException)\nexport class BadRequestExceptionFilter implements ExceptionFilter {\n    /**\n     * Creates an instance of BadRequestExceptionFilter.\n     *\n     * @param {Reflector} reflector - The reflector instance used for metadata reflection.\n     */\n\n    constructor(public reflector: Reflector) {}\n\n    /**\n     * Catches and handles BadRequestException thrown by the application.\n     *\n     * @param {BadRequestException} exception - The BadRequestException that was thrown.\n     * @param {ArgumentsHost} host - The execution context that contains request and response objects.\n     */\n\n    catch(exception: BadRequestException, host: ArgumentsHost) {\n        console.log('BAD REQUREST from fil');\n        const ctx = host.switchToHttp();\n        const response = ctx.getResponse();\n        // const request = ctx.getRequest();\n        const statusCode = exception.getStatus();\n        const r = exception.getResponse();\n\n        if (_.isArray(r.message) && r.message[0] instanceof ValidationError) {\n            const validationErrors = r.message;\n            r.error = this._validationFilter(validationErrors);\n        }\n\n        //put api logic here to fetch from db is erro code found\n        r.statusCode = statusCode;\n        r.message = STATUS_CODES[statusCode];\n\n        response.status(statusCode).json(r);\n\n        // try {\n        //   var sqlService = new PgSQLService();\n        //   var query = new Query();\n        //   var reqstr = JSON.stringify(_.clone(request.body));\n        //   var resstr = JSON.stringify(_.clone(r));\n        //   sqlService.run(\n        //     query.addQueryError(\"BadRequest\", request.method, request.url, reqstr, resstr)\n        //   );\n        // } catch (error) {}\n\n        // try {\n        //   var sqlService = new PgSQLService();\n        //   var query = new Query();\n        //   const reqstrobj = { body: _.clone(request.body), header: _.clone(request.header) };\n        //   var reqstr = JSON.stringify(reqstrobj);\n\n        //   const resstrobj = { res: _.clone(r), exception: exception.stack };\n        //   var resstr = JSON.stringify(resstrobj);\n        //   sqlService.run(\n        //     query.addQueryError(\"BadRequest\", request.method, request.url, reqstr, resstr)\n        //   );\n        // } catch (error) {}\n    }\n\n    /**\n     * Filters and formats validation errors.\n     *\n     * @param {ValidationError[]} validationErrors - Array of validation errors.\n     * @returns {object} Formatted validation errors.\n     */\n\n    private _validationFilter(validationErrors: ValidationError[]) {\n        const errorMessages = {};\n\n        for (const validationError of validationErrors) {\n            if (validationError.children && validationError.children.length > 0) {\n                const nestedErrorMessage = {};\n                for (let i = 0; i \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/BankController.html":{"url":"controllers/BankController.html","title":"controller - BankController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  BankController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/banks/bank.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                banks\n            \n\n\n            \n                Description\n            \n            \n                This file defines the BankController, which handles HTTP requests related to bank data.\nIt provides endpoints to create, update, retrieve, and delete bank records.\nThe BankController is responsible for exposing endpoints that interact with the BankService.\nIt uses various HTTP methods to manage bank data and handles responses with appropriate HTTP status codes.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createDto: BankDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(HttpStatus.CREATED)@ApiCreatedResponse({type: Banks, description: 'Create bank'})\n                \n            \n\n            \n                \n                    Defined in src/modules/master/banks/bank.controller.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createDto\n                                    \n                                                BankDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe data required to create a new bank.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The created bank object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id_bank')@HttpCode(HttpStatus.OK)@ApiParam({name: 'id_bank', type: String})@ApiOkResponse({status: undefined, description: 'Bank has been successfully deleted.'})\n                \n            \n\n            \n                \n                    Defined in src/modules/master/banks/bank.controller.ts:119\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe ID of the bank to delete.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        An object indicating the deletion result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(query: PaginationQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/modules/master/banks/bank.controller.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                PaginationQueryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe pagination and filtering parameters.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        A paginated list of banks.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id_bank')@HttpCode(HttpStatus.OK)@ApiParam({name: 'id_bank', type: String})@ApiOkResponse({type: Banks, description: 'Get bank by ID'})\n                \n            \n\n            \n                \n                    Defined in src/modules/master/banks/bank.controller.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe ID of the bank to retrieve.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The bank object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateDto: UpdateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id_bank')@HttpCode(HttpStatus.OK)@ApiParam({name: 'id_bank', type: String})@ApiOkResponse({type: Banks, description: 'Update bank'})\n                \n            \n\n            \n                \n                    Defined in src/modules/master/banks/bank.controller.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe ID of the bank to be updated.\n\n\n                                    \n                                \n                                \n                                    updateDto\n                                    \n                                                UpdateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe data to update the bank with.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The updated bank object or null if not found.\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    HttpCode,\n    HttpStatus,\n    Param,\n    ParseUUIDPipe,\n    Patch,\n    Post,\n    Query,\n} from '@nestjs/common';\nimport { ApiTags, ApiOkResponse, ApiCreatedResponse, ApiParam } from '@nestjs/swagger';\n\nimport { PaginationResponse, PaginationResponseDto } from '@utils/dto/pagination-response.dto';\nimport { PaginationQueryDto } from '@utils/dto/pagination.dto';\n\nimport { BankService } from './bank.service';\nimport { Banks } from './dto/bank.dto';\nimport { BankDto } from './dto/create.dto';\nimport { BankUpdateDto as UpdateDto } from './dto/update.dto';\n\n/**\n * @fileoverview\n * This file defines the `BankController`, which handles HTTP requests related to bank data.\n * It provides endpoints to create, update, retrieve, and delete bank records.\n *\n * @module\n * @description\n * The `BankController` is responsible for exposing endpoints that interact with the `BankService`.\n * It uses various HTTP methods to manage bank data and handles responses with appropriate HTTP status codes.\n */\n@ApiTags('Banks')\n@Controller('banks')\nexport class BankController {\n    constructor(private readonly bankService: BankService) {}\n\n    /**\n     * @route POST /banks\n     * @description Create a new bank.\n     * @param {BankDto} createDto - The data required to create a new bank.\n     * @returns {Promise} The created bank object.\n     */\n    @Post()\n    @HttpCode(HttpStatus.CREATED)\n    @ApiCreatedResponse({\n        type: Banks,\n        description: 'Create bank',\n    })\n    async create(@Body() createDto: BankDto): Promise {\n        return this.bankService.create(createDto);\n    }\n\n    /**\n     * @route PATCH /banks/:id_bank\n     * @description Update an existing bank by its ID.\n     * @param {string} id - The ID of the bank to be updated.\n     * @param {UpdateDto} updateDto - The data to update the bank with.\n     * @returns {Promise} The updated bank object or null if not found.\n     */\n    @Patch(':id_bank')\n    @HttpCode(HttpStatus.OK)\n    @ApiParam({ name: 'id_bank', type: String })\n    @ApiOkResponse({\n        type: Banks,\n        description: 'Update bank',\n    })\n    async update(\n        @Param('id_bank', ParseUUIDPipe) id: string,\n        @Body() updateDto: UpdateDto\n    ): Promise {\n        return this.bankService.update(id, updateDto);\n    }\n\n    /**\n     * @route GET /banks\n     * @description Retrieve a list of banks with pagination.\n     * @param {PaginationQueryDto} query - The pagination and filtering parameters.\n     * @returns {Promise>} A paginated list of banks.\n     */\n    @Get()\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ type: PaginationResponse(Banks) })\n    async findAll(@Query() query: PaginationQueryDto): Promise> {\n        return this.bankService.findAll(query);\n    }\n\n    /**\n     * @route GET /banks/:id_bank\n     * @description Retrieve a single bank by its ID.\n     * @param {string} id - The ID of the bank to retrieve.\n     * @returns {Promise} The bank object.\n     */\n    @Get(':id_bank')\n    @HttpCode(HttpStatus.OK)\n    @ApiParam({ name: 'id_bank', type: String })\n    @ApiOkResponse({\n        type: Banks,\n        description: 'Get bank by ID',\n    })\n    async findOne(@Param('id_bank', ParseUUIDPipe) id: string): Promise {\n        return this.bankService.findOne(id);\n    }\n\n    /**\n     * @route DELETE /banks/:id_bank\n     * @description Delete a bank by its ID.\n     * @param {string} id - The ID of the bank to delete.\n     * @returns {Promise} An object indicating the deletion result.\n     */\n    @Delete(':id_bank')\n    @HttpCode(HttpStatus.OK)\n    @ApiParam({ name: 'id_bank', type: String })\n    @ApiOkResponse({\n        status: HttpStatus.OK,\n        description: 'Bank has been successfully deleted.',\n    })\n    async delete(@Param('id_bank', ParseUUIDPipe) id: string): Promise {\n        return this.bankService.delete(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BankDto.html":{"url":"classes/BankDto.html","title":"class - BankDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BankDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/banks/dto/create.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the BankDto class, which represents the data transfer object (DTO)\nused for creating or updating a bank record. It includes validation rules and transformation logic\nfor the properties of the bank.\nThe BankDto class ensures that the data provided for creating or updating a bank adheres to\nspecified validation rules and formats. It uses decorators from class-validator for validation\nand class-transformer for transforming input data.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                id_bank\n                            \n                            \n                                    Optional\n                                id_city\n                            \n                            \n                                id_country\n                            \n                            \n                                    Optional\n                                id_state\n                            \n                            \n                                name\n                            \n                            \n                                    Optional\n                                short_name\n                            \n                            \n                                    Optional\n                                status\n                            \n                            \n                                    Optional\n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id_bank\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude({toPlainOnly: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/banks/dto/create.dto.ts:120\n                        \n                    \n\n            \n                \n                    The unique identifier for the bank.\nThis property is excluded from the plain representation of the object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id_city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsUUID()@ApiProperty({type: String, description: 'City ID (optional)', example: 'a12b34cd-5678-90ef-1234-56789abcdef0', required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/banks/dto/create.dto.ts:71\n                        \n                    \n\n            \n                \n                    The ID of the city where the bank is located (optional).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id_country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsUUID()@ApiProperty({type: String, description: 'Country ID', example: 'c34d56ef-7890-12ij-3456-78901abcdef2'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/banks/dto/create.dto.ts:99\n                        \n                    \n\n            \n                \n                    The ID of the country where the bank is located.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id_state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsUUID()@ApiProperty({type: String, description: 'State ID (optional)', example: 'b23c45de-6789-01gh-2345-67890abcdef1', required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/banks/dto/create.dto.ts:85\n                        \n                    \n\n            \n                \n                    The ID of the state where the bank is located (optional).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@MaxLength(50)@ApiProperty({type: String, description: 'Bank name', example: 'State Bank Of India', maxLength: 50})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/banks/dto/create.dto.ts:41\n                        \n                    \n\n            \n                \n                    The name of the bank (e.g., 'State Bank Of India').\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        short_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@MaxLength(5)@ApiProperty({type: String, description: 'Short name of the bank (optional)', example: 'SBI', maxLength: 5, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/banks/dto/create.dto.ts:57\n                        \n                    \n\n            \n                \n                    The short name of the bank (optional, e.g., 'SBI').\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNumber()@ApiProperty({type: Number, description: 'Status of the bank (optional)', example: 1, default: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/banks/dto/create.dto.ts:113\n                        \n                    \n\n            \n                \n                    The status of the bank (optional, default is 1 for active).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude({toPlainOnly: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/banks/dto/create.dto.ts:123\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nimport { Exclude } from 'class-transformer';\nimport {\n    IsDefined,\n    IsNotEmpty,\n    IsString,\n    MaxLength,\n    IsOptional,\n    IsNumber,\n    IsUUID,\n} from 'class-validator';\n\n/**\n * @fileoverview\n * This file defines the `BankDto` class, which represents the data transfer object (DTO)\n * used for creating or updating a bank record. It includes validation rules and transformation logic\n * for the properties of the bank.\n *\n * @module\n * @description\n * The `BankDto` class ensures that the data provided for creating or updating a bank adheres to\n * specified validation rules and formats. It uses decorators from `class-validator` for validation\n * and `class-transformer` for transforming input data.\n */\nexport class BankDto {\n    /**\n     * The name of the bank (e.g., 'State Bank Of India').\n     * @example 'State Bank Of India'\n     */\n    @IsDefined()\n    @IsNotEmpty()\n    @IsString()\n    @MaxLength(50)\n    @ApiProperty({\n        type: String,\n        description: 'Bank name',\n        example: 'State Bank Of India',\n        maxLength: 50,\n    })\n    name: string;\n\n    /**\n     * The short name of the bank (optional, e.g., 'SBI').\n     * @example 'SBI'\n     */\n    @IsOptional()\n    @IsString()\n    @MaxLength(5)\n    @ApiProperty({\n        type: String,\n        description: 'Short name of the bank (optional)',\n        example: 'SBI',\n        maxLength: 5,\n        required: false,\n    })\n    short_name?: string;\n\n    /**\n     * The ID of the city where the bank is located (optional).\n     * @example 'a12b34cd-5678-90ef-1234-56789abcdef0'\n     */\n    @IsOptional()\n    @IsUUID()\n    @ApiProperty({\n        type: String,\n        description: 'City ID (optional)',\n        example: 'a12b34cd-5678-90ef-1234-56789abcdef0',\n        required: false,\n    })\n    id_city?: string;\n\n    /**\n     * The ID of the state where the bank is located (optional).\n     * @example 'b23c45de-6789-01gh-2345-67890abcdef1'\n     */\n    @IsOptional()\n    @IsUUID()\n    @ApiProperty({\n        type: String,\n        description: 'State ID (optional)',\n        example: 'b23c45de-6789-01gh-2345-67890abcdef1',\n        required: false,\n    })\n    id_state?: string;\n\n    /**\n     * The ID of the country where the bank is located.\n     * @example 'c34d56ef-7890-12ij-3456-78901abcdef2'\n     */\n    @IsDefined()\n    @IsNotEmpty()\n    @IsUUID()\n    @ApiProperty({\n        type: String,\n        description: 'Country ID',\n        example: 'c34d56ef-7890-12ij-3456-78901abcdef2',\n    })\n    id_country: string;\n\n    /**\n     * The status of the bank (optional, default is 1 for active).\n     * @example 1\n     */\n    @IsOptional()\n    @IsNumber()\n    @ApiProperty({\n        type: Number,\n        description: 'Status of the bank (optional)',\n        example: 1,\n        default: 1,\n    })\n    status?: number;\n\n    /**\n     * The unique identifier for the bank.\n     * This property is excluded from the plain representation of the object.\n     */\n    @Exclude({ toPlainOnly: true })\n    id_bank?: string;\n\n    @Exclude({ toPlainOnly: true })\n    updated_at?: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BankModule.html":{"url":"modules/BankModule.html","title":"module - BankModule","body":"\n                   \n\n\n\n\n    Modules\n    BankModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_BankModule\n\n\n\ncluster_BankModule_exports\n\n\n\ncluster_BankModule_providers\n\n\n\n\nBankService \n\nBankService \n\n\n\nBankModule\n\nBankModule\n\nBankService  -->\n\nBankModule->BankService \n\n\n\n\n\nBankService\n\nBankService\n\nBankModule -->\n\nBankService->BankModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/master/banks/bank.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            This file defines the BankModule, which bundles the BankController and BankService together.\nThe BankModule is responsible for handling bank-related operations. It provides the necessary controllers and services to manage bank data.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            BankService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            BankController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BankService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { BankController } from './bank.controller';\nimport { BankService } from './bank.service';\nimport { Query } from './query';\n\n/**\n * @fileoverview\n * This file defines the `BankModule`, which bundles the `BankController` and `BankService` together.\n *\n * @module\n * @description\n * The `BankModule` is responsible for handling bank-related operations. It provides the necessary controllers and services to manage bank data.\n */\n@Module({\n    controllers: [BankController],\n    providers: [BankService, Query],\n    exports: [BankService],\n})\nexport class BankModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BankService.html":{"url":"injectables/BankService.html","title":"injectable - BankService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  BankService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/banks/bank.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the BankService class, which provides methods to manage bank data.\nIt includes operations for creating, updating, retrieving, and deleting banks.\nThe BankService class is responsible for handling business logic related to banks.\nIt interacts with the database through the PrismaService and performs various operations using raw SQL queries.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                MODULE\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(paginationService: PaginationService, prisma: PrismaService, query: Query, utilsService: UtilsService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/master/banks/bank.service.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        paginationService\n                                                  \n                                                        \n                                                                        PaginationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        query\n                                                  \n                                                        \n                                                                        Query\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        utilsService\n                                                  \n                                                        \n                                                                        UtilsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createDto: BankDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/banks/bank.service.ts:44\n                \n            \n\n\n            \n                \n                    Creates a new bank.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createDto\n                                    \n                                                BankDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe data required to create a new bank.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The created bank object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/banks/bank.service.ts:155\n                \n            \n\n\n            \n                \n                    Deletes a bank by its ID.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe ID of the bank to delete.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        An object indicating the deletion result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(paginationQuery: PaginationQueryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/banks/bank.service.ts:107\n                \n            \n\n\n            \n                \n                    Retrieves a list of banks with pagination.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    paginationQuery\n                                    \n                                                PaginationQueryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe pagination and filtering parameters.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        A paginated list of banks.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/banks/bank.service.ts:141\n                \n            \n\n\n            \n                \n                    Retrieves a single bank by its ID.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe ID of the bank to retrieve.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The bank object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateDto: UpdateDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/banks/bank.service.ts:74\n                \n            \n\n\n            \n                \n                    Updates an existing bank by its ID.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe ID of the bank to be updated.\n\n\n                                    \n                                \n                                \n                                    updateDto\n                                    \n                                                UpdateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe data to update the bank with.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The updated bank object or null if not found.\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        MODULE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/master/banks/bank.service.ts:27\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, HttpException, HttpStatus } from '@nestjs/common';\n\nimport { PaginationService } from '@app/common/helper/services/pagination.service';\nimport { UtilsService } from '@app/common/helper/services/util.service';\nimport { IPaginationFieldConfig } from '@app/utils/types/pagination-options';\nimport { PrismaService } from '@services/prisma.service';\nimport { PaginationResponseDto } from '@utils/dto/pagination-response.dto';\nimport { PaginationQueryDto } from '@utils/dto/pagination.dto';\n\nimport { Banks } from './dto/bank.dto'; // DTO for bank data\nimport { BankDto } from './dto/create.dto'; // DTO for creating a bank\nimport { BankUpdateDto as UpdateDto } from './dto/update.dto'; // DTO for updating a bank\nimport { Query } from './query'; // Query class for generating SQL queries\n\n/**\n * @fileoverview\n * This file defines the `BankService` class, which provides methods to manage bank data.\n * It includes operations for creating, updating, retrieving, and deleting banks.\n *\n * @module\n * @description\n * The `BankService` class is responsible for handling business logic related to banks.\n * It interacts with the database through the `PrismaService` and performs various operations using raw SQL queries.\n */\n@Injectable()\nexport class BankService {\n    private readonly MODULE: string;\n\n    constructor(\n        private readonly paginationService: PaginationService,\n        private readonly prisma: PrismaService,\n        private readonly query: Query,\n        private readonly utilsService: UtilsService\n    ) {\n        this.MODULE = 'bank';\n    }\n\n    /**\n     * Creates a new bank.\n     * @param {BankDto} createDto - The data required to create a new bank.\n     * @returns {Promise} The created bank object.\n     * @throws {HttpException} If a bank with the same name already exists or if an error occurs.\n     */\n    async create(createDto: BankDto): Promise {\n        // Check if a bank with the same name already exists\n        const find = await this.prisma.executeRawQuery(this.query.findByName(), createDto);\n\n        if (find) {\n            throw new HttpException({ message: 'NAME ALREADY EXISTS' }, HttpStatus.CONFLICT);\n        }\n\n        // Insert the new bank\n        const inserted = await this.prisma.executeRawQuery(this.query.insert(), createDto);\n\n        if (inserted && inserted.insertid) {\n            // Retrieve and return the newly created bank\n            const get = await this.findOne(inserted.insertid);\n            return get as any;\n        } else {\n            throw new HttpException(\n                { message: 'Something went wrong' },\n                HttpStatus.INTERNAL_SERVER_ERROR\n            );\n        }\n    }\n\n    /**\n     * Updates an existing bank by its ID.\n     * @param {string} id - The ID of the bank to be updated.\n     * @param {UpdateDto} updateDto - The data to update the bank with.\n     * @returns {Promise} The updated bank object or null if not found.\n     * @throws {HttpException} If the bank is not found or if an error occurs.\n     */\n    async update(id: string, updateDto: UpdateDto): Promise {\n        if (Object.keys(updateDto).length === 0) {\n            throw new HttpException({ message: 'Nothing to update!' }, HttpStatus.BAD_REQUEST);\n        }\n\n        // Check if the bank record exists\n        const recordExists = await this.findOne(id);\n        if (recordExists) {\n            updateDto.id_bank = id;\n            updateDto.updated_at = new Date().toISOString();\n            // Update the bank details\n            const updated = await this.prisma.executeRawQuery(this.query.update(), updateDto);\n\n            if (updated && updated[0].updatedid) {\n                // Retrieve and return the updated bank\n                const get = await this.findOne(updated[0].updatedid);\n                return get as any;\n            } else {\n                throw new HttpException(\n                    { message: 'Something went wrong' },\n                    HttpStatus.INTERNAL_SERVER_ERROR\n                );\n            }\n        } else {\n            throw new HttpException({ message: 'Bank not found' }, HttpStatus.NOT_FOUND);\n        }\n    }\n\n    /**\n     * Retrieves a list of banks with pagination.\n     * @param {PaginationQueryDto} paginationQuery - The pagination and filtering parameters.\n     * @returns {Promise>} A paginated list of banks.\n     */\n    async findAll(paginationQuery: PaginationQueryDto): Promise> {\n        // Define the base query fields and source table\n        const baseQuery = [\n            'ptbl.id_bank',\n            'ptbl.name',\n            'ptbl.short_name',\n            'ptbl.id_city',\n            'ptbl.id_state',\n            'ptbl.id_country',\n            'ptbl.status',\n        ];\n        const fromQuery = ` FROM banks_mas as ptbl`;\n\n        const fieldConfigs: Record = null;\n\n        // Build dynamic query based on pagination parameters\n        const { selectQuery, countQuery } = this.utilsService.buildDynamicQuery(\n            paginationQuery,\n            fieldConfigs,\n            baseQuery,\n            fromQuery,\n            'ptbl.id_bank'\n        );\n\n        // Execute pagination service to get paginated results\n        return this.paginationService.paginate(selectQuery, countQuery, paginationQuery);\n    }\n\n    /**\n     * Retrieves a single bank by its ID.\n     * @param {string} id - The ID of the bank to retrieve.\n     * @returns {Promise} The bank object.\n     * @throws {HttpException} If the bank is not found.\n     */\n    async findOne(id: string): Promise {\n        const result = await this.prisma.executeRawQuery(this.query.findById(), { id });\n        if (!result) {\n            throw new HttpException({ message: 'Bank not found' }, HttpStatus.NOT_FOUND);\n        }\n        return result as any;\n    }\n\n    /**\n     * Deletes a bank by its ID.\n     * @param {string} id - The ID of the bank to delete.\n     * @returns {Promise} An object indicating the deletion result.\n     * @throws {HttpException} If an error occurs during deletion.\n     */\n    async delete(id: string): Promise {\n        const deleted = await this.prisma.executeRawQuery(this.query.delete(), id);\n\n        if (deleted && deleted[0].deletedid) {\n            return deleted;\n        } else {\n            throw new HttpException(\n                { message: 'Something went wrong' },\n                HttpStatus.INTERNAL_SERVER_ERROR\n            );\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BankUpdateDto.html":{"url":"classes/BankUpdateDto.html","title":"class - BankUpdateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BankUpdateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/banks/dto/update.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the UpdateDto class, which represents the Data Transfer Object (DTO)\nused for updating an existing Bank entity. It extends from the BankDto class,\nmaking all fields optional for the update operation.\nThe UpdateDto class is used to define the structure of the data required to update\nan existing Bank entity. It inherits all properties from the BankDto class but\nmakes them optional, allowing partial updates.\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\n\nimport { BankDto } from './create.dto';\n\n/**\n * @fileoverview\n * This file defines the `UpdateDto` class, which represents the Data Transfer Object (DTO)\n * used for updating an existing Bank entity. It extends from the `BankDto` class,\n * making all fields optional for the update operation.\n *\n * @module\n * @description\n * The `UpdateDto` class is used to define the structure of the data required to update\n * an existing Bank entity. It inherits all properties from the `BankDto` class but\n * makes them optional, allowing partial updates.\n */\nexport class BankUpdateDto extends PartialType(BankDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Banks.html":{"url":"classes/Banks.html","title":"class - Banks","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Banks\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/banks/dto/bank.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the Banks class, which represents the data structure of a bank entity.\nIt includes properties that describe the bank and uses decorators for Swagger documentation.\nThe Banks class is used to define the structure of a bank object, including its name, short name,\ncity, state, and country IDs, along with the status of the bank. The class uses decorators to\nconfigure how the properties should be documented in the Swagger API documentation.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id_bank\n                            \n                            \n                                id_city\n                            \n                            \n                                id_country\n                            \n                            \n                                id_state\n                            \n                            \n                                name\n                            \n                            \n                                short_name\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id_bank\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: '1a2b3c4d-5678-90ef-1234-56789abcdef0'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/banks/dto/bank.dto.ts:23\n                        \n                    \n\n            \n                \n                    The unique identifier of the bank (e.g., '1a2b3c').\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id_city\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: '09407516-c0ac-4298-a6a7-59f48b87c094'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/banks/dto/bank.dto.ts:53\n                        \n                    \n\n            \n                \n                    The ID of the city where the bank is located (optional).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id_country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: '3a10e186-c759-4aec-9a86-2e5e0c2e5870'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/banks/dto/bank.dto.ts:73\n                        \n                    \n\n            \n                \n                    The ID of the country where the bank is located.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id_state\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'f2d90547-a09a-4baa-a9f4-244e44a80875'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/banks/dto/bank.dto.ts:63\n                        \n                    \n\n            \n                \n                    The ID of the state where the bank is located (optional).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'State Bank Of India'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/banks/dto/bank.dto.ts:33\n                        \n                    \n\n            \n                \n                    The name of the bank (e.g., 'State Bank Of India').\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        short_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'SBI'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/banks/dto/bank.dto.ts:43\n                        \n                    \n\n            \n                \n                    The short name of the bank (e.g., 'SBI').\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: Number, example: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/banks/dto/bank.dto.ts:83\n                        \n                    \n\n            \n                \n                    The status of the bank (e.g., 1 for active).\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiResponseProperty } from '@nestjs/swagger';\n\n/**\n * @fileoverview\n * This file defines the `Banks` class, which represents the data structure of a bank entity.\n * It includes properties that describe the bank and uses decorators for Swagger documentation.\n *\n * @module\n * @description\n * The `Banks` class is used to define the structure of a bank object, including its name, short name,\n * city, state, and country IDs, along with the status of the bank. The class uses decorators to\n * configure how the properties should be documented in the Swagger API documentation.\n */\nexport class Banks {\n    /**\n     * The unique identifier of the bank (e.g., '1a2b3c').\n     * @example '1a2b3c4d-5678-90ef-1234-56789abcdef0'\n     */\n    @ApiResponseProperty({\n        type: String,\n        example: '1a2b3c4d-5678-90ef-1234-56789abcdef0',\n    })\n    id_bank: string;\n\n    /**\n     * The name of the bank (e.g., 'State Bank Of India').\n     * @example 'State Bank Of India'\n     */\n    @ApiResponseProperty({\n        type: String,\n        example: 'State Bank Of India',\n    })\n    name: string;\n\n    /**\n     * The short name of the bank (e.g., 'SBI').\n     * @example 'SBI'\n     */\n    @ApiResponseProperty({\n        type: String,\n        example: 'SBI',\n    })\n    short_name: string;\n\n    /**\n     * The ID of the city where the bank is located (optional).\n     * @example '09407516-c0ac-4298-a6a7-59f48b87c094'\n     */\n    @ApiResponseProperty({\n        type: String,\n        example: '09407516-c0ac-4298-a6a7-59f48b87c094',\n    })\n    id_city: string | null;\n\n    /**\n     * The ID of the state where the bank is located (optional).\n     * @example 'f2d90547-a09a-4baa-a9f4-244e44a80875'\n     */\n    @ApiResponseProperty({\n        type: String,\n        example: 'f2d90547-a09a-4baa-a9f4-244e44a80875',\n    })\n    id_state: string | null;\n\n    /**\n     * The ID of the country where the bank is located.\n     * @example '3a10e186-c759-4aec-9a86-2e5e0c2e5870'\n     */\n    @ApiResponseProperty({\n        type: String,\n        example: '3a10e186-c759-4aec-9a86-2e5e0c2e5870',\n    })\n    id_country: string;\n\n    /**\n     * The status of the bank (e.g., 1 for active).\n     * @example 1\n     */\n    @ApiResponseProperty({\n        type: Number,\n        example: 1,\n    })\n    status: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Cities.html":{"url":"classes/Cities.html","title":"class - Cities","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Cities\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/city_mas/dto/cities.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the Cities class, which represents the data structure of a city entity.\nIt includes properties that describe the city and uses decorators for Swagger documentation.\nThe Cities class is used to define the structure of a city object, including its name, state id,country id The class also uses decorators\nto configure how the properties should be documented and transformed.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id_city\n                            \n                            \n                                id_country\n                            \n                            \n                                id_state\n                            \n                            \n                                name\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id_city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: '09407516-c0ac-4298-a6a7-59f48b87c094'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/city_mas/dto/cities.dto.ts:22\n                        \n                    \n\n            \n                \n                    The unique identifier of the city (e.g., 'SF').\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id_country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: '3a10e186-c759-4aec-9a86-2e5e0c2e5870'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/city_mas/dto/cities.dto.ts:52\n                        \n                    \n\n            \n                \n                    The ID of the country to which the city belongs.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id_state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'f2d90547-a09a-4baa-a9f4-244e44a80875'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/city_mas/dto/cities.dto.ts:42\n                        \n                    \n\n            \n                \n                    The ID of the state to which the city belongs.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'Surat'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/city_mas/dto/cities.dto.ts:32\n                        \n                    \n\n            \n                \n                    The name of the city (e.g., 'Surat').\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: Number, example: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/city_mas/dto/cities.dto.ts:62\n                        \n                    \n\n            \n                \n                    The status of the city (e.g., 1 for active).\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiResponseProperty } from '@nestjs/swagger';\n\n/**\n * @fileoverview\n * This file defines the `Cities` class, which represents the data structure of a city entity.\n * It includes properties that describe the city and uses decorators for Swagger documentation.\n *\n * @module\n * @description\n * The `Cities` class is used to define the structure of a city object, including its name, state id,country id The class also uses decorators\n * to configure how the properties should be documented and transformed.\n */\nexport class Cities {\n    /**\n     * The unique identifier of the city (e.g., 'SF').\n     * @example 'SF'\n     */\n    @ApiResponseProperty({\n        type: String,\n        example: '09407516-c0ac-4298-a6a7-59f48b87c094',\n    })\n    id_city: string;\n\n    /**\n     * The name of the city (e.g., 'Surat').\n     * @example 'Surat'\n     */\n    @ApiResponseProperty({\n        type: String,\n        example: 'Surat',\n    })\n    name: string;\n\n    /**\n     * The ID of the state to which the city belongs.\n     * @example 'f2d90547-a09a-4baa-a9f4-244e44a80875'\n     */\n    @ApiResponseProperty({\n        type: String,\n        example: 'f2d90547-a09a-4baa-a9f4-244e44a80875',\n    })\n    id_state: string;\n\n    /**\n     * The ID of the country to which the city belongs.\n     * @example '3a10e186-c759-4aec-9a86-2e5e0c2e5870'\n     */\n    @ApiResponseProperty({\n        type: String,\n        example: '3a10e186-c759-4aec-9a86-2e5e0c2e5870',\n    })\n    id_country: string;\n\n    /**\n     * The status of the city (e.g., 1 for active).\n     * @example 1\n     */\n    @ApiResponseProperty({\n        type: Number,\n        example: 1,\n    })\n    status: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CityController.html":{"url":"controllers/CityController.html","title":"controller - CityController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CityController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/city_mas/cities.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                cities\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createDto: CityDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(HttpStatus.CREATED)@ApiCreatedResponse({type: Cities, description: 'Create city'})\n                \n            \n\n            \n                \n                    Defined in src/modules/master/city_mas/cities.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createDto\n                                    \n                                                CityDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe data required to create a new city.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The created city object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id_city')@HttpCode(HttpStatus.OK)@ApiParam({name: 'id_city', type: String})@ApiOkResponse({status: undefined, description: 'City has been successfully deleted.'})\n                \n            \n\n            \n                \n                    Defined in src/modules/master/city_mas/cities.controller.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe ID of the city to delete.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        An object indicating the deletion result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(query: PaginationQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/modules/master/city_mas/cities.controller.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                PaginationQueryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe pagination and filtering parameters.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        A paginated list of cities.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id_city')@HttpCode(HttpStatus.OK)@ApiParam({name: 'id_city', type: String})@ApiOkResponse({type: Cities, description: 'Get City by ID'})\n                \n            \n\n            \n                \n                    Defined in src/modules/master/city_mas/cities.controller.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe ID of the city to retrieve.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The city object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateDto: UpdateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id_city')@HttpCode(HttpStatus.OK)@ApiParam({name: 'id_city', type: String})@ApiOkResponse({type: Cities, description: 'Update City'})\n                \n            \n\n            \n                \n                    Defined in src/modules/master/city_mas/cities.controller.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe ID of the city to be updated.\n\n\n                                    \n                                \n                                \n                                    updateDto\n                                    \n                                                UpdateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe data to update the city with.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The updated city object or null if not found.\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    HttpCode,\n    HttpStatus,\n    Param,\n    ParseUUIDPipe,\n    Patch,\n    Post,\n    Query,\n} from '@nestjs/common';\nimport { ApiTags, ApiOkResponse, ApiCreatedResponse, ApiParam } from '@nestjs/swagger';\n\nimport { PaginationResponse, PaginationResponseDto } from '@utils/dto/pagination-response.dto';\nimport { PaginationQueryDto } from '@utils/dto/pagination.dto';\n\nimport { CityService } from './cities.service';\nimport { Cities } from './dto/cities.dto';\nimport { CityDto } from './dto/create.dto';\nimport { UpdateDto } from './dto/update.dto';\n\n@ApiTags('Cities')\n@Controller('cities')\nexport class CityController {\n    constructor(private readonly cityService: CityService) {}\n\n    /**\n     * @route POST /cities\n     * @description Create a new city.\n     * @param {CreateCityDto} createDto - The data required to create a new city.\n     * @returns {Promise} The created city object.\n     */\n    @Post()\n    @HttpCode(HttpStatus.CREATED)\n    @ApiCreatedResponse({\n        type: Cities,\n        description: 'Create city',\n    })\n    async create(@Body() createDto: CityDto): Promise {\n        return this.cityService.create(createDto);\n    }\n\n    /**\n     * @route PATCH /cities/:id_city\n     * @description Update an existing city by its ID.\n     * @param {string} id - The ID of the city to be updated.\n     * @param {UpdateDto} updateDto - The data to update the city with.\n     * @returns {Promise} The updated city object or null if not found.\n     */\n    @Patch(':id_city')\n    @HttpCode(HttpStatus.OK)\n    @ApiParam({ name: 'id_city', type: String })\n    @ApiOkResponse({\n        type: Cities,\n        description: 'Update City',\n    })\n    async update(\n        @Param('id_city', ParseUUIDPipe) id: string,\n        @Body() updateDto: UpdateDto\n    ): Promise {\n        return this.cityService.update(id, updateDto);\n    }\n\n    /**\n     * @route GET /cities\n     * @description Retrieve a list of cities with pagination.\n     * @param {PaginationQueryDto} query - The pagination and filtering parameters.\n     * @returns {Promise>} A paginated list of cities.\n     */\n    @Get()\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ type: PaginationResponse(Cities) })\n    async findAll(@Query() query: PaginationQueryDto): Promise> {\n        return this.cityService.findAll(query);\n    }\n\n    /**\n     * @route GET /cities/:id_city\n     * @description Retrieve a single city by its ID.\n     * @param {string} id - The ID of the city to retrieve.\n     * @returns {Promise} The city object.\n     */\n    @Get(':id_city')\n    @HttpCode(HttpStatus.OK)\n    @ApiParam({ name: 'id_city', type: String })\n    @ApiOkResponse({\n        type: Cities,\n        description: 'Get City by ID',\n    })\n    async findOne(@Param('id_city', ParseUUIDPipe) id: string): Promise {\n        return this.cityService.findOne(id);\n    }\n\n    /**\n     * @route DELETE /cities/:id_city\n     * @description Delete a city by its ID.\n     * @param {string} id - The ID of the city to delete.\n     * @returns {Promise} An object indicating the deletion result.\n     */\n    @Delete(':id_city')\n    @HttpCode(HttpStatus.OK)\n    @ApiParam({ name: 'id_city', type: String })\n    @ApiOkResponse({\n        status: HttpStatus.OK,\n        description: 'City has been successfully deleted.',\n    })\n    async delete(@Param('id_city', ParseUUIDPipe) id: string): Promise {\n        return this.cityService.delete(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CityDto.html":{"url":"classes/CityDto.html","title":"class - CityDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CityDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/city_mas/dto/create.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the CityDto class, which represents the data transfer object (DTO)\nused for creating a new city record. It includes validation rules and transformation logic\nfor the properties of the city.\nThe CityDto class ensures that the data provided for creating a city adheres to\nspecified validation rules and formats. It uses decorators from class-validator for validation\nand class-transformer for transforming input data.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                id_city\n                            \n                            \n                                id_country\n                            \n                            \n                                id_state\n                            \n                            \n                                name\n                            \n                            \n                                    Optional\n                                status\n                            \n                            \n                                    Optional\n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id_city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude({toPlainOnly: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/city_mas/dto/create.dto.ts:83\n                        \n                    \n\n            \n                \n                    The unique identifier for the city.\nThis property is excluded from the plain representation of the object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id_country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@ApiProperty({type: String, description: 'Country ID', example: 'f2d90547-a09a-4baa-a9f4-244e44a80875'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/city_mas/dto/create.dto.ts:62\n                        \n                    \n\n            \n                \n                    The ID of the Country to which the city belongs.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id_state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@ApiProperty({type: String, description: 'State ID', example: '09407516-c0ac-4298-a6a7-59f48b87c094'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/city_mas/dto/create.dto.ts:48\n                        \n                    \n\n            \n                \n                    The ID of the state to which the city belongs.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@MaxLength(20)@ApiProperty({type: String, description: 'City name', example: 'Surat', maxLength: 20})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/city_mas/dto/create.dto.ts:34\n                        \n                    \n\n            \n                \n                    The name of the city (e.g., 'Surat').\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNumber()@ApiProperty({type: Number, description: 'Status of the city', example: 1, default: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/city_mas/dto/create.dto.ts:76\n                        \n                    \n\n            \n                \n                    The status of the city (e.g., 1 for active).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude({toPlainOnly: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/city_mas/dto/create.dto.ts:86\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nimport { Exclude } from 'class-transformer';\nimport { IsDefined, IsNotEmpty, IsString, MaxLength, IsOptional, IsNumber } from 'class-validator';\n\n/**\n * @fileoverview\n * This file defines the `CityDto` class, which represents the data transfer object (DTO)\n * used for creating a new city record. It includes validation rules and transformation logic\n * for the properties of the city.\n *\n * @module\n * @description\n * The `CityDto` class ensures that the data provided for creating a city adheres to\n * specified validation rules and formats. It uses decorators from `class-validator` for validation\n * and `class-transformer` for transforming input data.\n */\n\nexport class CityDto {\n    /**\n     * The name of the city (e.g., 'Surat').\n     * @example 'Surat'\n     */\n    @IsDefined()\n    @IsNotEmpty()\n    @IsString()\n    @MaxLength(20)\n    @ApiProperty({\n        type: String,\n        description: 'City name',\n        example: 'Surat',\n        maxLength: 20,\n    })\n    name: string;\n\n    /**\n     * The ID of the state to which the city belongs.\n     * @example '09407516-c0ac-4298-a6a7-59f48b87c094'\n     */\n    @IsDefined()\n    @IsNotEmpty()\n    @IsString()\n    @ApiProperty({\n        type: String,\n        description: 'State ID',\n        example: '09407516-c0ac-4298-a6a7-59f48b87c094',\n    })\n    id_state: string;\n\n    /**\n     * The ID of the Country to which the city belongs.\n     * @example 'f2d90547-a09a-4baa-a9f4-244e44a80875'\n     */\n    @IsDefined()\n    @IsNotEmpty()\n    @IsString()\n    @ApiProperty({\n        type: String,\n        description: 'Country ID',\n        example: 'f2d90547-a09a-4baa-a9f4-244e44a80875',\n    })\n    id_country: string;\n\n    /**\n     * The status of the city (e.g., 1 for active).\n     * @example 1\n     */\n    @IsOptional()\n    @IsNumber()\n    @ApiProperty({\n        type: Number,\n        description: 'Status of the city',\n        example: 1,\n        default: 1,\n    })\n    status?: number;\n\n    /**\n     * The unique identifier for the city.\n     * This property is excluded from the plain representation of the object.\n     */\n    @Exclude({ toPlainOnly: true })\n    id_city?: string;\n\n    @Exclude({ toPlainOnly: true })\n    updated_at?: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CityModule.html":{"url":"modules/CityModule.html","title":"module - CityModule","body":"\n                   \n\n\n\n\n    Modules\n    CityModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CityModule\n\n\n\ncluster_CityModule_exports\n\n\n\ncluster_CityModule_providers\n\n\n\n\nCityService \n\nCityService \n\n\n\nCityModule\n\nCityModule\n\nCityService  -->\n\nCityModule->CityService \n\n\n\n\n\nCityService\n\nCityService\n\nCityModule -->\n\nCityService->CityModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/master/city_mas/cities.modules.ts\n        \n\n\n\n        \n            Description\n        \n        \n            This file defines the CityModule, which bundles the CityController and CityService together.\nThe CityModule is responsible for handling city-related operations. It provides the necessary controllers and services to manage City.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CityService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CityController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CityService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { CityController } from './cities.controller';\nimport { CityService } from './cities.service';\nimport { Query } from './query';\n\n/**\n * @fileoverview\n * This file defines the `CityModule`, which bundles the `CityController` and `CityService` together.\n *\n * @module\n * @description\n * The `CityModule` is responsible for handling city-related operations. It provides the necessary controllers and services to manage City.\n */\n@Module({\n    controllers: [CityController],\n    providers: [CityService, Query],\n    exports: [CityService],\n})\nexport class CityModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CityService.html":{"url":"injectables/CityService.html","title":"injectable - CityService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CityService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/city_mas/cities.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service class for managing city data.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                MODULE\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(paginationService: PaginationService, prisma: PrismaService, query: Query, utilsService: UtilsService, commonQuery: CommonQuery5)\n                    \n                \n                        \n                            \n                                Defined in src/modules/master/city_mas/cities.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        paginationService\n                                                  \n                                                        \n                                                                        PaginationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        query\n                                                  \n                                                        \n                                                                        Query\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        utilsService\n                                                  \n                                                        \n                                                                        UtilsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        commonQuery\n                                                  \n                                                        \n                                                                    CommonQuery5\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createDto: CityDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/city_mas/cities.service.ts:40\n                \n            \n\n\n            \n                \n                    Creates a new city.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createDto\n                                    \n                                                CityDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe data required to create a new city.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The created city object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/city_mas/cities.service.ts:217\n                \n            \n\n\n            \n                \n                    Deletes a city by its ID.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe ID of the city to delete.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        An object indicating the deletion result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(paginationQuery: PaginationQueryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/city_mas/cities.service.ts:103\n                \n            \n\n\n            \n                \n                    Retrieves a list of cities with pagination.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    paginationQuery\n                                    \n                                                PaginationQueryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe pagination and filtering parameters.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        A paginated list of cities.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/city_mas/cities.service.ts:203\n                \n            \n\n\n            \n                \n                    Retrieves a single city by its ID.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe ID of the city to retrieve.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The city object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateDto: UpdateDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/city_mas/cities.service.ts:67\n                \n            \n\n\n            \n                \n                    Updates an existing city by its ID.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe ID of the city to be updated.\n\n\n                                    \n                                \n                                \n                                    updateDto\n                                    \n                                                UpdateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The updated city object or null if not found.\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        MODULE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/master/city_mas/cities.service.ts:21\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, HttpException, HttpStatus } from '@nestjs/common';\n\nimport { CommonQuery5 } from '@app/common/helper/services/comman.query';\nimport { IPaginationFieldConfig } from '@app/utils/types/pagination-options';\nimport { PaginationService } from '@services/pagination.service';\nimport { PrismaService } from '@services/prisma.service';\nimport { UtilsService } from '@services/util.service';\nimport { PaginationResponseDto } from '@utils/dto/pagination-response.dto';\nimport { PaginationQueryDto } from '@utils/dto/pagination.dto';\n\nimport { Cities } from './dto/cities.dto';\nimport { CityDto } from './dto/create.dto';\nimport { UpdateDto } from './dto/update.dto';\nimport { Query } from './query';\n\n/**\n * Service class for managing city data.\n */\n@Injectable()\nexport class CityService {\n    private readonly MODULE: string;\n\n    constructor(\n        private readonly paginationService: PaginationService,\n        private readonly prisma: PrismaService,\n        private readonly query: Query,\n        private readonly utilsService: UtilsService,\n        private commonQuery: CommonQuery5\n    ) {\n        this.commonQuery = new CommonQuery5('city_mas', ['id_city', 'name', 'status']);\n        this.MODULE = 'city';\n    }\n\n    /**\n     * Creates a new city.\n     * @param {CityDto} createDto - The data required to create a new city.\n     * @returns {Promise} The created city object.\n     * @throws {HttpException} If a city with the same name already exists or if an error occurs.\n     */\n    async create(createDto: CityDto): Promise {\n        const find = await this.prisma.executeRawQuery(this.query.findByName(), createDto);\n\n        if (find) {\n            throw new HttpException({ message: 'NAME ALREADY EXISTS' }, HttpStatus.CONFLICT);\n        }\n\n        const inserted = await this.prisma.executeRawQuery(this.query.insert(), createDto);\n\n        if (inserted && inserted.insertid) {\n            const get = await this.findOne(inserted.insertid);\n            return get as any;\n        } else {\n            throw new HttpException(\n                { message: 'Something went wrong' },\n                HttpStatus.INTERNAL_SERVER_ERROR\n            );\n        }\n    }\n\n    /**\n     * Updates an existing city by its ID.\n     * @param {string} id - The ID of the city to be updated.\n     * @param {UpdateDto} payload - The data to update the city with.\n     * @returns {Promise} The updated city object or null if not found.\n     * @throws {HttpException} If the city is not found or if an error occurs.\n     */\n    async update(id: string, updateDto: UpdateDto): Promise {\n        if (id == undefined && Object.keys(updateDto).length === 0) {\n            throw new HttpException(\n                {\n                    message: 'Nothing to be update!',\n                },\n                HttpStatus.BAD_REQUEST\n            );\n        }\n        //check Data is Exits or not\n        const recordExits = await this.findOne(id);\n        if (recordExits) {\n            updateDto.id_city = id;\n            updateDto.updated_at = new Date().toISOString();\n            //update\n            const updated = await this.prisma.executeRawQuery(this.query.update(), updateDto);\n\n            if (updated && updated[0].updatedid) {\n                const get = await this.findOne(updated[0].updatedid);\n                return get as any;\n            } else {\n                throw new HttpException(\n                    { message: 'Something went wrong' },\n                    HttpStatus.INTERNAL_SERVER_ERROR\n                );\n            }\n        } else {\n            throw new HttpException({ message: 'city not found' }, HttpStatus.NOT_FOUND);\n        }\n    }\n\n    /**\n     * Retrieves a list of cities with pagination.\n     * @param {PaginationQueryDto} paginationQuery - The pagination and filtering parameters.\n     * @returns {Promise>} A paginated list of cities.\n     */\n    async findAll(paginationQuery: PaginationQueryDto): Promise> {\n        // const commonQuery = new CommonQuery5('city_mas', ['id_city', 'name', 'status']);\n        // const queryConfig = this.commonQuery.findWithDynamicJoin3(\n        //     [\n        //         {\n        //             table: 'state_mas',\n        //             condition: 'id_state=id_state', // Specify the join condition\n        //             type: 'JOIN',\n        //             selectFields: ['name', 'status'], // Specify fields to select from another_table\n        //             additionalConditions: ['status=1'],\n        //         },\n        //         {\n        //             table: 'country_mas',\n        //             condition: 'id_country=id_country', // Specify the join condition\n        //             selectFields: ['name', 'status'], // Specify fields to select from yet_another_table\n        //             additionalConditions: ['status=1'],\n        //         },\n        //     ]\n        //     //'country_mas.status=1 AND state_mas.status=1'\n        // );\n        // // const sqlQuery = queryConfig.syntax;\n        // console.log('Query Config:', JSON.stringify(queryConfig, null, 2));\n        // if (typeof queryConfig.syntax !== 'function') {\n        //     throw new Error('Syntax function is not defined.');\n        // }\n\n        // // Call the syntax method to generate the actual SQL query string\n        // const sqlQuery = queryConfig.syntax(1);\n\n        // // Log the generated SQL query\n        // console.log('Generated SQL Query:', sqlQuery);\n        const baseQuery = [\n            'ptbl.id_city',\n            'ptbl.name',\n            'ptbl.id_state',\n            'ptbl.id_country',\n            'ptbl.status',\n        ];\n        const fromQuery = ` FROM city_mas as ptbl`;\n\n        const fieldConfigs: Record = {\n            id_country: {\n                joinTable: (alias: string) =>\n                    `JOIN country_mas ${alias} ON ${alias}.id_country = ptbl.id_country`,\n                alias: () => `c${0}`,\n                selectFields: (alias: string) => [`${alias}.name as country_name`],\n            },\n            id_state: {\n                joinTable: (alias: string) =>\n                    `JOIN state_mas ${alias} ON ${alias}.id_state = ptbl.id_state`,\n                alias: () => `c${0}`,\n                selectFields: (alias: string) => [`${alias}.name as state_name`],\n            },\n        };\n\n        const { selectQuery, countQuery } = this.utilsService.buildDynamicQuery(\n            paginationQuery,\n            fieldConfigs,\n            baseQuery,\n            fromQuery,\n            'ptbl.id_city'\n        );\n\n        return this.paginationService.paginate(selectQuery, countQuery, paginationQuery);\n    }\n\n    // async getRecordsWithJoins(id: number): Promise {\n    //     const queryConfig = this.commonQuery.findWithDynamicJoin1(\n    //         [\n    //             {\n    //                 table: 'state_mas',\n    //                 condition: 'id_state=id_state', // Specify the join condition\n    //                 type: 'JOIN',\n    //                 selectFields: ['name', 'status'], // Specify fields to select from another_table\n    //             },\n    //             {\n    //                 table: 'country_mas',\n    //                 condition: 'id_country=id_country', // Specify the join condition\n    //                 selectFields: ['name', 'status'], // Specify fields to select from yet_another_table\n    //             },\n    //         ],\n    //         'country_mas.status=1 AND state_mas.status=1'\n    //     );\n\n    //     // You can now use the generated SQL query in your database access layer\n    //     const sqlQuery = queryConfig.syntax(id); // This generates the actual SQL query string\n    //     console.log(sqlQuery); // Log the SQL query for debugging or execution\n\n    //     // Execute the SQL query using your preferred database library (e.g., TypeORM, Sequelize)\n    //     // For example, if using TypeORM:\n    //     // return await this.dataSource.query(sqlQuery);\n\n    //     return sqlQuery; // Just for demonstration; replace with actual execution\n    // }\n    /**\n     * Retrieves a single city by its ID.\n     * @param {string} id - The ID of the city to retrieve.\n     * @returns {Promise} The city object.\n     * @throws {HttpException} If the city is not found.\n     */\n    async findOne(id: string): Promise {\n        const result = await this.prisma.executeRawQuery(this.query.findById(), { id });\n        if (!result) {\n            throw new HttpException({ message: 'City not found' }, HttpStatus.NOT_FOUND);\n        }\n        return result as any;\n    }\n\n    /**\n     * Deletes a city by its ID.\n     * @param {string} id - The ID of the city to delete.\n     * @returns {Promise} An object indicating the deletion result.\n     * @throws {HttpException} If an error occurs during deletion.\n     */\n    async delete(id: string): Promise {\n        const deleted = await this.prisma.executeRawQuery(this.query.delete(), id);\n\n        if (deleted && deleted[0].deletedid) {\n            return deleted;\n        } else {\n            throw new HttpException(\n                { message: 'Something went wrong' },\n                HttpStatus.INTERNAL_SERVER_ERROR\n            );\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CommaSeparated.html":{"url":"injectables/CommaSeparated.html","title":"injectable - CommaSeparated","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CommaSeparated\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/filter.validator.ts\n        \n\n\n            \n                Description\n            \n            \n                Custom validator for checking if a string is a valid comma-separated list of numbers.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/filter.validator.ts:47\n                \n            \n\n\n            \n                \n                    Default error message when validation fails.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe validation arguments.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \nThe error message.\n\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(propertyValue: string, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/filter.validator.ts:28\n                \n            \n\n\n            \n                \n                    Validates if the given value is a comma-separated list of numbers.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    propertyValue\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe value to be validated.\n\n\n                                    \n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe validation arguments.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \nReturns true if valid; otherwise, false.\n\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\nimport {\n    ValidatorConstraint,\n    ValidatorConstraintInterface,\n    ValidationArguments,\n} from 'class-validator';\n\n/**\n * Custom validator for checking if a string is a valid comma-separated list of numbers.\n *\n * @export\n * @class CommaSeparated\n * @implements {ValidatorConstraintInterface}\n */\n@Injectable()\n@ValidatorConstraint({ name: 'CommaSeparated', async: false })\nexport class CommaSeparated implements ValidatorConstraintInterface {\n    /**\n     * Validates if the given value is a comma-separated list of numbers.\n     *\n     * @param {string} propertyValue - The value to be validated.\n     * @param {ValidationArguments} args - The validation arguments.\n     * @returns {boolean} - Returns true if valid; otherwise, false.\n     */\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    validate(propertyValue: string, args: ValidationArguments): boolean {\n        //\n        //\n        const isValid = /^[0-9]+(,[0-9]+)*$/.test(propertyValue);\n\n        if (isValid) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Default error message when validation fails.\n     *\n     * @param {ValidationArguments} args - The validation arguments.\n     * @returns {string} - The error message.\n     */\n\n    defaultMessage(args: ValidationArguments): string {\n        return `Invalid ${args.property}`;\n    }\n}\n\n/**\n * Custom validator for checking if a string is in the correct \"field direction\" format.\n *\n * @export\n * @class SortBy\n * @implements {ValidatorConstraintInterface}\n */\n@Injectable()\n@ValidatorConstraint({ name: 'SortBy', async: false })\nexport class SortBy implements ValidatorConstraintInterface {\n    /**\n     * Validates if the given value is in the format of \"field direction\" where direction is \"ASC\" or \"DESC\".\n     *\n     * @param {string} value - The value to be validated.\n     * @param {ValidationArguments} args - The validation arguments.\n     * @returns {boolean} - Returns true if valid; otherwise, false.\n     */\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    validate(value: string, args: ValidationArguments): boolean {\n        // Split the input by spaces and validate each pair\n        const parts = value.split(' ');\n\n        // Ensure pairs of field direction (e.g., field direction, field direction, ...)\n        if (parts.length % 2 !== 0) {\n            return false;\n        }\n\n        // Regular expression to match valid field direction\n        const fieldRegex = /^[\\w]+$/;\n        const directionRegex = /^(ASC|DESC|asc|desc|Asc|Desc)$/;\n\n        // Iterate through pairs and validate\n        for (let i = 0; i \n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommonQuery1.html":{"url":"classes/CommonQuery1.html","title":"class - CommonQuery1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommonQuery1\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/helper/services/comman.query.ts\n        \n\n\n            \n                Description\n            \n            \n                CommonQuery\nA generic class to handle SQL queries for different models. It provides methods for\nfinding, inserting, updating, and deleting records using DTOs.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                allowedKeys\n                            \n                            \n                                    Private\n                                model\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                createQuery\n                            \n                            \n                                delete\n                            \n                            \n                                findById\n                            \n                            \n                                findWithDynamicJoin\n                            \n                            \n                                    Private\n                                formatValue\n                            \n                            \n                                insert\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(model: string, allowedKeys: ()[])\n                    \n                \n                        \n                            \n                                Defined in src/common/helper/services/comman.query.ts:12\n                            \n                        \n\n                \n                    \n                            Constructor to initialize the CommonQuery class.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        model\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe name of the model/table for queries.\n\n\n                                                        \n                                                \n                                                \n                                                        allowedKeys\n                                                  \n                                                        \n                                                                    ()[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe keys of the DTO that are allowed in queries.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        allowedKeys\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ()[]\n\n                    \n                \n                    \n                        \n                                Defined in src/common/helper/services/comman.query.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        model\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/common/helper/services/comman.query.ts:11\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        createQuery\n                        \n                    \n                \n            \n            \n                \n                    \n                    createQuery(type: string, syntaxGenerator: (arg: any) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/common/helper/services/comman.query.ts:137\n                \n            \n\n\n            \n                \n                    Creates a query object with a specific type and syntax generator.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe type of query (e.g., SELECT_ONE, INSERT).\n\n\n                                    \n                                \n                                \n                                    syntaxGenerator\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nA function that generates the SQL syntax.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        An object containing the query configuration.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete()\n                \n            \n\n\n            \n                \n                    Defined in src/common/helper/services/comman.query.ts:82\n                \n            \n\n\n            \n                \n                    Generates a SQL query to delete a record by ID.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        An object containing the query configuration for deleting a record.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findById\n                        \n                    \n                \n            \n            \n                \nfindById()\n                \n            \n\n\n            \n                \n                    Defined in src/common/helper/services/comman.query.ts:28\n                \n            \n\n\n            \n                \n                    Generates a SQL query to find a record by ID.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        An object containing the query configuration for finding by ID.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findWithDynamicJoin\n                        \n                    \n                \n            \n            \n                \nfindWithDynamicJoin(joins: Array)\n                \n            \n\n\n            \n                \n                    Defined in src/common/helper/services/comman.query.ts:99\n                \n            \n\n\n            \n                \n                    Finds records with dynamic joins, automatically creating aliases for each table.\nAllows specifying fields to select from joined tables.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    joins\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nAn array of objects containing the table name, join condition, join type, and selected fields.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        An object containing the query configuration for finding with joins.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        formatValue\n                        \n                    \n                \n            \n            \n                \n                    \n                    formatValue(value: any)\n                \n            \n\n\n            \n                \n                    Defined in src/common/helper/services/comman.query.ts:150\n                \n            \n\n\n            \n                \n                    Formats a value for safe SQL query insertion.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe value to format.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        A string representation of the formatted value.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        insert\n                        \n                    \n                \n            \n            \n                \ninsert()\n                \n            \n\n\n            \n                \n                    Defined in src/common/helper/services/comman.query.ts:43\n                \n            \n\n\n            \n                \n                    Generates a SQL query to insert a new record.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        An object containing the query configuration for inserting a record.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate()\n                \n            \n\n\n            \n                \n                    Defined in src/common/helper/services/comman.query.ts:60\n                \n            \n\n\n            \n                \n                    Generates a SQL query to update an existing record.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        An object containing the query configuration for updating a record.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as _ from 'lodash';\n\n/**\n * CommonQuery\n *\n * @description\n * A generic class to handle SQL queries for different models. It provides methods for\n * finding, inserting, updating, and deleting records using DTOs.\n */\nexport class CommonQuery1 {\n    private model: string; // The name of the database table/model\n    private allowedKeys: (keyof T)[]; // List of keys that can be used in queries\n\n    /**\n     * Constructor to initialize the CommonQuery class.\n     * @param model - The name of the model/table for queries.\n     * @param allowedKeys - The keys of the DTO that are allowed in queries.\n     */\n    constructor(model: string, allowedKeys: (keyof T)[]) {\n        this.model = model;\n        this.allowedKeys = allowedKeys;\n    }\n\n    /**\n     * Generates a SQL query to find a record by ID.\n     * @returns An object containing the query configuration for finding by ID.\n     */\n    findById(): object {\n        return this.createQuery(\n            'SELECT_ONE',\n            (id: number) => `\n            SELECT ${this.allowedKeys.join(', ')}\n            FROM ${this.model} AS main\n            WHERE main.status = 1 AND main.id = ${this.formatValue(id)};\n        `\n        );\n    }\n\n    /**\n     * Generates a SQL query to insert a new record.\n     * @returns An object containing the query configuration for inserting a record.\n     */\n    insert(): object {\n        return this.createQuery('INSERT', (dto: T) => {\n            const conds = _.pick(dto, this.allowedKeys);\n            const keys = Object.keys(conds);\n            const values = keys.map((key) => this.formatValue(conds[key]));\n\n            return `\n                INSERT INTO ${this.model} (${keys.join(', ')})\n                VALUES (${values.join(', ')}) RETURNING *;\n            `;\n        });\n    }\n\n    /**\n     * Generates a SQL query to update an existing record.\n     * @returns An object containing the query configuration for updating a record.\n     */\n    update(): object {\n        return this.createQuery('UPDATE', (dto: T) => {\n            const id = _.get(dto, 'id');\n            _.unset(dto, 'id'); // Remove the ID for the update\n            const updateData = _.pick(dto, this.allowedKeys);\n\n            const setClauses = Object.entries(updateData)\n                .map(([key, value]) => `${key} = ${this.formatValue(value)}`)\n                .join(', ');\n\n            return `\n                UPDATE ${this.model}\n                SET ${setClauses}\n                WHERE id = ${this.formatValue(id)} RETURNING *;\n            `;\n        });\n    }\n\n    /**\n     * Generates a SQL query to delete a record by ID.\n     * @returns An object containing the query configuration for deleting a record.\n     */\n    delete(): object {\n        return this.createQuery(\n            'UPDATE',\n            (id: number) => `\n            UPDATE ${this.model}\n            SET status = 127\n            WHERE id = ${this.formatValue(id)} RETURNING *;\n        `\n        );\n    }\n\n    /**\n     * Finds records with dynamic joins, automatically creating aliases for each table.\n     * Allows specifying fields to select from joined tables.\n     * @param joins - An array of objects containing the table name, join condition, join type, and selected fields.\n     * @returns An object containing the query configuration for finding with joins.\n     */\n    findWithDynamicJoin(\n        joins: Array\n    ): object {\n        return this.createQuery('SELECT_WITH_DYNAMIC_JOIN', (id: number) => {\n            const fields = this.allowedKeys.join(', ');\n            const joinClauses = joins\n                .map((join, index) => {\n                    const alias = `table${index + 1}`; // Create an alias like table1, table2, etc.\n                    const joinType = join.type ? join.type : 'JOIN'; // Default to INNER JOIN if no type is specified\n\n                    // Select specific fields from the joined table\n                    const selectFields = join.selectFields\n                        ? join.selectFields.map((field) => `${alias}.${field}`).join(', ')\n                        : '';\n                    return `${joinType} ${join.table} AS ${alias} ON ${join.condition}${selectFields ? `, ${selectFields}` : ''}`;\n                })\n                .join(' ');\n\n            return `\n                SELECT ${fields}, ${joins.map((join, index) => (join.selectFields ? join.selectFields.map((field) => `table${index + 1}.${field}`).join(', ') : '')).join(', ')}\n                FROM ${this.model} AS main\n                ${joinClauses}\n                WHERE main.status = 1 AND main.id = ${this.formatValue(id)};\n            `;\n        });\n    }\n\n    /**\n     * Creates a query object with a specific type and syntax generator.\n     * @param type - The type of query (e.g., SELECT_ONE, INSERT).\n     * @param syntaxGenerator - A function that generates the SQL syntax.\n     * @returns An object containing the query configuration.\n     */\n    private createQuery(type: string, syntaxGenerator: (arg: any) => string): object {\n        return {\n            name: type.toLowerCase(),\n            type,\n            syntax: syntaxGenerator,\n        };\n    }\n\n    /**\n     * Formats a value for safe SQL query insertion.\n     * @param value - The value to format.\n     * @returns A string representation of the formatted value.\n     */\n    private formatValue(value: any): string {\n        if (Array.isArray(value)) {\n            const formattedArray = value.map((v) => `'${v.replace(/'/g, \"''\")}'`).join(', ');\n            return `'{${formattedArray}}'`;\n        } else if (typeof value === 'string') {\n            return `'${value.replace(/'/g, \"''\")}'`;\n        } else if (value === null || value === undefined) {\n            return 'NULL';\n        } else {\n            return `${value}`; // For numbers and other types\n        }\n    }\n    // commonQuery = new CommonQuery('your_table', ['id', 'name', 'status']);\n    // queryConfig = commonQuery.findWithDynamicJoin([\n    //     {\n    //         table: 'another_table',\n    //         condition: 'another_table.foreign_key = main.id',\n    //         type: 'LEFT JOIN',\n    //         selectFields: ['field1', 'field2'], // Specify fields to select from another_table\n    //     },\n    //     {\n    //         table: 'yet_another_table',\n    //         condition: 'yet_another_table.foreign_key = main.id',\n    //         selectFields: ['field3', 'field4'], // Specify fields to select from yet_another_table\n    //     },\n    // ]);\n}\n/**\n * CommonQuery\n *\n * @description\n * A generic class to handle SQL queries for different models. It provides methods for\n * finding, inserting, updating, and deleting records using DTOs.\n */\n\n/**\n * CommonQuery\n *\n * @description\n * A generic class to handle SQL queries for different models. It provides methods for\n * finding, inserting, updating, and deleting records using DTOs.\n */\nexport class CommonQuery5 {\n    private model: string; // The name of the database table/model\n    private allowedKeys: (keyof T)[]; // List of keys that can be used in queries\n\n    /**\n     * Constructor to initialize the CommonQuery class.\n     * @param model - The name of the model/table for queries.\n     * @param allowedKeys - The keys of the DTO that are allowed in queries.\n     */\n    constructor(model: string, allowedKeys: (keyof T)[]) {\n        this.model = model;\n        this.allowedKeys = allowedKeys;\n    }\n\n    /**\n     * Finds records with dynamic joins, automatically creating aliases for each table.\n     * @param joins - An array of objects containing the table name, join condition, join type, and selected fields.\n     * @returns An object containing the query configuration for finding with joins.\n     */\n    findWithDynamicJoin(\n        joins: Array\n    ): object {\n        return this.createQuery('SELECT_WITH_DYNAMIC_JOIN', (id: number) => {\n            const fields = this.allowedKeys.join(', ');\n            const mainAlias = 'main'; // Alias for the main table\n            const joinClauses = joins\n                .map((join, index) => {\n                    const joinAlias = `table${index + 1}`; // Create an alias like table1, table2, etc.\n                    const joinType = join.type ? join.type : 'JOIN'; // Default to INNER JOIN if no type is specified\n\n                    // Split the condition to derive the join fields\n                    const [foreignKey, mainField] = join.condition\n                        .split('=')\n                        .map((part) => part.trim());\n                    const condition = `${join.table}.${foreignKey} = ${mainAlias}.${mainField}`;\n\n                    return `${joinType} ${join.table} AS ${joinAlias} ON ${condition}`;\n                })\n                .join(' ');\n\n            return `\n                SELECT ${fields}, \n                ${joins\n                    .map((join, index) => {\n                        const alias = `table${index + 1}`;\n                        return join.selectFields\n                            ? join.selectFields.map((field) => `${alias}.${field}`).join(', ')\n                            : '';\n                    })\n                    .filter((field) => field)\n                    .join(', ')} \n                FROM ${this.model} AS ${mainAlias}\n                ${joinClauses}\n                WHERE ${mainAlias}.status = 1 AND ${mainAlias}.id = ${this.formatValue(id)};\n            `;\n        });\n    }\n\n    findWithDynamicJoin1(\n        joins: Array,\n        additionalConditions?: string // Additional dynamic WHERE conditions\n    ): QueryConfig {\n        // Specify the return type\n        return {\n            name: `SELECT_WITH_DYNAMIC_JOIN`,\n            type: `join`,\n            syntax: (id: number) => {\n                // Accept id as a parameter\n                const fields = this.allowedKeys.join(', ');\n                const mainAlias = 'main'; // Alias for the main table\n                const joinClauses = joins\n                    .map((join, index) => {\n                        const joinAlias = `table${index + 1}`; // Create an alias like table1, table2, etc.\n                        const joinType = join.type ? join.type : 'JOIN'; // Default to INNER JOIN if no type is specified\n\n                        // Split the condition to derive the join fields\n                        const [foreignKey, mainField] = join.condition\n                            .split('=')\n                            .map((part) => part.trim());\n                        const condition = `${join.table}.${foreignKey} = ${mainAlias}.${mainField}`;\n\n                        return `${joinType} ${join.table} AS ${joinAlias} ON ${condition}`;\n                    })\n                    .join(' ');\n\n                // Start building the WHERE clause\n                const baseWhere = `${mainAlias}.status = 1 AND ${mainAlias}.id = ${this.formatValue(id)}`;\n                const dynamicWhere = additionalConditions ? `AND ${additionalConditions}` : '';\n\n                return `\n            SELECT ${fields}, \n            ${joins\n                .map((join, index) => {\n                    const alias = `table${index + 1}`;\n                    return join.selectFields\n                        ? join.selectFields.map((field) => `${alias}.${field}`).join(', ')\n                        : '';\n                })\n                .filter((field) => field)\n                .join(', ')} \n            FROM ${this.model} AS ${mainAlias}\n            ${joinClauses}\n            WHERE ${baseWhere} ${dynamicWhere};\n            `;\n            },\n        };\n    }\n\n    findWithDynamicJoin2(\n        joins: Array,\n        additionalConditions?: string // Additional dynamic WHERE conditions\n    ): QueryConfig {\n        return {\n            name: `SELECT_WITH_DYNAMIC_JOIN`,\n            type: `join,`,\n            syntax: () => {\n                const mainAlias = 'main';\n                // const fields = this.allowedKeys.join(', ');\n                const fields = this.allowedKeys\n                    .map((field) => `${mainAlias}.${String(field)}`) // Ensure conversion to string\n                    .join(', '); // Alias for the main table\n                const joinClauses = joins\n                    .map((join, index) => {\n                        const joinAlias = `table${index + 1}`; // Create an alias like table1, table2, etc.\n                        const joinType = join.type ? join.type : 'JOIN'; // Default to INNER JOIN if no type is specified\n\n                        // Split the condition to derive the join fields\n                        const [foreignKey, mainField] = join.condition\n                            .split('=')\n                            .map((part) => part.trim());\n                        const condition = `${joinAlias}.${foreignKey} = ${mainAlias}.${mainField}`;\n\n                        return `${joinType} ${join.table} AS ${joinAlias} ON ${condition}`;\n                    })\n                    .join(' ');\n\n                // Start building the WHERE clause\n                const baseWhere = `${mainAlias}.status = 1`;\n                const dynamicWhere = additionalConditions ? `AND ${additionalConditions}` : '';\n\n                return `\n            SELECT ${fields}, \n            ${joins\n                .map((join, index) => {\n                    const alias = `table${index + 1}`;\n                    return join.selectFields\n                        ? join.selectFields.map((field) => `${alias}.${field}`).join(', ')\n                        : '';\n                })\n                .filter((field) => field)\n                .join(', ')} \n            FROM ${this.model} AS ${mainAlias}\n            ${joinClauses}\n            WHERE ${baseWhere} ${dynamicWhere};\n        `;\n            },\n        };\n    }\n    findWithDynamicJoin3(\n        joins: Array,\n        baseAdditionalConditions?: string // Additional conditions for the main WHERE clause\n    ): QueryConfig {\n        return {\n            name: `SELECT_WITH_DYNAMIC_JOIN`,\n            type: `join`,\n            syntax: () => {\n                const mainAlias = 'main';\n                const fields = this.allowedKeys\n                    .map((field) => `${mainAlias}.${String(field)}`)\n                    .join(', ');\n\n                const joinClauses = joins\n                    .map((join, index) => {\n                        const joinAlias = `table${index + 1}`;\n                        const joinType = join.type ? join.type : 'JOIN';\n\n                        const [foreignKey, mainField] = join.condition\n                            .split('=')\n                            .map((part) => part.trim());\n                        const condition = `${joinAlias}.${foreignKey} = ${mainAlias}.${mainField}`;\n\n                        // Add dynamic conditions for the current join\n                        const dynamicJoinConditions = join.additionalConditions\n                            ? join.additionalConditions\n                                  .map((cond) => `${joinAlias}.${cond}`)\n                                  .join(' AND ')\n                            : '';\n\n                        return `${joinType} ${join.table} AS ${joinAlias} ON ${condition}${dynamicJoinConditions ? ' AND ' + dynamicJoinConditions : ''}`;\n                    })\n                    .join(' ');\n\n                // Base where clause\n                const baseWhere = `${mainAlias}.status = 1`;\n                const dynamicWhere = baseAdditionalConditions\n                    ? `AND ${baseAdditionalConditions}`\n                    : '';\n\n                return `\n            SELECT ${fields}, \n            ${joins\n                .map((join, index) => {\n                    const alias = `table${index + 1}`;\n                    return join.selectFields\n                        ? join.selectFields.map((field) => `${alias}.${field}`).join(', ')\n                        : '';\n                })\n                .filter((field) => field)\n                .join(', ')} \n            FROM ${this.model} AS ${mainAlias}\n            ${joinClauses}\n            WHERE ${baseWhere} ${dynamicWhere};\n        `;\n            },\n        };\n    }\n\n    /**\n     * Creates a query object with a specific type and syntax generator.\n     * @param type - The type of query (e.g., SELECT_ONE, INSERT).\n     * @param syntaxGenerator - A function that generates the SQL syntax.\n     * @returns An object containing the query configuration.\n     */\n    private createQuery(type: string, syntaxGenerator: (arg: any) => string): object {\n        return {\n            name: type.toLowerCase(),\n            type,\n            syntax: syntaxGenerator, // This is a function\n        };\n    }\n\n    // private createQuery(type: string, syntaxGenerator: (arg: any) => string): object {\n    //     return {\n    //         name: type.toLowerCase(),\n    //         type,\n    //         syntax: syntaxGenerator,\n    //     };\n    // }\n\n    /**\n     * Formats a value for safe SQL query insertion.\n     * @param value - The value to format.\n     * @returns A string representation of the formatted value.\n     */\n    private formatValue(value: any): string {\n        if (Array.isArray(value)) {\n            const formattedArray = value.map((v) => `'${v.replace(/'/g, \"''\")}'`).join(', ');\n            return `'{${formattedArray}}'`;\n        } else if (typeof value === 'string') {\n            return `'${value.replace(/'/g, \"''\")}'`;\n        } else if (value === null || value === undefined) {\n            return 'NULL';\n        } else {\n            return `${value}`; // For numbers and other types\n        }\n    }\n    // commonQuery = new CommonQuery('your_table', ['id', 'name', 'status']);\n    // queryConfig = commonQuery.findWithDynamicJoin([\n    //     {\n    //         table: 'another_table',\n    //         condition: 'foreign_key=id', // Specify the join condition\n    //         type: 'LEFT JOIN',\n    //         selectFields: ['field1', 'field2'], // Specify fields to select from another_table\n    //     },\n    //     {\n    //         table: 'yet_another_table',\n    //         condition: 'foreign_key=id', // Specify the join condition\n    //         selectFields: ['field3', 'field4'], // Specify fields to select from yet_another_table\n    //     },\n    // ]);\n}\ninterface QueryConfig {\n    name: string;\n    type: string;\n    syntax: (id: number) => string; // Method to generate SQL\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommonQuery5.html":{"url":"classes/CommonQuery5.html","title":"class - CommonQuery5","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommonQuery5\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/helper/services/comman.query.ts\n        \n\n\n            \n                Description\n            \n            \n                CommonQuery\nA generic class to handle SQL queries for different models. It provides methods for\nfinding, inserting, updating, and deleting records using DTOs.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                allowedKeys\n                            \n                            \n                                    Private\n                                model\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                createQuery\n                            \n                            \n                                findWithDynamicJoin\n                            \n                            \n                                findWithDynamicJoin1\n                            \n                            \n                                findWithDynamicJoin2\n                            \n                            \n                                findWithDynamicJoin3\n                            \n                            \n                                    Private\n                                formatValue\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(model: string, allowedKeys: ()[])\n                    \n                \n                        \n                            \n                                Defined in src/common/helper/services/comman.query.ts:194\n                            \n                        \n\n                \n                    \n                            Constructor to initialize the CommonQuery class.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        model\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe name of the model/table for queries.\n\n\n                                                        \n                                                \n                                                \n                                                        allowedKeys\n                                                  \n                                                        \n                                                                    ()[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe keys of the DTO that are allowed in queries.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        allowedKeys\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ()[]\n\n                    \n                \n                    \n                        \n                                Defined in src/common/helper/services/comman.query.ts:194\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        model\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/common/helper/services/comman.query.ts:193\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        createQuery\n                        \n                    \n                \n            \n            \n                \n                    \n                    createQuery(type: string, syntaxGenerator: (arg: any) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/common/helper/services/comman.query.ts:436\n                \n            \n\n\n            \n                \n                    Creates a query object with a specific type and syntax generator.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe type of query (e.g., SELECT_ONE, INSERT).\n\n\n                                    \n                                \n                                \n                                    syntaxGenerator\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nA function that generates the SQL syntax.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        An object containing the query configuration.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findWithDynamicJoin\n                        \n                    \n                \n            \n            \n                \nfindWithDynamicJoin(joins: Array)\n                \n            \n\n\n            \n                \n                    Defined in src/common/helper/services/comman.query.ts:211\n                \n            \n\n\n            \n                \n                    Finds records with dynamic joins, automatically creating aliases for each table.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    joins\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nAn array of objects containing the table name, join condition, join type, and selected fields.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        An object containing the query configuration for finding with joins.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findWithDynamicJoin1\n                        \n                    \n                \n            \n            \n                \nfindWithDynamicJoin1(joins: Array, additionalConditions?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/helper/services/comman.query.ts:255\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    joins\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    additionalConditions\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         QueryConfig\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findWithDynamicJoin2\n                        \n                    \n                \n            \n            \n                \nfindWithDynamicJoin2(joins: Array, additionalConditions?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/helper/services/comman.query.ts:310\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    joins\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    additionalConditions\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         QueryConfig\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findWithDynamicJoin3\n                        \n                    \n                \n            \n            \n                \nfindWithDynamicJoin3(joins: Array, baseAdditionalConditions?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/helper/services/comman.query.ts:365\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    joins\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    baseAdditionalConditions\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         QueryConfig\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        formatValue\n                        \n                    \n                \n            \n            \n                \n                    \n                    formatValue(value: any)\n                \n            \n\n\n            \n                \n                    Defined in src/common/helper/services/comman.query.ts:457\n                \n            \n\n\n            \n                \n                    Formats a value for safe SQL query insertion.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe value to format.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        A string representation of the formatted value.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as _ from 'lodash';\n\n/**\n * CommonQuery\n *\n * @description\n * A generic class to handle SQL queries for different models. It provides methods for\n * finding, inserting, updating, and deleting records using DTOs.\n */\nexport class CommonQuery1 {\n    private model: string; // The name of the database table/model\n    private allowedKeys: (keyof T)[]; // List of keys that can be used in queries\n\n    /**\n     * Constructor to initialize the CommonQuery class.\n     * @param model - The name of the model/table for queries.\n     * @param allowedKeys - The keys of the DTO that are allowed in queries.\n     */\n    constructor(model: string, allowedKeys: (keyof T)[]) {\n        this.model = model;\n        this.allowedKeys = allowedKeys;\n    }\n\n    /**\n     * Generates a SQL query to find a record by ID.\n     * @returns An object containing the query configuration for finding by ID.\n     */\n    findById(): object {\n        return this.createQuery(\n            'SELECT_ONE',\n            (id: number) => `\n            SELECT ${this.allowedKeys.join(', ')}\n            FROM ${this.model} AS main\n            WHERE main.status = 1 AND main.id = ${this.formatValue(id)};\n        `\n        );\n    }\n\n    /**\n     * Generates a SQL query to insert a new record.\n     * @returns An object containing the query configuration for inserting a record.\n     */\n    insert(): object {\n        return this.createQuery('INSERT', (dto: T) => {\n            const conds = _.pick(dto, this.allowedKeys);\n            const keys = Object.keys(conds);\n            const values = keys.map((key) => this.formatValue(conds[key]));\n\n            return `\n                INSERT INTO ${this.model} (${keys.join(', ')})\n                VALUES (${values.join(', ')}) RETURNING *;\n            `;\n        });\n    }\n\n    /**\n     * Generates a SQL query to update an existing record.\n     * @returns An object containing the query configuration for updating a record.\n     */\n    update(): object {\n        return this.createQuery('UPDATE', (dto: T) => {\n            const id = _.get(dto, 'id');\n            _.unset(dto, 'id'); // Remove the ID for the update\n            const updateData = _.pick(dto, this.allowedKeys);\n\n            const setClauses = Object.entries(updateData)\n                .map(([key, value]) => `${key} = ${this.formatValue(value)}`)\n                .join(', ');\n\n            return `\n                UPDATE ${this.model}\n                SET ${setClauses}\n                WHERE id = ${this.formatValue(id)} RETURNING *;\n            `;\n        });\n    }\n\n    /**\n     * Generates a SQL query to delete a record by ID.\n     * @returns An object containing the query configuration for deleting a record.\n     */\n    delete(): object {\n        return this.createQuery(\n            'UPDATE',\n            (id: number) => `\n            UPDATE ${this.model}\n            SET status = 127\n            WHERE id = ${this.formatValue(id)} RETURNING *;\n        `\n        );\n    }\n\n    /**\n     * Finds records with dynamic joins, automatically creating aliases for each table.\n     * Allows specifying fields to select from joined tables.\n     * @param joins - An array of objects containing the table name, join condition, join type, and selected fields.\n     * @returns An object containing the query configuration for finding with joins.\n     */\n    findWithDynamicJoin(\n        joins: Array\n    ): object {\n        return this.createQuery('SELECT_WITH_DYNAMIC_JOIN', (id: number) => {\n            const fields = this.allowedKeys.join(', ');\n            const joinClauses = joins\n                .map((join, index) => {\n                    const alias = `table${index + 1}`; // Create an alias like table1, table2, etc.\n                    const joinType = join.type ? join.type : 'JOIN'; // Default to INNER JOIN if no type is specified\n\n                    // Select specific fields from the joined table\n                    const selectFields = join.selectFields\n                        ? join.selectFields.map((field) => `${alias}.${field}`).join(', ')\n                        : '';\n                    return `${joinType} ${join.table} AS ${alias} ON ${join.condition}${selectFields ? `, ${selectFields}` : ''}`;\n                })\n                .join(' ');\n\n            return `\n                SELECT ${fields}, ${joins.map((join, index) => (join.selectFields ? join.selectFields.map((field) => `table${index + 1}.${field}`).join(', ') : '')).join(', ')}\n                FROM ${this.model} AS main\n                ${joinClauses}\n                WHERE main.status = 1 AND main.id = ${this.formatValue(id)};\n            `;\n        });\n    }\n\n    /**\n     * Creates a query object with a specific type and syntax generator.\n     * @param type - The type of query (e.g., SELECT_ONE, INSERT).\n     * @param syntaxGenerator - A function that generates the SQL syntax.\n     * @returns An object containing the query configuration.\n     */\n    private createQuery(type: string, syntaxGenerator: (arg: any) => string): object {\n        return {\n            name: type.toLowerCase(),\n            type,\n            syntax: syntaxGenerator,\n        };\n    }\n\n    /**\n     * Formats a value for safe SQL query insertion.\n     * @param value - The value to format.\n     * @returns A string representation of the formatted value.\n     */\n    private formatValue(value: any): string {\n        if (Array.isArray(value)) {\n            const formattedArray = value.map((v) => `'${v.replace(/'/g, \"''\")}'`).join(', ');\n            return `'{${formattedArray}}'`;\n        } else if (typeof value === 'string') {\n            return `'${value.replace(/'/g, \"''\")}'`;\n        } else if (value === null || value === undefined) {\n            return 'NULL';\n        } else {\n            return `${value}`; // For numbers and other types\n        }\n    }\n    // commonQuery = new CommonQuery('your_table', ['id', 'name', 'status']);\n    // queryConfig = commonQuery.findWithDynamicJoin([\n    //     {\n    //         table: 'another_table',\n    //         condition: 'another_table.foreign_key = main.id',\n    //         type: 'LEFT JOIN',\n    //         selectFields: ['field1', 'field2'], // Specify fields to select from another_table\n    //     },\n    //     {\n    //         table: 'yet_another_table',\n    //         condition: 'yet_another_table.foreign_key = main.id',\n    //         selectFields: ['field3', 'field4'], // Specify fields to select from yet_another_table\n    //     },\n    // ]);\n}\n/**\n * CommonQuery\n *\n * @description\n * A generic class to handle SQL queries for different models. It provides methods for\n * finding, inserting, updating, and deleting records using DTOs.\n */\n\n/**\n * CommonQuery\n *\n * @description\n * A generic class to handle SQL queries for different models. It provides methods for\n * finding, inserting, updating, and deleting records using DTOs.\n */\nexport class CommonQuery5 {\n    private model: string; // The name of the database table/model\n    private allowedKeys: (keyof T)[]; // List of keys that can be used in queries\n\n    /**\n     * Constructor to initialize the CommonQuery class.\n     * @param model - The name of the model/table for queries.\n     * @param allowedKeys - The keys of the DTO that are allowed in queries.\n     */\n    constructor(model: string, allowedKeys: (keyof T)[]) {\n        this.model = model;\n        this.allowedKeys = allowedKeys;\n    }\n\n    /**\n     * Finds records with dynamic joins, automatically creating aliases for each table.\n     * @param joins - An array of objects containing the table name, join condition, join type, and selected fields.\n     * @returns An object containing the query configuration for finding with joins.\n     */\n    findWithDynamicJoin(\n        joins: Array\n    ): object {\n        return this.createQuery('SELECT_WITH_DYNAMIC_JOIN', (id: number) => {\n            const fields = this.allowedKeys.join(', ');\n            const mainAlias = 'main'; // Alias for the main table\n            const joinClauses = joins\n                .map((join, index) => {\n                    const joinAlias = `table${index + 1}`; // Create an alias like table1, table2, etc.\n                    const joinType = join.type ? join.type : 'JOIN'; // Default to INNER JOIN if no type is specified\n\n                    // Split the condition to derive the join fields\n                    const [foreignKey, mainField] = join.condition\n                        .split('=')\n                        .map((part) => part.trim());\n                    const condition = `${join.table}.${foreignKey} = ${mainAlias}.${mainField}`;\n\n                    return `${joinType} ${join.table} AS ${joinAlias} ON ${condition}`;\n                })\n                .join(' ');\n\n            return `\n                SELECT ${fields}, \n                ${joins\n                    .map((join, index) => {\n                        const alias = `table${index + 1}`;\n                        return join.selectFields\n                            ? join.selectFields.map((field) => `${alias}.${field}`).join(', ')\n                            : '';\n                    })\n                    .filter((field) => field)\n                    .join(', ')} \n                FROM ${this.model} AS ${mainAlias}\n                ${joinClauses}\n                WHERE ${mainAlias}.status = 1 AND ${mainAlias}.id = ${this.formatValue(id)};\n            `;\n        });\n    }\n\n    findWithDynamicJoin1(\n        joins: Array,\n        additionalConditions?: string // Additional dynamic WHERE conditions\n    ): QueryConfig {\n        // Specify the return type\n        return {\n            name: `SELECT_WITH_DYNAMIC_JOIN`,\n            type: `join`,\n            syntax: (id: number) => {\n                // Accept id as a parameter\n                const fields = this.allowedKeys.join(', ');\n                const mainAlias = 'main'; // Alias for the main table\n                const joinClauses = joins\n                    .map((join, index) => {\n                        const joinAlias = `table${index + 1}`; // Create an alias like table1, table2, etc.\n                        const joinType = join.type ? join.type : 'JOIN'; // Default to INNER JOIN if no type is specified\n\n                        // Split the condition to derive the join fields\n                        const [foreignKey, mainField] = join.condition\n                            .split('=')\n                            .map((part) => part.trim());\n                        const condition = `${join.table}.${foreignKey} = ${mainAlias}.${mainField}`;\n\n                        return `${joinType} ${join.table} AS ${joinAlias} ON ${condition}`;\n                    })\n                    .join(' ');\n\n                // Start building the WHERE clause\n                const baseWhere = `${mainAlias}.status = 1 AND ${mainAlias}.id = ${this.formatValue(id)}`;\n                const dynamicWhere = additionalConditions ? `AND ${additionalConditions}` : '';\n\n                return `\n            SELECT ${fields}, \n            ${joins\n                .map((join, index) => {\n                    const alias = `table${index + 1}`;\n                    return join.selectFields\n                        ? join.selectFields.map((field) => `${alias}.${field}`).join(', ')\n                        : '';\n                })\n                .filter((field) => field)\n                .join(', ')} \n            FROM ${this.model} AS ${mainAlias}\n            ${joinClauses}\n            WHERE ${baseWhere} ${dynamicWhere};\n            `;\n            },\n        };\n    }\n\n    findWithDynamicJoin2(\n        joins: Array,\n        additionalConditions?: string // Additional dynamic WHERE conditions\n    ): QueryConfig {\n        return {\n            name: `SELECT_WITH_DYNAMIC_JOIN`,\n            type: `join,`,\n            syntax: () => {\n                const mainAlias = 'main';\n                // const fields = this.allowedKeys.join(', ');\n                const fields = this.allowedKeys\n                    .map((field) => `${mainAlias}.${String(field)}`) // Ensure conversion to string\n                    .join(', '); // Alias for the main table\n                const joinClauses = joins\n                    .map((join, index) => {\n                        const joinAlias = `table${index + 1}`; // Create an alias like table1, table2, etc.\n                        const joinType = join.type ? join.type : 'JOIN'; // Default to INNER JOIN if no type is specified\n\n                        // Split the condition to derive the join fields\n                        const [foreignKey, mainField] = join.condition\n                            .split('=')\n                            .map((part) => part.trim());\n                        const condition = `${joinAlias}.${foreignKey} = ${mainAlias}.${mainField}`;\n\n                        return `${joinType} ${join.table} AS ${joinAlias} ON ${condition}`;\n                    })\n                    .join(' ');\n\n                // Start building the WHERE clause\n                const baseWhere = `${mainAlias}.status = 1`;\n                const dynamicWhere = additionalConditions ? `AND ${additionalConditions}` : '';\n\n                return `\n            SELECT ${fields}, \n            ${joins\n                .map((join, index) => {\n                    const alias = `table${index + 1}`;\n                    return join.selectFields\n                        ? join.selectFields.map((field) => `${alias}.${field}`).join(', ')\n                        : '';\n                })\n                .filter((field) => field)\n                .join(', ')} \n            FROM ${this.model} AS ${mainAlias}\n            ${joinClauses}\n            WHERE ${baseWhere} ${dynamicWhere};\n        `;\n            },\n        };\n    }\n    findWithDynamicJoin3(\n        joins: Array,\n        baseAdditionalConditions?: string // Additional conditions for the main WHERE clause\n    ): QueryConfig {\n        return {\n            name: `SELECT_WITH_DYNAMIC_JOIN`,\n            type: `join`,\n            syntax: () => {\n                const mainAlias = 'main';\n                const fields = this.allowedKeys\n                    .map((field) => `${mainAlias}.${String(field)}`)\n                    .join(', ');\n\n                const joinClauses = joins\n                    .map((join, index) => {\n                        const joinAlias = `table${index + 1}`;\n                        const joinType = join.type ? join.type : 'JOIN';\n\n                        const [foreignKey, mainField] = join.condition\n                            .split('=')\n                            .map((part) => part.trim());\n                        const condition = `${joinAlias}.${foreignKey} = ${mainAlias}.${mainField}`;\n\n                        // Add dynamic conditions for the current join\n                        const dynamicJoinConditions = join.additionalConditions\n                            ? join.additionalConditions\n                                  .map((cond) => `${joinAlias}.${cond}`)\n                                  .join(' AND ')\n                            : '';\n\n                        return `${joinType} ${join.table} AS ${joinAlias} ON ${condition}${dynamicJoinConditions ? ' AND ' + dynamicJoinConditions : ''}`;\n                    })\n                    .join(' ');\n\n                // Base where clause\n                const baseWhere = `${mainAlias}.status = 1`;\n                const dynamicWhere = baseAdditionalConditions\n                    ? `AND ${baseAdditionalConditions}`\n                    : '';\n\n                return `\n            SELECT ${fields}, \n            ${joins\n                .map((join, index) => {\n                    const alias = `table${index + 1}`;\n                    return join.selectFields\n                        ? join.selectFields.map((field) => `${alias}.${field}`).join(', ')\n                        : '';\n                })\n                .filter((field) => field)\n                .join(', ')} \n            FROM ${this.model} AS ${mainAlias}\n            ${joinClauses}\n            WHERE ${baseWhere} ${dynamicWhere};\n        `;\n            },\n        };\n    }\n\n    /**\n     * Creates a query object with a specific type and syntax generator.\n     * @param type - The type of query (e.g., SELECT_ONE, INSERT).\n     * @param syntaxGenerator - A function that generates the SQL syntax.\n     * @returns An object containing the query configuration.\n     */\n    private createQuery(type: string, syntaxGenerator: (arg: any) => string): object {\n        return {\n            name: type.toLowerCase(),\n            type,\n            syntax: syntaxGenerator, // This is a function\n        };\n    }\n\n    // private createQuery(type: string, syntaxGenerator: (arg: any) => string): object {\n    //     return {\n    //         name: type.toLowerCase(),\n    //         type,\n    //         syntax: syntaxGenerator,\n    //     };\n    // }\n\n    /**\n     * Formats a value for safe SQL query insertion.\n     * @param value - The value to format.\n     * @returns A string representation of the formatted value.\n     */\n    private formatValue(value: any): string {\n        if (Array.isArray(value)) {\n            const formattedArray = value.map((v) => `'${v.replace(/'/g, \"''\")}'`).join(', ');\n            return `'{${formattedArray}}'`;\n        } else if (typeof value === 'string') {\n            return `'${value.replace(/'/g, \"''\")}'`;\n        } else if (value === null || value === undefined) {\n            return 'NULL';\n        } else {\n            return `${value}`; // For numbers and other types\n        }\n    }\n    // commonQuery = new CommonQuery('your_table', ['id', 'name', 'status']);\n    // queryConfig = commonQuery.findWithDynamicJoin([\n    //     {\n    //         table: 'another_table',\n    //         condition: 'foreign_key=id', // Specify the join condition\n    //         type: 'LEFT JOIN',\n    //         selectFields: ['field1', 'field2'], // Specify fields to select from another_table\n    //     },\n    //     {\n    //         table: 'yet_another_table',\n    //         condition: 'foreign_key=id', // Specify the join condition\n    //         selectFields: ['field3', 'field4'], // Specify fields to select from yet_another_table\n    //     },\n    // ]);\n}\ninterface QueryConfig {\n    name: string;\n    type: string;\n    syntax: (id: number) => string; // Method to generate SQL\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConfigService.html":{"url":"classes/ConfigService.html","title":"class - ConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/helper/services/config.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                get\n                            \n                            \n                                    Public\n                                getBoolean\n                            \n                            \n                                    Public\n                                getNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    nodeEnv\n                                \n                                \n                                    prismaConfig\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/helper/services/config.service.ts:72\n                            \n                        \n\n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/helper/services/config.service.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getBoolean\n                        \n                    \n                \n            \n            \n                \n                    \n                    getBoolean(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/helper/services/config.service.ts:101\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getNumber\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNumber(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/helper/services/config.service.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        nodeEnv\n                    \n                \n\n                \n                    \n                        getnodeEnv()\n                    \n                \n                            \n                                \n                                    Defined in src/common/helper/services/config.service.ts:105\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        prismaConfig\n                    \n                \n\n                \n                    \n                        getprismaConfig()\n                    \n                \n                            \n                                \n                                    Defined in src/common/helper/services/config.service.ts:139\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { IsEnum, IsInt, IsOptional, IsString, ValidateIf, IsUrl, Max, Min } from 'class-validator';\nimport * as dotenv from 'dotenv';\n\n// import { FileDriver } from '../../../core/enum/file.type';\nimport { IAppConfig } from '../../../core/interfaces/app.interfaces';\nimport { IAwsConfig } from '../../../core/interfaces/aws.interfaces';\nimport { IFileConfig } from '../../../core/interfaces/file.interfaces';\nimport { IJWTConfig } from '../../../core/interfaces/jwt.interfaces';\nimport { INodeEmailerConfig } from '../../../core/interfaces/node-emailer.interfaces';\n// import { IPostgreSQLConfig } from '../../../core/interfaces/postgres.interfaces';\nimport { ISendGridConfig } from '../../../core/interfaces/sendgrid.interfaces';\nimport { ISMSConfig } from '../../../core/interfaces/sms.interfaces';\nimport { IUploadFileConfig } from '../../../core/interfaces/upload-file.interfaces';\nimport validateConfig from '../../../utils/validate-config';\n\n/**\n * Config service\n * @export\n * @class ConfigService\n */\n\nclass EnvVarAppConfigValidator {\n    @IsInt()\n    @Min(0)\n    @Max(65535)\n    @IsOptional()\n    APP_PORT: number;\n\n    @IsUrl({ require_tld: false })\n    @IsOptional()\n    FRONTEND_DOMAIN: string;\n\n    @IsUrl({ require_tld: false })\n    @IsOptional()\n    BACKEND_DOMAIN: string;\n\n    @IsString()\n    @IsOptional()\n    API_PREFIX: string;\n}\n\n// class EnvVarFileConfigValidator {\n//     // @IsEnum(FileDriver)\n//     // FILE_DRIVER: FileDriver;\n\n//     // @ValidateIf((envValues) =>\n//     //     [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n//     // )\n//     // @IsString()\n//     // AWS_ACCESS_KEY_ID: string;\n\n//     // @ValidateIf((envValues) =>\n//     //     [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n//     // )\n//     // @IsString()\n//     // AWS_SECRET_ACCESS_KEY: string;\n\n//     // @ValidateIf((envValues) =>\n//     //     [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n//     // )\n//     // @IsString()\n//     // AWS_DEFAULT_S3_BUCKET: string;\n\n//     // @ValidateIf((envValues) =>\n//     //     [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n//     // )\n//     @IsString()\n//     AWS_S3_REGION: string;\n// }\n\nexport class ConfigService {\n    constructor() {\n        const nodeEnv = this.nodeEnv;\n        // dotenv.config({\n        //   path: nodeEnv === \"production\" ? \".env\" : `.env.${nodeEnv}`,\n        // });\n        dotenv.config({\n            path:\n                nodeEnv === 'production'\n                    ? '.env.staging'\n                    : nodeEnv === 'staging'\n                      ? '.env.staging'\n                      : '.env.development',\n        });\n\n        // // Replace \\\\n with \\n to support multiline strings in AWS\n        // for (const envName of Object.keys(process.env)) {\n        //   process.env[envName] = process.env[envName].replace(/\\\\n/g, \"\\n\");\n        // }\n    }\n\n    public get(key: string): string {\n        return process.env[key] || 'undefined';\n    }\n\n    public getNumber(key: string): number {\n        return Number(this.get(key));\n    }\n\n    public getBoolean(key: string): boolean {\n        return Boolean(this.get(key));\n    }\n\n    get nodeEnv(): string {\n        return this.get('NODE_ENV') || 'development';\n    }\n\n    // get typeOrmConfig(): TypeOrmModuleOptions {\n    //   const dbConfig = {\n    //     // eslint-disable-next-line @typescript-eslint/prefer-as-const\n    //     type: \"mysql\" as \"mysql\",\n    //     host: this.get(\"DATABASE_HOST\"),\n    //     port: this.getNumber(\"DATABASE_PORT\"),\n    //     username: this.get(\"DATABASE_USER\"),\n    //     password: this.get(\"DATABASE_PASS\"),\n    //     database: this.get(\"DATABASE_SCHEMA\"),\n    //     authSource: \"admin\",\n    //     synchronize: true,\n    //     multipleStatements: true,\n    //     entities: [\"src/**/**.entity{.ts,.js}\"],\n    //     bigNumberStrings: false,\n    //   };\n    //   return dbConfig;\n    // }\n\n    // get appConfig(): IAppConfig {\n    //     validateConfig(process.env, EnvVarAppConfigValidator);\n    //     return {\n    //         name: this.get('APP_NAME') || '',\n    //         workingDirectory: process.env.PWD || process.cwd(),\n    //         frontendDomain: this.get('FRONTEND_DOMAIN') || '',\n    //         backendDomain: this.get('BACKEND_DOMAIN') || '',\n    //         port: this.getNumber('PORT'),\n    //         apiPrefix: this.get('API_PREFIX') || '',\n    //     };\n    // }\n\n    get prismaConfig(): string {\n        return `postgresql://${this.get('POSTGRES_USER')}:${this.get('POSTGRES_PASSWORD')}@${this.get('POSTGRES_HOST')}:${this.get('POSTGRES_PORT')}/${this.get('POSTGRES_NAME')}?connection_limit=${this.get('POSTGRES_CONNECTION_LIMIT')}&pool_timeout=${this.get('POSTGRES_POOL_TIMEOUT')}&schema=${this.get('POSTGRES_SCHEMA')}`;\n    }\n\n    // get awsS3Config(): IAwsConfig {\n    //     return {\n    //         AWS_S3_ACCESS_KEY_ID: this.get('AWS_S3_ACCESS_KEY_ID'),\n    //         AWS_S3_SECRET_ACCESS_KEY: this.get('AWS_S3_SECRET_ACCESS_KEY'),\n    //         AWS_S3_BUCKET_NAME: this.get('AWS_S3_BUCKET_NAME'),\n    //         AWS_S3_DEFAULT_REGION: this.get('AWS_S3_DEFAULT_REGION'),\n    //         AWS_S3_TEMP_DIRECTORY: this.get('AWS_S3_TEMP_DIRECTORY'),\n    //         AWS_S3_ENDPOINT: this.get('AWS_S3_ENDPOINT'),\n    //         AWS_S3_SERVER_HOST: this.get('AWS_S3_SERVER_HOST'),\n    //         AWS_S3_COMPANION_SECRET: this.get('AWS_S3_COMPANION_SECRET'),\n    //         TUS_STORAGE_DRIVER: this.get('TUS_STORAGE_DRIVER'),\n    //     };\n    // }\n\n    // get qrConfig() {\n    //     return {\n    //         QR_IMAGE: this.get('QR_IMAGE') || '',\n    //         QR_IMAGE_PATH: this.get('QR_IMAGE_PATH') || '',\n    //         QR_IMAGE_PATH_SALT: this.get('QR_IMAGE_PATH_SALT') || '',\n    //     };\n    // }\n\n    // get jwtConfig(): IJWTConfig {\n    //     return {\n    //         secret: this.get('JWT_SECRET_KEY'),\n    //         algorithm: this.get('JWT_ALGORITHM'),\n    //         issuer: this.get('JWT_ISSUER'),\n    //         audience: this.get('JWT_AUDIENCE'),\n    //         expiresInSeconds: this.getNumber('JWT_EXPIRES_IN_SECONDS'),\n    //         expirationTime: this.getNumber('JWT_EXPIRATION_TIME'),\n    //     };\n    // }\n\n    // get sendgridConfig(): ISendGridConfig {\n    //     return {\n    //         SENDGRID_API_KEY: this.get('SENDGRID_API_KEY'),\n    //         FROM_EMAIL: this.get('FROM_EMAIL'),\n    //         TO_EMAIL: this.get('TO_EMAIL'),\n    //         WELCOME_EMAIL: this.get('WELCOME_EMAIL'),\n    //     };\n    // }\n\n    // get nodeemailerConfig(): INodeEmailerConfig {\n    //     return {\n    //         NODE_EMAILER_HOST: this.get('NODE_EMAILER_HOST'),\n    //         NODE_EMAILER_PORT: this.getNumber('NODE_EMAILER_PORT'),\n    //         NODE_EMAILER_USER: this.get('NODE_EMAILER_USER'),\n    //         NODE_EMAILER_PASSWORD: this.get('NODE_EMAILER_PASSWORD'),\n    //         NODE_EMAILER_FROM_EMAIL: this.get('NODE_EMAILER_FROM_EMAIL'),\n    //         NODE_EMAILER_TO_EMAIL: this.get('NODE_EMAILER_TO_EMAIL'),\n    //     };\n    // }\n\n    // get smsConfig(): ISMSConfig {\n    //     return {\n    //         SMS_PROVIDER_NAME: this.get('SMS_PROVIDER_NAME'),\n    //         API_KEY: this.get('API_KEY'),\n    //         SENDER_ID: this.get('SENDER_ID'),\n    //     };\n    // }\n\n    // get uploadFileConfig(): IUploadFileConfig {\n    //     return {\n    //         TEMP_FILE_UPLOAD_URL: this.get('TEMP_FILE_UPLOAD_URL'),\n    //         FILE_UPLOAD_DESTINATION: this.get('FILE_UPLOAD_DESTINATION'),\n    //         MAX_UPLOAD_FILE_SIZE: this.getNumber('MAX_UPLOAD_FILE_SIZE'),\n    //         PROFILE_PIC_FILE_PATH: this.get('PROFILE_PIC_FILE_PATH'),\n    //         MULTIPLE_FILE_PATH: this.get('MULTIPLE_FILE_PATH'),\n    //     };\n    // }\n\n    // get fileConfig(): IFileConfig {\n    //     // validateConfig(process.env, EnvVarFileConfigValidator);\n    //     return {\n    //         driver: (this.get('FILE_DRIVER') as any | undefined) ?? undefined,\n    //         accessKeyId: this.get('AWS_ACCESS_KEY_ID'),\n    //         secretAccessKey: this.get('AWS_SECRET_ACCESS_KEY'),\n    //         awsDefaultS3Bucket: this.get('AWS_DEFAULT_S3_BUCKET'),\n    //         awsS3Region: this.get('AWS_S3_REGION'),\n    //         maxFileSize: 5242880, // 5mb\n    //     };\n    // }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ContactController.html":{"url":"controllers/ContactController.html","title":"controller - ContactController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ContactController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/ms-contact-type/contact.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                contact\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createDto: CreateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('')\n                \n            \n\n            \n                \n                    Defined in src/modules/master/ms-contact-type/contact.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createDto\n                                    \n                                                CreateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\n\nimport { ContactService } from './contact.service';\nimport { ContactDto as CreateDto } from './dto/create.dto';\n@ApiTags('Contact')\n@Controller('contact')\nexport class ContactController {\n    constructor(private readonly contactService: ContactService) {}\n    @Post('')\n    create(@Body() createDto: CreateDto) {\n        return this.contactService.create(createDto);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ContactDto.html":{"url":"classes/ContactDto.html","title":"class - ContactDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ContactDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/ms-contact-type/dto/create.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                contact_type\n                            \n                            \n                                    Optional\n                                id_address_type\n                            \n                            \n                                    Optional\n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        contact_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@MaxLength(100)@ApiProperty({type: String, description: 'Contact Type name', example: 'Email', maxLength: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/ms-contact-type/dto/create.dto.ts:21\n                        \n                    \n\n            \n                \n                    Contact Type name.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id_address_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude({toPlainOnly: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/ms-contact-type/dto/create.dto.ts:42\n                        \n                    \n\n            \n                \n                    The unique identifier for the Contact Type.\nThis property is excluded from the plain representation of the object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNumber()@ApiProperty({type: Number, description: 'Status of the Contact Type', example: 1, default: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/ms-contact-type/dto/create.dto.ts:35\n                        \n                    \n\n            \n                \n                    Status of the Contact Type.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nimport { Exclude } from 'class-transformer';\nimport { IsDefined, IsNotEmpty, IsNumber, IsOptional, IsString, MaxLength } from 'class-validator';\n\nexport class ContactDto {\n    /**\n     * Contact Type name.\n     * @example 'Email'\n     */\n    @IsDefined()\n    @IsNotEmpty()\n    @IsString()\n    @MaxLength(100)\n    @ApiProperty({\n        type: String,\n        description: 'Contact Type name',\n        example: 'Email',\n        maxLength: 100,\n    })\n    contact_type: string;\n\n    /**\n     * Status of the Contact Type.\n     * @example 1\n     */\n    @IsOptional()\n    @IsNumber()\n    @ApiProperty({\n        type: Number,\n        description: 'Status of the Contact Type',\n        example: 1,\n        default: 1,\n    })\n    status?: number;\n\n    /**\n     * The unique identifier for the Contact Type.\n     * This property is excluded from the plain representation of the object.\n     */\n    @Exclude({ toPlainOnly: true })\n    id_address_type?: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ContactModule.html":{"url":"modules/ContactModule.html","title":"module - ContactModule","body":"\n                   \n\n\n\n\n    Modules\n    ContactModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ContactModule\n\n\n\ncluster_ContactModule_providers\n\n\n\n\nContactService\n\nContactService\n\n\n\nContactModule\n\nContactModule\n\nContactModule -->\n\nContactService->ContactModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/master/ms-contact-type/contact.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ContactService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ContactController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ClientsModule, Transport } from '@nestjs/microservices';\n\nimport { ContactController } from './contact.controller';\nimport { ContactService } from './contact.service';\n\n@Module({\n    imports: [\n        ClientsModule.register([\n            {\n                name: 'CONTACT_SERVICE',\n                transport: Transport.TCP,\n                options: {\n                    host: 'localhost',\n                    port: 3043,\n                },\n                // transport: Transport.RMQ,\n                // options: {\n                //     urls: ['amqp://localhost:5672'],\n                //     queue: 'contact-queue',\n                //     // queueOptions: { durable: false },\n                // },\n                // transport: Transport.REDIS,\n                // options: {\n                //     url: 'redis://localhost:6379',\n                // },\n            },\n        ]),\n        ClientsModule.register([\n            {\n                name: 'CONTACT_SERVICE1',\n                transport: Transport.TCP,\n                options: {\n                    host: 'localhost',\n                    port: 3044,\n                },\n                // transport: Transport.RMQ,\n                // options: {\n                //     urls: ['amqp://localhost:5672'],\n                //     queue: 'contact-queue1',\n                //     // queueOptions: { durable: false },\n                // },\n            },\n        ]),\n    ],\n    controllers: [ContactController],\n    providers: [ContactService],\n})\nexport class ContactModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ContactService.html":{"url":"injectables/ContactService.html","title":"injectable - ContactService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ContactService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/ms-contact-type/contact.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                consumerHost\n                            \n                            \n                                    Private\n                                    Readonly\n                                consumerPort\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                checkConsumerStatus\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                onModuleDestroy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(rabbitClient: ClientProxy, rabbitClient1: ClientProxy)\n                    \n                \n                        \n                            \n                                Defined in src/modules/master/ms-contact-type/contact.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        rabbitClient\n                                                  \n                                                        \n                                                                    ClientProxy\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        rabbitClient1\n                                                  \n                                                        \n                                                                    ClientProxy\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        checkConsumerStatus\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkConsumerStatus()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/ms-contact-type/contact.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createDto: CreateDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/ms-contact-type/contact.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createDto\n                                    \n                                                CreateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleDestroy\n                        \n                    \n                \n            \n            \n                \nonModuleDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/ms-contact-type/contact.service.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        consumerHost\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'localhost'\n                    \n                \n                    \n                        \n                                Defined in src/modules/master/ms-contact-type/contact.service.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        consumerPort\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 3042\n                    \n                \n                    \n                        \n                                Defined in src/modules/master/ms-contact-type/contact.service.ts:11\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import * as net from 'net';\n\nimport { Inject, Injectable, OnModuleDestroy } from '@nestjs/common';\nimport { ClientProxy } from '@nestjs/microservices';\n\nimport { ContactDto as CreateDto } from './dto/create.dto';\n\n@Injectable()\nexport class ContactService implements OnModuleDestroy {\n    private readonly consumerHost = 'localhost'; // Adjust as needed\n    private readonly consumerPort = 3042; // Adjust as needed\n    constructor(\n        @Inject('CONTACT_SERVICE') private rabbitClient: ClientProxy,\n        @Inject('CONTACT_SERVICE1') private rabbitClient1: ClientProxy\n    ) {}\n    async create(createDto: CreateDto) {\n        // try {\n        //     this.rabbitClient.emit('create-contact', createDto);\n        //     return 'send sussefullty';\n        // } catch (error) {\n        //     console.error('Failed to send message:', error);\n        //     return 'request failed' + error;\n        // }\n        const isConsumerAvailable = await this.checkConsumerStatus();\n\n        if (isConsumerAvailable) {\n            this.rabbitClient.emit('create-contact', createDto);\n            this.rabbitClient1.emit('create-contact', createDto);\n            return 'Message sent successfully';\n        } else {\n            // this.messageQueue.push(createDto);\n            console.log('Consumer is down. Message stored locally:', createDto);\n            return 'Consumer is down, Try after some time';\n        }\n        // const result = this.rabbitClient.emit('create-contact', createDto);\n        // console.log(result);\n        // return 'send create request';\n    }\n    private async checkConsumerStatus(): Promise {\n        return new Promise((resolve) => {\n            const socket = new net.Socket();\n\n            socket.setTimeout(2000); // Set timeout for connection\n\n            socket.on('connect', () => {\n                socket.destroy(); // Close the connection\n                resolve(true);\n            });\n\n            socket.on('error', () => {\n                resolve(false); // Connection failed\n            });\n\n            socket.on('timeout', () => {\n                socket.destroy(); // Close the connection\n                resolve(false); // Timeout occurred\n            });\n\n            socket.connect(this.consumerPort, this.consumerHost); // Attempt to connect\n        });\n    }\n    onModuleDestroy() {\n        this.rabbitClient.close();\n        this.rabbitClient1.close();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CountriesController.html":{"url":"controllers/CountriesController.html","title":"controller - CountriesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CountriesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/countries/countries.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                This file defines the CountriesController, which handles HTTP requests related to countries.\nThe CountriesController is responsible for handling requests to find and retrieve country information.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createDto: createDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create')@HttpCode(HttpStatus.OK)@ApiOkResponse({type: Country, description: 'Create Country'})\n                \n            \n\n            \n                \n                    Defined in src/modules/countries/countries.controller.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createDto\n                                    \n                                            createDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe data required to create a new country.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The created country object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(deletebyid/:id_country)@HttpCode(HttpStatus.OK)@ApiParam({name: 'id_country', type: String})@ApiOkResponse({status: undefined, description: Country has been successfully deleted.})\n                \n            \n\n            \n                \n                    Defined in src/modules/countries/countries.controller.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe ID of the country to be deleted.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        An object indicating the deletion result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(query: PaginationQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('findall')@HttpCode(HttpStatus.OK)@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/modules/countries/countries.controller.ts:58\n                \n            \n\n\n            \n                \n                    Find all countries\nGET /v1/countries?page=1&limit=10\nThis endpoint allows the client to retrieve a paginated list of countries.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                PaginationQueryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe pagination query parameters.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            GET /v1/countries?page=1&amp;limit=10\n                        \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        A promise that resolves to a paginated response of countries.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateDto: UpdateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('updatebyid/:id_country')@HttpCode(HttpStatus.OK)@ApiParam({name: 'id_country', type: String})@ApiOkResponse({type: Country, description: 'Update Country'})\n                \n            \n\n            \n                \n                    Defined in src/modules/countries/countries.controller.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe ID of the Country to be updated.\n\n\n                                    \n                                \n                                \n                                    updateDto\n                                    \n                                                UpdateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe data to update the Country with.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The updated Country object or null if not found.\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Get,\n    Query,\n    HttpStatus,\n    HttpCode,\n    Post,\n    Body,\n    Patch,\n    Param,\n    ParseUUIDPipe,\n    Delete,\n} from '@nestjs/common';\nimport { ApiTags, ApiOkResponse, ApiParam } from '@nestjs/swagger';\n\nimport { PaginationResponse, PaginationResponseDto } from '@utils/dto/pagination-response.dto';\nimport { PaginationQueryDto } from '@utils/dto/pagination.dto';\n\nimport { CountriesService } from './countries.service';\nimport { Country } from './dto/country';\n//import { CreateCountryDto } from './dto/create.dto';\nimport { CreateCountryDto as createDto } from './dto/create.dto';\nimport { UpdateDto } from './dto/update.dto';\n\n/**\n * @fileoverview\n * This file defines the `CountriesController`, which handles HTTP requests related to countries.\n *\n * @module\n * @description\n * The `CountriesController` is responsible for handling requests to find and retrieve country information.\n */\n@ApiTags('Countries')\n@Controller()\nexport class CountriesController {\n    constructor(private readonly countriesService: CountriesService) {}\n\n    /***\n     * Find all countries\n     *\n     * @param {PaginationQueryDto} query - The pagination query parameters.\n     * @returns {Promise>} A promise that resolves to a paginated response of countries.\n     *\n     * @example\n     * GET /v1/countries?page=1&limit=10\n     *\n     * @description\n     * This endpoint allows the client to retrieve a paginated list of countries.\n     *\n     * @see PaginationQueryDto\n     * @see PaginationResponseDto\n     * @see Country\n     */\n\n    @Get('findall')\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ type: PaginationResponse(Country) })\n    async findAll(@Query() query: PaginationQueryDto): Promise> {\n        const get_all = await this.countriesService.findAll(query);\n\n        return get_all;\n    }\n\n    /**\n     * @route POST /country/create\n     * @description Create a new country.\n     * @param {CountryDto} createDto - The data required to create a new country.\n     * @returns {Promise} The created country object.\n     */\n\n    @Post('create')\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ type: Country, description: 'Create Country' })\n    async create(@Body() createDto: createDto): Promise {\n        return await this.countriesService.create(createDto);\n    }\n\n    /**\n     * @route PATCH /updatebyid/:id_country\n     * @description Update an existing Country by its ID.\n     * @param {string} id - The ID of the Country to be updated.\n     * @param {UpdateDto} updateDto - The data to update the Country with.\n     * @returns {Promise} The updated Country object or null if not found.\n     */\n\n    @Patch('updatebyid/:id_country')\n    @HttpCode(HttpStatus.OK)\n    @ApiParam({ name: 'id_country', type: String })\n    @ApiOkResponse({\n        type: Country,\n        description: 'Update Country',\n    })\n    async update(\n        @Param('id_country', ParseUUIDPipe) id: string,\n        @Body() updateDto: UpdateDto\n    ): Promise {\n        const updated = await this.countriesService.update(id, updateDto);\n        return updated;\n    }\n    /**\n     * @route DELETE /deletebyid/:id_country\n     * @description Delete a country by its ID.\n     * @param {string} id - The ID of the country to be deleted.\n     * @returns {Promise} An object indicating the deletion result.\n     */\n\n    @Delete(`deletebyid/:id_country`)\n    @HttpCode(HttpStatus.OK)\n    @ApiParam({ name: 'id_country', type: String })\n    @ApiOkResponse({\n        status: HttpStatus.OK,\n        description: `Country has been successfully deleted.`,\n    })\n    async delete(@Param('id_country', ParseUUIDPipe) id: string): Promise {\n        const deleted = await this.countriesService.delete(id);\n        return deleted;\n    }\n\n    // @Get('v1/country')\n}\n\n// import { Controller, Get, Query, HttpStatus, HttpCode } from '@nestjs/common';\n// import { ApiTags, ApiOkResponse } from '@nestjs/swagger';\n\n// import {\n//     InfinityPaginationResponse,\n//     InfinityPaginationResponseDto,\n// } from '@utils/dto/infinity-pagination-response.dto';\n// import { infinityPagination } from '@utils/infinity-pagination';\n\n// import { CountriesService } from './countries.service';\n// import { Country } from './domain/country';\n// import { QueryCountryDto } from './dto/query-country.dto';\n\n// @ApiTags('Countries')\n// @Controller()\n// export class CountriesController {\n//     constructor(private readonly countriesService: CountriesService) {}\n\n//     /***\n//      * Find all countries\n//      */\n\n//     @Get('v1/countries')\n//     @HttpCode(HttpStatus.OK)\n//     @ApiOkResponse({\n//         type: InfinityPaginationResponse(Country),\n//     })\n//     async findAll(\n//         @Query() query: QueryCountryDto\n//     ): Promise> {\n//         console.log('HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHA');\n//         const page = query?.page ?? 1;\n//         let limit = query?.limit ?? 10;\n//         if (limit > 50) {\n//             limit = 50;\n//         }\n\n//         return infinityPagination(\n//             await this.countriesService.findManyWithPagination({\n//                 filterOptions: query?.filters,\n//                 sortOptions: query?.sort,\n//                 paginationOptions: {\n//                     page,\n//                     limit,\n//                 },\n//             }),\n//             { page, limit }\n//         );\n//     }\n// }\n\n// import { Controller, Get, Query, HttpStatus, HttpCode } from '@nestjs/common';\n// import { ApiTags, ApiOkResponse, ApiQuery } from '@nestjs/swagger';\n\n// // import {\n// //     InfinityPaginationResponse,\n// //     InfinityPaginationResponseDto,\n// // } from '@utils/dto/infinity-pagination-response.dto';\n// // import { infinityPagination } from '@utils/infinity-pagination';\n\n// import { ApiFilterQuery } from '@decorators/api.filter.query';\n// import {\n//     PaginationQueryDto,\n//     PaginatedResultDto,\n//     FilterQueryDto,\n//     // ApiFilterQuery,\n// } from '@utils/dto/pagination.dto';\n\n// // import { ApiNestedQuery } from '../../decorators/api-filter-query';\n\n// import { CountriesService } from './countries.service';\n// import { Country } from './domain/country';\n// // import { QueryCountryDto } from './dto/query-country.dto';\n\n// @ApiTags('Countries')\n// @Controller()\n// export class CountriesController {\n//     constructor(private readonly countriesService: CountriesService) {}\n\n//     /***\n//      * Find all countries\n//      */\n\n//     @Get('v1/countries')\n//     @HttpCode(HttpStatus.OK)\n//     // @ApiQuery({\n//     //     name: 'filters',\n//     //     required: false,\n//     //     type: String,\n//     //     description: 'Array of filter objects as a JSON string',\n//     //     example:\n//     //         '[{\"field\":\"name\",\"operator\":\"LIKE\",\"value\":\"John\"},{\"field\":\"age\",\"operator\":\">\",\"value\":\"30\"}]',\n//     // })\n//     // @ApiQuery({\n//     //     name: 'sort',\n//     //     required: false,\n//     //     type: String,\n//     //     description: 'Array of sort objects as a JSON string',\n//     //     example: '[{\"field\":\"name\",\"direction\":\"ASC\"},{\"field\":\"age\",\"direction\":\"DESC\"}]',\n//     // })\n//     // @ApiFilterQuery('filters', FilterQueryDto, 0)\n//     // @ApiFilterQuery('filters', FilterQueryDto, 1)\n//     @ApiOkResponse({ type: PaginatedResultDto })\n//     async findAll(\n//         @Query() paginationQuery: PaginationQueryDto\n//     ): Promise> {\n//         return this.countriesService.findAll(paginationQuery);\n//     }\n// }\n\n// // import { Controller, Get, Query, HttpStatus, HttpCode } from '@nestjs/common';\n// // import { ApiTags, ApiOkResponse } from '@nestjs/swagger';\n\n// // import {\n// //     InfinityPaginationResponse,\n// //     InfinityPaginationResponseDto,\n// // } from '@utils/dto/infinity-pagination-response.dto';\n// // import { infinityPagination } from '@utils/infinity-pagination';\n\n// // import { CountriesService } from './countries.service';\n// // import { Country } from './domain/country';\n// // import { QueryCountryDto } from './dto/query-country.dto';\n\n// // @ApiTags('Countries')\n// // @Controller()\n// // export class CountriesController {\n// //     constructor(private readonly countriesService: CountriesService) {}\n\n// //     /***\n// //      * Find all countries\n// //      */\n\n// //     @Get('v1/countries')\n// //     @HttpCode(HttpStatus.OK)\n// //     @ApiOkResponse({\n// //         type: InfinityPaginationResponse(Country),\n// //     })\n// //     async findAll(\n// //         @Query() query: QueryCountryDto\n// //     ): Promise> {\n// //         console.log('HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHA');\n// //         const page = query?.page ?? 1;\n// //         let limit = query?.limit ?? 10;\n// //         if (limit > 50) {\n// //             limit = 50;\n// //         }\n\n// //         return infinityPagination(\n// //             await this.countriesService.findManyWithPagination({\n// //                 filterOptions: query?.filters,\n// //                 sortOptions: query?.sort,\n// //                 paginationOptions: {\n// //                     page,\n// //                     limit,\n// //                 },\n// //             }),\n// //             { page, limit }\n// //         );\n// //     }\n// // }\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CountriesModule.html":{"url":"modules/CountriesModule.html","title":"module - CountriesModule","body":"\n                   \n\n\n\n\n    Modules\n    CountriesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CountriesModule\n\n\n\ncluster_CountriesModule_exports\n\n\n\ncluster_CountriesModule_providers\n\n\n\n\nCountriesService \n\nCountriesService \n\n\n\nCountriesModule\n\nCountriesModule\n\nCountriesService  -->\n\nCountriesModule->CountriesService \n\n\n\n\n\nCountriesService\n\nCountriesService\n\nCountriesModule -->\n\nCountriesService->CountriesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/countries/countries.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            This file defines the CountriesModule, which bundles the CountriesController and CountriesService together.\nThe CountriesModule is responsible for handling country-related operations. It provides the necessary controllers and services to manage countries.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CountriesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CountriesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CountriesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { CountriesController } from './countries.controller';\nimport { CountriesService } from './countries.service';\nimport { Query } from './query';\n\n/**\n * @fileoverview\n * This file defines the `CountriesModule`, which bundles the `CountriesController` and `CountriesService` together.\n *\n * @module\n * @description\n * The `CountriesModule` is responsible for handling country-related operations. It provides the necessary controllers and services to manage countries.\n */\n@Module({\n    controllers: [CountriesController],\n    providers: [CountriesService, Query],\n    exports: [CountriesService],\n})\nexport class CountriesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CountriesService-1.html":{"url":"injectables/CountriesService-1.html","title":"injectable - CountriesService-1","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CountriesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/country_mas/country_mas.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the CountriesService class, which provides methods to manage country data.\nIt includes operations for creating, updating, retrieving, and deleting countries.\nThe CountriesService class is responsible for handling business logic related to countries.\nIt interacts with the database through the PrismaService and performs various operations using raw SQL queries.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                MODULE\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(paginationService: PaginationService, prisma: PrismaService, query: Query, utilsService: UtilsService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/master/country_mas/country_mas.service.ts:27\n                            \n                        \n\n                \n                    \n                            Creates an instance of CountriesService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        paginationService\n                                                  \n                                                        \n                                                                        PaginationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to handle pagination logic.\n\n\n                                                        \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to interact with the database.\n\n\n                                                        \n                                                \n                                                \n                                                        query\n                                                  \n                                                        \n                                                                        Query\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for SQL query generation.\n\n\n                                                        \n                                                \n                                                \n                                                        utilsService\n                                                  \n                                                        \n                                                                        UtilsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for utility functions, including dynamic query building.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(CountryDto: CountryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/country_mas/country_mas.service.ts:51\n                \n            \n\n\n            \n                \n                    Creates a new country.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    CountryDto\n                                    \n                                                CountryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nData required to create a new country.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The created country object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/country_mas/country_mas.service.ts:145\n                \n            \n\n\n            \n                \n                    Deletes a country by its ID.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe ID of the country to delete.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        An object indicating the result of the deletion.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(paginationQuery: PaginationQueryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/country_mas/country_mas.service.ts:118\n                \n            \n\n\n            \n                \n                    Retrieves a paginated list of countries.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    paginationQuery\n                                    \n                                                PaginationQueryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nPagination and filtering parameters.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        A paginated list of countries.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/country_mas/country_mas.service.ts:169\n                \n            \n\n\n            \n                \n                    Retrieves a country by its ID.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateDto: UpdateDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/country_mas/country_mas.service.ts:80\n                \n            \n\n\n            \n                \n                    Updates an existing country by its ID.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe ID of the country to update.\n\n\n                                    \n                                \n                                \n                                    updateDto\n                                    \n                                                UpdateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nData to update the country with.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The updated country object or null if not found.\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        MODULE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/master/country_mas/country_mas.service.ts:27\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, HttpException, HttpStatus } from '@nestjs/common';\n\nimport { PaginationService } from '@services/pagination.service';\nimport { PrismaService } from '@services/prisma.service';\nimport { UtilsService } from '@services/util.service';\nimport { PaginationResponseDto } from '@utils/dto/pagination-response.dto';\nimport { PaginationQueryDto } from '@utils/dto/pagination.dto';\nimport { IPaginationFieldConfig } from '@utils/types/pagination-options';\n\nimport { CountryMas } from './dto/country_mas.dto';\nimport { CountryDto } from './dto/create.dto';\nimport { UpdateDto } from './dto/update.dto';\nimport { Query } from './query';\n\n/**\n * @fileoverview\n * This file defines the `CountriesService` class, which provides methods to manage country data.\n * It includes operations for creating, updating, retrieving, and deleting countries.\n *\n * @module\n * @description\n * The `CountriesService` class is responsible for handling business logic related to countries.\n * It interacts with the database through the `PrismaService` and performs various operations using raw SQL queries.\n */\n@Injectable()\nexport class CountriesService {\n    private readonly MODULE: string;\n\n    /**\n     * Creates an instance of `CountriesService`.\n     * @param {PaginationService} paginationService - Service to handle pagination logic.\n     * @param {PrismaService} prisma - Service to interact with the database.\n     * @param {Query} query - Service for SQL query generation.\n     * @param {UtilsService} utilsService - Service for utility functions, including dynamic query building.\n     */\n    constructor(\n        private readonly paginationService: PaginationService,\n        private readonly prisma: PrismaService,\n        private readonly query: Query,\n        private readonly utilsService: UtilsService\n    ) {\n        this.MODULE = 'country_mas';\n    }\n\n    /**\n     * Creates a new country.\n     * @param {CountryDto} CountryDto - Data required to create a new country.\n     * @returns {Promise} The created country object.\n     * @throws {HttpException} If the country already exists or if an error occurs during creation.\n     */\n    async create(CountryDto: CountryDto): Promise {\n        // Check if the country already exists\n        const find = await this.prisma.executeRawQuery(this.query.findByName(), CountryDto);\n\n        if (find) {\n            throw new HttpException({ message: 'Country already exists' }, HttpStatus.CONFLICT);\n        }\n\n        // Create the country\n        const inserted = await this.prisma.executeRawQuery(this.query.insert(), CountryDto);\n\n        if (inserted && inserted.insertid) {\n            const get = await this.findOne(inserted.insertid);\n            return get as any;\n        } else {\n            throw new HttpException(\n                { message: 'Something went wrong' },\n                HttpStatus.INTERNAL_SERVER_ERROR\n            );\n        }\n    }\n\n    /**\n     * Updates an existing country by its ID.\n     * @param {string} id - The ID of the country to update.\n     * @param {UpdateDto} updateDto - Data to update the country with.\n     * @returns {Promise} The updated country object or null if not found.\n     * @throws {HttpException} If nothing to update is provided or if an error occurs during the update.\n     */\n    async update(id: string, updateDto: UpdateDto): Promise {\n        if (Object.keys(updateDto).length === 0) {\n            throw new HttpException({ message: 'Nothing to update!' }, HttpStatus.BAD_REQUEST);\n        }\n        // check country exits or not\n        const recordExits = await this.findOne(id);\n        if (recordExits) {\n            // Update\n            updateDto.id_country = id;\n            updateDto.updated_at = new Date().toISOString();\n            const updated = await this.prisma.executeRawQuery(this.query.update(), updateDto);\n\n            if (!updated) {\n                throw new HttpException(\n                    { message: 'Something went wrong' },\n                    HttpStatus.INTERNAL_SERVER_ERROR\n                );\n            }\n\n            if (updated[0]?.updatedid) {\n                const get = await this.findOne(id);\n                return get;\n            } else {\n                throw new HttpException(\n                    { message: `${this.MODULE} not found` },\n                    HttpStatus.NOT_FOUND\n                );\n            }\n        } else {\n            throw new HttpException({ message: `country not found` }, HttpStatus.NOT_FOUND);\n        }\n    }\n\n    /**\n     * Retrieves a paginated list of countries.\n     * @param {PaginationQueryDto} paginationQuery - Pagination and filtering parameters.\n     * @returns {Promise>} A paginated list of countries.\n     */\n    async findAll(paginationQuery: PaginationQueryDto): Promise> {\n        const baseQuery = ['ptbl.id_country', 'ptbl.name', 'ptbl.dial_code', 'ptbl.status'];\n        const fromQuery = ` FROM country_mas as ptbl`;\n\n        const fieldConfigs: Record = null;\n\n        const { selectQuery, countQuery } = this.utilsService.buildDynamicQuery(\n            paginationQuery,\n            fieldConfigs,\n            baseQuery,\n            fromQuery,\n            'ptbl.id_country'\n        );\n\n        return this.paginationService.paginate(\n            selectQuery,\n            countQuery,\n            paginationQuery\n        );\n    }\n\n    /**\n     * Deletes a country by its ID.\n     * @param {string} id - The ID of the country to delete.\n     * @returns {Promise} An object indicating the result of the deletion.\n     * @throws {HttpException} If an error occurs during deletion or if the country is not found.\n     */\n    async delete(id: string): Promise {\n        const deleted = await this.prisma.executeRawQuery(this.query.delete(), id);\n\n        if (!deleted) {\n            throw new HttpException(\n                { message: 'Something went wrong' },\n                HttpStatus.INTERNAL_SERVER_ERROR\n            );\n        }\n\n        if (deleted[0]?.deletedid) {\n            return { status: `${this.MODULE} has been successfully deleted` };\n        } else {\n            throw new HttpException({ message: `${this.MODULE} not found` }, HttpStatus.NOT_FOUND);\n        }\n    }\n\n    /*** HELPER METHODS */\n\n    /**\n     * Retrieves a country by its ID.\n     * @param {string} id - The ID of the country to retrieve.\n     * @returns {Promise} The country object.\n     */\n    async findOne(id: string): Promise {\n        const data = await this.prisma.executeRawQuery(this.query.findById(), { id });\n        return data;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Country.html":{"url":"classes/Country.html","title":"class - Country","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Country\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/countries/dto/country.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the Country class, which represents the data structure of a country\nentity used in the application. The Country class is used to describe various details\nabout a country, including its identification, name, ISO codes, and other related attributes.\nThe Country class serves as a Data Transfer Object (DTO) for representing country data.\nIt includes properties such as the country's ID, name, ISO codes, dial code, capital city,\ncontinent, currency details, and timezone information. Each property is annotated with @ApiResponseProperty\nto define its type and provide example values for API documentation purposes.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                abbr\n                            \n                            \n                                capital\n                            \n                            \n                                continent\n                            \n                            \n                                currency_name\n                            \n                            \n                                dial_code\n                            \n                            \n                                id_country\n                            \n                            \n                                iso\n                            \n                            \n                                iso3\n                            \n                            \n                                name\n                            \n                            \n                                offset\n                            \n                            \n                                offset_in_minutes\n                            \n                            \n                                symbol\n                            \n                            \n                                text\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        abbr\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'IST'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:185\n                        \n                    \n\n            \n                \n                    The abbreviation for the timezone.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        capital\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'New Delhi'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:94\n                        \n                    \n\n            \n                \n                    The capital city of the country.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        continent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'Asia'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:107\n                        \n                    \n\n            \n                \n                    The continent where the country is located.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        currency_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'Indian Rupee, US Dollar etc'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:133\n                        \n                    \n\n            \n                \n                    The name of the currency used in the country.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dial_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: '91'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:81\n                        \n                    \n\n            \n                \n                    The international dialing code for the country.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id_country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: '123e4567-e89b-12d3-a456-426614174000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:29\n                        \n                    \n\n            \n                \n                    The unique identifier for the country.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        iso\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'IN'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:55\n                        \n                    \n\n            \n                \n                    The ISO 3166-1 alpha-2 code of the country.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        iso3\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'IND'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:68\n                        \n                    \n\n            \n                \n                    The ISO 3166-1 alpha-3 code of the country.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'India'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:42\n                        \n                    \n\n            \n                \n                    The name of the country.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        offset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: '+5:30'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:159\n                        \n                    \n\n            \n                \n                    The timezone offset from UTC.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        offset_in_minutes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: '270'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:172\n                        \n                    \n\n            \n                \n                    The timezone offset in minutes from UTC.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        symbol\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'currency symbol ₹, $ etc'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:120\n                        \n                    \n\n            \n                \n                    The symbol used for the country's currency.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'Indian Time'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:198\n                        \n                    \n\n            \n                \n                    The descriptive name of the timezone.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'Asia/Mumbai'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/country.ts:146\n                        \n                    \n\n            \n                \n                    The timezone value of the country.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiResponseProperty } from '@nestjs/swagger';\n\n/**\n * @fileoverview\n * This file defines the `Country` class, which represents the data structure of a country\n * entity used in the application. The `Country` class is used to describe various details\n * about a country, including its identification, name, ISO codes, and other related attributes.\n *\n * @module\n * @description\n * The `Country` class serves as a Data Transfer Object (DTO) for representing country data.\n * It includes properties such as the country's ID, name, ISO codes, dial code, capital city,\n * continent, currency details, and timezone information. Each property is annotated with `@ApiResponseProperty`\n * to define its type and provide example values for API documentation purposes.\n */\n\nexport class Country {\n    /**\n     * The unique identifier for the country.\n     *\n     * @type {string}\n     * @example '123e4567-e89b-12d3-a456-426614174000'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: '123e4567-e89b-12d3-a456-426614174000',\n    })\n    id_country: string;\n\n    /**\n     * The name of the country.\n     *\n     * @type {string}\n     * @example 'India'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: 'India',\n    })\n    name: string;\n\n    /**\n     * The ISO 3166-1 alpha-2 code of the country.\n     *\n     * @type {string}\n     * @example 'IN'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: 'IN',\n    })\n    iso: string;\n\n    /**\n     * The ISO 3166-1 alpha-3 code of the country.\n     *\n     * @type {string}\n     * @example 'IND'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: 'IND',\n    })\n    iso3: string;\n\n    /**\n     * The international dialing code for the country.\n     *\n     * @type {string}\n     * @example '91'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: '91',\n    })\n    dial_code: string;\n\n    /**\n     * The capital city of the country.\n     *\n     * @type {string}\n     * @example 'New Delhi'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: 'New Delhi',\n    })\n    capital: string;\n\n    /**\n     * The continent where the country is located.\n     *\n     * @type {string}\n     * @example 'Asia'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: 'Asia',\n    })\n    continent: string;\n\n    /**\n     * The symbol used for the country's currency.\n     *\n     * @type {string}\n     * @example '₹'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: 'currency symbol ₹, $ etc',\n    })\n    symbol: string;\n\n    /**\n     * The name of the currency used in the country.\n     *\n     * @type {string}\n     * @example 'Indian Rupee'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: 'Indian Rupee, US Dollar etc',\n    })\n    currency_name: string;\n\n    /**\n     * The timezone value of the country.\n     *\n     * @type {string}\n     * @example 'Asia/Mumbai'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: 'Asia/Mumbai',\n    })\n    value: string;\n\n    /**\n     * The timezone offset from UTC.\n     *\n     * @type {string}\n     * @example '+5:30'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: '+5:30',\n    })\n    offset: string;\n\n    /**\n     * The timezone offset in minutes from UTC.\n     *\n     * @type {number}\n     * @example 330\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: '270',\n    })\n    offset_in_minutes: number;\n\n    /**\n     * The abbreviation for the timezone.\n     *\n     * @type {string}\n     * @example 'IST'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: 'IST',\n    })\n    abbr: string;\n\n    /**\n     * The descriptive name of the timezone.\n     *\n     * @type {string}\n     * @example 'Indian Time'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: 'Indian Time',\n    })\n    text: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CountryController.html":{"url":"controllers/CountryController.html","title":"controller - CountryController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CountryController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/country_mas/country_mas.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                This file defines the CountryController, which handles HTTP requests related to countries.\nIt provides endpoints to create, update, retrieve, and delete country records.\nThe CountryController is responsible for exposing endpoints that interact with the CountriesService.\nIt uses various HTTP methods to manage country data and handles responses with appropriate HTTP status codes.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createDto: CountryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(undefined)@HttpCode(HttpStatus.OK)@ApiCreatedResponse({type: CountryMas, description: 'Create country'})\n                \n            \n\n            \n                \n                    Defined in src/modules/master/country_mas/country_mas.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createDto\n                                    \n                                                CountryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe data required to create a new country.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The created country object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(undefined)@HttpCode(HttpStatus.OK)@ApiParam({name: 'id_country', type: String})@ApiOkResponse({status: undefined, description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/modules/master/country_mas/country_mas.controller.ts:112\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe ID of the country to be deleted.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        An object indicating the deletion result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(query: PaginationQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(undefined)@HttpCode(HttpStatus.OK)@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/modules/master/country_mas/country_mas.controller.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                PaginationQueryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe pagination and filtering parameters.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        A paginated list of countries.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateDto: UpdateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(undefined)@HttpCode(HttpStatus.OK)@ApiParam({name: 'id_country', type: String})@ApiOkResponse({type: CountryMas, description: 'Update Country'})\n                \n            \n\n            \n                \n                    Defined in src/modules/master/country_mas/country_mas.controller.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe ID of the country to be updated.\n\n\n                                    \n                                \n                                \n                                    updateDto\n                                    \n                                                UpdateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe data to update the country with.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The updated country object or null if not found.\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    HttpCode,\n    HttpStatus,\n    Param,\n    ParseUUIDPipe,\n    Patch,\n    Post,\n    Query,\n} from '@nestjs/common';\nimport { ApiTags, ApiOkResponse, ApiCreatedResponse, ApiParam } from '@nestjs/swagger';\n\nimport { PaginationResponse, PaginationResponseDto } from '@utils/dto/pagination-response.dto';\nimport { PaginationQueryDto } from '@utils/dto/pagination.dto';\n\nimport { CountriesService } from './country_mas.service';\nimport { CountryMas } from './dto/country_mas.dto';\nimport { CountryDto } from './dto/create.dto';\nimport { UpdateDto } from './dto/update.dto';\n\nconst modules = 'country_mas';\n\n/**\n * @fileoverview\n * This file defines the `CountryController`, which handles HTTP requests related to countries.\n * It provides endpoints to create, update, retrieve, and delete country records.\n *\n * @module\n * @description\n * The `CountryController` is responsible for exposing endpoints that interact with the `CountriesService`.\n * It uses various HTTP methods to manage country data and handles responses with appropriate HTTP status codes.\n */\n\n@ApiTags('Country_mas')\n@Controller()\nexport class CountryController {\n    constructor(private readonly countriesService: CountriesService) {}\n\n    /**\n     * @route POST /countries\n     * @description Create a new country.\n     * @param {CountryDto} createDto - The data required to create a new country.\n     * @returns {Promise} The created country object.\n     */\n\n    @Post(`${modules}`)\n    @HttpCode(HttpStatus.OK)\n    @ApiCreatedResponse({\n        type: CountryMas,\n        description: 'Create country',\n    })\n    async create(@Body() createDto: CountryDto): Promise {\n        const created = await this.countriesService.create(createDto);\n        return created;\n    }\n\n    /**\n     * @route PATCH /countries/:id_country\n     * @description Update an existing country by its ID.\n     * @param {string} id - The ID of the country to be updated.\n     * @param {UpdateDto} updateDto - The data to update the country with.\n     * @returns {Promise} The updated country object or null if not found.\n     */\n\n    @Patch(`${modules}/:id_country`)\n    @HttpCode(HttpStatus.OK)\n    @ApiParam({ name: 'id_country', type: String })\n    @ApiOkResponse({\n        type: CountryMas,\n        description: 'Update Country',\n    })\n    async update(\n        @Param('id_country', ParseUUIDPipe) id: string,\n        @Body() updateDto: UpdateDto\n    ): Promise {\n        const updated = await this.countriesService.update(id, updateDto);\n        return updated;\n    }\n\n    /**\n     * @route GET /countries\n     * @description Retrieve a list of countries with pagination.\n     * @param {PaginationQueryDto} query - The pagination and filtering parameters.\n     * @returns {Promise>} A paginated list of countries.\n     */\n\n    @Get(`${modules}`)\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ type: PaginationResponse(CountryMas) })\n    async findAll(@Query() query: PaginationQueryDto): Promise> {\n        const get_all = await this.countriesService.findAll(query);\n        return get_all;\n    }\n\n    /**\n     * @route DELETE /countries/:id_country\n     * @description Delete a country by its ID.\n     * @param {string} id - The ID of the country to be deleted.\n     * @returns {Promise} An object indicating the deletion result.\n     */\n\n    @Delete(`${modules}/:id_country`)\n    @HttpCode(HttpStatus.OK)\n    @ApiParam({ name: 'id_country', type: String })\n    @ApiOkResponse({\n        status: HttpStatus.OK,\n        description: `${modules} has been successfully deleted.`,\n    })\n    async delete(@Param('id_country', ParseUUIDPipe) id: string): Promise {\n        const deleted = await this.countriesService.delete(id);\n        return deleted;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CountryDto.html":{"url":"classes/CountryDto.html","title":"class - CountryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CountryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/country_mas/dto/create.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the CountryDto class, which represents the data transfer object (DTO)\nused for creating a new country record. It includes validation rules and transformation logic\nfor the properties of the country.\nThe CountryDto class ensures that the data provided for creating a country adheres to\nspecified validation rules and formats. It uses decorators from class-validator for validation\nand class-transformer for transforming input data.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                dial_code\n                            \n                            \n                                    Optional\n                                id_country\n                            \n                            \n                                name\n                            \n                            \n                                    Optional\n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        dial_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@MaxLength(5)@ApiProperty({type: String, description: 'Country Dial Code', example: '+91', maxLength: 5})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/country_mas/dto/create.dto.ts:35\n                        \n                    \n\n            \n                \n                    Country Dial Code, which must be uppercase and 5 characters long\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id_country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude({toPlainOnly: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/country_mas/dto/create.dto.ts:59\n                        \n                    \n\n            \n                \n                    The unique identifier for the country.\nThis property is excluded from the plain representation of the object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@MaxLength(80)@ApiProperty({type: String, description: 'Name of the country', example: 'India', maxLength: 80})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/country_mas/dto/create.dto.ts:52\n                        \n                    \n\n            \n                \n                    Name of the country.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude({toPlainOnly: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/country_mas/dto/create.dto.ts:62\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nimport { Exclude } from 'class-transformer';\nimport { IsDefined, IsNotEmpty, IsString, MaxLength } from 'class-validator';\n\n/**\n * @fileoverview\n * This file defines the `CountryDto` class, which represents the data transfer object (DTO)\n * used for creating a new country record. It includes validation rules and transformation logic\n * for the properties of the country.\n *\n * @module\n * @description\n * The `CountryDto` class ensures that the data provided for creating a country adheres to\n * specified validation rules and formats. It uses decorators from `class-validator` for validation\n * and `class-transformer` for transforming input data.\n */\n\nexport class CountryDto {\n    /**\n     * Country Dial Code, which must be uppercase and 5 characters long\n     * @example '+91'\n     */\n\n    @IsDefined()\n    @IsNotEmpty()\n    @IsString()\n    @MaxLength(5)\n    @ApiProperty({\n        type: String,\n        description: 'Country Dial Code',\n        example: '+91',\n        maxLength: 5,\n    })\n    dial_code: string;\n\n    /**\n     * Name of the country.\n     * @example 'India'\n     */\n\n    @IsDefined()\n    @IsNotEmpty()\n    @IsString()\n    @MaxLength(80)\n    @ApiProperty({\n        type: String,\n        description: 'Name of the country',\n        example: 'India',\n        maxLength: 80,\n    })\n    name: string;\n\n    /**\n     * The unique identifier for the country.\n     * This property is excluded from the plain representation of the object.\n     */\n    @Exclude({ toPlainOnly: true })\n    id_country?: string;\n\n    @Exclude({ toPlainOnly: true })\n    updated_at?: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CountryMas.html":{"url":"classes/CountryMas.html","title":"class - CountryMas","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CountryMas\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/country_mas/dto/country_mas.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the Country class, which represents the data structure of a country entity.\nIt includes properties that describe the country and uses decorators for Swagger documentation.\nThe Country class is used to define the structure of a country object, including its dial code, name, The class also uses decorators\nto configure how the properties should be documented and transformed.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                dial_code\n                            \n                            \n                                id_country\n                            \n                            \n                                name\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        dial_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: '+91'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/country_mas/dto/country_mas.dto.ts:45\n                        \n                    \n\n            \n                \n                    The dial code of the country .\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id_country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: '123e4567-e89b-12d3-a456-426614174000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/country_mas/dto/country_mas.dto.ts:25\n                        \n                    \n\n            \n                \n                    The unique identifier for the country.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'India'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/country_mas/dto/country_mas.dto.ts:35\n                        \n                    \n\n            \n                \n                    The name of the country.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: Number, example: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/country_mas/dto/country_mas.dto.ts:55\n                        \n                    \n\n            \n                \n                    The Status of the country .\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiResponseProperty } from '@nestjs/swagger';\n\n/**\n * @fileoverview\n * This file defines the `Country` class, which represents the data structure of a country entity.\n * It includes properties that describe the country and uses decorators for Swagger documentation.\n *\n * @module\n * @description\n * The `Country` class is used to define the structure of a country object, including its dial code, name, The class also uses decorators\n * to configure how the properties should be documented and transformed.\n */\nexport class CountryMas {\n    /**\n     * The unique identifier for the country.\n     *\n     * @type {string}\n     * @example '123e4567-e89b-12d3-a456-426614174000'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: '123e4567-e89b-12d3-a456-426614174000',\n    })\n    id_country: string;\n\n    /**\n     * The name of the country.\n     * @example 'India'\n     */\n    @ApiResponseProperty({\n        type: String,\n        example: 'India',\n    })\n    name: string;\n\n    /**\n     * The dial code of the country .\n     * @example '+91'\n     */\n    @ApiResponseProperty({\n        type: String,\n        example: '+91',\n    })\n    dial_code: string;\n\n    /**\n     * The Status of the country .\n     * @example 1\n     */\n    @ApiResponseProperty({\n        type: Number,\n        example: 1,\n    })\n    status: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CountryMasModule.html":{"url":"modules/CountryMasModule.html","title":"module - CountryMasModule","body":"\n                   \n\n\n\n\n    Modules\n    CountryMasModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CountryMasModule\n\n\n\ncluster_CountryMasModule_exports\n\n\n\ncluster_CountryMasModule_providers\n\n\n\n\nCountriesService \n\nCountriesService \n\n\n\nCountryMasModule\n\nCountryMasModule\n\nCountriesService  -->\n\nCountryMasModule->CountriesService \n\n\n\n\n\nCountriesService\n\nCountriesService\n\nCountryMasModule -->\n\nCountriesService->CountryMasModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/master/country_mas/country_mas.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            This file defines the CountryMasModule, which bundles the CountryController and CountriesService together.\nThe CountryMasModule is responsible for handling country-related operations. It provides the necessary controllers and services to manage countries.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CountriesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CountryController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CountriesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { CountryController } from './country_mas.controller';\nimport { CountriesService } from './country_mas.service';\nimport { Query } from './query';\n\n/**\n * @fileoverview\n * This file defines the `CountryMasModule`, which bundles the `CountryController` and `CountriesService` together.\n *\n * @module\n * @description\n * The `CountryMasModule` is responsible for handling country-related operations. It provides the necessary controllers and services to manage countries.\n */\n@Module({\n    controllers: [CountryController],\n    providers: [CountriesService, Query],\n    exports: [CountriesService],\n})\nexport class CountryMasModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCountryDto.html":{"url":"classes/CreateCountryDto.html","title":"class - CreateCountryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCountryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/countries/dto/create.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the CountryDto class, which represents the data transfer object (DTO)\nused for creating a new Country record. It includes validation rules and transformation logic\nfor the properties of the Country.\nThe CountryDto class ensures that the data provided for creating a Country adheres to\nspecified validation rules and formats. It uses decorators from class-validator for validation\nand class-transformer for transforming input data.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                capital\n                            \n                            \n                                continent\n                            \n                            \n                                dial_code\n                            \n                            \n                                    Optional\n                                id_country\n                            \n                            \n                                id_currency\n                            \n                            \n                                id_timezone\n                            \n                            \n                                iso\n                            \n                            \n                                iso3\n                            \n                            \n                                name\n                            \n                            \n                                nice_name\n                            \n                            \n                                num_code\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        capital\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({type: String, example: 'New Delhi'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/create.dto.ts:140\n                        \n                    \n\n            \n                \n                    The capital city of the country.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        continent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({type: String, example: 'Asia'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/create.dto.ts:125\n                        \n                    \n\n            \n                \n                    The continent where the country is located.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dial_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({type: String, example: '91'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/create.dto.ts:110\n                        \n                    \n\n            \n                \n                    The international dialing code for the country.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id_country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude({toPlainOnly: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/create.dto.ts:173\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id_currency\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({type: String, example: '123e4567-e89b-12d3-a456-426614174000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/create.dto.ts:155\n                        \n                    \n\n            \n                \n                    The unique identifier for the currency.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id_timezone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({type: String, example: '80d3aa38-6b64-424a-a95b-383e6490f5d5'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/create.dto.ts:170\n                        \n                    \n\n            \n                \n                    The unique identifier for the timezone.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        iso\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Transform(upperCaseTransformer)@IsDefined()@IsNotEmpty()@IsString()@MaxLength(2)@ApiProperty({type: String, example: 'IN'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/create.dto.ts:51\n                        \n                    \n\n            \n                \n                    The ISO 3166-1 alpha-2 code of the country.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        iso3\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Transform(upperCaseTransformer)@IsNotEmpty()@IsString()@MaxLength(3)@ApiProperty({type: String, example: 'IND'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/create.dto.ts:82\n                        \n                    \n\n            \n                \n                    The ISO 3166-1 alpha-3 code of the country.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@ApiProperty({type: String, example: 'India'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/create.dto.ts:34\n                        \n                    \n\n            \n                \n                    The name of the country.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nice_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@ApiProperty({type: String, example: 'India'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/create.dto.ts:66\n                        \n                    \n\n            \n                \n                    The nice name of the country.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        num_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({type: String, example: '91'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/create.dto.ts:96\n                        \n                    \n\n            \n                \n                    The international  code for the country.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nimport { Exclude, Transform } from 'class-transformer';\nimport { IsDefined, IsNotEmpty, IsString, MaxLength } from 'class-validator';\n\nimport { upperCaseTransformer } from '@app/utils/transformers/upper-case.transformer';\n\n/**\n * @fileoverview\n * This file defines the `CountryDto` class, which represents the data transfer object (DTO)\n * used for creating a new Country record. It includes validation rules and transformation logic\n * for the properties of the Country.\n *\n * @module\n * @description\n * The `CountryDto` class ensures that the data provided for creating a Country adheres to\n * specified validation rules and formats. It uses decorators from `class-validator` for validation\n * and `class-transformer` for transforming input data.\n */\nexport class CreateCountryDto {\n    /**\n     * The name of the country.\n     *\n     * @type {string}\n     * @example 'India'\n     */\n    @IsDefined()\n    @IsNotEmpty()\n    @IsString()\n    @ApiProperty({\n        type: String,\n        example: 'India',\n    })\n    name: string;\n\n    /**\n     * The ISO 3166-1 alpha-2 code of the country.\n     *\n     * @type {string}\n     * @example 'IN'\n     */\n    @Transform(upperCaseTransformer)\n    @IsDefined()\n    @IsNotEmpty()\n    @IsString()\n    @MaxLength(2)\n    @ApiProperty({\n        type: String,\n        example: 'IN',\n    })\n    iso: string;\n\n    /**\n     * The nice name of the country.\n     *\n     * @type {string}\n     * @example 'India'\n     */\n    @IsDefined()\n    @IsNotEmpty()\n    @IsString()\n    @ApiProperty({\n        type: String,\n        example: 'India',\n    })\n    nice_name: string;\n\n    /**\n     * The ISO 3166-1 alpha-3 code of the country.\n     *\n     * @type {string}\n     * @example 'IND'\n     */\n    @Transform(upperCaseTransformer)\n    @IsNotEmpty()\n    @IsString()\n    @MaxLength(3)\n    @ApiProperty({\n        type: String,\n        example: 'IND',\n    })\n    iso3: string;\n\n    /**\n     * The international  code for the country.\n     *\n     * @type {string}\n     * @example '91'\n     */\n    @IsNotEmpty()\n    @IsString()\n    @ApiProperty({\n        type: String,\n        example: '91',\n    })\n    num_code: string;\n\n    /**\n     * The international dialing code for the country.\n     *\n     * @type {string}\n     * @example '91'\n     */\n    @IsNotEmpty()\n    @IsString()\n    @ApiProperty({\n        type: String,\n        example: '91',\n    })\n    dial_code: string;\n\n    /**\n     * The continent where the country is located.\n     *\n     * @type {string}\n     * @example 'Asia'\n     */\n\n    @IsNotEmpty()\n    @IsString()\n    @ApiProperty({\n        type: String,\n        example: 'Asia',\n    })\n    continent: string;\n\n    /**\n     * The capital city of the country.\n     *\n     * @type {string}\n     * @example 'New Delhi'\n     */\n\n    @IsNotEmpty()\n    @IsString()\n    @ApiProperty({\n        type: String,\n        example: 'New Delhi',\n    })\n    capital: string;\n\n    /**\n     * The unique identifier for the currency.\n     *\n     * @type {string}\n     * @example '123e4567-e89b-12d3-a456-426614174000'\n     */\n\n    @IsNotEmpty()\n    @IsString()\n    @ApiProperty({\n        type: String,\n        example: '123e4567-e89b-12d3-a456-426614174000',\n    })\n    id_currency: string;\n\n    /**\n     * The unique identifier for the timezone.\n     *\n     * @type {string}\n     * @example '80d3aa38-6b64-424a-a95b-383e6490f5d5'\n     */\n\n    @IsNotEmpty()\n    @IsString()\n    @ApiProperty({\n        type: String,\n        example: '80d3aa38-6b64-424a-a95b-383e6490f5d5',\n    })\n    id_timezone: string;\n\n    @Exclude({ toPlainOnly: true })\n    id_country?: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateDto.html":{"url":"classes/CreateDto.html","title":"class - CreateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/currencies/dto/create.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the CreateDto class, which represents the data transfer object (DTO)\nused for creating a new currency record. It includes validation rules and transformation logic\nfor the properties of the currency.\nThe CreateDto class ensures that the data provided for creating a currency adheres to\nspecified validation rules and formats. It uses decorators from class-validator for validation\nand class-transformer for transforming input data.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                code\n                            \n                            \n                                    Readonly\n                                decimal_digits\n                            \n                            \n                                name\n                            \n                            \n                                name_plural\n                            \n                            \n                                    Readonly\n                                rounding\n                            \n                            \n                                symbol\n                            \n                            \n                                symbol_native\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Transform(upperCaseTransformer)@IsDefined()@IsNotEmpty()@IsString()@MaxLength(3)@ApiProperty({type: String, description: 'Currency Code', example: 'INR', maxLength: 3})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/create.dto.ts:38\n                        \n                    \n\n            \n                \n                    Currency code, which must be uppercase and 3 characters long.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        decimal_digits\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@Type(undefined)@IsNumber()@Min(0)@ApiProperty({type: Number, description: 'Decimal digits', example: '2'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/create.dto.ts:122\n                        \n                    \n\n            \n                \n                    Number of decimal digits used for the currency.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@MaxLength(80)@ApiProperty({type: String, description: 'name of currency', example: 'Indian Rupee', maxLength: 80})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/create.dto.ts:55\n                        \n                    \n\n            \n                \n                    Name of the currency.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name_plural\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@MaxLength(80)@ApiProperty({type: String, description: 'plural name of currency', example: 'Indian rupees', maxLength: 80})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/create.dto.ts:72\n                        \n                    \n\n            \n                \n                    Plural name of the currency.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        rounding\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@Type(undefined)@IsNumber()@Min(0)@ApiProperty({type: Number, description: 'Rounding', example: '0'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/create.dto.ts:138\n                        \n                    \n\n            \n                \n                    Rounding precision used for the currency.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        symbol\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@MaxLength(6)@ApiProperty({type: String, description: 'Symbol of currency', example: '₹', maxLength: 6})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/create.dto.ts:89\n                        \n                    \n\n            \n                \n                    Symbol of the currency, which can be up to 6 characters long.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        symbol_native\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@MaxLength(10)@ApiProperty({type: String, description: 'native symbol of currency', example: '₹', maxLength: 10})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/create.dto.ts:106\n                        \n                    \n\n            \n                \n                    Native symbol of the currency, which can be up to 10 characters long.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nimport { Transform, Type } from 'class-transformer';\nimport { IsDefined, IsNotEmpty, IsNumber, IsString, Min, MaxLength } from 'class-validator';\n\nimport { upperCaseTransformer } from '@utils/transformers/upper-case.transformer';\n\n/**\n * @fileoverview\n * This file defines the `CreateDto` class, which represents the data transfer object (DTO)\n * used for creating a new currency record. It includes validation rules and transformation logic\n * for the properties of the currency.\n *\n * @module\n * @description\n * The `CreateDto` class ensures that the data provided for creating a currency adheres to\n * specified validation rules and formats. It uses decorators from `class-validator` for validation\n * and `class-transformer` for transforming input data.\n */\n\nexport class CreateDto {\n    /**\n     * Currency code, which must be uppercase and 3 characters long.\n     * @example 'INR'\n     */\n\n    @Transform(upperCaseTransformer)\n    @IsDefined()\n    @IsNotEmpty()\n    @IsString()\n    @MaxLength(3)\n    @ApiProperty({\n        type: String,\n        description: 'Currency Code',\n        example: 'INR',\n        maxLength: 3,\n    })\n    readonly code: string;\n\n    /**\n     * Name of the currency.\n     * @example 'Indian Rupee'\n     */\n\n    @IsDefined()\n    @IsNotEmpty()\n    @IsString()\n    @MaxLength(80)\n    @ApiProperty({\n        type: String,\n        description: 'name of currency',\n        example: 'Indian Rupee',\n        maxLength: 80,\n    })\n    name: string;\n\n    /**\n     * Plural name of the currency.\n     * @example 'Indian rupees'\n     */\n\n    @IsDefined()\n    @IsNotEmpty()\n    @IsString()\n    @MaxLength(80)\n    @ApiProperty({\n        type: String,\n        description: 'plural name of currency',\n        example: 'Indian rupees',\n        maxLength: 80,\n    })\n    name_plural: string;\n\n    /**\n     * Symbol of the currency, which can be up to 6 characters long.\n     * @example '₹'\n     */\n\n    @IsDefined()\n    @IsNotEmpty()\n    @IsString()\n    @MaxLength(6)\n    @ApiProperty({\n        type: String,\n        description: 'Symbol of currency',\n        example: '₹',\n        maxLength: 6,\n    })\n    symbol: string;\n\n    /**\n     * Native symbol of the currency, which can be up to 10 characters long.\n     * @example '₹'\n     */\n\n    @IsDefined()\n    @IsNotEmpty()\n    @IsString()\n    @MaxLength(10)\n    @ApiProperty({\n        type: String,\n        description: 'native symbol of currency',\n        example: '₹',\n        maxLength: 10,\n    })\n    symbol_native: string;\n\n    /**\n     * Number of decimal digits used for the currency.\n     * @example 2\n     */\n\n    @IsDefined()\n    @Type(() => Number)\n    @IsNumber()\n    @Min(0)\n    @ApiProperty({\n        type: Number,\n        description: 'Decimal digits',\n        example: '2',\n    })\n    readonly decimal_digits: number;\n\n    /**\n     * Rounding precision used for the currency.\n     * @example 0\n     */\n\n    @IsDefined()\n    @Type(() => Number)\n    @IsNumber()\n    @Min(0)\n    @ApiProperty({\n        type: Number,\n        description: 'Rounding',\n        example: '0',\n    })\n    readonly rounding: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CurrenciesController.html":{"url":"controllers/CurrenciesController.html","title":"controller - CurrenciesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CurrenciesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/currencies/currencies.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                This file defines the CurrenciesController, which handles HTTP requests related to currencies.\nIt provides endpoints to create, update, retrieve, and delete currencies.\nThe CurrenciesController is responsible for exposing endpoints that interact with the CurrenciesService.\nIt uses various HTTP methods to manage currency data and handles responses with appropriate HTTP status codes.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createDto: CreateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(undefined)@HttpCode(HttpStatus.OK)@ApiCreatedResponse({type: Currency, description: 'Create currency'})\n                \n            \n\n            \n                \n                    Defined in src/modules/currencies/currencies.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createDto\n                                    \n                                                CreateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe data required to create a new currency.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The created currency object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(undefined)@HttpCode(HttpStatus.OK)@ApiParam({name: 'id_currency', type: String})@ApiOkResponse({status: undefined, description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/modules/currencies/currencies.controller.ts:113\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe ID of the currency to be deleted.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        An object indicating the deletion result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(query: PaginationQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(undefined)@HttpCode(HttpStatus.OK)@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/modules/currencies/currencies.controller.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                PaginationQueryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe pagination and filtering parameters.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        A paginated list of currencies.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateDto: UpdateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(undefined)@HttpCode(HttpStatus.OK)@ApiParam({name: 'id_currency', type: String})@ApiOkResponse({type: Currency, description: 'Update Currency'})\n                \n            \n\n            \n                \n                    Defined in src/modules/currencies/currencies.controller.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe ID of the currency to be updated.\n\n\n                                    \n                                \n                                \n                                    updateDto\n                                    \n                                                UpdateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe data to update the currency with.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The updated currency object or null if not found.\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    HttpCode,\n    HttpStatus,\n    Param,\n    Patch,\n    Post,\n    Query,\n} from '@nestjs/common';\nimport { ApiTags, ApiOkResponse, ApiCreatedResponse, ApiParam } from '@nestjs/swagger';\n\nimport { PaginationResponse, PaginationResponseDto } from '@utils/dto/pagination-response.dto';\nimport { PaginationQueryDto } from '@utils/dto/pagination.dto';\n\nimport { CurrenciesService } from './currencies.service';\nimport { CreateDto } from './dto/create.dto';\nimport { Currency } from './dto/currency';\nimport { UpdateDto } from './dto/update.dto';\n\nconst modules = 'currencies';\n\n/**\n * @fileoverview\n * This file defines the `CurrenciesController`, which handles HTTP requests related to currencies.\n * It provides endpoints to create, update, retrieve, and delete currencies.\n *\n * @module\n * @description\n * The `CurrenciesController` is responsible for exposing endpoints that interact with the `CurrenciesService`.\n * It uses various HTTP methods to manage currency data and handles responses with appropriate HTTP status codes.\n */\n\n@ApiTags('Currencies')\n@Controller()\nexport class CurrenciesController {\n    constructor(private readonly currenciesService: CurrenciesService) {}\n\n    /**\n     * @route POST /currencies\n     * @description Create a new currency.\n     * @param {CreateDto} createDto - The data required to create a new currency.\n     * @returns {Promise} The created currency object.\n     */\n\n    @Post(`${modules}`)\n    @HttpCode(HttpStatus.OK)\n    @ApiCreatedResponse({\n        type: Currency,\n        description: 'Create currency',\n    })\n    async create(@Body() createDto: CreateDto): Promise {\n        const created = await this.currenciesService.create(createDto);\n        return created;\n    }\n\n    /**\n     * @route PATCH /currencies/:id_currency\n     * @description Update an existing currency by its ID.\n     * @param {string} id - The ID of the currency to be updated.\n     * @param {UpdateDto} updateDto - The data to update the currency with.\n     * @returns {Promise} The updated currency object or null if not found.\n     */\n\n    @Patch(`${modules}/:id_currency`)\n    @HttpCode(HttpStatus.OK)\n    @ApiParam({ name: 'id_currency', type: String })\n    @ApiOkResponse({\n        type: Currency,\n        description: 'Update Currency',\n    })\n    async update(\n        @Param('id_currency') id: string,\n        @Body() updateDto: UpdateDto\n    ): Promise {\n        console.log('UPDATE', id, updateDto);\n        const updated = await this.currenciesService.update(id, updateDto);\n        return updated;\n    }\n\n    /**\n     * @route GET /currencies\n     * @description Retrieve a list of currencies with pagination.\n     * @param {PaginationQueryDto} query - The pagination and filtering parameters.\n     * @returns {Promise>} A paginated list of currencies.\n     */\n\n    @Get(`${modules}`)\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ type: PaginationResponse(Currency) })\n    async findAll(@Query() query: PaginationQueryDto): Promise> {\n        const get_all = await this.currenciesService.findAll(query);\n\n        return get_all;\n    }\n\n    /**\n     * @route DELETE /v1/currencies/:id_currency\n     * @description Delete a currency by its ID.\n     * @param {string} id - The ID of the currency to be deleted.\n     * @returns {Promise} An object indicating the deletion result.\n     */\n\n    @Delete(`${modules}/:id_currency`)\n    @HttpCode(HttpStatus.OK)\n    @ApiParam({ name: 'id_currency', type: String })\n    @ApiOkResponse({\n        status: HttpStatus.OK,\n        description: `${modules} has been successfully deleted.`,\n    })\n    async delete(@Param('id_currency') id: string): Promise {\n        const deleted = await this.currenciesService.delete(id);\n\n        return deleted;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CurrenciesModule.html":{"url":"modules/CurrenciesModule.html","title":"module - CurrenciesModule","body":"\n                   \n\n\n\n\n    Modules\n    CurrenciesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CurrenciesModule\n\n\n\ncluster_CurrenciesModule_providers\n\n\n\n\nCurrenciesService\n\nCurrenciesService\n\n\n\nCurrenciesModule\n\nCurrenciesModule\n\nCurrenciesModule -->\n\nCurrenciesService->CurrenciesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/currencies/currencies.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            This file defines the CurrenciesModule, which is responsible for managing currency-related functionalities.\nThe CurrenciesModule bundles together the controller and service related to currencies,\nalong with any other necessary providers.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CurrenciesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CurrenciesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { CurrenciesController } from './currencies.controller';\nimport { CurrenciesService } from './currencies.service';\nimport { Query } from './query';\n\n/**\n * @fileoverview\n * This file defines the `CurrenciesModule`, which is responsible for managing currency-related functionalities.\n *\n * @module\n * @description\n * The `CurrenciesModule` bundles together the controller and service related to currencies,\n * along with any other necessary providers.\n */\n@Module({\n    controllers: [CurrenciesController],\n    providers: [CurrenciesService, Query],\n})\nexport class CurrenciesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CurrenciesService.html":{"url":"injectables/CurrenciesService.html","title":"injectable - CurrenciesService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CurrenciesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/currencies/currencies.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the CurrenciesService class, which provides methods to manage currency data.\nIt includes operations for creating, updating, retrieving, and deleting currencies.\nThe CurrenciesService class is responsible for handling business logic related to currencies.\nIt interacts with the database through the PrismaService and performs various operations using raw SQL queries.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                MODULE\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(paginationService: PaginationService, prisma: PrismaService, query: Query, utilsService: UtilsService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/currencies/currencies.service.ts:27\n                            \n                        \n\n                \n                    \n                            Creates an instance of CurrenciesService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        paginationService\n                                                  \n                                                        \n                                                                        PaginationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to handle pagination logic.\n\n\n                                                        \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to interact with the database.\n\n\n                                                        \n                                                \n                                                \n                                                        query\n                                                  \n                                                        \n                                                                        Query\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for SQL query generation.\n\n\n                                                        \n                                                \n                                                \n                                                        utilsService\n                                                  \n                                                        \n                                                                        UtilsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for utility functions, including dynamic query building.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createDto: CreateDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/currencies/currencies.service.ts:53\n                \n            \n\n\n            \n                \n                    Creates a new currency.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createDto\n                                    \n                                                CreateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nData required to create a new currency.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The created currency object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/currencies/currencies.service.ts:175\n                \n            \n\n\n            \n                \n                    Deletes a currency by its ID.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe ID of the currency to delete.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        An object indicating the result of the deletion.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(paginationQuery: PaginationQueryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/currencies/currencies.service.ts:136\n                \n            \n\n\n            \n                \n                    Retrieves a paginated list of currencies.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    paginationQuery\n                                    \n                                                PaginationQueryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nPagination and filtering parameters.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        A paginated list of currencies.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/currencies/currencies.service.ts:201\n                \n            \n\n\n            \n                \n                    Retrieves a currency by its ID.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, payload: DeepPartial)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/currencies/currencies.service.ts:86\n                \n            \n\n\n            \n                \n                    Updates an existing currency by its ID.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe ID of the currency to update.\n\n\n                                    \n                                \n                                \n                                    payload\n                                    \n                                                DeepPartial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nData to update the currency with.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The updated currency object or null if not found.\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        MODULE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/currencies.service.ts:27\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, HttpException, HttpStatus } from '@nestjs/common';\n\nimport { PaginationService } from '@services/pagination.service';\nimport { PrismaService } from '@services/prisma.service';\nimport { UtilsService } from '@services/util.service';\nimport { PaginationResponseDto } from '@utils/dto/pagination-response.dto';\nimport { PaginationQueryDto } from '@utils/dto/pagination.dto';\nimport { DeepPartial } from '@utils/types/deep-partial.type';\nimport { IPaginationFieldConfig } from '@utils/types/pagination-options';\n\nimport { CreateDto } from './dto/create.dto';\nimport { Currency } from './dto/currency';\nimport { Query } from './query';\n\n/**\n * @fileoverview\n * This file defines the `CurrenciesService` class, which provides methods to manage currency data.\n * It includes operations for creating, updating, retrieving, and deleting currencies.\n *\n * @module\n * @description\n * The `CurrenciesService` class is responsible for handling business logic related to currencies.\n * It interacts with the database through the `PrismaService` and performs various operations using raw SQL queries.\n */\n@Injectable()\nexport class CurrenciesService {\n    private readonly MODULE: string;\n\n    /**\n     * Creates an instance of `CurrenciesService`.\n     * @param {PaginationService} paginationService - Service to handle pagination logic.\n     * @param {PrismaService} prisma - Service to interact with the database.\n     * @param {Query} query - Service for SQL query generation.\n     * @param {UtilsService} utilsService - Service for utility functions, including dynamic query building.\n     */\n\n    constructor(\n        private readonly paginationService: PaginationService,\n        private readonly prisma: PrismaService,\n        private readonly query: Query,\n        private readonly utilsService: UtilsService\n    ) {\n        this.MODULE = 'currency';\n    }\n\n    /**\n     * Creates a new currency.\n     * @param {CreateDto} createDto - Data required to create a new currency.\n     * @returns {Promise} The created currency object.\n     * @throws {HttpException} If the currency code already exists or if an error occurs during creation.\n     */\n\n    async create(createDto: CreateDto): Promise {\n        // Check Code for prevent duplicate\n        const find = await this.prisma.executeRawQuery(this.query.findByCode(), createDto);\n\n        if (find) {\n            throw new HttpException({ message: 'CODE ALREADY EXIST' }, HttpStatus.CONFLICT);\n        }\n\n        // Create\n        const inserted = await this.prisma.executeRawQuery(this.query.insert(), createDto, [\n            'name',\n        ]);\n\n        if (inserted && inserted.insertid) {\n            const get = await this.findOne(inserted.insertid);\n\n            return get as any;\n        } else {\n            throw new HttpException(\n                { message: 'Something went wrong' },\n                HttpStatus.INTERNAL_SERVER_ERROR\n            );\n        }\n    }\n\n    /**\n     * Updates an existing currency by its ID.\n     * @param {string} id - The ID of the currency to update.\n     * @param {DeepPartial} payload - Data to update the currency with.\n     * @returns {Promise} The updated currency object or null if not found.\n     * @throws {HttpException} If nothing to update is provided, if the code already exists, or if an error occurs during the update.\n     */\n\n    async update(id: string, payload: DeepPartial): Promise {\n        if (Object.keys(payload).length === 0) {\n            throw new HttpException(\n                {\n                    message: 'Nothing to be update!',\n                },\n                HttpStatus.BAD_REQUEST\n            );\n        }\n        if (payload.code) {\n            // Check Code\n\n            const find = await this.prisma.executeRawQuery(this.query.findByCode(id), payload);\n\n            if (find) {\n                throw new HttpException(\n                    {\n                        message: 'Code already exists!',\n                    },\n                    HttpStatus.CONFLICT\n                );\n            }\n        }\n\n        payload.id = id;\n\n        // Update\n        const updated = await this.prisma.executeRawQuery(this.query.update(), payload, ['name']);\n\n        if (!updated) {\n            throw new HttpException(\n                { message: 'Something went wrong' },\n                HttpStatus.INTERNAL_SERVER_ERROR\n            );\n        }\n\n        if (updated[0]?.updatedid) {\n            const get = await this.findOne(id);\n            return get;\n        } else {\n            throw new HttpException({ message: `${this.MODULE} not found` }, HttpStatus.NOT_FOUND);\n        }\n    }\n\n    /**\n     * Retrieves a paginated list of currencies.\n     * @param {PaginationQueryDto} paginationQuery - Pagination and filtering parameters.\n     * @returns {Promise>} A paginated list of currencies.\n     */\n\n    async findAll(paginationQuery: PaginationQueryDto): Promise> {\n        const baseFields = this.query.pgBaseSelectField();\n        const fromQuery = this.query.pgBaseQuery();\n\n        const fieldConfigs: Record = null;\n\n        const { selectQuery, countQuery } = this.utilsService.buildDynamicQuery(\n            paginationQuery,\n            fieldConfigs,\n            baseFields,\n            fromQuery,\n            'ptbl.id_currency'\n        );\n\n        return this.paginationService.paginate(selectQuery, countQuery, paginationQuery);\n\n        // const { joinTables, selectFields, filterQuery, sortByQuery } =\n        //     this.utilsService.buildDynamicQuery(paginationQuery, fieldConfigs);\n\n        // const selectQuery = `SELECT ${baseFields.join(', ')} ${selectFields} ${fromQuery} ${joinTables.join(' ')} ${filterQuery} ${sortByQuery}`;\n        // const countQuery = `SELECT count(*) ${fromQuery} ${joinTables.join(' ')} ${filterQuery}`;\n\n        // const { selectQuery, countQuery } = this.utilsService.queryStatements(\n        //     baseFields,\n        //     selectFields,\n        //     fromQuery,\n        //     joinTables,\n        //     filterQuery,\n        //     sortByQuery\n        // );\n    }\n\n    /**\n     * Deletes a currency by its ID.\n     * @param {string} id - The ID of the currency to delete.\n     * @returns {Promise} An object indicating the result of the deletion.\n     * @throws {HttpException} If an error occurs during deletion or if the currency is not found.\n     */\n\n    async delete(id: string): Promise {\n        // Delete\n        const deleted = await this.prisma.executeRawQuery(this.query.delete(), id);\n\n        if (!deleted) {\n            throw new HttpException(\n                { message: 'Something went wrong' },\n                HttpStatus.INTERNAL_SERVER_ERROR\n            );\n        }\n\n        if (deleted[0]?.deletedid) {\n            return { status: 'success' };\n        } else {\n            throw new HttpException({ message: `${this.MODULE} not found` }, HttpStatus.NOT_FOUND);\n        }\n    }\n\n    /*** HELPER METHODS */\n\n    /**\n     * Retrieves a currency by its ID.\n     * @param {string} id - The ID of the currency to retrieve.\n     * @returns {Promise} The currency object.\n     */\n\n    async findOne(id: string): Promise {\n        // Get\n        const data = await this.prisma.executeRawQuery(this.query.findById(), { id });\n\n        return data;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Currency.html":{"url":"classes/Currency.html","title":"class - Currency","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Currency\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/currencies/dto/currency.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the Currency class, which represents the data structure of a currency entity.\nIt includes properties that describe the currency and uses decorators for Swagger documentation\nand data transformation.\nThe Currency class is used to define the structure of a currency object, including its code, name,\nplural name, symbol, native symbol, decimal digits, and rounding. The class also uses decorators\nto configure how the properties should be documented and transformed.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                decimal_digits\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                name\n                            \n                            \n                                name_plural\n                            \n                            \n                                rounding\n                            \n                            \n                                symbol\n                            \n                            \n                                symbol_native\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'Currency Code', example: 'INR'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/currency.ts:28\n                        \n                    \n\n            \n                \n                    The code of the currency (e.g., 'INR').\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        decimal_digits\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: 'Decimal digits', example: '2'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/currency.ts:88\n                        \n                    \n\n            \n                \n                    The number of decimal digits used for the currency.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude({toPlainOnly: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/currency.ts:108\n                        \n                    \n\n            \n                \n                    The unique identifier for the currency.\nThis property is excluded from the plain representation of the object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'name of currency', example: 'Indian Rupee'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/currency.ts:40\n                        \n                    \n\n            \n                \n                    The name of the currency (e.g., 'Indian Rupee').\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name_plural\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'plural name of currency', example: 'Indian rupees'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/currency.ts:52\n                        \n                    \n\n            \n                \n                    The plural name of the currency (e.g., 'Indian rupees').\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        rounding\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: 'Rounding', example: '0'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/currency.ts:100\n                        \n                    \n\n            \n                \n                    The rounding precision used for the currency.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        symbol\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'Symbol of currency', example: '₹'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/currency.ts:64\n                        \n                    \n\n            \n                \n                    The symbol  of the currency (e.g., '₹').\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        symbol_native\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'native symbol of currency', example: '₹'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/currencies/dto/currency.ts:76\n                        \n                    \n\n            \n                \n                    The native symbol of the currency (e.g., '₹').\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nimport { Exclude } from 'class-transformer';\n\n/**\n * @fileoverview\n * This file defines the `Currency` class, which represents the data structure of a currency entity.\n * It includes properties that describe the currency and uses decorators for Swagger documentation\n * and data transformation.\n *\n * @module\n * @description\n * The `Currency` class is used to define the structure of a currency object, including its code, name,\n * plural name, symbol, native symbol, decimal digits, and rounding. The class also uses decorators\n * to configure how the properties should be documented and transformed.\n */\nexport class Currency {\n    /**\n     * The code of the currency (e.g., 'INR').\n     * @example 'INR'\n     */\n\n    @ApiProperty({\n        type: String,\n        description: 'Currency Code',\n        example: 'INR',\n    })\n    code: string;\n\n    /**\n     * The name of the currency (e.g., 'Indian Rupee').\n     * @example 'Indian Rupee'\n     */\n\n    @ApiProperty({\n        type: String,\n        description: 'name of currency',\n        example: 'Indian Rupee',\n    })\n    name: string;\n\n    /**\n     * The plural name of the currency (e.g., 'Indian rupees').\n     * @example 'Indian rupees'\n     */\n\n    @ApiProperty({\n        type: String,\n        description: 'plural name of currency',\n        example: 'Indian rupees',\n    })\n    name_plural: string;\n\n    /**\n     * The symbol  of the currency (e.g., '₹').\n     * @example '₹'\n     */\n\n    @ApiProperty({\n        type: String,\n        description: 'Symbol of currency',\n        example: '₹',\n    })\n    symbol: string;\n\n    /**\n     * The native symbol of the currency (e.g., '₹').\n     * @example '₹'\n     */\n\n    @ApiProperty({\n        type: String,\n        description: 'native symbol of currency',\n        example: '₹',\n    })\n    symbol_native: string;\n\n    /**\n     * The number of decimal digits used for the currency.\n     * @example 2\n     */\n\n    @ApiProperty({\n        type: Number,\n        description: 'Decimal digits',\n        example: '2',\n    })\n    decimal_digits: number;\n\n    /**\n     * The rounding precision used for the currency.\n     * @example 0\n     */\n\n    @ApiProperty({\n        type: Number,\n        description: 'Rounding',\n        example: '0',\n    })\n    rounding: number;\n\n    /**\n     * The unique identifier for the currency.\n     * This property is excluded from the plain representation of the object.\n     */\n\n    @Exclude({ toPlainOnly: true })\n    id?: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Document.html":{"url":"classes/Document.html","title":"class - Document","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Document\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/documents/dto/documents.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the Document class, which represents the data structure of a document entity.\nIt includes properties that describe the document and uses decorators for Swagger documentation.\nThe Document class is used to define the structure of a document object, including its ID, name, status,\nand associated document group. The class also uses decorators to configure how the properties should be documented and transformed.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id_document\n                            \n                            \n                                id_document_group\n                            \n                            \n                                name\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id_document\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: '421939d4-b484-4f58-aa03-d8e94a843431'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/documents/dto/documents.dto.ts:22\n                        \n                    \n\n            \n                \n                    The unique identifier of the document (e.g., '\"421939d4-b484-4f58-aa03-d8e94a843431\"').\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id_document_group\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: '09407516-c0ac-4298-a6a7-59f48b87c094'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/documents/dto/documents.dto.ts:32\n                        \n                    \n\n            \n                \n                    The ID of the document group to which the document belongs.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'Passport'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/documents/dto/documents.dto.ts:42\n                        \n                    \n\n            \n                \n                    The name of the document (e.g., 'Passport').\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: Number, example: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/documents/dto/documents.dto.ts:52\n                        \n                    \n\n            \n                \n                    The status of the document (e.g., 1 for active).\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiResponseProperty } from '@nestjs/swagger';\n\n/**\n * @fileoverview\n * This file defines the `Document` class, which represents the data structure of a document entity.\n * It includes properties that describe the document and uses decorators for Swagger documentation.\n *\n * @module\n * @description\n * The `Document` class is used to define the structure of a document object, including its ID, name, status,\n * and associated document group. The class also uses decorators to configure how the properties should be documented and transformed.\n */\nexport class Document {\n    /**\n     * The unique identifier of the document (e.g., '\"421939d4-b484-4f58-aa03-d8e94a843431\"').\n     * @example '\"421939d4-b484-4f58-aa03-d8e94a843431\"'\n     */\n    @ApiResponseProperty({\n        type: String,\n        example: '421939d4-b484-4f58-aa03-d8e94a843431',\n    })\n    id_document: string;\n\n    /**\n     * The ID of the document group to which the document belongs.\n     * @example '09407516-c0ac-4298-a6a7-59f48b87c094'\n     */\n    @ApiResponseProperty({\n        type: String,\n        example: '09407516-c0ac-4298-a6a7-59f48b87c094',\n    })\n    id_document_group: string;\n\n    /**\n     * The name of the document (e.g., 'Passport').\n     * @example 'Passport'\n     */\n    @ApiResponseProperty({\n        type: String,\n        example: 'Passport',\n    })\n    name: string;\n\n    /**\n     * The status of the document (e.g., 1 for active).\n     * @example 1\n     */\n    @ApiResponseProperty({\n        type: Number,\n        example: 1,\n    })\n    status: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/DocumentController.html":{"url":"controllers/DocumentController.html","title":"controller - DocumentController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  DocumentController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/documents/documents.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                documents\n            \n\n\n            \n                Description\n            \n            \n                This file defines the DocumentController, which handles HTTP requests related to documents.\nIt provides endpoints to create, update, retrieve, and delete document records.\nThe DocumentController is responsible for exposing endpoints that interact with the DocumentService.\nIt uses various HTTP methods to manage document data and handles responses with appropriate HTTP status codes.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createDto: DocumentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(HttpStatus.CREATED)@ApiCreatedResponse({type: Document, description: 'Create document'})\n                \n            \n\n            \n                \n                    Defined in src/modules/master/documents/documents.controller.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createDto\n                                    \n                                                DocumentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe data required to create a new document.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The created document object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(HttpStatus.OK)@ApiParam({name: 'id', type: String})@ApiOkResponse({status: undefined, description: 'Document has been successfully deleted.'})\n                \n            \n\n            \n                \n                    Defined in src/modules/master/documents/documents.controller.ts:119\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe ID of the document to delete.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        An object indicating the deletion result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(query: PaginationQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/modules/master/documents/documents.controller.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                PaginationQueryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe pagination and filtering parameters.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        A paginated list of documents.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@HttpCode(HttpStatus.OK)@ApiParam({name: 'id', type: String})@ApiOkResponse({type: Document, description: 'Get document by ID'})\n                \n            \n\n            \n                \n                    Defined in src/modules/master/documents/documents.controller.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe ID of the document to retrieve.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The document object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateDto: UpdateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@HttpCode(HttpStatus.OK)@ApiParam({name: 'id', type: String})@ApiOkResponse({type: Document, description: 'Update document'})\n                \n            \n\n            \n                \n                    Defined in src/modules/master/documents/documents.controller.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe ID of the document to be updated.\n\n\n                                    \n                                \n                                \n                                    updateDto\n                                    \n                                                UpdateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe data to update the document with.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The updated document object or null if not found.\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    HttpCode,\n    HttpStatus,\n    Param,\n    ParseUUIDPipe,\n    Patch,\n    Post,\n    Query,\n} from '@nestjs/common';\nimport { ApiTags, ApiOkResponse, ApiCreatedResponse, ApiParam } from '@nestjs/swagger';\n\nimport { PaginationResponse, PaginationResponseDto } from '@utils/dto/pagination-response.dto';\nimport { PaginationQueryDto } from '@utils/dto/pagination.dto';\n\nimport { DocumentService } from './documents.service';\nimport { DocumentDto } from './dto/create.dto';\nimport { Document } from './dto/documents.dto';\nimport { UpdateDto } from './dto/update.dto';\n\n/**\n * @fileoverview\n * This file defines the `DocumentController`, which handles HTTP requests related to documents.\n * It provides endpoints to create, update, retrieve, and delete document records.\n *\n * @module\n * @description\n * The `DocumentController` is responsible for exposing endpoints that interact with the `DocumentService`.\n * It uses various HTTP methods to manage document data and handles responses with appropriate HTTP status codes.\n */\n@ApiTags('Documents')\n@Controller('documents')\nexport class DocumentController {\n    constructor(private readonly documentService: DocumentService) {}\n\n    /**\n     * @route POST /documents\n     * @description Create a new document.\n     * @param {DocumentDto} createDto - The data required to create a new document.\n     * @returns {Promise} The created document object.\n     */\n    @Post()\n    @HttpCode(HttpStatus.CREATED)\n    @ApiCreatedResponse({\n        type: Document,\n        description: 'Create document',\n    })\n    async create(@Body() createDto: DocumentDto): Promise {\n        return this.documentService.create(createDto);\n    }\n\n    /**\n     * @route PATCH /documents/:id\n     * @description Update an existing document by its ID.\n     * @param {string} id - The ID of the document to be updated.\n     * @param {UpdateDto} updateDto - The data to update the document with.\n     * @returns {Promise} The updated document object or null if not found.\n     */\n    @Patch(':id')\n    @HttpCode(HttpStatus.OK)\n    @ApiParam({ name: 'id', type: String })\n    @ApiOkResponse({\n        type: Document,\n        description: 'Update document',\n    })\n    async update(\n        @Param('id', ParseUUIDPipe) id: string,\n        @Body() updateDto: UpdateDto\n    ): Promise {\n        return this.documentService.update(id, updateDto);\n    }\n\n    /**\n     * @route GET /documents\n     * @description Retrieve a list of documents with pagination.\n     * @param {PaginationQueryDto} query - The pagination and filtering parameters.\n     * @returns {Promise>} A paginated list of documents.\n     */\n    @Get()\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ type: PaginationResponse(Document) })\n    async findAll(@Query() query: PaginationQueryDto): Promise> {\n        return this.documentService.findAll(query);\n    }\n\n    /**\n     * @route GET /documents/:id\n     * @description Retrieve a single document by its ID.\n     * @param {string} id - The ID of the document to retrieve.\n     * @returns {Promise} The document object.\n     */\n    @Get(':id')\n    @HttpCode(HttpStatus.OK)\n    @ApiParam({ name: 'id', type: String })\n    @ApiOkResponse({\n        type: Document,\n        description: 'Get document by ID',\n    })\n    async findOne(@Param('id', ParseUUIDPipe) id: string): Promise {\n        return this.documentService.findOne(id);\n    }\n\n    /**\n     * @route DELETE /documents/:id\n     * @description Delete a document by its ID.\n     * @param {string} id - The ID of the document to delete.\n     * @returns {Promise} An object indicating the deletion result.\n     */\n    @Delete(':id')\n    @HttpCode(HttpStatus.OK)\n    @ApiParam({ name: 'id', type: String })\n    @ApiOkResponse({\n        status: HttpStatus.OK,\n        description: 'Document has been successfully deleted.',\n    })\n    async delete(@Param('id', ParseUUIDPipe) id: string): Promise {\n        return this.documentService.delete(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DocumentDto.html":{"url":"classes/DocumentDto.html","title":"class - DocumentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DocumentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/documents/dto/create.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the DocumentDto class, which represents the data transfer object (DTO)\nused for creating a new document record. It includes validation rules and transformation logic\nfor the properties of the document.\nThe DocumentDto class ensures that the data provided for creating a document adheres to\nspecified validation rules and formats. It uses decorators from class-validator for validation\nand class-transformer for transforming input data.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                id_document\n                            \n                            \n                                id_document_group\n                            \n                            \n                                name\n                            \n                            \n                                    Optional\n                                status\n                            \n                            \n                                    Optional\n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id_document\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude({toPlainOnly: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/documents/dto/create.dto.ts:67\n                        \n                    \n\n            \n                \n                    The unique identifier for the document.\nThis property is excluded from the plain representation of the object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id_document_group\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@ApiProperty({type: String, description: 'Document group ID', example: '\"421939d4-b484-4f58-aa03-d8e94a843431\"'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/documents/dto/create.dto.ts:31\n                        \n                    \n\n            \n                \n                    The ID of the document group to which the document belongs.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@ApiProperty({type: String, description: 'Document name', example: 'Passport', maxLength: 25})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/documents/dto/create.dto.ts:46\n                        \n                    \n\n            \n                \n                    The name of the document (e.g., 'Passport').\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNumber()@ApiProperty({type: Number, description: 'Status of the document', example: 1, default: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/documents/dto/create.dto.ts:60\n                        \n                    \n\n            \n                \n                    The status of the document (e.g., 1 for active).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude({toPlainOnly: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/documents/dto/create.dto.ts:70\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nimport { Exclude } from 'class-transformer';\nimport { IsDefined, IsNotEmpty, IsString, IsOptional, IsNumber } from 'class-validator';\n\n/**\n * @fileoverview\n * This file defines the `DocumentDto` class, which represents the data transfer object (DTO)\n * used for creating a new document record. It includes validation rules and transformation logic\n * for the properties of the document.\n *\n * @module\n * @description\n * The `DocumentDto` class ensures that the data provided for creating a document adheres to\n * specified validation rules and formats. It uses decorators from `class-validator` for validation\n * and `class-transformer` for transforming input data.\n */\nexport class DocumentDto {\n    /**\n     * The ID of the document group to which the document belongs.\n     * @example '\"421939d4-b484-4f58-aa03-d8e94a843431\"'\n     */\n    @IsDefined()\n    @IsNotEmpty()\n    @IsString()\n    @ApiProperty({\n        type: String,\n        description: 'Document group ID',\n        example: '\"421939d4-b484-4f58-aa03-d8e94a843431\"',\n    })\n    id_document_group: string;\n\n    /**\n     * The name of the document (e.g., 'Passport').\n     * @example 'Passport'\n     */\n    @IsDefined()\n    @IsNotEmpty()\n    @IsString()\n    @ApiProperty({\n        type: String,\n        description: 'Document name',\n        example: 'Passport',\n        maxLength: 25,\n    })\n    name: string;\n\n    /**\n     * The status of the document (e.g., 1 for active).\n     * @example 1\n     */\n    @IsOptional()\n    @IsNumber()\n    @ApiProperty({\n        type: Number,\n        description: 'Status of the document',\n        example: 1,\n        default: 1,\n    })\n    status?: number;\n\n    /**\n     * The unique identifier for the document.\n     * This property is excluded from the plain representation of the object.\n     */\n    @Exclude({ toPlainOnly: true })\n    id_document?: string;\n\n    @Exclude({ toPlainOnly: true })\n    updated_at?: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DocumentGroup.html":{"url":"classes/DocumentGroup.html","title":"class - DocumentGroup","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DocumentGroup\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/document_groups/dto/document_grp.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the DocumentGroup class, which represents the data structure of a document group entity.\nIt includes properties that describe the document group and uses decorators for Swagger documentation.\nThe DocumentGroup class is used to define the structure of a document group object, including its name, status,\nand timestamps. The class also uses decorators to configure how the properties should be documented and transformed.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id_document_group\n                            \n                            \n                                name\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id_document_group\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: '\"421939d4-b484-4f58-aa03-d8e94a843431\"'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/document_groups/dto/document_grp.dto.ts:22\n                        \n                    \n\n            \n                \n                    The unique identifier of the document group (e.g., '\"421939d4-b484-4f58-aa03-d8e94a843431\"').\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'Legal Documents'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/document_groups/dto/document_grp.dto.ts:32\n                        \n                    \n\n            \n                \n                    The name of the document group (e.g., 'Legal Documents').\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: Number, example: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/document_groups/dto/document_grp.dto.ts:42\n                        \n                    \n\n            \n                \n                    The status of the document group (e.g., 1 for active).\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiResponseProperty } from '@nestjs/swagger';\n\n/**\n * @fileoverview\n * This file defines the `DocumentGroup` class, which represents the data structure of a document group entity.\n * It includes properties that describe the document group and uses decorators for Swagger documentation.\n *\n * @module\n * @description\n * The `DocumentGroup` class is used to define the structure of a document group object, including its name, status,\n * and timestamps. The class also uses decorators to configure how the properties should be documented and transformed.\n */\nexport class DocumentGroup {\n    /**\n     * The unique identifier of the document group (e.g., '\"421939d4-b484-4f58-aa03-d8e94a843431\"').\n     * @example '\"421939d4-b484-4f58-aa03-d8e94a843431\"'\n     */\n    @ApiResponseProperty({\n        type: String,\n        example: '\"421939d4-b484-4f58-aa03-d8e94a843431\"',\n    })\n    id_document_group: string;\n\n    /**\n     * The name of the document group (e.g., 'Legal Documents').\n     * @example 'Legal Documents'\n     */\n    @ApiResponseProperty({\n        type: String,\n        example: 'Legal Documents',\n    })\n    name: string;\n\n    /**\n     * The status of the document group (e.g., 1 for active).\n     * @example 1\n     */\n    @ApiResponseProperty({\n        type: Number,\n        example: 1,\n    })\n    status: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/DocumentGroupController.html":{"url":"controllers/DocumentGroupController.html","title":"controller - DocumentGroupController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  DocumentGroupController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/document_groups/document_grp.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                document-groups\n            \n\n\n            \n                Description\n            \n            \n                This file defines the DocumentGroupController, which handles HTTP requests related to document groups.\nIt provides endpoints to create, update, retrieve, and delete document group records.\nThe DocumentGroupController is responsible for exposing endpoints that interact with the DocumentGroupService.\nIt uses various HTTP methods to manage document group data and handles responses with appropriate HTTP status codes.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createDto: DocumentGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(HttpStatus.CREATED)@ApiCreatedResponse({type: DocumentGroup, description: 'Create document group'})\n                \n            \n\n            \n                \n                    Defined in src/modules/master/document_groups/document_grp.controller.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createDto\n                                    \n                                                DocumentGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe data required to create a new document group.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The created document group object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(HttpStatus.OK)@ApiParam({name: 'id', type: String})@ApiOkResponse({status: undefined, description: 'Document group has been successfully deleted.'})\n                \n            \n\n            \n                \n                    Defined in src/modules/master/document_groups/document_grp.controller.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe ID of the document group to delete.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        An object indicating the deletion result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(query: PaginationQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/modules/master/document_groups/document_grp.controller.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                PaginationQueryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe pagination and filtering parameters.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        A paginated list of document groups.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@HttpCode(HttpStatus.OK)@ApiParam({name: 'id', type: String})@ApiOkResponse({type: DocumentGroup, description: 'Get document group by ID'})\n                \n            \n\n            \n                \n                    Defined in src/modules/master/document_groups/document_grp.controller.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe ID of the document group to retrieve.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The document group object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateDto: UpdateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@HttpCode(HttpStatus.OK)@ApiParam({name: 'id', type: String})@ApiOkResponse({type: DocumentGroup, description: 'Update document group'})\n                \n            \n\n            \n                \n                    Defined in src/modules/master/document_groups/document_grp.controller.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe ID of the document group to be updated.\n\n\n                                    \n                                \n                                \n                                    updateDto\n                                    \n                                                UpdateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe data to update the document group with.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The updated document group object or null if not found.\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    HttpCode,\n    HttpStatus,\n    Param,\n    ParseUUIDPipe,\n    Patch,\n    Post,\n    Query,\n} from '@nestjs/common';\nimport { ApiTags, ApiOkResponse, ApiCreatedResponse, ApiParam } from '@nestjs/swagger';\n\nimport { PaginationResponse, PaginationResponseDto } from '@utils/dto/pagination-response.dto';\nimport { PaginationQueryDto } from '@utils/dto/pagination.dto';\n\nimport { DocumentGroupService } from './document_grp.service';\nimport { DocumentGroupDto } from './dto/create.dto';\nimport { DocumentGroup } from './dto/document_grp.dto';\nimport { UpdateDto } from './dto/update.dto';\n\n/**\n * @fileoverview\n * This file defines the `DocumentGroupController`, which handles HTTP requests related to document groups.\n * It provides endpoints to create, update, retrieve, and delete document group records.\n *\n * @module\n * @description\n * The `DocumentGroupController` is responsible for exposing endpoints that interact with the `DocumentGroupService`.\n * It uses various HTTP methods to manage document group data and handles responses with appropriate HTTP status codes.\n */\n@ApiTags('DocumentGroups')\n@Controller('document-groups')\nexport class DocumentGroupController {\n    constructor(private readonly documentGroupService: DocumentGroupService) {}\n\n    /**\n     * @route POST /document-groups\n     * @description Create a new document group.\n     * @param {DocumentGroupDto} createDto - The data required to create a new document group.\n     * @returns {Promise} The created document group object.\n     */\n    @Post()\n    @HttpCode(HttpStatus.CREATED)\n    @ApiCreatedResponse({\n        type: DocumentGroup,\n        description: 'Create document group',\n    })\n    async create(@Body() createDto: DocumentGroupDto): Promise {\n        return this.documentGroupService.create(createDto);\n    }\n\n    /**\n     * @route PATCH /document-groups/:id\n     * @description Update an existing document group by its ID.\n     * @param {string} id - The ID of the document group to be updated.\n     * @param {UpdateDto} updateDto - The data to update the document group with.\n     * @returns {Promise} The updated document group object or null if not found.\n     */\n    @Patch(':id')\n    @HttpCode(HttpStatus.OK)\n    @ApiParam({ name: 'id', type: String })\n    @ApiOkResponse({\n        type: DocumentGroup,\n        description: 'Update document group',\n    })\n    async update(\n        @Param('id', ParseUUIDPipe) id: string,\n        @Body() updateDto: UpdateDto\n    ): Promise {\n        return this.documentGroupService.update(id, updateDto);\n    }\n\n    /**\n     * @route GET /document-groups\n     * @description Retrieve a list of document groups with pagination.\n     * @param {PaginationQueryDto} query - The pagination and filtering parameters.\n     * @returns {Promise>} A paginated list of document groups.\n     */\n    @Get()\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ type: PaginationResponse(DocumentGroup) })\n    async findAll(\n        @Query() query: PaginationQueryDto\n    ): Promise> {\n        return this.documentGroupService.findAll(query);\n    }\n\n    /**\n     * @route GET /document-groups/:id\n     * @description Retrieve a single document group by its ID.\n     * @param {string} id - The ID of the document group to retrieve.\n     * @returns {Promise} The document group object.\n     */\n    @Get(':id')\n    @HttpCode(HttpStatus.OK)\n    @ApiParam({ name: 'id', type: String })\n    @ApiOkResponse({\n        type: DocumentGroup,\n        description: 'Get document group by ID',\n    })\n    async findOne(@Param('id', ParseUUIDPipe) id: string): Promise {\n        return this.documentGroupService.findOne(id);\n    }\n\n    /**\n     * @route DELETE /document-groups/:id\n     * @description Delete a document group by its ID.\n     * @param {string} id - The ID of the document group to delete.\n     * @returns {Promise} An object indicating the deletion result.\n     */\n    @Delete(':id')\n    @HttpCode(HttpStatus.OK)\n    @ApiParam({ name: 'id', type: String })\n    @ApiOkResponse({\n        status: HttpStatus.OK,\n        description: 'Document group has been successfully deleted.',\n    })\n    async delete(@Param('id', ParseUUIDPipe) id: string): Promise {\n        return this.documentGroupService.delete(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DocumentGroupDto.html":{"url":"classes/DocumentGroupDto.html","title":"class - DocumentGroupDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DocumentGroupDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/document_groups/dto/create.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the DocumentGroupDto class, which represents the data transfer object (DTO)\nused for creating a new document group record. It includes validation rules and transformation logic\nfor the properties of the document group.\nThe DocumentGroupDto class ensures that the data provided for creating a document group adheres to\nspecified validation rules and formats. It uses decorators from class-validator for validation\nand class-transformer for transforming input data.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                id_document_group\n                            \n                            \n                                name\n                            \n                            \n                                    Optional\n                                status\n                            \n                            \n                                    Optional\n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id_document_group\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude({toPlainOnly: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/document_groups/dto/create.dto.ts:53\n                        \n                    \n\n            \n                \n                    The unique identifier for the document group.\nThis property is excluded from the plain representation of the object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@ApiProperty({type: String, description: 'Document group name', example: 'Legal Documents', maxLength: 25})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/document_groups/dto/create.dto.ts:32\n                        \n                    \n\n            \n                \n                    The name of the document group (e.g., 'Legal Documents').\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNumber()@ApiProperty({type: Number, description: 'Status of the document group', example: 1, default: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/document_groups/dto/create.dto.ts:46\n                        \n                    \n\n            \n                \n                    The status of the document group (e.g., 1 for active).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude({toPlainOnly: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/document_groups/dto/create.dto.ts:56\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nimport { Exclude } from 'class-transformer';\nimport { IsDefined, IsNotEmpty, IsString, IsOptional, IsNumber } from 'class-validator';\n\n/**\n * @fileoverview\n * This file defines the `DocumentGroupDto` class, which represents the data transfer object (DTO)\n * used for creating a new document group record. It includes validation rules and transformation logic\n * for the properties of the document group.\n *\n * @module\n * @description\n * The `DocumentGroupDto` class ensures that the data provided for creating a document group adheres to\n * specified validation rules and formats. It uses decorators from `class-validator` for validation\n * and `class-transformer` for transforming input data.\n */\nexport class DocumentGroupDto {\n    /**\n     * The name of the document group (e.g., 'Legal Documents').\n     * @example 'Legal Documents'\n     */\n    @IsDefined()\n    @IsNotEmpty()\n    @IsString()\n    @ApiProperty({\n        type: String,\n        description: 'Document group name',\n        example: 'Legal Documents',\n        maxLength: 25,\n    })\n    name: string;\n\n    /**\n     * The status of the document group (e.g., 1 for active).\n     * @example 1\n     */\n    @IsOptional()\n    @IsNumber()\n    @ApiProperty({\n        type: Number,\n        description: 'Status of the document group',\n        example: 1,\n        default: 1,\n    })\n    status?: number;\n\n    /**\n     * The unique identifier for the document group.\n     * This property is excluded from the plain representation of the object.\n     */\n    @Exclude({ toPlainOnly: true })\n    id_document_group?: string;\n\n    @Exclude({ toPlainOnly: true })\n    updated_at?: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DocumentGroupModule.html":{"url":"modules/DocumentGroupModule.html","title":"module - DocumentGroupModule","body":"\n                   \n\n\n\n\n    Modules\n    DocumentGroupModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_DocumentGroupModule\n\n\n\ncluster_DocumentGroupModule_exports\n\n\n\ncluster_DocumentGroupModule_providers\n\n\n\n\nDocumentGroupService \n\nDocumentGroupService \n\n\n\nDocumentGroupModule\n\nDocumentGroupModule\n\nDocumentGroupService  -->\n\nDocumentGroupModule->DocumentGroupService \n\n\n\n\n\nDocumentGroupService\n\nDocumentGroupService\n\nDocumentGroupModule -->\n\nDocumentGroupService->DocumentGroupModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/master/document_groups/document_grp.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            This file defines the DocumentGroupModule, which bundles the DocumentGroupController and DocumentGroupService together.\nThe DocumentGroupModule is responsible for handling document group-related operations. It provides the necessary controllers and services to manage document groups.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DocumentGroupService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            DocumentGroupController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            DocumentGroupService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { DocumentGroupController } from './document_grp.controller';\nimport { DocumentGroupService } from './document_grp.service';\nimport { Query } from './query';\n\n/**\n * @fileoverview\n * This file defines the `DocumentGroupModule`, which bundles the `DocumentGroupController` and `DocumentGroupService` together.\n *\n * @module\n * @description\n * The `DocumentGroupModule` is responsible for handling document group-related operations. It provides the necessary controllers and services to manage document groups.\n */\n@Module({\n    controllers: [DocumentGroupController],\n    providers: [DocumentGroupService, Query],\n    exports: [DocumentGroupService],\n})\nexport class DocumentGroupModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DocumentGroupService.html":{"url":"injectables/DocumentGroupService.html","title":"injectable - DocumentGroupService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  DocumentGroupService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/document_groups/document_grp.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the DocumentGroupService class, which provides methods to manage document group data.\nIt includes operations for creating, updating, retrieving, and deleting document groups.\nThe DocumentGroupService class is responsible for handling business logic related to document groups.\nIt interacts with the database through the PrismaService and performs various operations using raw SQL queries.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                MODULE\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(paginationService: PaginationService, prisma: PrismaService, query: Query, utilsService: UtilsService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/master/document_groups/document_grp.service.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        paginationService\n                                                  \n                                                        \n                                                                        PaginationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        query\n                                                  \n                                                        \n                                                                        Query\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        utilsService\n                                                  \n                                                        \n                                                                        UtilsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createDto: DocumentGroupDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/document_groups/document_grp.service.ts:44\n                \n            \n\n\n            \n                \n                    Creates a new document group.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createDto\n                                    \n                                                DocumentGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe data required to create a new document group.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The created document group object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/document_groups/document_grp.service.ts:151\n                \n            \n\n\n            \n                \n                    Deletes a document group by its ID.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe ID of the document group to delete.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        An object indicating the deletion result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(paginationQuery: PaginationQueryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/document_groups/document_grp.service.ts:107\n                \n            \n\n\n            \n                \n                    Retrieves a list of document groups with pagination.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    paginationQuery\n                                    \n                                                PaginationQueryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe pagination and filtering parameters.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        A paginated list of document groups.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/document_groups/document_grp.service.ts:137\n                \n            \n\n\n            \n                \n                    Retrieves a single document group by its ID.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe ID of the document group to retrieve.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The document group object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateDto: UpdateDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/document_groups/document_grp.service.ts:74\n                \n            \n\n\n            \n                \n                    Updates an existing document group by its ID.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe ID of the document group to be updated.\n\n\n                                    \n                                \n                                \n                                    updateDto\n                                    \n                                                UpdateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe data to update the document group with.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The updated document group object or null if not found.\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        MODULE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/master/document_groups/document_grp.service.ts:27\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, HttpException, HttpStatus } from '@nestjs/common';\n\nimport { PaginationService } from '@app/common/helper/services/pagination.service';\nimport { UtilsService } from '@app/common/helper/services/util.service';\nimport { IPaginationFieldConfig } from '@app/utils/types/pagination-options';\nimport { PrismaService } from '@services/prisma.service';\nimport { PaginationResponseDto } from '@utils/dto/pagination-response.dto';\nimport { PaginationQueryDto } from '@utils/dto/pagination.dto';\n\nimport { DocumentGroupDto } from './dto/create.dto';\nimport { DocumentGroup } from './dto/document_grp.dto';\nimport { UpdateDto } from './dto/update.dto';\nimport { Query } from './query';\n\n/**\n * @fileoverview\n * This file defines the `DocumentGroupService` class, which provides methods to manage document group data.\n * It includes operations for creating, updating, retrieving, and deleting document groups.\n *\n * @module\n * @description\n * The `DocumentGroupService` class is responsible for handling business logic related to document groups.\n * It interacts with the database through the `PrismaService` and performs various operations using raw SQL queries.\n */\n@Injectable()\nexport class DocumentGroupService {\n    private readonly MODULE: string;\n\n    constructor(\n        private readonly paginationService: PaginationService,\n        private readonly prisma: PrismaService,\n        private readonly query: Query,\n        private readonly utilsService: UtilsService\n    ) {\n        this.MODULE = 'document-group';\n    }\n\n    /**\n     * Creates a new document group.\n     * @param {DocumentGroupDto} createDto - The data required to create a new document group.\n     * @returns {Promise} The created document group object.\n     * @throws {HttpException} If a document group with the same name already exists or if an error occurs.\n     */\n    async create(createDto: DocumentGroupDto): Promise {\n        // Check if a document group with the same name already exists\n        const find = await this.prisma.executeRawQuery(this.query.findByName(), createDto);\n\n        if (find) {\n            throw new HttpException({ message: 'NAME ALREADY EXISTS' }, HttpStatus.CONFLICT);\n        }\n\n        // Insert the new document group\n        const inserted = await this.prisma.executeRawQuery(this.query.insert(), createDto);\n\n        if (inserted && inserted.insertid) {\n            // Retrieve and return the newly created document group\n            const get = await this.findOne(inserted.insertid);\n            return get as any;\n        } else {\n            throw new HttpException(\n                { message: 'Something went wrong' },\n                HttpStatus.INTERNAL_SERVER_ERROR\n            );\n        }\n    }\n\n    /**\n     * Updates an existing document group by its ID.\n     * @param {string} id - The ID of the document group to be updated.\n     * @param {UpdateDto} updateDto - The data to update the document group with.\n     * @returns {Promise} The updated document group object or null if not found.\n     * @throws {HttpException} If the document group is not found or if an error occurs.\n     */\n    async update(id: string, updateDto: UpdateDto): Promise {\n        if (Object.keys(updateDto).length === 0) {\n            throw new HttpException({ message: 'Nothing to update!' }, HttpStatus.BAD_REQUEST);\n        }\n\n        // Check if the document group exists\n        const recordExits = await this.findOne(id);\n        if (recordExits) {\n            updateDto.id_document_group = id;\n            updateDto.updated_at = new Date().toISOString();\n            // Update the document group\n            const updated = await this.prisma.executeRawQuery(this.query.update(), updateDto);\n\n            if (updated && updated[0].updatedid) {\n                // Retrieve and return the updated document group\n                const get = await this.findOne(updated[0].updatedid);\n                return get as any;\n            } else {\n                throw new HttpException(\n                    { message: 'Something went wrong' },\n                    HttpStatus.INTERNAL_SERVER_ERROR\n                );\n            }\n        } else {\n            throw new HttpException({ message: 'Document group not found' }, HttpStatus.NOT_FOUND);\n        }\n    }\n\n    /**\n     * Retrieves a list of document groups with pagination.\n     * @param {PaginationQueryDto} paginationQuery - The pagination and filtering parameters.\n     * @returns {Promise>} A paginated list of document groups.\n     */\n    async findAll(\n        paginationQuery: PaginationQueryDto\n    ): Promise> {\n        const baseQuery = ['ptbl.id_document_group', 'ptbl.name', 'ptbl.status'];\n        const fromQuery = ` FROM document_groups as ptbl`;\n\n        const fieldConfigs: Record = null;\n\n        // Build the dynamic query for pagination\n        const { selectQuery, countQuery } = this.utilsService.buildDynamicQuery(\n            paginationQuery,\n            fieldConfigs,\n            baseQuery,\n            fromQuery,\n            'ptbl.id_document_group'\n        );\n\n        return this.paginationService.paginate(\n            selectQuery,\n            countQuery,\n            paginationQuery\n        );\n    }\n\n    /**\n     * Retrieves a single document group by its ID.\n     * @param {string} id - The ID of the document group to retrieve.\n     * @returns {Promise} The document group object.\n     * @throws {HttpException} If the document group is not found.\n     */\n    async findOne(id: string): Promise {\n        const result = await this.prisma.executeRawQuery(this.query.findById(), { id });\n        if (!result) {\n            throw new HttpException({ message: 'Document group not found' }, HttpStatus.NOT_FOUND);\n        }\n        return result as any;\n    }\n\n    /**\n     * Deletes a document group by its ID.\n     * @param {string} id - The ID of the document group to delete.\n     * @returns {Promise} An object indicating the deletion result.\n     * @throws {HttpException} If an error occurs during deletion.\n     */\n    async delete(id: string): Promise {\n        const deleted = await this.prisma.executeRawQuery(this.query.delete(), id);\n\n        if (deleted && deleted[0].deletedid) {\n            return deleted;\n        } else {\n            throw new HttpException(\n                { message: 'Something went wrong' },\n                HttpStatus.INTERNAL_SERVER_ERROR\n            );\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DocumentModule.html":{"url":"modules/DocumentModule.html","title":"module - DocumentModule","body":"\n                   \n\n\n\n\n    Modules\n    DocumentModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_DocumentModule\n\n\n\ncluster_DocumentModule_exports\n\n\n\ncluster_DocumentModule_providers\n\n\n\n\nDocumentService \n\nDocumentService \n\n\n\nDocumentModule\n\nDocumentModule\n\nDocumentService  -->\n\nDocumentModule->DocumentService \n\n\n\n\n\nDocumentService\n\nDocumentService\n\nDocumentModule -->\n\nDocumentService->DocumentModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/master/documents/documents.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            This file defines the DocumentModule, which bundles the DocumentController and DocumentService together.\nThe DocumentModule is responsible for handling document-related operations. It provides the necessary controllers and services to manage documents.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DocumentService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            DocumentController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            DocumentService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { DocumentController } from './documents.controller';\nimport { DocumentService } from './documents.service';\nimport { Query } from './query';\n\n/**\n * @fileoverview\n * This file defines the `DocumentModule`, which bundles the `DocumentController` and `DocumentService` together.\n *\n * @module\n * @description\n * The `DocumentModule` is responsible for handling document-related operations. It provides the necessary controllers and services to manage documents.\n */\n@Module({\n    controllers: [DocumentController],\n    providers: [DocumentService, Query],\n    exports: [DocumentService],\n})\nexport class DocumentModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DocumentService.html":{"url":"injectables/DocumentService.html","title":"injectable - DocumentService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  DocumentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/documents/documents.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the DocumentService class, which provides methods to manage Document data.\nIt includes operations for creating, updating, retrieving, and deleting Document records.\nThe DocumentService class is responsible for handling business logic related to Document entities.\nIt interacts with the database through the PrismaService and performs various operations using raw SQL queries.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                MODULE\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(paginationService: PaginationService, prisma: PrismaService, query: Query, utilsService: UtilsService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/master/documents/documents.service.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        paginationService\n                                                  \n                                                        \n                                                                        PaginationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        query\n                                                  \n                                                        \n                                                                        Query\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        utilsService\n                                                  \n                                                        \n                                                                        UtilsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createDto: DocumentDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/documents/documents.service.ts:44\n                \n            \n\n\n            \n                \n                    Creates a new document.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createDto\n                                    \n                                                DocumentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe data required to create a new document.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The created document object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/documents/documents.service.ts:151\n                \n            \n\n\n            \n                \n                    Deletes a document by its ID.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe ID of the document to delete.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        An object indicating the deletion result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(paginationQuery: PaginationQueryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/documents/documents.service.ts:102\n                \n            \n\n\n            \n                \n                    Retrieves a list of documents with pagination.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    paginationQuery\n                                    \n                                                PaginationQueryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe pagination and filtering parameters.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        A paginated list of documents.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/documents/documents.service.ts:137\n                \n            \n\n\n            \n                \n                    Retrieves a single document by its ID.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe ID of the document to retrieve.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The document object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateDto: UpdateDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/documents/documents.service.ts:71\n                \n            \n\n\n            \n                \n                    Updates an existing document by its ID.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe ID of the document to be updated.\n\n\n                                    \n                                \n                                \n                                    updateDto\n                                    \n                                                UpdateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe data to update the document with.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The updated document object or null if not found.\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        MODULE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/master/documents/documents.service.ts:27\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, HttpException, HttpStatus } from '@nestjs/common';\n\nimport { IPaginationFieldConfig } from '@app/utils/types/pagination-options';\nimport { PaginationService } from '@services/pagination.service';\nimport { PrismaService } from '@services/prisma.service';\nimport { UtilsService } from '@services/util.service';\nimport { PaginationResponseDto } from '@utils/dto/pagination-response.dto';\nimport { PaginationQueryDto } from '@utils/dto/pagination.dto';\n\nimport { DocumentDto } from './dto/create.dto';\nimport { Document } from './dto/documents.dto';\nimport { UpdateDto } from './dto/update.dto';\nimport { Query } from './query';\n\n/**\n * @fileoverview\n * This file defines the `DocumentService` class, which provides methods to manage Document data.\n * It includes operations for creating, updating, retrieving, and deleting Document records.\n *\n * @module\n * @description\n * The `DocumentService` class is responsible for handling business logic related to Document entities.\n * It interacts with the database through the `PrismaService` and performs various operations using raw SQL queries.\n */\n@Injectable()\nexport class DocumentService {\n    private readonly MODULE: string;\n\n    constructor(\n        private readonly paginationService: PaginationService,\n        private readonly prisma: PrismaService,\n        private readonly query: Query,\n        private readonly utilsService: UtilsService\n    ) {\n        this.MODULE = 'document';\n    }\n\n    /**\n     * Creates a new document.\n     * @param {DocumentDto} createDto - The data required to create a new document.\n     * @returns {Promise} The created document object.\n     * @throws {HttpException} If a document with the same name already exists or if an error occurs.\n     */\n    async create(createDto: DocumentDto): Promise {\n        const find = await this.prisma.executeRawQuery(this.query.findByName(), createDto);\n\n        if (find) {\n            throw new HttpException({ message: 'NAME ALREADY EXISTS' }, HttpStatus.CONFLICT);\n        }\n\n        const inserted = await this.prisma.executeRawQuery(this.query.insert(), createDto);\n\n        if (inserted && inserted.insertid) {\n            const get = await this.findOne(inserted.insertid);\n            return get as any;\n        } else {\n            throw new HttpException(\n                { message: 'Something went wrong' },\n                HttpStatus.INTERNAL_SERVER_ERROR\n            );\n        }\n    }\n\n    /**\n     * Updates an existing document by its ID.\n     * @param {string} id - The ID of the document to be updated.\n     * @param {UpdateDto} updateDto - The data to update the document with.\n     * @returns {Promise} The updated document object or null if not found.\n     * @throws {HttpException} If the document is not found or if an error occurs.\n     */\n    async update(id: string, updateDto: UpdateDto): Promise {\n        if (Object.keys(updateDto).length === 0) {\n            throw new HttpException({ message: 'Nothing to update!' }, HttpStatus.BAD_REQUEST);\n        }\n        // Check if document exists\n        const recordExists = await this.findOne(id);\n        if (recordExists) {\n            updateDto.id_document = id;\n            updateDto.updated_at = new Date().toISOString();\n            // Update document\n            const updated = await this.prisma.executeRawQuery(this.query.update(), updateDto);\n\n            if (updated && updated[0].updatedid) {\n                const get = await this.findOne(updated[0].updatedid);\n                return get;\n            } else {\n                throw new HttpException(\n                    { message: 'Something went wrong' },\n                    HttpStatus.INTERNAL_SERVER_ERROR\n                );\n            }\n        } else {\n            throw new HttpException({ message: 'Document not found' }, HttpStatus.NOT_FOUND);\n        }\n    }\n\n    /**\n     * Retrieves a list of documents with pagination.\n     * @param {PaginationQueryDto} paginationQuery - The pagination and filtering parameters.\n     * @returns {Promise>} A paginated list of documents.\n     */\n    async findAll(paginationQuery: PaginationQueryDto): Promise> {\n        const baseQuery = [\n            'ptbl.id_document',\n            'ptbl.id_document_group',\n            'ptbl.name',\n            'ptbl.status',\n        ];\n        const fromQuery = ` FROM documents as ptbl`;\n\n        const fieldConfigs: Record = {\n            id_document_group: {\n                joinTable: (alias: string) =>\n                    `JOIN document_groups ${alias} ON ${alias}.id_document_group = ptbl.id_document_group`,\n                alias: () => `c${0}`,\n                selectFields: (alias: string) => [`${alias}.name as documentgroup_name`],\n            },\n        };\n\n        const { selectQuery, countQuery } = this.utilsService.buildDynamicQuery(\n            paginationQuery,\n            fieldConfigs,\n            baseQuery,\n            fromQuery,\n            'ptbl.id_document'\n        );\n\n        return this.paginationService.paginate(selectQuery, countQuery, paginationQuery);\n    }\n\n    /**\n     * Retrieves a single document by its ID.\n     * @param {string} id - The ID of the document to retrieve.\n     * @returns {Promise} The document object.\n     * @throws {HttpException} If the document is not found.\n     */\n    async findOne(id: string): Promise {\n        const result = await this.prisma.executeRawQuery(this.query.findById(), { id });\n        if (!result) {\n            throw new HttpException({ message: 'Document not found' }, HttpStatus.NOT_FOUND);\n        }\n        return result as any;\n    }\n\n    /**\n     * Deletes a document by its ID.\n     * @param {string} id - The ID of the document to delete.\n     * @returns {Promise} An object indicating the deletion result.\n     * @throws {HttpException} If an error occurs during deletion.\n     */\n    async delete(id: string): Promise {\n        const deleted = await this.prisma.executeRawQuery(this.query.delete(), id);\n\n        if (deleted && deleted[0].deletedid) {\n            return deleted;\n        } else {\n            throw new HttpException(\n                { message: 'Something went wrong' },\n                HttpStatus.INTERNAL_SERVER_ERROR\n            );\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DynamicQueryBuilder.html":{"url":"classes/DynamicQueryBuilder.html","title":"class - DynamicQueryBuilder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DynamicQueryBuilder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/providers/dynamic-query.service-to-be-remove.ts\n        \n\n\n            \n                Description\n            \n            \n                Class to build dynamic SQL queries.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                buildDeleteQuery\n                            \n                            \n                                buildInsertQuery\n                            \n                            \n                                buildSelectQuery\n                            \n                            \n                                buildUpdateQuery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        buildDeleteQuery\n                        \n                    \n                \n            \n            \n                \nbuildDeleteQuery(options: QueryOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/providers/dynamic-query.service-to-be-remove.ts:235\n                \n            \n\n\n            \n                \n                    Builds a DELETE SQL query.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                QueryOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nOptions for the DELETE query.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        \nAn object containing the query name, type, and the SQL syntax.\n\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildInsertQuery\n                        \n                    \n                \n            \n            \n                \nbuildInsertQuery(options: QueryOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/providers/dynamic-query.service-to-be-remove.ts:116\n                \n            \n\n\n            \n                \n                    Builds an INSERT SQL query.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                QueryOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nOptions for the INSERT query.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        \nAn object containing the query name, type, and the SQL syntax.\n\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildSelectQuery\n                        \n                    \n                \n            \n            \n                \nbuildSelectQuery(options: QueryOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/providers/dynamic-query.service-to-be-remove.ts:145\n                \n            \n\n\n            \n                \n                    Builds a SELECT SQL query.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                QueryOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nOptions for the SELECT query.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        \nAn object containing the query name, type, and the SQL syntax.\n\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildUpdateQuery\n                        \n                    \n                \n            \n            \n                \nbuildUpdateQuery(options: QueryOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/providers/dynamic-query.service-to-be-remove.ts:195\n                \n            \n\n\n            \n                \n                    Builds an UPDATE SQL query.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                QueryOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nOptions for the UPDATE query.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        \nAn object containing the query name, type, SQL syntax, and values to be used.\n\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as _ from 'lodash';\n\n/**\n * Options for building queries.\n *\n * @export\n * @interface QueryOptions\n */\n\nexport interface QueryOptions {\n    /**\n     * Name of the query.\n     *\n     * @type {string}\n     * @memberof QueryOptions\n     */\n\n    queryName?: string;\n\n    /**\n     * Type of the query (e.g., INSERT, SELECT, UPDATE, DELETE).\n     *\n     * @type {string}\n     * @memberof QueryOptions\n     */\n\n    queryType?: string;\n\n    /**\n     * Name of the table to perform the query on.\n     *\n     * @type {string}\n     * @memberof QueryOptions\n     */\n\n    table: string;\n\n    /**\n     * List of fields to include in the query (e.g., columns for SELECT, INSERT, or UPDATE).\n     *\n     * @type {string[]}\n     * @memberof QueryOptions\n     */\n\n    fields?: string[];\n\n    /**\n     * Values to be used in the query (e.g., for INSERT or UPDATE operations).\n     *\n     * @type {Record}\n     * @memberof QueryOptions\n     */\n\n    values?: Record;\n\n    /**\n     * Conditions for the query (e.g., WHERE clauses).\n     *\n     * @type {Record}\n     * @memberof QueryOptions\n     */\n\n    conditions?: Record;\n\n    /**\n     * Optional conditions for the query.\n     *\n     * @type {Record}\n     * @memberof QueryOptions\n     */\n\n    optionalConditions?: Record;\n\n    /**\n     * Join clauses to include in the query.\n     *\n     * @type {string[]}\n     * @memberof QueryOptions\n     */\n\n    joins?: string[];\n\n    /**\n     * Fields to return from the query.\n     *\n     * @type {string[]}\n     * @memberof QueryOptions\n     */\n\n    returningFields?: string[];\n\n    /**\n     * Type of delete operation ('soft' or 'hard').\n     *\n     * @type {string}\n     * @memberof QueryOptions\n     */\n    deleteType?: string;\n}\n\n/**\n * Class to build dynamic SQL queries.\n *\n * @export\n * @class DynamicQueryBuilder\n */\nexport class DynamicQueryBuilder {\n    /**\n     * Builds an INSERT SQL query.\n     *\n     * @param {QueryOptions} options - Options for the INSERT query.\n     * @returns {object} - An object containing the query name, type, and the SQL syntax.\n     * @memberof DynamicQueryBuilder\n     */\n\n    buildInsertQuery(options: QueryOptions): object {\n        const { queryName, queryType, fields, table, values = {}, returningFields = [] } = options;\n        const conds = _.pick(values, fields);\n        const keys = _.keys(conds);\n        const vals = _.values(conds);\n\n        const returningClause = returningFields.length\n            ? `RETURNING ${returningFields.join(', ')}`\n            : '';\n\n        const sql = `INSERT INTO ${table} (${keys.join()}) VALUES ('${vals.join(\"','\")}') ${returningClause};`;\n\n        return {\n            name: queryName ? queryName : 'add',\n            type: queryType ? queryType : 'INSERT',\n            syntax: () => {\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Builds a SELECT SQL query.\n     *\n     * @param {QueryOptions} options - Options for the SELECT query.\n     * @returns {object} - An object containing the query name, type, and the SQL syntax.\n     * @memberof DynamicQueryBuilder\n     */\n\n    buildSelectQuery(options: QueryOptions): object {\n        const {\n            queryName,\n            queryType,\n            table,\n            fields = ['*'],\n            conditions = {},\n            joins = [],\n            optionalConditions = null,\n        } = options;\n\n        const whereClauses = Object.keys(conditions).map((key) => {\n            const value = conditions[key];\n            return typeof value === 'string' ? `${key} = '${value}'` : `${key} = ${value}`;\n        });\n\n        if (optionalConditions) {\n            // Adding optional conditions dynamically\n            Object.keys(optionalConditions).forEach((key) => {\n                const value = optionalConditions[key];\n                if (value) {\n                    whereClauses.push(\n                        typeof value === 'string' ? `${key} != '${value}'` : `${key} != ${value}`\n                    );\n                }\n            });\n        }\n\n        const whereClause = whereClauses.length ? `WHERE ${whereClauses.join(' AND ')}` : '';\n        const joinClause = joins.length ? joins.join(' ') : '';\n\n        const sql = `SELECT ${fields.join(', ')} FROM ${table} ${joinClause} ${whereClause}`;\n\n        return {\n            name: queryName ? queryName : 'find',\n            type: queryType ? queryType : 'SELECT_ONE',\n            syntax: () => {\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Builds an UPDATE SQL query.\n     *\n     * @param {QueryOptions} options - Options for the UPDATE query.\n     * @returns {object} - An object containing the query name, type, SQL syntax, and values to be used.\n     * @memberof DynamicQueryBuilder\n     */\n\n    buildUpdateQuery(options: QueryOptions): object {\n        const { table, values = {}, conditions = {}, returningFields = [] } = options;\n\n        const setClauses = Object.keys(values).map((key, index) => `${key} = $${index + 1}`);\n        const whereClauses = Object.keys(conditions).map(\n            (key, index) => `${key} = $${index + Object.keys(values).length + 1}`\n        );\n\n        const returningClause = returningFields.length\n            ? `RETURNING ${returningFields.join(', ')}`\n            : '';\n\n        const sql = `UPDATE ${table} SET ${setClauses.join(', ')} WHERE ${whereClauses.join(' AND ')} ${returningClause};`;\n\n        return {\n            name: 'update',\n            type: 'UPDATE',\n            sql,\n            values: [...Object.values(values), ...Object.values(conditions)],\n        };\n    }\n\n    //     return {\n    //   name: `delete`,\n    //   type: `UPDATE`,\n    //   syntax: (idArea: number) => {\n    //     const sql = `UPDATE Area SET Status = 127 WHERE Status = 1 AND idArea = ${idArea}`;\n\n    //     return sql;\n    //   },\n    // };\n\n    /**\n     * Builds a DELETE SQL query.\n     *\n     * @param {QueryOptions} options - Options for the DELETE query.\n     * @returns {object} - An object containing the query name, type, and the SQL syntax.\n     * @memberof DynamicQueryBuilder\n     */\n\n    buildDeleteQuery(options: QueryOptions): object {\n        const {\n            queryName,\n            queryType,\n            table,\n            conditions = {},\n            optionalConditions = null,\n            joins = [],\n            returningFields = [],\n            deleteType = 'soft',\n        } = options;\n\n        const whereClauses = Object.keys(conditions).map((key) => {\n            const value = conditions[key];\n            return typeof value === 'string' ? `${key} = '${value}'` : `${key} = ${value}`;\n        });\n\n        if (optionalConditions) {\n            // Adding optional conditions dynamically\n            Object.keys(optionalConditions).forEach((key) => {\n                const value = optionalConditions[key];\n                if (value) {\n                    whereClauses.push(\n                        typeof value === 'string' ? `${key} != '${value}'` : `${key} != ${value}`\n                    );\n                }\n            });\n        }\n\n        const whereClause = whereClauses.length ? `WHERE ${whereClauses.join(' AND ')}` : '';\n        const joinClause = joins.length ? joins.join(' ') : '';\n\n        // const whereClauses = Object.keys(conditions).map((key, index) => `${key} = $${index + 1}`);\n        // const whereClause = whereClauses.length ? `WHERE ${whereClauses.join(' AND ')}` : '';\n\n        const returningClause = returningFields.length\n            ? `RETURNING ${returningFields.join(', ')}`\n            : '';\n\n        let sql: string;\n        if (deleteType === 'soft') {\n            sql = `UPDATE ${table} SET status = 127 ${whereClause} ${returningClause};`;\n        } else {\n            sql = `DELETE FROM ${table} ${joinClause} ${whereClause} ${returningClause};`;\n        }\n\n        console.log('QQQQQQQQQQQQQQQQQQQQ', sql);\n\n        return {\n            name: queryName ? queryName : 'delete',\n            type: queryType ? queryType : 'DELETE',\n            syntax: () => {\n                return sql;\n            },\n        };\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EnvVarAppConfigValidator.html":{"url":"classes/EnvVarAppConfigValidator.html","title":"class - EnvVarAppConfigValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EnvVarAppConfigValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/helper/services/config.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Config service\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                API_PREFIX\n                            \n                            \n                                APP_PORT\n                            \n                            \n                                BACKEND_DOMAIN\n                            \n                            \n                                FRONTEND_DOMAIN\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        API_PREFIX\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/helper/services/config.service.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        APP_PORT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@Min(0)@Max(65535)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/helper/services/config.service.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        BACKEND_DOMAIN\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUrl({require_tld: false})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/helper/services/config.service.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        FRONTEND_DOMAIN\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUrl({require_tld: false})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/helper/services/config.service.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsInt, IsOptional, IsString, ValidateIf, IsUrl, Max, Min } from 'class-validator';\nimport * as dotenv from 'dotenv';\n\n// import { FileDriver } from '../../../core/enum/file.type';\nimport { IAppConfig } from '../../../core/interfaces/app.interfaces';\nimport { IAwsConfig } from '../../../core/interfaces/aws.interfaces';\nimport { IFileConfig } from '../../../core/interfaces/file.interfaces';\nimport { IJWTConfig } from '../../../core/interfaces/jwt.interfaces';\nimport { INodeEmailerConfig } from '../../../core/interfaces/node-emailer.interfaces';\n// import { IPostgreSQLConfig } from '../../../core/interfaces/postgres.interfaces';\nimport { ISendGridConfig } from '../../../core/interfaces/sendgrid.interfaces';\nimport { ISMSConfig } from '../../../core/interfaces/sms.interfaces';\nimport { IUploadFileConfig } from '../../../core/interfaces/upload-file.interfaces';\nimport validateConfig from '../../../utils/validate-config';\n\n/**\n * Config service\n * @export\n * @class ConfigService\n */\n\nclass EnvVarAppConfigValidator {\n    @IsInt()\n    @Min(0)\n    @Max(65535)\n    @IsOptional()\n    APP_PORT: number;\n\n    @IsUrl({ require_tld: false })\n    @IsOptional()\n    FRONTEND_DOMAIN: string;\n\n    @IsUrl({ require_tld: false })\n    @IsOptional()\n    BACKEND_DOMAIN: string;\n\n    @IsString()\n    @IsOptional()\n    API_PREFIX: string;\n}\n\n// class EnvVarFileConfigValidator {\n//     // @IsEnum(FileDriver)\n//     // FILE_DRIVER: FileDriver;\n\n//     // @ValidateIf((envValues) =>\n//     //     [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n//     // )\n//     // @IsString()\n//     // AWS_ACCESS_KEY_ID: string;\n\n//     // @ValidateIf((envValues) =>\n//     //     [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n//     // )\n//     // @IsString()\n//     // AWS_SECRET_ACCESS_KEY: string;\n\n//     // @ValidateIf((envValues) =>\n//     //     [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n//     // )\n//     // @IsString()\n//     // AWS_DEFAULT_S3_BUCKET: string;\n\n//     // @ValidateIf((envValues) =>\n//     //     [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n//     // )\n//     @IsString()\n//     AWS_S3_REGION: string;\n// }\n\nexport class ConfigService {\n    constructor() {\n        const nodeEnv = this.nodeEnv;\n        // dotenv.config({\n        //   path: nodeEnv === \"production\" ? \".env\" : `.env.${nodeEnv}`,\n        // });\n        dotenv.config({\n            path:\n                nodeEnv === 'production'\n                    ? '.env.staging'\n                    : nodeEnv === 'staging'\n                      ? '.env.staging'\n                      : '.env.development',\n        });\n\n        // // Replace \\\\n with \\n to support multiline strings in AWS\n        // for (const envName of Object.keys(process.env)) {\n        //   process.env[envName] = process.env[envName].replace(/\\\\n/g, \"\\n\");\n        // }\n    }\n\n    public get(key: string): string {\n        return process.env[key] || 'undefined';\n    }\n\n    public getNumber(key: string): number {\n        return Number(this.get(key));\n    }\n\n    public getBoolean(key: string): boolean {\n        return Boolean(this.get(key));\n    }\n\n    get nodeEnv(): string {\n        return this.get('NODE_ENV') || 'development';\n    }\n\n    // get typeOrmConfig(): TypeOrmModuleOptions {\n    //   const dbConfig = {\n    //     // eslint-disable-next-line @typescript-eslint/prefer-as-const\n    //     type: \"mysql\" as \"mysql\",\n    //     host: this.get(\"DATABASE_HOST\"),\n    //     port: this.getNumber(\"DATABASE_PORT\"),\n    //     username: this.get(\"DATABASE_USER\"),\n    //     password: this.get(\"DATABASE_PASS\"),\n    //     database: this.get(\"DATABASE_SCHEMA\"),\n    //     authSource: \"admin\",\n    //     synchronize: true,\n    //     multipleStatements: true,\n    //     entities: [\"src/**/**.entity{.ts,.js}\"],\n    //     bigNumberStrings: false,\n    //   };\n    //   return dbConfig;\n    // }\n\n    // get appConfig(): IAppConfig {\n    //     validateConfig(process.env, EnvVarAppConfigValidator);\n    //     return {\n    //         name: this.get('APP_NAME') || '',\n    //         workingDirectory: process.env.PWD || process.cwd(),\n    //         frontendDomain: this.get('FRONTEND_DOMAIN') || '',\n    //         backendDomain: this.get('BACKEND_DOMAIN') || '',\n    //         port: this.getNumber('PORT'),\n    //         apiPrefix: this.get('API_PREFIX') || '',\n    //     };\n    // }\n\n    get prismaConfig(): string {\n        return `postgresql://${this.get('POSTGRES_USER')}:${this.get('POSTGRES_PASSWORD')}@${this.get('POSTGRES_HOST')}:${this.get('POSTGRES_PORT')}/${this.get('POSTGRES_NAME')}?connection_limit=${this.get('POSTGRES_CONNECTION_LIMIT')}&pool_timeout=${this.get('POSTGRES_POOL_TIMEOUT')}&schema=${this.get('POSTGRES_SCHEMA')}`;\n    }\n\n    // get awsS3Config(): IAwsConfig {\n    //     return {\n    //         AWS_S3_ACCESS_KEY_ID: this.get('AWS_S3_ACCESS_KEY_ID'),\n    //         AWS_S3_SECRET_ACCESS_KEY: this.get('AWS_S3_SECRET_ACCESS_KEY'),\n    //         AWS_S3_BUCKET_NAME: this.get('AWS_S3_BUCKET_NAME'),\n    //         AWS_S3_DEFAULT_REGION: this.get('AWS_S3_DEFAULT_REGION'),\n    //         AWS_S3_TEMP_DIRECTORY: this.get('AWS_S3_TEMP_DIRECTORY'),\n    //         AWS_S3_ENDPOINT: this.get('AWS_S3_ENDPOINT'),\n    //         AWS_S3_SERVER_HOST: this.get('AWS_S3_SERVER_HOST'),\n    //         AWS_S3_COMPANION_SECRET: this.get('AWS_S3_COMPANION_SECRET'),\n    //         TUS_STORAGE_DRIVER: this.get('TUS_STORAGE_DRIVER'),\n    //     };\n    // }\n\n    // get qrConfig() {\n    //     return {\n    //         QR_IMAGE: this.get('QR_IMAGE') || '',\n    //         QR_IMAGE_PATH: this.get('QR_IMAGE_PATH') || '',\n    //         QR_IMAGE_PATH_SALT: this.get('QR_IMAGE_PATH_SALT') || '',\n    //     };\n    // }\n\n    // get jwtConfig(): IJWTConfig {\n    //     return {\n    //         secret: this.get('JWT_SECRET_KEY'),\n    //         algorithm: this.get('JWT_ALGORITHM'),\n    //         issuer: this.get('JWT_ISSUER'),\n    //         audience: this.get('JWT_AUDIENCE'),\n    //         expiresInSeconds: this.getNumber('JWT_EXPIRES_IN_SECONDS'),\n    //         expirationTime: this.getNumber('JWT_EXPIRATION_TIME'),\n    //     };\n    // }\n\n    // get sendgridConfig(): ISendGridConfig {\n    //     return {\n    //         SENDGRID_API_KEY: this.get('SENDGRID_API_KEY'),\n    //         FROM_EMAIL: this.get('FROM_EMAIL'),\n    //         TO_EMAIL: this.get('TO_EMAIL'),\n    //         WELCOME_EMAIL: this.get('WELCOME_EMAIL'),\n    //     };\n    // }\n\n    // get nodeemailerConfig(): INodeEmailerConfig {\n    //     return {\n    //         NODE_EMAILER_HOST: this.get('NODE_EMAILER_HOST'),\n    //         NODE_EMAILER_PORT: this.getNumber('NODE_EMAILER_PORT'),\n    //         NODE_EMAILER_USER: this.get('NODE_EMAILER_USER'),\n    //         NODE_EMAILER_PASSWORD: this.get('NODE_EMAILER_PASSWORD'),\n    //         NODE_EMAILER_FROM_EMAIL: this.get('NODE_EMAILER_FROM_EMAIL'),\n    //         NODE_EMAILER_TO_EMAIL: this.get('NODE_EMAILER_TO_EMAIL'),\n    //     };\n    // }\n\n    // get smsConfig(): ISMSConfig {\n    //     return {\n    //         SMS_PROVIDER_NAME: this.get('SMS_PROVIDER_NAME'),\n    //         API_KEY: this.get('API_KEY'),\n    //         SENDER_ID: this.get('SENDER_ID'),\n    //     };\n    // }\n\n    // get uploadFileConfig(): IUploadFileConfig {\n    //     return {\n    //         TEMP_FILE_UPLOAD_URL: this.get('TEMP_FILE_UPLOAD_URL'),\n    //         FILE_UPLOAD_DESTINATION: this.get('FILE_UPLOAD_DESTINATION'),\n    //         MAX_UPLOAD_FILE_SIZE: this.getNumber('MAX_UPLOAD_FILE_SIZE'),\n    //         PROFILE_PIC_FILE_PATH: this.get('PROFILE_PIC_FILE_PATH'),\n    //         MULTIPLE_FILE_PATH: this.get('MULTIPLE_FILE_PATH'),\n    //     };\n    // }\n\n    // get fileConfig(): IFileConfig {\n    //     // validateConfig(process.env, EnvVarFileConfigValidator);\n    //     return {\n    //         driver: (this.get('FILE_DRIVER') as any | undefined) ?? undefined,\n    //         accessKeyId: this.get('AWS_ACCESS_KEY_ID'),\n    //         secretAccessKey: this.get('AWS_SECRET_ACCESS_KEY'),\n    //         awsDefaultS3Bucket: this.get('AWS_DEFAULT_S3_BUCKET'),\n    //         awsS3Region: this.get('AWS_S3_REGION'),\n    //         maxFileSize: 5242880, // 5mb\n    //     };\n    // }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EnvironmentVariablesValidator.html":{"url":"classes/EnvironmentVariablesValidator.html","title":"class - EnvironmentVariablesValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EnvironmentVariablesValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/database.config.ts\n        \n\n\n            \n                Description\n            \n            \n                Class to validate environment variables using class-validator decorators.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                DATABASE_CA\n                            \n                            \n                                DATABASE_CERT\n                            \n                            \n                                DATABASE_KEY\n                            \n                            \n                                DATABASE_REJECT_UNAUTHORIZED\n                            \n                            \n                                DATABASE_SSL_ENABLED\n                            \n                            \n                                DATABASE_SYNCHRONIZE\n                            \n                            \n                                DATABASE_URL\n                            \n                            \n                                POSTGRES_HOST\n                            \n                            \n                                POSTGRES_MAX_CONNECTIONS\n                            \n                            \n                                POSTGRES_NAME\n                            \n                            \n                                POSTGRES_PASSWORD\n                            \n                            \n                                POSTGRES_PORT\n                            \n                            \n                                POSTGRES_USER\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        DATABASE_CA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:139\n                        \n                    \n\n            \n                \n                    Path to the SSL CA certificate.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DATABASE_CERT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:161\n                        \n                    \n\n            \n                \n                    Path to the SSL certificate file.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DATABASE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:150\n                        \n                    \n\n            \n                \n                    Path to the SSL key file.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DATABASE_REJECT_UNAUTHORIZED\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:128\n                        \n                    \n\n            \n                \n                    Whether to reject unauthorized SSL certificates.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DATABASE_SSL_ENABLED\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:117\n                        \n                    \n\n            \n                \n                    Whether to enable SSL for the database connection.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DATABASE_SYNCHRONIZE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:95\n                        \n                    \n\n            \n                \n                    Whether to synchronize the database schema on every application start.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DATABASE_URL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateIf(undefined)@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:26\n                        \n                    \n\n            \n                \n                    URL for the database connection. Overrides individual PostgreSQL settings if provided.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        POSTGRES_HOST\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateIf(undefined)@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:37\n                        \n                    \n\n            \n                \n                    PostgreSQL host if DATABASE_URL is not provided.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        POSTGRES_MAX_CONNECTIONS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:106\n                        \n                    \n\n            \n                \n                    Maximum number of PostgreSQL connections.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        POSTGRES_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateIf(undefined)@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:73\n                        \n                    \n\n            \n                \n                    PostgreSQL database name if DATABASE_URL is not provided.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        POSTGRES_PASSWORD\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateIf(undefined)@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:62\n                        \n                    \n\n            \n                \n                    PostgreSQL password if DATABASE_URL is not provided.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        POSTGRES_PORT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateIf(undefined)@IsInt()@Min(0)@Max(65535)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:51\n                        \n                    \n\n            \n                \n                    PostgreSQL port if DATABASE_URL is not provided.\nMust be between 0 and 65535.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        POSTGRES_USER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateIf(undefined)@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database.config.ts:84\n                        \n                    \n\n            \n                \n                    PostgreSQL user if DATABASE_URL is not provided.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { registerAs } from '@nestjs/config';\n\nimport { IsOptional, IsInt, Min, Max, IsString, ValidateIf, IsBoolean } from 'class-validator';\n\nimport validateConfig from '@utils/validate-config';\n\nimport { DatabaseConfig } from './type/database-config.type';\n\n/**\n * Class to validate environment variables using class-validator decorators.\n *\n * @export\n * @class EnvironmentVariablesValidator\n */\n\nclass EnvironmentVariablesValidator {\n    /**\n     * URL for the database connection. Overrides individual PostgreSQL settings if provided.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @ValidateIf((envValues) => envValues.DATABASE_URL)\n    @IsString()\n    DATABASE_URL: string;\n\n    /**\n     * PostgreSQL host if `DATABASE_URL` is not provided.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @ValidateIf((envValues) => !envValues.DATABASE_URL)\n    @IsString()\n    POSTGRES_HOST: string;\n\n    /**\n     * PostgreSQL port if `DATABASE_URL` is not provided.\n     * Must be between 0 and 65535.\n     *\n     * @type {number}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @ValidateIf((envValues) => !envValues.DATABASE_URL)\n    @IsInt()\n    @Min(0)\n    @Max(65535)\n    POSTGRES_PORT: number;\n\n    /**\n     * PostgreSQL password if `DATABASE_URL` is not provided.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @ValidateIf((envValues) => !envValues.DATABASE_URL)\n    @IsString()\n    POSTGRES_PASSWORD: string;\n\n    /**\n     * PostgreSQL database name if `DATABASE_URL` is not provided.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @ValidateIf((envValues) => !envValues.DATABASE_URL)\n    @IsString()\n    POSTGRES_NAME: string;\n\n    /**\n     * PostgreSQL user if `DATABASE_URL` is not provided.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @ValidateIf((envValues) => !envValues.DATABASE_URL)\n    @IsString()\n    POSTGRES_USER: string;\n\n    /**\n     * Whether to synchronize the database schema on every application start.\n     *\n     * @type {boolean}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @IsBoolean()\n    @IsOptional()\n    DATABASE_SYNCHRONIZE: boolean;\n\n    /**\n     * Maximum number of PostgreSQL connections.\n     *\n     * @type {number}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @IsInt()\n    @IsOptional()\n    POSTGRES_MAX_CONNECTIONS: number;\n\n    /**\n     * Whether to enable SSL for the database connection.\n     *\n     * @type {boolean}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @IsBoolean()\n    @IsOptional()\n    DATABASE_SSL_ENABLED: boolean;\n\n    /**\n     * Whether to reject unauthorized SSL certificates.\n     *\n     * @type {boolean}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @IsBoolean()\n    @IsOptional()\n    DATABASE_REJECT_UNAUTHORIZED: boolean;\n\n    /**\n     * Path to the SSL CA certificate.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @IsString()\n    @IsOptional()\n    DATABASE_CA: string;\n\n    /**\n     * Path to the SSL key file.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @IsString()\n    @IsOptional()\n    DATABASE_KEY: string;\n\n    /**\n     * Path to the SSL certificate file.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @IsString()\n    @IsOptional()\n    DATABASE_CERT: string;\n}\n\n/**\n * Configuration registration and validation for database settings.\n *\n * Registers the database configuration with NestJS and validates the environment variables\n * using `EnvironmentVariablesValidator`. Returns a `DatabaseConfig` object with default values\n * and environment variable values for the database configuration.\n *\n * @export\n * @function\n * @returns {DatabaseConfig} The database configuration.\n */\n\nexport default registerAs('database', (): DatabaseConfig => {\n    validateConfig(process.env, EnvironmentVariablesValidator);\n\n    return {\n        url: `postgresql://${process.env.POSTGRES_USER}:${process.env.POSTGRES_PASSWORD}@${process.env.POSTGRES_HOST}:${process.env.POSTGRES_PORT}/${process.env.POSTGRES_NAME}?connection_limit=${process.env.POSTGRES_MAX_CONNECTIONS}&pool_timeout=${process.env.POSTGRES_POOL_TIMEOUT}&schema=${process.env.POSTGRES_SCHEMA}`,\n        host: process.env.POSTGRES_HOST,\n        port: process.env.POSTGRES_PORT ? parseInt(process.env.POSTGRES_PORT, 10) : 5432,\n        password: process.env.POSTGRES_PASSWORD,\n        name: process.env.POSTGRES_NAME,\n        username: process.env.POSTGRES_USER,\n        synchronize: process.env.DATABASE_SYNCHRONIZE === 'true',\n        maxConnections: process.env.POSTGRES_MAX_CONNECTIONS\n            ? parseInt(process.env.POSTGRES_MAX_CONNECTIONS, 10)\n            : 100,\n        poolTimeout: process.env.POSTGRES_POOL_TIMEOUT\n            ? parseInt(process.env.POSTGRES_POOL_TIMEOUT, 10)\n            : 100,\n        schema: process.env.POSTGRES_SCHEMA ? process.env.POSTGRES_SCHEMA : 'public',\n        sslEnabled: process.env.DATABASE_SSL_ENABLED === 'true',\n        rejectUnauthorized: process.env.DATABASE_REJECT_UNAUTHORIZED === 'true',\n        ca: process.env.DATABASE_CA,\n        key: process.env.DATABASE_KEY,\n        cert: process.env.DATABASE_CERT,\n    };\n});\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EnvironmentVariablesValidator-1.html":{"url":"classes/EnvironmentVariablesValidator-1.html","title":"class - EnvironmentVariablesValidator-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EnvironmentVariablesValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/app.config.ts\n        \n\n\n            \n                Description\n            \n            \n                Class to validate environment variables using class-validator decorators.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                API_PREFIX\n                            \n                            \n                                APP_DESCRIPTION\n                            \n                            \n                                APP_NAME\n                            \n                            \n                                APP_PORT\n                            \n                            \n                                APP_PREFIX\n                            \n                            \n                                APP_VERSION\n                            \n                            \n                                BACKEND_DOMAIN\n                            \n                            \n                                FRONTEND_DOMAIN\n                            \n                            \n                                NODE_ENV\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        API_PREFIX\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/app.config.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        APP_DESCRIPTION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/app.config.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        APP_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/app.config.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        APP_PORT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@Min(0)@Max(65535)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/app.config.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        APP_PREFIX\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/app.config.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        APP_VERSION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/app.config.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        BACKEND_DOMAIN\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUrl({require_tld: false})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/app.config.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        FRONTEND_DOMAIN\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUrl({require_tld: false})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/app.config.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        NODE_ENV\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Environment\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(Environment)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/app.config.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { registerAs } from '@nestjs/config';\n\nimport { IsEnum, IsInt, IsOptional, IsString, IsUrl, Max, Min } from 'class-validator';\n\nimport { AppConfig } from '@config/type/app-config.type';\nimport validateConfig from '@utils/validate-config';\n\nenum Environment {\n    Development = 'development',\n    Production = 'production',\n    Staging = 'staging',\n    Test = 'testing',\n}\n\n/**\n * Class to validate environment variables using class-validator decorators.\n *\n * @export\n * @class EnvironmentVariablesValidator\n */\n\nclass EnvironmentVariablesValidator {\n    @IsEnum(Environment)\n    @IsOptional()\n    NODE_ENV: Environment;\n\n    @IsString()\n    @IsOptional()\n    APP_NAME: string;\n\n    @IsString()\n    @IsOptional()\n    APP_DESCRIPTION: string;\n\n    @IsString()\n    @IsOptional()\n    APP_VERSION: string;\n\n    @IsString()\n    @IsOptional()\n    APP_PREFIX: string;\n\n    @IsInt()\n    @Min(0)\n    @Max(65535)\n    @IsOptional()\n    APP_PORT: number;\n\n    @IsUrl({ require_tld: false })\n    @IsOptional()\n    FRONTEND_DOMAIN: string;\n\n    @IsUrl({ require_tld: false })\n    @IsOptional()\n    BACKEND_DOMAIN: string;\n\n    @IsString()\n    @IsOptional()\n    API_PREFIX: string;\n}\n\n/**\n * Configuration registration and validation.\n *\n * Registers the configuration with NestJS and validates the environment variables\n * using `EnvironmentVariablesValidator`. Returns an `AppConfig` object with default values\n * for the application configuration.\n *\n * @export\n * @function\n * @returns {AppConfig} The application configuration.\n */\n\nexport default registerAs('app', (): AppConfig => {\n    validateConfig(process.env, EnvironmentVariablesValidator);\n\n    return {\n        nodeEnv: process.env.NODE_ENV || 'development',\n        name: process.env.APP_NAME || 'app',\n        description: process.env.APP_DESCRIPTION || 'description',\n        version: process.env.APP_VERSION || '1',\n        appPrefix: process.env.APP_PREFIX || 'docs',\n        workingDirectory: process.env.PWD || process.cwd(),\n        frontendDomain: process.env.FRONTEND_DOMAIN,\n        backendDomain: process.env.BACKEND_DOMAIN ?? 'http://localhost',\n        port: process.env.APP_PORT\n            ? parseInt(process.env.APP_PORT, 10)\n            : process.env.PORT\n              ? parseInt(process.env.PORT, 10)\n              : 3000,\n        apiPrefix: process.env.API_PREFIX || 'api',\n    };\n});\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EnvironmentVariablesValidator-2.html":{"url":"classes/EnvironmentVariablesValidator-2.html","title":"class - EnvironmentVariablesValidator-2","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EnvironmentVariablesValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/file.config.ts\n        \n\n\n            \n                Description\n            \n            \n                Class to validate environment variables related to file storage configuration.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                AWS_ACCESS_KEY_ID\n                            \n                            \n                                AWS_DEFAULT_S3_BUCKET\n                            \n                            \n                                AWS_S3_REGION\n                            \n                            \n                                AWS_SECRET_ACCESS_KEY\n                            \n                            \n                                FILE_DRIVER\n                            \n                            \n                                MAX_FILE_SIZE\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        AWS_ACCESS_KEY_ID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateIf(undefined)@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/file.config.ts:38\n                        \n                    \n\n            \n                \n                    AWS access key ID, required if using S3 or presigned S3 driver.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        AWS_DEFAULT_S3_BUCKET\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateIf(undefined)@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/file.config.ts:64\n                        \n                    \n\n            \n                \n                    Default S3 bucket name, required if using S3 or presigned S3 driver.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        AWS_S3_REGION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateIf(undefined)@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/file.config.ts:77\n                        \n                    \n\n            \n                \n                    AWS S3 region, required if using S3 or presigned S3 driver.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        AWS_SECRET_ACCESS_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateIf(undefined)@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/file.config.ts:51\n                        \n                    \n\n            \n                \n                    AWS secret access key, required if using S3 or presigned S3 driver.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        FILE_DRIVER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FileDriver\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(FileDriver)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/file.config.ts:25\n                        \n                    \n\n            \n                \n                    Driver for file storage. Specifies the method of file storage, e.g., local file system or S3.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MAX_FILE_SIZE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/file.config.ts:88\n                        \n                    \n\n            \n                \n                    Maximum file size allowed for uploads, in bytes.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { registerAs } from '@nestjs/config';\n\nimport { IsEnum, IsString, ValidateIf, IsOptional } from 'class-validator';\n\nimport { FileDriver, FileConfig } from '@config/type/file-config.type';\nimport validateConfig from '@utils/validate-config';\n\n/**\n * Class to validate environment variables related to file storage configuration.\n *\n * @export\n * @class EnvironmentVariablesValidator\n */\n\nclass EnvironmentVariablesValidator {\n    /**\n     * Driver for file storage. Specifies the method of file storage, e.g., local file system or S3.\n     *\n     * @type {FileDriver}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @IsEnum(FileDriver)\n    @IsOptional()\n    FILE_DRIVER: FileDriver;\n\n    /**\n     * AWS access key ID, required if using S3 or presigned S3 driver.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @ValidateIf((envValues) =>\n        [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n    )\n    @IsString()\n    AWS_ACCESS_KEY_ID: string;\n\n    /**\n     * AWS secret access key, required if using S3 or presigned S3 driver.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @ValidateIf((envValues) =>\n        [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n    )\n    @IsString()\n    AWS_SECRET_ACCESS_KEY: string;\n\n    /**\n     * Default S3 bucket name, required if using S3 or presigned S3 driver.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @ValidateIf((envValues) =>\n        [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n    )\n    @IsString()\n    AWS_DEFAULT_S3_BUCKET: string;\n\n    /**\n     * AWS S3 region, required if using S3 or presigned S3 driver.\n     *\n     * @type {string}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @ValidateIf((envValues) =>\n        [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER)\n    )\n    @IsString()\n    AWS_S3_REGION: string;\n\n    /**\n     * Maximum file size allowed for uploads, in bytes.\n     *\n     * @type {number}\n     * @memberof EnvironmentVariablesValidator\n     */\n\n    @IsString()\n    @IsOptional()\n    MAX_FILE_SIZE: number;\n}\n\n/**\n * Configuration registration and validation for file storage settings.\n *\n * Registers the file storage configuration with NestJS and validates the environment variables\n * using `EnvironmentVariablesValidator`. Returns a `FileConfig` object with default values\n * and environment variable values for file storage configuration.\n *\n * @export\n * @function\n * @returns {FileConfig} The file storage configuration.\n */\n\nexport default registerAs('file', (): FileConfig => {\n    validateConfig(process.env, EnvironmentVariablesValidator);\n\n    // console.log(\n    //     'registerAS fileconfig',\n    //     (process.env.FILE_DRIVER as FileDriver | undefined) ?? FileDriver.LOCAL,\n    //     process.env.FILE_DRIVER,\n    //     process.env\n    // );\n\n    return {\n        driver: (process.env.FILE_DRIVER as FileDriver | undefined) ?? FileDriver.LOCAL,\n        accessKeyId: process.env.AWS_ACCESS_KEY_ID,\n        secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,\n        awsDefaultS3Bucket: process.env.AWS_DEFAULT_S3_BUCKET,\n        awsS3Region: process.env.AWS_S3_REGION,\n        maxFileSize: process.env.MAX_FILE_SIZE\n            ? parseInt(process.env.MAX_FILE_SIZE, 10)\n            : process.env.MAX_FILE_SIZE\n              ? parseInt(process.env.MAX_FILE_SIZE, 10)\n              : 5242880,\n        // maxFileSize: 5242880, // 5mb\n    };\n});\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EnvironmentVariablesValidator-3.html":{"url":"classes/EnvironmentVariablesValidator-3.html","title":"class - EnvironmentVariablesValidator-3","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EnvironmentVariablesValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/logger.config.ts\n        \n\n\n            \n                Description\n            \n            \n                Class to validate environment variables using class-validator decorators.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                LOGGER_APP\n                            \n                            \n                                LOGGER_CONSOLE_PRINT\n                            \n                            \n                                LOGGER_CONTEXT\n                            \n                            \n                                LOGGER_DATABASE_STORAGE\n                            \n                            \n                                LOGGER_DURATION\n                            \n                            \n                                LOGGER_DURATION_LOG_LEVEL\n                            \n                            \n                                LOGGER_LOG_IN_FILE\n                            \n                            \n                                LOGGER_LOG_LEVEL\n                            \n                            \n                                LOGGER_ORGANIZATION\n                            \n                            \n                                LOGGER_SLACK_INC_WEBHOOK_URL\n                            \n                            \n                                NODE_ENV\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        LOGGER_APP\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/logger.config.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LOGGER_CONSOLE_PRINT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/logger.config.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LOGGER_CONTEXT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/logger.config.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LOGGER_DATABASE_STORAGE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/logger.config.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LOGGER_DURATION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/logger.config.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LOGGER_DURATION_LOG_LEVEL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/logger.config.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LOGGER_LOG_IN_FILE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/logger.config.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LOGGER_LOG_LEVEL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/logger.config.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LOGGER_ORGANIZATION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/logger.config.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LOGGER_SLACK_INC_WEBHOOK_URL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/logger.config.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        NODE_ENV\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Environment\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(Environment)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/logger.config.ts:30\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { registerAs } from '@nestjs/config';\n\nimport { IsEnum, IsString, IsOptional, IsBoolean } from 'class-validator';\n\nimport { LoggerConfig } from '@config/type/logger-config.type';\nimport validateConfig from '@utils/validate-config';\n\nconst getBooleanEnvVar = (key: string, defaultValue: boolean = false): boolean => {\n    const value = process.env[key];\n    return value ? value.toLowerCase() === 'true' : defaultValue;\n};\n\nenum Environment {\n    Development = 'development',\n    Production = 'production',\n    Staging = 'staging',\n    Test = 'testing',\n}\n\n/**\n * Class to validate environment variables using class-validator decorators.\n *\n * @export\n * @class EnvironmentVariablesValidator\n */\n\nclass EnvironmentVariablesValidator {\n    @IsEnum(Environment)\n    @IsOptional()\n    NODE_ENV: Environment;\n\n    @IsOptional()\n    @IsString()\n    LOGGER_ORGANIZATION: string;\n\n    @IsOptional()\n    @IsString()\n    LOGGER_CONTEXT: string;\n\n    @IsOptional()\n    @IsString()\n    LOGGER_APP: string;\n\n    @IsOptional()\n    @IsBoolean()\n    LOGGER_DATABASE_STORAGE: boolean;\n\n    @IsOptional()\n    @IsString()\n    LOGGER_LOG_LEVEL: string;\n\n    @IsOptional()\n    @IsBoolean()\n    LOGGER_DURATION: boolean;\n\n    @IsOptional()\n    @IsString()\n    LOGGER_DURATION_LOG_LEVEL: string;\n\n    @IsOptional()\n    @IsBoolean()\n    LOGGER_CONSOLE_PRINT: boolean;\n\n    @IsOptional()\n    @IsBoolean()\n    LOGGER_LOG_IN_FILE: boolean;\n\n    @IsOptional()\n    @IsString()\n    LOGGER_SLACK_INC_WEBHOOK_URL: string;\n}\n\n/**\n * Configuration registration and validation.\n *\n * Registers the configuration with NestJS and validates the environment variables\n * using `EnvironmentVariablesValidator`. Returns an `LoggerConfig` object with default values\n * for the application configuration.\n *\n * @export\n * @function\n * @returns {LoggerConfig} The logger configuration.\n */\n\nexport default registerAs('logger', (): LoggerConfig => {\n    validateConfig(process.env, EnvironmentVariablesValidator);\n\n    return {\n        nodeEnv: process.env.NODE_ENV || 'development',\n        organization: process.env.LOGGER_ORGANIZATION || 'org',\n        context: process.env.LOGGER_CONTEXT || 'mycontext',\n        app: process.env.LOGGER_APP || 'api',\n        database_storage: getBooleanEnvVar('LOGGER_DATABASE_STORAGE', false),\n        database_log_level: process.env.LOGGER_LOG_LEVEL || 'error',\n        duration: getBooleanEnvVar('LOGGER_DURATION', false),\n        duration_log_level: process.env.LOGGER_DURATION_LOG_LEVEL || 'info',\n        console_print: getBooleanEnvVar('LOGGER_CONSOLE_PRINT', false),\n        log_in_file: getBooleanEnvVar('LOGGER_LOG_IN_FILE', false),\n        slack_webhook:\n            process.env.LOGGER_SLACK_INC_WEBHOOK_URL ||\n            'https://hooks.slack.com/services/XXXXXXXXX/XXXXXXXXX/XXXXXXXXXXXXXXXXXXXXXXXX',\n    };\n});\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileNotImageException.html":{"url":"classes/FileNotImageException.html","title":"class - FileNotImageException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileNotImageException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/exceptions/file-not-image.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Exception class for handling non-image file uploads.\nimport { FileNotImageException } from './path/to/exception';\n\nthrow new FileNotImageException('Custom error message');\n            \n\n            \n                Extends\n            \n            \n                    BadRequestException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message?: string | any, error?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/exceptions/file-not-image.exception.ts:20\n                            \n                        \n\n                \n                    \n                            Creates an instance of FileNotImageException.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                    string | any\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                \nOptional custom error message.\n\n\n                                                        \n                                                \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                \nOptional custom error code.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        'use strict';\n\nimport { BadRequestException } from '@nestjs/common';\n\n/**\n * Exception class for handling non-image file uploads.\n *\n * @description This exception is thrown when a file that is not an image is uploaded, extending the `BadRequestException` from NestJS.\n *\n * @example\n * ```typescript\n * import { FileNotImageException } from './path/to/exception';\n *\n * throw new FileNotImageException('Custom error message');\n * ```\n *\n * @extends {BadRequestException}\n */\n\nexport class FileNotImageException extends BadRequestException {\n    /**\n     * Creates an instance of FileNotImageException.\n     *\n     * @param {string | any} [message] - Optional custom error message.\n     * @param {string} [error] - Optional custom error code.\n     */\n\n    constructor(message?: string | any, error?: string) {\n        if (message) {\n            super(message, error);\n        } else {\n            super('error.file.not_image');\n        }\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileResponseDto.html":{"url":"classes/FileResponseDto.html","title":"class - FileResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/local/dto/file-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                The FileResponseDto represents the response object returned when a file is successfully uploaded or processed.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                file\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        file\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FileType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/infrastructure/uploader/local/dto/file-response.dto.ts:27\n                        \n                    \n\n            \n                \n                    The file details.\n{\n  id: 'cbcfa8b8-3a25-4adb-a9c6-e325f0d0f3ae',\n  path: '/api/v1/uploads/example-file.jpg'\n}\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiResponseProperty } from '@nestjs/swagger';\n\nimport { FileType } from '../../../../domain/file';\n\n/**\n * @dto FileResponseDto\n *\n * @description\n * The `FileResponseDto` represents the response object returned when a file is successfully uploaded or processed.\n */\nexport class FileResponseDto {\n    /**\n     * The file details.\n     *\n     * @type {FileType}\n     *\n     * @example\n     * {\n     *   id: 'cbcfa8b8-3a25-4adb-a9c6-e325f0d0f3ae',\n     *   path: '/api/v1/uploads/example-file.jpg'\n     * }\n     */\n\n    @ApiResponseProperty({\n        type: () => FileType,\n    })\n    file: FileType;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileResponseDto-1.html":{"url":"classes/FileResponseDto-1.html","title":"class - FileResponseDto-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/s3/dto/file-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data transfer object (DTO) for representing the response format when returning file metadata. This DTO is used to encapsulate the file's information in API responses.\n\n@ApiResponseProperty(): Marks the property for inclusion in Swagger API documentation.\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                file\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        file\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FileType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/infrastructure/uploader/s3/dto/file-response.dto.ts:34\n                        \n                    \n\n            \n                \n                    Represents the metadata of the uploaded file.\n{\n    \"id\": \"cbcfa8b8-3a25-4adb-a9c6-e325f0d0f3ae\",\n    \"path\": \"https://example.com/path/to/file.jpg\"\n}\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiResponseProperty } from '@nestjs/swagger';\n\nimport { FileType } from '../../../../domain/file';\n\n/**\n * @dto FileResponseDto\n *\n * @description\n * Data transfer object (DTO) for representing the response format when returning file metadata. This DTO is used to encapsulate the file's information in API responses.\n *\n * @properties\n *\n * @property {FileType} file - Represents the metadata of the uploaded file, including its path and any other relevant information.\n *\n * @decorators\n * - `@ApiResponseProperty()`: Marks the property for inclusion in Swagger API documentation.\n */\nexport class FileResponseDto {\n    /**\n     * Represents the metadata of the uploaded file.\n     *\n     * @type {FileType}\n     * @description Contains details about the file, such as its path and identifier.\n     * @example\n     * {\n     *     \"id\": \"cbcfa8b8-3a25-4adb-a9c6-e325f0d0f3ae\",\n     *     \"path\": \"https://example.com/path/to/file.jpg\"\n     * }\n     */\n\n    @ApiResponseProperty({\n        type: () => FileType,\n    })\n    file: FileType;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileResponseDto-2.html":{"url":"classes/FileResponseDto-2.html","title":"class - FileResponseDto-2","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/s3-presigned/dto/file-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                The FileResponseDto class represents the response structure for file operations, including the file metadata and upload signed URL. This DTO is used to standardize the response format for file upload operations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                file\n                            \n                            \n                                uploadSignedUrl\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        file\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FileType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/infrastructure/uploader/s3-presigned/dto/file-response.dto.ts:27\n                        \n                    \n\n            \n                \n                    The metadata of the file, including its path and other relevant information.\n{\n  id: 'abc123',\n  path: '/files/example.jpg'\n}\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uploadSignedUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/infrastructure/uploader/s3-presigned/dto/file-response.dto.ts:41\n                        \n                    \n\n            \n                \n                    The presigned URL for uploading the file to the server or cloud storage.\nThis URL is used to securely upload the file to the specified location.\n'https://example-bucket.s3.amazonaws.com/unique-file-key?AWSAccessKeyId=ACCESS_KEY&Expires=EXPIRATION_TIME&Signature=SIGNATURE'\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiResponseProperty } from '@nestjs/swagger';\n\nimport { FileType } from '../../../../domain/file';\n\n/**\n * @class FileResponseDto\n *\n * @description\n * The `FileResponseDto` class represents the response structure for file operations, including the file metadata and upload signed URL. This DTO is used to standardize the response format for file upload operations.\n */\n\nexport class FileResponseDto {\n    /**\n     * The metadata of the file, including its path and other relevant information.\n     *\n     * @type {FileType}\n     * @example\n     * {\n     *   id: 'abc123',\n     *   path: '/files/example.jpg'\n     * }\n     */\n\n    @ApiResponseProperty({\n        type: () => FileType,\n    })\n    file: FileType;\n\n    /**\n     * The presigned URL for uploading the file to the server or cloud storage.\n     * This URL is used to securely upload the file to the specified location.\n     *\n     * @type {string}\n     * @example\n     * 'https://example-bucket.s3.amazonaws.com/unique-file-key?AWSAccessKeyId=ACCESS_KEY&Expires=EXPIRATION_TIME&Signature=SIGNATURE'\n     */\n\n    @ApiResponseProperty({\n        type: String,\n    })\n    uploadSignedUrl: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileType.html":{"url":"classes/FileType.html","title":"class - FileType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/domain/file.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the FileType class used for representing file metadata and handling file paths.\nThe FileType class represents the metadata associated with a file, including its unique identifier and file path.\nIt uses decorators from @nestjs/swagger for API documentation and class-transformer for transforming file paths based on the file configuration.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                path\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'cbcfa8b8-3a25-4adb-a9c6-e325f0d0f3ae'})@Allow()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/domain/file.ts:35\n                        \n                    \n\n            \n                \n                    The unique identifier for the file.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'https://example.com/path/to/file.jpg'})@Transform(undefined, {toPlainOnly: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/domain/file.ts:81\n                        \n                    \n\n            \n                \n                    The URL or path of the file. Transforms the file path based on the file driver configuration.\nIf the driver is LOCAL, the URL is constructed using the backend domain.\nIf the driver is S3 or S3_PRESIGNED, a presigned URL is generated for accessing the file.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiResponseProperty } from '@nestjs/swagger';\n\nimport { GetObjectCommand, S3Client } from '@aws-sdk/client-s3';\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner';\nimport { Transform } from 'class-transformer';\nimport { Allow } from 'class-validator';\n\nimport appConfig from '@config/app.config';\nimport fileConfig from '@config/file.config';\nimport { AppConfig } from '@config/type/app-config.type';\nimport { FileConfig, FileDriver } from '@config/type/file-config.type';\n\n/**\n * @fileoverview\n * Defines the `FileType` class used for representing file metadata and handling file paths.\n *\n * @module\n * @description\n * The `FileType` class represents the metadata associated with a file, including its unique identifier and file path.\n * It uses decorators from `@nestjs/swagger` for API documentation and `class-transformer` for transforming file paths based on the file configuration.\n */\nexport class FileType {\n    /**\n     * The unique identifier for the file.\n     *\n     * @example 'cbcfa8b8-3a25-4adb-a9c6-e325f0d0f3ae'\n     * @type {string}\n     */\n\n    @ApiProperty({\n        type: String,\n        example: 'cbcfa8b8-3a25-4adb-a9c6-e325f0d0f3ae',\n    })\n    @Allow()\n    id: string;\n\n    /**\n     * The URL or path of the file. Transforms the file path based on the file driver configuration.\n     * If the driver is LOCAL, the URL is constructed using the backend domain.\n     * If the driver is S3 or S3_PRESIGNED, a presigned URL is generated for accessing the file.\n     *\n     * @example 'https://example.com/path/to/file.jpg'\n     * @type {string}\n     */\n\n    @ApiResponseProperty({\n        type: String,\n        example: 'https://example.com/path/to/file.jpg',\n    })\n    @Transform(\n        ({ value }) => {\n            if ((fileConfig() as FileConfig).driver === FileDriver.LOCAL) {\n                return (appConfig() as AppConfig).backendDomain + value;\n            } else if (\n                [FileDriver.S3_PRESIGNED, FileDriver.S3].includes(\n                    (fileConfig() as FileConfig).driver\n                )\n            ) {\n                const s3 = new S3Client({\n                    region: (fileConfig() as FileConfig).awsS3Region ?? '',\n                    credentials: {\n                        accessKeyId: (fileConfig() as FileConfig).accessKeyId ?? '',\n                        secretAccessKey: (fileConfig() as FileConfig).secretAccessKey ?? '',\n                    },\n                });\n\n                const command = new GetObjectCommand({\n                    Bucket: (fileConfig() as FileConfig).awsDefaultS3Bucket ?? '',\n                    Key: value,\n                });\n\n                return getSignedUrl(s3, command, { expiresIn: 3600 });\n            }\n\n            return value;\n        },\n        {\n            toPlainOnly: true,\n        }\n    )\n    path: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileUploadDto.html":{"url":"classes/FileUploadDto.html","title":"class - FileUploadDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileUploadDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/s3-presigned/dto/file.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                The FileUploadDto class defines the data transfer object for uploading files. It includes properties to specify the file's name and size. This DTO is used to validate and document the data required for file upload operations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                fileName\n                            \n                            \n                                fileSize\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        fileName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'image.jpg'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/infrastructure/uploader/s3-presigned/dto/file.dto.ts:23\n                        \n                    \n\n            \n                \n                    The name of the file to be uploaded.\n'image.jpg'\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fileSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 138723})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/infrastructure/uploader/s3-presigned/dto/file.dto.ts:35\n                        \n                    \n\n            \n                \n                    The size of the file in bytes.\n138723\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nimport { IsNumber, IsString } from 'class-validator';\n\n/**\n * @class FileUploadDto\n *\n * @description\n * The `FileUploadDto` class defines the data transfer object for uploading files. It includes properties to specify the file's name and size. This DTO is used to validate and document the data required for file upload operations.\n */\n\nexport class FileUploadDto {\n    /**\n     * The name of the file to be uploaded.\n     *\n     * @type {string}\n     * @example\n     * 'image.jpg'\n     */\n\n    @ApiProperty({ example: 'image.jpg' })\n    @IsString()\n    fileName: string;\n\n    /**\n     * The size of the file in bytes.\n     *\n     * @type {number}\n     * @example\n     * 138723\n     */\n\n    @ApiProperty({ example: 138723 })\n    @IsNumber()\n    fileSize: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FilesLocalController.html":{"url":"controllers/FilesLocalController.html","title":"controller - FilesLocalController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FilesLocalController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/local/files.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                The FilesLocalController is responsible for handling file operations related to local storage.\nIt provides endpoints for uploading and downloading files.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                download\n                            \n                            \n                                    Async\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        download\n                        \n                    \n                \n            \n            \n                \ndownload(path: string, response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('local/download/:path')\n                \n            \n\n            \n                \n                    Defined in src/modules/files/infrastructure/uploader/local/files.controller.ts:96\n                \n            \n\n\n            \n                \n                    Downloads a file from local storage.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The path to the file to be downloaded.\n\n                                    \n                                \n                                \n                                    response\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        A file response stream.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadFile(file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiCreatedResponse({type: FileResponseDto})@Post('upload')@ApiConsumes('multipart/form-data')@ApiBody({schema: undefined})@ApiFile()@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/modules/files/infrastructure/uploader/local/files.controller.ts:79\n                \n            \n\n\n            \n                \n                    Uploads a file to local storage.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The file to be uploaded.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        FileResponseDto The response containing file details after upload.\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Get,\n    Param,\n    Post,\n    Response,\n    UploadedFile,\n    UseInterceptors,\n} from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport {\n    ApiBody,\n    ApiConsumes,\n    ApiCreatedResponse,\n    // ApiExcludeEndpoint,\n    ApiTags,\n} from '@nestjs/swagger';\n\nimport { diskStorage } from 'multer';\n\n// import { ApiFile } from '@decorators/swagger.schema';\nimport { ApiFile } from '@decorators/swagger.schema';\nimport { filesRoot, editFileName, imageFileFilter } from '@providers/file-upload.service';\n\nimport { FileResponseDto } from './dto/file-response.dto';\nimport { FilesLocalService } from './files.service';\n\n/**\n * @controller FilesLocalController\n *\n * @description\n * The `FilesLocalController` is responsible for handling file operations related to local storage.\n * It provides endpoints for uploading and downloading files.\n */\n\n@ApiTags('Files')\n@Controller()\nexport class FilesLocalController {\n    constructor(private readonly filesService: FilesLocalService) {}\n\n    /**\n     * Uploads a file to local storage.\n     *\n     * @endpoint POST /v1/upload\n     * @consumes multipart/form-data\n     *\n     * @param file The file to be uploaded.\n     * @returns FileResponseDto The response containing file details after upload.\n     *\n     * @throws { HttpException } If there is an error during file upload.\n     */\n\n    @ApiCreatedResponse({\n        type: FileResponseDto,\n    })\n    @Post('upload')\n    @ApiConsumes('multipart/form-data')\n    @ApiBody({\n        schema: {\n            type: 'object',\n            properties: {\n                file: {\n                    type: 'string',\n                    format: 'binary',\n                },\n            },\n        },\n    })\n    @ApiFile()\n    @UseInterceptors(\n        FileInterceptor('file', {\n            storage: diskStorage({\n                destination: filesRoot() + '/local',\n                filename: editFileName,\n            }),\n            fileFilter: imageFileFilter,\n        })\n    )\n    async uploadFile(@UploadedFile() file: Express.Multer.File): Promise {\n        return this.filesService.create(file);\n    }\n\n    /**\n     * Downloads a file from local storage.\n     *\n     * @endpoint GET /:path\n     *\n     * @param path The path to the file to be downloaded.\n     * @returns A file response stream.\n     *\n     * @throws { HttpException } If the file cannot be found or there is an error during download.\n     */\n\n    @Get('local/download/:path')\n    //@ApiExcludeEndpoint()\n    download(@Param('path') path: string, @Response() response) {\n        return response.sendFile(path, { root: filesRoot() + '/local' });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FilesLocalModule.html":{"url":"modules/FilesLocalModule.html","title":"module - FilesLocalModule","body":"\n                   \n\n\n\n\n    Modules\n    FilesLocalModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FilesLocalModule\n\n\n\ncluster_FilesLocalModule_exports\n\n\n\ncluster_FilesLocalModule_providers\n\n\n\n\nFilesLocalService \n\nFilesLocalService \n\n\n\nFilesLocalModule\n\nFilesLocalModule\n\nFilesLocalService  -->\n\nFilesLocalModule->FilesLocalService \n\n\n\n\n\nFilesLocalService\n\nFilesLocalService\n\nFilesLocalModule -->\n\nFilesLocalService->FilesLocalModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/local/files.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            The FilesLocalModule is responsible for managing file operations using local storage.\nIt provides the necessary components to handle file uploads, retrievals, and other file-related operations specific to local storage.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FilesLocalService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            FilesLocalController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FilesLocalService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { FilesLocalController } from './files.controller';\nimport { FilesLocalService } from './files.service';\n\n/**\n * @module FilesLocalModule\n *\n * @description\n * The `FilesLocalModule` is responsible for managing file operations using local storage.\n * It provides the necessary components to handle file uploads, retrievals, and other file-related operations specific to local storage.\n */\n@Module({\n    /**\n     * The list of controllers that handle incoming requests and provide endpoints related to local file operations.\n     */\n\n    controllers: [FilesLocalController],\n\n    /**\n     * The list of providers that contain the business logic for file operations.\n     * These providers are used to handle file-related tasks such as uploading, retrieving, and managing files.\n     */\n\n    providers: [FilesLocalService],\n\n    /**\n     * The list of providers that are made available for other modules to use.\n     * `FilesLocalService` is exported so that other modules can utilize the service for local file operations.\n     */\n    exports: [FilesLocalService],\n})\nexport class FilesLocalModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FilesLocalService.html":{"url":"injectables/FilesLocalService.html","title":"injectable - FilesLocalService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FilesLocalService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/local/files.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The FilesLocalService provides functionality for handling file operations related to local storage.\nIt manages file creation and provides necessary file details.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/files/infrastructure/uploader/local/files.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(file: Express.Multer.File)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/files/infrastructure/uploader/local/files.service.ts:37\n                \n            \n\n\n            \n                \n                    Handles file creation and returns file details.\n// Example response:\n{\n  file: {\n    id: 'asas',\n    path: '/api/v1/uploads/example-file.jpg'\n  }\n}\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The file to be processed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            // Example response:\n{\nfile: {\nid: &#39;asas&#39;,\npath: &#39;/api/v1/uploads/example-file.jpg&#39;\n}\n}\n                        \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise that resolves to an object containing file details.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpStatus, Injectable, UnprocessableEntityException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\nimport { AllConfigType } from '@config/type/config.type';\n\nimport { FileType } from '../../../domain/file';\n\n/**\n * @service FilesLocalService\n *\n * @description\n * The `FilesLocalService` provides functionality for handling file operations related to local storage.\n * It manages file creation and provides necessary file details.\n */\n@Injectable()\nexport class FilesLocalService {\n    constructor(private readonly configService: ConfigService) {}\n\n    /**\n     * Handles file creation and returns file details.\n     *\n     * @param file The file to be processed.\n     * @returns A promise that resolves to an object containing file details.\n     *\n     * @throws { UnprocessableEntityException } If the file is not provided.\n     *\n     * @example\n     * // Example response:\n     * {\n     *   file: {\n     *     id: 'asas',\n     *     path: '/api/v1/uploads/example-file.jpg'\n     *   }\n     * }\n     */\n\n    async create(file: Express.Multer.File): Promise {\n        if (!file) {\n            throw new UnprocessableEntityException({\n                status: HttpStatus.UNPROCESSABLE_ENTITY,\n                errors: {\n                    file: 'selectFile',\n                },\n            });\n        }\n\n        return {\n            file: {\n                id: 'asas',\n                path: `/${this.configService.get('app.apiPrefix', {\n                    infer: true,\n                })}/v1/${file.path}`,\n            },\n        } as any;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FilesModule.html":{"url":"modules/FilesModule.html","title":"module - FilesModule","body":"\n                   \n\n\n\n\n    Modules\n    FilesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_imports\n\n\n\ncluster_FilesModule_exports\n\n\n\ncluster_FilesModule_providers\n\n\n\n\nFilesS3Module\n\nFilesS3Module\n\n\n\nFilesModule\n\nFilesModule\n\nFilesModule -->\n\nFilesS3Module->FilesModule\n\n\n\n\n\nFilesS3PresignedModule\n\nFilesS3PresignedModule\n\nFilesModule -->\n\nFilesS3PresignedModule->FilesModule\n\n\n\n\n\nFilesService \n\nFilesService \n\nFilesService  -->\n\nFilesModule->FilesService \n\n\n\n\n\nFilesService\n\nFilesService\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/files/files.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            This file defines the FilesModule, which is responsible for managing file uploads\nthrough different infrastructure modules. It conditionally imports the appropriate\nfile uploader module based on configuration settings.\nThe FilesModule class integrates various file uploader modules and provides\nthe FilesService for handling file operations. The module configuration allows\nswitching between different file storage solutions such as local storage, S3, and\nS3 presigned uploads.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FilesService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            FilesS3Module\n                        \n                        \n                            FilesS3PresignedModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FilesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { FilesService } from './files.service';\nimport { FilesLocalModule } from './infrastructure/uploader/local/files.module';\nimport { FilesS3Module } from './infrastructure/uploader/s3/files.module';\nimport { FilesS3PresignedModule } from './infrastructure/uploader/s3-presigned/files.module';\n\n// import { InfrastructureUploaderModule } from './infrastructureUploaderModule';\n\n// const infrastructureUploaderModule =\n//     (fileConfig() as FileConfig).driver === FileDriver.LOCAL\n//         ? FilesLocalModule\n//         : (fileConfig() as FileConfig).driver === FileDriver.S3\n//           ? FilesS3Module\n//           : FilesS3PresignedModule;\n\n// console.log(\n//     '********************************************************************===============================',\n//     fileConfig() as FileConfig\n// );\n\nconst infrastructureUploaderModule = FilesLocalModule;\n\n/**\n * @fileoverview\n * This file defines the `FilesModule`, which is responsible for managing file uploads\n * through different infrastructure modules. It conditionally imports the appropriate\n * file uploader module based on configuration settings.\n *\n * @module\n * @description\n * The `FilesModule` class integrates various file uploader modules and provides\n * the `FilesService` for handling file operations. The module configuration allows\n * switching between different file storage solutions such as local storage, S3, and\n * S3 presigned uploads.\n */\n\n@Module({\n    /**\n     * The `imports` array specifies the modules that are imported into this module.\n     * The choice of uploader module is determined based on the configuration settings.\n     */\n\n    imports: [infrastructureUploaderModule, FilesS3Module, FilesS3PresignedModule],\n\n    /**\n     * The `providers` array defines the providers that are instantiated by this module.\n     * The `FilesService` is included here to be used within this module.\n     */\n\n    providers: [FilesService],\n\n    /**\n     * The `exports` array specifies the providers that are exported from this module.\n     * The `FilesService` is exported so it can be used by other modules.\n     */\n\n    exports: [FilesService],\n})\nexport class FilesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FilesS3Controller.html":{"url":"controllers/FilesS3Controller.html","title":"controller - FilesS3Controller","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FilesS3Controller\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/s3/files.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                The FilesS3Controller handles HTTP requests related to file uploads using AWS S3. It provides an endpoint for uploading files to S3 and returning the file metadata.\n\nFiles: Grouped under the 'Files' tag for API documentation purposes.\n\nfiles: Base path for file-related operations.\n\nv1/upload/s3: Endpoint for file uploads to S3.\n\n\nHandles file upload requests. Files are processed and uploaded to S3. The response includes metadata about the uploaded file.\n\n@ApiTags('Files'): Tags the controller with 'Files' for API documentation.\n@ApiCreatedResponse({ type: FileResponseDto }): Specifies the response type for successful file uploads.\n@Post('v1/upload/s3'): Defines the HTTP POST endpoint for file uploads.\n@ApiConsumes('multipart/form-data'): Indicates that the endpoint consumes 'multipart/form-data' for file uploads.\n@ApiBody({ schema: { type: 'object', properties: { file: { type: 'string', format: 'binary' } } } }): Documents the expected request body schema for file uploads.\n@ApiFile(): Custom decorator for file upload handling.\n@UseInterceptors(FileInterceptor('file')): Applies the FileInterceptor to handle file uploads.\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadFile(file: Express.MulterS3.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiCreatedResponse({type: FileResponseDto})@Post('v1/upload/s3')@ApiConsumes('multipart/form-data')@ApiBody({schema: undefined})@ApiFile()@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/modules/files/infrastructure/uploader/s3/files.controller.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.MulterS3.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, UploadedFile, UseInterceptors } from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { ApiBody, ApiConsumes, ApiCreatedResponse, ApiTags } from '@nestjs/swagger';\n\n// import { ApiFile } from '../../../../../decorators/swagger.schema';\nimport { ApiFile } from '@decorators/swagger.schema';\n\nimport { FileResponseDto } from './dto/file-response.dto';\nimport { FilesS3Service } from './files.service';\n\n/**\n * @controller FilesS3Controller\n *\n * @description\n * The `FilesS3Controller` handles HTTP requests related to file uploads using AWS S3. It provides an endpoint for uploading files to S3 and returning the file metadata.\n *\n * @tags\n * - Files: Grouped under the 'Files' tag for API documentation purposes.\n *\n * @path\n * - `files`: Base path for file-related operations.\n * - `v1/upload/s3`: Endpoint for file uploads to S3.\n *\n * @controller\n *\n * @constructor\n * @param {FilesS3Service} filesService - Service responsible for handling file operations with S3.\n *\n * @methods\n *\n * @method uploadFile\n * @description\n * Handles file upload requests. Files are processed and uploaded to S3. The response includes metadata about the uploaded file.\n *\n * @param {Express.MulterS3.File} file - The uploaded file from the request.\n * @returns {Promise} - A promise that resolves to the file metadata.\n *\n * @decorators\n * - `@ApiTags('Files')`: Tags the controller with 'Files' for API documentation.\n * - `@ApiCreatedResponse({ type: FileResponseDto })`: Specifies the response type for successful file uploads.\n * - `@Post('v1/upload/s3')`: Defines the HTTP POST endpoint for file uploads.\n * - `@ApiConsumes('multipart/form-data')`: Indicates that the endpoint consumes 'multipart/form-data' for file uploads.\n * - `@ApiBody({ schema: { type: 'object', properties: { file: { type: 'string', format: 'binary' } } } })`: Documents the expected request body schema for file uploads.\n * - `@ApiFile()`: Custom decorator for file upload handling.\n * - `@UseInterceptors(FileInterceptor('file'))`: Applies the `FileInterceptor` to handle file uploads.\n */\n\n@ApiTags('Files')\n@Controller({\n    path: 'files',\n    version: '1',\n})\nexport class FilesS3Controller {\n    constructor(private readonly filesService: FilesS3Service) {}\n\n    @ApiCreatedResponse({\n        type: FileResponseDto,\n    })\n    @Post('v1/upload/s3')\n    @ApiConsumes('multipart/form-data')\n    @ApiBody({\n        schema: {\n            type: 'object',\n            properties: {\n                file: {\n                    type: 'string',\n                    format: 'binary',\n                },\n            },\n        },\n    })\n    @ApiFile()\n    @UseInterceptors(FileInterceptor('file'))\n    async uploadFile(@UploadedFile() file: Express.MulterS3.File): Promise {\n        return this.filesService.create(file);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FilesS3Module.html":{"url":"modules/FilesS3Module.html","title":"module - FilesS3Module","body":"\n                   \n\n\n\n\n    Modules\n    FilesS3Module\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FilesS3Module\n\n\n\ncluster_FilesS3Module_exports\n\n\n\ncluster_FilesS3Module_providers\n\n\n\n\nFilesS3Service \n\nFilesS3Service \n\n\n\nFilesS3Module\n\nFilesS3Module\n\nFilesS3Service  -->\n\nFilesS3Module->FilesS3Service \n\n\n\n\n\nFilesS3Service\n\nFilesS3Service\n\nFilesS3Module -->\n\nFilesS3Service->FilesS3Module\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/s3/files.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            The FilesS3Module configures the integration with AWS S3 for file upload functionality. It sets up the Multer middleware to handle file uploads, configures the S3 client, and defines the file storage and filtering logic.\n\nMulterModule: Configures Multer for file handling and integrates it with S3.\n\nConfigModule: Provides access to application configuration settings.\n\nFilesS3Service: Handles file upload and processing logic using S3.\n\nFilesS3Controller: Manages HTTP requests related to file uploads and downloads.\n\nFilesS3Service: Exposes the service for file operations to other modules.\n\n\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FilesS3Service\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            FilesS3Controller\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FilesS3Service\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { randomStringGenerator } from '@nestjs/common/utils/random-string-generator.util';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { MulterModule } from '@nestjs/platform-express';\n\nimport { S3Client } from '@aws-sdk/client-s3';\nimport multerS3 from 'multer-s3';\n\n// import { HelperModule } from '../../../../../common/helper/helper.module';\n// import { ConfigService } from '../../../../../common/helper/services/config.service';\nimport { AllConfigType } from '@config/type/config.type';\nimport { imageFileFilter } from '@providers/file-upload.service';\n\nimport { FilesS3Controller } from './files.controller';\nimport { FilesS3Service } from './files.service';\n\n/**\n * @module FilesS3Module\n *\n * @description\n * The `FilesS3Module` configures the integration with AWS S3 for file upload functionality. It sets up the Multer middleware to handle file uploads, configures the S3 client, and defines the file storage and filtering logic.\n *\n * @imports\n * - `MulterModule`: Configures Multer for file handling and integrates it with S3.\n * - `ConfigModule`: Provides access to application configuration settings.\n *\n * @providers\n * - `FilesS3Service`: Handles file upload and processing logic using S3.\n *\n * @controllers\n * - `FilesS3Controller`: Manages HTTP requests related to file uploads and downloads.\n *\n * @exports\n * - `FilesS3Service`: Exposes the service for file operations to other modules.\n */\n\n@Module({\n    imports: [\n        MulterModule.registerAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: (configService: ConfigService) => {\n                const s3 = new S3Client({\n                    region: configService.get('file.awsS3Region', { infer: true }),\n                    credentials: {\n                        accessKeyId: configService.getOrThrow('file.accessKeyId', {\n                            infer: true,\n                        }),\n                        secretAccessKey: configService.getOrThrow('file.secretAccessKey', {\n                            infer: true,\n                        }),\n                    },\n                });\n\n                return {\n                    fileFilter: imageFileFilter,\n                    storage: multerS3({\n                        s3: s3,\n                        bucket: configService.getOrThrow('file.awsDefaultS3Bucket', {\n                            infer: true,\n                        }),\n                        contentType: multerS3.AUTO_CONTENT_TYPE,\n                        key: (request, file, callback) => {\n                            callback(\n                                null,\n                                `${randomStringGenerator()}.${file.originalname\n                                    .split('.')\n                                    .pop()\n                                    ?.toLowerCase()}`\n                            );\n                        },\n                    }),\n                    limits: {\n                        fileSize: configService.get('file.maxFileSize', { infer: true }),\n                    },\n                };\n            },\n        }),\n    ],\n    controllers: [FilesS3Controller],\n    providers: [FilesS3Service],\n    exports: [FilesS3Service],\n})\nexport class FilesS3Module {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FilesS3PresignedController.html":{"url":"controllers/FilesS3PresignedController.html","title":"controller - FilesS3PresignedController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FilesS3PresignedController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/s3-presigned/files.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                The FilesS3PresignedController manages HTTP requests for file operations involving Amazon S3 presigned URLs. It provides endpoints for uploading files and generating presigned URLs for downloading files from S3.\n\nFilesS3PresignedController: Handles file upload and presigned URL generation requests.\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getDownloadUrl\n                            \n                            \n                                    Async\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getDownloadUrl\n                        \n                    \n                \n            \n            \n                \n                    \n                    getDownloadUrl(key: string, expiresIn: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('v1/download/:key')\n                \n            \n\n            \n                \n                    Defined in src/modules/files/infrastructure/uploader/s3-presigned/files.controller.ts:69\n                \n            \n\n\n            \n                \n                    Generates a presigned URL for downloading a file from Amazon S3.\nGET /files/v1/download/{key}?expiresIn=3600\nResponse:\n{\n  \"url\": \"https://s3.amazonaws.com/bucket/path/to/file?signature\"\n}\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe key (path) of the file in the S3 bucket.\n\n\n                                    \n                                \n                                \n                                    expiresIn\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe expiration time for the presigned URL in seconds.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            GET /files/v1/download/{key}?expiresIn=3600\nResponse:\n{\n&quot;url&quot;: &quot;https://s3.amazonaws.com/bucket/path/to/file?signature&quot;\n}\n                        \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        An object containing the presigned URL for file download.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadFile(file: FileUploadDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiCreatedResponse({type: FileResponseDto})@Post('v1/upload')\n                \n            \n\n            \n                \n                    Defined in src/modules/files/infrastructure/uploader/s3-presigned/files.controller.ts:49\n                \n            \n\n\n            \n                \n                    Uploads a file to Amazon S3.\nPOST /files/v1/upload\nRequest body:\n{\n  \"file\": \"base64-encoded-file-data\"\n}\nResponse:\n{\n  \"file\": {\n    \"path\": \"s3://bucket/path/to/file\"\n  }\n}\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                                FileUploadDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe file data to upload.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            POST /files/v1/upload\nRequest body:\n{\n&quot;file&quot;: &quot;base64-encoded-file-data&quot;\n}\nResponse:\n{\n&quot;file&quot;: {\n&quot;path&quot;: &quot;s3://bucket/path/to/file&quot;\n}\n}\n                        \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        A FileResponseDto object containing information about the uploaded file.\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Post, Query } from '@nestjs/common';\nimport { ApiCreatedResponse, ApiTags } from '@nestjs/swagger';\n\nimport { FileResponseDto } from './dto/file-response.dto';\nimport { FileUploadDto } from './dto/file.dto';\nimport { FilesS3PresignedService } from './files.service';\n\n/**\n * @module FilesS3PresignedController\n *\n * @description\n * The `FilesS3PresignedController` manages HTTP requests for file operations involving Amazon S3 presigned URLs. It provides endpoints for uploading files and generating presigned URLs for downloading files from S3.\n *\n * @controllers\n * - `FilesS3PresignedController`: Handles file upload and presigned URL generation requests.\n */\n@ApiTags('Files')\n@Controller({\n    path: 'files',\n    version: '1',\n})\nexport class FilesS3PresignedController {\n    constructor(private readonly filesService: FilesS3PresignedService) {}\n\n    /**\n     * Uploads a file to Amazon S3.\n     *\n     * @param file - The file data to upload.\n     * @returns A `FileResponseDto` object containing information about the uploaded file.\n     *\n     * @example\n     * POST /files/v1/upload\n     * Request body:\n     * {\n     *   \"file\": \"base64-encoded-file-data\"\n     * }\n     * Response:\n     * {\n     *   \"file\": {\n     *     \"path\": \"s3://bucket/path/to/file\"\n     *   }\n     * }\n     */\n\n    @ApiCreatedResponse({\n        type: FileResponseDto,\n    })\n    @Post('v1/upload')\n    async uploadFile(@Body() file: FileUploadDto) {\n        return this.filesService.create(file);\n    }\n\n    /**\n     * Generates a presigned URL for downloading a file from Amazon S3.\n     *\n     * @param key - The key (path) of the file in the S3 bucket.\n     * @param expiresIn - The expiration time for the presigned URL in seconds.\n     * @returns An object containing the presigned URL for file download.\n     *\n     * @example\n     * GET /files/v1/download/{key}?expiresIn=3600\n     * Response:\n     * {\n     *   \"url\": \"https://s3.amazonaws.com/bucket/path/to/file?signature\"\n     * }\n     */\n\n    @Get('v1/download/:key')\n    async getDownloadUrl(@Param('key') key: string, @Query('expiresIn') expiresIn: number) {\n        const url = await this.filesService.generatePresignedUrl(key, expiresIn);\n        return { url };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FilesS3PresignedModule.html":{"url":"modules/FilesS3PresignedModule.html","title":"module - FilesS3PresignedModule","body":"\n                   \n\n\n\n\n    Modules\n    FilesS3PresignedModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FilesS3PresignedModule\n\n\n\ncluster_FilesS3PresignedModule_providers\n\n\n\ncluster_FilesS3PresignedModule_exports\n\n\n\n\nFilesS3PresignedService \n\nFilesS3PresignedService \n\n\n\nFilesS3PresignedModule\n\nFilesS3PresignedModule\n\nFilesS3PresignedService  -->\n\nFilesS3PresignedModule->FilesS3PresignedService \n\n\n\n\n\nFilesS3PresignedService\n\nFilesS3PresignedService\n\nFilesS3PresignedModule -->\n\nFilesS3PresignedService->FilesS3PresignedModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/s3-presigned/files.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            The FilesS3PresignedModule configures and sets up the module for handling file uploads to an Amazon S3 bucket using presigned URLs. It integrates the necessary dependencies and configurations for Multer to manage file uploads and provides the service and controller for handling S3 interactions.\n\nMulterModule: Configured asynchronously to use multer-s3 for file storage on S3.\n\nConfigModule: Provides configuration services for retrieving AWS S3 settings.\n\nFilesS3PresignedService: Service that handles the logic for interacting with S3 and generating presigned URLs.\n\nFilesS3PresignedController: Controller for handling HTTP requests related to file uploads and presigned URLs.\n\n\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FilesS3PresignedService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            FilesS3PresignedController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FilesS3PresignedService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { randomStringGenerator } from '@nestjs/common/utils/random-string-generator.util';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { MulterModule } from '@nestjs/platform-express';\n\nimport { S3Client } from '@aws-sdk/client-s3';\nimport multerS3 from 'multer-s3';\n\n// import { HelperModule } from '../../../../../common/helper/helper.module';\n// import { ConfigService } from '../../../../../common/helper/services/config.service';\nimport { AllConfigType } from '@config/type/config.type';\n\nimport { imageFileFilter } from '../../../../../providers/file-upload.service';\n\nimport { FilesS3PresignedController } from './files.controller';\nimport { FilesS3PresignedService } from './files.service';\n\n/**\n * @module FilesS3PresignedModule\n *\n * @description\n * The `FilesS3PresignedModule` configures and sets up the module for handling file uploads to an Amazon S3 bucket using presigned URLs. It integrates the necessary dependencies and configurations for Multer to manage file uploads and provides the service and controller for handling S3 interactions.\n *\n * @imports\n * - `MulterModule`: Configured asynchronously to use `multer-s3` for file storage on S3.\n * - `ConfigModule`: Provides configuration services for retrieving AWS S3 settings.\n *\n * @providers\n * - `FilesS3PresignedService`: Service that handles the logic for interacting with S3 and generating presigned URLs.\n *\n * @controllers\n * - `FilesS3PresignedController`: Controller for handling HTTP requests related to file uploads and presigned URLs.\n */\n@Module({\n    imports: [\n        MulterModule.registerAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: (configService: ConfigService) => {\n                const s3 = new S3Client({\n                    region: configService.get('file.awsS3Region', { infer: true }),\n                    credentials: {\n                        accessKeyId: configService.getOrThrow('file.accessKeyId', {\n                            infer: true,\n                        }),\n                        secretAccessKey: configService.getOrThrow('file.secretAccessKey', {\n                            infer: true,\n                        }),\n                    },\n                });\n\n                return {\n                    fileFilter: imageFileFilter,\n                    storage: multerS3({\n                        s3: s3,\n                        bucket: '',\n                        acl: 'public-read',\n                        contentType: multerS3.AUTO_CONTENT_TYPE,\n                        key: (request, file, callback) => {\n                            callback(\n                                null,\n                                `${randomStringGenerator()}.${file.originalname\n                                    .split('.')\n                                    .pop()\n                                    ?.toLowerCase()}`\n                            );\n                        },\n                    }),\n                };\n            },\n        }),\n    ],\n    controllers: [FilesS3PresignedController],\n    providers: [FilesS3PresignedService],\n    exports: [FilesS3PresignedService],\n})\nexport class FilesS3PresignedModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FilesS3PresignedService.html":{"url":"injectables/FilesS3PresignedService.html","title":"injectable - FilesS3PresignedService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FilesS3PresignedService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/s3-presigned/files.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The FilesS3PresignedService handles operations related to file uploads and downloads using Amazon S3 with presigned URLs. It provides methods for creating upload presigned URLs and generating download presigned URLs.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                s3\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                generatePresignedUrl\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/files/infrastructure/uploader/s3-presigned/files.service.ts:26\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(file: FileUploadDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/files/infrastructure/uploader/s3-presigned/files.service.ts:59\n                \n            \n\n\n            \n                \n                    Creates a presigned URL for uploading a file to Amazon S3.\nconst response = await this.create({\n  fileName: 'image.jpg',\n  fileSize: 123456\n});\n// response will include file metadata and uploadSignedUrl\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                                FileUploadDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe file upload data containing file information.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            const response = await this.create({\nfileName: &#39;image.jpg&#39;,\nfileSize: 123456\n});\n// response will include file metadata and uploadSignedUrl\n                        \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        An object containing the file metadata and the presigned URL for uploading.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generatePresignedUrl\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePresignedUrl(key: string, expiresIn: number)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/files/infrastructure/uploader/s3-presigned/files.service.ts:128\n                \n            \n\n\n            \n                \n                    Generates a presigned URL for downloading a file from Amazon S3.\nconst url = await this.generatePresignedUrl('path/to/file', 3600);\n// url will be a presigned URL for downloading the file\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe key (path) of the file in the S3 bucket.\n\n\n                                    \n                                \n                                \n                                    expiresIn\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe expiration time for the presigned URL in seconds.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            const url = await this.generatePresignedUrl(&#39;path/to/file&#39;, 3600);\n// url will be a presigned URL for downloading the file\n                        \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The presigned URL for downloading the file.\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        s3\n                        \n                    \n                \n            \n                \n                    \n                        Type :     S3Client\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/files/infrastructure/uploader/s3-presigned/files.service.ts:26\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n    HttpStatus,\n    Injectable,\n    PayloadTooLargeException,\n    UnprocessableEntityException,\n} from '@nestjs/common';\nimport { randomStringGenerator } from '@nestjs/common/utils/random-string-generator.util';\nimport { ConfigService } from '@nestjs/config';\n\nimport { GetObjectCommand, PutObjectCommand, S3Client } from '@aws-sdk/client-s3';\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner';\n\n// import { ConfigService } from '../../../../../common/helper/services/config.service';\nimport { FileType } from '../../../domain/file';\n\nimport { FileUploadDto } from './dto/file.dto';\n\n/**\n * @module FilesS3PresignedService\n *\n * @description\n * The `FilesS3PresignedService` handles operations related to file uploads and downloads using Amazon S3 with presigned URLs. It provides methods for creating upload presigned URLs and generating download presigned URLs.\n */\n@Injectable()\nexport class FilesS3PresignedService {\n    private s3: S3Client;\n\n    constructor(private readonly configService: ConfigService) {\n        this.s3 = new S3Client({\n            region: configService.get('file.awsS3Region', { infer: true }),\n            credentials: {\n                accessKeyId: configService.getOrThrow('file.accessKeyId', {\n                    infer: true,\n                }),\n                secretAccessKey: configService.getOrThrow('file.secretAccessKey', {\n                    infer: true,\n                }),\n            },\n        });\n    }\n\n    /**\n     * Creates a presigned URL for uploading a file to Amazon S3.\n     *\n     * @param file - The file upload data containing file information.\n     * @returns An object containing the file metadata and the presigned URL for uploading.\n     *\n     * @throws {UnprocessableEntityException} If the file is not provided or has an unsupported type.\n     * @throws {PayloadTooLargeException} If the file size exceeds the maximum allowed size.\n     *\n     * @example\n     * const response = await this.create({\n     *   fileName: 'image.jpg',\n     *   fileSize: 123456\n     * });\n     * // response will include file metadata and uploadSignedUrl\n     */\n\n    async create(file: FileUploadDto): Promise {\n        if (!file) {\n            throw new UnprocessableEntityException({\n                status: HttpStatus.UNPROCESSABLE_ENTITY,\n                errors: {\n                    file: 'selectFile',\n                },\n            });\n        }\n\n        if (!file.fileName.match(/\\.(jpg|jpeg|png|gif)$/i)) {\n            throw new UnprocessableEntityException({\n                status: HttpStatus.UNPROCESSABLE_ENTITY,\n                errors: {\n                    file: `cantUploadFileType`,\n                },\n            });\n        }\n\n        if (\n            file.fileSize >\n            (this.configService.get('file.maxFileSize', {\n                infer: true,\n            }) || 0)\n        ) {\n            throw new PayloadTooLargeException({\n                statusCode: HttpStatus.PAYLOAD_TOO_LARGE,\n                error: 'Payload Too Large',\n                message: 'File too large',\n            });\n        }\n\n        const key = `${randomStringGenerator()}.${file.fileName.split('.').pop()?.toLowerCase()}`;\n\n        const command = new PutObjectCommand({\n            Bucket: this.configService.getOrThrow('file.awsDefaultS3Bucket', {\n                infer: true,\n            }),\n            Key: key,\n            ContentLength: file.fileSize,\n        });\n        const signedUrl = await getSignedUrl(this.s3, command, { expiresIn: 3600 });\n\n        // const data = await this.fileRepository.create({\n        //     path: key,\n        // });\n\n        const data = {\n            path: key,\n        } as any;\n\n        return {\n            file: data,\n            uploadSignedUrl: signedUrl,\n        };\n    }\n\n    /**\n     * Generates a presigned URL for downloading a file from Amazon S3.\n     *\n     * @param key - The key (path) of the file in the S3 bucket.\n     * @param expiresIn - The expiration time for the presigned URL in seconds.\n     * @returns The presigned URL for downloading the file.\n     *\n     * @example\n     * const url = await this.generatePresignedUrl('path/to/file', 3600);\n     * // url will be a presigned URL for downloading the file\n     */\n\n    async generatePresignedUrl(key: string, expiresIn: number): Promise {\n        const command = new GetObjectCommand({\n            Bucket: this.configService.getOrThrow('file.awsDefaultS3Bucket', {\n                infer: true,\n            }),\n            Key: key,\n        });\n\n        return await getSignedUrl(this.s3, command, { expiresIn });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FilesS3Service.html":{"url":"injectables/FilesS3Service.html","title":"injectable - FilesS3Service","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FilesS3Service\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/infrastructure/uploader/s3/files.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The FilesS3Service provides methods for handling file operations with AWS S3. It includes functionality to process uploaded files and return their metadata.\nHandles the creation and metadata retrieval for uploaded files. It validates the presence of the file and returns its metadata.\n\n@Injectable(): Marks the class as a provider that can be injected into other components.\n\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/modules/files/infrastructure/uploader/s3/files.service.ts:29\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(file: Express.MulterS3.File)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/files/infrastructure/uploader/s3/files.service.ts:40\n                \n            \n\n\n            \n                \n                    Handles the creation and metadata retrieval for uploaded files.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.MulterS3.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe uploaded file from the request.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \nA promise that resolves to an object containing the file metadata.\n\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpStatus, Injectable, UnprocessableEntityException } from '@nestjs/common';\n\nimport { FileType } from '../../../domain/file';\n\n/**\n * @service FilesS3Service\n *\n * @description\n * The `FilesS3Service` provides methods for handling file operations with AWS S3. It includes functionality to process uploaded files and return their metadata.\n *\n * @constructor\n * @param {void} - No parameters are injected into the constructor.\n *\n * @methods\n *\n * @method create\n * @description\n * Handles the creation and metadata retrieval for uploaded files. It validates the presence of the file and returns its metadata.\n *\n * @param {Express.MulterS3.File} file - The uploaded file from the request. It should include information such as the file's S3 key.\n * @returns {Promise} - A promise that resolves to an object containing the file metadata.\n *\n * @throws {UnprocessableEntityException} - Throws an exception if the file is not provided in the request.\n *\n * @decorators\n * - `@Injectable()`: Marks the class as a provider that can be injected into other components.\n */\n@Injectable()\nexport class FilesS3Service {\n    constructor() {}\n\n    /**\n     * Handles the creation and metadata retrieval for uploaded files.\n     *\n     * @param {Express.MulterS3.File} file - The uploaded file from the request.\n     * @returns {Promise} - A promise that resolves to an object containing the file metadata.\n     * @throws {UnprocessableEntityException} - Throws an exception if the file is not provided.\n     */\n\n    async create(file: Express.MulterS3.File): Promise {\n        if (!file) {\n            throw new UnprocessableEntityException({\n                status: HttpStatus.UNPROCESSABLE_ENTITY,\n                errors: {\n                    file: 'selectFile',\n                },\n            });\n        }\n\n        return {\n            file: {\n                path: file.key,\n            } as any,\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FilesService.html":{"url":"injectables/FilesService.html","title":"injectable - FilesService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FilesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/files.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the FilesService, a service responsible for handling file operations.\nThe FilesService class is an injectable service in the NestJS framework. It is designed\nto manage and process file-related tasks, such as uploading, retrieving, and managing files.\nThe service's methods and functionalities should be implemented based on the specific file\nhandling requirements of the application.\n\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n/**\n * @fileoverview\n * This file defines the `FilesService`, a service responsible for handling file operations.\n *\n * @module\n * @description\n * The `FilesService` class is an injectable service in the NestJS framework. It is designed\n * to manage and process file-related tasks, such as uploading, retrieving, and managing files.\n * The service's methods and functionalities should be implemented based on the specific file\n * handling requirements of the application.\n */\n@Injectable()\nexport class FilesService {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilterCountryDto.html":{"url":"classes/FilterCountryDto.html","title":"class - FilterCountryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilterCountryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/countries/dto/query-country.dto-remove.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nimport { Transform, Type, plainToInstance } from 'class-transformer';\nimport { IsNumber, IsOptional, IsString, ValidateNested } from 'class-validator';\n\nimport { Country } from './country';\n\nexport class FilterCountryDto {}\n\nexport class SortCountryDto {\n    @ApiProperty()\n    @Type(() => String)\n    @IsString()\n    orderBy: keyof Country;\n\n    @ApiProperty()\n    @IsString()\n    order: string;\n}\n\nexport class QueryCountryDto {\n    @ApiPropertyOptional()\n    @Transform(({ value }) => (value ? Number(value) : 1))\n    @IsNumber()\n    @IsOptional()\n    page?: number;\n\n    @ApiPropertyOptional()\n    @Transform(({ value }) => (value ? Number(value) : 10))\n    @IsNumber()\n    @IsOptional()\n    limit?: number;\n\n    @ApiPropertyOptional({ type: String })\n    @IsOptional()\n    @Transform(({ value }) =>\n        value ? plainToInstance(FilterCountryDto, JSON.parse(value)) : undefined\n    )\n    @ValidateNested()\n    @Type(() => FilterCountryDto)\n    filters?: FilterCountryDto | null;\n\n    @ApiPropertyOptional({ type: String })\n    @IsOptional()\n    @Transform(({ value }) => {\n        return value ? plainToInstance(SortCountryDto, JSON.parse(value)) : undefined;\n    })\n    @ValidateNested({ each: true })\n    @Type(() => SortCountryDto)\n    sort?: SortCountryDto[] | null;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilterQueryDto.html":{"url":"classes/FilterQueryDto.html","title":"class - FilterQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilterQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/dto/pagination.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO class for filter query parameters.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                field\n                            \n                            \n                                operator\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        field\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'iso', required: true})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.dto.ts:160\n                        \n                    \n\n            \n                \n                    The field to filter on.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        operator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '='})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.dto.ts:172\n                        \n                    \n\n            \n                \n                    The operator to use for filtering.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'IN'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.dto.ts:184\n                        \n                    \n\n            \n                \n                    The value to filter by.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nimport { Type, Transform, plainToInstance } from 'class-transformer';\nimport {\n    IsOptional,\n    Min,\n    Max,\n    IsNotEmpty,\n    IsString,\n    ValidateNested,\n    Matches,\n    IsEnum,\n    // Validate,\n    // IsIn,\n} from 'class-validator';\n\n// import { IsValidField } from '@core/validators/field.validator'; // Import the custom validator\nimport { IsNumberStringOrNumber } from '@decorators/number.string.validator';\nimport { ToNumber } from '@decorators/transforms.decorator';\n// import { IsNumberStringOrNumber } from '@decorators/number.string.validator';\n// import { ToNumber } from '@decorators/transforms.decorator';\n// import { Country } from '@modules/countries/dto/country';\n\n/**\n * Enum representing different pagination types.\n *\n * @export\n * @enum {string}\n */\n\nexport enum PaginationType {\n    NONE = 'no',\n    INFINITY = 'infinity',\n    PAGINATE = 'paginate',\n    ALL = 'all',\n}\n\n/**\n * DTO class for pagination query parameters.\n *\n * @export\n */\nexport class PaginationQueryDto {\n    /**\n     * The type of pagination to apply.\n     *\n     * @type {PaginationType}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        description:\n            'Pagination must all (Page and has_next_page), infinity (only has_next_page), paginate(only page)',\n        enum: PaginationType,\n        default: PaginationType.ALL,\n    })\n    @IsEnum(PaginationType)\n    @IsOptional()\n    readonly pagination: PaginationType;\n\n    /**\n     * The page number for pagination.\n     *\n     * @type {number}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        description: 'Page number',\n        minimum: 1,\n        default: 1,\n    })\n    @IsOptional()\n    @IsNumberStringOrNumber()\n    @ToNumber()\n    @Min(1)\n    readonly page?: number;\n\n    /**\n     * The number of records per page.\n     *\n     * @type {number}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        description: 'Record limit',\n        minimum: 1,\n        maximum: 500,\n        default: 10,\n    })\n    @IsOptional()\n    @IsNumberStringOrNumber()\n    @ToNumber()\n    @Min(10)\n    @Max(500)\n    readonly limit?: number = 10;\n\n    /**\n     * Filters to apply to the query.\n     *\n     * @type {FilterQueryDto[] | null}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        name: 'filters',\n        required: false,\n        type: String,\n        description: 'Array of filter objects as a JSON string',\n        example: '[{\"field\":\"name\",\"operator\":\"=\",\"value\":\"IN\"}]',\n    })\n    @IsOptional()\n    @Transform(({ value }) => {\n        return value ? plainToInstance(FilterQueryDto, JSON.parse(value)) : undefined;\n    })\n    @ValidateNested({ each: true })\n    @Type(() => FilterQueryDto)\n    filters?: FilterQueryDto[] | null;\n\n    /**\n     * Sorting options for the query.\n     *\n     * @type {SortByDto[] | null}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        name: 'sort',\n        required: false,\n        type: String,\n        description: 'Array of sort objects as a JSON string',\n        example: '[{\"field\":\"name\",\"direction\":\"ASC\"}]',\n    })\n    @IsOptional()\n    @Transform(({ value }) => {\n        return value ? plainToInstance(SortByDto, JSON.parse(value)) : undefined;\n    })\n    @ValidateNested({ each: true })\n    @Type(() => SortByDto)\n    sort?: SortByDto[] | null;\n}\n\n/**\n * DTO class for filter query parameters.\n *\n * @export\n */\nexport class FilterQueryDto {\n    /**\n     * The field to filter on.\n     *\n     * @type {string}\n     * @memberof FilterQueryDto\n     */\n\n    @ApiProperty({ example: 'iso', required: true })\n    @IsNotEmpty()\n    @IsString()\n    field: string;\n\n    /**\n     * The operator to use for filtering.\n     *\n     * @type {string}\n     * @memberof FilterQueryDto\n     */\n\n    @ApiProperty({ example: '=' })\n    @IsNotEmpty()\n    @IsString()\n    operator: string;\n\n    /**\n     * The value to filter by.\n     *\n     * @type {string}\n     * @memberof FilterQueryDto\n     */\n\n    @ApiProperty({ example: 'IN' })\n    @IsNotEmpty()\n    @IsString()\n    value: string;\n}\n\n/**\n * DTO class for sorting options.\n *\n * @export\n */\nexport class SortByDto {\n    // @ApiProperty({ example: 'name' })\n    // @IsString()\n    // @Validate(IsValidField, [Country], {\n    //     message: 'Field must be a valid key of Country',\n    // })\n    // field: keyof Country;\n    /**\n     * The field to sort by.\n     *\n     * @type {string}\n     * @memberof SortByDto\n     */\n\n    @ApiProperty()\n    @IsString()\n    // @IsIn(abc(x : keyof TExposedAccountInfo), {\n    //     message: 'Field must be one of \"name\", \"age\", or \"status\"',\n    // })\n    // @Validate(IsValidField, [{ entity: () => T }], {\n    //     message: 'Field must be a valid key of the specified entity',\n    // })\n    field: string;\n\n    /**\n     * The direction of the sort (ascending or descending).\n     *\n     * @type {string}\n     * @memberof SortByDto\n     */\n\n    @ApiProperty({ example: 'ASC' })\n    @IsString()\n    @Matches(/^(ASC|DESC|asc|desc)$/, {\n        message: 'operator must be one of ASC, DESC, asc, or desc',\n    })\n    direction: string;\n}\n\n// export class PaginatedResultDto {\n//     @ApiProperty()\n//     data: T[];\n\n//     @ApiProperty()\n//     total: number;\n\n//     @ApiProperty()\n//     page: number;\n\n//     @ApiProperty()\n//     limit: number;\n// }\n\n//DX\n// import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\n// import { Type, Transform, plainToInstance } from 'class-transformer';\n// import {\n//     IsOptional,\n//     Min,\n//     Max,\n//     IsNotEmpty,\n//     IsString,\n//     IsArray,\n//     ValidateNested,\n//     Validate,\n//     Matches,\n// } from 'class-validator';\n\n// import { IsNumberStringOrNumber } from '@decorators/number.string.validator';\n// import { ToNumber } from '@decorators/transforms.decorator';\n// import { SortBy } from '@validators/filter.validator';\n\n// export class FilterQueryDto {\n//     @ApiProperty({ example: 'name', required: true })\n//     @IsNotEmpty()\n//     @IsString()\n//     field: string;\n\n//     @ApiProperty({ example: 'LIKE' })\n//     @IsNotEmpty()\n//     @IsString()\n//     operator: string;\n\n//     @ApiProperty({ example: '%John%' })\n//     @IsNotEmpty()\n//     @IsString()\n//     value: string;\n// }\n\n// export class SortByDto {\n//     @ApiProperty({ example: 'name' })\n//     @IsString()\n//     field: string;\n\n//     @ApiProperty({ example: 'ASC' })\n//     @IsString()\n//     @Matches(/^(ASC|DESC|asc|desc)$/, {\n//         message: 'operator must be one of ASC, DESC, asc, or desc',\n//     })\n//     direction: string;\n// }\n\n// export class PaginationQueryDto {\n//     @ApiPropertyOptional({\n//         description: 'Page number',\n//         minimum: 1,\n//         default: 1,\n//     })\n//     @IsOptional()\n//     @IsNumberStringOrNumber()\n//     @ToNumber()\n//     @Min(1)\n//     // @Transform(({ value }) => {\n//     //     const strippedValue = String(value).replace(/['\"]+/g, '');\n//     //     const numberValue = Number(strippedValue);\n//     //     return isNaN(numberValue) ? 'undefined' : numberValue;\n//     // })\n//     readonly page?: number;\n\n//     @ApiPropertyOptional({\n//         description: 'Record limit',\n//         minimum: 1,\n//         maximum: 500,\n//         default: 10,\n//     })\n//     @IsOptional()\n//     @IsNumberStringOrNumber()\n//     @ToNumber()\n//     @Min(10)\n//     @Max(500)\n//     readonly limit?: number = 10;\n\n//     // @IsOptional()\n//     // @IsArray()\n//     // @ValidateNested({ each: true })\n//     // @Type(() => FilterQueryDto)\n//     // filters?: FilterQueryDto[];\n//     // // filters?: any;\n//     @ApiPropertyOptional({\n//         name: 'filters',\n//         required: false,\n//         type: String,\n//         description: 'Array of filter objects as a JSON string',\n//         example:\n//             '[{\"field\":\"name\",\"operator\":\"LIKE\",\"value\":\"John\"},{\"field\":\"age\",\"operator\":\">\",\"value\":\"30\"}]',\n//     })\n//     @IsOptional()\n//     @Transform(({ value }) => {\n//         return value ? plainToInstance(FilterQueryDto, JSON.parse(value)) : undefined;\n//     })\n//     @ValidateNested({ each: true })\n//     @Type(() => FilterQueryDto)\n//     filters?: FilterQueryDto[] | null;\n\n//     // @ApiPropertyOptional({\n//     //     description: ' Name or City:  ASC or DESC',\n//     //     example: 'name ASC',\n//     // })\n//     // @IsOptional()\n//     // @IsString()\n//     // @Validate(SortBy)\n//     // readonly sort?: string;\n//     // @ApiPropertyOptional({ type: [SortByDto], isArray: true })\n//     // @IsOptional()\n//     // @Transform(({ value }) => {\n//     //     return value ? plainToInstance(SortUserDto, JSON.parse(value)) : undefined;\n//     // })\n//     // @ValidateNested({ each: true })\n//     // @Type(() => SortUserDto)\n//     // sort?: SortUserDto[] | null;\n\n//     @ApiPropertyOptional({\n//         name: 'sort',\n//         required: false,\n//         type: String,\n//         description: 'Array of sort objects as a JSON string',\n//         example: '[{\"field\":\"name\",\"direction\":\"ASC\"},{\"field\":\"age\",\"direction\":\"DESC\"}]',\n//     })\n//     @IsOptional()\n//     @Transform(({ value }) => {\n//         return value ? plainToInstance(SortByDto, JSON.parse(value)) : undefined;\n//     })\n//     @ValidateNested({ each: true })\n//     @Type(() => SortByDto)\n//     sort?: SortByDto[] | null;\n// }\n\n// export class PaginatedResultDto {\n//     @ApiProperty()\n//     data: T[];\n\n//     @ApiProperty()\n//     total: number;\n\n//     @ApiProperty()\n//     page: number;\n\n//     @ApiProperty()\n//     limit: number;\n// }\n\n// // import { ApiProperty, ApiExtraModels } from '@nestjs/swagger';\n\n// // import { Type } from 'class-transformer';\n// // import { IsOptional, IsString, IsArray, ValidateNested, IsNumber } from 'class-validator';\n\n// // // export class FilterQueryDto {\n// // //     @ApiProperty({ example: 'name' })\n// // //     field: string;\n\n// // //     @ApiProperty({ example: 'LIKE' })\n// // //     operator: string;\n\n// // //     @ApiProperty({ example: '%John%' })\n// // //     value: string;\n// // // }\n// // export class FilterQueryDto {\n// //     @ApiProperty({ example: 'country_name' })\n// //     @IsString()\n// //     field: string;\n\n// //     @ApiProperty({ example: 'LIKE' })\n// //     @IsString()\n// //     operator: string;\n\n// //     @ApiProperty({ example: '%United%' })\n// //     @IsString()\n// //     value: string;\n// // }\n// // @ApiExtraModels(FilterQueryDto)\n// // export class PaginationQueryDto {\n// //     @ApiProperty({ example: 1, required: false })\n// //     @IsOptional()\n// //     @IsNumber()\n// //     @Type(() => Number)\n// //     page?: number = 1;\n\n// //     @ApiProperty({ example: 10, required: false })\n// //     @IsOptional()\n// //     @IsNumber()\n// //     @Type(() => Number)\n// //     limit?: number = 10;\n\n// //     // @ApiProperty({\n// //     //     type: [FilterQueryDto],\n// //     //     required: false,\n// //     //     isArray: true,\n// //     // })\n// //     // @Type(() => FilterQueryDto)\n// //     // filters?: FilterQueryDto[];\n// //     @ApiProperty({\n// //         type: FilterQueryDto,\n// //         required: false,\n// //         isArray: true,\n// //     })\n// //     // @IsOptional()\n// //     @IsArray()\n// //     @ValidateNested({ each: true })\n// //     @Type(() => FilterQueryDto)\n// //     filters?: FilterQueryDto[];\n\n// //     // @ApiProperty({\n// //     //     type: [Object],\n// //     //     // items: {\n// //     //     //     type: 'object',\n// //     //     //     items: {\n// //     //     //         type: 'object',\n// //     //     //     },\n// //     //     // },\n// //     // })\n// //     // coords: FilterQueryDto[];\n\n// //     // @ApiProperty({ type: String, required: false })\n// //     // @IsOptional()\n// //     // @IsArray()\n// //     // @ValidateNested({ each: true })\n// //     // @Type(() => FilterQueryDto)\n// //     // filters?: FilterQueryDto[];\n\n// //     @ApiProperty({ example: 'name ASC1', required: false })\n// //     sort?: string;\n// // }\n\n// // // export class PaginationQueryDto {\n// // //     @ApiProperty({ example: 1, required: false })\n// // //     page?: number = 1;\n\n// // //     @ApiProperty({ example: 10, required: false })\n// // //     limit?: number = 10;\n\n// // //     // @ApiProperty({ type: [FilterQueryDto], required: false, isArray: true })\n// // //     // filters?: FilterQueryDto[];\n\n// // //     // @ApiProperty({ type: String, required: false, isArray: true })\n// // //     // filters?: FilterQueryDto[];\n\n// // //     // @ApiProperty({ type: [FilterQueryDto], required: false, isArray: true })\n// // //     // @Type(() => FilterQueryDto)\n// // //     // filters?: FilterQueryDto[];\n\n// // //     @ApiProperty({ type: [FilterQueryDto], required: false })\n// // //     @IsOptional()\n// // //     @IsArray()\n// // //     @ValidateNested({ each: true })\n// // //     @Type(() => FilterQueryDto)\n// // //     filters?: FilterQueryDto[];\n\n// // //     @ApiProperty({ example: 'name ASC1', required: false })\n// // //     sort?: string;\n// // // }\n\n// // export class PaginatedResultDto {\n// //     @ApiProperty()\n// //     data: T[];\n\n// //     @ApiProperty()\n// //     total: number;\n\n// //     @ApiProperty()\n// //     page: number;\n\n// //     @ApiProperty()\n// //     limit: number;\n// // }\n\n// // export class abc {\n// //     @ApiProperty()\n// //     page: number;\n\n// //     @ApiProperty()\n// //     limit: number;\n// // }\n\n// // import { applyDecorators } from '@nestjs/common';\n// // import { ApiProperty, ApiExtraModels, ApiQuery, getSchemaPath } from '@nestjs/swagger';\n\n// // /**\n// //  * Combines Swagger Decorators to create a description for `filters[name]=something`\n// //  *  - has support for swagger\n// //  *  - automatic transformation with nestjs\n// //  */\n// // // // eslint-disable-next-line @typescript-eslint/ban-types,@typescript-eslint/explicit-module-boundary-types\n// // // export function ApiFilterQuery(fieldName: string, filterDto: Function) {\n// // //     return applyDecorators(\n// // //         ApiExtraModels(filterDto),\n// // //         ApiQuery({\n// // //             required: false,\n// // //             name: fieldName,\n// // //             style: 'deepObject',\n// // //             explode: true,\n// // //             type: 'object',\n// // //             schema: {\n// // //                 $ref: getSchemaPath(filterDto),\n// // //             },\n// // //         })\n// // //     );\n// // // }\n// // // eslint-disable-next-line @typescript-eslint/ban-types,@typescript-eslint/explicit-module-boundary-types\n// // export function ApiFilterQuery(fieldName: string, filterDto: Function, index: number) {\n// //     return applyDecorators(\n// //         ApiExtraModels(filterDto),\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}]`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //             schema: {\n// //                 $ref: getSchemaPath(filterDto),\n// //             },\n// //         })\n// //     );\n// // }\n\n// // export function ApiFilterQuery(fieldName: string, index: number) {\n// //     return applyDecorators(\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}].field`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //         }),\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}].operator`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //         }),\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}].value`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //         })\n// //     );\n// // }\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HelperModule.html":{"url":"modules/HelperModule.html","title":"module - HelperModule","body":"\n                   \n\n\n\n\n    Modules\n    HelperModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_HelperModule\n\n\n\ncluster_HelperModule_providers\n\n\n\ncluster_HelperModule_exports\n\n\n\n\nCommonQuery5 \n\nCommonQuery5 \n\n\n\nPaginationService \n\nPaginationService \n\n\n\nPrismaService \n\nPrismaService \n\n\n\nUtilsService \n\nUtilsService \n\n\n\nHelperModule\n\nHelperModule\n\nCommonQuery5  -->\n\nHelperModule->CommonQuery5 \n\n\n\nPaginationService  -->\n\nHelperModule->PaginationService \n\n\n\nPrismaService  -->\n\nHelperModule->PrismaService \n\n\n\nUtilsService  -->\n\nHelperModule->UtilsService \n\n\n\n\n\nPaginationService\n\nPaginationService\n\nHelperModule -->\n\nPaginationService->HelperModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nHelperModule -->\n\nPrismaService->HelperModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/helper/helper.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            The HelperModule is a global module that provides common utility services across the application.\nIt is marked as global, meaning its providers are available throughout the application without needing to import the module in other modules.\n\nThe HttpModule is imported to allow services within this module to make HTTP requests.\nThe module exports its services and HttpModule, making them available for use in other modules.\n\n@Module({\n    imports: [HttpModule],\n    providers: [PaginationService, PrismaService, UtilsService],\n    exports: [PaginationService, PrismaService, UtilsService, HttpModule],\n})\nexport class HelperModule {}\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PaginationService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CommonQuery5\n                        \n                        \n                            PaginationService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            UtilsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from '@nestjs/axios';\nimport { Global, Module } from '@nestjs/common';\n\n// import { ConfigService } from './services/config.service';\n\nimport { CommonQuery5 } from './services/comman.query';\nimport { PaginationService } from './services/pagination.service';\nimport { PrismaService } from './services/prisma.service';\nimport { UtilsService } from './services/util.service';\n\nconst providers = [PaginationService, PrismaService, UtilsService, CommonQuery5]; // ConfigService,\n\n/**\n * @module HelperModule\n *\n * @description\n * The `HelperModule` is a global module that provides common utility services across the application.\n * It is marked as global, meaning its providers are available throughout the application without needing to import the module in other modules.\n *\n * @remarks\n * - The `HttpModule` is imported to allow services within this module to make HTTP requests.\n * - The module exports its services and `HttpModule`, making them available for use in other modules.\n *\n * @example\n * ```typescript\n * @Module({\n *     imports: [HttpModule],\n *     providers: [PaginationService, PrismaService, UtilsService],\n *     exports: [PaginationService, PrismaService, UtilsService, HttpModule],\n * })\n * export class HelperModule {}\n * ```\n */\n\n@Global()\n@Module({\n    // imports: [],\n    // providers: [ConfigService, PrismaService],\n    // controllers: [],\n    // exports: [ConfigService, PrismaService],\n    providers,\n    imports: [HttpModule],\n    exports: [...providers, HttpModule],\n})\nexport class HelperModule {}\n\n// import { Module } from '@nestjs/common';\n// import { JwtService } from '@nestjs/jwt';\n\n// import { EncryptionService } from './services/encryption.service';\n// import { PrismaService } from './services/prisma.service';\n// import { TaskService } from './services/task.service';\n\n// @Module({\n//   imports: [],\n//   providers: [JwtService, EncryptionService, PrismaService, TaskService],\n//   controllers: [],\n//   exports: [EncryptionService, PrismaService, TaskService],\n// })\n// export class HelperModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HomeController.html":{"url":"controllers/HomeController.html","title":"controller - HomeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HomeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/home/home.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                This file defines the HomeController class, which handles HTTP requests related to the home feature of the application.\nThe HomeController class is responsible for handling incoming HTTP requests and returning responses for the home-related endpoints.\nThis controller uses the HomeService to perform the necessary business logic.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                appInfo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        appInfo\n                        \n                    \n                \n            \n            \n                \nappInfo()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/modules/home/home.controller.ts:30\n                \n            \n\n\n            \n                \n                    Handles GET requests to the root endpoint and returns application information.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        The application information.\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\n\nimport { HomeService } from './home.service';\n\n/**\n * @fileoverview\n * This file defines the `HomeController` class, which handles HTTP requests related to the home feature of the application.\n *\n * @module\n * @description\n * The `HomeController` class is responsible for handling incoming HTTP requests and returning responses for the home-related endpoints.\n * This controller uses the `HomeService` to perform the necessary business logic.\n */\n\n@ApiTags('Home')\n@Controller()\nexport class HomeController {\n    /**\n     * Constructs a new `HomeController`.\n     * @param {HomeService} service - The service used to handle business logic for home-related endpoints.\n     */\n    constructor(private service: HomeService) {}\n\n    /**\n     * Handles GET requests to the root endpoint and returns application information.\n     * @returns {object} The application information.\n     */\n    @Get()\n    appInfo(): object {\n        return this.service.appInfo();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HomeModule.html":{"url":"modules/HomeModule.html","title":"module - HomeModule","body":"\n                   \n\n\n\n\n    Modules\n    HomeModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_HomeModule\n\n\n\ncluster_HomeModule_providers\n\n\n\n\nHomeService\n\nHomeService\n\n\n\nHomeModule\n\nHomeModule\n\nHomeModule -->\n\nHomeService->HomeModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/home/home.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            This file defines the HomeModule class, which is responsible for the home-related functionalities of the application.\nThe HomeModule class configures the home feature of the application by declaring its controller and service.\nThis module handles the business logic and request handling for home-related endpoints.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HomeService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            HomeController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { HomeController } from './home.controller';\nimport { HomeService } from './home.service';\n\n/**\n * @fileoverview\n * This file defines the `HomeModule` class, which is responsible for the home-related functionalities of the application.\n *\n * @module\n * @description\n * The `HomeModule` class configures the home feature of the application by declaring its controller and service.\n * This module handles the business logic and request handling for home-related endpoints.\n */\n\n@Module({\n    imports: [],\n    controllers: [\n        /**\n         * Controller responsible for handling incoming requests and returning responses related to the home feature.\n         */\n        HomeController,\n    ],\n    providers: [\n        /**\n         * Service responsible for handling the business logic related to the home feature.\n         */\n        HomeService,\n    ],\n})\nexport class HomeModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HomeService.html":{"url":"injectables/HomeService.html","title":"injectable - HomeService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  HomeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/home/home.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the HomeService class, which provides methods for retrieving application information from the configuration.\nThe HomeService class is responsible for retrieving application information from the configuration using the ConfigService.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                appInfo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/home/home.service.ts:15\n                            \n                        \n\n                \n                    \n                            Constructs a new HomeService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe configuration service used to access application configuration values.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        appInfo\n                        \n                    \n                \n            \n            \n                \nappInfo()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/home/home.service.ts:26\n                \n            \n\n\n            \n                \n                    Retrieves and returns application information from the configuration.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        An object containing the application's name, description, app prefix, and API prefix.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\nimport { AllConfigType } from '@config/type/config.type';\n\n/**\n * @fileoverview\n * This file defines the `HomeService` class, which provides methods for retrieving application information from the configuration.\n *\n * @module\n * @description\n * The `HomeService` class is responsible for retrieving application information from the configuration using the `ConfigService`.\n */\n@Injectable()\nexport class HomeService {\n    /**\n     * Constructs a new `HomeService`.\n     * @param {ConfigService} configService - The configuration service used to access application configuration values.\n     */\n    constructor(private configService: ConfigService) {}\n\n    /**\n     * Retrieves and returns application information from the configuration.\n     * @returns {object} An object containing the application's name, description, app prefix, and API prefix.\n     */\n    appInfo(): object {\n        return {\n            name: this.configService.get('app.name', { infer: true }),\n            description: this.configService.get('app.description', { infer: true }),\n            appPrefix: this.configService.get('app.appPrefix', { infer: true }),\n            apiPrefix: this.configService.get('app.apiPrefix', { infer: true }),\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpErrorFilter.html":{"url":"classes/HttpErrorFilter.html","title":"class - HttpErrorFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpErrorFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/exceptions/http-error.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                Global HTTP error filter.\nadditional error information such as the HTTP status, timestamp, request URL, method, and message.\nIt logs the error details, particularly for internal server errors.\nimport { HttpErrorFilter } from './path/to/filter';\n\n@Module({\n  providers: [\n    {\n      provide: APP_FILTER,\n      useClass: HttpErrorFilter,\n    },\n  ],\n})\nexport class AppModule {}\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/core/exceptions/http-error.filter.ts:50\n                \n            \n\n\n            \n                \n                    Method that handles the exception.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe exception that was thrown.\n\n\n                                    \n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe host object containing the details of the current request.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n    ExceptionFilter,\n    Catch,\n    ArgumentsHost,\n    Logger,\n    HttpException,\n    HttpStatus,\n} from '@nestjs/common';\n\n// import * as _ from 'lodash';\n\n//   import { SQLService } from \"../shared/services/sql.service\";\n\n//   import { Query } from \"./query\";\n\n/**\n * Global HTTP error filter.\n *\n * @description This filter catches all HTTP exceptions and formats the response to include\n * additional error information such as the HTTP status, timestamp, request URL, method, and message.\n * It logs the error details, particularly for internal server errors.\n *\n * @example\n * ```typescript\n * import { HttpErrorFilter } from './path/to/filter';\n *\n * @Module({\n *   providers: [\n *     {\n *       provide: APP_FILTER,\n *       useClass: HttpErrorFilter,\n *     },\n *   ],\n * })\n * export class AppModule {}\n * ```\n *\n * @implements {ExceptionFilter}\n */\n\n@Catch()\nexport class HttpErrorFilter implements ExceptionFilter {\n    /**\n     * Method that handles the exception.\n     *\n     * @param {HttpException} exception - The exception that was thrown.\n     * @param {ArgumentsHost} host - The host object containing the details of the current request.\n     */\n\n    catch(exception: HttpException, host: ArgumentsHost) {\n        const ctx = host.switchToHttp();\n        const response = ctx.getResponse();\n        const request = ctx.getRequest();\n        const status = exception.getStatus\n            ? exception.getStatus()\n            : HttpStatus.INTERNAL_SERVER_ERROR;\n        const errorResponse = {\n            code: status,\n            timestamp: new Date().toLocaleTimeString,\n            path: request.url,\n            method: request.method,\n            message:\n                status !== HttpStatus.INTERNAL_SERVER_ERROR\n                    ? exception.message || null\n                    : 'Internal server error',\n        };\n\n        if (status === HttpStatus.INTERNAL_SERVER_ERROR) {\n            Logger.error(`${request.method} ${request.url}`, exception.stack, 'ExceptionFilter');\n        } else {\n            Logger.error(\n                `${request.method} ${request.url}`,\n                JSON.stringify(errorResponse),\n                'ExceptionFilter'\n            );\n        }\n\n        response.status(status).json(errorResponse);\n\n        //   try {\n        //     const sqlService = new SQLService();\n        //     const query = new Query();\n        //     const reqstrobj = { body: _.clone(request.body), header: _.clone(request.header) };\n        //     const reqstr = JSON.stringify(reqstrobj);\n\n        //     const resstrobj = { res: _.clone(errorResponse), exception: exception.stack };\n        //     const resstr = JSON.stringify(resstrobj);\n        //     sqlService.run(\n        //       query.addHttpQueryError(\"HTTPERROR\", request.method, request.url, reqstr, resstr)\n        //     );\n        //   } catch (error) {}\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/http-exception.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                Exception filter for handling HTTP exceptions in a NestJS application.\nThis filter catches all HttpException instances and formats the response\nwith the status code, timestamp, and request path.\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/http-exception.filter.ts:27\n                \n            \n\n\n            \n                \n                    Handles the HTTP exception and formats the error response.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The HTTP exception to handle.\n\n                                    \n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The arguments host for accessing request and response objects.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ExceptionFilter, Catch, ArgumentsHost, HttpException } from '@nestjs/common';\n\nimport { Request, Response } from 'express';\n\n/**\n * Exception filter for handling HTTP exceptions in a NestJS application.\n *\n * This filter catches all `HttpException` instances and formats the response\n * with the status code, timestamp, and request path.\n *\n * @export\n * @class HttpExceptionFilter\n * @implements {ExceptionFilter}\n */\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n    /**\n     * Handles the HTTP exception and formats the error response.\n     *\n     * @param {HttpException} exception The HTTP exception to handle.\n     * @param {ArgumentsHost} host The arguments host for accessing request and response objects.\n     *\n     * @memberof HttpExceptionFilter\n     */\n\n    catch(exception: HttpException, host: ArgumentsHost) {\n        console.log('HTTP EXEPTION from filter');\n        const ctx = host.switchToHttp();\n        const response = ctx.getResponse();\n        const request = ctx.getRequest();\n        const status = exception.getStatus();\n\n        response.status(status).json({\n            statusCode: status,\n            timestamp: new Date().toISOString(),\n            path: request.url,\n        });\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAppConfig.html":{"url":"interfaces/IAppConfig.html","title":"interface - IAppConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IAppConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interfaces/app.interfaces.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration interface for application settings.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            apiPrefix\n                                        \n                                \n                                \n                                        \n                                            backendDomain\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            frontendDomain\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            port\n                                        \n                                \n                                \n                                        \n                                            workingDirectory\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        apiPrefix\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        apiPrefix:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The API prefix used in the application.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        backendDomain\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        backendDomain:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The domain for the backend application.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        frontendDomain\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        frontendDomain:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The domain for the frontend application.\nThis property is optional.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The name of the application.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        port\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        port:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The port on which the application is running.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        workingDirectory\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        workingDirectory:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The working directory of the application.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        'use strict';\n\n'use strict';\n\n/**\n * Configuration interface for application settings.\n *\n * @export\n * @interface IAppConfig\n */\nexport interface IAppConfig {\n    /**\n     * The name of the application.\n     *\n     * @type {string}\n     * @memberof IAppConfig\n     */\n\n    name: string;\n\n    /**\n     * The working directory of the application.\n     *\n     * @type {string}\n     * @memberof IAppConfig\n     */\n\n    workingDirectory: string;\n\n    /**\n     * The domain for the frontend application.\n     * This property is optional.\n     *\n     * @type {string}\n     * @memberof IAppConfig\n     */\n\n    frontendDomain?: string;\n\n    /**\n     * The domain for the backend application.\n     *\n     * @type {string}\n     * @memberof IAppConfig\n     */\n\n    backendDomain: string;\n\n    /**\n     * The port on which the application is running.\n     *\n     * @type {number}\n     * @memberof IAppConfig\n     */\n\n    port: number;\n\n    /**\n     * The API prefix used in the application.\n     *\n     * @type {string}\n     * @memberof IAppConfig\n     */\n\n    apiPrefix: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAwsConfig.html":{"url":"interfaces/IAwsConfig.html","title":"interface - IAwsConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IAwsConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interfaces/aws.interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            AWS_S3_ACCESS_KEY_ID\n                                        \n                                \n                                \n                                        \n                                            AWS_S3_BUCKET_NAME\n                                        \n                                \n                                \n                                        \n                                            AWS_S3_COMPANION_SECRET\n                                        \n                                \n                                \n                                        \n                                            AWS_S3_DEFAULT_REGION\n                                        \n                                \n                                \n                                        \n                                            AWS_S3_ENDPOINT\n                                        \n                                \n                                \n                                        \n                                            AWS_S3_SECRET_ACCESS_KEY\n                                        \n                                \n                                \n                                        \n                                            AWS_S3_SERVER_HOST\n                                        \n                                \n                                \n                                        \n                                            AWS_S3_TEMP_DIRECTORY\n                                        \n                                \n                                \n                                        \n                                            TUS_STORAGE_DRIVER\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        AWS_S3_ACCESS_KEY_ID\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        AWS_S3_ACCESS_KEY_ID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        AWS_S3_BUCKET_NAME\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        AWS_S3_BUCKET_NAME:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        AWS_S3_COMPANION_SECRET\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        AWS_S3_COMPANION_SECRET:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        AWS_S3_DEFAULT_REGION\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        AWS_S3_DEFAULT_REGION:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        AWS_S3_ENDPOINT\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        AWS_S3_ENDPOINT:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        AWS_S3_SECRET_ACCESS_KEY\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        AWS_S3_SECRET_ACCESS_KEY:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        AWS_S3_SERVER_HOST\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        AWS_S3_SERVER_HOST:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        AWS_S3_TEMP_DIRECTORY\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        AWS_S3_TEMP_DIRECTORY:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        TUS_STORAGE_DRIVER\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        TUS_STORAGE_DRIVER:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        'use strict';\n\nexport interface IAwsConfig {\n    AWS_S3_ACCESS_KEY_ID: string;\n    AWS_S3_SECRET_ACCESS_KEY: string;\n    AWS_S3_BUCKET_NAME: string;\n    AWS_S3_DEFAULT_REGION: string;\n    AWS_S3_TEMP_DIRECTORY: string;\n    AWS_S3_ENDPOINT: string;\n\n    AWS_S3_SERVER_HOST: string;\n    AWS_S3_COMPANION_SECRET: string;\n    TUS_STORAGE_DRIVER: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IFileConfig.html":{"url":"interfaces/IFileConfig.html","title":"interface - IFileConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IFileConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interfaces/file.interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            accessKeyId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            awsDefaultS3Bucket\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            awsS3Region\n                                        \n                                \n                                \n                                        \n                                            driver\n                                        \n                                \n                                \n                                        \n                                            maxFileSize\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            secretAccessKey\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accessKeyId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accessKeyId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        awsDefaultS3Bucket\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        awsDefaultS3Bucket:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        awsS3Region\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        awsS3Region:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        driver\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        driver:         FileDriver\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         FileDriver\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxFileSize\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxFileSize:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        secretAccessKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        secretAccessKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        'use strict';\n\nimport { FileDriver } from '@config/type/file-config.type';\nexport interface IFileConfig {\n    driver: FileDriver;\n    accessKeyId?: string;\n    secretAccessKey?: string;\n    awsDefaultS3Bucket?: string;\n    awsS3Region?: string;\n    maxFileSize: number;\n    // encoding: string;\n    // buffer: Buffer;\n    // fieldname: string;\n    // mimetype: string;\n    // originalname: string;\n    // size: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IJWTConfig.html":{"url":"interfaces/IJWTConfig.html","title":"interface - IJWTConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IJWTConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interfaces/jwt.interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            algorithm\n                                        \n                                \n                                \n                                        \n                                            audience\n                                        \n                                \n                                \n                                        \n                                            expirationTime\n                                        \n                                \n                                \n                                        \n                                            expiresInSeconds\n                                        \n                                \n                                \n                                        \n                                            issuer\n                                        \n                                \n                                \n                                        \n                                            secret\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        algorithm\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        algorithm:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        audience\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        audience:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expirationTime\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expirationTime:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expiresInSeconds\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expiresInSeconds:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        issuer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        issuer:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        secret\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        secret:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        'use strict';\n\nexport interface IJWTConfig {\n    secret: string;\n    algorithm: string;\n    expiresInSeconds: number;\n    expirationTime: number;\n    issuer: string;\n    audience: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/INodeEmailerConfig.html":{"url":"interfaces/INodeEmailerConfig.html","title":"interface - INodeEmailerConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  INodeEmailerConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interfaces/node-emailer.interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            NODE_EMAILER_FROM_EMAIL\n                                        \n                                \n                                \n                                        \n                                            NODE_EMAILER_HOST\n                                        \n                                \n                                \n                                        \n                                            NODE_EMAILER_PASSWORD\n                                        \n                                \n                                \n                                        \n                                            NODE_EMAILER_PORT\n                                        \n                                \n                                \n                                        \n                                            NODE_EMAILER_TO_EMAIL\n                                        \n                                \n                                \n                                        \n                                            NODE_EMAILER_USER\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        NODE_EMAILER_FROM_EMAIL\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        NODE_EMAILER_FROM_EMAIL:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        NODE_EMAILER_HOST\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        NODE_EMAILER_HOST:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        NODE_EMAILER_PASSWORD\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        NODE_EMAILER_PASSWORD:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        NODE_EMAILER_PORT\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        NODE_EMAILER_PORT:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        NODE_EMAILER_TO_EMAIL\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        NODE_EMAILER_TO_EMAIL:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        NODE_EMAILER_USER\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        NODE_EMAILER_USER:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        'use strict';\n\nexport interface INodeEmailerConfig {\n    NODE_EMAILER_HOST: string;\n    NODE_EMAILER_PORT: number;\n    NODE_EMAILER_USER: string;\n    NODE_EMAILER_PASSWORD: string;\n    NODE_EMAILER_FROM_EMAIL: string;\n    NODE_EMAILER_TO_EMAIL: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPageMetaDtoParameters.html":{"url":"interfaces/IPageMetaDtoParameters.html","title":"interface - IPageMetaDtoParameters","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPageMetaDtoParameters\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/dto/pagination.meta.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface representing the parameters required for creating pagination metadata.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            maxPages\n                                        \n                                \n                                \n                                        \n                                            paginationQueryDto\n                                        \n                                \n                                \n                                        \n                                            totalItems\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        maxPages\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxPages:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        paginationQueryDto\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        paginationQueryDto:         PaginationQueryDto\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PaginationQueryDto\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        totalItems\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        totalItems:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\n\nimport { PaginationQueryDto } from '@utils/dto/pagination.dto';\n/**\n * Interface representing the parameters required for creating pagination metadata.\n *\n * @interface IPageMetaDtoParameters\n *\n * @property {PaginationQueryDto} paginationQueryDto - The query parameters for pagination, including page number and limit.\n * @property {number} totalItems - The total number of items available.\n * @property {number} [maxPages] - The maximum number of pages to display in pagination controls. Optional.\n */\nexport interface IPageMetaDtoParameters {\n    paginationQueryDto: PaginationQueryDto;\n    totalItems: number;\n    maxPages?: number;\n}\n\n/**\n * PaginationMetaDto provides metadata for paginated responses.\n * This class helps in constructing the pagination information that can be used\n * to navigate through large sets of data.\n *\n * @example\n * {\n *   totalItems: 77,\n *   currentPage: 7,\n *   pageSize: 10,\n *   totalPages: 8,\n *   startPage: 1,\n *   endPage: 7,\n *   startIndex: 60,\n *   endIndex: 76,\n *   pages: [1, 2, 3, 4, 5, 6, 7]\n * }\n */\n\nexport class PaginationMetaDto {\n    /**\n     * The total number of items available.\n     *\n     * @example 77\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 77, //  'Total records'\n    })\n    readonly totalItems: number;\n\n    /**\n     * The current page number.\n     *\n     * @example 7\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 7, //  'Current page number',\n    })\n    readonly currentPage: number;\n\n    /**\n     * The number of items per page (page size).\n     *\n     * @example 10\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 10, //  'limit / page record number',\n    })\n    readonly pageSize: number;\n\n    /**\n     * The total number of pages based on total items and page size.\n     *\n     * @example 8\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 8, //  'Total pages',\n    })\n    readonly totalPages: number;\n\n    /**\n     * The start page in the pagination controls.\n     *\n     * @example 1\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 1, //  'Start page',\n    })\n    readonly startPage: number;\n\n    /**\n     * The end page in the pagination controls.\n     *\n     * @example 7\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 7, //  'End page',\n    })\n    readonly endPage: number;\n\n    /**\n     * The index of the first item on the current page.\n     *\n     * @example 60\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 0, //  'Record start index',\n    })\n    readonly startIndex: number;\n\n    /**\n     * The index of the last item on the current page.\n     *\n     * @example 76\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 76, //  'Record end index',\n    })\n    readonly endIndex: number;\n\n    /**\n     * An array of page numbers to display in pagination controls.\n     *\n     * @example [1, 2, 3, 4, 5, 6, 7]\n     */\n\n    @ApiPropertyOptional({\n        type: Array,\n        example: [1, 2, 3, 4, 5, 6, 7], //  'Array of page number',\n    })\n    readonly pages: any;\n\n    /**\n     * Creates an instance of PaginationMetaDto.\n     *\n     * @param {IPageMetaDtoParameters} params - Parameters required for creating pagination metadata.\n     */\n\n    constructor({ paginationQueryDto, totalItems, maxPages = 10 }: IPageMetaDtoParameters) {\n        const pageSize = paginationQueryDto.limit || 10;\n        let currentPage = paginationQueryDto.page || 1;\n\n        // calculate total pages\n\n        const totalPages = Math.ceil(totalItems / pageSize);\n\n        // ensure current page isn't out of range\n        if (currentPage  totalPages) {\n            currentPage = totalPages;\n        }\n\n        let startPage: number, endPage: number;\n\n        if (totalPages = totalPages) {\n                // current page near the end\n                startPage = totalPages - maxPages + 1;\n                endPage = totalPages;\n            } else {\n                // current page somewhere in the middle\n                startPage = currentPage - maxPagesBeforeCurrentPage;\n                endPage = currentPage + maxPagesAfterCurrentPage;\n            }\n        }\n\n        // calculate start and end item indexes\n        const startIndex = (currentPage - 1) * pageSize;\n        const endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\n\n        // create an array of pages to ng-repeat in the pager control\n        const pages = Array.from(Array(endPage + 1 - startPage).keys()).map((i) => startPage + i);\n\n        this.totalItems = totalItems;\n        this.currentPage = currentPage;\n        this.pageSize = pageSize;\n        this.totalPages = totalPages;\n        this.startPage = startPage;\n        this.endPage = endPage;\n        this.startIndex = startIndex > 0 ? startIndex : 0;\n        this.endIndex = endIndex > 0 ? endIndex : 0;\n        this.pages = pages;\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPaginationFieldConfig.html":{"url":"interfaces/IPaginationFieldConfig.html","title":"interface - IPaginationFieldConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPaginationFieldConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/types/pagination-options.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for configuring pagination fields in a query.\nThis interface provides a contract for configuring how fields should be handled when constructing\npagination queries, including specifying the table to join, generating an alias, and selecting fields.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            alias\n                                        \n                                \n                                \n                                        \n                                            joinTable\n                                        \n                                \n                                \n                                        \n                                            selectFields\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        alias\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        alias:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A function that returns an alias for the table.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        joinTable\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        joinTable:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The table to join for pagination queries.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectFields\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectFields:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A function that returns an array of field names to select based on the provided alias.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface IPaginationFieldConfig {\n    /**\n     * The table to join for pagination queries.\n     *\n     * @type {any}\n     */\n\n    joinTable: any;\n\n    /**\n     * A function that returns an alias for the table.\n     *\n     * @returns {string} - The alias for the table.\n     */\n\n    alias: () => string;\n\n    /**\n     * A function that returns an array of field names to select based on the provided alias.\n     *\n     * @param {string} alias - The alias for the table.\n     * @returns {string[]} - An array of field names to select.\n     */\n\n    selectFields: (alias: string) => string[];\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPostgreSQLConfig.html":{"url":"interfaces/IPostgreSQLConfig.html","title":"interface - IPostgreSQLConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPostgreSQLConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interfaces/postgres.interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            POSTGRES_CONNECTION_LIMIT\n                                        \n                                \n                                \n                                        \n                                            POSTGRES_HOST\n                                        \n                                \n                                \n                                        \n                                            POSTGRES_NAME\n                                        \n                                \n                                \n                                        \n                                            POSTGRES_PASSWORD\n                                        \n                                \n                                \n                                        \n                                            POSTGRES_POOL_TIMEOUT\n                                        \n                                \n                                \n                                        \n                                            POSTGRES_PORT\n                                        \n                                \n                                \n                                        \n                                            POSTGRES_SCHEMA\n                                        \n                                \n                                \n                                        \n                                            POSTGRES_USER\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        POSTGRES_CONNECTION_LIMIT\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        POSTGRES_CONNECTION_LIMIT:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        POSTGRES_HOST\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        POSTGRES_HOST:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        POSTGRES_NAME\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        POSTGRES_NAME:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        POSTGRES_PASSWORD\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        POSTGRES_PASSWORD:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        POSTGRES_POOL_TIMEOUT\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        POSTGRES_POOL_TIMEOUT:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        POSTGRES_PORT\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        POSTGRES_PORT:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        POSTGRES_SCHEMA\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        POSTGRES_SCHEMA:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        POSTGRES_USER\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        POSTGRES_USER:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        'use strict';\n\nexport interface IPostgreSQLConfig {\n    POSTGRES_HOST: string;\n    POSTGRES_PORT: string;\n    POSTGRES_USER: string;\n    POSTGRES_PASSWORD: string;\n    POSTGRES_NAME: string;\n    POSTGRES_CONNECTION_LIMIT: string;\n    POSTGRES_POOL_TIMEOUT: string;\n    POSTGRES_SCHEMA: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISMSConfig.html":{"url":"interfaces/ISMSConfig.html","title":"interface - ISMSConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ISMSConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interfaces/sms.interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            API_KEY\n                                        \n                                \n                                \n                                        \n                                            SENDER_ID\n                                        \n                                \n                                \n                                        \n                                            SMS_PROVIDER_NAME\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        API_KEY\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        API_KEY:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        SENDER_ID\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        SENDER_ID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        SMS_PROVIDER_NAME\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        SMS_PROVIDER_NAME:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        'use strict';\n\nexport interface ISMSConfig {\n    SMS_PROVIDER_NAME: string;\n    API_KEY: string;\n    SENDER_ID: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISendGridConfig.html":{"url":"interfaces/ISendGridConfig.html","title":"interface - ISendGridConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ISendGridConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interfaces/sendgrid.interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            FROM_EMAIL\n                                        \n                                \n                                \n                                        \n                                            SENDGRID_API_KEY\n                                        \n                                \n                                \n                                        \n                                            TO_EMAIL\n                                        \n                                \n                                \n                                        \n                                            WELCOME_EMAIL\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        FROM_EMAIL\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        FROM_EMAIL:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        SENDGRID_API_KEY\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        SENDGRID_API_KEY:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        TO_EMAIL\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        TO_EMAIL:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        WELCOME_EMAIL\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        WELCOME_EMAIL:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        'use strict';\n\nexport interface ISendGridConfig {\n    SENDGRID_API_KEY: string;\n    FROM_EMAIL: string;\n    TO_EMAIL: string;\n    WELCOME_EMAIL: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUploadFileConfig.html":{"url":"interfaces/IUploadFileConfig.html","title":"interface - IUploadFileConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUploadFileConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interfaces/upload-file.interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            FILE_UPLOAD_DESTINATION\n                                        \n                                \n                                \n                                        \n                                            MAX_UPLOAD_FILE_SIZE\n                                        \n                                \n                                \n                                        \n                                            MULTIPLE_FILE_PATH\n                                        \n                                \n                                \n                                        \n                                            PROFILE_PIC_FILE_PATH\n                                        \n                                \n                                \n                                        \n                                            TEMP_FILE_UPLOAD_URL\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        FILE_UPLOAD_DESTINATION\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        FILE_UPLOAD_DESTINATION:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        MAX_UPLOAD_FILE_SIZE\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        MAX_UPLOAD_FILE_SIZE:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        MULTIPLE_FILE_PATH\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        MULTIPLE_FILE_PATH:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        PROFILE_PIC_FILE_PATH\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        PROFILE_PIC_FILE_PATH:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        TEMP_FILE_UPLOAD_URL\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        TEMP_FILE_UPLOAD_URL:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        'use strict';\n\nexport interface IUploadFileConfig {\n    TEMP_FILE_UPLOAD_URL: string;\n    FILE_UPLOAD_DESTINATION: string;\n    MAX_UPLOAD_FILE_SIZE: number;\n    PROFILE_PIC_FILE_PATH: string;\n    MULTIPLE_FILE_PATH: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationMetaDto.html":{"url":"classes/PaginationMetaDto.html","title":"class - PaginationMetaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationMetaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/dto/pagination.meta.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                PaginationMetaDto provides metadata for paginated responses.\nThis class helps in constructing the pagination information that can be used\nto navigate through large sets of data.\n{\n  totalItems: 77,\n  currentPage: 7,\n  pageSize: 10,\n  totalPages: 8,\n  startPage: 1,\n  endPage: 7,\n  startIndex: 60,\n  endIndex: 76,\n  pages: [1, 2, 3, 4, 5, 6, 7]\n}\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                currentPage\n                            \n                            \n                                    Readonly\n                                endIndex\n                            \n                            \n                                    Readonly\n                                endPage\n                            \n                            \n                                    Readonly\n                                pages\n                            \n                            \n                                    Readonly\n                                pageSize\n                            \n                            \n                                    Readonly\n                                startIndex\n                            \n                            \n                                    Readonly\n                                startPage\n                            \n                            \n                                    Readonly\n                                totalItems\n                            \n                            \n                                    Readonly\n                                totalPages\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: IPageMetaDtoParameters)\n                    \n                \n                        \n                            \n                                Defined in src/utils/dto/pagination.meta.dto.ts:145\n                            \n                        \n\n                \n                    \n                            Creates an instance of PaginationMetaDto.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                        IPageMetaDtoParameters\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        currentPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: Number, example: 7})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.meta.dto.ts:61\n                        \n                    \n\n            \n                \n                    The current page number.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        endIndex\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: Number, example: 76})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.meta.dto.ts:133\n                        \n                    \n\n            \n                \n                    The index of the last item on the current page.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        endPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: Number, example: 7})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.meta.dto.ts:109\n                        \n                    \n\n            \n                \n                    The end page in the pagination controls.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        pages\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: Array, example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.meta.dto.ts:145\n                        \n                    \n\n            \n                \n                    An array of page numbers to display in pagination controls.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        pageSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: Number, example: 10})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.meta.dto.ts:73\n                        \n                    \n\n            \n                \n                    The number of items per page (page size).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        startIndex\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: Number, example: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.meta.dto.ts:121\n                        \n                    \n\n            \n                \n                    The index of the first item on the current page.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        startPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: Number, example: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.meta.dto.ts:97\n                        \n                    \n\n            \n                \n                    The start page in the pagination controls.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        totalItems\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: Number, example: 77})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.meta.dto.ts:49\n                        \n                    \n\n            \n                \n                    The total number of items available.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        totalPages\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: Number, example: 8})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.meta.dto.ts:85\n                        \n                    \n\n            \n                \n                    The total number of pages based on total items and page size.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\n\nimport { PaginationQueryDto } from '@utils/dto/pagination.dto';\n/**\n * Interface representing the parameters required for creating pagination metadata.\n *\n * @interface IPageMetaDtoParameters\n *\n * @property {PaginationQueryDto} paginationQueryDto - The query parameters for pagination, including page number and limit.\n * @property {number} totalItems - The total number of items available.\n * @property {number} [maxPages] - The maximum number of pages to display in pagination controls. Optional.\n */\nexport interface IPageMetaDtoParameters {\n    paginationQueryDto: PaginationQueryDto;\n    totalItems: number;\n    maxPages?: number;\n}\n\n/**\n * PaginationMetaDto provides metadata for paginated responses.\n * This class helps in constructing the pagination information that can be used\n * to navigate through large sets of data.\n *\n * @example\n * {\n *   totalItems: 77,\n *   currentPage: 7,\n *   pageSize: 10,\n *   totalPages: 8,\n *   startPage: 1,\n *   endPage: 7,\n *   startIndex: 60,\n *   endIndex: 76,\n *   pages: [1, 2, 3, 4, 5, 6, 7]\n * }\n */\n\nexport class PaginationMetaDto {\n    /**\n     * The total number of items available.\n     *\n     * @example 77\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 77, //  'Total records'\n    })\n    readonly totalItems: number;\n\n    /**\n     * The current page number.\n     *\n     * @example 7\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 7, //  'Current page number',\n    })\n    readonly currentPage: number;\n\n    /**\n     * The number of items per page (page size).\n     *\n     * @example 10\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 10, //  'limit / page record number',\n    })\n    readonly pageSize: number;\n\n    /**\n     * The total number of pages based on total items and page size.\n     *\n     * @example 8\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 8, //  'Total pages',\n    })\n    readonly totalPages: number;\n\n    /**\n     * The start page in the pagination controls.\n     *\n     * @example 1\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 1, //  'Start page',\n    })\n    readonly startPage: number;\n\n    /**\n     * The end page in the pagination controls.\n     *\n     * @example 7\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 7, //  'End page',\n    })\n    readonly endPage: number;\n\n    /**\n     * The index of the first item on the current page.\n     *\n     * @example 60\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 0, //  'Record start index',\n    })\n    readonly startIndex: number;\n\n    /**\n     * The index of the last item on the current page.\n     *\n     * @example 76\n     */\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 76, //  'Record end index',\n    })\n    readonly endIndex: number;\n\n    /**\n     * An array of page numbers to display in pagination controls.\n     *\n     * @example [1, 2, 3, 4, 5, 6, 7]\n     */\n\n    @ApiPropertyOptional({\n        type: Array,\n        example: [1, 2, 3, 4, 5, 6, 7], //  'Array of page number',\n    })\n    readonly pages: any;\n\n    /**\n     * Creates an instance of PaginationMetaDto.\n     *\n     * @param {IPageMetaDtoParameters} params - Parameters required for creating pagination metadata.\n     */\n\n    constructor({ paginationQueryDto, totalItems, maxPages = 10 }: IPageMetaDtoParameters) {\n        const pageSize = paginationQueryDto.limit || 10;\n        let currentPage = paginationQueryDto.page || 1;\n\n        // calculate total pages\n\n        const totalPages = Math.ceil(totalItems / pageSize);\n\n        // ensure current page isn't out of range\n        if (currentPage  totalPages) {\n            currentPage = totalPages;\n        }\n\n        let startPage: number, endPage: number;\n\n        if (totalPages = totalPages) {\n                // current page near the end\n                startPage = totalPages - maxPages + 1;\n                endPage = totalPages;\n            } else {\n                // current page somewhere in the middle\n                startPage = currentPage - maxPagesBeforeCurrentPage;\n                endPage = currentPage + maxPagesAfterCurrentPage;\n            }\n        }\n\n        // calculate start and end item indexes\n        const startIndex = (currentPage - 1) * pageSize;\n        const endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\n\n        // create an array of pages to ng-repeat in the pager control\n        const pages = Array.from(Array(endPage + 1 - startPage).keys()).map((i) => startPage + i);\n\n        this.totalItems = totalItems;\n        this.currentPage = currentPage;\n        this.pageSize = pageSize;\n        this.totalPages = totalPages;\n        this.startPage = startPage;\n        this.endPage = endPage;\n        this.startIndex = startIndex > 0 ? startIndex : 0;\n        this.endIndex = endIndex > 0 ? endIndex : 0;\n        this.pages = pages;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationQueryDto.html":{"url":"classes/PaginationQueryDto.html","title":"class - PaginationQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/dto/pagination.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO class for pagination query parameters.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                filters\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                pagination\n                            \n                            \n                                    Optional\n                                sort\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        filters\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FilterQueryDto[] | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({name: 'filters', required: false, type: String, description: 'Array of filter objects as a JSON string', example: '[{\"field\":\"name\",\"operator\":\"=\",\"value\":\"IN\"}]'})@IsOptional()@Transform(undefined)@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.dto.ts:119\n                        \n                    \n\n            \n                \n                    Filters to apply to the query.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Record limit', minimum: 1, maximum: 500, default: 10})@IsOptional()@IsNumberStringOrNumber()@ToNumber()@Min(10)@Max(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.dto.ts:97\n                        \n                    \n\n            \n                \n                    The number of records per page.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Page number', minimum: 1, default: 1})@IsOptional()@IsNumberStringOrNumber()@ToNumber()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.dto.ts:77\n                        \n                    \n\n            \n                \n                    The page number for pagination.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        pagination\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PaginationType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Pagination must all (Page and has_next_page), infinity (only has_next_page), paginate(only page)', enum: PaginationType, default: undefined})@IsEnum(PaginationType)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.dto.ts:59\n                        \n                    \n\n            \n                \n                    The type of pagination to apply.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        sort\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SortByDto[] | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({name: 'sort', required: false, type: String, description: 'Array of sort objects as a JSON string', example: '[{\"field\":\"name\",\"direction\":\"ASC\"}]'})@IsOptional()@Transform(undefined)@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.dto.ts:141\n                        \n                    \n\n            \n                \n                    Sorting options for the query.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nimport { Type, Transform, plainToInstance } from 'class-transformer';\nimport {\n    IsOptional,\n    Min,\n    Max,\n    IsNotEmpty,\n    IsString,\n    ValidateNested,\n    Matches,\n    IsEnum,\n    // Validate,\n    // IsIn,\n} from 'class-validator';\n\n// import { IsValidField } from '@core/validators/field.validator'; // Import the custom validator\nimport { IsNumberStringOrNumber } from '@decorators/number.string.validator';\nimport { ToNumber } from '@decorators/transforms.decorator';\n// import { IsNumberStringOrNumber } from '@decorators/number.string.validator';\n// import { ToNumber } from '@decorators/transforms.decorator';\n// import { Country } from '@modules/countries/dto/country';\n\n/**\n * Enum representing different pagination types.\n *\n * @export\n * @enum {string}\n */\n\nexport enum PaginationType {\n    NONE = 'no',\n    INFINITY = 'infinity',\n    PAGINATE = 'paginate',\n    ALL = 'all',\n}\n\n/**\n * DTO class for pagination query parameters.\n *\n * @export\n */\nexport class PaginationQueryDto {\n    /**\n     * The type of pagination to apply.\n     *\n     * @type {PaginationType}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        description:\n            'Pagination must all (Page and has_next_page), infinity (only has_next_page), paginate(only page)',\n        enum: PaginationType,\n        default: PaginationType.ALL,\n    })\n    @IsEnum(PaginationType)\n    @IsOptional()\n    readonly pagination: PaginationType;\n\n    /**\n     * The page number for pagination.\n     *\n     * @type {number}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        description: 'Page number',\n        minimum: 1,\n        default: 1,\n    })\n    @IsOptional()\n    @IsNumberStringOrNumber()\n    @ToNumber()\n    @Min(1)\n    readonly page?: number;\n\n    /**\n     * The number of records per page.\n     *\n     * @type {number}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        description: 'Record limit',\n        minimum: 1,\n        maximum: 500,\n        default: 10,\n    })\n    @IsOptional()\n    @IsNumberStringOrNumber()\n    @ToNumber()\n    @Min(10)\n    @Max(500)\n    readonly limit?: number = 10;\n\n    /**\n     * Filters to apply to the query.\n     *\n     * @type {FilterQueryDto[] | null}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        name: 'filters',\n        required: false,\n        type: String,\n        description: 'Array of filter objects as a JSON string',\n        example: '[{\"field\":\"name\",\"operator\":\"=\",\"value\":\"IN\"}]',\n    })\n    @IsOptional()\n    @Transform(({ value }) => {\n        return value ? plainToInstance(FilterQueryDto, JSON.parse(value)) : undefined;\n    })\n    @ValidateNested({ each: true })\n    @Type(() => FilterQueryDto)\n    filters?: FilterQueryDto[] | null;\n\n    /**\n     * Sorting options for the query.\n     *\n     * @type {SortByDto[] | null}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        name: 'sort',\n        required: false,\n        type: String,\n        description: 'Array of sort objects as a JSON string',\n        example: '[{\"field\":\"name\",\"direction\":\"ASC\"}]',\n    })\n    @IsOptional()\n    @Transform(({ value }) => {\n        return value ? plainToInstance(SortByDto, JSON.parse(value)) : undefined;\n    })\n    @ValidateNested({ each: true })\n    @Type(() => SortByDto)\n    sort?: SortByDto[] | null;\n}\n\n/**\n * DTO class for filter query parameters.\n *\n * @export\n */\nexport class FilterQueryDto {\n    /**\n     * The field to filter on.\n     *\n     * @type {string}\n     * @memberof FilterQueryDto\n     */\n\n    @ApiProperty({ example: 'iso', required: true })\n    @IsNotEmpty()\n    @IsString()\n    field: string;\n\n    /**\n     * The operator to use for filtering.\n     *\n     * @type {string}\n     * @memberof FilterQueryDto\n     */\n\n    @ApiProperty({ example: '=' })\n    @IsNotEmpty()\n    @IsString()\n    operator: string;\n\n    /**\n     * The value to filter by.\n     *\n     * @type {string}\n     * @memberof FilterQueryDto\n     */\n\n    @ApiProperty({ example: 'IN' })\n    @IsNotEmpty()\n    @IsString()\n    value: string;\n}\n\n/**\n * DTO class for sorting options.\n *\n * @export\n */\nexport class SortByDto {\n    // @ApiProperty({ example: 'name' })\n    // @IsString()\n    // @Validate(IsValidField, [Country], {\n    //     message: 'Field must be a valid key of Country',\n    // })\n    // field: keyof Country;\n    /**\n     * The field to sort by.\n     *\n     * @type {string}\n     * @memberof SortByDto\n     */\n\n    @ApiProperty()\n    @IsString()\n    // @IsIn(abc(x : keyof TExposedAccountInfo), {\n    //     message: 'Field must be one of \"name\", \"age\", or \"status\"',\n    // })\n    // @Validate(IsValidField, [{ entity: () => T }], {\n    //     message: 'Field must be a valid key of the specified entity',\n    // })\n    field: string;\n\n    /**\n     * The direction of the sort (ascending or descending).\n     *\n     * @type {string}\n     * @memberof SortByDto\n     */\n\n    @ApiProperty({ example: 'ASC' })\n    @IsString()\n    @Matches(/^(ASC|DESC|asc|desc)$/, {\n        message: 'operator must be one of ASC, DESC, asc, or desc',\n    })\n    direction: string;\n}\n\n// export class PaginatedResultDto {\n//     @ApiProperty()\n//     data: T[];\n\n//     @ApiProperty()\n//     total: number;\n\n//     @ApiProperty()\n//     page: number;\n\n//     @ApiProperty()\n//     limit: number;\n// }\n\n//DX\n// import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\n// import { Type, Transform, plainToInstance } from 'class-transformer';\n// import {\n//     IsOptional,\n//     Min,\n//     Max,\n//     IsNotEmpty,\n//     IsString,\n//     IsArray,\n//     ValidateNested,\n//     Validate,\n//     Matches,\n// } from 'class-validator';\n\n// import { IsNumberStringOrNumber } from '@decorators/number.string.validator';\n// import { ToNumber } from '@decorators/transforms.decorator';\n// import { SortBy } from '@validators/filter.validator';\n\n// export class FilterQueryDto {\n//     @ApiProperty({ example: 'name', required: true })\n//     @IsNotEmpty()\n//     @IsString()\n//     field: string;\n\n//     @ApiProperty({ example: 'LIKE' })\n//     @IsNotEmpty()\n//     @IsString()\n//     operator: string;\n\n//     @ApiProperty({ example: '%John%' })\n//     @IsNotEmpty()\n//     @IsString()\n//     value: string;\n// }\n\n// export class SortByDto {\n//     @ApiProperty({ example: 'name' })\n//     @IsString()\n//     field: string;\n\n//     @ApiProperty({ example: 'ASC' })\n//     @IsString()\n//     @Matches(/^(ASC|DESC|asc|desc)$/, {\n//         message: 'operator must be one of ASC, DESC, asc, or desc',\n//     })\n//     direction: string;\n// }\n\n// export class PaginationQueryDto {\n//     @ApiPropertyOptional({\n//         description: 'Page number',\n//         minimum: 1,\n//         default: 1,\n//     })\n//     @IsOptional()\n//     @IsNumberStringOrNumber()\n//     @ToNumber()\n//     @Min(1)\n//     // @Transform(({ value }) => {\n//     //     const strippedValue = String(value).replace(/['\"]+/g, '');\n//     //     const numberValue = Number(strippedValue);\n//     //     return isNaN(numberValue) ? 'undefined' : numberValue;\n//     // })\n//     readonly page?: number;\n\n//     @ApiPropertyOptional({\n//         description: 'Record limit',\n//         minimum: 1,\n//         maximum: 500,\n//         default: 10,\n//     })\n//     @IsOptional()\n//     @IsNumberStringOrNumber()\n//     @ToNumber()\n//     @Min(10)\n//     @Max(500)\n//     readonly limit?: number = 10;\n\n//     // @IsOptional()\n//     // @IsArray()\n//     // @ValidateNested({ each: true })\n//     // @Type(() => FilterQueryDto)\n//     // filters?: FilterQueryDto[];\n//     // // filters?: any;\n//     @ApiPropertyOptional({\n//         name: 'filters',\n//         required: false,\n//         type: String,\n//         description: 'Array of filter objects as a JSON string',\n//         example:\n//             '[{\"field\":\"name\",\"operator\":\"LIKE\",\"value\":\"John\"},{\"field\":\"age\",\"operator\":\">\",\"value\":\"30\"}]',\n//     })\n//     @IsOptional()\n//     @Transform(({ value }) => {\n//         return value ? plainToInstance(FilterQueryDto, JSON.parse(value)) : undefined;\n//     })\n//     @ValidateNested({ each: true })\n//     @Type(() => FilterQueryDto)\n//     filters?: FilterQueryDto[] | null;\n\n//     // @ApiPropertyOptional({\n//     //     description: ' Name or City:  ASC or DESC',\n//     //     example: 'name ASC',\n//     // })\n//     // @IsOptional()\n//     // @IsString()\n//     // @Validate(SortBy)\n//     // readonly sort?: string;\n//     // @ApiPropertyOptional({ type: [SortByDto], isArray: true })\n//     // @IsOptional()\n//     // @Transform(({ value }) => {\n//     //     return value ? plainToInstance(SortUserDto, JSON.parse(value)) : undefined;\n//     // })\n//     // @ValidateNested({ each: true })\n//     // @Type(() => SortUserDto)\n//     // sort?: SortUserDto[] | null;\n\n//     @ApiPropertyOptional({\n//         name: 'sort',\n//         required: false,\n//         type: String,\n//         description: 'Array of sort objects as a JSON string',\n//         example: '[{\"field\":\"name\",\"direction\":\"ASC\"},{\"field\":\"age\",\"direction\":\"DESC\"}]',\n//     })\n//     @IsOptional()\n//     @Transform(({ value }) => {\n//         return value ? plainToInstance(SortByDto, JSON.parse(value)) : undefined;\n//     })\n//     @ValidateNested({ each: true })\n//     @Type(() => SortByDto)\n//     sort?: SortByDto[] | null;\n// }\n\n// export class PaginatedResultDto {\n//     @ApiProperty()\n//     data: T[];\n\n//     @ApiProperty()\n//     total: number;\n\n//     @ApiProperty()\n//     page: number;\n\n//     @ApiProperty()\n//     limit: number;\n// }\n\n// // import { ApiProperty, ApiExtraModels } from '@nestjs/swagger';\n\n// // import { Type } from 'class-transformer';\n// // import { IsOptional, IsString, IsArray, ValidateNested, IsNumber } from 'class-validator';\n\n// // // export class FilterQueryDto {\n// // //     @ApiProperty({ example: 'name' })\n// // //     field: string;\n\n// // //     @ApiProperty({ example: 'LIKE' })\n// // //     operator: string;\n\n// // //     @ApiProperty({ example: '%John%' })\n// // //     value: string;\n// // // }\n// // export class FilterQueryDto {\n// //     @ApiProperty({ example: 'country_name' })\n// //     @IsString()\n// //     field: string;\n\n// //     @ApiProperty({ example: 'LIKE' })\n// //     @IsString()\n// //     operator: string;\n\n// //     @ApiProperty({ example: '%United%' })\n// //     @IsString()\n// //     value: string;\n// // }\n// // @ApiExtraModels(FilterQueryDto)\n// // export class PaginationQueryDto {\n// //     @ApiProperty({ example: 1, required: false })\n// //     @IsOptional()\n// //     @IsNumber()\n// //     @Type(() => Number)\n// //     page?: number = 1;\n\n// //     @ApiProperty({ example: 10, required: false })\n// //     @IsOptional()\n// //     @IsNumber()\n// //     @Type(() => Number)\n// //     limit?: number = 10;\n\n// //     // @ApiProperty({\n// //     //     type: [FilterQueryDto],\n// //     //     required: false,\n// //     //     isArray: true,\n// //     // })\n// //     // @Type(() => FilterQueryDto)\n// //     // filters?: FilterQueryDto[];\n// //     @ApiProperty({\n// //         type: FilterQueryDto,\n// //         required: false,\n// //         isArray: true,\n// //     })\n// //     // @IsOptional()\n// //     @IsArray()\n// //     @ValidateNested({ each: true })\n// //     @Type(() => FilterQueryDto)\n// //     filters?: FilterQueryDto[];\n\n// //     // @ApiProperty({\n// //     //     type: [Object],\n// //     //     // items: {\n// //     //     //     type: 'object',\n// //     //     //     items: {\n// //     //     //         type: 'object',\n// //     //     //     },\n// //     //     // },\n// //     // })\n// //     // coords: FilterQueryDto[];\n\n// //     // @ApiProperty({ type: String, required: false })\n// //     // @IsOptional()\n// //     // @IsArray()\n// //     // @ValidateNested({ each: true })\n// //     // @Type(() => FilterQueryDto)\n// //     // filters?: FilterQueryDto[];\n\n// //     @ApiProperty({ example: 'name ASC1', required: false })\n// //     sort?: string;\n// // }\n\n// // // export class PaginationQueryDto {\n// // //     @ApiProperty({ example: 1, required: false })\n// // //     page?: number = 1;\n\n// // //     @ApiProperty({ example: 10, required: false })\n// // //     limit?: number = 10;\n\n// // //     // @ApiProperty({ type: [FilterQueryDto], required: false, isArray: true })\n// // //     // filters?: FilterQueryDto[];\n\n// // //     // @ApiProperty({ type: String, required: false, isArray: true })\n// // //     // filters?: FilterQueryDto[];\n\n// // //     // @ApiProperty({ type: [FilterQueryDto], required: false, isArray: true })\n// // //     // @Type(() => FilterQueryDto)\n// // //     // filters?: FilterQueryDto[];\n\n// // //     @ApiProperty({ type: [FilterQueryDto], required: false })\n// // //     @IsOptional()\n// // //     @IsArray()\n// // //     @ValidateNested({ each: true })\n// // //     @Type(() => FilterQueryDto)\n// // //     filters?: FilterQueryDto[];\n\n// // //     @ApiProperty({ example: 'name ASC1', required: false })\n// // //     sort?: string;\n// // // }\n\n// // export class PaginatedResultDto {\n// //     @ApiProperty()\n// //     data: T[];\n\n// //     @ApiProperty()\n// //     total: number;\n\n// //     @ApiProperty()\n// //     page: number;\n\n// //     @ApiProperty()\n// //     limit: number;\n// // }\n\n// // export class abc {\n// //     @ApiProperty()\n// //     page: number;\n\n// //     @ApiProperty()\n// //     limit: number;\n// // }\n\n// // import { applyDecorators } from '@nestjs/common';\n// // import { ApiProperty, ApiExtraModels, ApiQuery, getSchemaPath } from '@nestjs/swagger';\n\n// // /**\n// //  * Combines Swagger Decorators to create a description for `filters[name]=something`\n// //  *  - has support for swagger\n// //  *  - automatic transformation with nestjs\n// //  */\n// // // // eslint-disable-next-line @typescript-eslint/ban-types,@typescript-eslint/explicit-module-boundary-types\n// // // export function ApiFilterQuery(fieldName: string, filterDto: Function) {\n// // //     return applyDecorators(\n// // //         ApiExtraModels(filterDto),\n// // //         ApiQuery({\n// // //             required: false,\n// // //             name: fieldName,\n// // //             style: 'deepObject',\n// // //             explode: true,\n// // //             type: 'object',\n// // //             schema: {\n// // //                 $ref: getSchemaPath(filterDto),\n// // //             },\n// // //         })\n// // //     );\n// // // }\n// // // eslint-disable-next-line @typescript-eslint/ban-types,@typescript-eslint/explicit-module-boundary-types\n// // export function ApiFilterQuery(fieldName: string, filterDto: Function, index: number) {\n// //     return applyDecorators(\n// //         ApiExtraModels(filterDto),\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}]`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //             schema: {\n// //                 $ref: getSchemaPath(filterDto),\n// //             },\n// //         })\n// //     );\n// // }\n\n// // export function ApiFilterQuery(fieldName: string, index: number) {\n// //     return applyDecorators(\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}].field`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //         }),\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}].operator`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //         }),\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}].value`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //         })\n// //     );\n// // }\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationResponseDto.html":{"url":"classes/PaginationResponseDto.html","title":"class - PaginationResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/dto/pagination-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO class for paginated responses.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                    Optional\n                                has_next_page\n                            \n                            \n                                    Optional\n                                meta\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T[]\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination-response.dto.ts:21\n                        \n                    \n\n            \n                \n                    The array of paginated data.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        has_next_page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination-response.dto.ts:39\n                        \n                    \n\n            \n                \n                    Indicates if there is a next page available.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        meta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PaginationMetaDto\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination-response.dto.ts:30\n                        \n                    \n\n            \n                \n                    Metadata about the pagination.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from '@nestjs/common';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nimport { PaginationMetaDto } from '@utils/dto/pagination.meta.dto';\n\n/**\n * DTO class for paginated responses.\n *\n * @export\n * @template T - Type of the data contained in the response.\n */\n\nexport class PaginationResponseDto {\n    /**\n     * The array of paginated data.\n     *\n     * @type {T[]}\n     * @memberof PaginationResponseDto\n     */\n\n    data: T[];\n\n    /**\n     * Metadata about the pagination.\n     *\n     * @type {PaginationMetaDto}\n     * @memberof PaginationResponseDto\n     */\n\n    meta?: PaginationMetaDto;\n\n    /**\n     * Indicates if there is a next page available.\n     *\n     * @type {boolean}\n     * @memberof PaginationResponseDto\n     */\n\n    has_next_page?: boolean;\n}\n\n/**\n * Creates a pagination response DTO class with specified data type.\n *\n * @export\n * @template T - Type of the data contained in the response.\n * @param {Type} classReference - The class reference for the data type.\n * @returns {Type} The class type of the pagination response DTO.\n */\n\nexport function PaginationResponse(classReference: Type) {\n    abstract class Pagination {\n        /**\n         * The array of paginated data.\n         *\n         * @type {T[]}\n         * @memberof Pagination\n         */\n\n        @ApiProperty({ type: [classReference] })\n        readonly data!: T[];\n\n        /**\n         * Metadata about the pagination.\n         *\n         * @type {PaginationMetaDto}\n         * @memberof Pagination\n         */\n\n        @ApiPropertyOptional({\n            type: PaginationMetaDto,\n            example: {\n                totalItems: 77,\n                currentPage: 1,\n                pageSize: 10,\n                totalPages: 8,\n                startPage: 1,\n                endPage: 8,\n                startIndex: 0,\n                endIndex: 76,\n                pages: [1, 2, 3, 4, 5, 6, 7],\n            },\n            description:\n                'When you pass `all` or `pagination` in the pagination query field, you will receive the meta field in the response.',\n        })\n        meta?: PaginationMetaDto;\n\n        /**\n         * Indicates if there is a next page available.\n         *\n         * @type {boolean}\n         * @memberof Pagination\n         */\n\n        @ApiPropertyOptional({\n            type: Boolean,\n            example: true,\n            description:\n                'When you pass `all` or `infinity` in the pagination query field, you will receive the has_next_page field in the response.',\n        })\n        readonly has_next_page?: boolean;\n    }\n\n    Object.defineProperty(Pagination, 'name', {\n        writable: false,\n        value: `Pagination${classReference.name}ResponseDto`,\n    });\n\n    return Pagination;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaginationService.html":{"url":"injectables/PaginationService.html","title":"injectable - PaginationService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  PaginationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/helper/services/pagination.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The PaginationService provides functionality to handle pagination for database queries. It utilizes Prisma's query capabilities\nto perform paginated data retrieval based on the provided query parameters.\n\nThe paginate method constructs SQL queries to fetch paginated data and its corresponding metadata.\nThe method supports different pagination strategies such as 'all' and 'infinity'.\n\nconst paginationQuery = new PaginationQueryDto({\n    page: 1,\n    limit: 10,\n    pagination: 'paginate',\n});\n\nconst result = await paginationService.paginate(\n    'SELECT * FROM my_table',\n    'SELECT COUNT(*) as count FROM my_table',\n    paginationQuery\n);\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                paginate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/common/helper/services/pagination.service.ts:36\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        paginate\n                        \n                    \n                \n            \n            \n                \n                    \n                    paginate(selectQuery: string, countQuery: string, paginationQuery: PaginationQueryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/common/helper/services/pagination.service.ts:39\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    selectQuery\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    countQuery\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    paginationQuery\n                                    \n                                                PaginationQueryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\nimport { PrismaService } from '@services/prisma.service';\nimport { PaginationResponseDto } from '@utils/dto/pagination-response.dto';\nimport { PaginationQueryDto } from '@utils/dto/pagination.dto';\nimport { PaginationMetaDto } from '@utils/dto/pagination.meta.dto';\n\n/**\n * @service PaginationService\n *\n * @description\n * The `PaginationService` provides functionality to handle pagination for database queries. It utilizes Prisma's query capabilities\n * to perform paginated data retrieval based on the provided query parameters.\n *\n * @remarks\n * - The `paginate` method constructs SQL queries to fetch paginated data and its corresponding metadata.\n * - The method supports different pagination strategies such as 'all' and 'infinity'.\n *\n * @example\n * ```typescript\n * const paginationQuery = new PaginationQueryDto({\n *     page: 1,\n *     limit: 10,\n *     pagination: 'paginate',\n * });\n *\n * const result = await paginationService.paginate(\n *     'SELECT * FROM my_table',\n *     'SELECT COUNT(*) as count FROM my_table',\n *     paginationQuery\n * );\n * ```\n */\n\n@Injectable()\nexport class PaginationService {\n    constructor(private readonly prisma: PrismaService) {}\n\n    async paginate(\n        selectQuery: string,\n        countQuery: string,\n        paginationQuery: PaginationQueryDto\n    ): Promise> {\n        const { page, limit, pagination } = paginationQuery;\n\n        const offset = (page - 1) * limit;\n\n        const dataQuery = `${selectQuery} LIMIT ${limit} OFFSET ${offset}`;\n\n        const metaPage = pagination === 'all' || pagination === 'paginate';\n\n        // const [data, total] = await this.prisma.$transaction([\n        //     this.prisma.$queryRawUnsafe(dataQuery),\n        //     this.prisma.$queryRawUnsafe(countQuery),\n        // ]);\n\n        // console.log('DATTTTTTTTTTTTTTTTTTTTTTTTT', dataQuery);\n\n        const [data, total] = await Promise.all([\n            this.prisma.$queryRawUnsafe(dataQuery),\n            metaPage\n                ? this.prisma.$queryRawUnsafe(countQuery)\n                : [{ count: 0 }],\n        ]);\n\n        // console.log('DATTTTTTTTTTTTTTTTTTTTTTTTT', total, total[0]);\n\n        const meta = metaPage\n            ? new PaginationMetaDto({\n                  paginationQueryDto: paginationQuery,\n                  totalItems: Number(total[0].count),\n              })\n            : undefined;\n\n        const has_next_page =\n            pagination === 'all' || pagination === 'infinity' ? data.length === limit : undefined;\n\n        return {\n            data,\n            meta,\n            has_next_page,\n        };\n    }\n}\n\n// start\n// import { Injectable } from '@nestjs/common';\n\n// import { PrismaService } from '@services/prisma.service';\n// import { PaginationResponseDto } from '@utils/dto/pagination-response.dto';\n// import { PaginationQueryDto } from '@utils/dto/pagination.dto';\n// import { PaginationMetaDto } from '@utils/dto/pagination.meta.dto';\n// import { IFieldConfig } from '@utils/types/pagination-options';\n\n// @Injectable()\n// export class PaginationService {\n//     constructor(private readonly prisma: PrismaService) {}\n\n//     async paginate(\n//         selectFields: string[],\n//         fromQuery: string,\n//         joinTables: string[] = [],\n//         filterQuery: string,\n//         sortByQuery: string,\n//         paginationQuery: PaginationQueryDto\n//     ): Promise> {\n//         const { page, limit, filters, pagination } = paginationQuery;\n\n//         // console.log('Hiii pagination service', page);\n\n//         // console.log('Hiii selectFields', selectFields);\n//         // console.log('Hiii fromQuery', fromQuery);\n//         // console.log('Hiii joinTables', joinTables);\n//         // console.log('Hiii whereClauses', filterQuery);\n\n//         // console.log('Hiii paginationQuery', paginationQuery);\n\n//         // console.log('Hiii paginationQuery---------------------------------', pagination === 'all');\n\n//         const offset = (page - 1) * limit;\n//         const select = selectFields.join(', ');\n\n//         const joinQuery = joinTables.join(' ');\n\n//         // const filterQuery = '';\n//         // if (filters && filters.length > 0) {\n//         //     const filterConditions = filters\n//         //         .map((filter) => {\n//         //             if (filter.operator.toUpperCase() === 'IN') {\n//         //                 const values = filter.value\n//         //                     .split(',')\n//         //                     .map((val) => `'${val.trim()}'`)\n//         //                     .join(', ');\n//         //                 return `${filter.field} IN (${values})`;\n//         //             }\n//         //             return `${filter.field} ${filter.operator} '${filter.value}'`;\n//         //         })\n//         //         .join(' AND ');\n//         //     filterQuery = `WHERE ${filterConditions}`;\n//         // }\n\n//         // console.log('____________________________________', filterQuery);\n\n//         const dataQuery = `SELECT ${select} ${fromQuery} ${joinQuery} ${filterQuery} ${sortByQuery} LIMIT ${limit} OFFSET ${offset}`;\n//         const countQuery = `SELECT count(*) ${fromQuery} ${joinQuery} ${filterQuery}`;\n\n//         // console.log('____________________________________', dataQuery);\n//         // console.log('____________________________________', countQuery);\n\n//         const metaPage = pagination === 'all' || pagination === 'paginate';\n\n//         // const [data, total] = await this.prisma.$transaction([\n//         //     this.prisma.$queryRawUnsafe(dataQuery),\n//         //     this.prisma.$queryRawUnsafe(countQuery),\n//         // ]);\n\n//         const [data, total] = await Promise.all([\n//             this.prisma.$queryRawUnsafe(dataQuery),\n//             metaPage\n//                 ? this.prisma.$queryRawUnsafe(countQuery)\n//                 : [{ count: 0 }],\n//         ]);\n\n//         // console.log('DATTTTTTTTTTTTTTTTTTTTTTTTT', total, total[0]);\n\n//         const meta = metaPage\n//             ? new PaginationMetaDto({\n//                   paginationQueryDto: paginationQuery,\n//                   totalItems: Number(total[0].count),\n//               })\n//             : undefined;\n\n//         const has_next_page =\n//             pagination === 'all' || pagination === 'infinity' ? data.length === limit : undefined;\n\n//         return {\n//             data,\n//             meta,\n//             has_next_page,\n//         };\n\n//         // const dataQuery = `SELECT ${select} ${joinQuery} ${filterQuery} ${sortQuery} LIMIT ${limit} OFFSET ${offset}`;\n\n//         return 'hi' as any;\n//         // const offset = (page - 1) * limit;\n//         // // const select = selectFields.join(', ');\n\n//         // let filterQuery = '';\n//         // if (filters && filters.length > 0) {\n//         //     const filterConditions = filters\n//         //         .map((filter) => {\n//         //             if (filter.operator.toUpperCase() === 'IN') {\n//         //                 const values = filter.value\n//         //                     .split(',')\n//         //                     .map((val) => `'${val.trim()}'`)\n//         //                     .join(', ');\n//         //                 return `${filter.field} IN (${values})`;\n//         //             }\n//         //             return `${filter.field} ${filter.operator} '${filter.value}'`;\n//         //         })\n//         //         .join(' AND ');\n//         //     filterQuery = `WHERE ${filterConditions}`;\n//         // }\n\n//         // let sortQuery = '';\n//         // // if (sort) {\n//         // //     const sortConditions = sort\n//         // //         .split(',')\n//         // //         .map((s) => s.trim())\n//         // //         .join(', ');\n//         // //     sortQuery = `ORDER BY ${sortConditions}`;\n//         // // }\n\n//         // const joinQuery = joinTables.join(' ');\n\n//         // const dataQuery = `${baseQuery} ${joinQuery} ${filterQuery} ${sortQuery} LIMIT ${limit} OFFSET ${offset}`;\n//         // const countFilterQuery = filterQuery ? filterQuery : '';\n//         // const finalCountQuery = `${countQuery} ${joinQuery} ${countFilterQuery}`;\n//         // console.log('DATA QUERY', dataQuery);\n//         // console.log('finalCountQuery QUERY', finalCountQuery);\n//         // console.log(offset, select, filters, sort, filterQuery, sortQuery, joinQuery);\n//         return 'x' as any;\n//         // const [data, total] = await this.prisma.$transaction([\n//         //     this.prisma.$queryRawUnsafe(dataQuery),\n//         //     this.prisma.$queryRawUnsafe(finalCountQuery),\n//         // ]);\n//         // return {\n//         //     data,\n//         //     total: total[0].count,\n//         //     page,\n//         //     limit,\n//         // };\n//     }\n// }\n// end\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PrismaClientExceptionFilter.html":{"url":"classes/PrismaClientExceptionFilter.html","title":"class - PrismaClientExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PrismaClientExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/prisma-exception.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                Exception filter for handling Prisma Client known request errors.\nThis filter catches PrismaClientKnownRequestError exceptions and formats the\nresponse based on the specific Prisma error codes.\n\n            \n\n            \n                Extends\n            \n            \n                    BaseExceptionFilter\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: Prisma.PrismaClientKnownRequestError, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/prisma-exception.filter.ts:30\n                \n            \n\n\n            \n                \n                    Handles the Prisma Client exception and formats the error response\nbased on the error code.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            Prisma.PrismaClientKnownRequestError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The Prisma Client error to handle.\n\n                                    \n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The arguments host for accessing request and response objects.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ArgumentsHost, Catch, HttpStatus } from '@nestjs/common';\nimport { BaseExceptionFilter } from '@nestjs/core';\n\nimport { Prisma } from '@prisma/client';\nimport { Response } from 'express';\n\n/**\n * Exception filter for handling Prisma Client known request errors.\n *\n * This filter catches `PrismaClientKnownRequestError` exceptions and formats the\n * response based on the specific Prisma error codes.\n *\n * @export\n * @class PrismaClientExceptionFilter\n * @extends {BaseExceptionFilter}\n */\n\n@Catch(Prisma.PrismaClientKnownRequestError)\nexport class PrismaClientExceptionFilter extends BaseExceptionFilter {\n    /**\n     * Handles the Prisma Client exception and formats the error response\n     * based on the error code.\n     *\n     * @param {Prisma.PrismaClientKnownRequestError} exception The Prisma Client error to handle.\n     * @param {ArgumentsHost} host The arguments host for accessing request and response objects.\n     *\n     * @memberof PrismaClientExceptionFilter\n     */\n\n    catch(exception: Prisma.PrismaClientKnownRequestError, host: ArgumentsHost) {\n        console.log('PRISMA CLIENT EXCEPTION', exception.message);\n        const ctx = host.switchToHttp();\n        const response = ctx.getResponse();\n        const message = exception.message.replace(/\\n/g, '');\n        switch (exception.code) {\n            case 'P2002': {\n                // Unique constraint failed on the {constraint}\n                const status = HttpStatus.CONFLICT;\n                response.status(status).json({\n                    statusCode: status,\n                    message: message,\n                });\n                break;\n            }\n            case 'P2000': {\n                // The provided value for the column is too long for the column’s type. Column: {column_name}\n                const status = HttpStatus.BAD_REQUEST;\n                response.status(status).json({\n                    statusCode: status,\n                    message: message,\n                });\n                break;\n            }\n            case 'P2025': {\n                // An operation failed because it depends on one or more records that were required but not found. {cause}\n                const status = HttpStatus.NOT_FOUND;\n                response.status(status).json({\n                    statusCode: status,\n                    message: message,\n                });\n                break;\n            }\n            case 'P2010': {\n                // An operation failed because it depends on one or more records that were required but not found. {cause}\n                const status = HttpStatus.BAD_REQUEST;\n                response.status(status).json({\n                    statusCode: status,\n                    message: message,\n                });\n                break;\n            }\n            default:\n                // default 500 error code\n                super.catch(exception, host);\n                break;\n        }\n    }\n\n    //   catch(exception: PrismaClientKnownRequestError, host: ArgumentsHost) {\n    //     const ctx = host.switchToHttp();\n    //     const response = ctx.getResponse();\n    //     const status = HttpStatus.BAD_REQUEST;\n\n    //     const errorResponse = {\n    //       statusCode: status,\n    //       timestamp: new Date().toISOString(),\n    //       message: exception.message,\n    //     };\n\n    //     response.status(status).json(errorResponse);\n    //   }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/helper/services/prisma.service.ts\n        \n\n\n            \n                Description\n            \n            \n                PrismaService\nPrismaService is a service that extends the PrismaClient class to manage database operations with Prisma ORM. It handles\ninitialization and teardown of database connections, executes raw queries with parameter escaping, supports transactions,\nand provides a health check for the database connection.\n\n            \n\n            \n                Extends\n            \n            \n                    PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                executeRawQuery\n                            \n                            \n                                    Async\n                                executeTransaction\n                            \n                            \n                                    Async\n                                isHealthy\n                            \n                            \n                                    Async\n                                onModuleDestroy\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/common/helper/services/prisma.service.ts:28\n                            \n                        \n\n                \n                    \n                            Creates an instance of PrismaService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe configuration service for retrieving database connection details.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        executeRawQuery\n                        \n                    \n                \n            \n            \n                \n                    \n                    executeRawQuery(queryObj: any, data: any, fields: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/common/helper/services/prisma.service.ts:79\n                \n            \n\n\n            \n                \n                    Executes a raw query with optional data and field sanitization.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    queryObj\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        null\n                                    \n\n                                    \n                                        \nThe query object with a syntax method to generate the query string.\n\n\n                                    \n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        null\n                                    \n\n                                    \n                                        \nOptional data to be used in the query.\n\n\n                                    \n                                \n                                \n                                    fields\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        []\n                                    \n\n                                    \n                                        \nOptional fields to be sanitized in the data.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \nThe result of the query.\n\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        executeTransaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    executeTransaction(actions: (prisma: Prisma.TransactionClient) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/common/helper/services/prisma.service.ts:129\n                \n            \n\n\n            \n                \n                    Executes a transaction with Prisma.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    actions\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nA function containing the transactional operations.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \nThe result of the transaction.\n\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        isHealthy\n                        \n                    \n                \n            \n            \n                \n                    \n                    isHealthy()\n                \n            \n\n\n            \n                \n                    Defined in src/common/helper/services/prisma.service.ts:141\n                \n            \n\n\n            \n                \n                    Checks the health of the Prisma connection by executing a simple query.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \nThe result of the health check.\n\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleDestroy\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/common/helper/services/prisma.service.ts:61\n                \n            \n\n\n            \n                \n                    Called when the module is destroyed. Disconnects from the database.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/common/helper/services/prisma.service.ts:51\n                \n            \n\n\n            \n                \n                    Called when the module is initialized. Connects to the database.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit, OnModuleDestroy } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { HealthIndicatorResult } from '@nestjs/terminus';\n\nimport { Prisma, PrismaClient } from '@prisma/client';\nimport * as _ from 'lodash';\n\nimport { AllConfigType } from '@config/type/config.type';\n\n// import { ConfigService } from '../services/config.service';\n\n/**\n * PrismaService\n *\n * @description\n * `PrismaService` is a service that extends the PrismaClient class to manage database operations with Prisma ORM. It handles\n * initialization and teardown of database connections, executes raw queries with parameter escaping, supports transactions,\n * and provides a health check for the database connection.\n *\n * @export\n * @class PrismaService\n * @extends PrismaClient\n * @implements {OnModuleInit}\n * @implements {OnModuleDestroy}\n */\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit, OnModuleDestroy {\n    /**\n     * Creates an instance of PrismaService.\n     *\n     * @param {ConfigService} configService - The configuration service for retrieving database connection details.\n     */\n\n    constructor(private readonly configService: ConfigService) {\n        super({\n            datasources: {\n                db: {\n                    url: configService.get('database.url', { infer: true }), // configService.prismaConfig,\n                },\n            },\n        });\n    }\n\n    /**\n     * Called when the module is initialized. Connects to the database.\n     *\n     * @returns {Promise}\n     */\n\n    async onModuleInit(): Promise {\n        await this.$connect();\n    }\n\n    /**\n     * Called when the module is destroyed. Disconnects from the database.\n     *\n     * @returns {Promise}\n     */\n\n    async onModuleDestroy(): Promise {\n        await this.$disconnect();\n    }\n\n    // async executeRawQuery(query: string, params?: any[]): Promise {\n    //     return this.$queryRawUnsafe(query, ...params);\n    // }\n\n    /**\n     * Executes a raw query with optional data and field sanitization.\n     *\n     * @param {any} queryObj - The query object with a `syntax` method to generate the query string.\n     * @param {any} [data=null] - Optional data to be used in the query.\n     * @param {string[]} [fields=[]] - Optional fields to be sanitized in the data.\n     *\n     * @returns {Promise} - The result of the query.\n     */\n\n    async executeRawQuery(\n        queryObj: any = null,\n        data: any = null,\n        fields: string[] = []\n    ): Promise {\n        const newObj = Object.assign({}, data);\n\n        if (typeof data == 'object' && data instanceof Object && !(data instanceof Array)) {\n            for (const [key, value] of Object.entries(newObj)) {\n                const found = fields.includes(key);\n                if (found) {\n                    const escValue = value as any;\n                    // newObj[key] = escValue.replace(/'/g, \"\\\\'\");\n                    newObj[key] = escValue.replace(/'/g, \"''\");\n                }\n            }\n        }\n\n        let query: string;\n        if (data) {\n            query = queryObj.syntax(\n                typeof data == 'object' && data instanceof Object && !(data instanceof Array)\n                    ? newObj\n                    : data\n            );\n        } else {\n            query = queryObj.syntax();\n        }\n\n        // return this.$queryRawUnsafe(query, ...params);\n        const rows = await this.$queryRawUnsafe(query);\n\n        let result: any;\n        if (queryObj.type == 'SELECT_ONE' || queryObj.type == 'INSERT') {\n            result = !_.isEmpty(rows) ? rows[0] : null; //do not change null to blank object\n        } else {\n            result = rows;\n        }\n\n        return result;\n    }\n\n    /**\n     * Executes a transaction with Prisma.\n     *\n     * @param {(prisma: Prisma.TransactionClient) => Promise} actions - A function containing the transactional operations.\n     *\n     * @returns {Promise} - The result of the transaction.\n     */\n\n    async executeTransaction(\n        actions: (prisma: Prisma.TransactionClient) => Promise\n    ): Promise {\n        return this.$transaction(actions);\n    }\n\n    /**\n     * Checks the health of the Prisma connection by executing a simple query.\n     *\n     * @returns {Promise} - The result of the health check.\n     */\n\n    async isHealthy(): Promise {\n        try {\n            await this.$queryRaw`SELECT 1`;\n            // console.log('RESULTTTTTTTTTTTTTTTTTTTT', x);\n            return Promise.resolve({\n                prisma: {\n                    status: 'up',\n                },\n            });\n        } catch (e) {\n            return Promise.resolve({\n                prisma: {\n                    status: 'down',\n                },\n            });\n            console.log(e);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Query.html":{"url":"classes/Query.html","title":"class - Query","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Query\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/exceptions/query.ts\n        \n\n\n            \n                Description\n            \n            \n                Class representing SQL query builder for error logging.\ninto an Error table. The query escapes single quotes in request and response data\nto prevent SQL injection.\nconst query = new Query();\nconst sqlQuery = query.addHttpQueryError(\n  'UserModule',\n  'GET',\n  '/users',\n  JSON.stringify(requestData),\n  JSON.stringify(responseData)\n).syntax();\nconsole.log(sqlQuery); // Outputs the SQL query string\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addHttpQueryError\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addHttpQueryError\n                        \n                    \n                \n            \n            \n                \naddHttpQueryError(module: any, method: any, url: any, reqdata: string, resdata: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/exceptions/query.ts:36\n                \n            \n\n\n            \n                \n                    Constructs an SQL query to insert HTTP error details into the Error table.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    module\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe name of the module where the error occurred.\n\n\n                                    \n                                \n                                \n                                    method\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe HTTP method used in the request.\n\n\n                                    \n                                \n                                \n                                    url\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe URL of the request that caused the error.\n\n\n                                    \n                                \n                                \n                                    reqdata\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe request data, serialized as a JSON string.\n\n\n                                    \n                                \n                                \n                                    resdata\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe response data, serialized as a JSON string.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        An object representing the SQL query with a name, type, and syntax function.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class Query {\n    /**\n     * Constructs an SQL query to insert HTTP error details into the `Error` table.\n     *\n     * @param {string} module - The name of the module where the error occurred.\n     * @param {string} method - The HTTP method used in the request.\n     * @param {string} url - The URL of the request that caused the error.\n     * @param {string} reqdata - The request data, serialized as a JSON string.\n     * @param {string} resdata - The response data, serialized as a JSON string.\n     * @returns {Object} An object representing the SQL query with a `name`, `type`, and `syntax` function.\n     */\n\n    addHttpQueryError(module: any, method: any, url: any, reqdata: string, resdata: string): any {\n        return {\n            name: `addQueryError`,\n            type: `INSERT`,\n            /**\n             * Generates the SQL query string for inserting the error details.\n             *\n             * @returns {string} The SQL query string.\n             */\n\n            syntax: (): string => {\n                //data: any[]\n                try {\n                    let reqescValue = reqdata;\n                    let resescValue = resdata;\n                    reqescValue = reqescValue.replace(/'/g, \"\\\\'\");\n                    resescValue = resescValue.replace(/'/g, \"\\\\'\");\n                    const sql = `INSERT INTO Error (Module,Method,Url,Req,Response) VALUES\n                ('${module}','${method}','${url}','${reqescValue}','${resescValue}');`;\n                    return sql;\n                } catch (error) {\n                    return `Select ${module} ,${method},${url},${reqdata},${resdata}`;\n                }\n            },\n        };\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Query-1.html":{"url":"classes/Query-1.html","title":"class - Query-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Query\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/query.ts\n        \n\n\n            \n                Description\n            \n            \n                A utility class for generating SQL queries related to error logging.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addQueryError\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addQueryError\n                        \n                    \n                \n            \n            \n                \naddQueryError(module: any, method: any, url: any, reqdata: string, resdata: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/query.ts:24\n                \n            \n\n\n            \n                \n                    Generates an SQL query for logging query errors.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    module\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The module where the error occurred.\n\n                                    \n                                \n                                \n                                    method\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The method that caused the error.\n\n                                    \n                                \n                                \n                                    url\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The URL where the error occurred.\n\n                                    \n                                \n                                \n                                    reqdata\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request data associated with the error.\n\n                                    \n                                \n                                \n                                    resdata\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The response data associated with the error.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { name: string; type: string; syntax: () => string; }\n\n                    \n                    \n                        An object containing the SQL query details.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class Query {\n    /**\n     * Generates an SQL query for logging query errors.\n     *\n     * @param {any} module The module where the error occurred.\n     * @param {any} method The method that caused the error.\n     * @param {any} url The URL where the error occurred.\n     * @param {string} reqdata The request data associated with the error.\n     * @param {string} resdata The response data associated with the error.\n     * @returns {{ name: string, type: string, syntax: () => string }} An object containing the SQL query details.\n     *\n     * @memberof Query\n     */\n\n    addQueryError(module: any, method: any, url: any, reqdata: string, resdata: string) {\n        return {\n            name: `addQueryError`,\n            type: `INSERT`,\n            syntax: () => {\n                // data: any[]\n                try {\n                    let reqescValue = reqdata;\n                    let resescValue = resdata;\n                    reqescValue = reqescValue.replace(/'/g, \"\\\\'\");\n                    resescValue = resescValue.replace(/'/g, \"\\\\'\");\n                    const sql = `INSERT INTO Error (Module,Method,Url,Req,Response) VALUES\n                ('${module}','${method}','${url}','${reqescValue}','${resescValue}');`;\n                    return sql;\n                } catch (error) {\n                    return `Select ${module} ,${method},${url},${reqdata},${resdata}`;\n                }\n            },\n        };\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Query-10.html":{"url":"classes/Query-10.html","title":"class - Query-10","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Query\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/state_mas/query.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the Query class, which provides methods for generating SQL queries\nrelated to state data management.\nThe Query class includes methods to generate SQL queries for operations such as\nretrieving, inserting, updating, and deleting state records from the database.\nIt uses the lodash library for object manipulation and query construction.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                findById\n                            \n                            \n                                findByName\n                            \n                            \n                                formatValue\n                            \n                            \n                                insert\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/state_mas/query.ts:102\n                \n            \n\n\n            \n                \n                    Generates a SQL query to delete a state by its ID.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        The query configuration object with name, type, and syntax properties.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findById\n                        \n                    \n                \n            \n            \n                \nfindById()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/state_mas/query.ts:19\n                \n            \n\n\n            \n                \n                    Generates a SQL query to find a state by its ID.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        The query configuration object with name, type, and syntax properties.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByName\n                        \n                    \n                \n            \n            \n                \nfindByName()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/state_mas/query.ts:37\n                \n            \n\n\n            \n                \n                    Generates a SQL query to find a state by its name.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        The query configuration object with name, type, and syntax properties.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        formatValue\n                        \n                    \n                \n            \n            \n                \nformatValue(value: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/state_mas/query.ts:118\n                \n            \n\n\n            \n                \n                    Formats a value for use in an SQL query.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue to format\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \nFormatted value as a string\n\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        insert\n                        \n                    \n                \n            \n            \n                \ninsert()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/state_mas/query.ts:54\n                \n            \n\n\n            \n                \n                    Generates a SQL query to insert a new state.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        The query configuration object with name, type, and syntax properties.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/state_mas/query.ts:74\n                \n            \n\n\n            \n                \n                    Generates a SQL query to update an existing state.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        The query configuration object with name, type, and syntax properties.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as _ from 'lodash';\n\n/**\n * @fileoverview\n * This file defines the `Query` class, which provides methods for generating SQL queries\n * related to state data management.\n *\n * @module\n * @description\n * The `Query` class includes methods to generate SQL queries for operations such as\n * retrieving, inserting, updating, and deleting state records from the database.\n * It uses the lodash library for object manipulation and query construction.\n */\nexport class Query {\n    /**\n     * Generates a SQL query to find a state by its ID.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    findById(): object {\n        return {\n            name: `findById`,\n            type: `SELECT_ONE`,\n            syntax: (where: any) => {\n                const allowedKeys = ['id_state', 'name', 'id_country', 'status'];\n                const id = _.get(where, 'id');\n                const sql = `SELECT ${allowedKeys.join(', ')} FROM state_mas WHERE status = 1 AND id_state = '${id}';`;\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to find a state by its name.\n     * @param {string} [id] - Optional ID to exclude from the search if provided.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    findByName(): object {\n        return {\n            name: `findByName`,\n            type: `SELECT_ONE`,\n            syntax: (where: any) => {\n                const allowedKeys = ['id_state', 'name', 'status'];\n                const name = _.get(where, 'name');\n                const sql = `SELECT ${allowedKeys.join(', ')} FROM state_mas WHERE status = 1 AND name = '${name}';`;\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to insert a new state.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    insert(): object {\n        return {\n            name: `insert`,\n            type: `INSERT`,\n            syntax: (where: any) => {\n                const allowedKeys = ['name', 'id_country', 'status'];\n                const conds = _.pick(where, allowedKeys);\n                const keys = _.keys(conds);\n                //const values = _.values(conds);\n                const sql = `INSERT INTO state_mas (${keys.join(', ')}) VALUES (${keys.map((key) => this.formatValue(conds[key])).join(', ')}) RETURNING id_state as insertid, name;`;\n                console.log('Insert query -- ' + sql);\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to update an existing state.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    update(): object {\n        return {\n            name: `update`,\n            type: `UPDATE`,\n            syntax: (where: any) => {\n                let sql = `UPDATE state_mas SET `;\n                const id = _.get(where, 'id_state');\n                _.unset(where, 'id_state');\n                const allowedKeys = ['name', 'id_country', 'status', 'updated_at'];\n                where = _.pick(where, allowedKeys);\n\n                const lastKey = Object.keys(where)[Object.keys(where).length - 1];\n                _.mapKeys(where, (value, key) => {\n                    sql += `${key} = ${this.formatValue(value)}`;\n                    sql += lastKey == key ? `` : `, `;\n                });\n                sql += ` WHERE status = 1 AND id_state = '${id}' RETURNING id_state as updatedid, name;`;\n                console.log('Update query -- ' + sql);\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to delete a state by its ID.\n     * @param {string} id - The ID of the state to delete.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    delete(): object {\n        return {\n            name: `delete`,\n            type: `UPDATE`,\n            syntax: (id: string) => {\n                const sql = `UPDATE state_mas SET status = 127 WHERE status = 1 AND id_state = '${id}' RETURNING id_state as deletedid, name;`;\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Formats a value for use in an SQL query.\n     * @param value - Value to format\n     * @returns - Formatted value as a string\n     */\n    formatValue(value: any): string {\n        if (Array.isArray(value)) {\n            const formattedArray = value.map((v) => `${v.replace(/'/g, \"''\")}`).join(', ');\n            return `'{${formattedArray}}'`;\n        } else if (typeof value === 'string') {\n            return `'${value.replace(/'/g, \"''\")}'`;\n        } else if (value === null || value === undefined) {\n            return 'NULL';\n        } else {\n            return `${value}`; // For numbers and other types\n        }\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Query-2.html":{"url":"classes/Query-2.html","title":"class - Query-2","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Query\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/countries/query.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                findById\n                            \n                            \n                                findByName\n                            \n                            \n                                formatValue\n                            \n                            \n                                insert\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(utilsService: UtilsService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/countries/query.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        utilsService\n                                                  \n                                                        \n                                                                        UtilsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/countries/query.ts:148\n                \n            \n\n\n            \n                \n                    Generates a SQL query to delete a Country by its ID.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        The query configuration object with name, type, and syntax properties.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findById\n                        \n                    \n                \n            \n            \n                \nfindById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/countries/query.ts:115\n                \n            \n\n\n            \n                \n                    Generates a SQL query to find a Country by its ID.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The return select query string .\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByName\n                        \n                    \n                \n            \n            \n                \nfindByName()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/countries/query.ts:13\n                \n            \n\n\n            \n                \n                    Generates a SQL query to find a Country by its name.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        The query configuration object with name, type, and syntax properties.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        formatValue\n                        \n                    \n                \n            \n            \n                \nformatValue(value: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/countries/query.ts:159\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        insert\n                        \n                    \n                \n            \n            \n                \ninsert()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/countries/query.ts:31\n                \n            \n\n\n            \n                \n                    Generates a SQL insert query to insert new Country in database.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        The query configuration object with name, type, and syntax properties.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/countries/query.ts:76\n                \n            \n\n\n            \n                \n                    Generates a SQL update query to update country .\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        The query configuration object with name, type, and syntax properties.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import _ from 'lodash';\n\nimport { UtilsService } from '@app/common/helper/services/util.service';\n\nexport class Query {\n    constructor(private readonly utilsService: UtilsService) {}\n\n    /**\n     * Generates a SQL query to find a Country by its name.\n     * @param {string} [name] - using name of country finde data from database.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    findByName(): object {\n        return {\n            name: `findByName`,\n            type: `SELECT_ONE`,\n            syntax: (where: any) => {\n                const allowedKeys = ['id_country', 'name', 'iso3'];\n                const name = _.get(where, 'name');\n\n                return `SELECT ${allowedKeys.join()} FROM countries  WHERE status = 1 AND name = '${name}'`;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL insert query to insert new Country in database.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n\n    insert(): object {\n        return {\n            name: `add`,\n            type: `INSERT`,\n            syntax: (where: any) => {\n                const allowedKeys = [\n                    'name',\n                    'iso',\n                    'nice_name',\n                    'iso3',\n                    'num_code',\n                    'dial_code',\n                    'continent',\n                    'capital',\n                    'id_currency',\n                    'id_timezone',\n                ];\n                const conds = _.pick(where, allowedKeys);\n                const keys = _.keys(conds);\n                const values = _.values(conds);\n                const values1 = keys.map((key) => this.formatValue(conds[key])).join(', ');\n                console.log('keys --' + keys);\n                console.log('values --' + values);\n                console.log('Formated --' + values1);\n                // const query = `INSERT INTO countries  (${keys.join()}) VALUES ('${values.join(\"','\")}') RETURNING id_country as insertid,name;`;\n                const query = `INSERT INTO countries  (${keys.join()}) VALUES (${keys.map((key) => this.formatValue(conds[key])).join(', ')}) RETURNING id_country as insertid,name;`;\n                console.log('Query--- ' + query);\n                return query;\n            },\n        };\n    }\n\n    // async update1(id: string, data: any): Promise {\n    //     const keys = Object.keys(data).filter((key) => data[key] !== undefined);\n    //     const setColumnwithValue = keys\n    //         .map((key) => `${key} = ${this.formatValue(data[key])}`)\n    //         .join(', ');\n    //     return `UPDATE countries SET ${setColumnwithValue} WHERE id_country  = ${this.formatValue(id)} AND status = 1 RETURNING id_country as upadetId ;`;\n    // }\n\n    /**\n     * Generates a SQL update query to update country .\n     * @param {string} [id_country] - using id_country of country to update country in database.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    update(): object {\n        return {\n            name: `update`,\n            type: `UPDATE`,\n            syntax: (where: any) => {\n                let sql = `UPDATE countries SET `;\n                const id = _.get(where, 'id_country');\n                _.unset(where, 'id_country');\n                const allowedKeys = [\n                    'name',\n                    'iso',\n                    'nice_name',\n                    'iso3',\n                    'num_code',\n                    'dial_code',\n                    'continent',\n                    'capital',\n                    'id_currency',\n                    'id_timezone',\n                ];\n                where = _.pick(where, allowedKeys);\n\n                const lastKey = Object.keys(where)[Object.keys(where).length - 1];\n                _.mapKeys(where, (value, key) => {\n                    sql += `${key} = '${value}'`;\n                    sql += lastKey == key ? `` : `, `;\n                });\n                sql += ` WHERE status = 1 AND id_country = '${id}' RETURNING id_country as updatedid, name;`;\n                console.log('update q--' + sql);\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to find a Country by its ID.\n     * @returns {string} The return select query string .\n     */\n\n    findById(id: string): string {\n        const allowedKeys = [\n            'c.name',\n            'c.iso',\n            'c.nice_name',\n            'c.iso3',\n            'c.num_code',\n            'c.dial_code',\n            'c.continent',\n            'c.capital',\n            'cr.symbol',\n            'cr.name as currency_name',\n            'tz.value',\n            'tz.offset',\n            'tz.offset_in_minutes',\n            'tz.abbr',\n            'tz.text',\n        ];\n\n        const query = `SELECT ${allowedKeys} FROM countries as c \n        JOIN currencies AS cr ON cr.id_currency=c.id_currency\n        JOIN timezone AS tz ON tz.id_timezone=c.id_timezone\n        WHERE c.status = 1 AND c.id_country='${id}' `;\n        console.log('Query--' + query);\n        return query;\n    }\n\n    /**\n     * Generates a SQL query to delete a Country by its ID.\n     * @param {string} id - The ID of the Country to delete.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n\n    delete(): object {\n        return {\n            name: `delete`,\n            type: `UPDATE`,\n            syntax: (id: string) => {\n                const sql = `UPDATE countries SET status = 127 WHERE status = 1 AND id_country = '${id}' RETURNING id_country as deletedid, name;`;\n                console.log('delete --QQ ' + sql);\n                return sql;\n            },\n        };\n    }\n    formatValue(value: any): string {\n        if (Array.isArray(value)) {\n            const formattedArray = value.map((v) => `${v.replace(/'/g, \"''\")}`).join(', ');\n            return `'{${formattedArray}}'`;\n        } else if (typeof value === 'string') {\n            return `'${value.replace(/'/g, \"''\")}'`;\n        } else if (value === null || value === undefined) {\n            return 'NULL';\n        } else {\n            return `${value}`; // For numbers and other types\n        }\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Query-3.html":{"url":"classes/Query-3.html","title":"class - Query-3","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Query\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/currencies/query.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the Query class, which provides methods for generating SQL queries\nrelated to currency data management.\nThe Query class includes methods to generate SQL queries for operations such as\nretrieving, inserting, updating, and deleting currency records from the database.\nIt uses the lodash library for object manipulation and query construction.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                findByCode\n                            \n                            \n                                findById\n                            \n                            \n                                insert\n                            \n                            \n                                pgBaseQuery\n                            \n                            \n                                pgBaseSelectField\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/currencies/query.ts:139\n                \n            \n\n\n            \n                \n                    Generates a SQL query to delete a currency by its ID.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        The query configuration object with name, type, and syntax properties.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByCode\n                        \n                    \n                \n            \n            \n                \nfindByCode(id?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/currencies/query.ts:49\n                \n            \n\n\n            \n                \n                    Generates a SQL query to find a currency by its code.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nOptional ID to exclude from the search if provided.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        The query configuration object with name, type, and syntax properties.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findById\n                        \n                    \n                \n            \n            \n                \nfindById()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/currencies/query.ts:21\n                \n            \n\n\n            \n                \n                    Generates a SQL query to find a currency by its ID.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        The query configuration object with name, type, and syntax properties.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        insert\n                        \n                    \n                \n            \n            \n                \ninsert()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/currencies/query.ts:71\n                \n            \n\n\n            \n                \n                    Generates a SQL query to insert a new currency.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        The query configuration object with name, type, and syntax properties.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pgBaseQuery\n                        \n                    \n                \n            \n            \n                \npgBaseQuery()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/currencies/query.ts:172\n                \n            \n\n\n            \n                \n                    Provides the base query for selecting currencies.\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The base query string for selecting currencies.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pgBaseSelectField\n                        \n                    \n                \n            \n            \n                \npgBaseSelectField()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/currencies/query.ts:156\n                \n            \n\n\n            \n                \n                    Provides the base fields for selecting currencies in pagination queries.\n\n\n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        An array of column names to be selected in pagination queries.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/currencies/query.ts:100\n                \n            \n\n\n            \n                \n                    Generates a SQL query to update an existing currency.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        The query configuration object with name, type, and syntax properties.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as _ from 'lodash';\n\n/**\n * @fileoverview\n * This file defines the `Query` class, which provides methods for generating SQL queries\n * related to currency data management.\n *\n * @module\n * @description\n * The `Query` class includes methods to generate SQL queries for operations such as\n * retrieving, inserting, updating, and deleting currency records from the database.\n * It uses the lodash library for object manipulation and query construction.\n */\n\nexport class Query {\n    /**\n     * Generates a SQL query to find a currency by its ID.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n\n    findById(): object {\n        return {\n            name: `findById`,\n            type: `SELECT_ONE`,\n            syntax: (where: any) => {\n                const allowedKeys = [\n                    'c.id_currency',\n                    'c.code',\n                    'c.name',\n                    'c.name_plural',\n                    'c.symbol',\n                    'c.symbol_native',\n                    'c.decimal_digits',\n                    'c.rounding',\n                ];\n                const id = _.get(where, 'id');\n                const sql = `select ${allowedKeys.join()} from currencies c WHERE c.status = 1 AND c.id_currency = '${id}';`;\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to find a currency by its code.\n     * @param {string} [id] - Optional ID to exclude from the search if provided.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n\n    findByCode(id?: string): object {\n        return {\n            name: `findByCode`,\n            type: `SELECT_ONE`,\n            syntax: (where: any) => {\n                const allowedKeys = ['c.id_currency', 'c.code'];\n                const code = _.get(where, 'code');\n\n                let sql = `SELECT ${allowedKeys.join()} FROM currencies c WHERE c.status = 1 AND c.code = '${code}'`;\n                if (id) {\n                    sql += ` AND c.id_currency != '${id}';`;\n                }\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to insert a new currency.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n\n    insert(): object {\n        return {\n            name: `add`,\n            type: `INSERT`,\n            syntax: (where: any) => {\n                const allowedKeys = [\n                    'code',\n                    'name',\n                    'name_plural',\n                    'symbol',\n                    'symbol_native',\n                    'decimal_digits',\n                    'rounding',\n                ];\n                const conds = _.pick(where, allowedKeys);\n                const keys = _.keys(conds);\n                const values = _.values(conds);\n                const sql = `insert into currencies (${keys.join()}) values ('${values.join(\"','\")}') RETURNING id_currency as insertid, code;`;\n                console.log('QUERY', sql);\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to update an existing currency.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n\n    update(): object {\n        return {\n            name: `update`,\n            type: `UPDATE`,\n            syntax: (where: any) => {\n                let sql = `UPDATE currencies SET `;\n                const id = _.get(where, 'id');\n                _.unset(where, 'id');\n                const allowedKeys = [\n                    'code',\n                    'name',\n                    'name_plural',\n                    'symbol',\n                    'symbol_native',\n                    'decimal_digits',\n                    'rounding',\n                ];\n                where = _.pick(where, allowedKeys);\n\n                const lastKey = Object.keys(where)[Object.keys(where).length - 1];\n                _.mapKeys(where, (value, key) => {\n                    sql += `${key} = '${value}'`;\n                    sql += lastKey == key ? `` : `, `;\n                });\n                sql += ` WHERE status = 1 AND id_currency = '${id}' RETURNING id_currency as updatedid, code;`;\n\n                console.log('QQQQQQQQQQQQQQ', sql);\n\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to delete a currency by its ID.\n     * @param {string} id - The ID of the currency to delete.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n\n    delete(): object {\n        return {\n            name: `delete`,\n            type: `UPDATE`,\n            syntax: (id: string) => {\n                const sql = `UPDATE currencies SET status = 127 WHERE status = 1 AND id_currency = '${id}' RETURNING id_currency as deletedid, code;`;\n\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Provides the base fields for selecting currencies in pagination queries.\n     * @returns {string[]} An array of column names to be selected in pagination queries.\n     */\n\n    pgBaseSelectField(): string[] {\n        return [\n            'ptbl.id_currency',\n            'ptbl.code',\n            'ptbl.name',\n            'ptbl.symbol',\n            'ptbl.decimal_digits',\n            'ptbl.rounding',\n        ];\n    }\n\n    /**\n     * Provides the base query for selecting currencies.\n     * @returns {string} The base query string for selecting currencies.\n     */\n\n    pgBaseQuery(): string {\n        return ` FROM currencies ptbl`;\n    }\n}\n\n// import * as _ from 'lodash';\n\n// import { DynamicQueryBuilder, QueryOptions } from '@providers/dynamic-query.service';\n\n// export class Query {\n//     private queryBuilder = new DynamicQueryBuilder();\n\n//     findBy(key: string, value: string, id?: string) {\n//         const selectOptions: QueryOptions = {\n//             table: 'currencies',\n//             fields: ['id_currency', 'code'],\n//             conditions: { status: 1, ...(key && { [key]: value }) },\n//             ...(id && {\n//                 optionalConditions: {\n//                     id_currency: id,\n//                 },\n//             }),\n//         };\n\n//         return this.queryBuilder.buildSelectQuery(selectOptions);\n//     }\n\n//     insert(values: any) {\n//         const insertOptions: QueryOptions = {\n//             table: 'currencies',\n//             fields: [\n//                 'code',\n//                 'name',\n//                 'name_plural',\n//                 'symbol',\n//                 'symbol_native',\n//                 'decimal_digits',\n//                 'rounding',\n//             ],\n//             values: values,\n//             returningFields: ['id_currency as insertid', 'code'],\n//         };\n\n//         return this.queryBuilder.buildInsertQuery(insertOptions);\n//     }\n\n//     delete(key: string, value: string) {\n//         const deleteOptions: QueryOptions = {\n//             table: 'currencies',\n//             conditions: { status: 1, ...(key && { [key]: value }) },\n//             returningFields: ['id_currency as deleteid'],\n//         };\n\n//         return this.queryBuilder.buildDeleteQuery(deleteOptions);\n//     }\n\n//     pgBaseSelectField(): string[] {\n//         return [\n//             'ptbl.id_currency',\n//             'ptbl.code',\n//             'ptbl.name',\n//             'ptbl.symbol',\n//             'ptbl.decimal_digits',\n//             'ptbl.rounding',\n//         ];\n//     }\n\n//     pgBaseQuery() {\n//         return ` FROM currencies ptbl`;\n//     }\n// }\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Query-4.html":{"url":"classes/Query-4.html","title":"class - Query-4","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Query\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/address_type/query.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the Query class, which provides methods for generating SQL queries\nrelated to address type data management.\nThe Query class includes methods to generate SQL queries for operations such as\nretrieving, inserting, updating, and deleting address type records from the database.\nIt uses the lodash library for object manipulation and query construction.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                findById\n                            \n                            \n                                findByName\n                            \n                            \n                                formatValue\n                            \n                            \n                                insert\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/address_type/query.ts:98\n                \n            \n\n\n            \n                \n                    Generates a SQL query to delete a address_types by its ID.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        The query configuration object with name, type, and syntax properties.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findById\n                        \n                    \n                \n            \n            \n                \nfindById()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/address_type/query.ts:20\n                \n            \n\n\n            \n                \n                    Generates a SQL query to find a address_type by its ID.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        The query configuration object with name, type, syntax, and params properties.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByName\n                        \n                    \n                \n            \n            \n                \nfindByName()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/address_type/query.ts:37\n                \n            \n\n\n            \n                \n                    Generates a SQL query to find a address_type  by its address_type.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        The query configuration object with name, type, syntax, and params properties.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        formatValue\n                        \n                    \n                \n            \n            \n                \nformatValue(value: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/address_type/query.ts:115\n                \n            \n\n\n            \n                \n                    Formats a value for use in an SQL query.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue to format\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \nFormatted value as a string\n\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        insert\n                        \n                    \n                \n            \n            \n                \ninsert()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/address_type/query.ts:54\n                \n            \n\n\n            \n                \n                    Generates a SQL query to insert a new addres_type.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        The query configuration object with name, type, and syntax properties.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/address_type/query.ts:74\n                \n            \n\n\n            \n                \n                    Generates a SQL query to update an existing address_types.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        The query configuration object with name, type, and syntax properties.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as _ from 'lodash';\n\n/**\n * @fileoverview\n * This file defines the `Query` class, which provides methods for generating SQL queries\n * related to address type data management.\n *\n * @module\n * @description\n * The `Query` class includes methods to generate SQL queries for operations such as\n * retrieving, inserting, updating, and deleting address type records from the database.\n * It uses the lodash library for object manipulation and query construction.\n */\nexport class Query {\n    /**\n     * Generates a SQL query to find a address_type by its ID.\n     * @returns {object} The query configuration object with `name`, `type`, `syntax`, and `params` properties.\n     */\n\n    findById(): object {\n        return {\n            name: `findbyid`,\n            type: `SELECT_ONE`,\n            syntax: (where: any) => {\n                const allowedKeys = ['id_address_type', 'address_type', 'status'];\n                const id = _.get(where, 'id');\n                const sql = `SELECT ${allowedKeys.join(', ')} FROM address_types WHERE id_address_type = '${id}';`;\n                console.log('FindById query: ' + sql);\n                return sql;\n            },\n        };\n    }\n    /**\n     * Generates a SQL query to find a address_type  by its address_type.\n     * @returns {object} The query configuration object with `name`, `type`, `syntax`, and `params` properties.\n     */\n    findByName(): object {\n        return {\n            name: `findbyname`,\n            type: `SELECT_ONE`,\n            syntax: (where: any) => {\n                const allowedKeys = ['id_address_type', 'address_type', 'status'];\n                const name = _.get(where, 'address_type');\n                const sql = `SELECT ${allowedKeys.join(', ')} FROM address_types WHERE address_type='${name}';`;\n                console.log('FindByNmae query: ' + sql);\n                return sql;\n            },\n        };\n    }\n    /**\n     * Generates a SQL query to insert a new addres_type.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    insert(): object {\n        return {\n            name: `insert`,\n            type: `INSERT`,\n            syntax: (where: any) => {\n                const allowedKeys = ['address_type', 'status'];\n                const conds = _.pick(where, allowedKeys);\n                const keys = _.keys(conds);\n                const values = keys.map((key) => this.formatValue(conds[key]));\n                const sql = `INSERT INTO address_types (${keys.join(', ')}) VALUES(${values}) RETURNING id_address_type as insertid, address_type;`;\n                console.log('Insert query: ', sql);\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to update an existing address_types.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    update(): object {\n        return {\n            name: `update`,\n            type: `UPDATE`,\n            syntax: (where: any) => {\n                const id = _.get(where, 'id_address_type');\n                _.unset(where, 'id_address_type');\n                const allowedKeys = ['address_type', 'status', 'updated_at'];\n                const updateData = _.pick(where, allowedKeys);\n                const setClauses = Object.keys(updateData).map(\n                    (key) => `${key}=${this.formatValue(updateData[key])}`\n                );\n                const sql = `UPDATE address_types SET ${setClauses.join(', ')} WHERE id_address_type='${id}' RETURNING id_address_type as updatedid, address_type; `;\n                console.log('Update query-- ' + sql);\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to delete a address_types by its ID.\n     * @param {string} id - The ID of the address_types to delete.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    delete(): object {\n        return {\n            name: `delete`,\n            type: `DELETE`,\n            syntax: (id: string) => {\n                const sql = `UPDATE address_types SET status = 127 WHERE id_address_type = '${id}' RETURNING id_address_type as deletedid, address_type;`;\n                console.log('Delete query: ', sql);\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Formats a value for use in an SQL query.\n     * @param value - Value to format\n     * @returns - Formatted value as a string\n     */\n    formatValue(value: any): string {\n        if (Array.isArray(value)) {\n            const formattedArray = value.map((v) => `'${v.replace(/'/g, \"''\")}'`).join(', ');\n            return `'{${formattedArray}}'`;\n        } else if (typeof value === 'string') {\n            return `'${value.replace(/'/g, \"''\")}'`;\n        } else if (value === null || value === undefined) {\n            return 'NULL';\n        } else {\n            return `${value}`; // For numbers and other types\n        }\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Query-5.html":{"url":"classes/Query-5.html","title":"class - Query-5","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Query\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/city_mas/query.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the Query class, which provides methods for generating SQL queries\nrelated to city data management.\nThe Query class includes methods to generate SQL queries for operations such as\nretrieving, inserting, updating, and deleting city records from the database.\nIt uses the lodash library for object manipulation and query construction.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                findById\n                            \n                            \n                                findByName\n                            \n                            \n                                formatValue\n                            \n                            \n                                insert\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/city_mas/query.ts:102\n                \n            \n\n\n            \n                \n                    Generates a SQL query to delete a city by its ID.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        The query configuration object with name, type, and syntax properties.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findById\n                        \n                    \n                \n            \n            \n                \nfindById()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/city_mas/query.ts:19\n                \n            \n\n\n            \n                \n                    Generates a SQL query to find a city by its ID.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        The query configuration object with name, type, and syntax properties.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByName\n                        \n                    \n                \n            \n            \n                \nfindByName()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/city_mas/query.ts:38\n                \n            \n\n\n            \n                \n                    Generates a SQL query to find a city by its name.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        The query configuration object with name, type, and syntax properties.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        formatValue\n                        \n                    \n                \n            \n            \n                \nformatValue(value: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/city_mas/query.ts:119\n                \n            \n\n\n            \n                \n                    Formats a value for use in an SQL query.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue to format\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \nFormatted value as a string\n\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        insert\n                        \n                    \n                \n            \n            \n                \ninsert()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/city_mas/query.ts:55\n                \n            \n\n\n            \n                \n                    Generates a SQL query to insert a new city.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        The query configuration object with name, type, and syntax properties.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/city_mas/query.ts:74\n                \n            \n\n\n            \n                \n                    Generates a SQL query to update an existing city.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        The query configuration object with name, type, and syntax properties.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as _ from 'lodash';\n\n/**\n * @fileoverview\n * This file defines the `Query` class, which provides methods for generating SQL queries\n * related to city data management.\n *\n * @module\n * @description\n * The `Query` class includes methods to generate SQL queries for operations such as\n * retrieving, inserting, updating, and deleting city records from the database.\n * It uses the lodash library for object manipulation and query construction.\n */\nexport class Query {\n    /**\n     * Generates a SQL query to find a city by its ID.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    findById(): object {\n        return {\n            name: `findById`,\n            type: `SELECT_ONE`,\n            syntax: (where: any) => {\n                const allowedKeys = ['id_city', 'name', 'id_state', 'id_country', 'status'];\n                const id = _.get(where, 'id');\n                const sql = `SELECT ${allowedKeys.join(', ')} FROM city_mas WHERE status = 1 AND id_city = '${id}';`;\n                console.log('find by id query--' + sql);\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to find a city by its name.\n     * @param {string} [id] - Optional ID to exclude from the search if provided.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    findByName(): object {\n        return {\n            name: `findByName`,\n            type: `SELECT_ONE`,\n            syntax: (where: any) => {\n                const allowedKeys = ['id_city', 'name'];\n                const name = _.get(where, 'name');\n                const sql = `SELECT ${allowedKeys.join(', ')} FROM city_mas WHERE status = 1 AND name = '${name}';`;\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to insert a new city.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    insert(): object {\n        return {\n            name: `insert`,\n            type: `INSERT`,\n            syntax: (where: any) => {\n                const allowedKeys = ['name', 'id_state', 'id_country', 'status'];\n                const conds = _.pick(where, allowedKeys);\n                const keys = _.keys(conds);\n                const sql = `INSERT INTO city_mas (${keys.join(', ')}) VALUES (${keys.map((key) => this.formatValue(conds[key])).join(', ')}) RETURNING id_city as insertid, name;`;\n                console.log('Insert Query-- ' + sql);\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to update an existing city.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    update(): object {\n        return {\n            name: `update`,\n            type: `UPDATE`,\n            syntax: (where: any) => {\n                let sql = `UPDATE city_mas SET `;\n                const id = _.get(where, 'id_city');\n                _.unset(where, 'id_city');\n                const allowedKeys = ['name', 'id_state', 'status', 'updated_at'];\n                where = _.pick(where, allowedKeys);\n\n                const lastKey = Object.keys(where)[Object.keys(where).length - 1];\n                _.mapKeys(where, (value, key) => {\n                    sql += `${key} = ${this.formatValue(value)}`;\n                    sql += lastKey == key ? `` : `, `;\n                });\n                sql += ` WHERE status = 1 AND id_city = '${id}' RETURNING id_city as updatedid, name;`;\n                console.log('Update Query-- ' + sql);\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to delete a city by its ID.\n     * @param {string} id - The ID of the city to delete.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    delete(): object {\n        return {\n            name: `delete`,\n            type: `UPDATE`,\n            syntax: (id: string) => {\n                const sql = `UPDATE city_mas SET status = 127 WHERE status = 1 AND id_city = '${id}' RETURNING id_city as deletedid, name;`;\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Formats a value for use in an SQL query.\n     * @param value - Value to format\n     * @returns - Formatted value as a string\n     */\n\n    formatValue(value: any): string {\n        if (Array.isArray(value)) {\n            const formattedArray = value.map((v) => `${v.replace(/'/g, \"''\")}`).join(', ');\n            return `'{${formattedArray}}'`;\n        } else if (typeof value === 'string') {\n            return `'${value.replace(/'/g, \"''\")}'`;\n        } else if (value === null || value === undefined) {\n            return 'NULL';\n        } else {\n            return `${value}`; // For numbers and other types\n        }\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Query-6.html":{"url":"classes/Query-6.html","title":"class - Query-6","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Query\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/country_mas/query.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the Query class, which provides methods for generating SQL queries\nrelated to country data management.\nThe Query class includes methods to generate SQL queries for operations such as\nretrieving, inserting, updating, and deleting country records from the database.\nIt uses the lodash library for object manipulation and query construction.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                findById\n                            \n                            \n                                findByName\n                            \n                            \n                                formatValue\n                            \n                            \n                                insert\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/country_mas/query.ts:107\n                \n            \n\n\n            \n                \n                    Generates a SQL query to delete a country by its ID.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        The query configuration object with name, type, and syntax properties.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findById\n                        \n                    \n                \n            \n            \n                \nfindById()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/country_mas/query.ts:20\n                \n            \n\n\n            \n                \n                    Generates a SQL query to find a country by its ID.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        The query configuration object with name, type, and syntax properties.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByName\n                        \n                    \n                \n            \n            \n                \nfindByName()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/country_mas/query.ts:39\n                \n            \n\n\n            \n                \n                    Generates a SQL query to find a country by its name.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        The query configuration object with name, type, and syntax properties.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        formatValue\n                        \n                    \n                \n            \n            \n                \nformatValue(value: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/country_mas/query.ts:124\n                \n            \n\n\n            \n                \n                    Formats a value for use in an SQL query.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue to format\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \nFormatted value as a string\n\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        insert\n                        \n                    \n                \n            \n            \n                \ninsert()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/country_mas/query.ts:56\n                \n            \n\n\n            \n                \n                    Generates a SQL query to insert a new country.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        The query configuration object with name, type, and syntax properties.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/country_mas/query.ts:76\n                \n            \n\n\n            \n                \n                    Generates a SQL query to update an existing country.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        The query configuration object with name, type, and syntax properties.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as _ from 'lodash';\n\n/**\n * @fileoverview\n * This file defines the `Query` class, which provides methods for generating SQL queries\n * related to country data management.\n *\n * @module\n * @description\n * The `Query` class includes methods to generate SQL queries for operations such as\n * retrieving, inserting, updating, and deleting country records from the database.\n * It uses the lodash library for object manipulation and query construction.\n */\n\nexport class Query {\n    /**\n     * Generates a SQL query to find a country by its ID.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    findById(): object {\n        return {\n            name: `findById`,\n            type: `SELECT_ONE`,\n            syntax: (where: any) => {\n                const allowedKeys = ['id_country', 'name', 'dial_code', 'status'];\n                const id = _.get(where, 'id');\n                console.log('county Id' + id);\n                const sql = `SELECT ${allowedKeys.join(', ')} FROM country_mas  WHERE status = 1 AND id_country = '${id}';`;\n                console.log('FindByid query-- ' + sql);\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to find a country by its name.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    findByName(): object {\n        return {\n            name: `findByName`,\n            type: `SELECT_ONE`,\n            syntax: (where: any) => {\n                const allowedKeys = ['id_country', 'name', 'dial_code'];\n                const name = _.get(where, 'name');\n                const sql = `SELECT ${allowedKeys.join(', ')} FROM country_mas  WHERE status = 1 AND name = '${name}'`;\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to insert a new country.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    insert(): object {\n        return {\n            name: `insert`,\n            type: `INSERT`,\n            syntax: (where: any) => {\n                const allowedKeys = ['name', 'dial_code'];\n                const conds = _.pick(where, allowedKeys);\n                const keys = _.keys(conds);\n                // const values = _.values(conds);\n                const sql = `INSERT INTO country_mas (${keys.join(', ')}) VALUES (${keys.map((key) => this.formatValue(conds[key])).join(', ')}) RETURNING id_country as insertid, name;`;\n                console.log('Insert Query -- ', sql);\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to update an existing country.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    update(): object {\n        return {\n            name: `update`,\n            type: `UPDATE`,\n            syntax: (where: any) => {\n                let sql = `UPDATE country_mas SET `;\n                const id = _.get(where, 'id_country');\n                _.unset(where, 'id_country');\n                const allowedKeys = ['name', 'dial_code', 'status', 'updated_at'];\n                where = _.pick(where, allowedKeys);\n\n                const lastKey = Object.keys(where)[Object.keys(where).length - 1];\n                _.mapKeys(where, (value, key) => {\n                    // sql += `${key} = '${value}'`;\n                    sql += `${key} = ${this.formatValue(value)}`;\n                    sql += lastKey == key ? `` : `, `;\n                });\n                sql += ` WHERE status = 1 AND id_country = '${id}' RETURNING id_country as updatedid, name;`;\n\n                console.log('Update Query --- ', sql);\n\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to delete a country by its ID.\n     * @param {string} id - The ID of the country to delete.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    delete(): object {\n        return {\n            name: `delete`,\n            type: `UPDATE`,\n            syntax: (id: string) => {\n                const sql = `UPDATE country_mas SET status = 127 WHERE status = 1 AND id_country = '${id}' RETURNING id_country as deletedid, name;`;\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Formats a value for use in an SQL query.\n     * @param value - Value to format\n     * @returns - Formatted value as a string\n     */\n\n    formatValue(value: any): string {\n        if (Array.isArray(value)) {\n            const formattedArray = value.map((v) => `${v.replace(/'/g, \"''\")}`).join(', ');\n            return `'{${formattedArray}}'`;\n        } else if (typeof value === 'string') {\n            return `'${value.replace(/'/g, \"''\")}'`;\n        } else if (value === null || value === undefined) {\n            return 'NULL';\n        } else {\n            return `${value}`; // For numbers and other types\n        }\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Query-7.html":{"url":"classes/Query-7.html","title":"class - Query-7","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Query\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/banks/query.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the Query class, which provides methods for generating SQL queries\nrelated to bank data management.\nThe Query class includes methods to generate SQL queries for operations such as\nretrieving, inserting, updating, and deleting bank records from the database.\nIt uses the lodash library for object manipulation and query construction.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                findById\n                            \n                            \n                                findByName\n                            \n                            \n                                formatValue\n                            \n                            \n                                insert\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/banks/query.ts:126\n                \n            \n\n\n            \n                \n                    Generates a SQL query to delete a bank by its ID.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        The query configuration object with name, type, and syntax properties.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findById\n                        \n                    \n                \n            \n            \n                \nfindById()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/banks/query.ts:19\n                \n            \n\n\n            \n                \n                    Generates a SQL query to find a bank by its ID.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        The query configuration object with name, type, and syntax properties.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByName\n                        \n                    \n                \n            \n            \n                \nfindByName()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/banks/query.ts:45\n                \n            \n\n\n            \n                \n                    Generates a SQL query to find a bank by its name.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        The query configuration object with name, type, and syntax properties.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        formatValue\n                        \n                    \n                \n            \n            \n                \nformatValue(value: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/banks/query.ts:144\n                \n            \n\n\n            \n                \n                    Formats a value for use in an SQL query.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue to format\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \nFormatted value as a string\n\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        insert\n                        \n                    \n                \n            \n            \n                \ninsert()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/banks/query.ts:63\n                \n            \n\n\n            \n                \n                    Generates a SQL query to insert a new bank.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        The query configuration object with name, type, and syntax properties.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/banks/query.ts:92\n                \n            \n\n\n            \n                \n                    Generates a SQL query to update an existing bank.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        The query configuration object with name, type, and syntax properties.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as _ from 'lodash';\n\n/**\n * @fileoverview\n * This file defines the `Query` class, which provides methods for generating SQL queries\n * related to bank data management.\n *\n * @module\n * @description\n * The `Query` class includes methods to generate SQL queries for operations such as\n * retrieving, inserting, updating, and deleting bank records from the database.\n * It uses the lodash library for object manipulation and query construction.\n */\nexport class Query {\n    /**\n     * Generates a SQL query to find a bank by its ID.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    findById(): object {\n        return {\n            name: `findById`,\n            type: `SELECT_ONE`,\n            syntax: (where: any) => {\n                const allowedKeys = [\n                    'id_bank',\n                    'name',\n                    'short_name',\n                    'id_city',\n                    'id_state',\n                    'id_country',\n                    'status',\n                ];\n                const id = _.get(where, 'id');\n                const sql = `SELECT ${allowedKeys.join(', ')} FROM banks_mas WHERE status = 1 AND id_bank = '${id}';`;\n                console.log('FindById query: ' + sql);\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to find a bank by its name.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    findByName(): object {\n        return {\n            name: `findByName`,\n            type: `SELECT_ONE`,\n            syntax: (where: any) => {\n                const allowedKeys = ['id_bank', 'name', 'short_name'];\n                const name = _.get(where, 'name');\n                const sql = `SELECT ${allowedKeys.join(', ')} FROM banks_mas WHERE status = 1 AND name = '${name}';`;\n                console.log('FindByName query: ' + sql);\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to insert a new bank.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    insert(): object {\n        return {\n            name: `insert`,\n            type: `INSERT`,\n            syntax: (where: any) => {\n                const allowedKeys = [\n                    'name',\n                    'short_name',\n                    'id_city',\n                    'id_state',\n                    'id_country',\n                    'status',\n                ];\n                const conds = _.pick(where, allowedKeys);\n                const keys = _.keys(conds);\n                const values = keys.map((key) => this.formatValue(conds[key]));\n\n                const sql = `INSERT INTO banks_mas (${keys.join(', ')}) VALUES (${values.join(', ')}) RETURNING id_bank as insertid, name;`;\n                console.log('Insert query: ', sql);\n\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to update an existing bank.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    update(): object {\n        return {\n            name: `update`,\n            type: `UPDATE`,\n            syntax: (where: any) => {\n                const id = _.get(where, 'id_bank');\n                _.unset(where, 'id_bank');\n                const allowedKeys = [\n                    'name',\n                    'short_name',\n                    'id_city',\n                    'id_state',\n                    'id_country',\n                    'status',\n                    'updated_at',\n                ];\n                const updateData = _.pick(where, allowedKeys);\n\n                const setClauses = Object.keys(updateData).map(\n                    (key) => `${key} = ${this.formatValue(updateData[key])}`\n                );\n                const sql = `UPDATE banks_mas SET ${setClauses.join(', ')} WHERE id_bank = '${id}' AND status = 1 RETURNING id_bank as updatedid, name;`;\n                console.log('Update query: ', sql);\n\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to delete a bank by its ID.\n     * @param {string} id - The ID of the bank to delete.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    delete(): object {\n        return {\n            name: `delete`,\n            type: `UPDATE`,\n            syntax: (id: string) => {\n                const sql = `UPDATE banks_mas SET status = 127 WHERE id_bank = '${id}' RETURNING id_bank as deletedid, name;`;\n                console.log('Delete query: ', sql);\n\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Formats a value for use in an SQL query.\n     * @param value - Value to format\n     * @returns - Formatted value as a string\n     */\n    formatValue(value: any): string {\n        if (Array.isArray(value)) {\n            const formattedArray = value.map((v) => `'${v.replace(/'/g, \"''\")}'`).join(', ');\n            return `'{${formattedArray}}'`;\n        } else if (typeof value === 'string') {\n            return `'${value.replace(/'/g, \"''\")}'`;\n        } else if (value === null || value === undefined) {\n            return 'NULL';\n        } else {\n            return `${value}`; // For numbers and other types\n        }\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Query-8.html":{"url":"classes/Query-8.html","title":"class - Query-8","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Query\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/documents/query.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the Query class, which provides methods for generating SQL queries\nrelated to document data management.\nThe Query class includes methods to generate SQL queries for operations such as\nretrieving, inserting, updating, and deleting document records from the database.\nIt uses the lodash library for object manipulation and query construction.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                findById\n                            \n                            \n                                findByName\n                            \n                            \n                                formatValue\n                            \n                            \n                                insert\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/documents/query.ts:108\n                \n            \n\n\n            \n                \n                    Generates a SQL query to delete a document by its ID.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        The query configuration object with name, type, syntax, and params properties.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findById\n                        \n                    \n                \n            \n            \n                \nfindById()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/documents/query.ts:19\n                \n            \n\n\n            \n                \n                    Generates a SQL query to find a document by its ID.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        The query configuration object with name, type, syntax, and params properties.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByName\n                        \n                    \n                \n            \n            \n                \nfindByName()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/documents/query.ts:37\n                \n            \n\n\n            \n                \n                    Generates a SQL query to find a document by its name.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        The query configuration object with name, type, syntax, and params properties.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        formatValue\n                        \n                    \n                \n            \n            \n                \nformatValue(value: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/documents/query.ts:125\n                \n            \n\n\n            \n                \n                    Formats a value for use in an SQL query.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue to format\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \nFormatted value as a string\n\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        insert\n                        \n                    \n                \n            \n            \n                \ninsert()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/documents/query.ts:55\n                \n            \n\n\n            \n                \n                    Generates a SQL query to insert a new document.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        The query configuration object with name, type, syntax, and params properties.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/documents/query.ts:76\n                \n            \n\n\n            \n                \n                    Generates a SQL query to update an existing document.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        The query configuration object with name, type, syntax, and params properties.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as _ from 'lodash';\n\n/**\n * @fileoverview\n * This file defines the `Query` class, which provides methods for generating SQL queries\n * related to document data management.\n *\n * @module\n * @description\n * The `Query` class includes methods to generate SQL queries for operations such as\n * retrieving, inserting, updating, and deleting document records from the database.\n * It uses the lodash library for object manipulation and query construction.\n */\nexport class Query {\n    /**\n     * Generates a SQL query to find a document by its ID.\n     * @returns {object} The query configuration object with `name`, `type`, `syntax`, and `params` properties.\n     */\n    findById(): object {\n        return {\n            name: `findById`,\n            type: `SELECT_ONE`,\n            syntax: (where: any) => {\n                const allowedKeys = ['id_document', 'id_document_group', 'name', 'status'];\n                const id = _.get(where, 'id');\n                const sql = `SELECT ${allowedKeys.join(', ')} FROM documents WHERE id_document = '${id}';`;\n                console.log('FindById query: ' + sql);\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to find a document by its name.\n     * @returns {object} The query configuration object with `name`, `type`, `syntax`, and `params` properties.\n     */\n    findByName(): object {\n        return {\n            name: `findByName`,\n            type: `SELECT_ONE`,\n            syntax: (where: any) => {\n                const allowedKeys = ['id_document', 'id_document_group', 'name'];\n                const name = _.get(where, 'name');\n                const sql = `SELECT ${allowedKeys.join(', ')} FROM documents WHERE name = '${name}';`;\n                console.log('FindByName query: ' + sql);\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to insert a new document.\n     * @returns {object} The query configuration object with `name`, `type`, `syntax`, and `params` properties.\n     */\n    insert(): object {\n        return {\n            name: `insert`,\n            type: `INSERT`,\n            syntax: (where: any) => {\n                const allowedKeys = ['id_document_group', 'name', 'status'];\n                const conds = _.pick(where, allowedKeys);\n                const keys = _.keys(conds);\n                //const values = _.values(conds);\n                const values = keys.map((key) => this.formatValue(conds[key]));\n                const sql = `INSERT INTO documents (${keys.join(', ')}) VALUES (${values}) RETURNING id_document as insertid, name;`;\n                console.log('Insert query: ', sql);\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to update an existing document.\n     * @returns {object} The query configuration object with `name`, `type`, `syntax`, and `params` properties.\n     */\n    update(): object {\n        return {\n            name: `update`,\n            type: `UPDATE`,\n            syntax: (where: any) => {\n                const id = _.get(where, 'id_document');\n                _.unset(where, 'id_document');\n                const allowedKeys = [\n                    'id_document_group',\n                    'name',\n                    'status',\n                    'id_updated_by',\n                    'updated_at',\n                ];\n                const updateData = _.pick(where, allowedKeys);\n\n                const setClauses = Object.keys(updateData).map(\n                    (key) => `${key} = ${this.formatValue(updateData[key])}`\n                );\n                const sql = `UPDATE documents SET ${setClauses.join(', ')} WHERE id_document = '${id}' AND status = 1 RETURNING id_document as updatedid, name;`;\n                console.log('Update query: ', sql);\n\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to delete a document by its ID.\n     * @param {string} id - The ID of the document to delete.\n     * @returns {object} The query configuration object with `name`, `type`, `syntax`, and `params` properties.\n     */\n    delete(): object {\n        return {\n            name: `delete`,\n            type: `UPDATE`,\n            syntax: (id: string) => {\n                const sql = `UPDATE documents SET status = 127 WHERE id_document = '${id}' RETURNING id_document as deletedid, name;`;\n                console.log('Delete query: ', sql);\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Formats a value for use in an SQL query.\n     * @param value - Value to format\n     * @returns - Formatted value as a string\n     */\n    formatValue(value: any): string {\n        if (Array.isArray(value)) {\n            const formattedArray = value.map((v) => `'${v.replace(/'/g, \"''\")}'`).join(', ');\n            return `'{${formattedArray}}'`;\n        } else if (typeof value === 'string') {\n            return `'${value.replace(/'/g, \"''\")}'`;\n        } else if (value === null || value === undefined) {\n            return 'NULL';\n        } else {\n            return `${value}`; // For numbers and other types\n        }\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Query-9.html":{"url":"classes/Query-9.html","title":"class - Query-9","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Query\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/document_groups/query.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the Query class, which provides methods for generating SQL queries\nrelated to document group data management.\nThe Query class includes methods to generate SQL queries for operations such as\nretrieving, inserting, updating, and deleting document group records from the database.\nIt uses the lodash library for object manipulation and query construction.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                findById\n                            \n                            \n                                findByName\n                            \n                            \n                                formatValue\n                            \n                            \n                                insert\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/document_groups/query.ts:103\n                \n            \n\n\n            \n                \n                    Generates a SQL query to delete a document group by its ID.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        The query configuration object with name, type, and syntax properties.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findById\n                        \n                    \n                \n            \n            \n                \nfindById()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/document_groups/query.ts:19\n                \n            \n\n\n            \n                \n                    Generates a SQL query to find a document group by its ID.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        The query configuration object with name, type, and syntax properties.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByName\n                        \n                    \n                \n            \n            \n                \nfindByName()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/document_groups/query.ts:37\n                \n            \n\n\n            \n                \n                    Generates a SQL query to find a document group by its name.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        The query configuration object with name, type, and syntax properties.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        formatValue\n                        \n                    \n                \n            \n            \n                \nformatValue(value: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/document_groups/query.ts:121\n                \n            \n\n\n            \n                \n                    Formats a value for use in an SQL query.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue to format\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \nFormatted value as a string\n\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        insert\n                        \n                    \n                \n            \n            \n                \ninsert()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/document_groups/query.ts:55\n                \n            \n\n\n            \n                \n                    Generates a SQL query to insert a new document group.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        The query configuration object with name, type, and syntax properties.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/document_groups/query.ts:77\n                \n            \n\n\n            \n                \n                    Generates a SQL query to update an existing document group.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        The query configuration object with name, type, and syntax properties.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as _ from 'lodash';\n\n/**\n * @fileoverview\n * This file defines the `Query` class, which provides methods for generating SQL queries\n * related to document group data management.\n *\n * @module\n * @description\n * The `Query` class includes methods to generate SQL queries for operations such as\n * retrieving, inserting, updating, and deleting document group records from the database.\n * It uses the lodash library for object manipulation and query construction.\n */\nexport class Query {\n    /**\n     * Generates a SQL query to find a document group by its ID.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    findById(): object {\n        return {\n            name: `findById`,\n            type: `SELECT_ONE`,\n            syntax: (where: any) => {\n                const allowedKeys = ['id_document_group', 'name', 'status'];\n                const id = _.get(where, 'id');\n                const sql = `SELECT ${allowedKeys.join(', ')} FROM document_groups WHERE status = 1 AND id_document_group = '${id}';`;\n                console.log('FindById query: ' + sql);\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to find a document group by its name.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    findByName(): object {\n        return {\n            name: `findByName`,\n            type: `SELECT_ONE`,\n            syntax: (where: any) => {\n                const allowedKeys = ['id_document_group', 'name'];\n                const name = _.get(where, 'name');\n                const sql = `SELECT ${allowedKeys.join(', ')} FROM document_groups WHERE status = 1 AND name = '${name}';`;\n                console.log('FindByName query: ' + sql);\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to insert a new document group.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    insert(): object {\n        return {\n            name: `insert`,\n            type: `INSERT`,\n            syntax: (where: any) => {\n                const allowedKeys = ['name', 'status'];\n                const conds = _.pick(where, allowedKeys);\n                const keys = _.keys(conds);\n                const values = keys.map((key) => this.formatValue(conds[key]));\n\n                const sql = `INSERT INTO document_groups (${keys.join(', ')}) VALUES (${values.join(', ')}) RETURNING id_document_group as insertid, name;`;\n                console.log('Insert query: ', sql);\n\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to update an existing document group.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    update(): object {\n        return {\n            name: `update`,\n            type: `UPDATE`,\n            syntax: (where: any) => {\n                const id = _.get(where, 'id_document_group');\n                _.unset(where, 'id_document_group');\n                const allowedKeys = ['name', 'status', 'updated_at'];\n                const updateData = _.pick(where, allowedKeys);\n\n                const setClauses = Object.keys(updateData).map(\n                    (key) => `${key} = ${this.formatValue(updateData[key])}`\n                );\n                const sql = `UPDATE document_groups SET ${setClauses.join(', ')} WHERE id_document_group = '${id}' AND status = 1 RETURNING id_document_group as updatedid, name;`;\n                console.log('Update query: ', sql);\n\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Generates a SQL query to delete a document group by its ID.\n     * @param {string} id - The ID of the document group to delete.\n     * @returns {object} The query configuration object with `name`, `type`, and `syntax` properties.\n     */\n    delete(): object {\n        return {\n            name: `delete`,\n            type: `UPDATE`,\n            syntax: (id: string) => {\n                const sql = `UPDATE document_groups SET status = 127 WHERE id_document_group = '${id}' RETURNING id_document_group as deletedid, name;`;\n                console.log('Delete query: ', sql);\n\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Formats a value for use in an SQL query.\n     * @param value - Value to format\n     * @returns - Formatted value as a string\n     */\n    formatValue(value: any): string {\n        if (Array.isArray(value)) {\n            const formattedArray = value.map((v) => `'${v.replace(/'/g, \"''\")}'`).join(', ');\n            return `'{${formattedArray}}'`;\n        } else if (typeof value === 'string') {\n            return `'${value.replace(/'/g, \"''\")}'`;\n        } else if (value === null || value === undefined) {\n            return 'NULL';\n        } else {\n            return `${value}`; // For numbers and other types\n        }\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/QueryConfig.html":{"url":"interfaces/QueryConfig.html","title":"interface - QueryConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  QueryConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/helper/services/comman.query.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            syntax\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        syntax\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        syntax:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as _ from 'lodash';\n\n/**\n * CommonQuery\n *\n * @description\n * A generic class to handle SQL queries for different models. It provides methods for\n * finding, inserting, updating, and deleting records using DTOs.\n */\nexport class CommonQuery1 {\n    private model: string; // The name of the database table/model\n    private allowedKeys: (keyof T)[]; // List of keys that can be used in queries\n\n    /**\n     * Constructor to initialize the CommonQuery class.\n     * @param model - The name of the model/table for queries.\n     * @param allowedKeys - The keys of the DTO that are allowed in queries.\n     */\n    constructor(model: string, allowedKeys: (keyof T)[]) {\n        this.model = model;\n        this.allowedKeys = allowedKeys;\n    }\n\n    /**\n     * Generates a SQL query to find a record by ID.\n     * @returns An object containing the query configuration for finding by ID.\n     */\n    findById(): object {\n        return this.createQuery(\n            'SELECT_ONE',\n            (id: number) => `\n            SELECT ${this.allowedKeys.join(', ')}\n            FROM ${this.model} AS main\n            WHERE main.status = 1 AND main.id = ${this.formatValue(id)};\n        `\n        );\n    }\n\n    /**\n     * Generates a SQL query to insert a new record.\n     * @returns An object containing the query configuration for inserting a record.\n     */\n    insert(): object {\n        return this.createQuery('INSERT', (dto: T) => {\n            const conds = _.pick(dto, this.allowedKeys);\n            const keys = Object.keys(conds);\n            const values = keys.map((key) => this.formatValue(conds[key]));\n\n            return `\n                INSERT INTO ${this.model} (${keys.join(', ')})\n                VALUES (${values.join(', ')}) RETURNING *;\n            `;\n        });\n    }\n\n    /**\n     * Generates a SQL query to update an existing record.\n     * @returns An object containing the query configuration for updating a record.\n     */\n    update(): object {\n        return this.createQuery('UPDATE', (dto: T) => {\n            const id = _.get(dto, 'id');\n            _.unset(dto, 'id'); // Remove the ID for the update\n            const updateData = _.pick(dto, this.allowedKeys);\n\n            const setClauses = Object.entries(updateData)\n                .map(([key, value]) => `${key} = ${this.formatValue(value)}`)\n                .join(', ');\n\n            return `\n                UPDATE ${this.model}\n                SET ${setClauses}\n                WHERE id = ${this.formatValue(id)} RETURNING *;\n            `;\n        });\n    }\n\n    /**\n     * Generates a SQL query to delete a record by ID.\n     * @returns An object containing the query configuration for deleting a record.\n     */\n    delete(): object {\n        return this.createQuery(\n            'UPDATE',\n            (id: number) => `\n            UPDATE ${this.model}\n            SET status = 127\n            WHERE id = ${this.formatValue(id)} RETURNING *;\n        `\n        );\n    }\n\n    /**\n     * Finds records with dynamic joins, automatically creating aliases for each table.\n     * Allows specifying fields to select from joined tables.\n     * @param joins - An array of objects containing the table name, join condition, join type, and selected fields.\n     * @returns An object containing the query configuration for finding with joins.\n     */\n    findWithDynamicJoin(\n        joins: Array\n    ): object {\n        return this.createQuery('SELECT_WITH_DYNAMIC_JOIN', (id: number) => {\n            const fields = this.allowedKeys.join(', ');\n            const joinClauses = joins\n                .map((join, index) => {\n                    const alias = `table${index + 1}`; // Create an alias like table1, table2, etc.\n                    const joinType = join.type ? join.type : 'JOIN'; // Default to INNER JOIN if no type is specified\n\n                    // Select specific fields from the joined table\n                    const selectFields = join.selectFields\n                        ? join.selectFields.map((field) => `${alias}.${field}`).join(', ')\n                        : '';\n                    return `${joinType} ${join.table} AS ${alias} ON ${join.condition}${selectFields ? `, ${selectFields}` : ''}`;\n                })\n                .join(' ');\n\n            return `\n                SELECT ${fields}, ${joins.map((join, index) => (join.selectFields ? join.selectFields.map((field) => `table${index + 1}.${field}`).join(', ') : '')).join(', ')}\n                FROM ${this.model} AS main\n                ${joinClauses}\n                WHERE main.status = 1 AND main.id = ${this.formatValue(id)};\n            `;\n        });\n    }\n\n    /**\n     * Creates a query object with a specific type and syntax generator.\n     * @param type - The type of query (e.g., SELECT_ONE, INSERT).\n     * @param syntaxGenerator - A function that generates the SQL syntax.\n     * @returns An object containing the query configuration.\n     */\n    private createQuery(type: string, syntaxGenerator: (arg: any) => string): object {\n        return {\n            name: type.toLowerCase(),\n            type,\n            syntax: syntaxGenerator,\n        };\n    }\n\n    /**\n     * Formats a value for safe SQL query insertion.\n     * @param value - The value to format.\n     * @returns A string representation of the formatted value.\n     */\n    private formatValue(value: any): string {\n        if (Array.isArray(value)) {\n            const formattedArray = value.map((v) => `'${v.replace(/'/g, \"''\")}'`).join(', ');\n            return `'{${formattedArray}}'`;\n        } else if (typeof value === 'string') {\n            return `'${value.replace(/'/g, \"''\")}'`;\n        } else if (value === null || value === undefined) {\n            return 'NULL';\n        } else {\n            return `${value}`; // For numbers and other types\n        }\n    }\n    // commonQuery = new CommonQuery('your_table', ['id', 'name', 'status']);\n    // queryConfig = commonQuery.findWithDynamicJoin([\n    //     {\n    //         table: 'another_table',\n    //         condition: 'another_table.foreign_key = main.id',\n    //         type: 'LEFT JOIN',\n    //         selectFields: ['field1', 'field2'], // Specify fields to select from another_table\n    //     },\n    //     {\n    //         table: 'yet_another_table',\n    //         condition: 'yet_another_table.foreign_key = main.id',\n    //         selectFields: ['field3', 'field4'], // Specify fields to select from yet_another_table\n    //     },\n    // ]);\n}\n/**\n * CommonQuery\n *\n * @description\n * A generic class to handle SQL queries for different models. It provides methods for\n * finding, inserting, updating, and deleting records using DTOs.\n */\n\n/**\n * CommonQuery\n *\n * @description\n * A generic class to handle SQL queries for different models. It provides methods for\n * finding, inserting, updating, and deleting records using DTOs.\n */\nexport class CommonQuery5 {\n    private model: string; // The name of the database table/model\n    private allowedKeys: (keyof T)[]; // List of keys that can be used in queries\n\n    /**\n     * Constructor to initialize the CommonQuery class.\n     * @param model - The name of the model/table for queries.\n     * @param allowedKeys - The keys of the DTO that are allowed in queries.\n     */\n    constructor(model: string, allowedKeys: (keyof T)[]) {\n        this.model = model;\n        this.allowedKeys = allowedKeys;\n    }\n\n    /**\n     * Finds records with dynamic joins, automatically creating aliases for each table.\n     * @param joins - An array of objects containing the table name, join condition, join type, and selected fields.\n     * @returns An object containing the query configuration for finding with joins.\n     */\n    findWithDynamicJoin(\n        joins: Array\n    ): object {\n        return this.createQuery('SELECT_WITH_DYNAMIC_JOIN', (id: number) => {\n            const fields = this.allowedKeys.join(', ');\n            const mainAlias = 'main'; // Alias for the main table\n            const joinClauses = joins\n                .map((join, index) => {\n                    const joinAlias = `table${index + 1}`; // Create an alias like table1, table2, etc.\n                    const joinType = join.type ? join.type : 'JOIN'; // Default to INNER JOIN if no type is specified\n\n                    // Split the condition to derive the join fields\n                    const [foreignKey, mainField] = join.condition\n                        .split('=')\n                        .map((part) => part.trim());\n                    const condition = `${join.table}.${foreignKey} = ${mainAlias}.${mainField}`;\n\n                    return `${joinType} ${join.table} AS ${joinAlias} ON ${condition}`;\n                })\n                .join(' ');\n\n            return `\n                SELECT ${fields}, \n                ${joins\n                    .map((join, index) => {\n                        const alias = `table${index + 1}`;\n                        return join.selectFields\n                            ? join.selectFields.map((field) => `${alias}.${field}`).join(', ')\n                            : '';\n                    })\n                    .filter((field) => field)\n                    .join(', ')} \n                FROM ${this.model} AS ${mainAlias}\n                ${joinClauses}\n                WHERE ${mainAlias}.status = 1 AND ${mainAlias}.id = ${this.formatValue(id)};\n            `;\n        });\n    }\n\n    findWithDynamicJoin1(\n        joins: Array,\n        additionalConditions?: string // Additional dynamic WHERE conditions\n    ): QueryConfig {\n        // Specify the return type\n        return {\n            name: `SELECT_WITH_DYNAMIC_JOIN`,\n            type: `join`,\n            syntax: (id: number) => {\n                // Accept id as a parameter\n                const fields = this.allowedKeys.join(', ');\n                const mainAlias = 'main'; // Alias for the main table\n                const joinClauses = joins\n                    .map((join, index) => {\n                        const joinAlias = `table${index + 1}`; // Create an alias like table1, table2, etc.\n                        const joinType = join.type ? join.type : 'JOIN'; // Default to INNER JOIN if no type is specified\n\n                        // Split the condition to derive the join fields\n                        const [foreignKey, mainField] = join.condition\n                            .split('=')\n                            .map((part) => part.trim());\n                        const condition = `${join.table}.${foreignKey} = ${mainAlias}.${mainField}`;\n\n                        return `${joinType} ${join.table} AS ${joinAlias} ON ${condition}`;\n                    })\n                    .join(' ');\n\n                // Start building the WHERE clause\n                const baseWhere = `${mainAlias}.status = 1 AND ${mainAlias}.id = ${this.formatValue(id)}`;\n                const dynamicWhere = additionalConditions ? `AND ${additionalConditions}` : '';\n\n                return `\n            SELECT ${fields}, \n            ${joins\n                .map((join, index) => {\n                    const alias = `table${index + 1}`;\n                    return join.selectFields\n                        ? join.selectFields.map((field) => `${alias}.${field}`).join(', ')\n                        : '';\n                })\n                .filter((field) => field)\n                .join(', ')} \n            FROM ${this.model} AS ${mainAlias}\n            ${joinClauses}\n            WHERE ${baseWhere} ${dynamicWhere};\n            `;\n            },\n        };\n    }\n\n    findWithDynamicJoin2(\n        joins: Array,\n        additionalConditions?: string // Additional dynamic WHERE conditions\n    ): QueryConfig {\n        return {\n            name: `SELECT_WITH_DYNAMIC_JOIN`,\n            type: `join,`,\n            syntax: () => {\n                const mainAlias = 'main';\n                // const fields = this.allowedKeys.join(', ');\n                const fields = this.allowedKeys\n                    .map((field) => `${mainAlias}.${String(field)}`) // Ensure conversion to string\n                    .join(', '); // Alias for the main table\n                const joinClauses = joins\n                    .map((join, index) => {\n                        const joinAlias = `table${index + 1}`; // Create an alias like table1, table2, etc.\n                        const joinType = join.type ? join.type : 'JOIN'; // Default to INNER JOIN if no type is specified\n\n                        // Split the condition to derive the join fields\n                        const [foreignKey, mainField] = join.condition\n                            .split('=')\n                            .map((part) => part.trim());\n                        const condition = `${joinAlias}.${foreignKey} = ${mainAlias}.${mainField}`;\n\n                        return `${joinType} ${join.table} AS ${joinAlias} ON ${condition}`;\n                    })\n                    .join(' ');\n\n                // Start building the WHERE clause\n                const baseWhere = `${mainAlias}.status = 1`;\n                const dynamicWhere = additionalConditions ? `AND ${additionalConditions}` : '';\n\n                return `\n            SELECT ${fields}, \n            ${joins\n                .map((join, index) => {\n                    const alias = `table${index + 1}`;\n                    return join.selectFields\n                        ? join.selectFields.map((field) => `${alias}.${field}`).join(', ')\n                        : '';\n                })\n                .filter((field) => field)\n                .join(', ')} \n            FROM ${this.model} AS ${mainAlias}\n            ${joinClauses}\n            WHERE ${baseWhere} ${dynamicWhere};\n        `;\n            },\n        };\n    }\n    findWithDynamicJoin3(\n        joins: Array,\n        baseAdditionalConditions?: string // Additional conditions for the main WHERE clause\n    ): QueryConfig {\n        return {\n            name: `SELECT_WITH_DYNAMIC_JOIN`,\n            type: `join`,\n            syntax: () => {\n                const mainAlias = 'main';\n                const fields = this.allowedKeys\n                    .map((field) => `${mainAlias}.${String(field)}`)\n                    .join(', ');\n\n                const joinClauses = joins\n                    .map((join, index) => {\n                        const joinAlias = `table${index + 1}`;\n                        const joinType = join.type ? join.type : 'JOIN';\n\n                        const [foreignKey, mainField] = join.condition\n                            .split('=')\n                            .map((part) => part.trim());\n                        const condition = `${joinAlias}.${foreignKey} = ${mainAlias}.${mainField}`;\n\n                        // Add dynamic conditions for the current join\n                        const dynamicJoinConditions = join.additionalConditions\n                            ? join.additionalConditions\n                                  .map((cond) => `${joinAlias}.${cond}`)\n                                  .join(' AND ')\n                            : '';\n\n                        return `${joinType} ${join.table} AS ${joinAlias} ON ${condition}${dynamicJoinConditions ? ' AND ' + dynamicJoinConditions : ''}`;\n                    })\n                    .join(' ');\n\n                // Base where clause\n                const baseWhere = `${mainAlias}.status = 1`;\n                const dynamicWhere = baseAdditionalConditions\n                    ? `AND ${baseAdditionalConditions}`\n                    : '';\n\n                return `\n            SELECT ${fields}, \n            ${joins\n                .map((join, index) => {\n                    const alias = `table${index + 1}`;\n                    return join.selectFields\n                        ? join.selectFields.map((field) => `${alias}.${field}`).join(', ')\n                        : '';\n                })\n                .filter((field) => field)\n                .join(', ')} \n            FROM ${this.model} AS ${mainAlias}\n            ${joinClauses}\n            WHERE ${baseWhere} ${dynamicWhere};\n        `;\n            },\n        };\n    }\n\n    /**\n     * Creates a query object with a specific type and syntax generator.\n     * @param type - The type of query (e.g., SELECT_ONE, INSERT).\n     * @param syntaxGenerator - A function that generates the SQL syntax.\n     * @returns An object containing the query configuration.\n     */\n    private createQuery(type: string, syntaxGenerator: (arg: any) => string): object {\n        return {\n            name: type.toLowerCase(),\n            type,\n            syntax: syntaxGenerator, // This is a function\n        };\n    }\n\n    // private createQuery(type: string, syntaxGenerator: (arg: any) => string): object {\n    //     return {\n    //         name: type.toLowerCase(),\n    //         type,\n    //         syntax: syntaxGenerator,\n    //     };\n    // }\n\n    /**\n     * Formats a value for safe SQL query insertion.\n     * @param value - The value to format.\n     * @returns A string representation of the formatted value.\n     */\n    private formatValue(value: any): string {\n        if (Array.isArray(value)) {\n            const formattedArray = value.map((v) => `'${v.replace(/'/g, \"''\")}'`).join(', ');\n            return `'{${formattedArray}}'`;\n        } else if (typeof value === 'string') {\n            return `'${value.replace(/'/g, \"''\")}'`;\n        } else if (value === null || value === undefined) {\n            return 'NULL';\n        } else {\n            return `${value}`; // For numbers and other types\n        }\n    }\n    // commonQuery = new CommonQuery('your_table', ['id', 'name', 'status']);\n    // queryConfig = commonQuery.findWithDynamicJoin([\n    //     {\n    //         table: 'another_table',\n    //         condition: 'foreign_key=id', // Specify the join condition\n    //         type: 'LEFT JOIN',\n    //         selectFields: ['field1', 'field2'], // Specify fields to select from another_table\n    //     },\n    //     {\n    //         table: 'yet_another_table',\n    //         condition: 'foreign_key=id', // Specify the join condition\n    //         selectFields: ['field3', 'field4'], // Specify fields to select from yet_another_table\n    //     },\n    // ]);\n}\ninterface QueryConfig {\n    name: string;\n    type: string;\n    syntax: (id: number) => string; // Method to generate SQL\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QueryCountryDto.html":{"url":"classes/QueryCountryDto.html","title":"class - QueryCountryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QueryCountryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/countries/dto/query-country.dto-remove.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                filters\n                            \n                            \n                                    Optional\n                                limit\n                            \n                            \n                                    Optional\n                                page\n                            \n                            \n                                    Optional\n                                sort\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        filters\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FilterCountryDto | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: String})@IsOptional()@Transform(undefined)@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/query-country.dto-remove.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@Transform(undefined)@IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/query-country.dto-remove.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@Transform(undefined)@IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/query-country.dto-remove.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        sort\n                        \n                    \n                \n            \n                \n                    \n                        Type :     SortCountryDto[] | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: String})@IsOptional()@Transform(undefined)@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/query-country.dto-remove.ts:50\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nimport { Transform, Type, plainToInstance } from 'class-transformer';\nimport { IsNumber, IsOptional, IsString, ValidateNested } from 'class-validator';\n\nimport { Country } from './country';\n\nexport class FilterCountryDto {}\n\nexport class SortCountryDto {\n    @ApiProperty()\n    @Type(() => String)\n    @IsString()\n    orderBy: keyof Country;\n\n    @ApiProperty()\n    @IsString()\n    order: string;\n}\n\nexport class QueryCountryDto {\n    @ApiPropertyOptional()\n    @Transform(({ value }) => (value ? Number(value) : 1))\n    @IsNumber()\n    @IsOptional()\n    page?: number;\n\n    @ApiPropertyOptional()\n    @Transform(({ value }) => (value ? Number(value) : 10))\n    @IsNumber()\n    @IsOptional()\n    limit?: number;\n\n    @ApiPropertyOptional({ type: String })\n    @IsOptional()\n    @Transform(({ value }) =>\n        value ? plainToInstance(FilterCountryDto, JSON.parse(value)) : undefined\n    )\n    @ValidateNested()\n    @Type(() => FilterCountryDto)\n    filters?: FilterCountryDto | null;\n\n    @ApiPropertyOptional({ type: String })\n    @IsOptional()\n    @Transform(({ value }) => {\n        return value ? plainToInstance(SortCountryDto, JSON.parse(value)) : undefined;\n    })\n    @ValidateNested({ each: true })\n    @Type(() => SortCountryDto)\n    sort?: SortCountryDto[] | null;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QueryFailedFilter.html":{"url":"classes/QueryFailedFilter.html","title":"class - QueryFailedFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QueryFailedFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/query-failed.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                Exception filter for handling database query failures.\nThis filter catches exceptions related to failed database queries and formats\nthe response based on the type of database constraint error.\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                reflector\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/query-failed.filter.ts:26\n                            \n                        \n\n                \n                    \n                            Creates an instance of QueryFailedFilter.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The reflector instance used for metadata reflection.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        reflector\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Reflector\n\n                    \n                \n                    \n                        \n                                Defined in src/core/filters/query-failed.filter.ts:34\n                        \n                    \n\n            \n                \n                    The reflector instance used for metadata reflection.\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: any, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/query-failed.filter.ts:45\n                \n            \n\n\n            \n                \n                    Handles the database query failure exception and formats the error response.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The exception thrown by a failed database query.\n\n                                    \n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The arguments host for accessing request and response objects.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { STATUS_CODES } from 'http';\n\nimport { ArgumentsHost, ExceptionFilter, HttpStatus, Logger } from '@nestjs/common'; // Catch\nimport { Reflector } from '@nestjs/core';\n\nimport { Response } from 'express';\n// import { QueryFailedError } from \"typeorm\";\n// import * as _ from 'lodash';\n\n// import { PgSQLService } from \"../common/shared/services/pgsql.service\";\nimport { constraintErrors } from './constraint-errors';\n// import { Query } from './query';\n\n/**\n * Exception filter for handling database query failures.\n *\n * This filter catches exceptions related to failed database queries and formats\n * the response based on the type of database constraint error.\n *\n * @export\n * @class QueryFailedFilter\n * @implements {ExceptionFilter}\n */\n\n// @Catch(QueryFailedError)\nexport class QueryFailedFilter implements ExceptionFilter {\n    /**\n     * Creates an instance of QueryFailedFilter.\n     * @param {Reflector} reflector The reflector instance used for metadata reflection.\n     *\n     * @memberof QueryFailedFilter\n     */\n\n    constructor(public reflector: Reflector) {}\n\n    /**\n     * Handles the database query failure exception and formats the error response.\n     *\n     * @param {any} exception The exception thrown by a failed database query.\n     * @param {ArgumentsHost} host The arguments host for accessing request and response objects.\n     *\n     * @memberof QueryFailedFilter\n     */\n\n    catch(exception: any, host: ArgumentsHost) {\n        console.log('QUERY FAIL from filter');\n        const ctx = host.switchToHttp();\n        const response = ctx.getResponse();\n        const request = ctx.getRequest();\n\n        const errorMessage = constraintErrors[exception.constraint];\n\n        const status =\n            exception.constraint && exception.constraint.startsWith('UQ')\n                ? HttpStatus.CONFLICT\n                : HttpStatus.INTERNAL_SERVER_ERROR;\n\n        const errorResponse = {\n            message: exception.sqlMessage,\n            query: exception.query,\n        };\n\n        try {\n            Logger.error(\n                `${request.method} ${request.url}`,\n                JSON.stringify(errorResponse),\n                'ExceptionFilter'\n            );\n\n            // const sqlService = new PgSQLService();\n            // const query = new Query();\n            // const reqstr = JSON.stringify(_.clone(request.body));\n            // const resstr = JSON.stringify(_.clone(errorResponse));\n            // sqlService.run(query.addQueryError(\"DBQuery\", request.method, request.url, reqstr, resstr));\n        } catch (error) {\n            Logger.error(\n                `${request.method} ${request.url}`,\n                JSON.stringify(errorResponse),\n                'ExceptionFilter'\n            );\n        }\n        response.status(status).json({\n            statusCode: status,\n            error: STATUS_CODES[status],\n            message: errorMessage,\n        });\n    }\n}\n\n// import { ArgumentsHost, Catch, ExceptionFilter, HttpException, HttpStatus } from '@nestjs/common';\n// import { Response } from 'express';\n// import { Prisma } from '@prisma/client';\n\n// @Catch(Prisma.PrismaClientKnownRequestError)\n// export class PrismaClientExceptionFilter implements ExceptionFilter {\n//   catch(exception: Prisma.PrismaClientKnownRequestError, host: ArgumentsHost) {\n//     const ctx = host.switchToHttp();\n//     const response = ctx.getResponse();\n//     const status = HttpStatus.INTERNAL_SERVER_ERROR;\n\n//     let message = exception.message;\n\n//     // Handle specific Prisma errors\n//     if (exception.code === 'P2002') {\n//       message = 'Unique constraint failed';\n//     }\n\n//     response.status(status).json({\n//       statusCode: status,\n//       message,\n//     });\n//   }\n// }\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/QueryOptions.html":{"url":"interfaces/QueryOptions.html","title":"interface - QueryOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  QueryOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/providers/dynamic-query.service-to-be-remove.ts\n        \n\n\n            \n                Description\n            \n            \n                Options for building queries.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            conditions\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            deleteType\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            fields\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            joins\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            optionalConditions\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            queryName\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            queryType\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            returningFields\n                                        \n                                \n                                \n                                        \n                                            table\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            values\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        conditions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        conditions:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Conditions for the query (e.g., WHERE clauses).\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        deleteType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        deleteType:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Type of delete operation ('soft' or 'hard').\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fields\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fields:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    List of fields to include in the query (e.g., columns for SELECT, INSERT, or UPDATE).\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        joins\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        joins:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Join clauses to include in the query.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        optionalConditions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        optionalConditions:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional conditions for the query.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        queryName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        queryName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Name of the query.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        queryType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        queryType:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Type of the query (e.g., INSERT, SELECT, UPDATE, DELETE).\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        returningFields\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        returningFields:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Fields to return from the query.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        table\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        table:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Name of the table to perform the query on.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        values\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        values:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Values to be used in the query (e.g., for INSERT or UPDATE operations).\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import * as _ from 'lodash';\n\n/**\n * Options for building queries.\n *\n * @export\n * @interface QueryOptions\n */\n\nexport interface QueryOptions {\n    /**\n     * Name of the query.\n     *\n     * @type {string}\n     * @memberof QueryOptions\n     */\n\n    queryName?: string;\n\n    /**\n     * Type of the query (e.g., INSERT, SELECT, UPDATE, DELETE).\n     *\n     * @type {string}\n     * @memberof QueryOptions\n     */\n\n    queryType?: string;\n\n    /**\n     * Name of the table to perform the query on.\n     *\n     * @type {string}\n     * @memberof QueryOptions\n     */\n\n    table: string;\n\n    /**\n     * List of fields to include in the query (e.g., columns for SELECT, INSERT, or UPDATE).\n     *\n     * @type {string[]}\n     * @memberof QueryOptions\n     */\n\n    fields?: string[];\n\n    /**\n     * Values to be used in the query (e.g., for INSERT or UPDATE operations).\n     *\n     * @type {Record}\n     * @memberof QueryOptions\n     */\n\n    values?: Record;\n\n    /**\n     * Conditions for the query (e.g., WHERE clauses).\n     *\n     * @type {Record}\n     * @memberof QueryOptions\n     */\n\n    conditions?: Record;\n\n    /**\n     * Optional conditions for the query.\n     *\n     * @type {Record}\n     * @memberof QueryOptions\n     */\n\n    optionalConditions?: Record;\n\n    /**\n     * Join clauses to include in the query.\n     *\n     * @type {string[]}\n     * @memberof QueryOptions\n     */\n\n    joins?: string[];\n\n    /**\n     * Fields to return from the query.\n     *\n     * @type {string[]}\n     * @memberof QueryOptions\n     */\n\n    returningFields?: string[];\n\n    /**\n     * Type of delete operation ('soft' or 'hard').\n     *\n     * @type {string}\n     * @memberof QueryOptions\n     */\n    deleteType?: string;\n}\n\n/**\n * Class to build dynamic SQL queries.\n *\n * @export\n * @class DynamicQueryBuilder\n */\nexport class DynamicQueryBuilder {\n    /**\n     * Builds an INSERT SQL query.\n     *\n     * @param {QueryOptions} options - Options for the INSERT query.\n     * @returns {object} - An object containing the query name, type, and the SQL syntax.\n     * @memberof DynamicQueryBuilder\n     */\n\n    buildInsertQuery(options: QueryOptions): object {\n        const { queryName, queryType, fields, table, values = {}, returningFields = [] } = options;\n        const conds = _.pick(values, fields);\n        const keys = _.keys(conds);\n        const vals = _.values(conds);\n\n        const returningClause = returningFields.length\n            ? `RETURNING ${returningFields.join(', ')}`\n            : '';\n\n        const sql = `INSERT INTO ${table} (${keys.join()}) VALUES ('${vals.join(\"','\")}') ${returningClause};`;\n\n        return {\n            name: queryName ? queryName : 'add',\n            type: queryType ? queryType : 'INSERT',\n            syntax: () => {\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Builds a SELECT SQL query.\n     *\n     * @param {QueryOptions} options - Options for the SELECT query.\n     * @returns {object} - An object containing the query name, type, and the SQL syntax.\n     * @memberof DynamicQueryBuilder\n     */\n\n    buildSelectQuery(options: QueryOptions): object {\n        const {\n            queryName,\n            queryType,\n            table,\n            fields = ['*'],\n            conditions = {},\n            joins = [],\n            optionalConditions = null,\n        } = options;\n\n        const whereClauses = Object.keys(conditions).map((key) => {\n            const value = conditions[key];\n            return typeof value === 'string' ? `${key} = '${value}'` : `${key} = ${value}`;\n        });\n\n        if (optionalConditions) {\n            // Adding optional conditions dynamically\n            Object.keys(optionalConditions).forEach((key) => {\n                const value = optionalConditions[key];\n                if (value) {\n                    whereClauses.push(\n                        typeof value === 'string' ? `${key} != '${value}'` : `${key} != ${value}`\n                    );\n                }\n            });\n        }\n\n        const whereClause = whereClauses.length ? `WHERE ${whereClauses.join(' AND ')}` : '';\n        const joinClause = joins.length ? joins.join(' ') : '';\n\n        const sql = `SELECT ${fields.join(', ')} FROM ${table} ${joinClause} ${whereClause}`;\n\n        return {\n            name: queryName ? queryName : 'find',\n            type: queryType ? queryType : 'SELECT_ONE',\n            syntax: () => {\n                return sql;\n            },\n        };\n    }\n\n    /**\n     * Builds an UPDATE SQL query.\n     *\n     * @param {QueryOptions} options - Options for the UPDATE query.\n     * @returns {object} - An object containing the query name, type, SQL syntax, and values to be used.\n     * @memberof DynamicQueryBuilder\n     */\n\n    buildUpdateQuery(options: QueryOptions): object {\n        const { table, values = {}, conditions = {}, returningFields = [] } = options;\n\n        const setClauses = Object.keys(values).map((key, index) => `${key} = $${index + 1}`);\n        const whereClauses = Object.keys(conditions).map(\n            (key, index) => `${key} = $${index + Object.keys(values).length + 1}`\n        );\n\n        const returningClause = returningFields.length\n            ? `RETURNING ${returningFields.join(', ')}`\n            : '';\n\n        const sql = `UPDATE ${table} SET ${setClauses.join(', ')} WHERE ${whereClauses.join(' AND ')} ${returningClause};`;\n\n        return {\n            name: 'update',\n            type: 'UPDATE',\n            sql,\n            values: [...Object.values(values), ...Object.values(conditions)],\n        };\n    }\n\n    //     return {\n    //   name: `delete`,\n    //   type: `UPDATE`,\n    //   syntax: (idArea: number) => {\n    //     const sql = `UPDATE Area SET Status = 127 WHERE Status = 1 AND idArea = ${idArea}`;\n\n    //     return sql;\n    //   },\n    // };\n\n    /**\n     * Builds a DELETE SQL query.\n     *\n     * @param {QueryOptions} options - Options for the DELETE query.\n     * @returns {object} - An object containing the query name, type, and the SQL syntax.\n     * @memberof DynamicQueryBuilder\n     */\n\n    buildDeleteQuery(options: QueryOptions): object {\n        const {\n            queryName,\n            queryType,\n            table,\n            conditions = {},\n            optionalConditions = null,\n            joins = [],\n            returningFields = [],\n            deleteType = 'soft',\n        } = options;\n\n        const whereClauses = Object.keys(conditions).map((key) => {\n            const value = conditions[key];\n            return typeof value === 'string' ? `${key} = '${value}'` : `${key} = ${value}`;\n        });\n\n        if (optionalConditions) {\n            // Adding optional conditions dynamically\n            Object.keys(optionalConditions).forEach((key) => {\n                const value = optionalConditions[key];\n                if (value) {\n                    whereClauses.push(\n                        typeof value === 'string' ? `${key} != '${value}'` : `${key} != ${value}`\n                    );\n                }\n            });\n        }\n\n        const whereClause = whereClauses.length ? `WHERE ${whereClauses.join(' AND ')}` : '';\n        const joinClause = joins.length ? joins.join(' ') : '';\n\n        // const whereClauses = Object.keys(conditions).map((key, index) => `${key} = $${index + 1}`);\n        // const whereClause = whereClauses.length ? `WHERE ${whereClauses.join(' AND ')}` : '';\n\n        const returningClause = returningFields.length\n            ? `RETURNING ${returningFields.join(', ')}`\n            : '';\n\n        let sql: string;\n        if (deleteType === 'soft') {\n            sql = `UPDATE ${table} SET status = 127 ${whereClause} ${returningClause};`;\n        } else {\n            sql = `DELETE FROM ${table} ${joinClause} ${whereClause} ${returningClause};`;\n        }\n\n        console.log('QQQQQQQQQQQQQQQQQQQQ', sql);\n\n        return {\n            name: queryName ? queryName : 'delete',\n            type: queryType ? queryType : 'DELETE',\n            syntax: () => {\n                return sql;\n            },\n        };\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ResolvePromisesInterceptor.html":{"url":"injectables/ResolvePromisesInterceptor.html","title":"injectable - ResolvePromisesInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ResolvePromisesInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/serializer.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                Interceptor that resolves all nested promises in the response data.\nThis interceptor is designed to be used within a NestJS application to ensure that any promises\nwithin the response data are fully resolved before the response is sent to the client.\nIt uses the deepResolvePromises function to recursively handle promises in nested structures.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/serializer.interceptor.ts:30\n                \n            \n\n\n            \n                \n                    Intercepts the request and resolves nested promises in the response data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe execution context of the request.\n\n\n                                    \n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe handler for the request.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \nAn observable that emits the resolved data.\n\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestInterceptor, ExecutionContext, CallHandler } from '@nestjs/common';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport deepResolvePromises from './deep-resolver';\n\n/**\n * Interceptor that resolves all nested promises in the response data.\n *\n * This interceptor is designed to be used within a NestJS application to ensure that any promises\n * within the response data are fully resolved before the response is sent to the client.\n * It uses the `deepResolvePromises` function to recursively handle promises in nested structures.\n *\n * @export\n * @class ResolvePromisesInterceptor\n * @implements {NestInterceptor}\n */\n\n@Injectable()\nexport class ResolvePromisesInterceptor implements NestInterceptor {\n    /**\n     * Intercepts the request and resolves nested promises in the response data.\n     *\n     * @param {ExecutionContext} context - The execution context of the request.\n     * @param {CallHandler} next - The handler for the request.\n     * @returns {Observable} - An observable that emits the resolved data.\n     */\n\n    intercept(context: ExecutionContext, next: CallHandler): Observable {\n        return next.handle().pipe(map((data) => deepResolvePromises(data)));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SortBy.html":{"url":"injectables/SortBy.html","title":"injectable - SortBy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  SortBy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/filter.validator.ts\n        \n\n\n            \n                Description\n            \n            \n                Custom validator for checking if a string is in the correct \"field direction\" format.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/filter.validator.ts:101\n                \n            \n\n\n            \n                \n                    Default error message when validation fails.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe validation arguments.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \nThe error message.\n\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(value: string, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/filter.validator.ts:71\n                \n            \n\n\n            \n                \n                    Validates if the given value is in the format of \"field direction\" where direction is \"ASC\" or \"DESC\".\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe value to be validated.\n\n\n                                    \n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe validation arguments.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \nReturns true if valid; otherwise, false.\n\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\nimport {\n    ValidatorConstraint,\n    ValidatorConstraintInterface,\n    ValidationArguments,\n} from 'class-validator';\n\n/**\n * Custom validator for checking if a string is a valid comma-separated list of numbers.\n *\n * @export\n * @class CommaSeparated\n * @implements {ValidatorConstraintInterface}\n */\n@Injectable()\n@ValidatorConstraint({ name: 'CommaSeparated', async: false })\nexport class CommaSeparated implements ValidatorConstraintInterface {\n    /**\n     * Validates if the given value is a comma-separated list of numbers.\n     *\n     * @param {string} propertyValue - The value to be validated.\n     * @param {ValidationArguments} args - The validation arguments.\n     * @returns {boolean} - Returns true if valid; otherwise, false.\n     */\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    validate(propertyValue: string, args: ValidationArguments): boolean {\n        //\n        //\n        const isValid = /^[0-9]+(,[0-9]+)*$/.test(propertyValue);\n\n        if (isValid) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Default error message when validation fails.\n     *\n     * @param {ValidationArguments} args - The validation arguments.\n     * @returns {string} - The error message.\n     */\n\n    defaultMessage(args: ValidationArguments): string {\n        return `Invalid ${args.property}`;\n    }\n}\n\n/**\n * Custom validator for checking if a string is in the correct \"field direction\" format.\n *\n * @export\n * @class SortBy\n * @implements {ValidatorConstraintInterface}\n */\n@Injectable()\n@ValidatorConstraint({ name: 'SortBy', async: false })\nexport class SortBy implements ValidatorConstraintInterface {\n    /**\n     * Validates if the given value is in the format of \"field direction\" where direction is \"ASC\" or \"DESC\".\n     *\n     * @param {string} value - The value to be validated.\n     * @param {ValidationArguments} args - The validation arguments.\n     * @returns {boolean} - Returns true if valid; otherwise, false.\n     */\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    validate(value: string, args: ValidationArguments): boolean {\n        // Split the input by spaces and validate each pair\n        const parts = value.split(' ');\n\n        // Ensure pairs of field direction (e.g., field direction, field direction, ...)\n        if (parts.length % 2 !== 0) {\n            return false;\n        }\n\n        // Regular expression to match valid field direction\n        const fieldRegex = /^[\\w]+$/;\n        const directionRegex = /^(ASC|DESC|asc|desc|Asc|Desc)$/;\n\n        // Iterate through pairs and validate\n        for (let i = 0; i \n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SortByDto.html":{"url":"classes/SortByDto.html","title":"class - SortByDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SortByDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/dto/pagination.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO class for sorting options.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                direction\n                            \n                            \n                                field\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        direction\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'ASC'})@IsString()@Matches(/^(ASC|DESC|asc|desc)$/, {message: 'operator must be one of ASC, DESC, asc, or desc'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.dto.ts:228\n                        \n                    \n\n            \n                \n                    The direction of the sort (ascending or descending).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        field\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/dto/pagination.dto.ts:214\n                        \n                    \n\n            \n                \n                    The field to sort by.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nimport { Type, Transform, plainToInstance } from 'class-transformer';\nimport {\n    IsOptional,\n    Min,\n    Max,\n    IsNotEmpty,\n    IsString,\n    ValidateNested,\n    Matches,\n    IsEnum,\n    // Validate,\n    // IsIn,\n} from 'class-validator';\n\n// import { IsValidField } from '@core/validators/field.validator'; // Import the custom validator\nimport { IsNumberStringOrNumber } from '@decorators/number.string.validator';\nimport { ToNumber } from '@decorators/transforms.decorator';\n// import { IsNumberStringOrNumber } from '@decorators/number.string.validator';\n// import { ToNumber } from '@decorators/transforms.decorator';\n// import { Country } from '@modules/countries/dto/country';\n\n/**\n * Enum representing different pagination types.\n *\n * @export\n * @enum {string}\n */\n\nexport enum PaginationType {\n    NONE = 'no',\n    INFINITY = 'infinity',\n    PAGINATE = 'paginate',\n    ALL = 'all',\n}\n\n/**\n * DTO class for pagination query parameters.\n *\n * @export\n */\nexport class PaginationQueryDto {\n    /**\n     * The type of pagination to apply.\n     *\n     * @type {PaginationType}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        description:\n            'Pagination must all (Page and has_next_page), infinity (only has_next_page), paginate(only page)',\n        enum: PaginationType,\n        default: PaginationType.ALL,\n    })\n    @IsEnum(PaginationType)\n    @IsOptional()\n    readonly pagination: PaginationType;\n\n    /**\n     * The page number for pagination.\n     *\n     * @type {number}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        description: 'Page number',\n        minimum: 1,\n        default: 1,\n    })\n    @IsOptional()\n    @IsNumberStringOrNumber()\n    @ToNumber()\n    @Min(1)\n    readonly page?: number;\n\n    /**\n     * The number of records per page.\n     *\n     * @type {number}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        description: 'Record limit',\n        minimum: 1,\n        maximum: 500,\n        default: 10,\n    })\n    @IsOptional()\n    @IsNumberStringOrNumber()\n    @ToNumber()\n    @Min(10)\n    @Max(500)\n    readonly limit?: number = 10;\n\n    /**\n     * Filters to apply to the query.\n     *\n     * @type {FilterQueryDto[] | null}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        name: 'filters',\n        required: false,\n        type: String,\n        description: 'Array of filter objects as a JSON string',\n        example: '[{\"field\":\"name\",\"operator\":\"=\",\"value\":\"IN\"}]',\n    })\n    @IsOptional()\n    @Transform(({ value }) => {\n        return value ? plainToInstance(FilterQueryDto, JSON.parse(value)) : undefined;\n    })\n    @ValidateNested({ each: true })\n    @Type(() => FilterQueryDto)\n    filters?: FilterQueryDto[] | null;\n\n    /**\n     * Sorting options for the query.\n     *\n     * @type {SortByDto[] | null}\n     * @memberof PaginationQueryDto\n     */\n\n    @ApiPropertyOptional({\n        name: 'sort',\n        required: false,\n        type: String,\n        description: 'Array of sort objects as a JSON string',\n        example: '[{\"field\":\"name\",\"direction\":\"ASC\"}]',\n    })\n    @IsOptional()\n    @Transform(({ value }) => {\n        return value ? plainToInstance(SortByDto, JSON.parse(value)) : undefined;\n    })\n    @ValidateNested({ each: true })\n    @Type(() => SortByDto)\n    sort?: SortByDto[] | null;\n}\n\n/**\n * DTO class for filter query parameters.\n *\n * @export\n */\nexport class FilterQueryDto {\n    /**\n     * The field to filter on.\n     *\n     * @type {string}\n     * @memberof FilterQueryDto\n     */\n\n    @ApiProperty({ example: 'iso', required: true })\n    @IsNotEmpty()\n    @IsString()\n    field: string;\n\n    /**\n     * The operator to use for filtering.\n     *\n     * @type {string}\n     * @memberof FilterQueryDto\n     */\n\n    @ApiProperty({ example: '=' })\n    @IsNotEmpty()\n    @IsString()\n    operator: string;\n\n    /**\n     * The value to filter by.\n     *\n     * @type {string}\n     * @memberof FilterQueryDto\n     */\n\n    @ApiProperty({ example: 'IN' })\n    @IsNotEmpty()\n    @IsString()\n    value: string;\n}\n\n/**\n * DTO class for sorting options.\n *\n * @export\n */\nexport class SortByDto {\n    // @ApiProperty({ example: 'name' })\n    // @IsString()\n    // @Validate(IsValidField, [Country], {\n    //     message: 'Field must be a valid key of Country',\n    // })\n    // field: keyof Country;\n    /**\n     * The field to sort by.\n     *\n     * @type {string}\n     * @memberof SortByDto\n     */\n\n    @ApiProperty()\n    @IsString()\n    // @IsIn(abc(x : keyof TExposedAccountInfo), {\n    //     message: 'Field must be one of \"name\", \"age\", or \"status\"',\n    // })\n    // @Validate(IsValidField, [{ entity: () => T }], {\n    //     message: 'Field must be a valid key of the specified entity',\n    // })\n    field: string;\n\n    /**\n     * The direction of the sort (ascending or descending).\n     *\n     * @type {string}\n     * @memberof SortByDto\n     */\n\n    @ApiProperty({ example: 'ASC' })\n    @IsString()\n    @Matches(/^(ASC|DESC|asc|desc)$/, {\n        message: 'operator must be one of ASC, DESC, asc, or desc',\n    })\n    direction: string;\n}\n\n// export class PaginatedResultDto {\n//     @ApiProperty()\n//     data: T[];\n\n//     @ApiProperty()\n//     total: number;\n\n//     @ApiProperty()\n//     page: number;\n\n//     @ApiProperty()\n//     limit: number;\n// }\n\n//DX\n// import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\n// import { Type, Transform, plainToInstance } from 'class-transformer';\n// import {\n//     IsOptional,\n//     Min,\n//     Max,\n//     IsNotEmpty,\n//     IsString,\n//     IsArray,\n//     ValidateNested,\n//     Validate,\n//     Matches,\n// } from 'class-validator';\n\n// import { IsNumberStringOrNumber } from '@decorators/number.string.validator';\n// import { ToNumber } from '@decorators/transforms.decorator';\n// import { SortBy } from '@validators/filter.validator';\n\n// export class FilterQueryDto {\n//     @ApiProperty({ example: 'name', required: true })\n//     @IsNotEmpty()\n//     @IsString()\n//     field: string;\n\n//     @ApiProperty({ example: 'LIKE' })\n//     @IsNotEmpty()\n//     @IsString()\n//     operator: string;\n\n//     @ApiProperty({ example: '%John%' })\n//     @IsNotEmpty()\n//     @IsString()\n//     value: string;\n// }\n\n// export class SortByDto {\n//     @ApiProperty({ example: 'name' })\n//     @IsString()\n//     field: string;\n\n//     @ApiProperty({ example: 'ASC' })\n//     @IsString()\n//     @Matches(/^(ASC|DESC|asc|desc)$/, {\n//         message: 'operator must be one of ASC, DESC, asc, or desc',\n//     })\n//     direction: string;\n// }\n\n// export class PaginationQueryDto {\n//     @ApiPropertyOptional({\n//         description: 'Page number',\n//         minimum: 1,\n//         default: 1,\n//     })\n//     @IsOptional()\n//     @IsNumberStringOrNumber()\n//     @ToNumber()\n//     @Min(1)\n//     // @Transform(({ value }) => {\n//     //     const strippedValue = String(value).replace(/['\"]+/g, '');\n//     //     const numberValue = Number(strippedValue);\n//     //     return isNaN(numberValue) ? 'undefined' : numberValue;\n//     // })\n//     readonly page?: number;\n\n//     @ApiPropertyOptional({\n//         description: 'Record limit',\n//         minimum: 1,\n//         maximum: 500,\n//         default: 10,\n//     })\n//     @IsOptional()\n//     @IsNumberStringOrNumber()\n//     @ToNumber()\n//     @Min(10)\n//     @Max(500)\n//     readonly limit?: number = 10;\n\n//     // @IsOptional()\n//     // @IsArray()\n//     // @ValidateNested({ each: true })\n//     // @Type(() => FilterQueryDto)\n//     // filters?: FilterQueryDto[];\n//     // // filters?: any;\n//     @ApiPropertyOptional({\n//         name: 'filters',\n//         required: false,\n//         type: String,\n//         description: 'Array of filter objects as a JSON string',\n//         example:\n//             '[{\"field\":\"name\",\"operator\":\"LIKE\",\"value\":\"John\"},{\"field\":\"age\",\"operator\":\">\",\"value\":\"30\"}]',\n//     })\n//     @IsOptional()\n//     @Transform(({ value }) => {\n//         return value ? plainToInstance(FilterQueryDto, JSON.parse(value)) : undefined;\n//     })\n//     @ValidateNested({ each: true })\n//     @Type(() => FilterQueryDto)\n//     filters?: FilterQueryDto[] | null;\n\n//     // @ApiPropertyOptional({\n//     //     description: ' Name or City:  ASC or DESC',\n//     //     example: 'name ASC',\n//     // })\n//     // @IsOptional()\n//     // @IsString()\n//     // @Validate(SortBy)\n//     // readonly sort?: string;\n//     // @ApiPropertyOptional({ type: [SortByDto], isArray: true })\n//     // @IsOptional()\n//     // @Transform(({ value }) => {\n//     //     return value ? plainToInstance(SortUserDto, JSON.parse(value)) : undefined;\n//     // })\n//     // @ValidateNested({ each: true })\n//     // @Type(() => SortUserDto)\n//     // sort?: SortUserDto[] | null;\n\n//     @ApiPropertyOptional({\n//         name: 'sort',\n//         required: false,\n//         type: String,\n//         description: 'Array of sort objects as a JSON string',\n//         example: '[{\"field\":\"name\",\"direction\":\"ASC\"},{\"field\":\"age\",\"direction\":\"DESC\"}]',\n//     })\n//     @IsOptional()\n//     @Transform(({ value }) => {\n//         return value ? plainToInstance(SortByDto, JSON.parse(value)) : undefined;\n//     })\n//     @ValidateNested({ each: true })\n//     @Type(() => SortByDto)\n//     sort?: SortByDto[] | null;\n// }\n\n// export class PaginatedResultDto {\n//     @ApiProperty()\n//     data: T[];\n\n//     @ApiProperty()\n//     total: number;\n\n//     @ApiProperty()\n//     page: number;\n\n//     @ApiProperty()\n//     limit: number;\n// }\n\n// // import { ApiProperty, ApiExtraModels } from '@nestjs/swagger';\n\n// // import { Type } from 'class-transformer';\n// // import { IsOptional, IsString, IsArray, ValidateNested, IsNumber } from 'class-validator';\n\n// // // export class FilterQueryDto {\n// // //     @ApiProperty({ example: 'name' })\n// // //     field: string;\n\n// // //     @ApiProperty({ example: 'LIKE' })\n// // //     operator: string;\n\n// // //     @ApiProperty({ example: '%John%' })\n// // //     value: string;\n// // // }\n// // export class FilterQueryDto {\n// //     @ApiProperty({ example: 'country_name' })\n// //     @IsString()\n// //     field: string;\n\n// //     @ApiProperty({ example: 'LIKE' })\n// //     @IsString()\n// //     operator: string;\n\n// //     @ApiProperty({ example: '%United%' })\n// //     @IsString()\n// //     value: string;\n// // }\n// // @ApiExtraModels(FilterQueryDto)\n// // export class PaginationQueryDto {\n// //     @ApiProperty({ example: 1, required: false })\n// //     @IsOptional()\n// //     @IsNumber()\n// //     @Type(() => Number)\n// //     page?: number = 1;\n\n// //     @ApiProperty({ example: 10, required: false })\n// //     @IsOptional()\n// //     @IsNumber()\n// //     @Type(() => Number)\n// //     limit?: number = 10;\n\n// //     // @ApiProperty({\n// //     //     type: [FilterQueryDto],\n// //     //     required: false,\n// //     //     isArray: true,\n// //     // })\n// //     // @Type(() => FilterQueryDto)\n// //     // filters?: FilterQueryDto[];\n// //     @ApiProperty({\n// //         type: FilterQueryDto,\n// //         required: false,\n// //         isArray: true,\n// //     })\n// //     // @IsOptional()\n// //     @IsArray()\n// //     @ValidateNested({ each: true })\n// //     @Type(() => FilterQueryDto)\n// //     filters?: FilterQueryDto[];\n\n// //     // @ApiProperty({\n// //     //     type: [Object],\n// //     //     // items: {\n// //     //     //     type: 'object',\n// //     //     //     items: {\n// //     //     //         type: 'object',\n// //     //     //     },\n// //     //     // },\n// //     // })\n// //     // coords: FilterQueryDto[];\n\n// //     // @ApiProperty({ type: String, required: false })\n// //     // @IsOptional()\n// //     // @IsArray()\n// //     // @ValidateNested({ each: true })\n// //     // @Type(() => FilterQueryDto)\n// //     // filters?: FilterQueryDto[];\n\n// //     @ApiProperty({ example: 'name ASC1', required: false })\n// //     sort?: string;\n// // }\n\n// // // export class PaginationQueryDto {\n// // //     @ApiProperty({ example: 1, required: false })\n// // //     page?: number = 1;\n\n// // //     @ApiProperty({ example: 10, required: false })\n// // //     limit?: number = 10;\n\n// // //     // @ApiProperty({ type: [FilterQueryDto], required: false, isArray: true })\n// // //     // filters?: FilterQueryDto[];\n\n// // //     // @ApiProperty({ type: String, required: false, isArray: true })\n// // //     // filters?: FilterQueryDto[];\n\n// // //     // @ApiProperty({ type: [FilterQueryDto], required: false, isArray: true })\n// // //     // @Type(() => FilterQueryDto)\n// // //     // filters?: FilterQueryDto[];\n\n// // //     @ApiProperty({ type: [FilterQueryDto], required: false })\n// // //     @IsOptional()\n// // //     @IsArray()\n// // //     @ValidateNested({ each: true })\n// // //     @Type(() => FilterQueryDto)\n// // //     filters?: FilterQueryDto[];\n\n// // //     @ApiProperty({ example: 'name ASC1', required: false })\n// // //     sort?: string;\n// // // }\n\n// // export class PaginatedResultDto {\n// //     @ApiProperty()\n// //     data: T[];\n\n// //     @ApiProperty()\n// //     total: number;\n\n// //     @ApiProperty()\n// //     page: number;\n\n// //     @ApiProperty()\n// //     limit: number;\n// // }\n\n// // export class abc {\n// //     @ApiProperty()\n// //     page: number;\n\n// //     @ApiProperty()\n// //     limit: number;\n// // }\n\n// // import { applyDecorators } from '@nestjs/common';\n// // import { ApiProperty, ApiExtraModels, ApiQuery, getSchemaPath } from '@nestjs/swagger';\n\n// // /**\n// //  * Combines Swagger Decorators to create a description for `filters[name]=something`\n// //  *  - has support for swagger\n// //  *  - automatic transformation with nestjs\n// //  */\n// // // // eslint-disable-next-line @typescript-eslint/ban-types,@typescript-eslint/explicit-module-boundary-types\n// // // export function ApiFilterQuery(fieldName: string, filterDto: Function) {\n// // //     return applyDecorators(\n// // //         ApiExtraModels(filterDto),\n// // //         ApiQuery({\n// // //             required: false,\n// // //             name: fieldName,\n// // //             style: 'deepObject',\n// // //             explode: true,\n// // //             type: 'object',\n// // //             schema: {\n// // //                 $ref: getSchemaPath(filterDto),\n// // //             },\n// // //         })\n// // //     );\n// // // }\n// // // eslint-disable-next-line @typescript-eslint/ban-types,@typescript-eslint/explicit-module-boundary-types\n// // export function ApiFilterQuery(fieldName: string, filterDto: Function, index: number) {\n// //     return applyDecorators(\n// //         ApiExtraModels(filterDto),\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}]`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //             schema: {\n// //                 $ref: getSchemaPath(filterDto),\n// //             },\n// //         })\n// //     );\n// // }\n\n// // export function ApiFilterQuery(fieldName: string, index: number) {\n// //     return applyDecorators(\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}].field`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //         }),\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}].operator`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //         }),\n// //         ApiQuery({\n// //             required: false,\n// //             name: `${fieldName}[${index}].value`,\n// //             style: 'deepObject',\n// //             explode: true,\n// //             type: 'object',\n// //         })\n// //     );\n// // }\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SortCountryDto.html":{"url":"classes/SortCountryDto.html","title":"class - SortCountryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SortCountryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/countries/dto/query-country.dto-remove.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                order\n                            \n                            \n                                orderBy\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/query-country.dto-remove.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Type(undefined)@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/query-country.dto-remove.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nimport { Transform, Type, plainToInstance } from 'class-transformer';\nimport { IsNumber, IsOptional, IsString, ValidateNested } from 'class-validator';\n\nimport { Country } from './country';\n\nexport class FilterCountryDto {}\n\nexport class SortCountryDto {\n    @ApiProperty()\n    @Type(() => String)\n    @IsString()\n    orderBy: keyof Country;\n\n    @ApiProperty()\n    @IsString()\n    order: string;\n}\n\nexport class QueryCountryDto {\n    @ApiPropertyOptional()\n    @Transform(({ value }) => (value ? Number(value) : 1))\n    @IsNumber()\n    @IsOptional()\n    page?: number;\n\n    @ApiPropertyOptional()\n    @Transform(({ value }) => (value ? Number(value) : 10))\n    @IsNumber()\n    @IsOptional()\n    limit?: number;\n\n    @ApiPropertyOptional({ type: String })\n    @IsOptional()\n    @Transform(({ value }) =>\n        value ? plainToInstance(FilterCountryDto, JSON.parse(value)) : undefined\n    )\n    @ValidateNested()\n    @Type(() => FilterCountryDto)\n    filters?: FilterCountryDto | null;\n\n    @ApiPropertyOptional({ type: String })\n    @IsOptional()\n    @Transform(({ value }) => {\n        return value ? plainToInstance(SortCountryDto, JSON.parse(value)) : undefined;\n    })\n    @ValidateNested({ each: true })\n    @Type(() => SortCountryDto)\n    sort?: SortCountryDto[] | null;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/State.html":{"url":"classes/State.html","title":"class - State","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  State\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/state_mas/dto/state.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the State class, which represents the data structure of a country\nentity used in the application. The State class is used to describe various details\nabout a State, including its identification, name, and other related attributes.\nThe State class serves as a Data Transfer Object (DTO) for representing State data.\nIt includes properties such as the State's ID, name, status Each property is annotated with @ApiResponseProperty\nto define its type and provide example values for API documentation purposes.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id_country\n                            \n                            \n                                id_state\n                            \n                            \n                                name\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id_country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'Country ID', example: '3a10e186-c759-4aec-9a86-2e5e0c2e5870'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/state_mas/dto/state.dto.ts:46\n                        \n                    \n\n            \n                \n                    Country ID to which the state belongs.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id_state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiResponseProperty({type: String, example: 'f2d90547-a09a-4baa-a9f4-244e44a80875'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/state_mas/dto/state.dto.ts:24\n                        \n                    \n\n            \n                \n                    The unique identifier for the state.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'State name', example: 'Gujarat'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/state_mas/dto/state.dto.ts:35\n                        \n                    \n\n            \n                \n                    State name.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: 'Status of the state', example: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/state_mas/dto/state.dto.ts:57\n                        \n                    \n\n            \n                \n                    Status of the state.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiResponseProperty } from '@nestjs/swagger';\n\n/**\n * @fileoverview\n * This file defines the `State` class, which represents the data structure of a country\n * entity used in the application. The `State` class is used to describe various details\n * about a State, including its identification, name, and other related attributes.\n *\n * @module\n * @description\n * The `State` class serves as a Data Transfer Object (DTO) for representing State data.\n * It includes properties such as the State's ID, name, status Each property is annotated with `@ApiResponseProperty`\n * to define its type and provide example values for API documentation purposes.\n */\nexport class State {\n    /**\n     * The unique identifier for the state.\n     * @example 'f2d90547-a09a-4baa-a9f4-244e44a80875'\n     */\n    @ApiResponseProperty({\n        type: String,\n        example: 'f2d90547-a09a-4baa-a9f4-244e44a80875',\n    })\n    id_state: string;\n\n    /**\n     * State name.\n     * @example 'Gujarat'\n     */\n    @ApiProperty({\n        type: String,\n        description: 'State name',\n        example: 'Gujarat',\n    })\n    name: string;\n\n    /**\n     * Country ID to which the state belongs.\n     * @example '3a10e186-c759-4aec-9a86-2e5e0c2e5870'\n     */\n    @ApiProperty({\n        type: String,\n        description: 'Country ID',\n        example: '3a10e186-c759-4aec-9a86-2e5e0c2e5870',\n    })\n    id_country: string;\n\n    /**\n     * Status of the state.\n     * @example 1\n     */\n    @ApiProperty({\n        type: Number,\n        description: 'Status of the state',\n        example: 1,\n    })\n    status: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/StateController.html":{"url":"controllers/StateController.html","title":"controller - StateController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  StateController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/state_mas/state.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                states\n            \n\n\n            \n                Description\n            \n            \n                This file defines the StateController, which handles HTTP requests related to state.\nIt provides endpoints to create, update, retrieve, and delete state records.\nThe StateController is responsible for exposing endpoints that interact with the StateService.\nIt uses various HTTP methods to manage state data and handles responses with appropriate HTTP status codes.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createDto: StateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(HttpStatus.CREATED)@ApiCreatedResponse({type: State, description: 'Create state'})\n                \n            \n\n            \n                \n                    Defined in src/modules/master/state_mas/state.controller.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createDto\n                                    \n                                                StateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe data required to create a new state.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The created state object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id_state')@HttpCode(HttpStatus.OK)@ApiParam({name: 'id_state', type: String})@ApiOkResponse({status: undefined, description: 'State has been successfully deleted.'})\n                \n            \n\n            \n                \n                    Defined in src/modules/master/state_mas/state.controller.ts:120\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe ID of the state to delete.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        An object indicating the deletion result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(query: PaginationQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/modules/master/state_mas/state.controller.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                PaginationQueryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe pagination and filtering parameters.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        A paginated list of states.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id_state')@HttpCode(HttpStatus.OK)@ApiParam({name: 'id_state', type: String})@ApiOkResponse({type: State, description: 'Get State by ID'})\n                \n            \n\n            \n                \n                    Defined in src/modules/master/state_mas/state.controller.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe ID of the state to retrieve.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The state object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateDto: UpdateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id_state')@HttpCode(HttpStatus.OK)@ApiParam({name: 'id_state', type: String})@ApiOkResponse({type: State, description: 'Update State'})\n                \n            \n\n            \n                \n                    Defined in src/modules/master/state_mas/state.controller.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe ID of the state to be updated.\n\n\n                                    \n                                \n                                \n                                    updateDto\n                                    \n                                                UpdateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe data to update the state with.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The updated state object or null if not found.\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    HttpCode,\n    HttpStatus,\n    Param,\n    ParseUUIDPipe,\n    Patch,\n    Post,\n    Query,\n} from '@nestjs/common';\nimport { ApiTags, ApiOkResponse, ApiCreatedResponse, ApiParam } from '@nestjs/swagger';\n\nimport { PaginationResponse, PaginationResponseDto } from '@utils/dto/pagination-response.dto';\nimport { PaginationQueryDto } from '@utils/dto/pagination.dto';\n\nimport { StateDto } from './dto/create.dto';\nimport { State } from './dto/state.dto';\nimport { UpdateDto } from './dto/update.dto';\nimport { StateService } from './state.service';\n\n/**\n * @fileoverview\n * This file defines the `StateController`, which handles HTTP requests related to state.\n * It provides endpoints to create, update, retrieve, and delete state records.\n *\n * @module\n * @description\n * The `StateController` is responsible for exposing endpoints that interact with the `StateService`.\n * It uses various HTTP methods to manage state data and handles responses with appropriate HTTP status codes.\n */\n\n@ApiTags('States')\n@Controller('states')\nexport class StateController {\n    constructor(private readonly stateService: StateService) {}\n\n    /**\n     * @route POST /states\n     * @description Create a new state.\n     * @param {StateDto} createDto - The data required to create a new state.\n     * @returns {Promise} The created state object.\n     */\n    @Post()\n    @HttpCode(HttpStatus.CREATED)\n    @ApiCreatedResponse({\n        type: State,\n        description: 'Create state',\n    })\n    async create(@Body() createDto: StateDto): Promise {\n        return this.stateService.create(createDto);\n    }\n\n    /**\n     * @route PATCH /states/:id_state\n     * @description Update an existing state by its ID.\n     * @param {string} id - The ID of the state to be updated.\n     * @param {UpdateDto} updateDto - The data to update the state with.\n     * @returns {Promise} The updated state object or null if not found.\n     */\n    @Patch(':id_state')\n    @HttpCode(HttpStatus.OK)\n    @ApiParam({ name: 'id_state', type: String })\n    @ApiOkResponse({\n        type: State,\n        description: 'Update State',\n    })\n    async update(\n        @Param('id_state', ParseUUIDPipe) id: string,\n        @Body() updateDto: UpdateDto\n    ): Promise {\n        return this.stateService.update(id, updateDto);\n    }\n\n    /**\n     * @route GET /states\n     * @description Retrieve a list of states with pagination.\n     * @param {PaginationQueryDto} query - The pagination and filtering parameters.\n     * @returns {Promise>} A paginated list of states.\n     */\n    @Get()\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ type: PaginationResponse(State) })\n    async findAll(@Query() query: PaginationQueryDto): Promise> {\n        return this.stateService.findAll(query);\n    }\n\n    /**\n     * @route GET /states/:id_state\n     * @description Retrieve a single state by its ID.\n     * @param {string} id - The ID of the state to retrieve.\n     * @returns {Promise} The state object.\n     */\n    @Get(':id_state')\n    @HttpCode(HttpStatus.OK)\n    @ApiParam({ name: 'id_state', type: String })\n    @ApiOkResponse({\n        type: State,\n        description: 'Get State by ID',\n    })\n    async findOne(@Param('id_state', ParseUUIDPipe) id: string): Promise {\n        return this.stateService.findOne(id);\n    }\n\n    /**\n     * @route DELETE /states/:id_state\n     * @description Delete a state by its ID.\n     * @param {string} id - The ID of the state to delete.\n     * @returns {Promise} An object indicating the deletion result.\n     */\n    @Delete(':id_state')\n    @HttpCode(HttpStatus.OK)\n    @ApiParam({ name: 'id_state', type: String })\n    @ApiOkResponse({\n        status: HttpStatus.OK,\n        description: 'State has been successfully deleted.',\n    })\n    async delete(@Param('id_state', ParseUUIDPipe) id: string): Promise {\n        return this.stateService.delete(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StateDto.html":{"url":"classes/StateDto.html","title":"class - StateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/state_mas/dto/create.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the StateDto class, which represents the data transfer object (DTO)\nused for creating a new State record. It includes validation rules and transformation logic\nfor the properties of the State.\nThe StateDto class ensures that the data provided for creating a State adheres to\nspecified validation rules and formats. It uses decorators from class-validator for validation\nand class-transformer for transforming input data.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id_country\n                            \n                            \n                                    Optional\n                                id_state\n                            \n                            \n                                name\n                            \n                            \n                                    Optional\n                                status\n                            \n                            \n                                    Optional\n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id_country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@ApiProperty({type: String, description: 'Country ID', example: 'f2d90547-a09a-4baa-a9f4-244e44a80875'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/state_mas/dto/create.dto.ts:48\n                        \n                    \n\n            \n                \n                    Country ID to which the state belongs.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id_state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude({toPlainOnly: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/state_mas/dto/create.dto.ts:69\n                        \n                    \n\n            \n                \n                    The unique identifier for the state.\nThis property is excluded from the plain representation of the object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@MaxLength(100)@ApiProperty({type: String, description: 'State name', example: 'Gujarat', maxLength: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/state_mas/dto/create.dto.ts:34\n                        \n                    \n\n            \n                \n                    State name.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNumber()@ApiProperty({type: Number, description: 'Status of the state', example: 1, default: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/state_mas/dto/create.dto.ts:62\n                        \n                    \n\n            \n                \n                    Status of the state.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude({toPlainOnly: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/master/state_mas/dto/create.dto.ts:72\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nimport { Exclude } from 'class-transformer';\nimport { IsDefined, IsNotEmpty, IsString, MaxLength, IsOptional, IsNumber } from 'class-validator';\n\n/**\n * @fileoverview\n * This file defines the `StateDto` class, which represents the data transfer object (DTO)\n * used for creating a new State record. It includes validation rules and transformation logic\n * for the properties of the State.\n *\n * @module\n * @description\n * The `StateDto` class ensures that the data provided for creating a State adheres to\n * specified validation rules and formats. It uses decorators from `class-validator` for validation\n * and `class-transformer` for transforming input data.\n */\n\nexport class StateDto {\n    /**\n     * State name.\n     * @example 'Gujarat'\n     */\n    @IsDefined()\n    @IsNotEmpty()\n    @IsString()\n    @MaxLength(100)\n    @ApiProperty({\n        type: String,\n        description: 'State name',\n        example: 'Gujarat',\n        maxLength: 100,\n    })\n    name: string;\n\n    /**\n     * Country ID to which the state belongs.\n     * @example 'f2d90547-a09a-4baa-a9f4-244e44a80875'\n     */\n    @IsDefined()\n    @IsNotEmpty()\n    @IsString()\n    @ApiProperty({\n        type: String,\n        description: 'Country ID',\n        example: 'f2d90547-a09a-4baa-a9f4-244e44a80875',\n    })\n    id_country: string;\n\n    /**\n     * Status of the state.\n     * @example 1\n     */\n    @IsOptional()\n    @IsNumber()\n    @ApiProperty({\n        type: Number,\n        description: 'Status of the state',\n        example: 1,\n        default: 1,\n    })\n    status?: number;\n\n    /**\n     * The unique identifier for the state.\n     * This property is excluded from the plain representation of the object.\n     */\n    @Exclude({ toPlainOnly: true })\n    id_state?: string;\n\n    @Exclude({ toPlainOnly: true })\n    updated_at?: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StateModule.html":{"url":"modules/StateModule.html","title":"module - StateModule","body":"\n                   \n\n\n\n\n    Modules\n    StateModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_StateModule\n\n\n\ncluster_StateModule_providers\n\n\n\ncluster_StateModule_exports\n\n\n\n\nStateService \n\nStateService \n\n\n\nStateModule\n\nStateModule\n\nStateService  -->\n\nStateModule->StateService \n\n\n\n\n\nStateService\n\nStateService\n\nStateModule -->\n\nStateService->StateModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/master/state_mas/state.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            This file defines the StateModule, which bundles the StateController and StateService together.\nThe StateModule is responsible for handling state-related operations. It provides the necessary controllers and services to manage state.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StateService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            StateController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StateService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { Query } from './query';\nimport { StateController } from './state.controller';\nimport { StateService } from './state.service';\n\n/**\n * @fileoverview\n * This file defines the `StateModule`, which bundles the `StateController` and `StateService` together.\n *\n * @module\n * @description\n * The `StateModule` is responsible for handling state-related operations. It provides the necessary controllers and services to manage state.\n */\n@Module({\n    controllers: [StateController],\n    providers: [StateService, Query],\n    exports: [StateService],\n})\nexport class StateModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StateService.html":{"url":"injectables/StateService.html","title":"injectable - StateService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  StateService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/state_mas/state.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the StateService class, which provides methods to manage State data.\nIt includes operations for creating, updating, retrieving, and deleting State.\nThe StateService class is responsible for handling business logic related to State.\nIt interacts with the database through the PrismaService and performs various operations using raw SQL queries.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                MODULE\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(paginationService: PaginationService, prisma: PrismaService, query: Query, utilsService: UtilsService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/master/state_mas/state.service.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        paginationService\n                                                  \n                                                        \n                                                                        PaginationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        query\n                                                  \n                                                        \n                                                                        Query\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        utilsService\n                                                  \n                                                        \n                                                                        UtilsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createDto: StateDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/state_mas/state.service.ts:44\n                \n            \n\n\n            \n                \n                    Creates a new state.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createDto\n                                    \n                                                StateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe data required to create a new state.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The created state object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/state_mas/state.service.ts:146\n                \n            \n\n\n            \n                \n                    Deletes a state by its ID.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe ID of the state to delete.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        An object indicating the deletion result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(paginationQuery: PaginationQueryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/state_mas/state.service.ts:102\n                \n            \n\n\n            \n                \n                    Retrieves a list of states with pagination.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    paginationQuery\n                                    \n                                                PaginationQueryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        A paginated list of states.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/state_mas/state.service.ts:132\n                \n            \n\n\n            \n                \n                    Retrieves a single state by its ID.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe ID of the state to retrieve.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The state object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateDto: UpdateDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/master/state_mas/state.service.ts:71\n                \n            \n\n\n            \n                \n                    Updates an existing state by its ID.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe ID of the state to be updated.\n\n\n                                    \n                                \n                                \n                                    updateDto\n                                    \n                                                UpdateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe data to update the state with.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The updated state object or null if not found.\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        MODULE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/master/state_mas/state.service.ts:27\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, HttpException, HttpStatus } from '@nestjs/common';\n\nimport { PaginationService } from '@app/common/helper/services/pagination.service';\nimport { UtilsService } from '@app/common/helper/services/util.service';\nimport { IPaginationFieldConfig } from '@app/utils/types/pagination-options';\nimport { PrismaService } from '@services/prisma.service';\nimport { PaginationResponseDto } from '@utils/dto/pagination-response.dto';\nimport { PaginationQueryDto } from '@utils/dto/pagination.dto';\n\nimport { StateDto } from './dto/create.dto';\nimport { State } from './dto/state.dto';\nimport { UpdateDto } from './dto/update.dto';\nimport { Query } from './query';\n\n/**\n * @fileoverview\n * This file defines the `StateService` class, which provides methods to manage State data.\n * It includes operations for creating, updating, retrieving, and deleting State.\n *\n * @module\n * @description\n * The `StateService` class is responsible for handling business logic related to State.\n * It interacts with the database through the `PrismaService` and performs various operations using raw SQL queries.\n */\n@Injectable()\nexport class StateService {\n    private readonly MODULE: string;\n\n    constructor(\n        private readonly paginationService: PaginationService,\n        private readonly prisma: PrismaService,\n        private readonly query: Query,\n        private readonly utilsService: UtilsService\n    ) {\n        this.MODULE = 'state';\n    }\n\n    /**\n     * Creates a new state.\n     * @param {StateDto} createDto - The data required to create a new state.\n     * @returns {Promise} The created state object.\n     * @throws {HttpException} If a state with the same name already exists or if an error occurs.\n     */\n    async create(createDto: StateDto): Promise {\n        const find = await this.prisma.executeRawQuery(this.query.findByName(), createDto);\n\n        if (find) {\n            throw new HttpException({ message: 'NAME ALREADY EXISTS' }, HttpStatus.CONFLICT);\n        }\n\n        const inserted = await this.prisma.executeRawQuery(this.query.insert(), createDto);\n\n        if (inserted && inserted.insertid) {\n            const get = await this.findOne(inserted.insertid);\n            return get as any;\n        } else {\n            throw new HttpException(\n                { message: 'Something went wrong' },\n                HttpStatus.INTERNAL_SERVER_ERROR\n            );\n        }\n    }\n\n    /**\n     * Updates an existing state by its ID.\n     * @param {string} id - The ID of the state to be updated.\n     * @param {UpdateDto} updateDto - The data to update the state with.\n     * @returns {Promise} The updated state object or null if not found.\n     * @throws {HttpException} If the state is not found or if an error occurs.\n     */\n    async update(id: string, updateDto: UpdateDto): Promise {\n        if (Object.keys(updateDto).length === 0) {\n            throw new HttpException({ message: 'Nothing to update!' }, HttpStatus.BAD_REQUEST);\n        }\n        // check country exits or not\n        const recordExits = await this.findOne(id);\n        if (recordExits) {\n            updateDto.id_state = id;\n            updateDto.updated_at = new Date().toISOString();\n            // update\n            const updated = await this.prisma.executeRawQuery(this.query.update(), updateDto);\n\n            if (updated && updated[0].updatedid) {\n                const get = await this.findOne(updated[0].updatedid);\n                return get as any;\n            } else {\n                throw new HttpException(\n                    { message: 'Something went wrong' },\n                    HttpStatus.INTERNAL_SERVER_ERROR\n                );\n            }\n        } else {\n            throw new HttpException({ message: 'record not exits' }, HttpStatus.NOT_FOUND);\n        }\n    }\n\n    /**\n     * Retrieves a list of states with pagination.\n     * @param {PaginationQueryDto} query - The pagination and filtering parameters.\n     * @returns {Promise>} A paginated list of states.\n     */\n    async findAll(paginationQuery: PaginationQueryDto): Promise> {\n        const baseQuery = ['ptbl.id_state', 'ptbl.name', 'ptbl.id_country', 'ptbl.status'];\n        const fromQuery = ` FROM state_mas as ptbl`;\n\n        const fieldConfigs: Record = {\n            id_country: {\n                joinTable: (alias: string) =>\n                    `JOIN country_mas ${alias} ON ${alias}.id_country = ptbl.id_country`,\n                alias: () => `c${0}`,\n                selectFields: (alias: string) => [`${alias}.name as country_name`],\n            },\n        };\n\n        const { selectQuery, countQuery } = this.utilsService.buildDynamicQuery(\n            paginationQuery,\n            fieldConfigs,\n            baseQuery,\n            fromQuery,\n            'ptbl.id_state'\n        );\n\n        return this.paginationService.paginate(selectQuery, countQuery, paginationQuery);\n    }\n\n    /**\n     * Retrieves a single state by its ID.\n     * @param {string} id - The ID of the state to retrieve.\n     * @returns {Promise} The state object.\n     * @throws {HttpException} If the state is not found.\n     */\n    async findOne(id: string): Promise {\n        const result = await this.prisma.executeRawQuery(this.query.findById(), { id });\n        if (!result) {\n            throw new HttpException({ message: 'State not found' }, HttpStatus.NOT_FOUND);\n        }\n        return result as any;\n    }\n\n    /**\n     * Deletes a state by its ID.\n     * @param {string} id - The ID of the state to delete.\n     * @returns {Promise} An object indicating the deletion result.\n     * @throws {HttpException} If an error occurs during deletion.\n     */\n    async delete(id: string): Promise {\n        const deleted = await this.prisma.executeRawQuery(this.query.delete(), id);\n\n        if (deleted && deleted[0].deletedid) {\n            return deleted;\n        } else {\n            throw new HttpException(\n                { message: 'Something went wrong' },\n                HttpStatus.INTERNAL_SERVER_ERROR\n            );\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateDto.html":{"url":"classes/UpdateDto.html","title":"class - UpdateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/countries/dto/update.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\n\nimport { CreateCountryDto } from './create.dto';\n\nexport class UpdateDto extends PartialType(CreateCountryDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateDto-1.html":{"url":"classes/UpdateDto-1.html","title":"class - UpdateDto-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/currencies/dto/update.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the UpdateDto class, which represents the Data Transfer Object (DTO)\nused for updating an existing currency entity. It extends from the CreateDto class,\nmaking all fields optional for the update operation.\nThe UpdateDto class is used to define the structure of the data required to update\nan existing currency entity. It inherits all properties from the CreateDto class but\nmakes them optional, allowing partial updates.\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\n\nimport { CreateDto } from './create.dto';\n\n/**\n * @fileoverview\n * This file defines the `UpdateDto` class, which represents the Data Transfer Object (DTO)\n * used for updating an existing currency entity. It extends from the `CreateDto` class,\n * making all fields optional for the update operation.\n *\n * @module\n * @description\n * The `UpdateDto` class is used to define the structure of the data required to update\n * an existing currency entity. It inherits all properties from the `CreateDto` class but\n * makes them optional, allowing partial updates.\n */\n\nexport class UpdateDto extends PartialType(CreateDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateDto-2.html":{"url":"classes/UpdateDto-2.html","title":"class - UpdateDto-2","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/city_mas/dto/update.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the UpdateDto class, which represents the Data Transfer Object (DTO)\nused for updating an existing city entity. It extends from the CityDto class,\nmaking all fields optional for the update operation.\nThe UpdateDto class is used to define the structure of the data required to update\nan existing city entity. It inherits all properties from the CityDto class but\nmakes them optional, allowing partial updates.\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\n\nimport { CityDto } from './create.dto';\n\n/**\n * @fileoverview\n * This file defines the `UpdateDto` class, which represents the Data Transfer Object (DTO)\n * used for updating an existing city entity. It extends from the `CityDto` class,\n * making all fields optional for the update operation.\n *\n * @module\n * @description\n * The `UpdateDto` class is used to define the structure of the data required to update\n * an existing city entity. It inherits all properties from the `CityDto` class but\n * makes them optional, allowing partial updates.\n */\n\nexport class UpdateDto extends PartialType(CityDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateDto-3.html":{"url":"classes/UpdateDto-3.html","title":"class - UpdateDto-3","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/country_mas/dto/update.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the UpdateDto class, which represents the Data Transfer Object (DTO)\nused for updating an existing Country entity. It extends from the CreateDto class,\nmaking all fields optional for the update operation.\nThe UpdateDto class is used to define the structure of the data required to update\nan existing Country entity. It inherits all properties from the CreateDto class but\nmakes them optional, allowing partial updates.\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\n\nimport { CountryDto } from './create.dto';\n\n/**\n * @fileoverview\n * This file defines the `UpdateDto` class, which represents the Data Transfer Object (DTO)\n * used for updating an existing Country entity. It extends from the `CreateDto` class,\n * making all fields optional for the update operation.\n *\n * @module\n * @description\n * The `UpdateDto` class is used to define the structure of the data required to update\n * an existing Country entity. It inherits all properties from the `CreateDto` class but\n * makes them optional, allowing partial updates.\n */\n\nexport class UpdateDto extends PartialType(CountryDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateDto-4.html":{"url":"classes/UpdateDto-4.html","title":"class - UpdateDto-4","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/documents/dto/update.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the UpdateDto class, which represents the Data Transfer Object (DTO)\nused for updating an existing Document entity. It extends from the DocumentDto class,\nmaking all fields optional for the update operation.\nThe UpdateDto class is used to define the structure of the data required to update\nan existing Document entity. It inherits all properties from the DocumentDto class but\nmakes them optional, allowing partial updates.\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\n\nimport { DocumentDto } from './create.dto';\n\n/**\n * @fileoverview\n * This file defines the `UpdateDto` class, which represents the Data Transfer Object (DTO)\n * used for updating an existing Document entity. It extends from the `DocumentDto` class,\n * making all fields optional for the update operation.\n *\n * @module\n * @description\n * The `UpdateDto` class is used to define the structure of the data required to update\n * an existing Document entity. It inherits all properties from the `DocumentDto` class but\n * makes them optional, allowing partial updates.\n */\nexport class UpdateDto extends PartialType(DocumentDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateDto-5.html":{"url":"classes/UpdateDto-5.html","title":"class - UpdateDto-5","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/document_groups/dto/update.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the UpdateDto class, which represents the Data Transfer Object (DTO)\nused for updating an existing DocumentGroup entity. It extends from the DocumentGroupDto class,\nmaking all fields optional for the update operation.\nThe UpdateDto class is used to define the structure of the data required to update\nan existing DocumentGroup entity. It inherits all properties from the DocumentGroupDto class but\nmakes them optional, allowing partial updates.\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\n\nimport { DocumentGroupDto } from './create.dto';\n\n/**\n * @fileoverview\n * This file defines the `UpdateDto` class, which represents the Data Transfer Object (DTO)\n * used for updating an existing DocumentGroup entity. It extends from the `DocumentGroupDto` class,\n * making all fields optional for the update operation.\n *\n * @module\n * @description\n * The `UpdateDto` class is used to define the structure of the data required to update\n * an existing DocumentGroup entity. It inherits all properties from the `DocumentGroupDto` class but\n * makes them optional, allowing partial updates.\n */\nexport class UpdateDto extends PartialType(DocumentGroupDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateDto-6.html":{"url":"classes/UpdateDto-6.html","title":"class - UpdateDto-6","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/master/state_mas/dto/update.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This file defines the UpdateDto class, which represents the Data Transfer Object (DTO)\nused for updating an existing State entity. It extends from the StateDto class,\nmaking all fields optional for the update operation.\nThe UpdateDto class is used to define the structure of the data required to update\nan existing State entity. It inherits all properties from the StateDto class but\nmakes them optional, allowing partial updates.\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\n\nimport { StateDto } from './create.dto';\n\n/**\n * @fileoverview\n * This file defines the `UpdateDto` class, which represents the Data Transfer Object (DTO)\n * used for updating an existing State entity. It extends from the `StateDto` class,\n * making all fields optional for the update operation.\n *\n * @module\n * @description\n * The `UpdateDto` class is used to define the structure of the data required to update\n * an existing State entity. It inherits all properties from the `StateDto` class but\n * makes them optional, allowing partial updates.\n */\n\nexport class UpdateDto extends PartialType(StateDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserNotFoundException.html":{"url":"classes/UserNotFoundException.html","title":"class - UserNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/exceptions/user-not-found.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Custom exception for user not found errors.\nIt extends the NotFoundException provided by NestJS.\nthrow new UserNotFoundException();\nthrow new UserNotFoundException('Specific error message');\n            \n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(error?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/exceptions/user-not-found.exception.ts:20\n                            \n                        \n\n                \n                    \n                            Creates an instance of UserNotFoundException.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                \nOptional error message.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        'use strict';\n\nimport { NotFoundException } from '@nestjs/common';\n\n/**\n * Custom exception for user not found errors.\n *\n * @extends {NotFoundException}\n *\n * @description This exception is thrown when a requested user is not found in the system.\n * It extends the `NotFoundException` provided by NestJS.\n *\n * @example\n * ```typescript\n * throw new UserNotFoundException();\n * throw new UserNotFoundException('Specific error message');\n * ```\n */\n\nexport class UserNotFoundException extends NotFoundException {\n    /**\n     * Creates an instance of UserNotFoundException.\n     *\n     * @param {string} [error] - Optional error message.\n     */\n\n    constructor(error?: string) {\n        super('error.user_not_found', error);\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UtilsService.html":{"url":"classes/UtilsService.html","title":"class - UtilsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UtilsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/helper/services/util.service.ts\n        \n\n\n            \n                Description\n            \n            \n                UtilsService\nUtilsService provides utility methods for building dynamic SQL queries, including pagination, filtering, sorting, and query construction.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                buildDynamicQuery\n                            \n                            \n                                    Public\n                                formatValue\n                            \n                            \n                                    Public\n                                queryStatements\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        buildDynamicQuery\n                        \n                    \n                \n            \n            \n                \n                    \n                    buildDynamicQuery(paginationQuery: PaginationQueryDto, fieldConfigs: Record, baseFields: string[], fromQuery: string, countByField: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/helper/services/util.service.ts:29\n                \n            \n\n\n            \n                \n                    Builds dynamic SQL queries based on pagination, filtering, sorting, and field configuration.\nselectQuery: string;\ncountQuery: string;}} - An object containing the dynamically built SELECT and COUNT queries.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    paginationQuery\n                                    \n                                                PaginationQueryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        \nThe pagination query parameters including filters and sorting options.\n\n\n                                    \n                                \n                                \n                                    fieldConfigs\n                                    \n                                                Record\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        \nConfiguration for each field including alias, join table, and select fields.\n\n\n                                    \n                                \n                                \n                                    baseFields\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        \nThe base fields to include in the SELECT clause.\n\n\n                                    \n                                \n                                \n                                    fromQuery\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        \nThe base FROM clause for the query.\n\n\n                                    \n                                \n                                \n                                    countByField\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        '*'\n                                    \n\n                                    \n                                        \nThe field to use for counting records in the count query.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type\n\n                    \n                    \n                        selectQuery: string;\ncountQuery: string;\n}} - An object containing the dynamically built SELECT and COUNT queries.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        formatValue\n                        \n                    \n                \n            \n            \n                \n                    \n                    formatValue(value: any)\n                \n            \n\n\n            \n                \n                    Defined in src/common/helper/services/util.service.ts:157\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        queryStatements\n                        \n                    \n                \n            \n            \n                \n                    \n                    queryStatements(baseFields: string[], selectFields: string | string[], fromQuery: string, joinTables: string[], filterQuery: string, sortByQuery: string, countByField: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/helper/services/util.service.ts:139\n                \n            \n\n\n            \n                \n                    Constructs SELECT and COUNT SQL queries based on the provided parameters.\nselectQuery: string;\ncountQuery: string;}} - An object containing the constructed SELECT and COUNT queries.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    baseFields\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        \nThe base fields to include in the SELECT clause.\n\n\n                                    \n                                \n                                \n                                    selectFields\n                                    \n                                            string | string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        \nAdditional fields to include in the SELECT clause.\n\n\n                                    \n                                \n                                \n                                    fromQuery\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        \nThe base FROM clause for the query.\n\n\n                                    \n                                \n                                \n                                    joinTables\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        \nJOIN clauses to include in the query.\n\n\n                                    \n                                \n                                \n                                    filterQuery\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        \nThe WHERE clause for filtering.\n\n\n                                    \n                                \n                                \n                                    sortByQuery\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        \nThe ORDER BY clause for sorting.\n\n\n                                    \n                                \n                                \n                                    countByField\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        '*'\n                                    \n\n                                    \n                                        \nThe field to use for counting records in the count query.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type\n\n                    \n                    \n                        selectQuery: string;\ncountQuery: string;\n}} - An object containing the constructed SELECT and COUNT queries.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PaginationQueryDto } from '@utils/dto/pagination.dto';\nimport { IPaginationFieldConfig } from '@utils/types/pagination-options';\n\n/**\n * UtilsService\n *\n * @description\n * `UtilsService` provides utility methods for building dynamic SQL queries, including pagination, filtering, sorting, and query construction.\n *\n * @export\n * @class UtilsService\n */\nexport class UtilsService {\n    /**\n     * Builds dynamic SQL queries based on pagination, filtering, sorting, and field configuration.\n     *\n     * @param {PaginationQueryDto} paginationQuery - The pagination query parameters including filters and sorting options.\n     * @param {Record} fieldConfigs - Configuration for each field including alias, join table, and select fields.\n     * @param {string[]} baseFields - The base fields to include in the SELECT clause.\n     * @param {string} fromQuery - The base FROM clause for the query.\n     * @param {string} [countByField='*'] - The field to use for counting records in the count query.\n     *\n     * @returns {{\n     *     selectQuery: string;\n     *     countQuery: string;\n     * }} - An object containing the dynamically built SELECT and COUNT queries.\n     */\n\n    public buildDynamicQuery(\n        paginationQuery: PaginationQueryDto,\n        fieldConfigs: Record,\n        baseFields: string[],\n        fromQuery: string,\n        countByField: string = '*'\n    ): {\n        selectQuery: string;\n        countQuery: string;\n    } {\n        let filterQuery = '';\n        let sortByQuery = '';\n        const filterValues: any[] = [];\n        const joinTables: string[] = [];\n        const selectFields: string[] = [];\n\n        const filters = paginationQuery.filters;\n        const sort = paginationQuery.sort;\n\n        const mySet = new Set();\n\n        if (filters && filters.length > 0) {\n            const filterConditions = filters\n                .map(\n                    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                    (filter: { field: string; operator: string; value: string }, index: number) => {\n                        const field = filter.field.toLowerCase();\n                        let alias = `ptbl`; // default alias for the main table\n                        if (fieldConfigs && fieldConfigs[field]) {\n                            const config = fieldConfigs[field];\n                            alias = config.alias();\n\n                            if (!mySet.has(alias)) {\n                                mySet.add(alias);\n                                // joinTables.push(config.joinTable(index));\n                                joinTables.push(config.joinTable(alias));\n                            }\n                            selectFields.push(...config.selectFields(alias));\n                        }\n                        const operator = filter.operator.toUpperCase();\n                        if (operator === 'IN') {\n                            const values = filter.value.split(',').map((val) => `'${val.trim()}'`);\n                            return `${alias}.${filter.field} IN (${values.join(', ')})`;\n                        }\n                        if (operator === 'LIKE') {\n                            return `${alias}.${filter.field} ${filter.operator} '%${filter.value}%'`;\n                        }\n                        // Add the value to the filterValues array for parameterized query\n                        filterValues.push(filter.value);\n\n                        // return `${alias}.${filter.field} ${filter.operator} ?`;\n                        return `${alias}.${filter.field} ${filter.operator} '${filter.value}'`;\n                    }\n                )\n                .join(' AND ');\n\n            filterQuery = `WHERE ${filterConditions}`;\n        }\n\n        if (sort && sort.length > 0) {\n            sortByQuery = `ORDER BY `;\n            sortByQuery += sort\n                .map((sortItem: { field: string; direction: any }) => {\n                    const field = sortItem.field.toLowerCase();\n                    let alias = `ptbl`; // default alias for the main table\n\n                    if (fieldConfigs && fieldConfigs[field]) {\n                        const config = fieldConfigs[field];\n                        alias = config.alias(); // Use index 0 since sorting doesn't require multiple aliases\n                    }\n\n                    return `${alias}.${sortItem.field} ${sortItem.direction}`;\n                })\n                .join(', ');\n        }\n\n        const selectedFields = selectFields.length > 0 ? `${', '}${selectFields.join(', ')}` : [];\n\n        // return { filterQuery, filterValues, joinTables, selectFields: selectedFields, sortByQuery };\n\n        const { selectQuery, countQuery } = this.queryStatements(\n            baseFields,\n            selectedFields,\n            fromQuery,\n            joinTables,\n            filterQuery,\n            sortByQuery,\n            countByField\n        );\n\n        return { selectQuery, countQuery };\n    }\n\n    /**\n     * Constructs SELECT and COUNT SQL queries based on the provided parameters.\n     *\n     * @param {string[]} baseFields - The base fields to include in the SELECT clause.\n     * @param {string | string[]} selectFields - Additional fields to include in the SELECT clause.\n     * @param {string} fromQuery - The base FROM clause for the query.\n     * @param {string[]} joinTables - JOIN clauses to include in the query.\n     * @param {string} filterQuery - The WHERE clause for filtering.\n     * @param {string} sortByQuery - The ORDER BY clause for sorting.\n     * @param {string} [countByField='*'] - The field to use for counting records in the count query.\n     *\n     * @returns {{\n     *     selectQuery: string;\n     *     countQuery: string;\n     * }} - An object containing the constructed SELECT and COUNT queries.\n     */\n\n    public queryStatements(\n        baseFields: string[],\n        selectFields: string | string[],\n        fromQuery: string,\n        joinTables: string[],\n        filterQuery: string,\n        sortByQuery: string,\n        countByField: string = '*'\n    ): {\n        selectQuery: string;\n        countQuery: string;\n    } {\n        const selectQuery = `SELECT ${baseFields.join(', ')} ${selectFields} ${fromQuery} ${joinTables.join(' ')} ${filterQuery} ${sortByQuery}`;\n        const countQuery = `SELECT count(${countByField}) ${fromQuery} ${joinTables.join(' ')} ${filterQuery}`;\n\n        return { selectQuery, countQuery };\n    }\n\n    public formatValue(value: any): string {\n        if (Array.isArray(value)) {\n            const formattedArray = value.map((v) => `${v.replace(/'/g, \"''\")}`).join(', ');\n            return `'{${formattedArray}}'`;\n        } else if (typeof value === 'string') {\n            return `'${value.replace(/'/g, \"''\")}'`;\n        } else if (value === null || value === undefined) {\n            return 'NULL';\n        } else {\n            return `${value}`; // For numbers and other types\n        }\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChangelog\n[1.0.1] - 2024-07-01\nBug Fixes\n\nconfig: Fixed issue with configuration\ndeps: Updated dependencies\n\n[1.0.0] - 2024-06-25\nFeatures\n\nstart: Initial release\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"contributing.html":{"url":"contributing.html","title":"getting-started - contributing","body":"\n                   \n\n2. CONTRIBUTING.md\nGuidelines for contributing to your project.\nExample:\n# Contributing to Project Name\n\nWe welcome contributions from the community. Please follow these guidelines to ensure a smooth process for everyone.\n\n## How to Contribute\n\n### Reporting Bugs\nIf you find a bug, please open an issue on GitHub and include as much information as possible.\n\n### Suggesting Features\nWe welcome feature requests! Please open an issue on GitHub and describe the feature in detail.\n\n### Code Contributions\n1. Fork the repository.\n2. Create a new branch (`git checkout -b feature-name`).\n3. Make your changes.\n4. Commit your changes (`git commit -m 'Add feature'`).\n5. Push to the branch (`git push origin feature-name`).\n6. Open a pull request on GitHub.\n\n## Code Style\nPlease adhere to the code style used in the project. We use [tool/linter] for code formatting and linting.\n\n## Running Tests\nEnsure that all tests pass before submitting a pull request. Run tests with:\n```sh\nyarn test\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                prisma/data/countries-currencies-timezones.ts\n            \n            variable\n            countries\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/data/countries-dummy.ts\n            \n            variable\n            countries\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/data/countries-dummy.ts\n            \n            variable\n            countriesjson\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/data/countries-dummy.ts\n            \n            variable\n            countriesjson1\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/data/countries-dummy.ts\n            \n            variable\n            countriesList\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/data/countries-dummy.ts\n            \n            variable\n            currencies\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/seed.ts\n            \n            variable\n            prisma\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/seed.ts\n            \n            variable\n            seed\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/seed1.ts\n            \n            function\n            main\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/seed1.ts\n            \n            variable\n            prisma\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/app.module.ts\n            \n            variable\n            ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/helper/helper.module.ts\n            \n            variable\n            providers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/helper/services/apipropery.ts\n            \n            function\n            ApiProperty\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/helper/services/apipropery.ts\n            \n            variable\n            swaggerRegistry\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/helper/services/comman.query.ts\n            \n            class\n            CommonQuery1\n            \n                81 %\n                (9/11)\n            \n        \n        \n            \n                \n                src/common/helper/services/comman.query.ts\n            \n            class\n            CommonQuery5\n            \n                50 %\n                (5/10)\n            \n        \n        \n            \n                \n                src/common/helper/services/comman.query.ts\n            \n            interface\n            QueryConfig\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/helper/services/config.service.ts\n            \n            class\n            ConfigService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/helper/services/config.service.ts\n            \n            class\n            EnvVarAppConfigValidator\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/common/helper/services/pagination.service.ts\n            \n            injectable\n            PaginationService\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/common/helper/services/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/common/helper/services/util.service.ts\n            \n            class\n            UtilsService\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/config/app.config.ts\n            \n            class\n            EnvironmentVariablesValidator\n            \n                10 %\n                (1/10)\n            \n        \n        \n            \n                \n                src/config/database.config.ts\n            \n            class\n            EnvironmentVariablesValidator\n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                src/config/file.config.ts\n            \n            class\n            EnvironmentVariablesValidator\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/config/logger.config.ts\n            \n            class\n            EnvironmentVariablesValidator\n            \n                8 %\n                (1/12)\n            \n        \n        \n            \n                \n                src/config/logger.config.ts\n            \n            variable\n            getBooleanEnvVar\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/core.constant.ts\n            \n            variable\n            HTTP_STATUS_MESSAGES\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/constants/core.constant.ts\n            \n            variable\n            PUBLIC_ROUTE_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/constants/core.constant.ts\n            \n            variable\n            RESPONSE_SERIALIZATION_META_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/decorators/number.string.validator.ts\n            \n            function\n            IsNumberStringOrNumber\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/decorators/public.request.decorator.ts\n            \n            variable\n            PublicRoute\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/decorators/swagger.schema.ts\n            \n            variable\n            ApiFile\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/decorators/swagger.schema.ts\n            \n            variable\n            ApiMultiFile\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/decorators/transforms.decorator.ts\n            \n            function\n            ToNumber\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/exceptions/file-not-image.exception.ts\n            \n            class\n            FileNotImageException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/core/exceptions/http-error.filter.ts\n            \n            class\n            HttpErrorFilter\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/core/exceptions/query.ts\n            \n            class\n            Query\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/core/exceptions/user-not-found.exception.ts\n            \n            class\n            UserNotFoundException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/core/filters/all-exceptions.filter.ts\n            \n            class\n            AllExceptionsFilter\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/core/filters/bad-request.filter.ts\n            \n            class\n            BadRequestExceptionFilter\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/core/filters/constraint-errors.ts\n            \n            variable\n            constraintErrors\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/filters/http-exception.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/core/filters/prisma-exception.filter.ts\n            \n            class\n            PrismaClientExceptionFilter\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/core/filters/query-failed.filter.ts\n            \n            class\n            QueryFailedFilter\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/core/filters/query.ts\n            \n            class\n            Query\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/core/interfaces/app.interfaces.ts\n            \n            interface\n            IAppConfig\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/core/interfaces/aws.interfaces.ts\n            \n            interface\n            IAwsConfig\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/core/interfaces/file.interfaces.ts\n            \n            interface\n            IFileConfig\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/core/interfaces/jwt.interfaces.ts\n            \n            interface\n            IJWTConfig\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/core/interfaces/node-emailer.interfaces.ts\n            \n            interface\n            INodeEmailerConfig\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/core/interfaces/postgres.interfaces.ts\n            \n            interface\n            IPostgreSQLConfig\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/core/interfaces/sendgrid.interfaces.ts\n            \n            interface\n            ISendGridConfig\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/interfaces/sms.interfaces.ts\n            \n            interface\n            ISMSConfig\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/interfaces/upload-file.interfaces.ts\n            \n            interface\n            IUploadFileConfig\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/core/validators/field.validator.ts\n            \n            function\n            IsValidField\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/validators/filter.validator.ts\n            \n            injectable\n            CommaSeparated\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/core/validators/filter.validator.ts\n            \n            injectable\n            SortBy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/countries/countries.controller.ts\n            \n            controller\n            CountriesController\n            \n                40 %\n                (2/5)\n            \n        \n        \n            \n                \n                src/modules/countries/countries.service.ts\n            \n            injectable\n            CountriesService\n            \n                62 %\n                (5/8)\n            \n        \n        \n            \n                \n                src/modules/countries/dto/country.ts\n            \n            class\n            Country\n            \n                100 %\n                (15/15)\n            \n        \n        \n            \n                \n                src/modules/countries/dto/create.dto.ts\n            \n            class\n            CreateCountryDto\n            \n                91 %\n                (11/12)\n            \n        \n        \n            \n                \n                src/modules/countries/dto/query-country.dto-remove.ts\n            \n            class\n            FilterCountryDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/countries/dto/query-country.dto-remove.ts\n            \n            class\n            QueryCountryDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/countries/dto/query-country.dto-remove.ts\n            \n            class\n            SortCountryDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/countries/dto/update.dto.ts\n            \n            class\n            UpdateDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/countries/query.ts\n            \n            class\n            Query\n            \n                62 %\n                (5/8)\n            \n        \n        \n            \n                \n                src/modules/currencies/currencies.controller.ts\n            \n            controller\n            CurrenciesController\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/modules/currencies/currencies.controller.ts\n            \n            variable\n            modules\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/currencies/currencies.service.ts\n            \n            injectable\n            CurrenciesService\n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                src/modules/currencies/dto/create.dto.ts\n            \n            class\n            CreateDto\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/modules/currencies/dto/currency.ts\n            \n            class\n            Currency\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/modules/currencies/dto/update.dto.ts\n            \n            class\n            UpdateDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/currencies/query.ts\n            \n            class\n            Query\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/modules/files/domain/file.ts\n            \n            class\n            FileType\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/files/files.module.ts\n            \n            variable\n            infrastructureUploaderModule\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/files/files.service.ts\n            \n            injectable\n            FilesService\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/files/infrastructure/uploader/local/dto/file-response.dto.ts\n            \n            class\n            FileResponseDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/modules/files/infrastructure/uploader/local/files.controller.ts\n            \n            controller\n            FilesLocalController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/files/infrastructure/uploader/local/files.service.ts\n            \n            injectable\n            FilesLocalService\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/modules/files/infrastructure/uploader/s3-presigned/dto/file-response.dto.ts\n            \n            class\n            FileResponseDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/files/infrastructure/uploader/s3-presigned/dto/file.dto.ts\n            \n            class\n            FileUploadDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/files/infrastructure/uploader/s3-presigned/files.controller.ts\n            \n            controller\n            FilesS3PresignedController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/files/infrastructure/uploader/s3-presigned/files.service.ts\n            \n            injectable\n            FilesS3PresignedService\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/modules/files/infrastructure/uploader/s3/dto/file-response.dto.ts\n            \n            class\n            FileResponseDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/modules/files/infrastructure/uploader/s3/files.controller.ts\n            \n            controller\n            FilesS3Controller\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/modules/files/infrastructure/uploader/s3/files.service.ts\n            \n            injectable\n            FilesS3Service\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/modules/home/home.controller.ts\n            \n            controller\n            HomeController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/modules/home/home.service.ts\n            \n            injectable\n            HomeService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/master/address_type/address_type.controller.ts\n            \n            controller\n            AddressTypeController\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/modules/master/address_type/address_type.service.ts\n            \n            injectable\n            AddressTypeService\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                src/modules/master/address_type/dto/address_type.ts\n            \n            class\n            AddressType\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/modules/master/address_type/dto/create.dto.ts\n            \n            class\n            AddresTypeDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/modules/master/address_type/dto/update.dto.ts\n            \n            class\n            AddressUpdateDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/master/address_type/query.ts\n            \n            class\n            Query\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/modules/master/banks/bank.controller.ts\n            \n            controller\n            BankController\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/modules/master/banks/bank.service.ts\n            \n            injectable\n            BankService\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                src/modules/master/banks/dto/bank.dto.ts\n            \n            class\n            Banks\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/modules/master/banks/dto/create.dto.ts\n            \n            class\n            BankDto\n            \n                88 %\n                (8/9)\n            \n        \n        \n            \n                \n                src/modules/master/banks/dto/update.dto.ts\n            \n            class\n            BankUpdateDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/master/banks/query.ts\n            \n            class\n            Query\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/modules/master/city_mas/cities.controller.ts\n            \n            controller\n            CityController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/master/city_mas/cities.service.ts\n            \n            injectable\n            CityService\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                src/modules/master/city_mas/dto/cities.dto.ts\n            \n            class\n            Cities\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/modules/master/city_mas/dto/create.dto.ts\n            \n            class\n            CityDto\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/modules/master/city_mas/dto/update.dto.ts\n            \n            class\n            UpdateDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/master/city_mas/query.ts\n            \n            class\n            Query\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/modules/master/country_mas/country_mas.controller.ts\n            \n            controller\n            CountryController\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/modules/master/country_mas/country_mas.controller.ts\n            \n            variable\n            modules\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/master/country_mas/country_mas.service.ts\n            \n            injectable\n            CountriesService\n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                src/modules/master/country_mas/dto/country_mas.dto.ts\n            \n            class\n            CountryMas\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/modules/master/country_mas/dto/create.dto.ts\n            \n            class\n            CountryDto\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/modules/master/country_mas/dto/update.dto.ts\n            \n            class\n            UpdateDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/master/country_mas/query.ts\n            \n            class\n            Query\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/modules/master/document_groups/document_grp.controller.ts\n            \n            controller\n            DocumentGroupController\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/modules/master/document_groups/document_grp.service.ts\n            \n            injectable\n            DocumentGroupService\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                src/modules/master/document_groups/dto/create.dto.ts\n            \n            class\n            DocumentGroupDto\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/modules/master/document_groups/dto/document_grp.dto.ts\n            \n            class\n            DocumentGroup\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/modules/master/document_groups/dto/update.dto.ts\n            \n            class\n            UpdateDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/master/document_groups/query.ts\n            \n            class\n            Query\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/modules/master/documents/documents.controller.ts\n            \n            controller\n            DocumentController\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/modules/master/documents/documents.service.ts\n            \n            injectable\n            DocumentService\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                src/modules/master/documents/dto/create.dto.ts\n            \n            class\n            DocumentDto\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/modules/master/documents/dto/documents.dto.ts\n            \n            class\n            Document\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/modules/master/documents/dto/update.dto.ts\n            \n            class\n            UpdateDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/master/documents/query.ts\n            \n            class\n            Query\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/modules/master/ms-contact-type/contact.controller.ts\n            \n            controller\n            ContactController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/master/ms-contact-type/contact.service.ts\n            \n            injectable\n            ContactService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/master/ms-contact-type/dto/create.dto.ts\n            \n            class\n            ContactDto\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/modules/master/state_mas/dto/create.dto.ts\n            \n            class\n            StateDto\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/modules/master/state_mas/dto/state.dto.ts\n            \n            class\n            State\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/modules/master/state_mas/dto/update.dto.ts\n            \n            class\n            UpdateDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/master/state_mas/query.ts\n            \n            class\n            Query\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/modules/master/state_mas/state.controller.ts\n            \n            controller\n            StateController\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/modules/master/state_mas/state.service.ts\n            \n            injectable\n            StateService\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                src/providers/dynamic-query.service-to-be-remove.ts\n            \n            class\n            DynamicQueryBuilder\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/providers/dynamic-query.service-to-be-remove.ts\n            \n            interface\n            QueryOptions\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/providers/file-upload.service.ts\n            \n            variable\n            copyFile\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/providers/file-upload.service.ts\n            \n            variable\n            editFileName\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/providers/file-upload.service.ts\n            \n            variable\n            fileName\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/providers/file-upload.service.ts\n            \n            variable\n            filesRoot\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/providers/file-upload.service.ts\n            \n            variable\n            fsRoot\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/providers/file-upload.service.ts\n            \n            variable\n            imageFileFilter\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/providers/file-upload.service.ts\n            \n            variable\n            multiFileDestDir\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/providers/file-upload.service.ts\n            \n            variable\n            profileDestDir\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/providers/file-upload.service.ts\n            \n            variable\n            removeFile\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/swagger.ts\n            \n            function\n            Unnamed function\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/deep-resolver.ts\n            \n            function\n            deepResolvePromises\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/dto/pagination-response.dto.ts\n            \n            class\n            PaginationResponseDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/utils/dto/pagination-response.dto.ts\n            \n            function\n            PaginationResponse\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/dto/pagination.dto.ts\n            \n            class\n            FilterQueryDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/utils/dto/pagination.dto.ts\n            \n            class\n            PaginationQueryDto\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/utils/dto/pagination.dto.ts\n            \n            class\n            SortByDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/utils/dto/pagination.meta.dto.ts\n            \n            class\n            PaginationMetaDto\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/utils/dto/pagination.meta.dto.ts\n            \n            interface\n            IPageMetaDtoParameters\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/utils/serializer.interceptor.ts\n            \n            injectable\n            ResolvePromisesInterceptor\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/utils/transformers/lower-case.transformer.ts\n            \n            variable\n            lowerCaseTransformer\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/transformers/upper-case.transformer.ts\n            \n            variable\n            upperCaseTransformer\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/types/pagination-options.ts\n            \n            interface\n            IPaginationFieldConfig\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/utils/validate-config.ts\n            \n            function\n            validateConfig\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @aws-sdk/client-s3 : ^3.609.0\n        \n            @aws-sdk/s3-request-presigner : ^3.613.0\n        \n            @express-rate-limit/tsconfig : ^1.0.2\n        \n            @infineit/winston-logger : ^1.0.23\n        \n            @nestjs/axios : ^3.0.2\n        \n            @nestjs/common : ^10.3.9\n        \n            @nestjs/config : ^3.2.2\n        \n            @nestjs/core : ^10.3.9\n        \n            @nestjs/microservices : ^10.4.4\n        \n            @nestjs/platform-express : ^10.3.9\n        \n            @nestjs/swagger : ^7.3.1\n        \n            @nestjs/terminus : ^10.2.3\n        \n            @prisma/client : ^5.17.0\n        \n            amqp-connection-manager : ^4.1.14\n        \n            axios : ^1.7.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            compression : ^1.7.4\n        \n            exonerate : ^1.1.0\n        \n            express : ^4.19.2\n        \n            express-rate-limit : ^7.4.0\n        \n            helmet : ^7.1.0\n        \n            install : ^0.13.0\n        \n            multer : ^1.4.5-lts.1\n        \n            multer-s3 : ^3.0.1\n        \n            nestjs-pino : ^4.1.0\n        \n            npm : ^10.8.3\n        \n            pg : ^8.12.0\n        \n            pino-pretty : ^11.2.2\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.1\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Environment   (src/.../app.config.ts)\n                        \n                        \n                            Environment   (src/.../logger.config.ts)\n                        \n                        \n                            FileDriver   (src/.../file-config.type.ts)\n                        \n                        \n                            PaginationType   (src/.../pagination.dto.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/app.config.ts\n    \n        \n            \n                \n                    \n                        \n                        Environment\n                    \n                \n                        \n                            \n                                 Development\n                            \n                        \n                        \n                            \n                                Value : development\n                            \n                        \n                        \n                            \n                                 Production\n                            \n                        \n                        \n                            \n                                Value : production\n                            \n                        \n                        \n                            \n                                 Staging\n                            \n                        \n                        \n                            \n                                Value : staging\n                            \n                        \n                        \n                            \n                                 Test\n                            \n                        \n                        \n                            \n                                Value : testing\n                            \n                        \n            \n        \n\n    src/config/logger.config.ts\n    \n        \n            \n                \n                    \n                        \n                        Environment\n                    \n                \n                        \n                            \n                                 Development\n                            \n                        \n                        \n                            \n                                Value : development\n                            \n                        \n                        \n                            \n                                 Production\n                            \n                        \n                        \n                            \n                                Value : production\n                            \n                        \n                        \n                            \n                                 Staging\n                            \n                        \n                        \n                            \n                                Value : staging\n                            \n                        \n                        \n                            \n                                 Test\n                            \n                        \n                        \n                            \n                                Value : testing\n                            \n                        \n            \n        \n\n    src/config/type/file-config.type.ts\n    \n        \n            \n                \n                    \n                        \n                        FileDriver\n                    \n                \n                    \n                        \n                            Enum representing the available file storage drivers.\n\n                        \n                    \n                        \n                            \n                                 LOCAL\n                            \n                        \n                        \n                            \n                                Value : local\n                            \n                        \n                        \n                            \n                                 S3\n                            \n                        \n                        \n                            \n                                Value : s3\n                            \n                        \n                        \n                            \n                                 S3_PRESIGNED\n                            \n                        \n                        \n                            \n                                Value : s3-presigned\n                            \n                        \n            \n        \n\n    src/utils/dto/pagination.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        PaginationType\n                    \n                \n                    \n                        \n                            Enum representing different pagination types.\n\n                        \n                    \n                        \n                            \n                                 NONE\n                            \n                        \n                        \n                            \n                                Value : no\n                            \n                        \n                        \n                            \n                                 INFINITY\n                            \n                        \n                        \n                            \n                                Value : infinity\n                            \n                        \n                        \n                            \n                                 PAGINATE\n                            \n                        \n                        \n                            \n                                Value : paginate\n                            \n                        \n                        \n                            \n                                 ALL\n                            \n                        \n                        \n                            \n                                Value : all\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ApiProperty   (src/.../apipropery.ts)\n                        \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            deepResolvePromises   (src/.../deep-resolver.ts)\n                        \n                        \n                            IsNumberStringOrNumber   (src/.../number.string.validator.ts)\n                        \n                        \n                            IsValidField   (src/.../field.validator.ts)\n                        \n                        \n                            main   (prisma/.../seed1.ts)\n                        \n                        \n                            PaginationResponse   (src/.../pagination-response.dto.ts)\n                        \n                        \n                            ToNumber   (src/.../transforms.decorator.ts)\n                        \n                        \n                            Unnamed function   (src/.../swagger.ts)\n                        \n                        \n                            validateConfig   (src/.../validate-config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/helper/services/apipropery.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ApiProperty\n                        \n                    \n                \n            \n            \n                \nApiProperty(options: any)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                    Initializes and starts the NestJS application.\nConfigures global settings, middleware, and exception handling.\nSets up Swagger documentation if in development, staging, or testing environments.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise that resolves when the server starts.\n\n                    \n                \n            \n        \n    \n    src/utils/deep-resolver.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        deepResolvePromises\n                        \n                    \n                \n            \n            \n                \ndeepResolvePromises(input)\n                \n            \n\n\n\n\n            \n                \n                    Recursively resolves all nested promises in an object or array.\nThis function takes an input that can be a promise, an array, an object, or a primitive value,\nand recursively resolves any promises contained within. It supports nested structures and\npreserves the original structure of the input while resolving promises.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    input\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe input to process, which may include promises.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            // Example usage with promises in an array\nconst data = [Promise.resolve(1), Promise.resolve([2, Promise.resolve(3)])];\ndeepResolvePromises(data).then(result =&gt; {\nconsole.log(result); // Output: [1, [2, 3]]\n});\n                        \n                        \n                            // Example usage with promises in an object\nconst obj = {\na: Promise.resolve(1),\nb: {\nc: Promise.resolve(2),\nd: [Promise.resolve(3), 4]\n}\n};\ndeepResolvePromises(obj).then(result =&gt; {\nconsole.log(result); // Output: { a: 1, b: { c: 2, d: [3, 4] } }\n});\n                        \n                    \n                \n            \n        \n    \n    src/core/decorators/number.string.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsNumberStringOrNumber\n                        \n                    \n                \n            \n            \n                \nIsNumberStringOrNumber(validationOptions?)\n                \n            \n\n\n\n\n            \n                \n                    Custom decorator that checks if a value is a number or a numeric string,\nand if it is greater than or equal to 1.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    validationOptions\n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nOptions used to pass to validation decorators.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            // Usage in a class property\nclass ExampleDto {\n                        \n                    \n                \n            \n        \n    \n    src/core/validators/field.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsValidField\n                        \n                    \n                \n            \n            \n                \nIsValidField(entity: any, validationOptions?)\n                \n            \n\n\n\n\n            \n                \n                    Custom decorator to validate if a field is a valid key of the provided entity class.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    entity\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe class constructor of the entity to check against.\n\n\n                                    \n                                \n                                \n                                    validationOptions\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nOptional validation options.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    prisma/seed1.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        main\n                        \n                    \n                \n            \n            \n                \nmain()\n                \n            \n\n\n\n\n        \n    \n    src/utils/dto/pagination-response.dto.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PaginationResponse\n                        \n                    \n                \n            \n            \n                \nPaginationResponse(classReference)\n                \n            \n\n\n\n\n            \n                \n                    Creates a pagination response DTO class with specified data type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    classReference\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe class reference for the data type.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/core/decorators/transforms.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ToNumber\n                        \n                    \n                \n            \n            \n                \nToNumber()\n                \n            \n\n\n\n\n            \n                \n                    Decorator that converts a string number or number to an integer.\n\n\n                    \n                        Example :\n                        \n                            ```typescript\n\nimport { ToNumber } from &#39;./path/to/decorator&#39;;\n\nclass ExampleClass {\n  @ToNumber()\n  public value: number;\n}\n```\n\n                        \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \nA property decorator function.\n\n\n                    \n                \n            \n        \n    \n    src/swagger.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Unnamed function\n                        \n                    \n                \n            \n            \n                \nUnnamed function(app)\n                \n            \n\n\n\n\n            \n                \n                    Configures and sets up Swagger documentation for the NestJS application.\nThis function creates and configures Swagger documentation based on application configuration.\nIt sets up two separate Swagger documents: one for the main application modules and another\nfor common modules. It also configures various Swagger UI options.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    app\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe NestJS application instance.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            import { NestFactory } from &#39;\n                        \n                    \n                \n            \n        \n    \n    src/utils/validate-config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        validateConfig\n                        \n                    \n                \n            \n            \n                \nvalidateConfig(config, envVariablesClass)\n                \n            \n\n\n\n\n            \n                \n                    Validates and transforms a configuration object based on a class schema.\nThis function uses class-transformer to transform a plain object into an instance of a class\nand class-validator to validate the instance. If validation fails, it throws an error with\ndetailed information about the validation errors.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    config\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe configuration object to be validated.\n\n\n                                    \n                                \n                                \n                                    envVariablesClass\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe class constructor used for transforming and validating the configuration.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            class Config {\n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nNestJS Starter Boilerplate\nIntroduction\nIntroducing the NestJS boilerplate - a great way to get started on your next Node.js project! It's built using the latest version of NestJS, which is a powerful and flexible framework for creating efficient and scalable server-side applications. The boilerplate includes TypeScript, PostgreSQL, and JWT authentication right out of the box, so you don't have to worry about setting those up yourself.\nOther awesome features include configuration support with Dotenv, Prisma for interacting with databases, Swagger for API documentation, and Docker Compose for container orchestration. Plus, the boilerplate also comes with pre-configured linting tools and secure HTTP headers with Helmet.\nGetting started is easy - just clone the repository, install the dependencies, and you're ready to start building your next great idea!\n🚀 Features\n\n📱 NestJS — latest version\n🎉 TypeScript - Type checking\n⚙️ Dotenv - Supports environment variables\n🗝 Authentication - JWT, RSA256\n🏬 Authorization - RBAC, CBAC\n🏪 Prisma - Database ORM\n🏪 PostgreSQL - Open-Source Relational Database\n🧠 Configuration - Single config for all\n📃 Swagger - API Documentation\n🐳 Docker Compose - Container Orchestration\n🔐 Helmet - secure HTTP headers\n📏 ESLint — Pluggable JavaScript linter\n💖 Prettier - Opinionated Code Formatter\n✨ Commitlint - Lint your conventional commits\n🕵️‍♂️ Code Scanning - Code scanning with CodeQL\n\nGetting Started\nPrerequisites\nEnsure you have the following installed:\n\nNode.js (20+)\nYarn or npm (yarn recomandation)\nDocker (if applicable)\n\nInstallation\n\nClone the repository:\n```sh\ngit clone https://github.com/dharmesh--patel/nestjs-starter.git\ncd yourproject\n\nVisual Studio Code Extensions\n- ESLint - `dbaeumer.vscode-eslint` - Dirk Baeumer\n\n- Prettier - Code formatter by `esbenp.prettier-vscode` - Esben Petersen\n \n- Prisma - `Prisma.prisma` - prisma.io\n\n- Dockfile - `foxundermoon.shell-format` - foxundermoon\n\n- markdown - `yzhang.markdown-all-in-one` - Yu Zhang\n\n- To open the command pallette, \n  you can use Command + Shift + P on Mac or Control + Shift + P on Windows. \n  In the command pallette search format, then choose Format Document.Installation\n$ yarnRunning Server\nDevelopment / Staging / Production\n# development\n$ yarn start\n\n# staging\n$ yarn staging\n\n# production\n$ yarn productionBuild\nyarn buildTests\n# unit tests\n$ yarn test\n\n# e2e tests\n$ yarn test:e2e\n\n# test coverage\n$ yarn test:covDatabase Migration Development\n   # Change in database file (it will create migration file in prisma/migration)\n   $ yarn migrationDocker Container and Database Migration for Staging/Production\n   # To run docker file run script (it will create docker container run update database)\n   $ bash ./start.sh staging/productionDocker Container down\n   # To run docker file run script (it will create docker container run update database)\n   $ bash ./stop.sh staging/productionRunning all services on Docker\ndocker-compose up --buildRun only database and redis services on Docker\ndocker-compose up postgres redisSwagger Documentation\n\nSwagger documentation endpoint will be running at  /docs .\n\nK8s Deployment Local\n# first start minikube\nminikube start\n\n# deployment\nkubectl apply -f k8s/\n\n# get endpoint of k8s cluster\nminikube service nestjs-starter-serviceCommit Message Guidelines\n[optional scope]: \n[optional body]\n[optional footer(s)]\nType: The type of change (e.g., feat, fix, docs, style, refactor, test, chore).\nScope: The scope of the change (e.g., core, api, config), which is optional.\nDescription: A short, imperative summary of the change.\nBody: Detailed explanation of the change, which is optional.\nFooter: Any footer notes, such as breaking changes or issues closed, which is optional.\ngit commit -m \"feat(api): add new endpoint for user registration\"\ngit commit -m \"fix(core): handle edge case in data processing\"\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nLicense\nNest is MIT licensed.\nAuthor\n🇮🇳 Dharmesh Patel \nGithub\nLinkedin\nInstagram\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2024 Dharmesh Patel\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AddressTypeModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ApiModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        BankModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CityModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ContactModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CountriesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CountryMasModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CurrenciesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DocumentGroupModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DocumentModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FilesLocalModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FilesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FilesS3Module\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FilesS3PresignedModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HelperModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HomeModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StateModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AddressTypeModule\n\n\n\ncluster_AddressTypeModule_exports\n\n\n\ncluster_AddressTypeModule_providers\n\n\n\ncluster_ApiModule\n\n\n\ncluster_ApiModule_imports\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_BankModule\n\n\n\ncluster_BankModule_exports\n\n\n\ncluster_BankModule_providers\n\n\n\ncluster_CityModule\n\n\n\ncluster_CityModule_exports\n\n\n\ncluster_CityModule_providers\n\n\n\ncluster_ContactModule\n\n\n\ncluster_ContactModule_providers\n\n\n\ncluster_CountriesModule\n\n\n\ncluster_CountriesModule_exports\n\n\n\ncluster_CountriesModule_providers\n\n\n\ncluster_CurrenciesModule\n\n\n\ncluster_CurrenciesModule_providers\n\n\n\ncluster_DocumentGroupModule\n\n\n\ncluster_DocumentGroupModule_exports\n\n\n\ncluster_DocumentGroupModule_providers\n\n\n\ncluster_DocumentModule\n\n\n\ncluster_DocumentModule_exports\n\n\n\ncluster_DocumentModule_providers\n\n\n\ncluster_FilesLocalModule\n\n\n\ncluster_FilesLocalModule_exports\n\n\n\ncluster_FilesLocalModule_providers\n\n\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_imports\n\n\n\ncluster_FilesModule_exports\n\n\n\ncluster_FilesModule_providers\n\n\n\ncluster_FilesS3Module\n\n\n\ncluster_FilesS3Module_exports\n\n\n\ncluster_FilesS3Module_providers\n\n\n\ncluster_FilesS3PresignedModule\n\n\n\ncluster_FilesS3PresignedModule_exports\n\n\n\ncluster_FilesS3PresignedModule_providers\n\n\n\ncluster_HelperModule\n\n\n\ncluster_HelperModule_exports\n\n\n\ncluster_HelperModule_providers\n\n\n\ncluster_HomeModule\n\n\n\ncluster_HomeModule_providers\n\n\n\ncluster_StateModule\n\n\n\ncluster_StateModule_exports\n\n\n\ncluster_StateModule_providers\n\n\n\n\nAddressTypeService \n\nAddressTypeService \n\n\n\nAddressTypeModule\n\nAddressTypeModule\n\nAddressTypeService  -->\n\nAddressTypeModule->AddressTypeService \n\n\n\n\n\nApiModule\n\nApiModule\n\nApiModule -->\n\nAddressTypeModule->ApiModule\n\n\n\n\n\nAddressTypeService\n\nAddressTypeService\n\nAddressTypeModule -->\n\nAddressTypeService->AddressTypeModule\n\n\n\n\n\nBankModule\n\nBankModule\n\nApiModule -->\n\nBankModule->ApiModule\n\n\n\n\n\nBankService \n\nBankService \n\nBankService  -->\n\nBankModule->BankService \n\n\n\n\n\nCityModule\n\nCityModule\n\nApiModule -->\n\nCityModule->ApiModule\n\n\n\n\n\nCityService \n\nCityService \n\nCityService  -->\n\nCityModule->CityService \n\n\n\n\n\nContactModule\n\nContactModule\n\nApiModule -->\n\nContactModule->ApiModule\n\n\n\n\n\nCountriesModule\n\nCountriesModule\n\nApiModule -->\n\nCountriesModule->ApiModule\n\n\n\n\n\nCountriesService \n\nCountriesService \n\nCountriesService  -->\n\nCountriesModule->CountriesService \n\n\n\n\n\nCountryMasModule\n\nCountryMasModule\n\nApiModule -->\n\nCountryMasModule->ApiModule\n\n\n\nCountriesService  -->\n\nCountryMasModule->CountriesService \n\n\n\n\n\nCurrenciesModule\n\nCurrenciesModule\n\nApiModule -->\n\nCurrenciesModule->ApiModule\n\n\n\n\n\nDocumentGroupModule\n\nDocumentGroupModule\n\nApiModule -->\n\nDocumentGroupModule->ApiModule\n\n\n\n\n\nDocumentGroupService \n\nDocumentGroupService \n\nDocumentGroupService  -->\n\nDocumentGroupModule->DocumentGroupService \n\n\n\n\n\nDocumentModule\n\nDocumentModule\n\nApiModule -->\n\nDocumentModule->ApiModule\n\n\n\n\n\nDocumentService \n\nDocumentService \n\nDocumentService  -->\n\nDocumentModule->DocumentService \n\n\n\n\n\nFilesModule\n\nFilesModule\n\nApiModule -->\n\nFilesModule->ApiModule\n\n\n\n\n\nFilesService \n\nFilesService \n\nFilesService  -->\n\nFilesModule->FilesService \n\n\n\n\n\nHomeModule\n\nHomeModule\n\nApiModule -->\n\nHomeModule->ApiModule\n\n\n\n\n\nStateModule\n\nStateModule\n\nApiModule -->\n\nStateModule->ApiModule\n\n\n\n\n\nStateService \n\nStateService \n\nStateService  -->\n\nStateModule->StateService \n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nApiModule->AppModule\n\n\n\n\n\nHelperModule\n\nHelperModule\n\nAppModule -->\n\nHelperModule->AppModule\n\n\n\n\n\nCommonQuery5 \n\nCommonQuery5 \n\nCommonQuery5  -->\n\nHelperModule->CommonQuery5 \n\n\n\n\n\nPaginationService \n\nPaginationService \n\nPaginationService  -->\n\nHelperModule->PaginationService \n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nHelperModule->PrismaService \n\n\n\n\n\nUtilsService \n\nUtilsService \n\nUtilsService  -->\n\nHelperModule->UtilsService \n\n\n\n\n\nBankService\n\nBankService\n\nBankModule -->\n\nBankService->BankModule\n\n\n\n\n\nCityService\n\nCityService\n\nCityModule -->\n\nCityService->CityModule\n\n\n\n\n\nContactService\n\nContactService\n\nContactModule -->\n\nContactService->ContactModule\n\n\n\n\n\nCountriesService\n\nCountriesService\n\nCountriesModule -->\n\nCountriesService->CountriesModule\n\n\n\nCountryMasModule -->\n\nCountriesService->CountryMasModule\n\n\n\n\n\nCurrenciesService\n\nCurrenciesService\n\nCurrenciesModule -->\n\nCurrenciesService->CurrenciesModule\n\n\n\n\n\nDocumentGroupService\n\nDocumentGroupService\n\nDocumentGroupModule -->\n\nDocumentGroupService->DocumentGroupModule\n\n\n\n\n\nDocumentService\n\nDocumentService\n\nDocumentModule -->\n\nDocumentService->DocumentModule\n\n\n\n\n\nFilesLocalService \n\nFilesLocalService \n\n\n\nFilesLocalModule\n\nFilesLocalModule\n\nFilesLocalService  -->\n\nFilesLocalModule->FilesLocalService \n\n\n\n\n\nFilesLocalService\n\nFilesLocalService\n\nFilesLocalModule -->\n\nFilesLocalService->FilesLocalModule\n\n\n\n\n\nFilesS3Module\n\nFilesS3Module\n\nFilesModule -->\n\nFilesS3Module->FilesModule\n\n\n\n\n\nFilesS3Service \n\nFilesS3Service \n\nFilesS3Service  -->\n\nFilesS3Module->FilesS3Service \n\n\n\n\n\nFilesS3PresignedModule\n\nFilesS3PresignedModule\n\nFilesModule -->\n\nFilesS3PresignedModule->FilesModule\n\n\n\n\n\nFilesS3PresignedService \n\nFilesS3PresignedService \n\nFilesS3PresignedService  -->\n\nFilesS3PresignedModule->FilesS3PresignedService \n\n\n\n\n\nFilesService\n\nFilesService\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\nFilesS3Service\n\nFilesS3Service\n\nFilesS3Module -->\n\nFilesS3Service->FilesS3Module\n\n\n\n\n\nFilesS3PresignedService\n\nFilesS3PresignedService\n\nFilesS3PresignedModule -->\n\nFilesS3PresignedService->FilesS3PresignedModule\n\n\n\n\n\nPaginationService\n\nPaginationService\n\nHelperModule -->\n\nPaginationService->HelperModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nHelperModule -->\n\nPrismaService->HelperModule\n\n\n\n\n\nHomeService\n\nHomeService\n\nHomeModule -->\n\nHomeService->HomeModule\n\n\n\n\n\nStateService\n\nStateService\n\nStateModule -->\n\nStateService->StateModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        18 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    15 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    20 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    70 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    13 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AllConfigType   (src/.../config.type.ts)\n                        \n                        \n                            AppConfig   (src/.../app-config.type.ts)\n                        \n                        \n                            DatabaseConfig   (src/.../database-config.type.ts)\n                        \n                        \n                            DeepPartial   (src/.../deep-partial.type.ts)\n                        \n                        \n                            FileConfig   (src/.../file-config.type.ts)\n                        \n                        \n                            LoggerConfig   (src/.../logger-config.type.ts)\n                        \n                        \n                            MaybeType   (src/.../maybe.type.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/type/config.type.ts\n    \n    \n        \n            \n                \n                    \n                    AllConfigType\n                \n            \n            \n                \n                    Aggregated configuration type for the entire application.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/config/type/app-config.type.ts\n    \n    \n        \n            \n                \n                    \n                    AppConfig\n                \n            \n            \n                \n                    Configuration settings for the application.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/config/type/database-config.type.ts\n    \n    \n        \n            \n                \n                    \n                    DatabaseConfig\n                \n            \n            \n                \n                    Configuration settings for database connectivity.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/utils/types/deep-partial.type.ts\n    \n    \n        \n            \n                \n                    \n                    DeepPartial\n                \n            \n            \n                \n                    A utility type that recursively makes all properties of a given type T optional.\nThis allows for partial objects to be deeply nested within the original type T.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/config/type/file-config.type.ts\n    \n    \n        \n            \n                \n                    \n                    FileConfig\n                \n            \n            \n                \n                    Configuration settings for file storage.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/config/type/logger-config.type.ts\n    \n    \n        \n            \n                \n                    \n                    LoggerConfig\n                \n            \n            \n                \n                    Configuration settings for the application.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/utils/types/maybe.type.ts\n    \n    \n        \n            \n                \n                    \n                    MaybeType\n                \n            \n            \n                \n                    A utility type that represents a type T that may be either of type T or undefined.\nThis is useful for cases where a value may or may not be present.\n\n                \n            \n            \n                \n                        T | undefined\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
